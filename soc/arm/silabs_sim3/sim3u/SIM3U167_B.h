/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     /home/ctae/projects/create_sim3u_svd/SiM3U167_B.h
 * @brief    CMSIS HeaderFile
 * @version  1
 * @date     18. March 2019
 * @note     Generated by SVDConv V3.3.21 on Monday, 18.03.2019 16:14:36
 *           from File '/home/ctae/projects/create_sim3u_svd/sim3u.svd',
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup SiM3U167_B
  * @{
  */


#ifndef SIM3U167_B_H
#define SIM3U167_B_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  SiM3U167_B Specific Interrupt Numbers  ========================================= */
  WDTIMER0_IRQn             =   0,              /*!< 0  WDTIMER0                                                               */
  PBEXT0_IRQn               =   1,              /*!< 1  PBEXT0                                                                 */
  PBEXT1_IRQn               =   2,              /*!< 2  PBEXT1                                                                 */
  RTC0ALRM_IRQn             =   3,              /*!< 3  RTC0ALRM                                                               */
  DMACH0_IRQn               =   4,              /*!< 4  DMACH0                                                                 */
  DMACH1_IRQn               =   5,              /*!< 5  DMACH1                                                                 */
  DMACH2_IRQn               =   6,              /*!< 6  DMACH2                                                                 */
  DMACH3_IRQn               =   7,              /*!< 7  DMACH3                                                                 */
  DMACH4_IRQn               =   8,              /*!< 8  DMACH4                                                                 */
  DMACH5_IRQn               =   9,              /*!< 9  DMACH5                                                                 */
  DMACH6_IRQn               =  10,              /*!< 10 DMACH6                                                                 */
  DMACH7_IRQn               =  11,              /*!< 11 DMACH7                                                                 */
  DMACH8_IRQn               =  12,              /*!< 12 DMACH8                                                                 */
  DMACH9_IRQn               =  13,              /*!< 13 DMACH9                                                                 */
  DMACH10_IRQn              =  14,              /*!< 14 DMACH10                                                                */
  DMACH11_IRQn              =  15,              /*!< 15 DMACH11                                                                */
  DMACH12_IRQn              =  16,              /*!< 16 DMACH12                                                                */
  DMACH13_IRQn              =  17,              /*!< 17 DMACH13                                                                */
  DMACH14_IRQn              =  18,              /*!< 18 DMACH14                                                                */
  DMACH15_IRQn              =  19,              /*!< 19 DMACH15                                                                */
  TIMER0L_IRQn              =  20,              /*!< 20 TIMER0L                                                                */
  TIMER0H_IRQn              =  21,              /*!< 21 TIMER0H                                                                */
  TIMER1L_IRQn              =  22,              /*!< 22 TIMER1L                                                                */
  TIMER1H_IRQn              =  23,              /*!< 23 TIMER1H                                                                */
  EPCA0_IRQn                =  24,              /*!< 24 EPCA0                                                                  */
  PCA0_IRQn                 =  25,              /*!< 25 PCA0                                                                   */
  PCA1_IRQn                 =  26,              /*!< 26 PCA1                                                                   */
  USART0_IRQn               =  27,              /*!< 27 USART0                                                                 */
  USART1_IRQn               =  28,              /*!< 28 USART1                                                                 */
  SPI0_IRQn                 =  29,              /*!< 29 SPI0                                                                   */
  SPI1_IRQn                 =  30,              /*!< 30 SPI1                                                                   */
  SPI2_IRQn                 =  31,              /*!< 31 SPI2                                                                   */
  I2C0_IRQn                 =  32,              /*!< 32 I2C0                                                                   */
  I2C1_IRQn                 =  33,              /*!< 33 I2C1                                                                   */
  USB0_IRQn                 =  34,              /*!< 34 USB0                                                                   */
  SARADC0_IRQn              =  35,              /*!< 35 SARADC0                                                                */
  SARADC1_IRQn              =  36,              /*!< 36 SARADC1                                                                */
  CMP0_IRQn                 =  37,              /*!< 37 CMP0                                                                   */
  CMP1_IRQn                 =  38,              /*!< 38 CMP1                                                                   */
  CAPSENSE0_IRQn            =  39,              /*!< 39 CAPSENSE0                                                              */
  I2S0RX_IRQn               =  40,              /*!< 40 I2S0RX                                                                 */
  I2S0TX_IRQn               =  41,              /*!< 41 I2S0TX                                                                 */
  AES0_IRQn                 =  42,              /*!< 42 AES0                                                                   */
  VDDLOW_IRQn               =  43,              /*!< 43 VDDLOW                                                                 */
  RTC0FAIL_IRQn             =  44,              /*!< 44 RTC0FAIL                                                               */
  PMATCH0_IRQn              =  45,              /*!< 45 PMATCH0                                                                */
  UART0_IRQn                =  46,              /*!< 46 UART0                                                                  */
  UART1_IRQn                =  47,              /*!< 47 UART1                                                                  */
  IDAC0_IRQn                =  48,              /*!< 48 IDAC0                                                                  */
  IDAC1_IRQn                =  49,              /*!< 49 IDAC1                                                                  */
  LPTIMER0_IRQn             =  50,              /*!< 50 LPTIMER0                                                               */
  PLL0_IRQn                 =  51,              /*!< 51 PLL0                                                                   */
  VBUS_Invalid_IRQn         =  52,              /*!< 52 VBUS_Invalid                                                           */
  VREGLOW_IRQn              =  53               /*!< 53 VREGLOW                                                                */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0200U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               4        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present or not                                                        */
#define __FPU_PRESENT                  0        /*!< FPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */
#include "system_sim3u.h"                  /*!< SiM3U167_B System                                                         */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief USART_DATA [DATA] (DATA)
  */
typedef struct {
  union {
    __IOM uint32_t U32;                         /*!< (@ 0x00000000) U32                                                        */
    __IOM uint16_t U16;                         /*!< (@ 0x00000000) U16                                                        */
    __IOM uint8_t U8;                           /*!< (@ 0x00000000) U8                                                         */
  };
} USART_DATA_Type;                              /*!< Size = 4 (0x4)                                                            */


/**
  * @brief UART_DATA [DATA] (DATA)
  */
typedef struct {
  union {
    __IOM uint32_t U32;                         /*!< (@ 0x00000000) U32                                                        */
    __IOM uint16_t U16;                         /*!< (@ 0x00000000) U16                                                        */
    __IOM uint8_t U8;                           /*!< (@ 0x00000000) U8                                                         */
  };
} UART_DATA_Type;                               /*!< Size = 4 (0x4)                                                            */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          USART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (USART0)
  */

typedef struct {                                /*!< (@ 0x40000000) USART0 Structure                                           */
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000000) CONFIG                                                     */
    
    struct {
      __IOM uint32_t RSTRTEN    : 1;            /*!< [0..0] RSTRTEN                                                            */
      __IOM uint32_t RPAREN     : 1;            /*!< [1..1] RPAREN                                                             */
      __IOM uint32_t RSTPEN     : 1;            /*!< [2..2] RSTPEN                                                             */
      __IOM uint32_t RSTPMD     : 2;            /*!< [4..3] RSTPMD                                                             */
      __IOM uint32_t RPARMD     : 2;            /*!< [6..5] RPARMD                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t RDATLN     : 3;            /*!< [10..8] RDATLN                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t RSCEN      : 1;            /*!< [12..12] RSCEN                                                            */
      __IOM uint32_t RIRDAEN    : 1;            /*!< [13..13] RIRDAEN                                                          */
      __IOM uint32_t RINVEN     : 1;            /*!< [14..14] RINVEN                                                           */
      __IOM uint32_t RSYNCEN    : 1;            /*!< [15..15] RSYNCEN                                                          */
      __IOM uint32_t TSTRTEN    : 1;            /*!< [16..16] TSTRTEN                                                          */
      __IOM uint32_t TPAREN     : 1;            /*!< [17..17] TPAREN                                                           */
      __IOM uint32_t TSTPEN     : 1;            /*!< [18..18] TSTPEN                                                           */
      __IOM uint32_t TSTPMD     : 2;            /*!< [20..19] TSTPMD                                                           */
      __IOM uint32_t TPARMD     : 2;            /*!< [22..21] TPARMD                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDATLN     : 3;            /*!< [26..24] TDATLN                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TSCEN      : 1;            /*!< [28..28] TSCEN                                                            */
      __IOM uint32_t TIRDAEN    : 1;            /*!< [29..29] TIRDAEN                                                          */
      __IOM uint32_t TINVEN     : 1;            /*!< [30..30] TINVEN                                                           */
      __IOM uint32_t TSYNCEN    : 1;            /*!< [31..31] TSYNCEN                                                          */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000004) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000008) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000010) MODE                                                       */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t DBGMD      : 1;            /*!< [16..16] DBGMD                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBMD       : 2;            /*!< [19..18] LBMD                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPSTCLK   : 1;            /*!< [21..21] STPSTCLK                                                         */
      __IOM uint32_t STRTSTCLK  : 1;            /*!< [22..22] STRTSTCLK                                                        */
      __IOM uint32_t ISTCLK     : 1;            /*!< [23..23] ISTCLK                                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t DUPLEXMD   : 1;            /*!< [27..27] DUPLEXMD                                                         */
      __IOM uint32_t CLKIDLE    : 1;            /*!< [28..28] CLKIDLE                                                          */
      __IOM uint32_t CLKESEL    : 1;            /*!< [29..29] CLKESEL                                                          */
      __IOM uint32_t ITSEN      : 1;            /*!< [30..30] ITSEN                                                            */
      __IOM uint32_t OPMD       : 1;            /*!< [31..31] OPMD                                                             */
    } MODE_b;
  } ;
  __IOM uint32_t  MODE_SET;                     /*!< (@ 0x00000014) MODE_SET                                                   */
  __IOM uint32_t  MODE_CLR;                     /*!< (@ 0x00000018) MODE_CLR                                                   */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t FLOWCN;                      /*!< (@ 0x00000020) FLOWCN                                                     */
    
    struct {
      __IOM uint32_t RTS        : 1;            /*!< [0..0] RTS                                                                */
      __IOM uint32_t RX         : 1;            /*!< [1..1] RX                                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTSINVEN   : 1;            /*!< [5..5] RTSINVEN                                                           */
      __IOM uint32_t RTSTH      : 1;            /*!< [6..6] RTSTH                                                              */
      __IOM uint32_t RTSEN      : 1;            /*!< [7..7] RTSEN                                                              */
      __IM  uint32_t            : 8;
      __IOM uint32_t CTS        : 1;            /*!< [16..16] CTS                                                              */
      __IOM uint32_t TX         : 1;            /*!< [17..17] TX                                                               */
      __IOM uint32_t UCLK       : 1;            /*!< [18..18] UCLK                                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t CTSINVEN   : 1;            /*!< [21..21] CTSINVEN                                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t CTSEN      : 1;            /*!< [23..23] CTSEN                                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t TIRDAPW    : 2;            /*!< [29..28] TIRDAPW                                                          */
    } FLOWCN_b;
  } ;
  __IOM uint32_t  FLOWCN_SET;                   /*!< (@ 0x00000024) FLOWCN_SET                                                 */
  __IOM uint32_t  FLOWCN_CLR;                   /*!< (@ 0x00000028) FLOWCN_CLR                                                 */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000030) CONTROL                                                    */
    
    struct {
      __IOM uint32_t RFRMERI    : 1;            /*!< [0..0] RFRMERI                                                            */
      __IOM uint32_t RPARERI    : 1;            /*!< [1..1] RPARERI                                                            */
      __IOM uint32_t ROREI      : 1;            /*!< [2..2] ROREI                                                              */
      __IOM uint32_t RDREQI     : 1;            /*!< [3..3] RDREQI                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t RERIEN     : 1;            /*!< [5..5] RERIEN                                                             */
      __IOM uint32_t RDREQIEN   : 1;            /*!< [6..6] RDREQIEN                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t MATMD      : 2;            /*!< [9..8] MATMD                                                              */
      __IOM uint32_t RABDEN     : 1;            /*!< [10..10] RABDEN                                                           */
      __IOM uint32_t RBUSYF     : 1;            /*!< [11..11] RBUSYF                                                           */
      __IOM uint32_t RBIT       : 1;            /*!< [12..12] RBIT                                                             */
      __IOM uint32_t ROSEN      : 1;            /*!< [13..13] ROSEN                                                            */
      __IOM uint32_t RINH       : 1;            /*!< [14..14] RINH                                                             */
      __IOM uint32_t REN        : 1;            /*!< [15..15] REN                                                              */
      __IOM uint32_t TSCERI     : 1;            /*!< [16..16] TSCERI                                                           */
      __IOM uint32_t TUREI      : 1;            /*!< [17..17] TUREI                                                            */
      __IOM uint32_t TDREQI     : 1;            /*!< [18..18] TDREQI                                                           */
      __IOM uint32_t TCPTI      : 1;            /*!< [19..19] TCPTI                                                            */
      __IOM uint32_t TCPTTH     : 1;            /*!< [20..20] TCPTTH                                                           */
      __IOM uint32_t TERIEN     : 1;            /*!< [21..21] TERIEN                                                           */
      __IOM uint32_t TDREQIEN   : 1;            /*!< [22..22] TDREQIEN                                                         */
      __IOM uint32_t TCPTIEN    : 1;            /*!< [23..23] TCPTIEN                                                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t TBUSYF     : 1;            /*!< [27..27] TBUSYF                                                           */
      __IOM uint32_t TBIT       : 1;            /*!< [28..28] TBIT                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TINH       : 1;            /*!< [30..30] TINH                                                             */
      __IOM uint32_t TEN        : 1;            /*!< [31..31] TEN                                                              */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000034) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000038) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t IPDELAY;                     /*!< (@ 0x00000040) IPDELAY                                                    */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t IPDELAY    : 8;            /*!< [23..16] IPDELAY                                                          */
    } IPDELAY_b;
  } ;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t BAUDRATE;                    /*!< (@ 0x00000050) BAUDRATE                                                   */
    
    struct {
      __IOM uint32_t RBAUD      : 16;           /*!< [15..0] RBAUD                                                             */
      __IOM uint32_t TBAUD      : 16;           /*!< [31..16] TBAUD                                                            */
    } BAUDRATE_b;
  } ;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t FIFOCN;                      /*!< (@ 0x00000060) FIFOCN                                                     */
    
    struct {
      __IOM uint32_t RCNT       : 3;            /*!< [2..0] RCNT                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFTH       : 2;            /*!< [5..4] RFTH                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t RDMAEN     : 1;            /*!< [7..7] RDMAEN                                                             */
      __IOM uint32_t RFIFOFL    : 1;            /*!< [8..8] RFIFOFL                                                            */
      __IOM uint32_t RFERI      : 1;            /*!< [9..9] RFERI                                                              */
      __IOM uint32_t RSRFULLF   : 1;            /*!< [10..10] RSRFULLF                                                         */
      __IM  uint32_t            : 5;
      __IOM uint32_t TCNT       : 3;            /*!< [18..16] TCNT                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TFTH       : 2;            /*!< [21..20] TFTH                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDMAEN     : 1;            /*!< [23..23] TDMAEN                                                           */
      __IOM uint32_t TFIFOFL    : 1;            /*!< [24..24] TFIFOFL                                                          */
      __IOM uint32_t TFERI      : 1;            /*!< [25..25] TFERI                                                            */
      __IOM uint32_t TSRFULLF   : 1;            /*!< [26..26] TSRFULLF                                                         */
    } FIFOCN_b;
  } ;
  __IOM uint32_t  FIFOCN_SET;                   /*!< (@ 0x00000064) FIFOCN_SET                                                 */
  __IOM uint32_t  FIFOCN_CLR;                   /*!< (@ 0x00000068) FIFOCN_CLR                                                 */
  __IM  uint32_t  RESERVED6;
  __IOM USART_DATA_Type DATA;                   /*!< (@ 0x00000070) DATA                                                       */
} USART_Type;                                   /*!< Size = 116 (0x74)                                                         */



/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (UART0)
  */

typedef struct {                                /*!< (@ 0x40002000) UART0 Structure                                            */
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000000) CONFIG                                                     */
    
    struct {
      __IOM uint32_t RSTRTEN    : 1;            /*!< [0..0] RSTRTEN                                                            */
      __IOM uint32_t RPAREN     : 1;            /*!< [1..1] RPAREN                                                             */
      __IOM uint32_t RSTPEN     : 1;            /*!< [2..2] RSTPEN                                                             */
      __IOM uint32_t RSTPMD     : 2;            /*!< [4..3] RSTPMD                                                             */
      __IOM uint32_t RPARMD     : 2;            /*!< [6..5] RPARMD                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t RDATLN     : 3;            /*!< [10..8] RDATLN                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t RSCEN      : 1;            /*!< [12..12] RSCEN                                                            */
      __IOM uint32_t RIRDAEN    : 1;            /*!< [13..13] RIRDAEN                                                          */
      __IOM uint32_t RINVEN     : 1;            /*!< [14..14] RINVEN                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TSTRTEN    : 1;            /*!< [16..16] TSTRTEN                                                          */
      __IOM uint32_t TPAREN     : 1;            /*!< [17..17] TPAREN                                                           */
      __IOM uint32_t TSTPEN     : 1;            /*!< [18..18] TSTPEN                                                           */
      __IOM uint32_t TSTPMD     : 2;            /*!< [20..19] TSTPMD                                                           */
      __IOM uint32_t TPARMD     : 2;            /*!< [22..21] TPARMD                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDATLN     : 3;            /*!< [26..24] TDATLN                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TSCEN      : 1;            /*!< [28..28] TSCEN                                                            */
      __IOM uint32_t TIRDAEN    : 1;            /*!< [29..29] TIRDAEN                                                          */
      __IOM uint32_t TINVEN     : 1;            /*!< [30..30] TINVEN                                                           */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000004) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000008) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000010) MODE                                                       */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t DBGMD      : 1;            /*!< [16..16] DBGMD                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBMD       : 2;            /*!< [19..18] LBMD                                                             */
      __IM  uint32_t            : 7;
      __IOM uint32_t DUPLEXMD   : 1;            /*!< [27..27] DUPLEXMD                                                         */
      __IM  uint32_t            : 2;
      __IOM uint32_t ITSEN      : 1;            /*!< [30..30] ITSEN                                                            */
    } MODE_b;
  } ;
  __IOM uint32_t  MODE_SET;                     /*!< (@ 0x00000014) MODE_SET                                                   */
  __IOM uint32_t  MODE_CLR;                     /*!< (@ 0x00000018) MODE_CLR                                                   */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t FLOWCN;                      /*!< (@ 0x00000020) FLOWCN                                                     */
    
    struct {
      __IOM uint32_t RTS        : 1;            /*!< [0..0] RTS                                                                */
      __IOM uint32_t RX         : 1;            /*!< [1..1] RX                                                                 */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTSINVEN   : 1;            /*!< [5..5] RTSINVEN                                                           */
      __IOM uint32_t RTSTH      : 1;            /*!< [6..6] RTSTH                                                              */
      __IOM uint32_t RTSEN      : 1;            /*!< [7..7] RTSEN                                                              */
      __IM  uint32_t            : 8;
      __IOM uint32_t CTS        : 1;            /*!< [16..16] CTS                                                              */
      __IOM uint32_t TX         : 1;            /*!< [17..17] TX                                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t CTSINVEN   : 1;            /*!< [21..21] CTSINVEN                                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t CTSEN      : 1;            /*!< [23..23] CTSEN                                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t TIRDAPW    : 2;            /*!< [29..28] TIRDAPW                                                          */
    } FLOWCN_b;
  } ;
  __IOM uint32_t  FLOWCN_SET;                   /*!< (@ 0x00000024) FLOWCN_SET                                                 */
  __IOM uint32_t  FLOWCN_CLR;                   /*!< (@ 0x00000028) FLOWCN_CLR                                                 */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000030) CONTROL                                                    */
    
    struct {
      __IOM uint32_t RFRMERI    : 1;            /*!< [0..0] RFRMERI                                                            */
      __IOM uint32_t RPARERI    : 1;            /*!< [1..1] RPARERI                                                            */
      __IOM uint32_t ROREI      : 1;            /*!< [2..2] ROREI                                                              */
      __IOM uint32_t RDREQI     : 1;            /*!< [3..3] RDREQI                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t RERIEN     : 1;            /*!< [5..5] RERIEN                                                             */
      __IOM uint32_t RDREQIEN   : 1;            /*!< [6..6] RDREQIEN                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t MATMD      : 2;            /*!< [9..8] MATMD                                                              */
      __IOM uint32_t RABDEN     : 1;            /*!< [10..10] RABDEN                                                           */
      __IOM uint32_t RBUSYF     : 1;            /*!< [11..11] RBUSYF                                                           */
      __IOM uint32_t RBIT       : 1;            /*!< [12..12] RBIT                                                             */
      __IOM uint32_t ROSEN      : 1;            /*!< [13..13] ROSEN                                                            */
      __IOM uint32_t RINH       : 1;            /*!< [14..14] RINH                                                             */
      __IOM uint32_t REN        : 1;            /*!< [15..15] REN                                                              */
      __IOM uint32_t TSCERI     : 1;            /*!< [16..16] TSCERI                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDREQI     : 1;            /*!< [18..18] TDREQI                                                           */
      __IOM uint32_t TCPTI      : 1;            /*!< [19..19] TCPTI                                                            */
      __IOM uint32_t TCPTTH     : 1;            /*!< [20..20] TCPTTH                                                           */
      __IOM uint32_t TERIEN     : 1;            /*!< [21..21] TERIEN                                                           */
      __IOM uint32_t TDREQIEN   : 1;            /*!< [22..22] TDREQIEN                                                         */
      __IOM uint32_t TCPTIEN    : 1;            /*!< [23..23] TCPTIEN                                                          */
      __IM  uint32_t            : 3;
      __IOM uint32_t TBUSYF     : 1;            /*!< [27..27] TBUSYF                                                           */
      __IOM uint32_t TBIT       : 1;            /*!< [28..28] TBIT                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TINH       : 1;            /*!< [30..30] TINH                                                             */
      __IOM uint32_t TEN        : 1;            /*!< [31..31] TEN                                                              */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000034) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000038) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t IPDELAY;                     /*!< (@ 0x00000040) IPDELAY                                                    */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t IPDELAY    : 8;            /*!< [23..16] IPDELAY                                                          */
    } IPDELAY_b;
  } ;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t BAUDRATE;                    /*!< (@ 0x00000050) BAUDRATE                                                   */
    
    struct {
      __IOM uint32_t RBAUD      : 16;           /*!< [15..0] RBAUD                                                             */
      __IOM uint32_t TBAUD      : 16;           /*!< [31..16] TBAUD                                                            */
    } BAUDRATE_b;
  } ;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t FIFOCN;                      /*!< (@ 0x00000060) FIFOCN                                                     */
    
    struct {
      __IOM uint32_t RCNT       : 3;            /*!< [2..0] RCNT                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFTH       : 2;            /*!< [5..4] RFTH                                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t RFIFOFL    : 1;            /*!< [8..8] RFIFOFL                                                            */
      __IOM uint32_t RFERI      : 1;            /*!< [9..9] RFERI                                                              */
      __IOM uint32_t RSRFULLF   : 1;            /*!< [10..10] RSRFULLF                                                         */
      __IM  uint32_t            : 5;
      __IOM uint32_t TCNT       : 3;            /*!< [18..16] TCNT                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TFTH       : 2;            /*!< [21..20] TFTH                                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t TFIFOFL    : 1;            /*!< [24..24] TFIFOFL                                                          */
      __IOM uint32_t TFERI      : 1;            /*!< [25..25] TFERI                                                            */
      __IOM uint32_t TSRFULLF   : 1;            /*!< [26..26] TSRFULLF                                                         */
    } FIFOCN_b;
  } ;
  __IOM uint32_t  FIFOCN_SET;                   /*!< (@ 0x00000064) FIFOCN_SET                                                 */
  __IOM uint32_t  FIFOCN_CLR;                   /*!< (@ 0x00000068) FIFOCN_CLR                                                 */
  __IM  uint32_t  RESERVED6;
  __IOM UART_DATA_Type DATA;                    /*!< (@ 0x00000070) DATA                                                       */
} UART_Type;                                    /*!< Size = 116 (0x74)                                                         */



/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (SPI0)
  */

typedef struct {                                /*!< (@ 0x40004000) SPI0 Structure                                             */
  __IOM uint32_t  DATA;                         /*!< (@ 0x00000000) DATA                                                       */
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000010) CONTROL                                                    */
    
    struct {
      __IOM uint32_t RFRQI      : 1;            /*!< [0..0] RFRQI                                                              */
      __IOM uint32_t RFORI      : 1;            /*!< [1..1] RFORI                                                              */
      __IOM uint32_t TFRQI      : 1;            /*!< [2..2] TFRQI                                                              */
      __IOM uint32_t TFORI      : 1;            /*!< [3..3] TFORI                                                              */
      __IOM uint32_t SLVSELI    : 1;            /*!< [4..4] SLVSELI                                                            */
      __IOM uint32_t MDFI       : 1;            /*!< [5..5] MDFI                                                               */
      __IOM uint32_t URI        : 1;            /*!< [6..6] URI                                                                */
      __IOM uint32_t SREI       : 1;            /*!< [7..7] SREI                                                               */
      __IOM uint32_t RFILI      : 1;            /*!< [8..8] RFILI                                                              */
      __IOM uint32_t TFILI      : 1;            /*!< [9..9] TFILI                                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t NSSSTS     : 1;            /*!< [14..14] NSSSTS                                                           */
      __IOM uint32_t BUSYF      : 1;            /*!< [15..15] BUSYF                                                            */
      __IOM uint32_t RFCNT      : 4;            /*!< [19..16] RFCNT                                                            */
      __IOM uint32_t TFCNT      : 4;            /*!< [23..20] TFCNT                                                            */
      __IOM uint32_t DBGMD      : 1;            /*!< [24..24] DBGMD                                                            */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000014) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000018) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000020) CONFIG                                                     */
    
    struct {
      __IOM uint32_t RFRQIEN    : 1;            /*!< [0..0] RFRQIEN                                                            */
      __IOM uint32_t RFORIEN    : 1;            /*!< [1..1] RFORIEN                                                            */
      __IOM uint32_t TFRQIEN    : 1;            /*!< [2..2] TFRQIEN                                                            */
      __IOM uint32_t TFORIEN    : 1;            /*!< [3..3] TFORIEN                                                            */
      __IOM uint32_t SLVSELIEN  : 1;            /*!< [4..4] SLVSELIEN                                                          */
      __IOM uint32_t MDFIEN     : 1;            /*!< [5..5] MDFIEN                                                             */
      __IOM uint32_t URIEN      : 1;            /*!< [6..6] URIEN                                                              */
      __IOM uint32_t SREIEN     : 1;            /*!< [7..7] SREIEN                                                             */
      __IOM uint32_t SPIEN      : 1;            /*!< [8..8] SPIEN                                                              */
      __IOM uint32_t MSTEN      : 1;            /*!< [9..9] MSTEN                                                              */
      __IOM uint32_t CLKPOL     : 1;            /*!< [10..10] CLKPOL                                                           */
      __IOM uint32_t CLKPHA     : 1;            /*!< [11..11] CLKPHA                                                           */
      __IOM uint32_t NSSPOL     : 1;            /*!< [12..12] NSSPOL                                                           */
      __IOM uint32_t DDIRSEL    : 1;            /*!< [13..13] DDIRSEL                                                          */
      __IOM uint32_t NSSMD      : 2;            /*!< [15..14] NSSMD                                                            */
      __IOM uint32_t RFTH       : 2;            /*!< [17..16] RFTH                                                             */
      __IOM uint32_t TFTH       : 2;            /*!< [19..18] TFTH                                                             */
      __IOM uint32_t DSIZE      : 4;            /*!< [23..20] DSIZE                                                            */
      __IOM uint32_t DMAEN      : 1;            /*!< [24..24] DMAEN                                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t RFIFOFL    : 1;            /*!< [29..29] RFIFOFL                                                          */
      __IOM uint32_t TFIFOFL    : 1;            /*!< [30..30] TFIFOFL                                                          */
      __IOM uint32_t RESET      : 1;            /*!< [31..31] RESET                                                            */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000024) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000028) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t CLKRATE;                     /*!< (@ 0x00000030) CLKRATE                                                    */
    
    struct {
      __IOM uint32_t CLKDIV     : 16;           /*!< [15..0] CLKDIV                                                            */
    } CLKRATE_b;
  } ;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t FSTATUS;                     /*!< (@ 0x00000040) FSTATUS                                                    */
    
    struct {
      __IOM uint32_t RFRPTR     : 4;            /*!< [3..0] RFRPTR                                                             */
      __IOM uint32_t RFWPTR     : 4;            /*!< [7..4] RFWPTR                                                             */
      __IOM uint32_t TFRPTR     : 4;            /*!< [11..8] TFRPTR                                                            */
      __IOM uint32_t TFWPTR     : 4;            /*!< [15..12] TFWPTR                                                           */
    } FSTATUS_b;
  } ;
} SPI_Type;                                     /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (I2C0)
  */

typedef struct {                                /*!< (@ 0x40009000) I2C0 Structure                                             */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t BUSYF      : 1;            /*!< [0..0] BUSYF                                                              */
      __IOM uint32_t ACK        : 1;            /*!< [1..1] ACK                                                                */
      __IOM uint32_t ARBLF      : 1;            /*!< [2..2] ARBLF                                                              */
      __IOM uint32_t ACKRQF     : 1;            /*!< [3..3] ACKRQF                                                             */
      __IOM uint32_t STO        : 1;            /*!< [4..4] STO                                                                */
      __IOM uint32_t STA        : 1;            /*!< [5..5] STA                                                                */
      __IOM uint32_t TXMDF      : 1;            /*!< [6..6] TXMDF                                                              */
      __IOM uint32_t MSMDF      : 1;            /*!< [7..7] MSMDF                                                              */
      __IOM uint32_t STOI       : 1;            /*!< [8..8] STOI                                                               */
      __IOM uint32_t ACKI       : 1;            /*!< [9..9] ACKI                                                               */
      __IOM uint32_t RXI        : 1;            /*!< [10..10] RXI                                                              */
      __IOM uint32_t TXI        : 1;            /*!< [11..11] TXI                                                              */
      __IOM uint32_t STAI       : 1;            /*!< [12..12] STAI                                                             */
      __IOM uint32_t ARBLI      : 1;            /*!< [13..13] ARBLI                                                            */
      __IOM uint32_t T0I        : 1;            /*!< [14..14] T0I                                                              */
      __IOM uint32_t T1I        : 1;            /*!< [15..15] T1I                                                              */
      __IOM uint32_t T2I        : 1;            /*!< [16..16] T2I                                                              */
      __IOM uint32_t T3I        : 1;            /*!< [17..17] T3I                                                              */
      __IOM uint32_t RXARM      : 1;            /*!< [18..18] RXARM                                                            */
      __IOM uint32_t TXARM      : 1;            /*!< [19..19] TXARM                                                            */
      __IOM uint32_t SLVAF      : 1;            /*!< [20..20] SLVAF                                                            */
      __IOM uint32_t ATXRXEN    : 1;            /*!< [21..21] ATXRXEN                                                          */
      __IOM uint32_t FMD        : 1;            /*!< [22..22] FMD                                                              */
      __IOM uint32_t DBGMD      : 1;            /*!< [23..23] DBGMD                                                            */
      __IOM uint32_t SMINH      : 1;            /*!< [24..24] SMINH                                                            */
      __IOM uint32_t HACKEN     : 1;            /*!< [25..25] HACKEN                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBACKEN    : 1;            /*!< [27..27] LBACKEN                                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t GCEN       : 1;            /*!< [29..29] GCEN                                                             */
      __IOM uint32_t RESET      : 1;            /*!< [30..30] RESET                                                            */
      __IOM uint32_t I2CEN      : 1;            /*!< [31..31] I2CEN                                                            */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000010) CONFIG                                                     */
    
    struct {
      __IOM uint32_t SCALER     : 6;            /*!< [5..0] SCALER                                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t STOIEN     : 1;            /*!< [8..8] STOIEN                                                             */
      __IOM uint32_t ACKIEN     : 1;            /*!< [9..9] ACKIEN                                                             */
      __IOM uint32_t RXIEN      : 1;            /*!< [10..10] RXIEN                                                            */
      __IOM uint32_t TXIEN      : 1;            /*!< [11..11] TXIEN                                                            */
      __IOM uint32_t STAIEN     : 1;            /*!< [12..12] STAIEN                                                           */
      __IOM uint32_t ARBLIEN    : 1;            /*!< [13..13] ARBLIEN                                                          */
      __IOM uint32_t T0IEN      : 1;            /*!< [14..14] T0IEN                                                            */
      __IOM uint32_t T1IEN      : 1;            /*!< [15..15] T1IEN                                                            */
      __IOM uint32_t T2IEN      : 1;            /*!< [16..16] T2IEN                                                            */
      __IOM uint32_t T3IEN      : 1;            /*!< [17..17] T3IEN                                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t BC         : 2;            /*!< [21..20] BC                                                               */
      __IOM uint32_t BP         : 2;            /*!< [23..22] BP                                                               */
      __IOM uint32_t T0RUN      : 1;            /*!< [24..24] T0RUN                                                            */
      __IOM uint32_t T1RUN      : 1;            /*!< [25..25] T1RUN                                                            */
      __IOM uint32_t T2RUN      : 1;            /*!< [26..26] T2RUN                                                            */
      __IOM uint32_t T3RUN      : 1;            /*!< [27..27] T3RUN                                                            */
      __IOM uint32_t TMD        : 2;            /*!< [29..28] TMD                                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIMEREN    : 1;            /*!< [31..31] TIMEREN                                                          */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000014) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000018) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t SADDRESS;                    /*!< (@ 0x00000020) SADDRESS                                                   */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t ADDRESS    : 7;            /*!< [7..1] ADDRESS                                                            */
    } SADDRESS_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t SMASK;                       /*!< (@ 0x00000030) SMASK                                                      */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t MASK       : 7;            /*!< [7..1] MASK                                                               */
    } SMASK_b;
  } ;
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  DATA;                         /*!< (@ 0x00000040) DATA                                                       */
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t TIMER;                       /*!< (@ 0x00000050) TIMER                                                      */
    
    struct {
      __IOM uint32_t T0         : 8;            /*!< [7..0] T0                                                                 */
      __IOM uint32_t T1         : 8;            /*!< [15..8] T1                                                                */
      __IOM uint32_t T2         : 8;            /*!< [23..16] T2                                                               */
      __IOM uint32_t T3         : 8;            /*!< [31..24] T3                                                               */
    } TIMER_b;
  } ;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t TIMERRL;                     /*!< (@ 0x00000060) TIMERRL                                                    */
    
    struct {
      __IOM uint32_t T0RL       : 8;            /*!< [7..0] T0RL                                                               */
      __IOM uint32_t T1RL       : 8;            /*!< [15..8] T1RL                                                              */
      __IOM uint32_t T2RL       : 8;            /*!< [23..16] T2RL                                                             */
      __IOM uint32_t T3RL       : 8;            /*!< [31..24] T3RL                                                             */
    } TIMERRL_b;
  } ;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t SCONFIG;                     /*!< (@ 0x00000070) SCONFIG                                                    */
    
    struct {
      __IOM uint32_t SETUP      : 4;            /*!< [3..0] SETUP                                                              */
      __IOM uint32_t HOLD       : 4;            /*!< [7..4] HOLD                                                               */
      __IOM uint32_t SCLL       : 8;            /*!< [15..8] SCLL                                                              */
      __IOM uint32_t SCLLTIMER  : 4;            /*!< [19..16] SCLLTIMER                                                        */
    } SCONFIG_b;
  } ;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t I2CDMA;                      /*!< (@ 0x00000080) I2CDMA                                                     */
    
    struct {
      __IOM uint32_t DMALEN     : 8;            /*!< [7..0] DMALEN                                                             */
      __IM  uint32_t            : 23;
      __IOM uint32_t DMAEN      : 1;            /*!< [31..31] DMAEN                                                            */
    } I2CDMA_b;
  } ;
} I2C_Type;                                     /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                           EPCA0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (EPCA0)
  */

typedef struct {                                /*!< (@ 0x4000E000) EPCA0 Structure                                            */
  __IOM uint32_t  CH0_MODE;                     /*!< (@ 0x00000000) CH0_MODE                                                   */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  CH0_CONTROL;                  /*!< (@ 0x00000010) CH0_CONTROL                                                */
  __IOM uint32_t  CH0_CONTROL_SET;              /*!< (@ 0x00000014) CH0_CONTROL_SET                                            */
  __IOM uint32_t  CH0_CONTROL_CLR;              /*!< (@ 0x00000018) CH0_CONTROL_CLR                                            */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CH0_CCAPV;                    /*!< (@ 0x00000020) CH0_CCAPV                                                  */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  CH0_CCAPVUPD;                 /*!< (@ 0x00000030) CH0_CCAPVUPD                                               */
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  CH1_MODE;                     /*!< (@ 0x00000040) CH1_MODE                                                   */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  CH1_CONTROL;                  /*!< (@ 0x00000050) CH1_CONTROL                                                */
  __IOM uint32_t  CH1_CONTROL_SET;              /*!< (@ 0x00000054) CH1_CONTROL_SET                                            */
  __IOM uint32_t  CH1_CONTROL_CLR;              /*!< (@ 0x00000058) CH1_CONTROL_CLR                                            */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  CH1_CCAPV;                    /*!< (@ 0x00000060) CH1_CCAPV                                                  */
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  CH1_CCAPVUPD;                 /*!< (@ 0x00000070) CH1_CCAPVUPD                                               */
  __IM  uint32_t  RESERVED7[3];
  __IOM uint32_t  CH2_MODE;                     /*!< (@ 0x00000080) CH2_MODE                                                   */
  __IM  uint32_t  RESERVED8[3];
  __IOM uint32_t  CH2_CONTROL;                  /*!< (@ 0x00000090) CH2_CONTROL                                                */
  __IOM uint32_t  CH2_CONTROL_SET;              /*!< (@ 0x00000094) CH2_CONTROL_SET                                            */
  __IOM uint32_t  CH2_CONTROL_CLR;              /*!< (@ 0x00000098) CH2_CONTROL_CLR                                            */
  __IM  uint32_t  RESERVED9;
  __IOM uint32_t  CH2_CCAPV;                    /*!< (@ 0x000000A0) CH2_CCAPV                                                  */
  __IM  uint32_t  RESERVED10[3];
  __IOM uint32_t  CH2_CCAPVUPD;                 /*!< (@ 0x000000B0) CH2_CCAPVUPD                                               */
  __IM  uint32_t  RESERVED11[3];
  __IOM uint32_t  CH3_MODE;                     /*!< (@ 0x000000C0) CH3_MODE                                                   */
  __IM  uint32_t  RESERVED12[3];
  __IOM uint32_t  CH3_CONTROL;                  /*!< (@ 0x000000D0) CH3_CONTROL                                                */
  __IOM uint32_t  CH3_CONTROL_SET;              /*!< (@ 0x000000D4) CH3_CONTROL_SET                                            */
  __IOM uint32_t  CH3_CONTROL_CLR;              /*!< (@ 0x000000D8) CH3_CONTROL_CLR                                            */
  __IM  uint32_t  RESERVED13;
  __IOM uint32_t  CH3_CCAPV;                    /*!< (@ 0x000000E0) CH3_CCAPV                                                  */
  __IM  uint32_t  RESERVED14[3];
  __IOM uint32_t  CH3_CCAPVUPD;                 /*!< (@ 0x000000F0) CH3_CCAPVUPD                                               */
  __IM  uint32_t  RESERVED15[3];
  __IOM uint32_t  CH4_MODE;                     /*!< (@ 0x00000100) CH4_MODE                                                   */
  __IM  uint32_t  RESERVED16[3];
  __IOM uint32_t  CH4_CONTROL;                  /*!< (@ 0x00000110) CH4_CONTROL                                                */
  __IOM uint32_t  CH4_CONTROL_SET;              /*!< (@ 0x00000114) CH4_CONTROL_SET                                            */
  __IOM uint32_t  CH4_CONTROL_CLR;              /*!< (@ 0x00000118) CH4_CONTROL_CLR                                            */
  __IM  uint32_t  RESERVED17;
  __IOM uint32_t  CH4_CCAPV;                    /*!< (@ 0x00000120) CH4_CCAPV                                                  */
  __IM  uint32_t  RESERVED18[3];
  __IOM uint32_t  CH4_CCAPVUPD;                 /*!< (@ 0x00000130) CH4_CCAPVUPD                                               */
  __IM  uint32_t  RESERVED19[3];
  __IOM uint32_t  CH5_MODE;                     /*!< (@ 0x00000140) CH5_MODE                                                   */
  __IM  uint32_t  RESERVED20[3];
  __IOM uint32_t  CH5_CONTROL;                  /*!< (@ 0x00000150) CH5_CONTROL                                                */
  __IOM uint32_t  CH5_CONTROL_SET;              /*!< (@ 0x00000154) CH5_CONTROL_SET                                            */
  __IOM uint32_t  CH5_CONTROL_CLR;              /*!< (@ 0x00000158) CH5_CONTROL_CLR                                            */
  __IM  uint32_t  RESERVED21;
  __IOM uint32_t  CH5_CCAPV;                    /*!< (@ 0x00000160) CH5_CCAPV                                                  */
  __IM  uint32_t  RESERVED22[3];
  __IOM uint32_t  CH5_CCAPVUPD;                 /*!< (@ 0x00000170) CH5_CCAPVUPD                                               */
  __IM  uint32_t  RESERVED23[3];
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000180) MODE                                                       */
    
    struct {
      __IOM uint32_t CLKDIV     : 10;           /*!< [9..0] CLKDIV                                                             */
      __IOM uint32_t CLKSEL     : 3;            /*!< [12..10] CLKSEL                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t HDOSEL     : 2;            /*!< [15..14] HDOSEL                                                           */
      __IOM uint32_t DEND       : 3;            /*!< [18..16] DEND                                                             */
      __IOM uint32_t DPTR       : 3;            /*!< [21..19] DPTR                                                             */
      __IOM uint32_t DSTART     : 3;            /*!< [24..22] DSTART                                                           */
      __IOM uint32_t DBUSYF     : 1;            /*!< [25..25] DBUSYF                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t STDOSEL    : 2;            /*!< [28..27] STDOSEL                                                          */
    } MODE_b;
  } ;
  __IM  uint32_t  RESERVED24[3];
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000190) CONTROL                                                    */
    
    struct {
      __IOM uint32_t OVFIEN     : 1;            /*!< [0..0] OVFIEN                                                             */
      __IOM uint32_t OVFDEN     : 1;            /*!< [1..1] OVFDEN                                                             */
      __IOM uint32_t OVFSEN     : 1;            /*!< [2..2] OVFSEN                                                             */
      __IOM uint32_t HALTIEN    : 1;            /*!< [3..3] HALTIEN                                                            */
      __IOM uint32_t NOUPD      : 1;            /*!< [4..4] NOUPD                                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t DBGMD      : 1;            /*!< [6..6] DBGMD                                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t HALTEN     : 1;            /*!< [9..9] HALTEN                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t STSEL      : 2;            /*!< [12..11] STSEL                                                            */
      __IOM uint32_t STESEL     : 1;            /*!< [13..13] STESEL                                                           */
      __IOM uint32_t STEN       : 1;            /*!< [14..14] STEN                                                             */
      __IM  uint32_t            : 6;
      __IOM uint32_t DIVST      : 1;            /*!< [21..21] DIVST                                                            */
      __IOM uint32_t DIV        : 10;           /*!< [31..22] DIV                                                              */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000194) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000198) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED25;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x000001A0) STATUS                                                     */
    
    struct {
      __IOM uint32_t C0CCI      : 1;            /*!< [0..0] C0CCI                                                              */
      __IOM uint32_t C1CCI      : 1;            /*!< [1..1] C1CCI                                                              */
      __IOM uint32_t C2CCI      : 1;            /*!< [2..2] C2CCI                                                              */
      __IOM uint32_t C3CCI      : 1;            /*!< [3..3] C3CCI                                                              */
      __IOM uint32_t C4CCI      : 1;            /*!< [4..4] C4CCI                                                              */
      __IOM uint32_t C5CCI      : 1;            /*!< [5..5] C5CCI                                                              */
      __IOM uint32_t RUN        : 1;            /*!< [6..6] RUN                                                                */
      __IOM uint32_t OVFI       : 1;            /*!< [7..7] OVFI                                                               */
      __IOM uint32_t UPDCF      : 1;            /*!< [8..8] UPDCF                                                              */
      __IOM uint32_t HALTI      : 1;            /*!< [9..9] HALTI                                                              */
      __IOM uint32_t C0IOVFI    : 1;            /*!< [10..10] C0IOVFI                                                          */
      __IOM uint32_t C1IOVFI    : 1;            /*!< [11..11] C1IOVFI                                                          */
      __IOM uint32_t C2IOVFI    : 1;            /*!< [12..12] C2IOVFI                                                          */
      __IOM uint32_t C3IOVFI    : 1;            /*!< [13..13] C3IOVFI                                                          */
      __IOM uint32_t C4IOVFI    : 1;            /*!< [14..14] C4IOVFI                                                          */
      __IOM uint32_t C5IOVFI    : 1;            /*!< [15..15] C5IOVFI                                                          */
    } STATUS_b;
  } ;
  __IOM uint32_t  STATUS_SET;                   /*!< (@ 0x000001A4) STATUS_SET                                                 */
  __IOM uint32_t  STATUS_CLR;                   /*!< (@ 0x000001A8) STATUS_CLR                                                 */
  __IM  uint32_t  RESERVED26;
  
  union {
    __IOM uint32_t COUNTER;                     /*!< (@ 0x000001B0) COUNTER                                                    */
    
    struct {
      __IOM uint32_t COUNTER    : 16;           /*!< [15..0] COUNTER                                                           */
    } COUNTER_b;
  } ;
  __IM  uint32_t  RESERVED27[3];
  
  union {
    __IOM uint32_t LIMIT;                       /*!< (@ 0x000001C0) LIMIT                                                      */
    
    struct {
      __IOM uint32_t LIMIT      : 16;           /*!< [15..0] LIMIT                                                             */
    } LIMIT_b;
  } ;
  __IM  uint32_t  RESERVED28[3];
  
  union {
    __IOM uint32_t LIMITUPD;                    /*!< (@ 0x000001D0) LIMITUPD                                                   */
    
    struct {
      __IOM uint32_t LIMITUPD   : 16;           /*!< [15..0] LIMITUPD                                                          */
    } LIMITUPD_b;
  } ;
  __IM  uint32_t  RESERVED29[3];
  
  union {
    __IOM uint32_t DTIME;                       /*!< (@ 0x000001E0) DTIME                                                      */
    
    struct {
      __IOM uint32_t DTIMEX     : 8;            /*!< [7..0] DTIMEX                                                             */
      __IOM uint32_t DTIMEY     : 8;            /*!< [15..8] DTIMEY                                                            */
    } DTIME_b;
  } ;
  __IM  uint32_t  RESERVED30[7];
  __IOM uint32_t  DTARGET;                      /*!< (@ 0x00000200) DTARGET                                                    */
} EPCA_Type;                                    /*!< Size = 516 (0x204)                                                        */



/* =========================================================================================================================== */
/* ================                                           PCA0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PCA0)
  */

typedef struct {                                /*!< (@ 0x4000F000) PCA0 Structure                                             */
  __IOM uint32_t  CH0_MODE;                     /*!< (@ 0x00000000) CH0_MODE                                                   */
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  CH0_CONTROL;                  /*!< (@ 0x00000010) CH0_CONTROL                                                */
  __IOM uint32_t  CH0_CONTROL_SET;              /*!< (@ 0x00000014) CH0_CONTROL_SET                                            */
  __IOM uint32_t  CH0_CONTROL_CLR;              /*!< (@ 0x00000018) CH0_CONTROL_CLR                                            */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  CH0_CCAPV;                    /*!< (@ 0x00000020) CH0_CCAPV                                                  */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  CH0_CCAPVUPD;                 /*!< (@ 0x00000030) CH0_CCAPVUPD                                               */
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  CH1_MODE;                     /*!< (@ 0x00000040) CH1_MODE                                                   */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  CH1_CONTROL;                  /*!< (@ 0x00000050) CH1_CONTROL                                                */
  __IOM uint32_t  CH1_CONTROL_SET;              /*!< (@ 0x00000054) CH1_CONTROL_SET                                            */
  __IOM uint32_t  CH1_CONTROL_CLR;              /*!< (@ 0x00000058) CH1_CONTROL_CLR                                            */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  CH1_CCAPV;                    /*!< (@ 0x00000060) CH1_CCAPV                                                  */
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  CH1_CCAPVUPD;                 /*!< (@ 0x00000070) CH1_CCAPVUPD                                               */
  __IM  uint32_t  RESERVED7[67];
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000180) MODE                                                       */
    
    struct {
      __IOM uint32_t CLKDIV     : 10;           /*!< [9..0] CLKDIV                                                             */
      __IOM uint32_t CLKSEL     : 3;            /*!< [12..10] CLKSEL                                                           */
    } MODE_b;
  } ;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000190) CONTROL                                                    */
    
    struct {
      __IOM uint32_t OVFIEN     : 1;            /*!< [0..0] OVFIEN                                                             */
      __IM  uint32_t            : 5;
      __IOM uint32_t DBGMD      : 1;            /*!< [6..6] DBGMD                                                              */
      __IM  uint32_t            : 14;
      __IOM uint32_t DIVST      : 1;            /*!< [21..21] DIVST                                                            */
      __IOM uint32_t DIV        : 10;           /*!< [31..22] DIV                                                              */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000194) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000198) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x000001A0) STATUS                                                     */
    
    struct {
      __IOM uint32_t C0CCI      : 1;            /*!< [0..0] C0CCI                                                              */
      __IOM uint32_t C1CCI      : 1;            /*!< [1..1] C1CCI                                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t RUN        : 1;            /*!< [6..6] RUN                                                                */
      __IOM uint32_t OVFI       : 1;            /*!< [7..7] OVFI                                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t C0IOVFI    : 1;            /*!< [10..10] C0IOVFI                                                          */
      __IOM uint32_t C1IOVFI    : 1;            /*!< [11..11] C1IOVFI                                                          */
    } STATUS_b;
  } ;
  __IOM uint32_t  STATUS_SET;                   /*!< (@ 0x000001A4) STATUS_SET                                                 */
  __IOM uint32_t  STATUS_CLR;                   /*!< (@ 0x000001A8) STATUS_CLR                                                 */
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t COUNTER;                     /*!< (@ 0x000001B0) COUNTER                                                    */
    
    struct {
      __IOM uint32_t COUNTER    : 16;           /*!< [15..0] COUNTER                                                           */
    } COUNTER_b;
  } ;
  __IM  uint32_t  RESERVED11[3];
  
  union {
    __IOM uint32_t LIMIT;                       /*!< (@ 0x000001C0) LIMIT                                                      */
    
    struct {
      __IOM uint32_t LIMIT      : 16;           /*!< [15..0] LIMIT                                                             */
    } LIMIT_b;
  } ;
} PCA_Type;                                     /*!< Size = 452 (0x1c4)                                                        */



/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (TIMER0)
  */

typedef struct {                                /*!< (@ 0x40014000) TIMER0 Structure                                           */
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000000) CONFIG                                                     */
    
    struct {
      __IOM uint32_t LCLK       : 2;            /*!< [1..0] LCLK                                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t LMSTREN    : 1;            /*!< [4..4] LMSTREN                                                            */
      __IOM uint32_t SPLITEN    : 1;            /*!< [5..5] SPLITEN                                                            */
      __IOM uint32_t LEXIEN     : 1;            /*!< [6..6] LEXIEN                                                             */
      __IOM uint32_t LOVFIEN    : 1;            /*!< [7..7] LOVFIEN                                                            */
      __IOM uint32_t LMD        : 3;            /*!< [10..8] LMD                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSTATE     : 1;            /*!< [12..12] LSTATE                                                           */
      __IOM uint32_t LRUN       : 1;            /*!< [13..13] LRUN                                                             */
      __IOM uint32_t LEXI       : 1;            /*!< [14..14] LEXI                                                             */
      __IOM uint32_t LOVFI      : 1;            /*!< [15..15] LOVFI                                                            */
      __IOM uint32_t HCLK       : 2;            /*!< [17..16] HCLK                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t MSTRUN     : 1;            /*!< [19..19] MSTRUN                                                           */
      __IOM uint32_t HMSTREN    : 1;            /*!< [20..20] HMSTREN                                                          */
      __IOM uint32_t DBGMD      : 1;            /*!< [21..21] DBGMD                                                            */
      __IOM uint32_t HEXIEN     : 1;            /*!< [22..22] HEXIEN                                                           */
      __IOM uint32_t HOVFIEN    : 1;            /*!< [23..23] HOVFIEN                                                          */
      __IOM uint32_t HMD        : 4;            /*!< [27..24] HMD                                                              */
      __IOM uint32_t HSTATE     : 1;            /*!< [28..28] HSTATE                                                           */
      __IOM uint32_t HRUN       : 1;            /*!< [29..29] HRUN                                                             */
      __IOM uint32_t HEXI       : 1;            /*!< [30..30] HEXI                                                             */
      __IOM uint32_t HOVFI      : 1;            /*!< [31..31] HOVFI                                                            */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000004) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000008) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CLKDIV;                      /*!< (@ 0x00000010) CLKDIV                                                     */
    
    struct {
      __IOM uint32_t CLKDIVRL   : 8;            /*!< [7..0] CLKDIVRL                                                           */
      __IM  uint32_t            : 8;
      __IOM uint32_t CLKDIVCT   : 8;            /*!< [23..16] CLKDIVCT                                                         */
    } CLKDIV_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t COUNT;                       /*!< (@ 0x00000020) COUNT                                                      */
    
    struct {
      __IOM uint32_t LCOUNT     : 16;           /*!< [15..0] LCOUNT                                                            */
      __IOM uint32_t HCOUNT     : 16;           /*!< [31..16] HCOUNT                                                           */
    } COUNT_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t CAPTURE;                     /*!< (@ 0x00000030) CAPTURE                                                    */
    
    struct {
      __IOM uint32_t LCCR       : 16;           /*!< [15..0] LCCR                                                              */
      __IOM uint32_t HCCR       : 16;           /*!< [31..16] HCCR                                                             */
    } CAPTURE_b;
  } ;
} TIMER_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           USB0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (USB0)
  */

typedef struct {                                /*!< (@ 0x40018000) USB0 Structure                                             */
  
  union {
    __IOM uint32_t FADDR;                       /*!< (@ 0x00000000) FADDR                                                      */
    
    struct {
      __IOM uint32_t FADDR      : 7;            /*!< [6..0] FADDR                                                              */
      __IOM uint32_t FADDRUPD   : 1;            /*!< [7..7] FADDRUPD                                                           */
    } FADDR_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t POWER;                       /*!< (@ 0x00000010) POWER                                                      */
    
    struct {
      __IOM uint32_t SUSDEN     : 1;            /*!< [0..0] SUSDEN                                                             */
      __IOM uint32_t SUSMDF     : 1;            /*!< [1..1] SUSMDF                                                             */
      __IOM uint32_t RESUME     : 1;            /*!< [2..2] RESUME                                                             */
      __IOM uint32_t RSTDETF    : 1;            /*!< [3..3] RSTDETF                                                            */
      __IOM uint32_t USBINH     : 1;            /*!< [4..4] USBINH                                                             */
      __IOM uint32_t DITHEN     : 1;            /*!< [5..5] DITHEN                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t ISOUPDMD   : 1;            /*!< [7..7] ISOUPDMD                                                           */
    } POWER_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t IOINT;                       /*!< (@ 0x00000020) IOINT                                                      */
    
    struct {
      __IOM uint32_t EP0I       : 1;            /*!< [0..0] EP0I                                                               */
      __IOM uint32_t IN1I       : 1;            /*!< [1..1] IN1I                                                               */
      __IOM uint32_t IN2I       : 1;            /*!< [2..2] IN2I                                                               */
      __IOM uint32_t IN3I       : 1;            /*!< [3..3] IN3I                                                               */
      __IOM uint32_t IN4I       : 1;            /*!< [4..4] IN4I                                                               */
      __IM  uint32_t            : 12;
      __IOM uint32_t OUT1I      : 1;            /*!< [17..17] OUT1I                                                            */
      __IOM uint32_t OUT2I      : 1;            /*!< [18..18] OUT2I                                                            */
      __IOM uint32_t OUT3I      : 1;            /*!< [19..19] OUT3I                                                            */
      __IOM uint32_t OUT4I      : 1;            /*!< [20..20] OUT4I                                                            */
    } IOINT_b;
  } ;
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  IOINT_CLR;                    /*!< (@ 0x00000028) IOINT_CLR                                                  */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t CMINT;                       /*!< (@ 0x00000030) CMINT                                                      */
    
    struct {
      __IOM uint32_t SUSI       : 1;            /*!< [0..0] SUSI                                                               */
      __IOM uint32_t RESI       : 1;            /*!< [1..1] RESI                                                               */
      __IOM uint32_t RSTI       : 1;            /*!< [2..2] RSTI                                                               */
      __IOM uint32_t SOFI       : 1;            /*!< [3..3] SOFI                                                               */
    } CMINT_b;
  } ;
  __IM  uint32_t  RESERVED4;
  __IOM uint32_t  CMINT_CLR;                    /*!< (@ 0x00000038) CMINT_CLR                                                  */
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t IOINTE;                      /*!< (@ 0x00000040) IOINTE                                                     */
    
    struct {
      __IOM uint32_t EP0IEN     : 1;            /*!< [0..0] EP0IEN                                                             */
      __IOM uint32_t IN1IEN     : 1;            /*!< [1..1] IN1IEN                                                             */
      __IOM uint32_t IN2IEN     : 1;            /*!< [2..2] IN2IEN                                                             */
      __IOM uint32_t IN3IEN     : 1;            /*!< [3..3] IN3IEN                                                             */
      __IOM uint32_t IN4IEN     : 1;            /*!< [4..4] IN4IEN                                                             */
      __IM  uint32_t            : 12;
      __IOM uint32_t OUT1IEN    : 1;            /*!< [17..17] OUT1IEN                                                          */
      __IOM uint32_t OUT2IEN    : 1;            /*!< [18..18] OUT2IEN                                                          */
      __IOM uint32_t OUT3IEN    : 1;            /*!< [19..19] OUT3IEN                                                          */
      __IOM uint32_t OUT4IEN    : 1;            /*!< [20..20] OUT4IEN                                                          */
    } IOINTE_b;
  } ;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t CMINTEPE;                    /*!< (@ 0x00000050) CMINTEPE                                                   */
    
    struct {
      __IOM uint32_t SUSIEN     : 1;            /*!< [0..0] SUSIEN                                                             */
      __IOM uint32_t RESIEN     : 1;            /*!< [1..1] RESIEN                                                             */
      __IOM uint32_t RSTIEN     : 1;            /*!< [2..2] RSTIEN                                                             */
      __IOM uint32_t SOFIEN     : 1;            /*!< [3..3] SOFIEN                                                             */
      __IM  uint32_t            : 12;
      __IOM uint32_t EP0EN      : 1;            /*!< [16..16] EP0EN                                                            */
      __IOM uint32_t EP1EN      : 1;            /*!< [17..17] EP1EN                                                            */
      __IOM uint32_t EP2EN      : 1;            /*!< [18..18] EP2EN                                                            */
      __IOM uint32_t EP3EN      : 1;            /*!< [19..19] EP3EN                                                            */
      __IOM uint32_t EP4EN      : 1;            /*!< [20..20] EP4EN                                                            */
    } CMINTEPE_b;
  } ;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t CRCONTROL;                   /*!< (@ 0x00000060) CRCONTROL                                                  */
    
    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t OLEN       : 1;            /*!< [4..4] OLEN                                                               */
      __IOM uint32_t LSCRMD     : 1;            /*!< [5..5] LSCRMD                                                             */
      __IOM uint32_t CRSSEN     : 1;            /*!< [6..6] CRSSEN                                                             */
      __IOM uint32_t CREN       : 1;            /*!< [7..7] CREN                                                               */
    } CRCONTROL_b;
  } ;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t FRAME;                       /*!< (@ 0x00000070) FRAME                                                      */
    
    struct {
      __IOM uint32_t FRAMENUM   : 11;           /*!< [10..0] FRAMENUM                                                          */
    } FRAME_b;
  } ;
  __IM  uint32_t  RESERVED9[99];
  
  union {
    __IOM uint32_t TCONTROL;                    /*!< (@ 0x00000200) TCONTROL                                                   */
    
    struct {
      __IOM uint32_t DN         : 1;            /*!< [0..0] DN                                                                 */
      __IOM uint32_t DP         : 1;            /*!< [1..1] DP                                                                 */
      __IOM uint32_t DFREC      : 1;            /*!< [2..2] DFREC                                                              */
      __IOM uint32_t PHYTST     : 2;            /*!< [4..3] PHYTST                                                             */
      __IOM uint32_t SSEL       : 1;            /*!< [5..5] SSEL                                                               */
      __IOM uint32_t PHYEN      : 1;            /*!< [6..6] PHYEN                                                              */
      __IOM uint32_t PUEN       : 1;            /*!< [7..7] PUEN                                                               */
    } TCONTROL_b;
  } ;
  __IM  uint32_t  RESERVED10[63];
  
  union {
    __IOM uint32_t CLKSEL;                      /*!< (@ 0x00000300) CLKSEL                                                     */
    
    struct {
      __IOM uint32_t CLKSEL     : 2;            /*!< [1..0] CLKSEL                                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t CLKDIV     : 2;            /*!< [5..4] CLKDIV                                                             */
      __IOM uint32_t RESET      : 1;            /*!< [6..6] RESET                                                              */
    } CLKSEL_b;
  } ;
  __IM  uint32_t  RESERVED11[3];
  
  union {
    __IOM uint32_t OSCCONTROL;                  /*!< (@ 0x00000310) OSCCONTROL                                                 */
    
    struct {
      __IM  uint32_t            : 5;
      __IOM uint32_t SUSPEND    : 1;            /*!< [5..5] SUSPEND                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t OSCEN      : 1;            /*!< [7..7] OSCEN                                                              */
    } OSCCONTROL_b;
  } ;
  __IOM uint32_t  OSCCONTROL_SET;               /*!< (@ 0x00000314) OSCCONTROL_SET                                             */
  __IOM uint32_t  OSCCONTROL_CLR;               /*!< (@ 0x00000318) OSCCONTROL_CLR                                             */
  __IM  uint32_t  RESERVED12;
  
  union {
    __IOM uint32_t AFADJUST;                    /*!< (@ 0x00000320) AFADJUST                                                   */
    
    struct {
      __IOM uint32_t FINEFADJ   : 6;            /*!< [5..0] FINEFADJ                                                           */
      __IOM uint32_t DITHEN     : 1;            /*!< [6..6] DITHEN                                                             */
    } AFADJUST_b;
  } ;
  __IOM uint32_t  AFADJUST_SET;                 /*!< (@ 0x00000324) AFADJUST_SET                                               */
  __IOM uint32_t  AFADJUST_CLR;                 /*!< (@ 0x00000328) AFADJUST_CLR                                               */
  __IM  uint32_t  RESERVED13;
  
  union {
    __IOM uint32_t FADJUST;                     /*!< (@ 0x00000330) FADJUST                                                    */
    
    struct {
      __IOM uint32_t FADJ       : 7;            /*!< [6..0] FADJ                                                               */
    } FADJUST_b;
  } ;
  __IM  uint32_t  RESERVED14[51];
  __IOM uint32_t  DMAFIFO;                      /*!< (@ 0x00000400) DMAFIFO                                                    */
  __IM  uint32_t  RESERVED15[3];
  
  union {
    __IOM uint32_t DMACONTROL;                  /*!< (@ 0x00000410) DMACONTROL                                                 */
    
    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t DBGMD      : 1;            /*!< [4..4] DBGMD                                                              */
      __IOM uint32_t TERRF      : 1;            /*!< [5..5] TERRF                                                              */
      __IOM uint32_t DBUSYF     : 1;            /*!< [6..6] DBUSYF                                                             */
      __IOM uint32_t DFIFOFL    : 1;            /*!< [7..7] DFIFOFL                                                            */
    } DMACONTROL_b;
  } ;
  __IM  uint32_t  RESERVED16[255];
  
  union {
    __IOM uint32_t EP0CONTROL;                  /*!< (@ 0x00000810) EP0CONTROL                                                 */
    
    struct {
      __IOM uint32_t OPRDYI     : 1;            /*!< [0..0] OPRDYI                                                             */
      __IOM uint32_t IPRDYI     : 1;            /*!< [1..1] IPRDYI                                                             */
      __IOM uint32_t STSTLI     : 1;            /*!< [2..2] STSTLI                                                             */
      __IOM uint32_t DEND       : 1;            /*!< [3..3] DEND                                                               */
      __IOM uint32_t SUENDI     : 1;            /*!< [4..4] SUENDI                                                             */
      __IOM uint32_t SDSTL      : 1;            /*!< [5..5] SDSTL                                                              */
      __IOM uint32_t OPRDYIS    : 1;            /*!< [6..6] OPRDYIS                                                            */
      __IOM uint32_t SUENDIS    : 1;            /*!< [7..7] SUENDIS                                                            */
    } EP0CONTROL_b;
  } ;
  __IM  uint32_t  RESERVED17[3];
  
  union {
    __IOM uint32_t EP0COUNT;                    /*!< (@ 0x00000820) EP0COUNT                                                   */
    
    struct {
      __IOM uint32_t COUNT      : 7;            /*!< [6..0] COUNT                                                              */
    } EP0COUNT_b;
  } ;
  __IM  uint32_t  RESERVED18[3];
  __IOM uint32_t  EP0FIFO;                      /*!< (@ 0x00000830) EP0FIFO                                                    */
  __IM  uint32_t  RESERVED19[19];
  __IOM uint32_t  EP1_EPMPSIZE;                 /*!< (@ 0x00000880) EP1_EPMPSIZE                                               */
  __IM  uint32_t  RESERVED20[3];
  __IOM uint32_t  EP1_EPCONTROL;                /*!< (@ 0x00000890) EP1_EPCONTROL                                              */
  __IM  uint32_t  RESERVED21[3];
  __IOM uint32_t  EP1_EPCOUNT;                  /*!< (@ 0x000008A0) EP1_EPCOUNT                                                */
  __IM  uint32_t  RESERVED22[3];
  __IOM uint32_t  EP1_EPFIFO;                   /*!< (@ 0x000008B0) EP1_EPFIFO                                                 */
  __IM  uint32_t  RESERVED23[19];
  __IOM uint32_t  EP2_EPMPSIZE;                 /*!< (@ 0x00000900) EP2_EPMPSIZE                                               */
  __IM  uint32_t  RESERVED24[3];
  __IOM uint32_t  EP2_EPCONTROL;                /*!< (@ 0x00000910) EP2_EPCONTROL                                              */
  __IM  uint32_t  RESERVED25[3];
  __IOM uint32_t  EP2_EPCOUNT;                  /*!< (@ 0x00000920) EP2_EPCOUNT                                                */
  __IM  uint32_t  RESERVED26[3];
  __IOM uint32_t  EP2_EPFIFO;                   /*!< (@ 0x00000930) EP2_EPFIFO                                                 */
  __IM  uint32_t  RESERVED27[19];
  __IOM uint32_t  EP3_EPMPSIZE;                 /*!< (@ 0x00000980) EP3_EPMPSIZE                                               */
  __IM  uint32_t  RESERVED28[3];
  __IOM uint32_t  EP3_EPCONTROL;                /*!< (@ 0x00000990) EP3_EPCONTROL                                              */
  __IM  uint32_t  RESERVED29[3];
  __IOM uint32_t  EP3_EPCOUNT;                  /*!< (@ 0x000009A0) EP3_EPCOUNT                                                */
  __IM  uint32_t  RESERVED30[3];
  __IOM uint32_t  EP3_EPFIFO;                   /*!< (@ 0x000009B0) EP3_EPFIFO                                                 */
  __IM  uint32_t  RESERVED31[19];
  __IOM uint32_t  EP4_EPMPSIZE;                 /*!< (@ 0x00000A00) EP4_EPMPSIZE                                               */
  __IM  uint32_t  RESERVED32[3];
  __IOM uint32_t  EP4_EPCONTROL;                /*!< (@ 0x00000A10) EP4_EPCONTROL                                              */
  __IM  uint32_t  RESERVED33[3];
  __IOM uint32_t  EP4_EPCOUNT;                  /*!< (@ 0x00000A20) EP4_EPCOUNT                                                */
  __IM  uint32_t  RESERVED34[3];
  __IOM uint32_t  EP4_EPFIFO;                   /*!< (@ 0x00000A30) EP4_EPFIFO                                                 */
} USB_Type;                                     /*!< Size = 2612 (0xa34)                                                       */



/* =========================================================================================================================== */
/* ================                                          SARADC0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (SARADC0)
  */

typedef struct {                                /*!< (@ 0x4001A000) SARADC0 Structure                                          */
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000000) CONFIG                                                     */
    
    struct {
      __IOM uint32_t SPSEL      : 4;            /*!< [3..0] SPSEL                                                              */
      __IOM uint32_t SPEN       : 1;            /*!< [4..4] SPEN                                                               */
      __IOM uint32_t SSGEN      : 1;            /*!< [5..5] SSGEN                                                              */
      __IOM uint32_t PACKMD     : 2;            /*!< [7..6] PACKMD                                                             */
      __IOM uint32_t SIMCEN     : 1;            /*!< [8..8] SIMCEN                                                             */
      __IOM uint32_t INTLVEN    : 1;            /*!< [9..9] INTLVEN                                                            */
      __IOM uint32_t SCANEN     : 1;            /*!< [10..10] SCANEN                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t SCANMD     : 1;            /*!< [12..12] SCANMD                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t DMAEN      : 1;            /*!< [14..14] DMAEN                                                            */
      __IOM uint32_t BCLKSEL    : 1;            /*!< [15..15] BCLKSEL                                                          */
      __IOM uint32_t CLKDIV     : 11;           /*!< [26..16] CLKDIV                                                           */
      __IOM uint32_t SCCIEN     : 1;            /*!< [27..27] SCCIEN                                                           */
      __IOM uint32_t SDIEN      : 1;            /*!< [28..28] SDIEN                                                            */
      __IOM uint32_t FORIEN     : 1;            /*!< [29..29] FORIEN                                                           */
      __IOM uint32_t FURIEN     : 1;            /*!< [30..30] FURIEN                                                           */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000004) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000008) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000010) CONTROL                                                    */
    
    struct {
      __IOM uint32_t REFGNDSEL  : 1;            /*!< [0..0] REFGNDSEL                                                          */
      __IOM uint32_t CLKESEL    : 1;            /*!< [1..1] CLKESEL                                                            */
      __IOM uint32_t BMTK       : 6;            /*!< [7..2] BMTK                                                               */
      __IOM uint32_t SCSEL      : 4;            /*!< [11..8] SCSEL                                                             */
      __IOM uint32_t PWRTIME    : 4;            /*!< [15..12] PWRTIME                                                          */
      __IOM uint32_t BURSTEN    : 1;            /*!< [16..16] BURSTEN                                                          */
      __IOM uint32_t ADCEN      : 1;            /*!< [17..17] ADCEN                                                            */
      __IOM uint32_t AD12BSSEL  : 1;            /*!< [18..18] AD12BSSEL                                                        */
      __IOM uint32_t VCMEN      : 1;            /*!< [19..19] VCMEN                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t ACCMD      : 1;            /*!< [21..21] ACCMD                                                            */
      __IOM uint32_t TRKMD      : 1;            /*!< [22..22] TRKMD                                                            */
      __IOM uint32_t ADBUSY     : 1;            /*!< [23..23] ADBUSY                                                           */
      __IOM uint32_t BIASSEL    : 2;            /*!< [25..24] BIASSEL                                                          */
      __IOM uint32_t LPMDEN     : 1;            /*!< [26..26] LPMDEN                                                           */
      __IOM uint32_t MREFLPEN   : 1;            /*!< [27..27] MREFLPEN                                                         */
      __IM  uint32_t            : 2;
      __IOM uint32_t VREFSEL    : 2;            /*!< [31..30] VREFSEL                                                          */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000014) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000018) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t SQ7654;                      /*!< (@ 0x00000020) SQ7654                                                     */
    
    struct {
      __IOM uint32_t TS4CHR     : 2;            /*!< [1..0] TS4CHR                                                             */
      __IOM uint32_t TS4MUX     : 5;            /*!< [6..2] TS4MUX                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS5CHR     : 2;            /*!< [9..8] TS5CHR                                                             */
      __IOM uint32_t TS5MUX     : 5;            /*!< [14..10] TS5MUX                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS6CHR     : 2;            /*!< [17..16] TS6CHR                                                           */
      __IOM uint32_t TS6MUX     : 5;            /*!< [22..18] TS6MUX                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS7CHR     : 2;            /*!< [25..24] TS7CHR                                                           */
      __IOM uint32_t TS7MUX     : 5;            /*!< [30..26] TS7MUX                                                           */
    } SQ7654_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t SQ3210;                      /*!< (@ 0x00000030) SQ3210                                                     */
    
    struct {
      __IOM uint32_t TS0CHR     : 2;            /*!< [1..0] TS0CHR                                                             */
      __IOM uint32_t TS0MUX     : 5;            /*!< [6..2] TS0MUX                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS1CHR     : 2;            /*!< [9..8] TS1CHR                                                             */
      __IOM uint32_t TS1MUX     : 5;            /*!< [14..10] TS1MUX                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS2CHR     : 2;            /*!< [17..16] TS2CHR                                                           */
      __IOM uint32_t TS2MUX     : 5;            /*!< [22..18] TS2MUX                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS3CHR     : 2;            /*!< [25..24] TS3CHR                                                           */
      __IOM uint32_t TS3MUX     : 5;            /*!< [30..26] TS3MUX                                                           */
    } SQ3210_b;
  } ;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t CHAR32;                      /*!< (@ 0x00000040) CHAR32                                                     */
    
    struct {
      __IOM uint32_t CHR2GN     : 1;            /*!< [0..0] CHR2GN                                                             */
      __IOM uint32_t CHR2RPT    : 3;            /*!< [3..1] CHR2RPT                                                            */
      __IOM uint32_t CHR2LS     : 3;            /*!< [6..4] CHR2LS                                                             */
      __IOM uint32_t CHR2RSEL   : 1;            /*!< [7..7] CHR2RSEL                                                           */
      __IOM uint32_t CHR2WCIEN  : 1;            /*!< [8..8] CHR2WCIEN                                                          */
      __IM  uint32_t            : 7;
      __IOM uint32_t CHR3GN     : 1;            /*!< [16..16] CHR3GN                                                           */
      __IOM uint32_t CHR3RPT    : 3;            /*!< [19..17] CHR3RPT                                                          */
      __IOM uint32_t CHR3LS     : 3;            /*!< [22..20] CHR3LS                                                           */
      __IOM uint32_t CHR3RSEL   : 1;            /*!< [23..23] CHR3RSEL                                                         */
      __IOM uint32_t CHR3WCIEN  : 1;            /*!< [24..24] CHR3WCIEN                                                        */
    } CHAR32_b;
  } ;
  __IOM uint32_t  CHAR32_SET;                   /*!< (@ 0x00000044) CHAR32_SET                                                 */
  __IOM uint32_t  CHAR32_CLR;                   /*!< (@ 0x00000048) CHAR32_CLR                                                 */
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t CHAR10;                      /*!< (@ 0x00000050) CHAR10                                                     */
    
    struct {
      __IOM uint32_t CHR0GN     : 1;            /*!< [0..0] CHR0GN                                                             */
      __IOM uint32_t CHR0RPT    : 3;            /*!< [3..1] CHR0RPT                                                            */
      __IOM uint32_t CHR0LS     : 3;            /*!< [6..4] CHR0LS                                                             */
      __IOM uint32_t CHR0RSEL   : 1;            /*!< [7..7] CHR0RSEL                                                           */
      __IOM uint32_t CHR0WCIEN  : 1;            /*!< [8..8] CHR0WCIEN                                                          */
      __IM  uint32_t            : 7;
      __IOM uint32_t CHR1GN     : 1;            /*!< [16..16] CHR1GN                                                           */
      __IOM uint32_t CHR1RPT    : 3;            /*!< [19..17] CHR1RPT                                                          */
      __IOM uint32_t CHR1LS     : 3;            /*!< [22..20] CHR1LS                                                           */
      __IOM uint32_t CHR1RSEL   : 1;            /*!< [23..23] CHR1RSEL                                                         */
      __IOM uint32_t CHR1WCIEN  : 1;            /*!< [24..24] CHR1WCIEN                                                        */
    } CHAR10_b;
  } ;
  __IOM uint32_t  CHAR10_SET;                   /*!< (@ 0x00000054) CHAR10_SET                                                 */
  __IOM uint32_t  CHAR10_CLR;                   /*!< (@ 0x00000058) CHAR10_CLR                                                 */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  DATA;                         /*!< (@ 0x00000060) DATA                                                       */
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t WCLIMITS;                    /*!< (@ 0x00000070) WCLIMITS                                                   */
    
    struct {
      __IOM uint32_t WCLT       : 16;           /*!< [15..0] WCLT                                                              */
      __IOM uint32_t WCGT       : 16;           /*!< [31..16] WCGT                                                             */
    } WCLIMITS_b;
  } ;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t ACC;                         /*!< (@ 0x00000080) ACC                                                        */
    
    struct {
      __IOM uint32_t ACC        : 16;           /*!< [15..0] ACC                                                               */
    } ACC_b;
  } ;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000090) STATUS                                                     */
    
    struct {
      __IOM uint32_t WCI        : 1;            /*!< [0..0] WCI                                                                */
      __IOM uint32_t SCCI       : 1;            /*!< [1..1] SCCI                                                               */
      __IOM uint32_t SDI        : 1;            /*!< [2..2] SDI                                                                */
      __IOM uint32_t FORI       : 1;            /*!< [3..3] FORI                                                               */
      __IOM uint32_t FURI       : 1;            /*!< [4..4] FURI                                                               */
    } STATUS_b;
  } ;
  __IOM uint32_t  STATUS_SET;                   /*!< (@ 0x00000094) STATUS_SET                                                 */
  __IOM uint32_t  STATUS_CLR;                   /*!< (@ 0x00000098) STATUS_CLR                                                 */
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t FIFOSTATUS;                  /*!< (@ 0x000000A0) FIFOSTATUS                                                 */
    
    struct {
      __IOM uint32_t FIFOLVL    : 4;            /*!< [3..0] FIFOLVL                                                            */
      __IOM uint32_t DPSTS      : 1;            /*!< [4..4] DPSTS                                                              */
      __IOM uint32_t DRDYF      : 1;            /*!< [5..5] DRDYF                                                              */
    } FIFOSTATUS_b;
  } ;
} SARADC_Type;                                  /*!< Size = 164 (0xa4)                                                         */



/* =========================================================================================================================== */
/* ================                                           SSG0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (SSG0)
  */

typedef struct {                                /*!< (@ 0x4001E000) SSG0 Structure                                             */
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000000) CONFIG                                                     */
    
    struct {
      __IOM uint32_t COUNT      : 12;           /*!< [11..0] COUNT                                                             */
      __IOM uint32_t SSEL       : 1;            /*!< [12..12] SSEL                                                             */
      __IOM uint32_t PHGFREN    : 1;            /*!< [13..13] PHGFREN                                                          */
      __IOM uint32_t PUGFREN    : 1;            /*!< [14..14] PUGFREN                                                          */
    } CONFIG_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000010) CONTROL                                                    */
    
    struct {
      __IOM uint32_t EX0INVEN   : 1;            /*!< [0..0] EX0INVEN                                                           */
      __IOM uint32_t EX1INVEN   : 1;            /*!< [1..1] EX1INVEN                                                           */
      __IOM uint32_t EX2INVEN   : 1;            /*!< [2..2] EX2INVEN                                                           */
      __IOM uint32_t EX3INVEN   : 1;            /*!< [3..3] EX3INVEN                                                           */
      __IOM uint32_t EX0EN      : 1;            /*!< [4..4] EX0EN                                                              */
      __IOM uint32_t EX1EN      : 1;            /*!< [5..5] EX1EN                                                              */
      __IOM uint32_t EX2EN      : 1;            /*!< [6..6] EX2EN                                                              */
      __IOM uint32_t EX3EN      : 1;            /*!< [7..7] EX3EN                                                              */
      __IOM uint32_t STATUS     : 1;            /*!< [8..8] STATUS                                                             */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000014) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000018) CONTROL_CLR                                                */
} SSG_Type;                                     /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           CMP0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CMP0)
  */

typedef struct {                                /*!< (@ 0x4001F000) CMP0 Structure                                             */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IM  uint32_t            : 13;
      __IOM uint32_t CMPFI      : 1;            /*!< [13..13] CMPFI                                                            */
      __IOM uint32_t CMPRI      : 1;            /*!< [14..14] CMPRI                                                            */
      __IM  uint32_t            : 15;
      __IOM uint32_t CMPOUT     : 1;            /*!< [30..30] CMPOUT                                                           */
      __IOM uint32_t CMPEN      : 1;            /*!< [31..31] CMPEN                                                            */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000010) MODE                                                       */
    
    struct {
      __IOM uint32_t NMUX       : 4;            /*!< [3..0] NMUX                                                               */
      __IOM uint32_t PMUX       : 4;            /*!< [7..4] PMUX                                                               */
      __IOM uint32_t INMUX      : 2;            /*!< [9..8] INMUX                                                              */
      __IOM uint32_t CMPMD      : 2;            /*!< [11..10] CMPMD                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t FIEN       : 1;            /*!< [13..13] FIEN                                                             */
      __IOM uint32_t RIEN       : 1;            /*!< [14..14] RIEN                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t DACLVL     : 6;            /*!< [21..16] DACLVL                                                           */
      __IOM uint32_t NWPUEN     : 1;            /*!< [22..22] NWPUEN                                                           */
      __IOM uint32_t PWPUEN     : 1;            /*!< [23..23] PWPUEN                                                           */
      __IOM uint32_t CMPHYN     : 2;            /*!< [25..24] CMPHYN                                                           */
      __IOM uint32_t CMPHYP     : 2;            /*!< [27..26] CMPHYP                                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t INVEN      : 1;            /*!< [30..30] INVEN                                                            */
    } MODE_b;
  } ;
  __IOM uint32_t  MODE_SET;                     /*!< (@ 0x00000014) MODE_SET                                                   */
  __IOM uint32_t  MODE_CLR;                     /*!< (@ 0x00000018) MODE_CLR                                                   */
} CMP_Type;                                     /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                         CAPSENSE0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CAPSENSE0)
  */

typedef struct {                                /*!< (@ 0x40023000) CAPSENSE0 Structure                                        */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t BUSYF      : 1;            /*!< [0..0] BUSYF                                                              */
      __IOM uint32_t CSEN       : 1;            /*!< [1..1] CSEN                                                               */
      __IOM uint32_t BIASEN     : 1;            /*!< [2..2] BIASEN                                                             */
      __IOM uint32_t CMPPOL     : 1;            /*!< [3..3] CMPPOL                                                             */
      __IOM uint32_t CMD        : 2;            /*!< [5..4] CMD                                                                */
      __IOM uint32_t CNVR       : 2;            /*!< [7..6] CNVR                                                               */
      __IOM uint32_t ACCMD      : 3;            /*!< [10..8] ACCMD                                                             */
      __IOM uint32_t MCEN       : 1;            /*!< [11..11] MCEN                                                             */
      __IOM uint32_t CSCM       : 4;            /*!< [15..12] CSCM                                                             */
      __IOM uint32_t PMMD       : 2;            /*!< [17..16] PMMD                                                             */
      __IOM uint32_t PMEF       : 1;            /*!< [18..18] PMEF                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMPEN      : 1;            /*!< [20..20] CMPEN                                                            */
      __IOM uint32_t CDIEN      : 1;            /*!< [21..21] CDIEN                                                            */
      __IOM uint32_t EOSIEN     : 1;            /*!< [22..22] EOSIEN                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMPI       : 1;            /*!< [24..24] CMPI                                                             */
      __IOM uint32_t CDI        : 1;            /*!< [25..25] CDI                                                              */
      __IOM uint32_t EOSI       : 1;            /*!< [26..26] EOSI                                                             */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t MODE;                        /*!< (@ 0x00000010) MODE                                                       */
    
    struct {
      __IOM uint32_t CGSEL      : 3;            /*!< [2..0] CGSEL                                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t RAMPSEL    : 2;            /*!< [7..6] RAMPSEL                                                            */
      __IOM uint32_t IASEL      : 3;            /*!< [10..8] IASEL                                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t DTSEL      : 3;            /*!< [14..12] DTSEL                                                            */
    } MODE_b;
  } ;
  __IOM uint32_t  MODE_SET;                     /*!< (@ 0x00000014) MODE_SET                                                   */
  __IOM uint32_t  MODE_CLR;                     /*!< (@ 0x00000018) MODE_CLR                                                   */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000020) DATA                                                       */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] DATA                                                              */
    } DATA_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t SCAN;                        /*!< (@ 0x00000030) SCAN                                                       */
    
    struct {
      __IOM uint32_t SCANEN     : 16;           /*!< [15..0] SCANEN                                                            */
    } SCAN_b;
  } ;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t CSTH;                        /*!< (@ 0x00000040) CSTH                                                       */
    
    struct {
      __IOM uint32_t CSTH       : 16;           /*!< [15..0] CSTH                                                              */
    } CSTH_b;
  } ;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t MUX;                         /*!< (@ 0x00000050) MUX                                                        */
    
    struct {
      __IOM uint32_t CSMX       : 4;            /*!< [3..0] CSMX                                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t CSDISC     : 1;            /*!< [7..7] CSDISC                                                             */
    } MUX_b;
  } ;
} CAPSENSE_Type;                                /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           EMIF0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (EMIF0)
  */

typedef struct {                                /*!< (@ 0x40026000) EMIF0 Structure                                            */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t IF0EN      : 1;            /*!< [0..0] IF0EN                                                              */
      __IOM uint32_t IF1EN      : 1;            /*!< [1..1] IF1EN                                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t OFFSTEN    : 1;            /*!< [4..4] OFFSTEN                                                            */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED[5];
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000020) STATUS                                                     */
    
    struct {
      __IOM uint32_t OFFSTS     : 1;            /*!< [0..0] OFFSTS                                                             */
      __IOM uint32_t IDLESTS    : 1;            /*!< [1..1] IDLESTS                                                            */
    } STATUS_b;
  } ;
  __IM  uint32_t  RESERVED1[23];
  __IOM uint32_t  IF0_CONFIG;                   /*!< (@ 0x00000080) IF0_CONFIG                                                 */
  __IOM uint32_t  IF0_CONFIG_SET;               /*!< (@ 0x00000084) IF0_CONFIG_SET                                             */
  __IOM uint32_t  IF0_CONFIG_CLR;               /*!< (@ 0x00000088) IF0_CONFIG_CLR                                             */
  __IM  uint32_t  RESERVED2;
  __IOM uint32_t  IF0_IFRT;                     /*!< (@ 0x00000090) IF0_IFRT                                                   */
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  IF0_IFWT;                     /*!< (@ 0x000000A0) IF0_IFWT                                                   */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  IF0_IFRCST;                   /*!< (@ 0x000000B0) IF0_IFRCST                                                 */
  __IM  uint32_t  RESERVED5[3];
  __IOM uint32_t  IF0_IFWCST;                   /*!< (@ 0x000000C0) IF0_IFWCST                                                 */
  __IM  uint32_t  RESERVED6[15];
  __IOM uint32_t  IF1_CONFIG;                   /*!< (@ 0x00000100) IF1_CONFIG                                                 */
  __IOM uint32_t  IF1_CONFIG_SET;               /*!< (@ 0x00000104) IF1_CONFIG_SET                                             */
  __IOM uint32_t  IF1_CONFIG_CLR;               /*!< (@ 0x00000108) IF1_CONFIG_CLR                                             */
  __IM  uint32_t  RESERVED7;
  __IOM uint32_t  IF1_IFRT;                     /*!< (@ 0x00000110) IF1_IFRT                                                   */
  __IM  uint32_t  RESERVED8[3];
  __IOM uint32_t  IF1_IFWT;                     /*!< (@ 0x00000120) IF1_IFWT                                                   */
  __IM  uint32_t  RESERVED9[3];
  __IOM uint32_t  IF1_IFRCST;                   /*!< (@ 0x00000130) IF1_IFRCST                                                 */
  __IM  uint32_t  RESERVED10[3];
  __IOM uint32_t  IF1_IFWCST;                   /*!< (@ 0x00000140) IF1_IFWCST                                                 */
} EMIF_Type;                                    /*!< Size = 324 (0x144)                                                        */



/* =========================================================================================================================== */
/* ================                                           AES0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (AES0)
  */

typedef struct {                                /*!< (@ 0x40027000) AES0 Structure                                             */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t XFRSTA     : 1;            /*!< [0..0] XFRSTA                                                             */
      __IOM uint32_t KEYCPEN    : 1;            /*!< [1..1] KEYCPEN                                                            */
      __IOM uint32_t EDMD       : 1;            /*!< [2..2] EDMD                                                               */
      __IM  uint32_t            : 5;
      __IOM uint32_t SWMDEN     : 1;            /*!< [8..8] SWMDEN                                                             */
      __IOM uint32_t BEN        : 1;            /*!< [9..9] BEN                                                                */
      __IOM uint32_t XOREN      : 2;            /*!< [11..10] XOREN                                                            */
      __IOM uint32_t HCTREN     : 1;            /*!< [12..12] HCTREN                                                           */
      __IOM uint32_t HCBCEN     : 1;            /*!< [13..13] HCBCEN                                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t KEYSIZE    : 2;            /*!< [17..16] KEYSIZE                                                          */
      __IM  uint32_t            : 6;
      __IOM uint32_t ERRIEN     : 1;            /*!< [24..24] ERRIEN                                                           */
      __IOM uint32_t OCIEN      : 1;            /*!< [25..25] OCIEN                                                            */
      __IM  uint32_t            : 4;
      __IOM uint32_t DBGMD      : 1;            /*!< [30..30] DBGMD                                                            */
      __IOM uint32_t RESET      : 1;            /*!< [31..31] RESET                                                            */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t XFRSIZE;                     /*!< (@ 0x00000010) XFRSIZE                                                    */
    
    struct {
      __IOM uint32_t XFRSIZE    : 11;           /*!< [10..0] XFRSIZE                                                           */
    } XFRSIZE_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  DATAFIFO;                     /*!< (@ 0x00000020) DATAFIFO                                                   */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  XORFIFO;                      /*!< (@ 0x00000030) XORFIFO                                                    */
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  HWKEY0;                       /*!< (@ 0x00000040) HWKEY0                                                     */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  HWKEY1;                       /*!< (@ 0x00000050) HWKEY1                                                     */
  __IM  uint32_t  RESERVED5[3];
  __IOM uint32_t  HWKEY2;                       /*!< (@ 0x00000060) HWKEY2                                                     */
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  HWKEY3;                       /*!< (@ 0x00000070) HWKEY3                                                     */
  __IM  uint32_t  RESERVED7[3];
  __IOM uint32_t  HWKEY4;                       /*!< (@ 0x00000080) HWKEY4                                                     */
  __IM  uint32_t  RESERVED8[3];
  __IOM uint32_t  HWKEY5;                       /*!< (@ 0x00000090) HWKEY5                                                     */
  __IM  uint32_t  RESERVED9[3];
  __IOM uint32_t  HWKEY6;                       /*!< (@ 0x000000A0) HWKEY6                                                     */
  __IM  uint32_t  RESERVED10[3];
  __IOM uint32_t  HWKEY7;                       /*!< (@ 0x000000B0) HWKEY7                                                     */
  __IM  uint32_t  RESERVED11[3];
  __IOM uint32_t  HWCTR0;                       /*!< (@ 0x000000C0) HWCTR0                                                     */
  __IM  uint32_t  RESERVED12[3];
  __IOM uint32_t  HWCTR1;                       /*!< (@ 0x000000D0) HWCTR1                                                     */
  __IM  uint32_t  RESERVED13[3];
  __IOM uint32_t  HWCTR2;                       /*!< (@ 0x000000E0) HWCTR2                                                     */
  __IM  uint32_t  RESERVED14[3];
  __IOM uint32_t  HWCTR3;                       /*!< (@ 0x000000F0) HWCTR3                                                     */
  __IM  uint32_t  RESERVED15[3];
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000100) STATUS                                                     */
    
    struct {
      __IOM uint32_t DURF       : 1;            /*!< [0..0] DURF                                                               */
      __IOM uint32_t DORF       : 1;            /*!< [1..1] DORF                                                               */
      __IOM uint32_t XORF       : 1;            /*!< [2..2] XORF                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t DFIFOLVL   : 3;            /*!< [6..4] DFIFOLVL                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t XFIFOLVL   : 3;            /*!< [10..8] XFIFOLVL                                                          */
      __IM  uint32_t            : 5;
      __IOM uint32_t BUSYF      : 1;            /*!< [16..16] BUSYF                                                            */
      __IM  uint32_t            : 13;
      __IOM uint32_t ERRI       : 1;            /*!< [30..30] ERRI                                                             */
      __IOM uint32_t OCI        : 1;            /*!< [31..31] OCI                                                              */
    } STATUS_b;
  } ;
  __IOM uint32_t  STATUS_SET;                   /*!< (@ 0x00000104) STATUS_SET                                                 */
  __IOM uint32_t  STATUS_CLR;                   /*!< (@ 0x00000108) STATUS_CLR                                                 */
} AES_Type;                                     /*!< Size = 268 (0x10c)                                                        */



/* =========================================================================================================================== */
/* ================                                           CRC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CRC0)
  */

typedef struct {                                /*!< (@ 0x40028000) CRC0 Structure                                             */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t SINITEN    : 1;            /*!< [0..0] SINITEN                                                            */
      __IOM uint32_t SEED       : 1;            /*!< [1..1] SEED                                                               */
      __IOM uint32_t CRCEN      : 1;            /*!< [2..2] CRCEN                                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t POLYSEL    : 2;            /*!< [5..4] POLYSEL                                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t BMDEN      : 1;            /*!< [8..8] BMDEN                                                              */
      __IOM uint32_t BBREN      : 1;            /*!< [9..9] BBREN                                                              */
      __IOM uint32_t ORDER      : 2;            /*!< [11..10] ORDER                                                            */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DATA;                         /*!< (@ 0x00000010) DATA                                                       */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  RDATA;                        /*!< (@ 0x00000020) RDATA                                                      */
} CRC_Type;                                     /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           RTC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (RTC0)
  */

typedef struct {                                /*!< (@ 0x40029000) RTC0 Structure                                             */
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000000) CONFIG                                                     */
    
    struct {
      __IOM uint32_t ALM0AREN   : 1;            /*!< [0..0] ALM0AREN                                                           */
      __IOM uint32_t RUN        : 1;            /*!< [1..1] RUN                                                                */
      __IOM uint32_t MCLKEN     : 1;            /*!< [2..2] MCLKEN                                                             */
      __IOM uint32_t ASEN       : 1;            /*!< [3..3] ASEN                                                               */
      __IOM uint32_t RTCLC      : 4;            /*!< [7..4] RTCLC                                                              */
      __IM  uint32_t            : 8;
      __IOM uint32_t BDEN       : 1;            /*!< [16..16] BDEN                                                             */
      __IOM uint32_t CRYSEN     : 1;            /*!< [17..17] CRYSEN                                                           */
      __IOM uint32_t AGCEN      : 1;            /*!< [18..18] AGCEN                                                            */
      __IM  uint32_t            : 5;
      __IOM uint32_t ALM0EN     : 1;            /*!< [24..24] ALM0EN                                                           */
      __IOM uint32_t ALM1EN     : 1;            /*!< [25..25] ALM1EN                                                           */
      __IOM uint32_t ALM2EN     : 1;            /*!< [26..26] ALM2EN                                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t RTCOEN     : 1;            /*!< [29..29] RTCOEN                                                           */
      __IOM uint32_t CLKSEL     : 1;            /*!< [30..30] CLKSEL                                                           */
      __IOM uint32_t RTCEN      : 1;            /*!< [31..31] RTCEN                                                            */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000004) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000008) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000010) CONTROL                                                    */
    
    struct {
      __IOM uint32_t ALM0I      : 1;            /*!< [0..0] ALM0I                                                              */
      __IOM uint32_t ALM1I      : 1;            /*!< [1..1] ALM1I                                                              */
      __IOM uint32_t ALM2I      : 1;            /*!< [2..2] ALM2I                                                              */
      __IOM uint32_t TMRCAP     : 1;            /*!< [3..3] TMRCAP                                                             */
      __IOM uint32_t TMRSET     : 1;            /*!< [4..4] TMRSET                                                             */
      __IOM uint32_t CLKVF      : 1;            /*!< [5..5] CLKVF                                                              */
      __IOM uint32_t OSCFI      : 1;            /*!< [6..6] OSCFI                                                              */
      __IOM uint32_t HSMDEN     : 1;            /*!< [7..7] HSMDEN                                                             */
      __IOM uint32_t LRDYF      : 1;            /*!< [8..8] LRDYF                                                              */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000014) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000018) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED1;
  __IOM uint32_t  ALARM0;                       /*!< (@ 0x00000020) ALARM0                                                     */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  ALARM1;                       /*!< (@ 0x00000030) ALARM1                                                     */
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  ALARM2;                       /*!< (@ 0x00000040) ALARM2                                                     */
  __IM  uint32_t  RESERVED4[3];
  __IOM uint32_t  SETCAP;                       /*!< (@ 0x00000050) SETCAP                                                     */
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t LFOCONTROL;                  /*!< (@ 0x00000060) LFOCONTROL                                                 */
    
    struct {
      __IM  uint32_t            : 31;
      __IOM uint32_t LFOSCEN    : 1;            /*!< [31..31] LFOSCEN                                                          */
    } LFOCONTROL_b;
  } ;
} RTC_Type;                                     /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                          PBCFG0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PBCFG0)
  */

typedef struct {                                /*!< (@ 0x4002A000) PBCFG0 Structure                                           */
  
  union {
    __IOM uint32_t CONTROL0;                    /*!< (@ 0x00000000) CONTROL0                                                   */
    
    struct {
      __IOM uint32_t INT0SEL    : 4;            /*!< [3..0] INT0SEL                                                            */
      __IOM uint32_t INT0POL    : 1;            /*!< [4..4] INT0POL                                                            */
      __IOM uint32_t INT0MD     : 2;            /*!< [6..5] INT0MD                                                             */
      __IOM uint32_t INT0EN     : 1;            /*!< [7..7] INT0EN                                                             */
      __IOM uint32_t INT1SEL    : 4;            /*!< [11..8] INT1SEL                                                           */
      __IOM uint32_t INT1POL    : 1;            /*!< [12..12] INT1POL                                                          */
      __IOM uint32_t INT1MD     : 2;            /*!< [14..13] INT1MD                                                           */
      __IOM uint32_t INT1EN     : 1;            /*!< [15..15] INT1EN                                                           */
      __IM  uint32_t            : 8;
      __IOM uint32_t PGTIMER    : 5;            /*!< [28..24] PGTIMER                                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t PGDONEF    : 1;            /*!< [31..31] PGDONEF                                                          */
    } CONTROL0_b;
  } ;
  __IOM uint32_t  CONTROL0_SET;                 /*!< (@ 0x00000004) CONTROL0_SET                                               */
  __IOM uint32_t  CONTROL0_CLR;                 /*!< (@ 0x00000008) CONTROL0_CLR                                               */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CONTROL1;                    /*!< (@ 0x00000010) CONTROL1                                                   */
    
    struct {
      __IOM uint32_t JTAGEN     : 1;            /*!< [0..0] JTAGEN                                                             */
      __IOM uint32_t ETMEN      : 1;            /*!< [1..1] ETMEN                                                              */
      __IM  uint32_t            : 5;
      __IOM uint32_t EMIFBE0BEN : 1;            /*!< [7..7] EMIFBE0BEN                                                         */
      __IOM uint32_t EMIFCS1EN  : 1;            /*!< [8..8] EMIFCS1EN                                                          */
      __IOM uint32_t EMIFEN     : 1;            /*!< [9..9] EMIFEN                                                             */
      __IOM uint32_t EMIFWIDTH  : 6;            /*!< [15..10] EMIFWIDTH                                                        */
      __IOM uint32_t MATMD      : 2;            /*!< [17..16] MATMD                                                            */
      __IM  uint32_t            : 5;
      __IOM uint32_t EVREGRMD   : 1;            /*!< [23..23] EVREGRMD                                                         */
      __IM  uint32_t            : 7;
      __IOM uint32_t LOCK       : 1;            /*!< [31..31] LOCK                                                             */
    } CONTROL1_b;
  } ;
  __IOM uint32_t  CONTROL1_SET;                 /*!< (@ 0x00000014) CONTROL1_SET                                               */
  __IOM uint32_t  CONTROL1_CLR;                 /*!< (@ 0x00000018) CONTROL1_CLR                                               */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t XBAR0L;                      /*!< (@ 0x00000020) XBAR0L                                                     */
    
    struct {
      __IOM uint32_t USART0EN   : 1;            /*!< [0..0] USART0EN                                                           */
      __IOM uint32_t USART0FCEN : 1;            /*!< [1..1] USART0FCEN                                                         */
      __IOM uint32_t USART0CEN  : 1;            /*!< [2..2] USART0CEN                                                          */
      __IOM uint32_t SPI0EN     : 1;            /*!< [3..3] SPI0EN                                                             */
      __IOM uint32_t SPI0NSSEN  : 1;            /*!< [4..4] SPI0NSSEN                                                          */
      __IOM uint32_t USART1EN   : 1;            /*!< [5..5] USART1EN                                                           */
      __IOM uint32_t USART1FCEN : 1;            /*!< [6..6] USART1FCEN                                                         */
      __IOM uint32_t USART1CEN  : 1;            /*!< [7..7] USART1CEN                                                          */
      __IOM uint32_t EPCA0EN    : 3;            /*!< [10..8] EPCA0EN                                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t PCA0EN     : 2;            /*!< [15..14] PCA0EN                                                           */
      __IOM uint32_t PCA1EN     : 2;            /*!< [17..16] PCA1EN                                                           */
      __IOM uint32_t EECI0EN    : 1;            /*!< [18..18] EECI0EN                                                          */
      __IOM uint32_t ECI0EN     : 1;            /*!< [19..19] ECI0EN                                                           */
      __IOM uint32_t ECI1EN     : 1;            /*!< [20..20] ECI1EN                                                           */
      __IOM uint32_t I2S0TXEN   : 1;            /*!< [21..21] I2S0TXEN                                                         */
      __IOM uint32_t I2C0EN     : 1;            /*!< [22..22] I2C0EN                                                           */
      __IOM uint32_t CMP0SEN    : 1;            /*!< [23..23] CMP0SEN                                                          */
      __IOM uint32_t CMP0AEN    : 1;            /*!< [24..24] CMP0AEN                                                          */
      __IOM uint32_t CMP1SEN    : 1;            /*!< [25..25] CMP1SEN                                                          */
      __IOM uint32_t CMP1AEN    : 1;            /*!< [26..26] CMP1AEN                                                          */
      __IOM uint32_t TMR0CTEN   : 1;            /*!< [27..27] TMR0CTEN                                                         */
      __IOM uint32_t TMR0EXEN   : 1;            /*!< [28..28] TMR0EXEN                                                         */
      __IOM uint32_t TMR1CTEN   : 1;            /*!< [29..29] TMR1CTEN                                                         */
      __IOM uint32_t TMR1EXEN   : 1;            /*!< [30..30] TMR1EXEN                                                         */
    } XBAR0L_b;
  } ;
  __IOM uint32_t  XBAR0L_SET;                   /*!< (@ 0x00000024) XBAR0L_SET                                                 */
  __IOM uint32_t  XBAR0L_CLR;                   /*!< (@ 0x00000028) XBAR0L_CLR                                                 */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t XBAR0H;                      /*!< (@ 0x00000030) XBAR0H                                                     */
    
    struct {
      __IOM uint32_t UART0EN    : 1;            /*!< [0..0] UART0EN                                                            */
      __IOM uint32_t UART0FCEN  : 1;            /*!< [1..1] UART0FCEN                                                          */
      __IOM uint32_t UART1EN    : 1;            /*!< [2..2] UART1EN                                                            */
      __IOM uint32_t SPI1EN     : 1;            /*!< [3..3] SPI1EN                                                             */
      __IOM uint32_t SPI1NSSEN  : 1;            /*!< [4..4] SPI1NSSEN                                                          */
      __IOM uint32_t SPI2EN     : 1;            /*!< [5..5] SPI2EN                                                             */
      __IOM uint32_t SPI2NSSEN  : 1;            /*!< [6..6] SPI2NSSEN                                                          */
      __IOM uint32_t AHBEN      : 1;            /*!< [7..7] AHBEN                                                              */
      __IM  uint32_t            : 23;
      __IOM uint32_t XBAR0EN    : 1;            /*!< [31..31] XBAR0EN                                                          */
    } XBAR0H_b;
  } ;
  __IOM uint32_t  XBAR0H_SET;                   /*!< (@ 0x00000034) XBAR0H_SET                                                 */
  __IOM uint32_t  XBAR0H_CLR;                   /*!< (@ 0x00000038) XBAR0H_CLR                                                 */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t XBAR1;                       /*!< (@ 0x00000040) XBAR1                                                      */
    
    struct {
      __IOM uint32_t SSG0EN     : 2;            /*!< [1..0] SSG0EN                                                             */
      __IOM uint32_t CMP0SEN    : 1;            /*!< [2..2] CMP0SEN                                                            */
      __IOM uint32_t CMP1SEN    : 1;            /*!< [3..3] CMP1SEN                                                            */
      __IOM uint32_t SPI1EN     : 1;            /*!< [4..4] SPI1EN                                                             */
      __IOM uint32_t SPI1NSSEN  : 1;            /*!< [5..5] SPI1NSSEN                                                          */
      __IOM uint32_t RTC0EN     : 1;            /*!< [6..6] RTC0EN                                                             */
      __IOM uint32_t SPI2EN     : 1;            /*!< [7..7] SPI2EN                                                             */
      __IOM uint32_t SPI2NSSEN  : 1;            /*!< [8..8] SPI2NSSEN                                                          */
      __IOM uint32_t USART1EN   : 1;            /*!< [9..9] USART1EN                                                           */
      __IOM uint32_t USART1FCEN : 1;            /*!< [10..10] USART1FCEN                                                       */
      __IOM uint32_t USART1CEN  : 1;            /*!< [11..11] USART1CEN                                                        */
      __IOM uint32_t UART0EN    : 1;            /*!< [12..12] UART0EN                                                          */
      __IOM uint32_t UART0FCEN  : 1;            /*!< [13..13] UART0FCEN                                                        */
      __IOM uint32_t I2S0TXEN   : 1;            /*!< [14..14] I2S0TXEN                                                         */
      __IOM uint32_t I2C0EN     : 1;            /*!< [15..15] I2C0EN                                                           */
      __IOM uint32_t UART1EN    : 1;            /*!< [16..16] UART1EN                                                          */
      __IOM uint32_t I2S0RXEN   : 1;            /*!< [17..17] I2S0RXEN                                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t LPT0OEN    : 1;            /*!< [19..19] LPT0OEN                                                          */
      __IOM uint32_t I2C1EN     : 1;            /*!< [20..20] I2C1EN                                                           */
      __IOM uint32_t KILLHDEN   : 1;            /*!< [21..21] KILLHDEN                                                         */
      __IM  uint32_t            : 9;
      __IOM uint32_t XBAR1EN    : 1;            /*!< [31..31] XBAR1EN                                                          */
    } XBAR1_b;
  } ;
  __IOM uint32_t  XBAR1_SET;                    /*!< (@ 0x00000044) XBAR1_SET                                                  */
  __IOM uint32_t  XBAR1_CLR;                    /*!< (@ 0x00000048) XBAR1_CLR                                                  */
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t PBKEY;                       /*!< (@ 0x00000050) PBKEY                                                      */
    
    struct {
      __IOM uint32_t KEY        : 8;            /*!< [7..0] KEY                                                                */
    } PBKEY_b;
  } ;
} PBCFG_Type;                                   /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                          PBSTD2                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PBSTD2)
  */

typedef struct {                                /*!< (@ 0x4002A1E0) PBSTD2 Structure                                           */
  
  union {
    __IOM uint32_t PB;                          /*!< (@ 0x00000000) PB                                                         */
    
    struct {
      __IOM uint32_t PB         : 16;           /*!< [15..0] PB                                                                */
    } PB_b;
  } ;
  __IOM uint32_t  PB_SET;                       /*!< (@ 0x00000004) PB_SET                                                     */
  __IOM uint32_t  PB_CLR;                       /*!< (@ 0x00000008) PB_CLR                                                     */
  __IOM uint32_t  PB_MSK;                       /*!< (@ 0x0000000C) PB_MSK                                                     */
  
  union {
    __IOM uint32_t PBPIN;                       /*!< (@ 0x00000010) PBPIN                                                      */
    
    struct {
      __IOM uint32_t PBPIN      : 16;           /*!< [15..0] PBPIN                                                             */
    } PBPIN_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t PBMDSEL;                     /*!< (@ 0x00000020) PBMDSEL                                                    */
    
    struct {
      __IOM uint32_t PBMDSEL    : 16;           /*!< [15..0] PBMDSEL                                                           */
    } PBMDSEL_b;
  } ;
  __IOM uint32_t  PBMDSEL_SET;                  /*!< (@ 0x00000024) PBMDSEL_SET                                                */
  __IOM uint32_t  PBMDSEL_CLR;                  /*!< (@ 0x00000028) PBMDSEL_CLR                                                */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t PBSKIPEN;                    /*!< (@ 0x00000030) PBSKIPEN                                                   */
    
    struct {
      __IOM uint32_t PBSKIPEN   : 16;           /*!< [15..0] PBSKIPEN                                                          */
    } PBSKIPEN_b;
  } ;
  __IOM uint32_t  PBSKIPEN_SET;                 /*!< (@ 0x00000034) PBSKIPEN_SET                                               */
  __IOM uint32_t  PBSKIPEN_CLR;                 /*!< (@ 0x00000038) PBSKIPEN_CLR                                               */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t PBOUTMD;                     /*!< (@ 0x00000040) PBOUTMD                                                    */
    
    struct {
      __IOM uint32_t PBOUTMD    : 16;           /*!< [15..0] PBOUTMD                                                           */
    } PBOUTMD_b;
  } ;
  __IOM uint32_t  PBOUTMD_SET;                  /*!< (@ 0x00000044) PBOUTMD_SET                                                */
  __IOM uint32_t  PBOUTMD_CLR;                  /*!< (@ 0x00000048) PBOUTMD_CLR                                                */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t PBDRV;                       /*!< (@ 0x00000050) PBDRV                                                      */
    
    struct {
      __IOM uint32_t PBDRV      : 16;           /*!< [15..0] PBDRV                                                             */
      __IOM uint32_t PBPUEN     : 1;            /*!< [16..16] PBPUEN                                                           */
    } PBDRV_b;
  } ;
  __IOM uint32_t  PBDRV_SET;                    /*!< (@ 0x00000054) PBDRV_SET                                                  */
  __IOM uint32_t  PBDRV_CLR;                    /*!< (@ 0x00000058) PBDRV_CLR                                                  */
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t PM;                          /*!< (@ 0x00000060) PM                                                         */
    
    struct {
      __IOM uint32_t PM         : 16;           /*!< [15..0] PM                                                                */
    } PM_b;
  } ;
  __IOM uint32_t  PM_SET;                       /*!< (@ 0x00000064) PM_SET                                                     */
  __IOM uint32_t  PM_CLR;                       /*!< (@ 0x00000068) PM_CLR                                                     */
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t PMEN;                        /*!< (@ 0x00000070) PMEN                                                       */
    
    struct {
      __IOM uint32_t PMEN       : 16;           /*!< [15..0] PMEN                                                              */
    } PMEN_b;
  } ;
  __IOM uint32_t  PMEN_SET;                     /*!< (@ 0x00000074) PMEN_SET                                                   */
  __IOM uint32_t  PMEN_CLR;                     /*!< (@ 0x00000078) PMEN_CLR                                                   */
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t PBLOCK;                      /*!< (@ 0x00000080) PBLOCK                                                     */
    
    struct {
      __IOM uint32_t PBLOCK     : 16;           /*!< [15..0] PBLOCK                                                            */
    } PBLOCK_b;
  } ;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t PBPGEN;                      /*!< (@ 0x00000090) PBPGEN                                                     */
    
    struct {
      __IOM uint32_t PBPGEN     : 16;           /*!< [15..0] PBPGEN                                                            */
    } PBPGEN_b;
  } ;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t PBPGPHASE;                   /*!< (@ 0x000000A0) PBPGPHASE                                                  */
    
    struct {
      __IOM uint32_t PBPGPH0    : 16;           /*!< [15..0] PBPGPH0                                                           */
      __IOM uint32_t PBPGPH1    : 16;           /*!< [31..16] PBPGPH1                                                          */
    } PBPGPHASE_b;
  } ;
} PBSTD_Type;                                   /*!< Size = 164 (0xa4)                                                         */



/* =========================================================================================================================== */
/* ================                                           PBHD4                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PBHD4)
  */

typedef struct {                                /*!< (@ 0x4002A3C0) PBHD4 Structure                                            */
  
  union {
    __IOM uint32_t PB;                          /*!< (@ 0x00000000) PB                                                         */
    
    struct {
      __IOM uint32_t PB         : 6;            /*!< [5..0] PB                                                                 */
    } PB_b;
  } ;
  __IOM uint32_t  PB_SET;                       /*!< (@ 0x00000004) PB_SET                                                     */
  __IOM uint32_t  PB_CLR;                       /*!< (@ 0x00000008) PB_CLR                                                     */
  __IOM uint32_t  PB_MSK;                       /*!< (@ 0x0000000C) PB_MSK                                                     */
  
  union {
    __IOM uint32_t PBPIN;                       /*!< (@ 0x00000010) PBPIN                                                      */
    
    struct {
      __IOM uint32_t PBPIN      : 6;            /*!< [5..0] PBPIN                                                              */
    } PBPIN_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t PBMDSEL;                     /*!< (@ 0x00000020) PBMDSEL                                                    */
    
    struct {
      __IOM uint32_t PBMDSEL    : 6;            /*!< [5..0] PBMDSEL                                                            */
    } PBMDSEL_b;
  } ;
  __IOM uint32_t  PBMDSEL_SET;                  /*!< (@ 0x00000024) PBMDSEL_SET                                                */
  __IOM uint32_t  PBMDSEL_CLR;                  /*!< (@ 0x00000028) PBMDSEL_CLR                                                */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t PBDEN;                       /*!< (@ 0x00000030) PBDEN                                                      */
    
    struct {
      __IOM uint32_t PBNDEN     : 6;            /*!< [5..0] PBNDEN                                                             */
      __IM  uint32_t            : 10;
      __IOM uint32_t PBPDEN     : 6;            /*!< [21..16] PBPDEN                                                           */
    } PBDEN_b;
  } ;
  __IOM uint32_t  PBDEN_SET;                    /*!< (@ 0x00000034) PBDEN_SET                                                  */
  __IOM uint32_t  PBDEN_CLR;                    /*!< (@ 0x00000038) PBDEN_CLR                                                  */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t PBDRV;                       /*!< (@ 0x00000040) PBDRV                                                      */
    
    struct {
      __IOM uint32_t PBDRV      : 6;            /*!< [5..0] PBDRV                                                              */
      __IM  uint32_t            : 10;
      __IOM uint32_t PBPUEN     : 1;            /*!< [16..16] PBPUEN                                                           */
      __IOM uint32_t PBLVMD     : 1;            /*!< [17..17] PBLVMD                                                           */
      __IOM uint32_t PBSLEW     : 2;            /*!< [19..18] PBSLEW                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBBIASEN   : 1;            /*!< [21..21] PBBIASEN                                                         */
      __IOM uint32_t PBDRVEN    : 1;            /*!< [22..22] PBDRVEN                                                          */
      __IOM uint32_t PBVTRKEN   : 1;            /*!< [23..23] PBVTRKEN                                                         */
    } PBDRV_b;
  } ;
  __IOM uint32_t  PBDRV_SET;                    /*!< (@ 0x00000044) PBDRV_SET                                                  */
  __IOM uint32_t  PBDRV_CLR;                    /*!< (@ 0x00000048) PBDRV_CLR                                                  */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t PBILIMIT;                    /*!< (@ 0x00000050) PBILIMIT                                                   */
    
    struct {
      __IOM uint32_t PBILEN     : 6;            /*!< [5..0] PBILEN                                                             */
      __IM  uint32_t            : 10;
      __IOM uint32_t NILIMIT    : 4;            /*!< [19..16] NILIMIT                                                          */
      __IOM uint32_t PILIMIT    : 4;            /*!< [23..20] PILIMIT                                                          */
    } PBILIMIT_b;
  } ;
  __IOM uint32_t  PBILIMIT_SET;                 /*!< (@ 0x00000054) PBILIMIT_SET                                               */
  __IOM uint32_t  PBILIMIT_CLR;                 /*!< (@ 0x00000058) PBILIMIT_CLR                                               */
  __IM  uint32_t  RESERVED4[5];
  
  union {
    __IOM uint32_t PBFSEL;                      /*!< (@ 0x00000070) PBFSEL                                                     */
    
    struct {
      __IOM uint32_t PB0SEL     : 2;            /*!< [1..0] PB0SEL                                                             */
      __IOM uint32_t PB1SEL     : 2;            /*!< [3..2] PB1SEL                                                             */
      __IOM uint32_t PB2SEL     : 2;            /*!< [5..4] PB2SEL                                                             */
      __IOM uint32_t PB3SEL     : 2;            /*!< [7..6] PB3SEL                                                             */
      __IOM uint32_t PB4SEL     : 2;            /*!< [9..8] PB4SEL                                                             */
      __IOM uint32_t PB5SEL     : 3;            /*!< [12..10] PB5SEL                                                           */
    } PBFSEL_b;
  } ;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t PBSS;                        /*!< (@ 0x00000080) PBSS                                                       */
    
    struct {
      __IOM uint32_t PB0SSSEL   : 2;            /*!< [1..0] PB0SSSEL                                                           */
      __IOM uint32_t PB1SSSEL   : 2;            /*!< [3..2] PB1SSSEL                                                           */
      __IOM uint32_t PB2SSSEL   : 2;            /*!< [5..4] PB2SSSEL                                                           */
      __IOM uint32_t PB3SSSEL   : 2;            /*!< [7..6] PB3SSSEL                                                           */
      __IOM uint32_t PB4SSSEL   : 2;            /*!< [9..8] PB4SSSEL                                                           */
      __IOM uint32_t PB5SSSEL   : 2;            /*!< [11..10] PB5SSSEL                                                         */
      __IM  uint32_t            : 4;
      __IOM uint32_t SSMDEN     : 1;            /*!< [16..16] SSMDEN                                                           */
      __IOM uint32_t PBSSSMD    : 1;            /*!< [17..17] PBSSSMD                                                          */
    } PBSS_b;
  } ;
  __IOM uint32_t  PBSS_SET;                     /*!< (@ 0x00000084) PBSS_SET                                                   */
  __IOM uint32_t  PBSS_CLR;                     /*!< (@ 0x00000088) PBSS_CLR                                                   */
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t PBLOCK;                      /*!< (@ 0x00000090) PBLOCK                                                     */
    
    struct {
      __IOM uint32_t PBLOCK     : 6;            /*!< [5..0] PBLOCK                                                             */
    } PBLOCK_b;
  } ;
} PBHD_Type;                                    /*!< Size = 148 (0x94)                                                         */



/* =========================================================================================================================== */
/* ================                                         CLKCTRL0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CLKCTRL0)
  */

typedef struct {                                /*!< (@ 0x4002D000) CLKCTRL0 Structure                                         */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t AHBSEL     : 3;            /*!< [2..0] AHBSEL                                                             */
      __IM  uint32_t            : 5;
      __IOM uint32_t AHBDIV     : 3;            /*!< [10..8] AHBDIV                                                            */
      __IM  uint32_t            : 5;
      __IOM uint32_t APBDIV     : 1;            /*!< [16..16] APBDIV                                                           */
      __IM  uint32_t            : 11;
      __IOM uint32_t EXTESEL    : 1;            /*!< [28..28] EXTESEL                                                          */
      __IOM uint32_t OBUSYF     : 1;            /*!< [29..29] OBUSYF                                                           */
    } CONTROL_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t AHBCLKG;                     /*!< (@ 0x00000010) AHBCLKG                                                    */
    
    struct {
      __IOM uint32_t RAMCEN     : 1;            /*!< [0..0] RAMCEN                                                             */
      __IOM uint32_t DMACEN     : 1;            /*!< [1..1] DMACEN                                                             */
      __IOM uint32_t FLASHCEN   : 1;            /*!< [2..2] FLASHCEN                                                           */
      __IOM uint32_t EMIF0CEN   : 1;            /*!< [3..3] EMIF0CEN                                                           */
      __IOM uint32_t USB0BCEN   : 1;            /*!< [4..4] USB0BCEN                                                           */
    } AHBCLKG_b;
  } ;
  __IOM uint32_t  AHBCLKG_SET;                  /*!< (@ 0x00000014) AHBCLKG_SET                                                */
  __IOM uint32_t  AHBCLKG_CLR;                  /*!< (@ 0x00000018) AHBCLKG_CLR                                                */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t APBCLKG0;                    /*!< (@ 0x00000020) APBCLKG0                                                   */
    
    struct {
      __IOM uint32_t PLL0CEN    : 1;            /*!< [0..0] PLL0CEN                                                            */
      __IOM uint32_t PB0CEN     : 1;            /*!< [1..1] PB0CEN                                                             */
      __IOM uint32_t USART0CEN  : 1;            /*!< [2..2] USART0CEN                                                          */
      __IOM uint32_t USART1CEN  : 1;            /*!< [3..3] USART1CEN                                                          */
      __IOM uint32_t UART0CEN   : 1;            /*!< [4..4] UART0CEN                                                           */
      __IOM uint32_t UART1CEN   : 1;            /*!< [5..5] UART1CEN                                                           */
      __IOM uint32_t SPI0CEN    : 1;            /*!< [6..6] SPI0CEN                                                            */
      __IOM uint32_t SPI1CEN    : 1;            /*!< [7..7] SPI1CEN                                                            */
      __IOM uint32_t SPI2CEN    : 1;            /*!< [8..8] SPI2CEN                                                            */
      __IOM uint32_t I2C0CEN    : 1;            /*!< [9..9] I2C0CEN                                                            */
      __IOM uint32_t I2C1CEN    : 1;            /*!< [10..10] I2C1CEN                                                          */
      __IOM uint32_t EPCA0CEN   : 1;            /*!< [11..11] EPCA0CEN                                                         */
      __IOM uint32_t PCA0CEN    : 1;            /*!< [12..12] PCA0CEN                                                          */
      __IOM uint32_t PCA1CEN    : 1;            /*!< [13..13] PCA1CEN                                                          */
      __IOM uint32_t SSG0CEN    : 1;            /*!< [14..14] SSG0CEN                                                          */
      __IOM uint32_t TIMER0CEN  : 1;            /*!< [15..15] TIMER0CEN                                                        */
      __IOM uint32_t TIMER1CEN  : 1;            /*!< [16..16] TIMER1CEN                                                        */
      __IOM uint32_t ADC0CEN    : 1;            /*!< [17..17] ADC0CEN                                                          */
      __IOM uint32_t ADC1CEN    : 1;            /*!< [18..18] ADC1CEN                                                          */
      __IOM uint32_t CMP0CEN    : 1;            /*!< [19..19] CMP0CEN                                                          */
      __IOM uint32_t CMP1CEN    : 1;            /*!< [20..20] CMP1CEN                                                          */
      __IOM uint32_t CS0CEN     : 1;            /*!< [21..21] CS0CEN                                                           */
      __IOM uint32_t AES0CEN    : 1;            /*!< [22..22] AES0CEN                                                          */
      __IOM uint32_t CRC0CEN    : 1;            /*!< [23..23] CRC0CEN                                                          */
      __IOM uint32_t IDAC0CEN   : 1;            /*!< [24..24] IDAC0CEN                                                         */
      __IOM uint32_t IDAC1CEN   : 1;            /*!< [25..25] IDAC1CEN                                                         */
      __IOM uint32_t LPT0CEN    : 1;            /*!< [26..26] LPT0CEN                                                          */
      __IOM uint32_t I2S0CEN    : 1;            /*!< [27..27] I2S0CEN                                                          */
      __IOM uint32_t USB0CEN    : 1;            /*!< [28..28] USB0CEN                                                          */
      __IOM uint32_t EVREGCEN   : 1;            /*!< [29..29] EVREGCEN                                                         */
      __IOM uint32_t FLCTRLCEN  : 1;            /*!< [30..30] FLCTRLCEN                                                        */
    } APBCLKG0_b;
  } ;
  __IOM uint32_t  APBCLKG0_SET;                 /*!< (@ 0x00000024) APBCLKG0_SET                                               */
  __IOM uint32_t  APBCLKG0_CLR;                 /*!< (@ 0x00000028) APBCLKG0_CLR                                               */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t APBCLKG1;                    /*!< (@ 0x00000030) APBCLKG1                                                   */
    
    struct {
      __IOM uint32_t MISC0CEN   : 1;            /*!< [0..0] MISC0CEN                                                           */
      __IOM uint32_t MISC1CEN   : 1;            /*!< [1..1] MISC1CEN                                                           */
      __IOM uint32_t MISC2CEN   : 1;            /*!< [2..2] MISC2CEN                                                           */
    } APBCLKG1_b;
  } ;
  __IOM uint32_t  APBCLKG1_SET;                 /*!< (@ 0x00000034) APBCLKG1_SET                                               */
  __IOM uint32_t  APBCLKG1_CLR;                 /*!< (@ 0x00000038) APBCLKG1_CLR                                               */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t PM3CN;                       /*!< (@ 0x00000040) PM3CN                                                      */
    
    struct {
      __IOM uint32_t PM3CSEL    : 3;            /*!< [2..0] PM3CSEL                                                            */
      __IM  uint32_t            : 13;
      __IOM uint32_t PM3CEN     : 1;            /*!< [16..16] PM3CEN                                                           */
    } PM3CN_b;
  } ;
} CLKCTRL_Type;                                 /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                          RSTSRC0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (RSTSRC0)
  */

typedef struct {                                /*!< (@ 0x4002D060) RSTSRC0 Structure                                          */
  
  union {
    __IOM uint32_t RESETEN;                     /*!< (@ 0x00000000) RESETEN                                                    */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t VMONREN    : 1;            /*!< [2..2] VMONREN                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t MCDREN     : 1;            /*!< [4..4] MCDREN                                                             */
      __IOM uint32_t WDTREN     : 1;            /*!< [5..5] WDTREN                                                             */
      __IOM uint32_t SWREN      : 1;            /*!< [6..6] SWREN                                                              */
      __IOM uint32_t CMP0REN    : 1;            /*!< [7..7] CMP0REN                                                            */
      __IOM uint32_t CMP1REN    : 1;            /*!< [8..8] CMP1REN                                                            */
      __IOM uint32_t USB0REN    : 1;            /*!< [9..9] USB0REN                                                            */
      __IOM uint32_t RTC0REN    : 1;            /*!< [10..10] RTC0REN                                                          */
      __IOM uint32_t WAKEREN    : 1;            /*!< [11..11] WAKEREN                                                          */
    } RESETEN_b;
  } ;
  __IOM uint32_t  RESETEN_SET;                  /*!< (@ 0x00000004) RESETEN_SET                                                */
  __IOM uint32_t  RESETEN_CLR;                  /*!< (@ 0x00000008) RESETEN_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t RESETFLAG;                   /*!< (@ 0x00000010) RESETFLAG                                                  */
    
    struct {
      __IOM uint32_t PINRF      : 1;            /*!< [0..0] PINRF                                                              */
      __IOM uint32_t PORRF      : 1;            /*!< [1..1] PORRF                                                              */
      __IOM uint32_t VMONRF     : 1;            /*!< [2..2] VMONRF                                                             */
      __IOM uint32_t CORERF     : 1;            /*!< [3..3] CORERF                                                             */
      __IOM uint32_t MCDRF      : 1;            /*!< [4..4] MCDRF                                                              */
      __IOM uint32_t WDTRF      : 1;            /*!< [5..5] WDTRF                                                              */
      __IOM uint32_t SWRF       : 1;            /*!< [6..6] SWRF                                                               */
      __IOM uint32_t CMP0RF     : 1;            /*!< [7..7] CMP0RF                                                             */
      __IOM uint32_t CMP1RF     : 1;            /*!< [8..8] CMP1RF                                                             */
      __IOM uint32_t USB0RF     : 1;            /*!< [9..9] USB0RF                                                             */
      __IOM uint32_t RTC0RF     : 1;            /*!< [10..10] RTC0RF                                                           */
      __IOM uint32_t WAKERF     : 1;            /*!< [11..11] WAKERF                                                           */
    } RESETFLAG_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000020) CONFIG                                                     */
    
    struct {
      __IOM uint32_t PMSEL      : 1;            /*!< [0..0] PMSEL                                                              */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000024) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000028) CONFIG_CLR                                                 */
} RSTSRC_Type;                                  /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                        FLASHCTRL0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (FLASHCTRL0)
  */

typedef struct {                                /*!< (@ 0x4002E000) FLASHCTRL0 Structure                                       */
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000000) CONFIG                                                     */
    
    struct {
      __IOM uint32_t SPMD       : 2;            /*!< [1..0] SPMD                                                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t RDSEN      : 1;            /*!< [4..4] RDSEN                                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t DPFEN      : 1;            /*!< [6..6] DPFEN                                                              */
      __IOM uint32_t PFINH      : 1;            /*!< [7..7] PFINH                                                              */
      __IM  uint32_t            : 8;
      __IOM uint32_t SQWEN      : 1;            /*!< [16..16] SQWEN                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t ERASEEN    : 1;            /*!< [18..18] ERASEEN                                                          */
      __IOM uint32_t BUFSTS     : 1;            /*!< [19..19] BUFSTS                                                           */
      __IOM uint32_t BUSYF      : 1;            /*!< [20..20] BUSYF                                                            */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000004) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000008) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED[37];
  __IOM uint32_t  WRADDR;                       /*!< (@ 0x000000A0) WRADDR                                                     */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  WRDATA;                       /*!< (@ 0x000000B0) WRDATA                                                     */
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t KEY;                         /*!< (@ 0x000000C0) KEY                                                        */
    
    struct {
      __IOM uint32_t KEY        : 8;            /*!< [7..0] KEY                                                                */
    } KEY_b;
  } ;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t TCONTROL;                    /*!< (@ 0x000000D0) TCONTROL                                                   */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t FLRTMD     : 1;            /*!< [6..6] FLRTMD                                                             */
    } TCONTROL_b;
  } ;
} FLASHCTRL_Type;                               /*!< Size = 212 (0xd4)                                                         */



/* =========================================================================================================================== */
/* ================                                           VMON0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (VMON0)
  */

typedef struct {                                /*!< (@ 0x4002F000) VMON0 Structure                                            */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t VREGINSEN  : 1;            /*!< [0..0] VREGINSEN                                                          */
      __IOM uint32_t VREGINLI   : 1;            /*!< [1..1] VREGINLI                                                           */
      __IOM uint32_t VDDRSTF    : 1;            /*!< [2..2] VDDRSTF                                                            */
      __IOM uint32_t VDDLI      : 1;            /*!< [3..3] VDDLI                                                              */
      __IOM uint32_t VDDHITHEN  : 1;            /*!< [4..4] VDDHITHEN                                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t VDDLIEN    : 1;            /*!< [6..6] VDDLIEN                                                            */
      __IOM uint32_t VREGINLIEN : 1;            /*!< [7..7] VREGINLIEN                                                         */
      __IM  uint32_t            : 23;
      __IOM uint32_t VMONEN     : 1;            /*!< [31..31] VMONEN                                                           */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
} VMON_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                         WDTIMER0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (WDTIMER0)
  */

typedef struct {                                /*!< (@ 0x40030000) WDTIMER0 Structure                                         */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t EWIEN      : 1;            /*!< [0..0] EWIEN                                                              */
      __IOM uint32_t DBGMD      : 1;            /*!< [1..1] DBGMD                                                              */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000010) STATUS                                                     */
    
    struct {
      __IOM uint32_t KEYSTS     : 1;            /*!< [0..0] KEYSTS                                                             */
      __IOM uint32_t PRIVSTS    : 1;            /*!< [1..1] PRIVSTS                                                            */
      __IOM uint32_t EWI        : 1;            /*!< [2..2] EWI                                                                */
      __IOM uint32_t RTHF       : 1;            /*!< [3..3] RTHF                                                               */
      __IOM uint32_t UPDSTS     : 1;            /*!< [4..4] UPDSTS                                                             */
    } STATUS_b;
  } ;
  __IOM uint32_t  STATUS_SET;                   /*!< (@ 0x00000014) STATUS_SET                                                 */
  __IOM uint32_t  STATUS_CLR;                   /*!< (@ 0x00000018) STATUS_CLR                                                 */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t THRESHOLD;                   /*!< (@ 0x00000020) THRESHOLD                                                  */
    
    struct {
      __IOM uint32_t EWTH       : 16;           /*!< [15..0] EWTH                                                              */
      __IOM uint32_t RTH        : 16;           /*!< [31..16] RTH                                                              */
    } THRESHOLD_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t WDTKEY;                      /*!< (@ 0x00000030) WDTKEY                                                     */
    
    struct {
      __IOM uint32_t KEY        : 8;            /*!< [7..0] KEY                                                                */
    } WDTKEY_b;
  } ;
} WDTIMER_Type;                                 /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                           IDAC0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (IDAC0)
  */

typedef struct {                                /*!< (@ 0x40031000) IDAC0 Structure                                            */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t OUPDT      : 3;            /*!< [2..0] OUPDT                                                              */
      __IOM uint32_t ETRIG      : 3;            /*!< [5..3] ETRIG                                                              */
      __IOM uint32_t OUTMD      : 2;            /*!< [7..6] OUTMD                                                              */
      __IOM uint32_t INFMT      : 2;            /*!< [9..8] INFMT                                                              */
      __IOM uint32_t DMARUN     : 1;            /*!< [10..10] DMARUN                                                           */
      __IOM uint32_t JSEL       : 1;            /*!< [11..11] JSEL                                                             */
      __IOM uint32_t BUFRESET   : 1;            /*!< [12..12] BUFRESET                                                         */
      __IOM uint32_t TRIGINH    : 1;            /*!< [13..13] TRIGINH                                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t WRAPEN     : 1;            /*!< [16..16] WRAPEN                                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t ORIEN      : 1;            /*!< [20..20] ORIEN                                                            */
      __IOM uint32_t URIEN      : 1;            /*!< [21..21] URIEN                                                            */
      __IOM uint32_t WEIEN      : 1;            /*!< [22..22] WEIEN                                                            */
      __IM  uint32_t            : 6;
      __IOM uint32_t DBGMD      : 1;            /*!< [29..29] DBGMD                                                            */
      __IOM uint32_t LOADEN     : 1;            /*!< [30..30] LOADEN                                                           */
      __IOM uint32_t IDACEN     : 1;            /*!< [31..31] IDACEN                                                           */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  __IOM uint32_t  DATA;                         /*!< (@ 0x00000010) DATA                                                       */
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t BUFSTATUS;                   /*!< (@ 0x00000020) BUFSTATUS                                                  */
    
    struct {
      __IOM uint32_t LEVEL      : 3;            /*!< [2..0] LEVEL                                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t ORI        : 1;            /*!< [4..4] ORI                                                                */
      __IOM uint32_t URI        : 1;            /*!< [5..5] URI                                                                */
      __IOM uint32_t WEI        : 1;            /*!< [6..6] WEI                                                                */
    } BUFSTATUS_b;
  } ;
  __IOM uint32_t  BUFSTATUS_SET;                /*!< (@ 0x00000024) BUFSTATUS_SET                                              */
  __IOM uint32_t  BUFSTATUS_CLR;                /*!< (@ 0x00000028) BUFSTATUS_CLR                                              */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t BUFFER10;                    /*!< (@ 0x00000030) BUFFER10                                                   */
    
    struct {
      __IOM uint32_t BUFFER0    : 16;           /*!< [15..0] BUFFER0                                                           */
      __IOM uint32_t BUFFER1    : 16;           /*!< [31..16] BUFFER1                                                          */
    } BUFFER10_b;
  } ;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t BUFFER32;                    /*!< (@ 0x00000040) BUFFER32                                                   */
    
    struct {
      __IOM uint32_t BUFFER2    : 16;           /*!< [15..0] BUFFER2                                                           */
      __IOM uint32_t BUFFER3    : 16;           /*!< [31..16] BUFFER3                                                          */
    } BUFFER32_b;
  } ;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t GAINADJ;                     /*!< (@ 0x00000050) GAINADJ                                                    */
    
    struct {
      __IOM uint32_t GAINADJ    : 5;            /*!< [4..0] GAINADJ                                                            */
    } GAINADJ_b;
  } ;
} IDAC_Type;                                    /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                         DMACTRL0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (DMACTRL0)
  */

typedef struct {                                /*!< (@ 0x40036000) DMACTRL0 Structure                                         */
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000000) STATUS                                                     */
    
    struct {
      __IOM uint32_t DMAENSTS   : 1;            /*!< [0..0] DMAENSTS                                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t STATE      : 4;            /*!< [7..4] STATE                                                              */
      __IM  uint32_t            : 8;
      __IOM uint32_t NUMCHAN    : 5;            /*!< [20..16] NUMCHAN                                                          */
    } STATUS_b;
  } ;
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000004) CONFIG                                                     */
    
    struct {
      __IOM uint32_t DMAEN      : 1;            /*!< [0..0] DMAEN                                                              */
    } CONFIG_b;
  } ;
  
  union {
    __IOM uint32_t BASEPTR;                     /*!< (@ 0x00000008) BASEPTR                                                    */
    
    struct {
      __IM  uint32_t            : 5;
      __IOM uint32_t BASEPTR    : 27;           /*!< [31..5] BASEPTR                                                           */
    } BASEPTR_b;
  } ;
  __IOM uint32_t  ABASEPTR;                     /*!< (@ 0x0000000C) ABASEPTR                                                   */
  
  union {
    __IOM uint32_t CHSTATUS;                    /*!< (@ 0x00000010) CHSTATUS                                                   */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHSTATUS_b;
  } ;
  
  union {
    __IOM uint32_t CHSWRCN;                     /*!< (@ 0x00000014) CHSWRCN                                                    */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHSWRCN_b;
  } ;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t CHREQMSET;                   /*!< (@ 0x00000020) CHREQMSET                                                  */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHREQMSET_b;
  } ;
  
  union {
    __IOM uint32_t CHREQMCLR;                   /*!< (@ 0x00000024) CHREQMCLR                                                  */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHREQMCLR_b;
  } ;
  
  union {
    __IOM uint32_t CHENSET;                     /*!< (@ 0x00000028) CHENSET                                                    */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHENSET_b;
  } ;
  
  union {
    __IOM uint32_t CHENCLR;                     /*!< (@ 0x0000002C) CHENCLR                                                    */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHENCLR_b;
  } ;
  
  union {
    __IOM uint32_t CHALTSET;                    /*!< (@ 0x00000030) CHALTSET                                                   */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHALTSET_b;
  } ;
  
  union {
    __IOM uint32_t CHALTCLR;                    /*!< (@ 0x00000034) CHALTCLR                                                   */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHALTCLR_b;
  } ;
  
  union {
    __IOM uint32_t CHHPSET;                     /*!< (@ 0x00000038) CHHPSET                                                    */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHHPSET_b;
  } ;
  
  union {
    __IOM uint32_t CHHPCLR;                     /*!< (@ 0x0000003C) CHHPCLR                                                    */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] CH0                                                                */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] CH1                                                                */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] CH2                                                                */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] CH3                                                                */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] CH4                                                                */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] CH5                                                                */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] CH6                                                                */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] CH7                                                                */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] CH8                                                                */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] CH9                                                                */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] CH10                                                             */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] CH11                                                             */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] CH12                                                             */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] CH13                                                             */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] CH14                                                             */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] CH15                                                             */
    } CHHPCLR_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t BERRCLR;                     /*!< (@ 0x0000004C) BERRCLR                                                    */
    
    struct {
      __IOM uint32_t ERROR      : 1;            /*!< [0..0] ERROR                                                              */
    } BERRCLR_b;
  } ;
} DMACTRL_Type;                                 /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                         DMAXBAR0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (DMAXBAR0)
  */

typedef struct {                                /*!< (@ 0x40037000) DMAXBAR0 Structure                                         */
  
  union {
    __IOM uint32_t DMAXBAR0;                    /*!< (@ 0x00000000) DMAXBAR0                                                   */
    
    struct {
      __IOM uint32_t CH0SEL     : 4;            /*!< [3..0] CH0SEL                                                             */
      __IOM uint32_t CH1SEL     : 4;            /*!< [7..4] CH1SEL                                                             */
      __IOM uint32_t CH2SEL     : 4;            /*!< [11..8] CH2SEL                                                            */
      __IOM uint32_t CH3SEL     : 4;            /*!< [15..12] CH3SEL                                                           */
      __IOM uint32_t CH4SEL     : 4;            /*!< [19..16] CH4SEL                                                           */
      __IOM uint32_t CH5SEL     : 4;            /*!< [23..20] CH5SEL                                                           */
      __IOM uint32_t CH6SEL     : 4;            /*!< [27..24] CH6SEL                                                           */
      __IOM uint32_t CH7SEL     : 4;            /*!< [31..28] CH7SEL                                                           */
    } DMAXBAR0_b;
  } ;
  __IOM uint32_t  DMAXBAR0_SET;                 /*!< (@ 0x00000004) DMAXBAR0_SET                                               */
  __IOM uint32_t  DMAXBAR0_CLR;                 /*!< (@ 0x00000008) DMAXBAR0_CLR                                               */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DMAXBAR1;                    /*!< (@ 0x00000010) DMAXBAR1                                                   */
    
    struct {
      __IOM uint32_t CH8SEL     : 4;            /*!< [3..0] CH8SEL                                                             */
      __IOM uint32_t CH9SEL     : 4;            /*!< [7..4] CH9SEL                                                             */
      __IOM uint32_t CH10SEL    : 4;            /*!< [11..8] CH10SEL                                                           */
      __IOM uint32_t CH11SEL    : 4;            /*!< [15..12] CH11SEL                                                          */
      __IOM uint32_t CH12SEL    : 4;            /*!< [19..16] CH12SEL                                                          */
      __IOM uint32_t CH13SEL    : 4;            /*!< [23..20] CH13SEL                                                          */
      __IOM uint32_t CH14SEL    : 4;            /*!< [27..24] CH14SEL                                                          */
      __IOM uint32_t CH15SEL    : 4;            /*!< [31..28] CH15SEL                                                          */
    } DMAXBAR1_b;
  } ;
  __IOM uint32_t  DMAXBAR1_SET;                 /*!< (@ 0x00000014) DMAXBAR1_SET                                               */
  __IOM uint32_t  DMAXBAR1_CLR;                 /*!< (@ 0x00000018) DMAXBAR1_CLR                                               */
} DMAXBAR_Type;                                 /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                         LPTIMER0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (LPTIMER0)
  */

typedef struct {                                /*!< (@ 0x40038000) LPTIMER0 Structure                                         */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t CMD        : 2;            /*!< [1..0] CMD                                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t EXTSEL     : 4;            /*!< [7..4] EXTSEL                                                             */
      __IOM uint32_t TMRSET     : 1;            /*!< [8..8] TMRSET                                                             */
      __IOM uint32_t TMRCAP     : 1;            /*!< [9..9] TMRCAP                                                             */
      __IOM uint32_t CMPSET     : 1;            /*!< [10..10] CMPSET                                                           */
      __IOM uint32_t CMPCAP     : 1;            /*!< [11..11] CMPCAP                                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t OVFIEN     : 1;            /*!< [16..16] OVFIEN                                                           */
      __IOM uint32_t CMPIEN     : 1;            /*!< [17..17] CMPIEN                                                           */
      __IOM uint32_t OVFTMD     : 1;            /*!< [18..18] OVFTMD                                                           */
      __IOM uint32_t CMPTMD     : 1;            /*!< [19..19] CMPTMD                                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t CMPRSTEN   : 1;            /*!< [24..24] CMPRSTEN                                                         */
      __IM  uint32_t            : 5;
      __IOM uint32_t DBGMD      : 1;            /*!< [30..30] DBGMD                                                            */
      __IOM uint32_t RUN        : 1;            /*!< [31..31] RUN                                                              */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t DATA;                        /*!< (@ 0x00000010) DATA                                                       */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] DATA                                                              */
    } DATA_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000020) STATUS                                                     */
    
    struct {
      __IOM uint32_t OVFI       : 1;            /*!< [0..0] OVFI                                                               */
      __IOM uint32_t CMPI       : 1;            /*!< [1..1] CMPI                                                               */
    } STATUS_b;
  } ;
  __IOM uint32_t  STATUS_SET;                   /*!< (@ 0x00000024) STATUS_SET                                                 */
  __IOM uint32_t  STATUS_CLR;                   /*!< (@ 0x00000028) STATUS_CLR                                                 */
} LPTIMER_Type;                                 /*!< Size = 44 (0x2c)                                                          */



/* =========================================================================================================================== */
/* ================                                           LDO0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (LDO0)
  */

typedef struct {                                /*!< (@ 0x40039000) LDO0 Structure                                             */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t LDOIBIAS   : 1;            /*!< [1..1] LDOIBIAS                                                           */
      __IM  uint32_t            : 29;
      __IOM uint32_t LDOAEN     : 1;            /*!< [31..31] LDOAEN                                                           */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
} LDO_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           VREF0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (VREF0)
  */

typedef struct {                                /*!< (@ 0x40039010) VREF0 Structure                                            */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t VREF2X     : 1;            /*!< [0..0] VREF2X                                                             */
      __IOM uint32_t TEMPEN     : 1;            /*!< [1..1] TEMPEN                                                             */
      __IM  uint32_t            : 29;
      __IOM uint32_t VREFEN     : 1;            /*!< [31..31] VREFEN                                                           */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
} VREF_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           I2S0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (I2S0)
  */

typedef struct {                                /*!< (@ 0x4003A000) I2S0 Structure                                             */
  
  union {
    __IOM uint32_t TXCONTROL;                   /*!< (@ 0x00000000) TXCONTROL                                                  */
    
    struct {
      __IOM uint32_t FSGEN      : 1;            /*!< [0..0] FSGEN                                                              */
      __IOM uint32_t FSSEN      : 1;            /*!< [1..1] FSSEN                                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t DDIS       : 1;            /*!< [5..5] DDIS                                                               */
      __IOM uint32_t FSDEL      : 8;            /*!< [13..6] FSDEL                                                             */
      __IOM uint32_t FSSRCSEL   : 1;            /*!< [14..14] FSSRCSEL                                                         */
      __IOM uint32_t FILLSEL    : 2;            /*!< [16..15] FILLSEL                                                          */
      __IOM uint32_t JSEL       : 1;            /*!< [17..17] JSEL                                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t FSINVEN    : 1;            /*!< [20..20] FSINVEN                                                          */
      __IOM uint32_t SCLKINVEN  : 1;            /*!< [21..21] SCLKINVEN                                                        */
      __IOM uint32_t ORDER      : 1;            /*!< [22..22] ORDER                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t MBSEL      : 3;            /*!< [26..24] MBSEL                                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t TXEN       : 1;            /*!< [29..29] TXEN                                                             */
    } TXCONTROL_b;
  } ;
  __IOM uint32_t  TXCONTROL_SET;                /*!< (@ 0x00000004) TXCONTROL_SET                                              */
  __IOM uint32_t  TXCONTROL_CLR;                /*!< (@ 0x00000008) TXCONTROL_CLR                                              */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t TXMODE;                      /*!< (@ 0x00000010) TXMODE                                                     */
    
    struct {
      __IOM uint32_t CYCLE      : 12;           /*!< [11..0] CYCLE                                                             */
      __IOM uint32_t START      : 8;            /*!< [19..12] START                                                            */
      __IOM uint32_t SLOTS      : 5;            /*!< [24..20] SLOTS                                                            */
      __IOM uint32_t DEDIS      : 1;            /*!< [25..25] DEDIS                                                            */
      __IOM uint32_t DIMD       : 1;            /*!< [26..26] DIMD                                                             */
      __IOM uint32_t TDMEN      : 1;            /*!< [27..27] TDMEN                                                            */
    } TXMODE_b;
  } ;
  __IOM uint32_t  TXMODE_SET;                   /*!< (@ 0x00000014) TXMODE_SET                                                 */
  __IOM uint32_t  TXMODE_CLR;                   /*!< (@ 0x00000018) TXMODE_CLR                                                 */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t FSDUTY;                      /*!< (@ 0x00000020) FSDUTY                                                     */
    
    struct {
      __IOM uint32_t FSLOW      : 16;           /*!< [15..0] FSLOW                                                             */
      __IOM uint32_t FSHIGH     : 16;           /*!< [31..16] FSHIGH                                                           */
    } FSDUTY_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t RXCONTROL;                   /*!< (@ 0x00000030) RXCONTROL                                                  */
    
    struct {
      __IOM uint32_t FSDEL      : 8;            /*!< [7..0] FSDEL                                                              */
      __IOM uint32_t JSEL       : 1;            /*!< [8..8] JSEL                                                               */
      __IOM uint32_t DDIS       : 1;            /*!< [9..9] DDIS                                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t FSINVEN    : 1;            /*!< [11..11] FSINVEN                                                          */
      __IOM uint32_t SCLKINVEN  : 1;            /*!< [12..12] SCLKINVEN                                                        */
      __IOM uint32_t ORDER      : 1;            /*!< [13..13] ORDER                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t MBSEL      : 3;            /*!< [17..15] MBSEL                                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t FSSRCSEL   : 1;            /*!< [20..20] FSSRCSEL                                                         */
      __IOM uint32_t RXEN       : 1;            /*!< [21..21] RXEN                                                             */
    } RXCONTROL_b;
  } ;
  __IOM uint32_t  RXCONTROL_SET;                /*!< (@ 0x00000034) RXCONTROL_SET                                              */
  __IOM uint32_t  RXCONTROL_CLR;                /*!< (@ 0x00000038) RXCONTROL_CLR                                              */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t RXMODE;                      /*!< (@ 0x00000040) RXMODE                                                     */
    
    struct {
      __IOM uint32_t CYCLE      : 12;           /*!< [11..0] CYCLE                                                             */
      __IOM uint32_t START      : 8;            /*!< [19..12] START                                                            */
      __IOM uint32_t SLOTS      : 6;            /*!< [25..20] SLOTS                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDMEN      : 1;            /*!< [27..27] TDMEN                                                            */
    } RXMODE_b;
  } ;
  __IOM uint32_t  RXMODE_SET;                   /*!< (@ 0x00000044) RXMODE_SET                                                 */
  __IOM uint32_t  RXMODE_CLR;                   /*!< (@ 0x00000048) RXMODE_CLR                                                 */
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t CLKCONTROL;                  /*!< (@ 0x00000050) CLKCONTROL                                                 */
    
    struct {
      __IOM uint32_t INTDIV     : 10;           /*!< [9..0] INTDIV                                                             */
      __IOM uint32_t FRACDIV    : 8;            /*!< [17..10] FRACDIV                                                          */
      __IOM uint32_t DUTYMD     : 1;            /*!< [18..18] DUTYMD                                                           */
      __IOM uint32_t CLKUPD     : 1;            /*!< [19..19] CLKUPD                                                           */
      __IOM uint32_t DIVEN      : 1;            /*!< [20..20] DIVEN                                                            */
      __IOM uint32_t TXCLKSEL   : 1;            /*!< [21..21] TXCLKSEL                                                         */
      __IOM uint32_t RXCLKSEL   : 1;            /*!< [22..22] RXCLKSEL                                                         */
      __IOM uint32_t RESET      : 1;            /*!< [23..23] RESET                                                            */
      __IOM uint32_t RXCLKEN    : 1;            /*!< [24..24] RXCLKEN                                                          */
      __IOM uint32_t TXCLKEN    : 1;            /*!< [25..25] TXCLKEN                                                          */
      __IOM uint32_t RXSCLKMD   : 1;            /*!< [26..26] RXSCLKMD                                                         */
      __IOM uint32_t TXSCLKMD   : 1;            /*!< [27..27] TXSCLKMD                                                         */
    } CLKCONTROL_b;
  } ;
  __IOM uint32_t  CLKCONTROL_SET;               /*!< (@ 0x00000054) CLKCONTROL_SET                                             */
  __IOM uint32_t  CLKCONTROL_CLR;               /*!< (@ 0x00000058) CLKCONTROL_CLR                                             */
  __IM  uint32_t  RESERVED5;
  __IOM uint32_t  TXFIFO;                       /*!< (@ 0x00000060) TXFIFO                                                     */
  __IM  uint32_t  RESERVED6[3];
  __IOM uint32_t  RXFIFO;                       /*!< (@ 0x00000070) RXFIFO                                                     */
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t FIFOSTATUS;                  /*!< (@ 0x00000080) FIFOSTATUS                                                 */
    
    struct {
      __IOM uint32_t TXFIFONUM  : 4;            /*!< [3..0] TXFIFONUM                                                          */
      __IM  uint32_t            : 12;
      __IOM uint32_t RXFIFONUM  : 4;            /*!< [19..16] RXFIFONUM                                                        */
    } FIFOSTATUS_b;
  } ;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t FIFOCONTROL;                 /*!< (@ 0x00000090) FIFOCONTROL                                                */
    
    struct {
      __IOM uint32_t TXFIFOWM   : 4;            /*!< [3..0] TXFIFOWM                                                           */
      __IM  uint32_t            : 12;
      __IOM uint32_t RXFIFOWM   : 4;            /*!< [19..16] RXFIFOWM                                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TXFIFOFL   : 1;            /*!< [21..21] TXFIFOFL                                                         */
      __IOM uint32_t RXFIFOFL   : 1;            /*!< [22..22] RXFIFOFL                                                         */
    } FIFOCONTROL_b;
  } ;
  __IOM uint32_t  FIFOCONTROL_SET;              /*!< (@ 0x00000094) FIFOCONTROL_SET                                            */
  __IOM uint32_t  FIFOCONTROL_CLR;              /*!< (@ 0x00000098) FIFOCONTROL_CLR                                            */
  __IM  uint32_t  RESERVED9;
  
  union {
    __IOM uint32_t INTCONTROL;                  /*!< (@ 0x000000A0) INTCONTROL                                                 */
    
    struct {
      __IOM uint32_t TXUFIEN    : 1;            /*!< [0..0] TXUFIEN                                                            */
      __IOM uint32_t RXOFIEN    : 1;            /*!< [1..1] RXOFIEN                                                            */
      __IOM uint32_t TXLWMIEN   : 1;            /*!< [2..2] TXLWMIEN                                                           */
      __IOM uint32_t RXHWMIEN   : 1;            /*!< [3..3] RXHWMIEN                                                           */
    } INTCONTROL_b;
  } ;
  __IOM uint32_t  INTCONTROL_SET;               /*!< (@ 0x000000A4) INTCONTROL_SET                                             */
  __IOM uint32_t  INTCONTROL_CLR;               /*!< (@ 0x000000A8) INTCONTROL_CLR                                             */
  __IM  uint32_t  RESERVED10;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x000000B0) STATUS                                                     */
    
    struct {
      __IOM uint32_t TXUFI      : 1;            /*!< [0..0] TXUFI                                                              */
      __IOM uint32_t RXOFI      : 1;            /*!< [1..1] RXOFI                                                              */
      __IOM uint32_t TXLWMI     : 1;            /*!< [2..2] TXLWMI                                                             */
      __IOM uint32_t RXHWMI     : 1;            /*!< [3..3] RXHWMI                                                             */
      __IOM uint32_t CDBUSYF    : 1;            /*!< [4..4] CDBUSYF                                                            */
      __IOM uint32_t CDSTS      : 1;            /*!< [5..5] CDSTS                                                              */
      __IOM uint32_t TXCLKSELRF : 1;            /*!< [6..6] TXCLKSELRF                                                         */
      __IOM uint32_t RXCLKSELRF : 1;            /*!< [7..7] RXCLKSELRF                                                         */
      __IOM uint32_t TXCLKENRF  : 1;            /*!< [8..8] TXCLKENRF                                                          */
      __IOM uint32_t RXCLKENRF  : 1;            /*!< [9..9] RXCLKENRF                                                          */
    } STATUS_b;
  } ;
  __IOM uint32_t  STATUS_SET;                   /*!< (@ 0x000000B4) STATUS_SET                                                 */
  __IOM uint32_t  STATUS_CLR;                   /*!< (@ 0x000000B8) STATUS_CLR                                                 */
  __IM  uint32_t  RESERVED11;
  
  union {
    __IOM uint32_t DMACONTROL;                  /*!< (@ 0x000000C0) DMACONTROL                                                 */
    
    struct {
      __IOM uint32_t TXDMAEN    : 1;            /*!< [0..0] TXDMAEN                                                            */
      __IOM uint32_t RXDMAEN    : 1;            /*!< [1..1] RXDMAEN                                                            */
      __IOM uint32_t TXDMABMD   : 1;            /*!< [2..2] TXDMABMD                                                           */
      __IOM uint32_t RXDMABMD   : 1;            /*!< [3..3] RXDMABMD                                                           */
    } DMACONTROL_b;
  } ;
  __IOM uint32_t  DMACONTROL_SET;               /*!< (@ 0x000000C4) DMACONTROL_SET                                             */
  __IOM uint32_t  DMACONTROL_CLR;               /*!< (@ 0x000000C8) DMACONTROL_CLR                                             */
  __IM  uint32_t  RESERVED12;
  
  union {
    __IOM uint32_t DBGCONTROL;                  /*!< (@ 0x000000D0) DBGCONTROL                                                 */
    
    struct {
      __IOM uint32_t TXDBGHEN   : 1;            /*!< [0..0] TXDBGHEN                                                           */
      __IOM uint32_t RXDBGHEN   : 1;            /*!< [1..1] RXDBGHEN                                                           */
      __IOM uint32_t TXDBGMD    : 1;            /*!< [2..2] TXDBGMD                                                            */
      __IOM uint32_t RXDBGMD    : 1;            /*!< [3..3] RXDBGMD                                                            */
    } DBGCONTROL_b;
  } ;
  __IOM uint32_t  DBGCONTROL_SET;               /*!< (@ 0x000000D4) DBGCONTROL_SET                                             */
  __IOM uint32_t  DBGCONTROL_CLR;               /*!< (@ 0x000000D8) DBGCONTROL_CLR                                             */
} I2S_Type;                                     /*!< Size = 220 (0xdc)                                                         */



/* =========================================================================================================================== */
/* ================                                           PLL0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PLL0)
  */

typedef struct {                                /*!< (@ 0x4003B000) PLL0 Structure                                             */
  
  union {
    __IOM uint32_t DIVIDER;                     /*!< (@ 0x00000000) DIVIDER                                                    */
    
    struct {
      __IOM uint32_t M          : 12;           /*!< [11..0] M                                                                 */
      __IM  uint32_t            : 4;
      __IOM uint32_t N          : 12;           /*!< [27..16] N                                                                */
    } DIVIDER_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000010) CONTROL                                                    */
    
    struct {
      __IOM uint32_t LLMTF      : 1;            /*!< [0..0] LLMTF                                                              */
      __IOM uint32_t HLMTF      : 1;            /*!< [1..1] HLMTF                                                              */
      __IOM uint32_t LCKI       : 1;            /*!< [2..2] LCKI                                                               */
      __IM  uint32_t            : 6;
      __IOM uint32_t LMTIEN     : 1;            /*!< [9..9] LMTIEN                                                             */
      __IOM uint32_t LCKIEN     : 1;            /*!< [10..10] LCKIEN                                                           */
      __IOM uint32_t LCKPOL     : 1;            /*!< [11..11] LCKPOL                                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t REFSEL     : 2;            /*!< [17..16] REFSEL                                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t LOCKTH     : 2;            /*!< [21..20] LOCKTH                                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t STALL      : 1;            /*!< [26..26] STALL                                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t DITHEN     : 1;            /*!< [28..28] DITHEN                                                           */
      __IOM uint32_t EDGSEL     : 1;            /*!< [29..29] EDGSEL                                                           */
      __IOM uint32_t OUTMD      : 2;            /*!< [31..30] OUTMD                                                            */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000014) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000018) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t SSPR;                        /*!< (@ 0x00000020) SSPR                                                       */
    
    struct {
      __IOM uint32_t SSAMP      : 3;            /*!< [2..0] SSAMP                                                              */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSUINV     : 5;            /*!< [12..8] SSUINV                                                            */
    } SSPR_b;
  } ;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t CALCONFIG;                   /*!< (@ 0x00000030) CALCONFIG                                                  */
    
    struct {
      __IOM uint32_t DITHER     : 4;            /*!< [3..0] DITHER                                                             */
      __IOM uint32_t CAL        : 12;           /*!< [15..4] CAL                                                               */
      __IOM uint32_t RANGE      : 3;            /*!< [18..16] RANGE                                                            */
    } CALCONFIG_b;
  } ;
} PLL_Type;                                     /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          EXTOSC0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (EXTOSC0)
  */

typedef struct {                                /*!< (@ 0x4003C000) EXTOSC0 Structure                                          */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t FREQCN     : 3;            /*!< [2..0] FREQCN                                                             */
      __IOM uint32_t OSCVLDF    : 1;            /*!< [3..3] OSCVLDF                                                            */
      __IOM uint32_t OSCMD      : 3;            /*!< [6..4] OSCMD                                                              */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
} EXTOSC_Type;                                  /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           VREG0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (VREG0)
  */

typedef struct {                                /*!< (@ 0x40040000) VREG0 Structure                                            */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t VBUSVLDF   : 1;            /*!< [0..0] VBUSVLDF                                                           */
      __IOM uint32_t SUSEN      : 1;            /*!< [1..1] SUSEN                                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t BGDIS      : 1;            /*!< [5..5] BGDIS                                                              */
      __IOM uint32_t SENSEEN    : 1;            /*!< [6..6] SENSEEN                                                            */
      __IOM uint32_t VBUSIVLDI  : 1;            /*!< [7..7] VBUSIVLDI                                                          */
      __IOM uint32_t VBUSIVLDIEN : 1;           /*!< [8..8] VBUSIVLDIEN                                                        */
      __IM  uint32_t            : 22;
      __IOM uint32_t VREGDIS    : 1;            /*!< [31..31] VREGDIS                                                          */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
} VREG_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                          LPOSC0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (LPOSC0)
  */

typedef struct {                                /*!< (@ 0x40041000) LPOSC0 Structure                                           */
  
  union {
    __IOM uint32_t OSCVAL;                      /*!< (@ 0x00000000) OSCVAL                                                     */
    
    struct {
      __IOM uint32_t OSCVAL     : 4;            /*!< [3..0] OSCVAL                                                             */
    } OSCVAL_b;
  } ;
  __IOM uint32_t  OSCVAL_SET;                   /*!< (@ 0x00000004) OSCVAL_SET                                                 */
  __IOM uint32_t  OSCVAL_CLR;                   /*!< (@ 0x00000008) OSCVAL_CLR                                                 */
} LPOSC_Type;                                   /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                         EXTVREG0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (EXTVREG0)
  */

typedef struct {                                /*!< (@ 0x40042000) EXTVREG0 Structure                                         */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t SAEN       : 1;            /*!< [0..0] SAEN                                                               */
      __IM  uint32_t            : 23;
      __IOM uint32_t WPULLEN    : 1;            /*!< [24..24] WPULLEN                                                          */
      __IOM uint32_t FBLEN      : 1;            /*!< [25..25] FBLEN                                                            */
      __IOM uint32_t PNSEL      : 1;            /*!< [26..26] PNSEL                                                            */
      __IOM uint32_t FBPINSEL   : 1;            /*!< [27..27] FBPINSEL                                                         */
      __IM  uint32_t            : 3;
      __IOM uint32_t EVREGEN    : 1;            /*!< [31..31] EVREGEN                                                          */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000010) CONFIG                                                     */
    
    struct {
      __IOM uint32_t IMINFINE   : 2;            /*!< [1..0] IMINFINE                                                           */
      __IOM uint32_t IMIN       : 3;            /*!< [4..2] IMIN                                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t FBVOSEL    : 3;            /*!< [10..8] FBVOSEL                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t FBRATE     : 3;            /*!< [14..12] FBRATE                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t IMAX       : 3;            /*!< [18..16] IMAX                                                             */
      __IM  uint32_t            : 5;
      __IOM uint32_t VOUTSEL    : 6;            /*!< [29..24] VOUTSEL                                                          */
    } CONFIG_b;
  } ;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000020) STATUS                                                     */
    
    struct {
      __IOM uint32_t FBMAXF     : 1;            /*!< [0..0] FBMAXF                                                             */
    } STATUS_b;
  } ;
  __IM  uint32_t  RESERVED2[7];
  
  union {
    __IOM uint32_t CSCONTROL;                   /*!< (@ 0x00000040) CSCONTROL                                                  */
    
    struct {
      __IM  uint32_t            : 30;
      __IOM uint32_t ISNSEN     : 1;            /*!< [30..30] ISNSEN                                                           */
      __IOM uint32_t ADCISNSEN  : 1;            /*!< [31..31] ADCISNSEN                                                        */
    } CSCONTROL_b;
  } ;
  __IOM uint32_t  CSCONTROL_SET;                /*!< (@ 0x00000044) CSCONTROL_SET                                              */
  __IOM uint32_t  CSCONTROL_CLR;                /*!< (@ 0x00000048) CSCONTROL_CLR                                              */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t CSCONFIG;                    /*!< (@ 0x00000050) CSCONFIG                                                   */
    
    struct {
      __IOM uint32_t ISADCGAIN  : 3;            /*!< [2..0] ISADCGAIN                                                          */
      __IOM uint32_t ISOGAIN    : 3;            /*!< [5..3] ISOGAIN                                                            */
      __IOM uint32_t ISINSEL    : 2;            /*!< [7..6] ISINSEL                                                            */
    } CSCONFIG_b;
  } ;
} EXTVREG_Type;                                 /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           IVC0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (IVC0)
  */

typedef struct {                                /*!< (@ 0x40044000) IVC0 Structure                                             */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t IN0RANGE   : 3;            /*!< [2..0] IN0RANGE                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t IN1RANGE   : 3;            /*!< [6..4] IN1RANGE                                                           */
      __IM  uint32_t            : 23;
      __IOM uint32_t C0EN       : 1;            /*!< [30..30] C0EN                                                             */
      __IOM uint32_t C1EN       : 1;            /*!< [31..31] C1EN                                                             */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
} IVC_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           PMU0                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PMU0)
  */

typedef struct {                                /*!< (@ 0x40048000) PMU0 Structure                                             */
  
  union {
    __IOM uint32_t CONTROL;                     /*!< (@ 0x00000000) CONTROL                                                    */
    
    struct {
      __IOM uint32_t WAKECLR    : 1;            /*!< [0..0] WAKECLR                                                            */
      __IOM uint32_t PERILPEN   : 1;            /*!< [1..1] PERILPEN                                                           */
      __IOM uint32_t PINLPEN    : 1;            /*!< [2..2] PINLPEN                                                            */
      __IOM uint32_t PWAKEEN    : 1;            /*!< [3..3] PWAKEEN                                                            */
      __IOM uint32_t PMUASLPEN  : 1;            /*!< [4..4] PMUASLPEN                                                          */
    } CONTROL_b;
  } ;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000004) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000008) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t CONFIG;                      /*!< (@ 0x00000010) CONFIG                                                     */
    
    struct {
      __IM  uint32_t            : 8;
      __IOM uint32_t RTC0FREN   : 1;            /*!< [8..8] RTC0FREN                                                           */
      __IOM uint32_t RTC0AREN   : 1;            /*!< [9..9] RTC0AREN                                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t CMP0REN    : 1;            /*!< [13..13] CMP0REN                                                          */
      __IOM uint32_t PWAKEREN   : 1;            /*!< [14..14] PWAKEREN                                                         */
      __IOM uint32_t LPT0REN    : 1;            /*!< [15..15] LPT0REN                                                          */
    } CONFIG_b;
  } ;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000014) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000018) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t STATUS;                      /*!< (@ 0x00000020) STATUS                                                     */
    
    struct {
      __IOM uint32_t PM9EF      : 1;            /*!< [0..0] PM9EF                                                              */
      __IOM uint32_t PWAKEF     : 1;            /*!< [1..1] PWAKEF                                                             */
      __IOM uint32_t PORF       : 1;            /*!< [2..2] PORF                                                               */
    } STATUS_b;
  } ;
  __IOM uint32_t  STATUS_SET;                   /*!< (@ 0x00000024) STATUS_SET                                                 */
  __IOM uint32_t  STATUS_CLR;                   /*!< (@ 0x00000028) STATUS_CLR                                                 */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t WAKEEN;                      /*!< (@ 0x00000030) WAKEEN                                                     */
    
    struct {
      __IOM uint32_t RTC0FWEN   : 1;            /*!< [0..0] RTC0FWEN                                                           */
      __IOM uint32_t RTC0AWEN   : 1;            /*!< [1..1] RTC0AWEN                                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t CMP0WEN    : 1;            /*!< [5..5] CMP0WEN                                                            */
      __IOM uint32_t PWAKEWEN   : 1;            /*!< [6..6] PWAKEWEN                                                           */
      __IOM uint32_t LPT0WEN    : 1;            /*!< [7..7] LPT0WEN                                                            */
      __IOM uint32_t RSTWEN     : 1;            /*!< [8..8] RSTWEN                                                             */
    } WAKEEN_b;
  } ;
  __IOM uint32_t  WAKEEN_SET;                   /*!< (@ 0x00000034) WAKEEN_SET                                                 */
  __IOM uint32_t  WAKEEN_CLR;                   /*!< (@ 0x00000038) WAKEEN_CLR                                                 */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t WAKESTATUS;                  /*!< (@ 0x00000040) WAKESTATUS                                                 */
    
    struct {
      __IOM uint32_t RTC0FWF    : 1;            /*!< [0..0] RTC0FWF                                                            */
      __IOM uint32_t RTC0AWF    : 1;            /*!< [1..1] RTC0AWF                                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t CMP0WF     : 1;            /*!< [5..5] CMP0WF                                                             */
      __IOM uint32_t PWAKEWF    : 1;            /*!< [6..6] PWAKEWF                                                            */
      __IOM uint32_t LPT0WF     : 1;            /*!< [7..7] LPT0WF                                                             */
      __IOM uint32_t RSTWF      : 1;            /*!< [8..8] RSTWF                                                              */
    } WAKESTATUS_b;
  } ;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t PWEN;                        /*!< (@ 0x00000050) PWEN                                                       */
    
    struct {
      __IOM uint32_t PW0EN      : 1;            /*!< [0..0] PW0EN                                                              */
      __IOM uint32_t PW1EN      : 1;            /*!< [1..1] PW1EN                                                              */
      __IOM uint32_t PW2EN      : 1;            /*!< [2..2] PW2EN                                                              */
      __IOM uint32_t PW3EN      : 1;            /*!< [3..3] PW3EN                                                              */
      __IOM uint32_t PW4EN      : 1;            /*!< [4..4] PW4EN                                                              */
      __IOM uint32_t PW5EN      : 1;            /*!< [5..5] PW5EN                                                              */
      __IOM uint32_t PW6EN      : 1;            /*!< [6..6] PW6EN                                                              */
      __IOM uint32_t PW7EN      : 1;            /*!< [7..7] PW7EN                                                              */
      __IOM uint32_t PW8EN      : 1;            /*!< [8..8] PW8EN                                                              */
      __IOM uint32_t PW9EN      : 1;            /*!< [9..9] PW9EN                                                              */
      __IOM uint32_t PW10EN     : 1;            /*!< [10..10] PW10EN                                                           */
      __IOM uint32_t PW11EN     : 1;            /*!< [11..11] PW11EN                                                           */
      __IOM uint32_t PW12EN     : 1;            /*!< [12..12] PW12EN                                                           */
      __IOM uint32_t PW13EN     : 1;            /*!< [13..13] PW13EN                                                           */
      __IOM uint32_t PW14EN     : 1;            /*!< [14..14] PW14EN                                                           */
      __IOM uint32_t PW15EN     : 1;            /*!< [15..15] PW15EN                                                           */
    } PWEN_b;
  } ;
  __IOM uint32_t  PWEN_SET;                     /*!< (@ 0x00000054) PWEN_SET                                                   */
  __IOM uint32_t  PWEN_CLR;                     /*!< (@ 0x00000058) PWEN_CLR                                                   */
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t PWPOL;                       /*!< (@ 0x00000060) PWPOL                                                      */
    
    struct {
      __IOM uint32_t PW0POL     : 1;            /*!< [0..0] PW0POL                                                             */
      __IOM uint32_t PW1POL     : 1;            /*!< [1..1] PW1POL                                                             */
      __IOM uint32_t PW2POL     : 1;            /*!< [2..2] PW2POL                                                             */
      __IOM uint32_t PW3POL     : 1;            /*!< [3..3] PW3POL                                                             */
      __IOM uint32_t PW4POL     : 1;            /*!< [4..4] PW4POL                                                             */
      __IOM uint32_t PW5POL     : 1;            /*!< [5..5] PW5POL                                                             */
      __IOM uint32_t PW6POL     : 1;            /*!< [6..6] PW6POL                                                             */
      __IOM uint32_t PW7POL     : 1;            /*!< [7..7] PW7POL                                                             */
      __IOM uint32_t PW8POL     : 1;            /*!< [8..8] PW8POL                                                             */
      __IOM uint32_t PW9POL     : 1;            /*!< [9..9] PW9POL                                                             */
      __IOM uint32_t PW10POL    : 1;            /*!< [10..10] PW10POL                                                          */
      __IOM uint32_t PW11POL    : 1;            /*!< [11..11] PW11POL                                                          */
      __IOM uint32_t PW12POL    : 1;            /*!< [12..12] PW12POL                                                          */
      __IOM uint32_t PW13POL    : 1;            /*!< [13..13] PW13POL                                                          */
      __IOM uint32_t PW14POL    : 1;            /*!< [14..14] PW14POL                                                          */
      __IOM uint32_t PW15POL    : 1;            /*!< [15..15] PW15POL                                                          */
    } PWPOL_b;
  } ;
  __IOM uint32_t  PWPOL_SET;                    /*!< (@ 0x00000064) PWPOL_SET                                                  */
  __IOM uint32_t  PWPOL_CLR;                    /*!< (@ 0x00000068) PWPOL_CLR                                                  */
} PMU_Type;                                     /*!< Size = 108 (0x6c)                                                         */



/* =========================================================================================================================== */
/* ================                                           LOCK0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (LOCK0)
  */

typedef struct {                                /*!< (@ 0x40049000) LOCK0 Structure                                            */
  
  union {
    __IOM uint32_t KEY;                         /*!< (@ 0x00000000) KEY                                                        */
    
    struct {
      __IOM uint32_t KEY        : 8;            /*!< [7..0] KEY                                                                */
    } KEY_b;
  } ;
  __IM  uint32_t  RESERVED[7];
  
  union {
    __IOM uint32_t PERIPHLOCK0;                 /*!< (@ 0x00000020) PERIPHLOCK0                                                */
    
    struct {
      __IOM uint32_t USARTL     : 1;            /*!< [0..0] USARTL                                                             */
      __IOM uint32_t SPIL       : 1;            /*!< [1..1] SPIL                                                               */
      __IOM uint32_t I2CL       : 1;            /*!< [2..2] I2CL                                                               */
      __IOM uint32_t PCAL       : 1;            /*!< [3..3] PCAL                                                               */
      __IOM uint32_t TIMERL     : 1;            /*!< [4..4] TIMERL                                                             */
      __IOM uint32_t USBL       : 1;            /*!< [5..5] USBL                                                               */
      __IOM uint32_t SARADCL    : 1;            /*!< [6..6] SARADCL                                                            */
      __IOM uint32_t SSGL       : 1;            /*!< [7..7] SSGL                                                               */
      __IOM uint32_t CMPL       : 1;            /*!< [8..8] CMPL                                                               */
      __IOM uint32_t CSL        : 1;            /*!< [9..9] CSL                                                                */
      __IOM uint32_t EMIFL      : 1;            /*!< [10..10] EMIFL                                                            */
      __IOM uint32_t AESL       : 1;            /*!< [11..11] AESL                                                             */
      __IOM uint32_t CRCL       : 1;            /*!< [12..12] CRCL                                                             */
      __IOM uint32_t RTCL       : 1;            /*!< [13..13] RTCL                                                             */
      __IOM uint32_t CLKRSTL    : 1;            /*!< [14..14] CLKRSTL                                                          */
      __IOM uint32_t VMONL      : 1;            /*!< [15..15] VMONL                                                            */
      __IOM uint32_t IDACL      : 1;            /*!< [16..16] IDACL                                                            */
      __IOM uint32_t DMACTRLL   : 1;            /*!< [17..17] DMACTRLL                                                         */
      __IOM uint32_t DMAXBARL   : 1;            /*!< [18..18] DMAXBARL                                                         */
      __IOM uint32_t LPTL       : 1;            /*!< [19..19] LPTL                                                             */
      __IOM uint32_t VREFL      : 1;            /*!< [20..20] VREFL                                                            */
      __IOM uint32_t I2SL       : 1;            /*!< [21..21] I2SL                                                             */
      __IOM uint32_t PLLL       : 1;            /*!< [22..22] PLLL                                                             */
      __IOM uint32_t EXTOSCL    : 1;            /*!< [23..23] EXTOSCL                                                          */
      __IOM uint32_t VREGL      : 1;            /*!< [24..24] VREGL                                                            */
      __IOM uint32_t LPOSCL     : 1;            /*!< [25..25] LPOSCL                                                           */
      __IOM uint32_t EVREGL     : 1;            /*!< [26..26] EVREGL                                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t IVCL       : 1;            /*!< [28..28] IVCL                                                             */
    } PERIPHLOCK0_b;
  } ;
  __IOM uint32_t  PERIPHLOCK0_SET;              /*!< (@ 0x00000024) PERIPHLOCK0_SET                                            */
  __IOM uint32_t  PERIPHLOCK0_CLR;              /*!< (@ 0x00000028) PERIPHLOCK0_CLR                                            */
  __IM  uint32_t  RESERVED1[5];
  
  union {
    __IOM uint32_t PERIPHLOCK1;                 /*!< (@ 0x00000040) PERIPHLOCK1                                                */
    
    struct {
      __IOM uint32_t PMUL       : 1;            /*!< [0..0] PMUL                                                               */
    } PERIPHLOCK1_b;
  } ;
  __IOM uint32_t  PERIPHLOCK1_SET;              /*!< (@ 0x00000044) PERIPHLOCK1_SET                                            */
  __IOM uint32_t  PERIPHLOCK1_CLR;              /*!< (@ 0x00000048) PERIPHLOCK1_CLR                                            */
} LOCK_Type;                                    /*!< Size = 76 (0x4c)                                                          */



/* =========================================================================================================================== */
/* ================                                         SCONFIG0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (SCONFIG0)
  */

typedef struct {                                /*!< (@ 0x400490B0) SCONFIG0 Structure                                         */
  __IOM uint32_t  CONFIG;                       /*!< (@ 0x00000000) CONFIG                                                     */
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000004) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000008) CONFIG_CLR                                                 */
} SCONFIG_Type;                                 /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                         DEVICEID0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (DEVICEID0)
  */

typedef struct {                                /*!< (@ 0x400490C0) DEVICEID0 Structure                                        */
  
  union {
    __IOM uint32_t DEVICEID0;                   /*!< (@ 0x00000000) DEVICEID0                                                  */
    
    struct {
      __IOM uint32_t REVID      : 4;            /*!< [3..0] REVID                                                              */
      __IM  uint32_t            : 4;
      __IOM uint32_t PACKID     : 24;           /*!< [31..8] PACKID                                                            */
    } DEVICEID0_b;
  } ;
  __IM  uint32_t  RESERVED[3];
  __IOM uint32_t  DEVICEID1;                    /*!< (@ 0x00000010) DEVICEID1                                                  */
  __IM  uint32_t  RESERVED1[3];
  __IOM uint32_t  DEVICEID2;                    /*!< (@ 0x00000020) DEVICEID2                                                  */
  __IM  uint32_t  RESERVED2[3];
  __IOM uint32_t  DEVICEID3;                    /*!< (@ 0x00000030) DEVICEID3                                                  */
} DEVICEID_Type;                                /*!< Size = 52 (0x34)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define USART0_BASE                 0x40000000UL
#define USART1_BASE                 0x40001000UL
#define UART0_BASE                  0x40002000UL
#define UART1_BASE                  0x40003000UL
#define SPI0_BASE                   0x40004000UL
#define SPI1_BASE                   0x40005000UL
#define SPI2_BASE                   0x40006000UL
#define I2C0_BASE                   0x40009000UL
#define I2C1_BASE                   0x4000A000UL
#define EPCA0_BASE                  0x4000E000UL
#define PCA0_BASE                   0x4000F000UL
#define PCA1_BASE                   0x40010000UL
#define TIMER0_BASE                 0x40014000UL
#define TIMER1_BASE                 0x40015000UL
#define USB0_BASE                   0x40018000UL
#define SARADC0_BASE                0x4001A000UL
#define SARADC1_BASE                0x4001B000UL
#define SSG0_BASE                   0x4001E000UL
#define CMP0_BASE                   0x4001F000UL
#define CMP1_BASE                   0x40020000UL
#define CAPSENSE0_BASE              0x40023000UL
#define EMIF0_BASE                  0x40026000UL
#define AES0_BASE                   0x40027000UL
#define CRC0_BASE                   0x40028000UL
#define RTC0_BASE                   0x40029000UL
#define PBCFG0_BASE                 0x4002A000UL
#define PBSTD2_BASE                 0x4002A1E0UL
#define PBSTD0_BASE                 0x4002A0A0UL
#define PBSTD1_BASE                 0x4002A140UL
#define PBSTD3_BASE                 0x4002A320UL
#define PBHD4_BASE                  0x4002A3C0UL
#define CLKCTRL0_BASE               0x4002D000UL
#define RSTSRC0_BASE                0x4002D060UL
#define FLASHCTRL0_BASE             0x4002E000UL
#define VMON0_BASE                  0x4002F000UL
#define WDTIMER0_BASE               0x40030000UL
#define IDAC0_BASE                  0x40031000UL
#define IDAC1_BASE                  0x40032000UL
#define DMACTRL0_BASE               0x40036000UL
#define DMAXBAR0_BASE               0x40037000UL
#define LPTIMER0_BASE               0x40038000UL
#define LDO0_BASE                   0x40039000UL
#define VREF0_BASE                  0x40039010UL
#define I2S0_BASE                   0x4003A000UL
#define PLL0_BASE                   0x4003B000UL
#define EXTOSC0_BASE                0x4003C000UL
#define VREG0_BASE                  0x40040000UL
#define LPOSC0_BASE                 0x40041000UL
#define EXTVREG0_BASE               0x40042000UL
#define IVC0_BASE                   0x40044000UL
#define PMU0_BASE                   0x40048000UL
#define LOCK0_BASE                  0x40049000UL
#define SCONFIG0_BASE               0x400490B0UL
#define DEVICEID0_BASE              0x400490C0UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define USART0                      ((USART_Type*)             USART0_BASE)
#define USART1                      ((USART_Type*)             USART1_BASE)
#define UART0                       ((UART_Type*)              UART0_BASE)
#define UART1                       ((UART_Type*)              UART1_BASE)
#define SPI0                        ((SPI_Type*)               SPI0_BASE)
#define SPI1                        ((SPI_Type*)               SPI1_BASE)
#define SPI2                        ((SPI_Type*)               SPI2_BASE)
#define I2C0                        ((I2C_Type*)               I2C0_BASE)
#define I2C1                        ((I2C_Type*)               I2C1_BASE)
#define EPCA0                       ((EPCA_Type*)              EPCA0_BASE)
#define PCA0                        ((PCA_Type*)               PCA0_BASE)
#define PCA1                        ((PCA_Type*)               PCA1_BASE)
#define TIMER0                      ((TIMER_Type*)             TIMER0_BASE)
#define TIMER1                      ((TIMER_Type*)             TIMER1_BASE)
#define USB0                        ((USB_Type*)               USB0_BASE)
#define SARADC0                     ((SARADC_Type*)            SARADC0_BASE)
#define SARADC1                     ((SARADC_Type*)            SARADC1_BASE)
#define SSG0                        ((SSG_Type*)               SSG0_BASE)
#define CMP0                        ((CMP_Type*)               CMP0_BASE)
#define CMP1                        ((CMP_Type*)               CMP1_BASE)
#define CAPSENSE0                   ((CAPSENSE_Type*)          CAPSENSE0_BASE)
#define EMIF0                       ((EMIF_Type*)              EMIF0_BASE)
#define AES0                        ((AES_Type*)               AES0_BASE)
#define CRC0                        ((CRC_Type*)               CRC0_BASE)
#define RTC0                        ((RTC_Type*)               RTC0_BASE)
#define PBCFG0                      ((PBCFG_Type*)             PBCFG0_BASE)
#define PBSTD2                      ((PBSTD_Type*)             PBSTD2_BASE)
#define PBSTD0                      ((PBSTD_Type*)             PBSTD0_BASE)
#define PBSTD1                      ((PBSTD_Type*)             PBSTD1_BASE)
#define PBSTD3                      ((PBSTD_Type*)             PBSTD3_BASE)
#define PBHD4                       ((PBHD_Type*)              PBHD4_BASE)
#define CLKCTRL0                    ((CLKCTRL_Type*)           CLKCTRL0_BASE)
#define RSTSRC0                     ((RSTSRC_Type*)            RSTSRC0_BASE)
#define FLASHCTRL0                  ((FLASHCTRL_Type*)         FLASHCTRL0_BASE)
#define VMON0                       ((VMON_Type*)              VMON0_BASE)
#define WDTIMER0                    ((WDTIMER_Type*)           WDTIMER0_BASE)
#define IDAC0                       ((IDAC_Type*)              IDAC0_BASE)
#define IDAC1                       ((IDAC_Type*)              IDAC1_BASE)
#define DMACTRL0                    ((DMACTRL_Type*)           DMACTRL0_BASE)
#define DMAXBAR0                    ((DMAXBAR_Type*)           DMAXBAR0_BASE)
#define LPTIMER0                    ((LPTIMER_Type*)           LPTIMER0_BASE)
#define LDO0                        ((LDO_Type*)               LDO0_BASE)
#define VREF0                       ((VREF_Type*)              VREF0_BASE)
#define I2S0                        ((I2S_Type*)               I2S0_BASE)
#define PLL0                        ((PLL_Type*)               PLL0_BASE)
#define EXTOSC0                     ((EXTOSC_Type*)            EXTOSC0_BASE)
#define VREG0                       ((VREG_Type*)              VREG0_BASE)
#define LPOSC0                      ((LPOSC_Type*)             LPOSC0_BASE)
#define EXTVREG0                    ((EXTVREG_Type*)           EXTVREG0_BASE)
#define IVC0                        ((IVC_Type*)               IVC0_BASE)
#define PMU0                        ((PMU_Type*)               PMU0_BASE)
#define LOCK0                       ((LOCK_Type*)              LOCK0_BASE)
#define SCONFIG0                    ((SCONFIG_Type*)           SCONFIG0_BASE)
#define DEVICEID0                   ((DEVICEID_Type*)          DEVICEID0_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                 Pos/Mask Cluster Section                                  ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           DATA                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  U32  ========================================================== */
/* ==========================================================  U16  ========================================================== */
/* ==========================================================  U8  =========================================================== */


/* =========================================================================================================================== */
/* ================                                           DATA                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  U32  ========================================================== */
/* ==========================================================  U16  ========================================================== */
/* ==========================================================  U8  =========================================================== */

/** @} */ /* End of group PosMask_clusters */


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           USART                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define USART_CONFIG_TSYNCEN_Pos          (31UL)                    /*!< USART CONFIG: TSYNCEN (Bit 31)                        */
#define USART_CONFIG_TSYNCEN_Msk          (0x80000000UL)            /*!< USART CONFIG: TSYNCEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_TINVEN_Pos           (30UL)                    /*!< USART CONFIG: TINVEN (Bit 30)                         */
#define USART_CONFIG_TINVEN_Msk           (0x40000000UL)            /*!< USART CONFIG: TINVEN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_TIRDAEN_Pos          (29UL)                    /*!< USART CONFIG: TIRDAEN (Bit 29)                        */
#define USART_CONFIG_TIRDAEN_Msk          (0x20000000UL)            /*!< USART CONFIG: TIRDAEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_TSCEN_Pos            (28UL)                    /*!< USART CONFIG: TSCEN (Bit 28)                          */
#define USART_CONFIG_TSCEN_Msk            (0x10000000UL)            /*!< USART CONFIG: TSCEN (Bitfield-Mask: 0x01)             */
#define USART_CONFIG_TDATLN_Pos           (24UL)                    /*!< USART CONFIG: TDATLN (Bit 24)                         */
#define USART_CONFIG_TDATLN_Msk           (0x7000000UL)             /*!< USART CONFIG: TDATLN (Bitfield-Mask: 0x07)            */
#define USART_CONFIG_TPARMD_Pos           (21UL)                    /*!< USART CONFIG: TPARMD (Bit 21)                         */
#define USART_CONFIG_TPARMD_Msk           (0x600000UL)              /*!< USART CONFIG: TPARMD (Bitfield-Mask: 0x03)            */
#define USART_CONFIG_TSTPMD_Pos           (19UL)                    /*!< USART CONFIG: TSTPMD (Bit 19)                         */
#define USART_CONFIG_TSTPMD_Msk           (0x180000UL)              /*!< USART CONFIG: TSTPMD (Bitfield-Mask: 0x03)            */
#define USART_CONFIG_TSTPEN_Pos           (18UL)                    /*!< USART CONFIG: TSTPEN (Bit 18)                         */
#define USART_CONFIG_TSTPEN_Msk           (0x40000UL)               /*!< USART CONFIG: TSTPEN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_TPAREN_Pos           (17UL)                    /*!< USART CONFIG: TPAREN (Bit 17)                         */
#define USART_CONFIG_TPAREN_Msk           (0x20000UL)               /*!< USART CONFIG: TPAREN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_TSTRTEN_Pos          (16UL)                    /*!< USART CONFIG: TSTRTEN (Bit 16)                        */
#define USART_CONFIG_TSTRTEN_Msk          (0x10000UL)               /*!< USART CONFIG: TSTRTEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_RSYNCEN_Pos          (15UL)                    /*!< USART CONFIG: RSYNCEN (Bit 15)                        */
#define USART_CONFIG_RSYNCEN_Msk          (0x8000UL)                /*!< USART CONFIG: RSYNCEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_RINVEN_Pos           (14UL)                    /*!< USART CONFIG: RINVEN (Bit 14)                         */
#define USART_CONFIG_RINVEN_Msk           (0x4000UL)                /*!< USART CONFIG: RINVEN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_RIRDAEN_Pos          (13UL)                    /*!< USART CONFIG: RIRDAEN (Bit 13)                        */
#define USART_CONFIG_RIRDAEN_Msk          (0x2000UL)                /*!< USART CONFIG: RIRDAEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_RSCEN_Pos            (12UL)                    /*!< USART CONFIG: RSCEN (Bit 12)                          */
#define USART_CONFIG_RSCEN_Msk            (0x1000UL)                /*!< USART CONFIG: RSCEN (Bitfield-Mask: 0x01)             */
#define USART_CONFIG_RDATLN_Pos           (8UL)                     /*!< USART CONFIG: RDATLN (Bit 8)                          */
#define USART_CONFIG_RDATLN_Msk           (0x700UL)                 /*!< USART CONFIG: RDATLN (Bitfield-Mask: 0x07)            */
#define USART_CONFIG_RPARMD_Pos           (5UL)                     /*!< USART CONFIG: RPARMD (Bit 5)                          */
#define USART_CONFIG_RPARMD_Msk           (0x60UL)                  /*!< USART CONFIG: RPARMD (Bitfield-Mask: 0x03)            */
#define USART_CONFIG_RSTPMD_Pos           (3UL)                     /*!< USART CONFIG: RSTPMD (Bit 3)                          */
#define USART_CONFIG_RSTPMD_Msk           (0x18UL)                  /*!< USART CONFIG: RSTPMD (Bitfield-Mask: 0x03)            */
#define USART_CONFIG_RSTPEN_Pos           (2UL)                     /*!< USART CONFIG: RSTPEN (Bit 2)                          */
#define USART_CONFIG_RSTPEN_Msk           (0x4UL)                   /*!< USART CONFIG: RSTPEN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_RPAREN_Pos           (1UL)                     /*!< USART CONFIG: RPAREN (Bit 1)                          */
#define USART_CONFIG_RPAREN_Msk           (0x2UL)                   /*!< USART CONFIG: RPAREN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_RSTRTEN_Pos          (0UL)                     /*!< USART CONFIG: RSTRTEN (Bit 0)                         */
#define USART_CONFIG_RSTRTEN_Msk          (0x1UL)                   /*!< USART CONFIG: RSTRTEN (Bitfield-Mask: 0x01)           */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* =========================================================  MODE  ========================================================== */
#define USART_MODE_OPMD_Pos               (31UL)                    /*!< USART MODE: OPMD (Bit 31)                             */
#define USART_MODE_OPMD_Msk               (0x80000000UL)            /*!< USART MODE: OPMD (Bitfield-Mask: 0x01)                */
#define USART_MODE_ITSEN_Pos              (30UL)                    /*!< USART MODE: ITSEN (Bit 30)                            */
#define USART_MODE_ITSEN_Msk              (0x40000000UL)            /*!< USART MODE: ITSEN (Bitfield-Mask: 0x01)               */
#define USART_MODE_CLKESEL_Pos            (29UL)                    /*!< USART MODE: CLKESEL (Bit 29)                          */
#define USART_MODE_CLKESEL_Msk            (0x20000000UL)            /*!< USART MODE: CLKESEL (Bitfield-Mask: 0x01)             */
#define USART_MODE_CLKIDLE_Pos            (28UL)                    /*!< USART MODE: CLKIDLE (Bit 28)                          */
#define USART_MODE_CLKIDLE_Msk            (0x10000000UL)            /*!< USART MODE: CLKIDLE (Bitfield-Mask: 0x01)             */
#define USART_MODE_DUPLEXMD_Pos           (27UL)                    /*!< USART MODE: DUPLEXMD (Bit 27)                         */
#define USART_MODE_DUPLEXMD_Msk           (0x8000000UL)             /*!< USART MODE: DUPLEXMD (Bitfield-Mask: 0x01)            */
#define USART_MODE_ISTCLK_Pos             (23UL)                    /*!< USART MODE: ISTCLK (Bit 23)                           */
#define USART_MODE_ISTCLK_Msk             (0x800000UL)              /*!< USART MODE: ISTCLK (Bitfield-Mask: 0x01)              */
#define USART_MODE_STRTSTCLK_Pos          (22UL)                    /*!< USART MODE: STRTSTCLK (Bit 22)                        */
#define USART_MODE_STRTSTCLK_Msk          (0x400000UL)              /*!< USART MODE: STRTSTCLK (Bitfield-Mask: 0x01)           */
#define USART_MODE_STPSTCLK_Pos           (21UL)                    /*!< USART MODE: STPSTCLK (Bit 21)                         */
#define USART_MODE_STPSTCLK_Msk           (0x200000UL)              /*!< USART MODE: STPSTCLK (Bitfield-Mask: 0x01)            */
#define USART_MODE_LBMD_Pos               (18UL)                    /*!< USART MODE: LBMD (Bit 18)                             */
#define USART_MODE_LBMD_Msk               (0xc0000UL)               /*!< USART MODE: LBMD (Bitfield-Mask: 0x03)                */
#define USART_MODE_DBGMD_Pos              (16UL)                    /*!< USART MODE: DBGMD (Bit 16)                            */
#define USART_MODE_DBGMD_Msk              (0x10000UL)               /*!< USART MODE: DBGMD (Bitfield-Mask: 0x01)               */
/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */
/* ========================================================  FLOWCN  ========================================================= */
#define USART_FLOWCN_TIRDAPW_Pos          (28UL)                    /*!< USART FLOWCN: TIRDAPW (Bit 28)                        */
#define USART_FLOWCN_TIRDAPW_Msk          (0x30000000UL)            /*!< USART FLOWCN: TIRDAPW (Bitfield-Mask: 0x03)           */
#define USART_FLOWCN_CTSEN_Pos            (23UL)                    /*!< USART FLOWCN: CTSEN (Bit 23)                          */
#define USART_FLOWCN_CTSEN_Msk            (0x800000UL)              /*!< USART FLOWCN: CTSEN (Bitfield-Mask: 0x01)             */
#define USART_FLOWCN_CTSINVEN_Pos         (21UL)                    /*!< USART FLOWCN: CTSINVEN (Bit 21)                       */
#define USART_FLOWCN_CTSINVEN_Msk         (0x200000UL)              /*!< USART FLOWCN: CTSINVEN (Bitfield-Mask: 0x01)          */
#define USART_FLOWCN_UCLK_Pos             (18UL)                    /*!< USART FLOWCN: UCLK (Bit 18)                           */
#define USART_FLOWCN_UCLK_Msk             (0x40000UL)               /*!< USART FLOWCN: UCLK (Bitfield-Mask: 0x01)              */
#define USART_FLOWCN_TX_Pos               (17UL)                    /*!< USART FLOWCN: TX (Bit 17)                             */
#define USART_FLOWCN_TX_Msk               (0x20000UL)               /*!< USART FLOWCN: TX (Bitfield-Mask: 0x01)                */
#define USART_FLOWCN_CTS_Pos              (16UL)                    /*!< USART FLOWCN: CTS (Bit 16)                            */
#define USART_FLOWCN_CTS_Msk              (0x10000UL)               /*!< USART FLOWCN: CTS (Bitfield-Mask: 0x01)               */
#define USART_FLOWCN_RTSEN_Pos            (7UL)                     /*!< USART FLOWCN: RTSEN (Bit 7)                           */
#define USART_FLOWCN_RTSEN_Msk            (0x80UL)                  /*!< USART FLOWCN: RTSEN (Bitfield-Mask: 0x01)             */
#define USART_FLOWCN_RTSTH_Pos            (6UL)                     /*!< USART FLOWCN: RTSTH (Bit 6)                           */
#define USART_FLOWCN_RTSTH_Msk            (0x40UL)                  /*!< USART FLOWCN: RTSTH (Bitfield-Mask: 0x01)             */
#define USART_FLOWCN_RTSINVEN_Pos         (5UL)                     /*!< USART FLOWCN: RTSINVEN (Bit 5)                        */
#define USART_FLOWCN_RTSINVEN_Msk         (0x20UL)                  /*!< USART FLOWCN: RTSINVEN (Bitfield-Mask: 0x01)          */
#define USART_FLOWCN_RX_Pos               (1UL)                     /*!< USART FLOWCN: RX (Bit 1)                              */
#define USART_FLOWCN_RX_Msk               (0x2UL)                   /*!< USART FLOWCN: RX (Bitfield-Mask: 0x01)                */
#define USART_FLOWCN_RTS_Pos              (0UL)                     /*!< USART FLOWCN: RTS (Bit 0)                             */
#define USART_FLOWCN_RTS_Msk              (0x1UL)                   /*!< USART FLOWCN: RTS (Bitfield-Mask: 0x01)               */
/* ======================================================  FLOWCN_SET  ======================================================= */
/* ======================================================  FLOWCN_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
#define USART_CONTROL_TEN_Pos             (31UL)                    /*!< USART CONTROL: TEN (Bit 31)                           */
#define USART_CONTROL_TEN_Msk             (0x80000000UL)            /*!< USART CONTROL: TEN (Bitfield-Mask: 0x01)              */
#define USART_CONTROL_TINH_Pos            (30UL)                    /*!< USART CONTROL: TINH (Bit 30)                          */
#define USART_CONTROL_TINH_Msk            (0x40000000UL)            /*!< USART CONTROL: TINH (Bitfield-Mask: 0x01)             */
#define USART_CONTROL_TBIT_Pos            (28UL)                    /*!< USART CONTROL: TBIT (Bit 28)                          */
#define USART_CONTROL_TBIT_Msk            (0x10000000UL)            /*!< USART CONTROL: TBIT (Bitfield-Mask: 0x01)             */
#define USART_CONTROL_TBUSYF_Pos          (27UL)                    /*!< USART CONTROL: TBUSYF (Bit 27)                        */
#define USART_CONTROL_TBUSYF_Msk          (0x8000000UL)             /*!< USART CONTROL: TBUSYF (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TCPTIEN_Pos         (23UL)                    /*!< USART CONTROL: TCPTIEN (Bit 23)                       */
#define USART_CONTROL_TCPTIEN_Msk         (0x800000UL)              /*!< USART CONTROL: TCPTIEN (Bitfield-Mask: 0x01)          */
#define USART_CONTROL_TDREQIEN_Pos        (22UL)                    /*!< USART CONTROL: TDREQIEN (Bit 22)                      */
#define USART_CONTROL_TDREQIEN_Msk        (0x400000UL)              /*!< USART CONTROL: TDREQIEN (Bitfield-Mask: 0x01)         */
#define USART_CONTROL_TERIEN_Pos          (21UL)                    /*!< USART CONTROL: TERIEN (Bit 21)                        */
#define USART_CONTROL_TERIEN_Msk          (0x200000UL)              /*!< USART CONTROL: TERIEN (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TCPTTH_Pos          (20UL)                    /*!< USART CONTROL: TCPTTH (Bit 20)                        */
#define USART_CONTROL_TCPTTH_Msk          (0x100000UL)              /*!< USART CONTROL: TCPTTH (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TCPTI_Pos           (19UL)                    /*!< USART CONTROL: TCPTI (Bit 19)                         */
#define USART_CONTROL_TCPTI_Msk           (0x80000UL)               /*!< USART CONTROL: TCPTI (Bitfield-Mask: 0x01)            */
#define USART_CONTROL_TDREQI_Pos          (18UL)                    /*!< USART CONTROL: TDREQI (Bit 18)                        */
#define USART_CONTROL_TDREQI_Msk          (0x40000UL)               /*!< USART CONTROL: TDREQI (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TUREI_Pos           (17UL)                    /*!< USART CONTROL: TUREI (Bit 17)                         */
#define USART_CONTROL_TUREI_Msk           (0x20000UL)               /*!< USART CONTROL: TUREI (Bitfield-Mask: 0x01)            */
#define USART_CONTROL_TSCERI_Pos          (16UL)                    /*!< USART CONTROL: TSCERI (Bit 16)                        */
#define USART_CONTROL_TSCERI_Msk          (0x10000UL)               /*!< USART CONTROL: TSCERI (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_REN_Pos             (15UL)                    /*!< USART CONTROL: REN (Bit 15)                           */
#define USART_CONTROL_REN_Msk             (0x8000UL)                /*!< USART CONTROL: REN (Bitfield-Mask: 0x01)              */
#define USART_CONTROL_RINH_Pos            (14UL)                    /*!< USART CONTROL: RINH (Bit 14)                          */
#define USART_CONTROL_RINH_Msk            (0x4000UL)                /*!< USART CONTROL: RINH (Bitfield-Mask: 0x01)             */
#define USART_CONTROL_ROSEN_Pos           (13UL)                    /*!< USART CONTROL: ROSEN (Bit 13)                         */
#define USART_CONTROL_ROSEN_Msk           (0x2000UL)                /*!< USART CONTROL: ROSEN (Bitfield-Mask: 0x01)            */
#define USART_CONTROL_RBIT_Pos            (12UL)                    /*!< USART CONTROL: RBIT (Bit 12)                          */
#define USART_CONTROL_RBIT_Msk            (0x1000UL)                /*!< USART CONTROL: RBIT (Bitfield-Mask: 0x01)             */
#define USART_CONTROL_RBUSYF_Pos          (11UL)                    /*!< USART CONTROL: RBUSYF (Bit 11)                        */
#define USART_CONTROL_RBUSYF_Msk          (0x800UL)                 /*!< USART CONTROL: RBUSYF (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_RABDEN_Pos          (10UL)                    /*!< USART CONTROL: RABDEN (Bit 10)                        */
#define USART_CONTROL_RABDEN_Msk          (0x400UL)                 /*!< USART CONTROL: RABDEN (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_MATMD_Pos           (8UL)                     /*!< USART CONTROL: MATMD (Bit 8)                          */
#define USART_CONTROL_MATMD_Msk           (0x300UL)                 /*!< USART CONTROL: MATMD (Bitfield-Mask: 0x03)            */
#define USART_CONTROL_RDREQIEN_Pos        (6UL)                     /*!< USART CONTROL: RDREQIEN (Bit 6)                       */
#define USART_CONTROL_RDREQIEN_Msk        (0x40UL)                  /*!< USART CONTROL: RDREQIEN (Bitfield-Mask: 0x01)         */
#define USART_CONTROL_RERIEN_Pos          (5UL)                     /*!< USART CONTROL: RERIEN (Bit 5)                         */
#define USART_CONTROL_RERIEN_Msk          (0x20UL)                  /*!< USART CONTROL: RERIEN (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_RDREQI_Pos          (3UL)                     /*!< USART CONTROL: RDREQI (Bit 3)                         */
#define USART_CONTROL_RDREQI_Msk          (0x8UL)                   /*!< USART CONTROL: RDREQI (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_ROREI_Pos           (2UL)                     /*!< USART CONTROL: ROREI (Bit 2)                          */
#define USART_CONTROL_ROREI_Msk           (0x4UL)                   /*!< USART CONTROL: ROREI (Bitfield-Mask: 0x01)            */
#define USART_CONTROL_RPARERI_Pos         (1UL)                     /*!< USART CONTROL: RPARERI (Bit 1)                        */
#define USART_CONTROL_RPARERI_Msk         (0x2UL)                   /*!< USART CONTROL: RPARERI (Bitfield-Mask: 0x01)          */
#define USART_CONTROL_RFRMERI_Pos         (0UL)                     /*!< USART CONTROL: RFRMERI (Bit 0)                        */
#define USART_CONTROL_RFRMERI_Msk         (0x1UL)                   /*!< USART CONTROL: RFRMERI (Bitfield-Mask: 0x01)          */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  IPDELAY  ======================================================== */
#define USART_IPDELAY_IPDELAY_Pos         (16UL)                    /*!< USART IPDELAY: IPDELAY (Bit 16)                       */
#define USART_IPDELAY_IPDELAY_Msk         (0xff0000UL)              /*!< USART IPDELAY: IPDELAY (Bitfield-Mask: 0xff)          */
/* =======================================================  BAUDRATE  ======================================================== */
#define USART_BAUDRATE_TBAUD_Pos          (16UL)                    /*!< USART BAUDRATE: TBAUD (Bit 16)                        */
#define USART_BAUDRATE_TBAUD_Msk          (0xffff0000UL)            /*!< USART BAUDRATE: TBAUD (Bitfield-Mask: 0xffff)         */
#define USART_BAUDRATE_RBAUD_Pos          (0UL)                     /*!< USART BAUDRATE: RBAUD (Bit 0)                         */
#define USART_BAUDRATE_RBAUD_Msk          (0xffffUL)                /*!< USART BAUDRATE: RBAUD (Bitfield-Mask: 0xffff)         */
/* ========================================================  FIFOCN  ========================================================= */
#define USART_FIFOCN_TSRFULLF_Pos         (26UL)                    /*!< USART FIFOCN: TSRFULLF (Bit 26)                       */
#define USART_FIFOCN_TSRFULLF_Msk         (0x4000000UL)             /*!< USART FIFOCN: TSRFULLF (Bitfield-Mask: 0x01)          */
#define USART_FIFOCN_TFERI_Pos            (25UL)                    /*!< USART FIFOCN: TFERI (Bit 25)                          */
#define USART_FIFOCN_TFERI_Msk            (0x2000000UL)             /*!< USART FIFOCN: TFERI (Bitfield-Mask: 0x01)             */
#define USART_FIFOCN_TFIFOFL_Pos          (24UL)                    /*!< USART FIFOCN: TFIFOFL (Bit 24)                        */
#define USART_FIFOCN_TFIFOFL_Msk          (0x1000000UL)             /*!< USART FIFOCN: TFIFOFL (Bitfield-Mask: 0x01)           */
#define USART_FIFOCN_TDMAEN_Pos           (23UL)                    /*!< USART FIFOCN: TDMAEN (Bit 23)                         */
#define USART_FIFOCN_TDMAEN_Msk           (0x800000UL)              /*!< USART FIFOCN: TDMAEN (Bitfield-Mask: 0x01)            */
#define USART_FIFOCN_TFTH_Pos             (20UL)                    /*!< USART FIFOCN: TFTH (Bit 20)                           */
#define USART_FIFOCN_TFTH_Msk             (0x300000UL)              /*!< USART FIFOCN: TFTH (Bitfield-Mask: 0x03)              */
#define USART_FIFOCN_TCNT_Pos             (16UL)                    /*!< USART FIFOCN: TCNT (Bit 16)                           */
#define USART_FIFOCN_TCNT_Msk             (0x70000UL)               /*!< USART FIFOCN: TCNT (Bitfield-Mask: 0x07)              */
#define USART_FIFOCN_RSRFULLF_Pos         (10UL)                    /*!< USART FIFOCN: RSRFULLF (Bit 10)                       */
#define USART_FIFOCN_RSRFULLF_Msk         (0x400UL)                 /*!< USART FIFOCN: RSRFULLF (Bitfield-Mask: 0x01)          */
#define USART_FIFOCN_RFERI_Pos            (9UL)                     /*!< USART FIFOCN: RFERI (Bit 9)                           */
#define USART_FIFOCN_RFERI_Msk            (0x200UL)                 /*!< USART FIFOCN: RFERI (Bitfield-Mask: 0x01)             */
#define USART_FIFOCN_RFIFOFL_Pos          (8UL)                     /*!< USART FIFOCN: RFIFOFL (Bit 8)                         */
#define USART_FIFOCN_RFIFOFL_Msk          (0x100UL)                 /*!< USART FIFOCN: RFIFOFL (Bitfield-Mask: 0x01)           */
#define USART_FIFOCN_RDMAEN_Pos           (7UL)                     /*!< USART FIFOCN: RDMAEN (Bit 7)                          */
#define USART_FIFOCN_RDMAEN_Msk           (0x80UL)                  /*!< USART FIFOCN: RDMAEN (Bitfield-Mask: 0x01)            */
#define USART_FIFOCN_RFTH_Pos             (4UL)                     /*!< USART FIFOCN: RFTH (Bit 4)                            */
#define USART_FIFOCN_RFTH_Msk             (0x30UL)                  /*!< USART FIFOCN: RFTH (Bitfield-Mask: 0x03)              */
#define USART_FIFOCN_RCNT_Pos             (0UL)                     /*!< USART FIFOCN: RCNT (Bit 0)                            */
#define USART_FIFOCN_RCNT_Msk             (0x7UL)                   /*!< USART FIFOCN: RCNT (Bitfield-Mask: 0x07)              */
/* ======================================================  FIFOCN_SET  ======================================================= */
/* ======================================================  FIFOCN_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define UART_CONFIG_TINVEN_Pos            (30UL)                    /*!< UART CONFIG: TINVEN (Bit 30)                          */
#define UART_CONFIG_TINVEN_Msk            (0x40000000UL)            /*!< UART CONFIG: TINVEN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_TIRDAEN_Pos           (29UL)                    /*!< UART CONFIG: TIRDAEN (Bit 29)                         */
#define UART_CONFIG_TIRDAEN_Msk           (0x20000000UL)            /*!< UART CONFIG: TIRDAEN (Bitfield-Mask: 0x01)            */
#define UART_CONFIG_TSCEN_Pos             (28UL)                    /*!< UART CONFIG: TSCEN (Bit 28)                           */
#define UART_CONFIG_TSCEN_Msk             (0x10000000UL)            /*!< UART CONFIG: TSCEN (Bitfield-Mask: 0x01)              */
#define UART_CONFIG_TDATLN_Pos            (24UL)                    /*!< UART CONFIG: TDATLN (Bit 24)                          */
#define UART_CONFIG_TDATLN_Msk            (0x7000000UL)             /*!< UART CONFIG: TDATLN (Bitfield-Mask: 0x07)             */
#define UART_CONFIG_TPARMD_Pos            (21UL)                    /*!< UART CONFIG: TPARMD (Bit 21)                          */
#define UART_CONFIG_TPARMD_Msk            (0x600000UL)              /*!< UART CONFIG: TPARMD (Bitfield-Mask: 0x03)             */
#define UART_CONFIG_TSTPMD_Pos            (19UL)                    /*!< UART CONFIG: TSTPMD (Bit 19)                          */
#define UART_CONFIG_TSTPMD_Msk            (0x180000UL)              /*!< UART CONFIG: TSTPMD (Bitfield-Mask: 0x03)             */
#define UART_CONFIG_TSTPEN_Pos            (18UL)                    /*!< UART CONFIG: TSTPEN (Bit 18)                          */
#define UART_CONFIG_TSTPEN_Msk            (0x40000UL)               /*!< UART CONFIG: TSTPEN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_TPAREN_Pos            (17UL)                    /*!< UART CONFIG: TPAREN (Bit 17)                          */
#define UART_CONFIG_TPAREN_Msk            (0x20000UL)               /*!< UART CONFIG: TPAREN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_TSTRTEN_Pos           (16UL)                    /*!< UART CONFIG: TSTRTEN (Bit 16)                         */
#define UART_CONFIG_TSTRTEN_Msk           (0x10000UL)               /*!< UART CONFIG: TSTRTEN (Bitfield-Mask: 0x01)            */
#define UART_CONFIG_RINVEN_Pos            (14UL)                    /*!< UART CONFIG: RINVEN (Bit 14)                          */
#define UART_CONFIG_RINVEN_Msk            (0x4000UL)                /*!< UART CONFIG: RINVEN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_RIRDAEN_Pos           (13UL)                    /*!< UART CONFIG: RIRDAEN (Bit 13)                         */
#define UART_CONFIG_RIRDAEN_Msk           (0x2000UL)                /*!< UART CONFIG: RIRDAEN (Bitfield-Mask: 0x01)            */
#define UART_CONFIG_RSCEN_Pos             (12UL)                    /*!< UART CONFIG: RSCEN (Bit 12)                           */
#define UART_CONFIG_RSCEN_Msk             (0x1000UL)                /*!< UART CONFIG: RSCEN (Bitfield-Mask: 0x01)              */
#define UART_CONFIG_RDATLN_Pos            (8UL)                     /*!< UART CONFIG: RDATLN (Bit 8)                           */
#define UART_CONFIG_RDATLN_Msk            (0x700UL)                 /*!< UART CONFIG: RDATLN (Bitfield-Mask: 0x07)             */
#define UART_CONFIG_RPARMD_Pos            (5UL)                     /*!< UART CONFIG: RPARMD (Bit 5)                           */
#define UART_CONFIG_RPARMD_Msk            (0x60UL)                  /*!< UART CONFIG: RPARMD (Bitfield-Mask: 0x03)             */
#define UART_CONFIG_RSTPMD_Pos            (3UL)                     /*!< UART CONFIG: RSTPMD (Bit 3)                           */
#define UART_CONFIG_RSTPMD_Msk            (0x18UL)                  /*!< UART CONFIG: RSTPMD (Bitfield-Mask: 0x03)             */
#define UART_CONFIG_RSTPEN_Pos            (2UL)                     /*!< UART CONFIG: RSTPEN (Bit 2)                           */
#define UART_CONFIG_RSTPEN_Msk            (0x4UL)                   /*!< UART CONFIG: RSTPEN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_RPAREN_Pos            (1UL)                     /*!< UART CONFIG: RPAREN (Bit 1)                           */
#define UART_CONFIG_RPAREN_Msk            (0x2UL)                   /*!< UART CONFIG: RPAREN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_RSTRTEN_Pos           (0UL)                     /*!< UART CONFIG: RSTRTEN (Bit 0)                          */
#define UART_CONFIG_RSTRTEN_Msk           (0x1UL)                   /*!< UART CONFIG: RSTRTEN (Bitfield-Mask: 0x01)            */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* =========================================================  MODE  ========================================================== */
#define UART_MODE_ITSEN_Pos               (30UL)                    /*!< UART MODE: ITSEN (Bit 30)                             */
#define UART_MODE_ITSEN_Msk               (0x40000000UL)            /*!< UART MODE: ITSEN (Bitfield-Mask: 0x01)                */
#define UART_MODE_DUPLEXMD_Pos            (27UL)                    /*!< UART MODE: DUPLEXMD (Bit 27)                          */
#define UART_MODE_DUPLEXMD_Msk            (0x8000000UL)             /*!< UART MODE: DUPLEXMD (Bitfield-Mask: 0x01)             */
#define UART_MODE_LBMD_Pos                (18UL)                    /*!< UART MODE: LBMD (Bit 18)                              */
#define UART_MODE_LBMD_Msk                (0xc0000UL)               /*!< UART MODE: LBMD (Bitfield-Mask: 0x03)                 */
#define UART_MODE_DBGMD_Pos               (16UL)                    /*!< UART MODE: DBGMD (Bit 16)                             */
#define UART_MODE_DBGMD_Msk               (0x10000UL)               /*!< UART MODE: DBGMD (Bitfield-Mask: 0x01)                */
/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */
/* ========================================================  FLOWCN  ========================================================= */
#define UART_FLOWCN_TIRDAPW_Pos           (28UL)                    /*!< UART FLOWCN: TIRDAPW (Bit 28)                         */
#define UART_FLOWCN_TIRDAPW_Msk           (0x30000000UL)            /*!< UART FLOWCN: TIRDAPW (Bitfield-Mask: 0x03)            */
#define UART_FLOWCN_CTSEN_Pos             (23UL)                    /*!< UART FLOWCN: CTSEN (Bit 23)                           */
#define UART_FLOWCN_CTSEN_Msk             (0x800000UL)              /*!< UART FLOWCN: CTSEN (Bitfield-Mask: 0x01)              */
#define UART_FLOWCN_CTSINVEN_Pos          (21UL)                    /*!< UART FLOWCN: CTSINVEN (Bit 21)                        */
#define UART_FLOWCN_CTSINVEN_Msk          (0x200000UL)              /*!< UART FLOWCN: CTSINVEN (Bitfield-Mask: 0x01)           */
#define UART_FLOWCN_TX_Pos                (17UL)                    /*!< UART FLOWCN: TX (Bit 17)                              */
#define UART_FLOWCN_TX_Msk                (0x20000UL)               /*!< UART FLOWCN: TX (Bitfield-Mask: 0x01)                 */
#define UART_FLOWCN_CTS_Pos               (16UL)                    /*!< UART FLOWCN: CTS (Bit 16)                             */
#define UART_FLOWCN_CTS_Msk               (0x10000UL)               /*!< UART FLOWCN: CTS (Bitfield-Mask: 0x01)                */
#define UART_FLOWCN_RTSEN_Pos             (7UL)                     /*!< UART FLOWCN: RTSEN (Bit 7)                            */
#define UART_FLOWCN_RTSEN_Msk             (0x80UL)                  /*!< UART FLOWCN: RTSEN (Bitfield-Mask: 0x01)              */
#define UART_FLOWCN_RTSTH_Pos             (6UL)                     /*!< UART FLOWCN: RTSTH (Bit 6)                            */
#define UART_FLOWCN_RTSTH_Msk             (0x40UL)                  /*!< UART FLOWCN: RTSTH (Bitfield-Mask: 0x01)              */
#define UART_FLOWCN_RTSINVEN_Pos          (5UL)                     /*!< UART FLOWCN: RTSINVEN (Bit 5)                         */
#define UART_FLOWCN_RTSINVEN_Msk          (0x20UL)                  /*!< UART FLOWCN: RTSINVEN (Bitfield-Mask: 0x01)           */
#define UART_FLOWCN_RX_Pos                (1UL)                     /*!< UART FLOWCN: RX (Bit 1)                               */
#define UART_FLOWCN_RX_Msk                (0x2UL)                   /*!< UART FLOWCN: RX (Bitfield-Mask: 0x01)                 */
#define UART_FLOWCN_RTS_Pos               (0UL)                     /*!< UART FLOWCN: RTS (Bit 0)                              */
#define UART_FLOWCN_RTS_Msk               (0x1UL)                   /*!< UART FLOWCN: RTS (Bitfield-Mask: 0x01)                */
/* ======================================================  FLOWCN_SET  ======================================================= */
/* ======================================================  FLOWCN_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
#define UART_CONTROL_TEN_Pos              (31UL)                    /*!< UART CONTROL: TEN (Bit 31)                            */
#define UART_CONTROL_TEN_Msk              (0x80000000UL)            /*!< UART CONTROL: TEN (Bitfield-Mask: 0x01)               */
#define UART_CONTROL_TINH_Pos             (30UL)                    /*!< UART CONTROL: TINH (Bit 30)                           */
#define UART_CONTROL_TINH_Msk             (0x40000000UL)            /*!< UART CONTROL: TINH (Bitfield-Mask: 0x01)              */
#define UART_CONTROL_TBIT_Pos             (28UL)                    /*!< UART CONTROL: TBIT (Bit 28)                           */
#define UART_CONTROL_TBIT_Msk             (0x10000000UL)            /*!< UART CONTROL: TBIT (Bitfield-Mask: 0x01)              */
#define UART_CONTROL_TBUSYF_Pos           (27UL)                    /*!< UART CONTROL: TBUSYF (Bit 27)                         */
#define UART_CONTROL_TBUSYF_Msk           (0x8000000UL)             /*!< UART CONTROL: TBUSYF (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TCPTIEN_Pos          (23UL)                    /*!< UART CONTROL: TCPTIEN (Bit 23)                        */
#define UART_CONTROL_TCPTIEN_Msk          (0x800000UL)              /*!< UART CONTROL: TCPTIEN (Bitfield-Mask: 0x01)           */
#define UART_CONTROL_TDREQIEN_Pos         (22UL)                    /*!< UART CONTROL: TDREQIEN (Bit 22)                       */
#define UART_CONTROL_TDREQIEN_Msk         (0x400000UL)              /*!< UART CONTROL: TDREQIEN (Bitfield-Mask: 0x01)          */
#define UART_CONTROL_TERIEN_Pos           (21UL)                    /*!< UART CONTROL: TERIEN (Bit 21)                         */
#define UART_CONTROL_TERIEN_Msk           (0x200000UL)              /*!< UART CONTROL: TERIEN (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TCPTTH_Pos           (20UL)                    /*!< UART CONTROL: TCPTTH (Bit 20)                         */
#define UART_CONTROL_TCPTTH_Msk           (0x100000UL)              /*!< UART CONTROL: TCPTTH (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TCPTI_Pos            (19UL)                    /*!< UART CONTROL: TCPTI (Bit 19)                          */
#define UART_CONTROL_TCPTI_Msk            (0x80000UL)               /*!< UART CONTROL: TCPTI (Bitfield-Mask: 0x01)             */
#define UART_CONTROL_TDREQI_Pos           (18UL)                    /*!< UART CONTROL: TDREQI (Bit 18)                         */
#define UART_CONTROL_TDREQI_Msk           (0x40000UL)               /*!< UART CONTROL: TDREQI (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TSCERI_Pos           (16UL)                    /*!< UART CONTROL: TSCERI (Bit 16)                         */
#define UART_CONTROL_TSCERI_Msk           (0x10000UL)               /*!< UART CONTROL: TSCERI (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_REN_Pos              (15UL)                    /*!< UART CONTROL: REN (Bit 15)                            */
#define UART_CONTROL_REN_Msk              (0x8000UL)                /*!< UART CONTROL: REN (Bitfield-Mask: 0x01)               */
#define UART_CONTROL_RINH_Pos             (14UL)                    /*!< UART CONTROL: RINH (Bit 14)                           */
#define UART_CONTROL_RINH_Msk             (0x4000UL)                /*!< UART CONTROL: RINH (Bitfield-Mask: 0x01)              */
#define UART_CONTROL_ROSEN_Pos            (13UL)                    /*!< UART CONTROL: ROSEN (Bit 13)                          */
#define UART_CONTROL_ROSEN_Msk            (0x2000UL)                /*!< UART CONTROL: ROSEN (Bitfield-Mask: 0x01)             */
#define UART_CONTROL_RBIT_Pos             (12UL)                    /*!< UART CONTROL: RBIT (Bit 12)                           */
#define UART_CONTROL_RBIT_Msk             (0x1000UL)                /*!< UART CONTROL: RBIT (Bitfield-Mask: 0x01)              */
#define UART_CONTROL_RBUSYF_Pos           (11UL)                    /*!< UART CONTROL: RBUSYF (Bit 11)                         */
#define UART_CONTROL_RBUSYF_Msk           (0x800UL)                 /*!< UART CONTROL: RBUSYF (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_RABDEN_Pos           (10UL)                    /*!< UART CONTROL: RABDEN (Bit 10)                         */
#define UART_CONTROL_RABDEN_Msk           (0x400UL)                 /*!< UART CONTROL: RABDEN (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_MATMD_Pos            (8UL)                     /*!< UART CONTROL: MATMD (Bit 8)                           */
#define UART_CONTROL_MATMD_Msk            (0x300UL)                 /*!< UART CONTROL: MATMD (Bitfield-Mask: 0x03)             */
#define UART_CONTROL_RDREQIEN_Pos         (6UL)                     /*!< UART CONTROL: RDREQIEN (Bit 6)                        */
#define UART_CONTROL_RDREQIEN_Msk         (0x40UL)                  /*!< UART CONTROL: RDREQIEN (Bitfield-Mask: 0x01)          */
#define UART_CONTROL_RERIEN_Pos           (5UL)                     /*!< UART CONTROL: RERIEN (Bit 5)                          */
#define UART_CONTROL_RERIEN_Msk           (0x20UL)                  /*!< UART CONTROL: RERIEN (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_RDREQI_Pos           (3UL)                     /*!< UART CONTROL: RDREQI (Bit 3)                          */
#define UART_CONTROL_RDREQI_Msk           (0x8UL)                   /*!< UART CONTROL: RDREQI (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_ROREI_Pos            (2UL)                     /*!< UART CONTROL: ROREI (Bit 2)                           */
#define UART_CONTROL_ROREI_Msk            (0x4UL)                   /*!< UART CONTROL: ROREI (Bitfield-Mask: 0x01)             */
#define UART_CONTROL_RPARERI_Pos          (1UL)                     /*!< UART CONTROL: RPARERI (Bit 1)                         */
#define UART_CONTROL_RPARERI_Msk          (0x2UL)                   /*!< UART CONTROL: RPARERI (Bitfield-Mask: 0x01)           */
#define UART_CONTROL_RFRMERI_Pos          (0UL)                     /*!< UART CONTROL: RFRMERI (Bit 0)                         */
#define UART_CONTROL_RFRMERI_Msk          (0x1UL)                   /*!< UART CONTROL: RFRMERI (Bitfield-Mask: 0x01)           */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  IPDELAY  ======================================================== */
#define UART_IPDELAY_IPDELAY_Pos          (16UL)                    /*!< UART IPDELAY: IPDELAY (Bit 16)                        */
#define UART_IPDELAY_IPDELAY_Msk          (0xff0000UL)              /*!< UART IPDELAY: IPDELAY (Bitfield-Mask: 0xff)           */
/* =======================================================  BAUDRATE  ======================================================== */
#define UART_BAUDRATE_TBAUD_Pos           (16UL)                    /*!< UART BAUDRATE: TBAUD (Bit 16)                         */
#define UART_BAUDRATE_TBAUD_Msk           (0xffff0000UL)            /*!< UART BAUDRATE: TBAUD (Bitfield-Mask: 0xffff)          */
#define UART_BAUDRATE_RBAUD_Pos           (0UL)                     /*!< UART BAUDRATE: RBAUD (Bit 0)                          */
#define UART_BAUDRATE_RBAUD_Msk           (0xffffUL)                /*!< UART BAUDRATE: RBAUD (Bitfield-Mask: 0xffff)          */
/* ========================================================  FIFOCN  ========================================================= */
#define UART_FIFOCN_TSRFULLF_Pos          (26UL)                    /*!< UART FIFOCN: TSRFULLF (Bit 26)                        */
#define UART_FIFOCN_TSRFULLF_Msk          (0x4000000UL)             /*!< UART FIFOCN: TSRFULLF (Bitfield-Mask: 0x01)           */
#define UART_FIFOCN_TFERI_Pos             (25UL)                    /*!< UART FIFOCN: TFERI (Bit 25)                           */
#define UART_FIFOCN_TFERI_Msk             (0x2000000UL)             /*!< UART FIFOCN: TFERI (Bitfield-Mask: 0x01)              */
#define UART_FIFOCN_TFIFOFL_Pos           (24UL)                    /*!< UART FIFOCN: TFIFOFL (Bit 24)                         */
#define UART_FIFOCN_TFIFOFL_Msk           (0x1000000UL)             /*!< UART FIFOCN: TFIFOFL (Bitfield-Mask: 0x01)            */
#define UART_FIFOCN_TFTH_Pos              (20UL)                    /*!< UART FIFOCN: TFTH (Bit 20)                            */
#define UART_FIFOCN_TFTH_Msk              (0x300000UL)              /*!< UART FIFOCN: TFTH (Bitfield-Mask: 0x03)               */
#define UART_FIFOCN_TCNT_Pos              (16UL)                    /*!< UART FIFOCN: TCNT (Bit 16)                            */
#define UART_FIFOCN_TCNT_Msk              (0x70000UL)               /*!< UART FIFOCN: TCNT (Bitfield-Mask: 0x07)               */
#define UART_FIFOCN_RSRFULLF_Pos          (10UL)                    /*!< UART FIFOCN: RSRFULLF (Bit 10)                        */
#define UART_FIFOCN_RSRFULLF_Msk          (0x400UL)                 /*!< UART FIFOCN: RSRFULLF (Bitfield-Mask: 0x01)           */
#define UART_FIFOCN_RFERI_Pos             (9UL)                     /*!< UART FIFOCN: RFERI (Bit 9)                            */
#define UART_FIFOCN_RFERI_Msk             (0x200UL)                 /*!< UART FIFOCN: RFERI (Bitfield-Mask: 0x01)              */
#define UART_FIFOCN_RFIFOFL_Pos           (8UL)                     /*!< UART FIFOCN: RFIFOFL (Bit 8)                          */
#define UART_FIFOCN_RFIFOFL_Msk           (0x100UL)                 /*!< UART FIFOCN: RFIFOFL (Bitfield-Mask: 0x01)            */
#define UART_FIFOCN_RFTH_Pos              (4UL)                     /*!< UART FIFOCN: RFTH (Bit 4)                             */
#define UART_FIFOCN_RFTH_Msk              (0x30UL)                  /*!< UART FIFOCN: RFTH (Bitfield-Mask: 0x03)               */
#define UART_FIFOCN_RCNT_Pos              (0UL)                     /*!< UART FIFOCN: RCNT (Bit 0)                             */
#define UART_FIFOCN_RCNT_Msk              (0x7UL)                   /*!< UART FIFOCN: RCNT (Bitfield-Mask: 0x07)               */
/* ======================================================  FIFOCN_SET  ======================================================= */
/* ======================================================  FIFOCN_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            SPI                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
/* ========================================================  CONTROL  ======================================================== */
#define SPI_CONTROL_DBGMD_Pos             (24UL)                    /*!< SPI CONTROL: DBGMD (Bit 24)                           */
#define SPI_CONTROL_DBGMD_Msk             (0x1000000UL)             /*!< SPI CONTROL: DBGMD (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_TFCNT_Pos             (20UL)                    /*!< SPI CONTROL: TFCNT (Bit 20)                           */
#define SPI_CONTROL_TFCNT_Msk             (0xf00000UL)              /*!< SPI CONTROL: TFCNT (Bitfield-Mask: 0x0f)              */
#define SPI_CONTROL_RFCNT_Pos             (16UL)                    /*!< SPI CONTROL: RFCNT (Bit 16)                           */
#define SPI_CONTROL_RFCNT_Msk             (0xf0000UL)               /*!< SPI CONTROL: RFCNT (Bitfield-Mask: 0x0f)              */
#define SPI_CONTROL_BUSYF_Pos             (15UL)                    /*!< SPI CONTROL: BUSYF (Bit 15)                           */
#define SPI_CONTROL_BUSYF_Msk             (0x8000UL)                /*!< SPI CONTROL: BUSYF (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_NSSSTS_Pos            (14UL)                    /*!< SPI CONTROL: NSSSTS (Bit 14)                          */
#define SPI_CONTROL_NSSSTS_Msk            (0x4000UL)                /*!< SPI CONTROL: NSSSTS (Bitfield-Mask: 0x01)             */
#define SPI_CONTROL_TFILI_Pos             (9UL)                     /*!< SPI CONTROL: TFILI (Bit 9)                            */
#define SPI_CONTROL_TFILI_Msk             (0x200UL)                 /*!< SPI CONTROL: TFILI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_RFILI_Pos             (8UL)                     /*!< SPI CONTROL: RFILI (Bit 8)                            */
#define SPI_CONTROL_RFILI_Msk             (0x100UL)                 /*!< SPI CONTROL: RFILI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_SREI_Pos              (7UL)                     /*!< SPI CONTROL: SREI (Bit 7)                             */
#define SPI_CONTROL_SREI_Msk              (0x80UL)                  /*!< SPI CONTROL: SREI (Bitfield-Mask: 0x01)               */
#define SPI_CONTROL_URI_Pos               (6UL)                     /*!< SPI CONTROL: URI (Bit 6)                              */
#define SPI_CONTROL_URI_Msk               (0x40UL)                  /*!< SPI CONTROL: URI (Bitfield-Mask: 0x01)                */
#define SPI_CONTROL_MDFI_Pos              (5UL)                     /*!< SPI CONTROL: MDFI (Bit 5)                             */
#define SPI_CONTROL_MDFI_Msk              (0x20UL)                  /*!< SPI CONTROL: MDFI (Bitfield-Mask: 0x01)               */
#define SPI_CONTROL_SLVSELI_Pos           (4UL)                     /*!< SPI CONTROL: SLVSELI (Bit 4)                          */
#define SPI_CONTROL_SLVSELI_Msk           (0x10UL)                  /*!< SPI CONTROL: SLVSELI (Bitfield-Mask: 0x01)            */
#define SPI_CONTROL_TFORI_Pos             (3UL)                     /*!< SPI CONTROL: TFORI (Bit 3)                            */
#define SPI_CONTROL_TFORI_Msk             (0x8UL)                   /*!< SPI CONTROL: TFORI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_TFRQI_Pos             (2UL)                     /*!< SPI CONTROL: TFRQI (Bit 2)                            */
#define SPI_CONTROL_TFRQI_Msk             (0x4UL)                   /*!< SPI CONTROL: TFRQI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_RFORI_Pos             (1UL)                     /*!< SPI CONTROL: RFORI (Bit 1)                            */
#define SPI_CONTROL_RFORI_Msk             (0x2UL)                   /*!< SPI CONTROL: RFORI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_RFRQI_Pos             (0UL)                     /*!< SPI CONTROL: RFRQI (Bit 0)                            */
#define SPI_CONTROL_RFRQI_Msk             (0x1UL)                   /*!< SPI CONTROL: RFRQI (Bitfield-Mask: 0x01)              */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  CONFIG  ========================================================= */
#define SPI_CONFIG_RESET_Pos              (31UL)                    /*!< SPI CONFIG: RESET (Bit 31)                            */
#define SPI_CONFIG_RESET_Msk              (0x80000000UL)            /*!< SPI CONFIG: RESET (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_TFIFOFL_Pos            (30UL)                    /*!< SPI CONFIG: TFIFOFL (Bit 30)                          */
#define SPI_CONFIG_TFIFOFL_Msk            (0x40000000UL)            /*!< SPI CONFIG: TFIFOFL (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_RFIFOFL_Pos            (29UL)                    /*!< SPI CONFIG: RFIFOFL (Bit 29)                          */
#define SPI_CONFIG_RFIFOFL_Msk            (0x20000000UL)            /*!< SPI CONFIG: RFIFOFL (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_DMAEN_Pos              (24UL)                    /*!< SPI CONFIG: DMAEN (Bit 24)                            */
#define SPI_CONFIG_DMAEN_Msk              (0x1000000UL)             /*!< SPI CONFIG: DMAEN (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_DSIZE_Pos              (20UL)                    /*!< SPI CONFIG: DSIZE (Bit 20)                            */
#define SPI_CONFIG_DSIZE_Msk              (0xf00000UL)              /*!< SPI CONFIG: DSIZE (Bitfield-Mask: 0x0f)               */
#define SPI_CONFIG_TFTH_Pos               (18UL)                    /*!< SPI CONFIG: TFTH (Bit 18)                             */
#define SPI_CONFIG_TFTH_Msk               (0xc0000UL)               /*!< SPI CONFIG: TFTH (Bitfield-Mask: 0x03)                */
#define SPI_CONFIG_RFTH_Pos               (16UL)                    /*!< SPI CONFIG: RFTH (Bit 16)                             */
#define SPI_CONFIG_RFTH_Msk               (0x30000UL)               /*!< SPI CONFIG: RFTH (Bitfield-Mask: 0x03)                */
#define SPI_CONFIG_NSSMD_Pos              (14UL)                    /*!< SPI CONFIG: NSSMD (Bit 14)                            */
#define SPI_CONFIG_NSSMD_Msk              (0xc000UL)                /*!< SPI CONFIG: NSSMD (Bitfield-Mask: 0x03)               */
#define SPI_CONFIG_DDIRSEL_Pos            (13UL)                    /*!< SPI CONFIG: DDIRSEL (Bit 13)                          */
#define SPI_CONFIG_DDIRSEL_Msk            (0x2000UL)                /*!< SPI CONFIG: DDIRSEL (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_NSSPOL_Pos             (12UL)                    /*!< SPI CONFIG: NSSPOL (Bit 12)                           */
#define SPI_CONFIG_NSSPOL_Msk             (0x1000UL)                /*!< SPI CONFIG: NSSPOL (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_CLKPHA_Pos             (11UL)                    /*!< SPI CONFIG: CLKPHA (Bit 11)                           */
#define SPI_CONFIG_CLKPHA_Msk             (0x800UL)                 /*!< SPI CONFIG: CLKPHA (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_CLKPOL_Pos             (10UL)                    /*!< SPI CONFIG: CLKPOL (Bit 10)                           */
#define SPI_CONFIG_CLKPOL_Msk             (0x400UL)                 /*!< SPI CONFIG: CLKPOL (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_MSTEN_Pos              (9UL)                     /*!< SPI CONFIG: MSTEN (Bit 9)                             */
#define SPI_CONFIG_MSTEN_Msk              (0x200UL)                 /*!< SPI CONFIG: MSTEN (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_SPIEN_Pos              (8UL)                     /*!< SPI CONFIG: SPIEN (Bit 8)                             */
#define SPI_CONFIG_SPIEN_Msk              (0x100UL)                 /*!< SPI CONFIG: SPIEN (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_SREIEN_Pos             (7UL)                     /*!< SPI CONFIG: SREIEN (Bit 7)                            */
#define SPI_CONFIG_SREIEN_Msk             (0x80UL)                  /*!< SPI CONFIG: SREIEN (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_URIEN_Pos              (6UL)                     /*!< SPI CONFIG: URIEN (Bit 6)                             */
#define SPI_CONFIG_URIEN_Msk              (0x40UL)                  /*!< SPI CONFIG: URIEN (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_MDFIEN_Pos             (5UL)                     /*!< SPI CONFIG: MDFIEN (Bit 5)                            */
#define SPI_CONFIG_MDFIEN_Msk             (0x20UL)                  /*!< SPI CONFIG: MDFIEN (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_SLVSELIEN_Pos          (4UL)                     /*!< SPI CONFIG: SLVSELIEN (Bit 4)                         */
#define SPI_CONFIG_SLVSELIEN_Msk          (0x10UL)                  /*!< SPI CONFIG: SLVSELIEN (Bitfield-Mask: 0x01)           */
#define SPI_CONFIG_TFORIEN_Pos            (3UL)                     /*!< SPI CONFIG: TFORIEN (Bit 3)                           */
#define SPI_CONFIG_TFORIEN_Msk            (0x8UL)                   /*!< SPI CONFIG: TFORIEN (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_TFRQIEN_Pos            (2UL)                     /*!< SPI CONFIG: TFRQIEN (Bit 2)                           */
#define SPI_CONFIG_TFRQIEN_Msk            (0x4UL)                   /*!< SPI CONFIG: TFRQIEN (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_RFORIEN_Pos            (1UL)                     /*!< SPI CONFIG: RFORIEN (Bit 1)                           */
#define SPI_CONFIG_RFORIEN_Msk            (0x2UL)                   /*!< SPI CONFIG: RFORIEN (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_RFRQIEN_Pos            (0UL)                     /*!< SPI CONFIG: RFRQIEN (Bit 0)                           */
#define SPI_CONFIG_RFRQIEN_Msk            (0x1UL)                   /*!< SPI CONFIG: RFRQIEN (Bitfield-Mask: 0x01)             */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  CLKRATE  ======================================================== */
#define SPI_CLKRATE_CLKDIV_Pos            (0UL)                     /*!< SPI CLKRATE: CLKDIV (Bit 0)                           */
#define SPI_CLKRATE_CLKDIV_Msk            (0xffffUL)                /*!< SPI CLKRATE: CLKDIV (Bitfield-Mask: 0xffff)           */
/* ========================================================  FSTATUS  ======================================================== */
#define SPI_FSTATUS_TFWPTR_Pos            (12UL)                    /*!< SPI FSTATUS: TFWPTR (Bit 12)                          */
#define SPI_FSTATUS_TFWPTR_Msk            (0xf000UL)                /*!< SPI FSTATUS: TFWPTR (Bitfield-Mask: 0x0f)             */
#define SPI_FSTATUS_TFRPTR_Pos            (8UL)                     /*!< SPI FSTATUS: TFRPTR (Bit 8)                           */
#define SPI_FSTATUS_TFRPTR_Msk            (0xf00UL)                 /*!< SPI FSTATUS: TFRPTR (Bitfield-Mask: 0x0f)             */
#define SPI_FSTATUS_RFWPTR_Pos            (4UL)                     /*!< SPI FSTATUS: RFWPTR (Bit 4)                           */
#define SPI_FSTATUS_RFWPTR_Msk            (0xf0UL)                  /*!< SPI FSTATUS: RFWPTR (Bitfield-Mask: 0x0f)             */
#define SPI_FSTATUS_RFRPTR_Pos            (0UL)                     /*!< SPI FSTATUS: RFRPTR (Bit 0)                           */
#define SPI_FSTATUS_RFRPTR_Msk            (0xfUL)                   /*!< SPI FSTATUS: RFRPTR (Bitfield-Mask: 0x0f)             */


/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define I2C_CONTROL_I2CEN_Pos             (31UL)                    /*!< I2C CONTROL: I2CEN (Bit 31)                           */
#define I2C_CONTROL_I2CEN_Msk             (0x80000000UL)            /*!< I2C CONTROL: I2CEN (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_RESET_Pos             (30UL)                    /*!< I2C CONTROL: RESET (Bit 30)                           */
#define I2C_CONTROL_RESET_Msk             (0x40000000UL)            /*!< I2C CONTROL: RESET (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_GCEN_Pos              (29UL)                    /*!< I2C CONTROL: GCEN (Bit 29)                            */
#define I2C_CONTROL_GCEN_Msk              (0x20000000UL)            /*!< I2C CONTROL: GCEN (Bitfield-Mask: 0x01)               */
#define I2C_CONTROL_LBACKEN_Pos           (27UL)                    /*!< I2C CONTROL: LBACKEN (Bit 27)                         */
#define I2C_CONTROL_LBACKEN_Msk           (0x8000000UL)             /*!< I2C CONTROL: LBACKEN (Bitfield-Mask: 0x01)            */
#define I2C_CONTROL_HACKEN_Pos            (25UL)                    /*!< I2C CONTROL: HACKEN (Bit 25)                          */
#define I2C_CONTROL_HACKEN_Msk            (0x2000000UL)             /*!< I2C CONTROL: HACKEN (Bitfield-Mask: 0x01)             */
#define I2C_CONTROL_SMINH_Pos             (24UL)                    /*!< I2C CONTROL: SMINH (Bit 24)                           */
#define I2C_CONTROL_SMINH_Msk             (0x1000000UL)             /*!< I2C CONTROL: SMINH (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_DBGMD_Pos             (23UL)                    /*!< I2C CONTROL: DBGMD (Bit 23)                           */
#define I2C_CONTROL_DBGMD_Msk             (0x800000UL)              /*!< I2C CONTROL: DBGMD (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_FMD_Pos               (22UL)                    /*!< I2C CONTROL: FMD (Bit 22)                             */
#define I2C_CONTROL_FMD_Msk               (0x400000UL)              /*!< I2C CONTROL: FMD (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_ATXRXEN_Pos           (21UL)                    /*!< I2C CONTROL: ATXRXEN (Bit 21)                         */
#define I2C_CONTROL_ATXRXEN_Msk           (0x200000UL)              /*!< I2C CONTROL: ATXRXEN (Bitfield-Mask: 0x01)            */
#define I2C_CONTROL_SLVAF_Pos             (20UL)                    /*!< I2C CONTROL: SLVAF (Bit 20)                           */
#define I2C_CONTROL_SLVAF_Msk             (0x100000UL)              /*!< I2C CONTROL: SLVAF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_TXARM_Pos             (19UL)                    /*!< I2C CONTROL: TXARM (Bit 19)                           */
#define I2C_CONTROL_TXARM_Msk             (0x80000UL)               /*!< I2C CONTROL: TXARM (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_RXARM_Pos             (18UL)                    /*!< I2C CONTROL: RXARM (Bit 18)                           */
#define I2C_CONTROL_RXARM_Msk             (0x40000UL)               /*!< I2C CONTROL: RXARM (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_T3I_Pos               (17UL)                    /*!< I2C CONTROL: T3I (Bit 17)                             */
#define I2C_CONTROL_T3I_Msk               (0x20000UL)               /*!< I2C CONTROL: T3I (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_T2I_Pos               (16UL)                    /*!< I2C CONTROL: T2I (Bit 16)                             */
#define I2C_CONTROL_T2I_Msk               (0x10000UL)               /*!< I2C CONTROL: T2I (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_T1I_Pos               (15UL)                    /*!< I2C CONTROL: T1I (Bit 15)                             */
#define I2C_CONTROL_T1I_Msk               (0x8000UL)                /*!< I2C CONTROL: T1I (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_T0I_Pos               (14UL)                    /*!< I2C CONTROL: T0I (Bit 14)                             */
#define I2C_CONTROL_T0I_Msk               (0x4000UL)                /*!< I2C CONTROL: T0I (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_ARBLI_Pos             (13UL)                    /*!< I2C CONTROL: ARBLI (Bit 13)                           */
#define I2C_CONTROL_ARBLI_Msk             (0x2000UL)                /*!< I2C CONTROL: ARBLI (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_STAI_Pos              (12UL)                    /*!< I2C CONTROL: STAI (Bit 12)                            */
#define I2C_CONTROL_STAI_Msk              (0x1000UL)                /*!< I2C CONTROL: STAI (Bitfield-Mask: 0x01)               */
#define I2C_CONTROL_TXI_Pos               (11UL)                    /*!< I2C CONTROL: TXI (Bit 11)                             */
#define I2C_CONTROL_TXI_Msk               (0x800UL)                 /*!< I2C CONTROL: TXI (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_RXI_Pos               (10UL)                    /*!< I2C CONTROL: RXI (Bit 10)                             */
#define I2C_CONTROL_RXI_Msk               (0x400UL)                 /*!< I2C CONTROL: RXI (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_ACKI_Pos              (9UL)                     /*!< I2C CONTROL: ACKI (Bit 9)                             */
#define I2C_CONTROL_ACKI_Msk              (0x200UL)                 /*!< I2C CONTROL: ACKI (Bitfield-Mask: 0x01)               */
#define I2C_CONTROL_STOI_Pos              (8UL)                     /*!< I2C CONTROL: STOI (Bit 8)                             */
#define I2C_CONTROL_STOI_Msk              (0x100UL)                 /*!< I2C CONTROL: STOI (Bitfield-Mask: 0x01)               */
#define I2C_CONTROL_MSMDF_Pos             (7UL)                     /*!< I2C CONTROL: MSMDF (Bit 7)                            */
#define I2C_CONTROL_MSMDF_Msk             (0x80UL)                  /*!< I2C CONTROL: MSMDF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_TXMDF_Pos             (6UL)                     /*!< I2C CONTROL: TXMDF (Bit 6)                            */
#define I2C_CONTROL_TXMDF_Msk             (0x40UL)                  /*!< I2C CONTROL: TXMDF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_STA_Pos               (5UL)                     /*!< I2C CONTROL: STA (Bit 5)                              */
#define I2C_CONTROL_STA_Msk               (0x20UL)                  /*!< I2C CONTROL: STA (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_STO_Pos               (4UL)                     /*!< I2C CONTROL: STO (Bit 4)                              */
#define I2C_CONTROL_STO_Msk               (0x10UL)                  /*!< I2C CONTROL: STO (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_ACKRQF_Pos            (3UL)                     /*!< I2C CONTROL: ACKRQF (Bit 3)                           */
#define I2C_CONTROL_ACKRQF_Msk            (0x8UL)                   /*!< I2C CONTROL: ACKRQF (Bitfield-Mask: 0x01)             */
#define I2C_CONTROL_ARBLF_Pos             (2UL)                     /*!< I2C CONTROL: ARBLF (Bit 2)                            */
#define I2C_CONTROL_ARBLF_Msk             (0x4UL)                   /*!< I2C CONTROL: ARBLF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_ACK_Pos               (1UL)                     /*!< I2C CONTROL: ACK (Bit 1)                              */
#define I2C_CONTROL_ACK_Msk               (0x2UL)                   /*!< I2C CONTROL: ACK (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_BUSYF_Pos             (0UL)                     /*!< I2C CONTROL: BUSYF (Bit 0)                            */
#define I2C_CONTROL_BUSYF_Msk             (0x1UL)                   /*!< I2C CONTROL: BUSYF (Bitfield-Mask: 0x01)              */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  CONFIG  ========================================================= */
#define I2C_CONFIG_TIMEREN_Pos            (31UL)                    /*!< I2C CONFIG: TIMEREN (Bit 31)                          */
#define I2C_CONFIG_TIMEREN_Msk            (0x80000000UL)            /*!< I2C CONFIG: TIMEREN (Bitfield-Mask: 0x01)             */
#define I2C_CONFIG_TMD_Pos                (28UL)                    /*!< I2C CONFIG: TMD (Bit 28)                              */
#define I2C_CONFIG_TMD_Msk                (0x30000000UL)            /*!< I2C CONFIG: TMD (Bitfield-Mask: 0x03)                 */
#define I2C_CONFIG_T3RUN_Pos              (27UL)                    /*!< I2C CONFIG: T3RUN (Bit 27)                            */
#define I2C_CONFIG_T3RUN_Msk              (0x8000000UL)             /*!< I2C CONFIG: T3RUN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T2RUN_Pos              (26UL)                    /*!< I2C CONFIG: T2RUN (Bit 26)                            */
#define I2C_CONFIG_T2RUN_Msk              (0x4000000UL)             /*!< I2C CONFIG: T2RUN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T1RUN_Pos              (25UL)                    /*!< I2C CONFIG: T1RUN (Bit 25)                            */
#define I2C_CONFIG_T1RUN_Msk              (0x2000000UL)             /*!< I2C CONFIG: T1RUN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T0RUN_Pos              (24UL)                    /*!< I2C CONFIG: T0RUN (Bit 24)                            */
#define I2C_CONFIG_T0RUN_Msk              (0x1000000UL)             /*!< I2C CONFIG: T0RUN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_BP_Pos                 (22UL)                    /*!< I2C CONFIG: BP (Bit 22)                               */
#define I2C_CONFIG_BP_Msk                 (0xc00000UL)              /*!< I2C CONFIG: BP (Bitfield-Mask: 0x03)                  */
#define I2C_CONFIG_BC_Pos                 (20UL)                    /*!< I2C CONFIG: BC (Bit 20)                               */
#define I2C_CONFIG_BC_Msk                 (0x300000UL)              /*!< I2C CONFIG: BC (Bitfield-Mask: 0x03)                  */
#define I2C_CONFIG_T3IEN_Pos              (17UL)                    /*!< I2C CONFIG: T3IEN (Bit 17)                            */
#define I2C_CONFIG_T3IEN_Msk              (0x20000UL)               /*!< I2C CONFIG: T3IEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T2IEN_Pos              (16UL)                    /*!< I2C CONFIG: T2IEN (Bit 16)                            */
#define I2C_CONFIG_T2IEN_Msk              (0x10000UL)               /*!< I2C CONFIG: T2IEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T1IEN_Pos              (15UL)                    /*!< I2C CONFIG: T1IEN (Bit 15)                            */
#define I2C_CONFIG_T1IEN_Msk              (0x8000UL)                /*!< I2C CONFIG: T1IEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T0IEN_Pos              (14UL)                    /*!< I2C CONFIG: T0IEN (Bit 14)                            */
#define I2C_CONFIG_T0IEN_Msk              (0x4000UL)                /*!< I2C CONFIG: T0IEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_ARBLIEN_Pos            (13UL)                    /*!< I2C CONFIG: ARBLIEN (Bit 13)                          */
#define I2C_CONFIG_ARBLIEN_Msk            (0x2000UL)                /*!< I2C CONFIG: ARBLIEN (Bitfield-Mask: 0x01)             */
#define I2C_CONFIG_STAIEN_Pos             (12UL)                    /*!< I2C CONFIG: STAIEN (Bit 12)                           */
#define I2C_CONFIG_STAIEN_Msk             (0x1000UL)                /*!< I2C CONFIG: STAIEN (Bitfield-Mask: 0x01)              */
#define I2C_CONFIG_TXIEN_Pos              (11UL)                    /*!< I2C CONFIG: TXIEN (Bit 11)                            */
#define I2C_CONFIG_TXIEN_Msk              (0x800UL)                 /*!< I2C CONFIG: TXIEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_RXIEN_Pos              (10UL)                    /*!< I2C CONFIG: RXIEN (Bit 10)                            */
#define I2C_CONFIG_RXIEN_Msk              (0x400UL)                 /*!< I2C CONFIG: RXIEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_ACKIEN_Pos             (9UL)                     /*!< I2C CONFIG: ACKIEN (Bit 9)                            */
#define I2C_CONFIG_ACKIEN_Msk             (0x200UL)                 /*!< I2C CONFIG: ACKIEN (Bitfield-Mask: 0x01)              */
#define I2C_CONFIG_STOIEN_Pos             (8UL)                     /*!< I2C CONFIG: STOIEN (Bit 8)                            */
#define I2C_CONFIG_STOIEN_Msk             (0x100UL)                 /*!< I2C CONFIG: STOIEN (Bitfield-Mask: 0x01)              */
#define I2C_CONFIG_SCALER_Pos             (0UL)                     /*!< I2C CONFIG: SCALER (Bit 0)                            */
#define I2C_CONFIG_SCALER_Msk             (0x3fUL)                  /*!< I2C CONFIG: SCALER (Bitfield-Mask: 0x3f)              */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* =======================================================  SADDRESS  ======================================================== */
#define I2C_SADDRESS_ADDRESS_Pos          (1UL)                     /*!< I2C SADDRESS: ADDRESS (Bit 1)                         */
#define I2C_SADDRESS_ADDRESS_Msk          (0xfeUL)                  /*!< I2C SADDRESS: ADDRESS (Bitfield-Mask: 0x7f)           */
/* =========================================================  SMASK  ========================================================= */
#define I2C_SMASK_MASK_Pos                (1UL)                     /*!< I2C SMASK: MASK (Bit 1)                               */
#define I2C_SMASK_MASK_Msk                (0xfeUL)                  /*!< I2C SMASK: MASK (Bitfield-Mask: 0x7f)                 */
/* =========================================================  DATA  ========================================================== */
/* =========================================================  TIMER  ========================================================= */
#define I2C_TIMER_T3_Pos                  (24UL)                    /*!< I2C TIMER: T3 (Bit 24)                                */
#define I2C_TIMER_T3_Msk                  (0xff000000UL)            /*!< I2C TIMER: T3 (Bitfield-Mask: 0xff)                   */
#define I2C_TIMER_T2_Pos                  (16UL)                    /*!< I2C TIMER: T2 (Bit 16)                                */
#define I2C_TIMER_T2_Msk                  (0xff0000UL)              /*!< I2C TIMER: T2 (Bitfield-Mask: 0xff)                   */
#define I2C_TIMER_T1_Pos                  (8UL)                     /*!< I2C TIMER: T1 (Bit 8)                                 */
#define I2C_TIMER_T1_Msk                  (0xff00UL)                /*!< I2C TIMER: T1 (Bitfield-Mask: 0xff)                   */
#define I2C_TIMER_T0_Pos                  (0UL)                     /*!< I2C TIMER: T0 (Bit 0)                                 */
#define I2C_TIMER_T0_Msk                  (0xffUL)                  /*!< I2C TIMER: T0 (Bitfield-Mask: 0xff)                   */
/* ========================================================  TIMERRL  ======================================================== */
#define I2C_TIMERRL_T3RL_Pos              (24UL)                    /*!< I2C TIMERRL: T3RL (Bit 24)                            */
#define I2C_TIMERRL_T3RL_Msk              (0xff000000UL)            /*!< I2C TIMERRL: T3RL (Bitfield-Mask: 0xff)               */
#define I2C_TIMERRL_T2RL_Pos              (16UL)                    /*!< I2C TIMERRL: T2RL (Bit 16)                            */
#define I2C_TIMERRL_T2RL_Msk              (0xff0000UL)              /*!< I2C TIMERRL: T2RL (Bitfield-Mask: 0xff)               */
#define I2C_TIMERRL_T1RL_Pos              (8UL)                     /*!< I2C TIMERRL: T1RL (Bit 8)                             */
#define I2C_TIMERRL_T1RL_Msk              (0xff00UL)                /*!< I2C TIMERRL: T1RL (Bitfield-Mask: 0xff)               */
#define I2C_TIMERRL_T0RL_Pos              (0UL)                     /*!< I2C TIMERRL: T0RL (Bit 0)                             */
#define I2C_TIMERRL_T0RL_Msk              (0xffUL)                  /*!< I2C TIMERRL: T0RL (Bitfield-Mask: 0xff)               */
/* ========================================================  SCONFIG  ======================================================== */
#define I2C_SCONFIG_SCLLTIMER_Pos         (16UL)                    /*!< I2C SCONFIG: SCLLTIMER (Bit 16)                       */
#define I2C_SCONFIG_SCLLTIMER_Msk         (0xf0000UL)               /*!< I2C SCONFIG: SCLLTIMER (Bitfield-Mask: 0x0f)          */
#define I2C_SCONFIG_SCLL_Pos              (8UL)                     /*!< I2C SCONFIG: SCLL (Bit 8)                             */
#define I2C_SCONFIG_SCLL_Msk              (0xff00UL)                /*!< I2C SCONFIG: SCLL (Bitfield-Mask: 0xff)               */
#define I2C_SCONFIG_HOLD_Pos              (4UL)                     /*!< I2C SCONFIG: HOLD (Bit 4)                             */
#define I2C_SCONFIG_HOLD_Msk              (0xf0UL)                  /*!< I2C SCONFIG: HOLD (Bitfield-Mask: 0x0f)               */
#define I2C_SCONFIG_SETUP_Pos             (0UL)                     /*!< I2C SCONFIG: SETUP (Bit 0)                            */
#define I2C_SCONFIG_SETUP_Msk             (0xfUL)                   /*!< I2C SCONFIG: SETUP (Bitfield-Mask: 0x0f)              */
/* ========================================================  I2CDMA  ========================================================= */
#define I2C_I2CDMA_DMAEN_Pos              (31UL)                    /*!< I2C I2CDMA: DMAEN (Bit 31)                            */
#define I2C_I2CDMA_DMAEN_Msk              (0x80000000UL)            /*!< I2C I2CDMA: DMAEN (Bitfield-Mask: 0x01)               */
#define I2C_I2CDMA_DMALEN_Pos             (0UL)                     /*!< I2C I2CDMA: DMALEN (Bit 0)                            */
#define I2C_I2CDMA_DMALEN_Msk             (0xffUL)                  /*!< I2C I2CDMA: DMALEN (Bitfield-Mask: 0xff)              */


/* =========================================================================================================================== */
/* ================                                           EPCA                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  CH0_MODE  ======================================================== */
/* ======================================================  CH0_CONTROL  ====================================================== */
/* ====================================================  CH0_CONTROL_SET  ==================================================== */
/* ====================================================  CH0_CONTROL_CLR  ==================================================== */
/* =======================================================  CH0_CCAPV  ======================================================= */
/* =====================================================  CH0_CCAPVUPD  ====================================================== */
/* =======================================================  CH1_MODE  ======================================================== */
/* ======================================================  CH1_CONTROL  ====================================================== */
/* ====================================================  CH1_CONTROL_SET  ==================================================== */
/* ====================================================  CH1_CONTROL_CLR  ==================================================== */
/* =======================================================  CH1_CCAPV  ======================================================= */
/* =====================================================  CH1_CCAPVUPD  ====================================================== */
/* =======================================================  CH2_MODE  ======================================================== */
/* ======================================================  CH2_CONTROL  ====================================================== */
/* ====================================================  CH2_CONTROL_SET  ==================================================== */
/* ====================================================  CH2_CONTROL_CLR  ==================================================== */
/* =======================================================  CH2_CCAPV  ======================================================= */
/* =====================================================  CH2_CCAPVUPD  ====================================================== */
/* =======================================================  CH3_MODE  ======================================================== */
/* ======================================================  CH3_CONTROL  ====================================================== */
/* ====================================================  CH3_CONTROL_SET  ==================================================== */
/* ====================================================  CH3_CONTROL_CLR  ==================================================== */
/* =======================================================  CH3_CCAPV  ======================================================= */
/* =====================================================  CH3_CCAPVUPD  ====================================================== */
/* =======================================================  CH4_MODE  ======================================================== */
/* ======================================================  CH4_CONTROL  ====================================================== */
/* ====================================================  CH4_CONTROL_SET  ==================================================== */
/* ====================================================  CH4_CONTROL_CLR  ==================================================== */
/* =======================================================  CH4_CCAPV  ======================================================= */
/* =====================================================  CH4_CCAPVUPD  ====================================================== */
/* =======================================================  CH5_MODE  ======================================================== */
/* ======================================================  CH5_CONTROL  ====================================================== */
/* ====================================================  CH5_CONTROL_SET  ==================================================== */
/* ====================================================  CH5_CONTROL_CLR  ==================================================== */
/* =======================================================  CH5_CCAPV  ======================================================= */
/* =====================================================  CH5_CCAPVUPD  ====================================================== */
/* =========================================================  MODE  ========================================================== */
#define EPCA_MODE_STDOSEL_Pos             (27UL)                    /*!< EPCA MODE: STDOSEL (Bit 27)                           */
#define EPCA_MODE_STDOSEL_Msk             (0x18000000UL)            /*!< EPCA MODE: STDOSEL (Bitfield-Mask: 0x03)              */
#define EPCA_MODE_DBUSYF_Pos              (25UL)                    /*!< EPCA MODE: DBUSYF (Bit 25)                            */
#define EPCA_MODE_DBUSYF_Msk              (0x2000000UL)             /*!< EPCA MODE: DBUSYF (Bitfield-Mask: 0x01)               */
#define EPCA_MODE_DSTART_Pos              (22UL)                    /*!< EPCA MODE: DSTART (Bit 22)                            */
#define EPCA_MODE_DSTART_Msk              (0x1c00000UL)             /*!< EPCA MODE: DSTART (Bitfield-Mask: 0x07)               */
#define EPCA_MODE_DPTR_Pos                (19UL)                    /*!< EPCA MODE: DPTR (Bit 19)                              */
#define EPCA_MODE_DPTR_Msk                (0x380000UL)              /*!< EPCA MODE: DPTR (Bitfield-Mask: 0x07)                 */
#define EPCA_MODE_DEND_Pos                (16UL)                    /*!< EPCA MODE: DEND (Bit 16)                              */
#define EPCA_MODE_DEND_Msk                (0x70000UL)               /*!< EPCA MODE: DEND (Bitfield-Mask: 0x07)                 */
#define EPCA_MODE_HDOSEL_Pos              (14UL)                    /*!< EPCA MODE: HDOSEL (Bit 14)                            */
#define EPCA_MODE_HDOSEL_Msk              (0xc000UL)                /*!< EPCA MODE: HDOSEL (Bitfield-Mask: 0x03)               */
#define EPCA_MODE_CLKSEL_Pos              (10UL)                    /*!< EPCA MODE: CLKSEL (Bit 10)                            */
#define EPCA_MODE_CLKSEL_Msk              (0x1c00UL)                /*!< EPCA MODE: CLKSEL (Bitfield-Mask: 0x07)               */
#define EPCA_MODE_CLKDIV_Pos              (0UL)                     /*!< EPCA MODE: CLKDIV (Bit 0)                             */
#define EPCA_MODE_CLKDIV_Msk              (0x3ffUL)                 /*!< EPCA MODE: CLKDIV (Bitfield-Mask: 0x3ff)              */
/* ========================================================  CONTROL  ======================================================== */
#define EPCA_CONTROL_DIV_Pos              (22UL)                    /*!< EPCA CONTROL: DIV (Bit 22)                            */
#define EPCA_CONTROL_DIV_Msk              (0xffc00000UL)            /*!< EPCA CONTROL: DIV (Bitfield-Mask: 0x3ff)              */
#define EPCA_CONTROL_DIVST_Pos            (21UL)                    /*!< EPCA CONTROL: DIVST (Bit 21)                          */
#define EPCA_CONTROL_DIVST_Msk            (0x200000UL)              /*!< EPCA CONTROL: DIVST (Bitfield-Mask: 0x01)             */
#define EPCA_CONTROL_STEN_Pos             (14UL)                    /*!< EPCA CONTROL: STEN (Bit 14)                           */
#define EPCA_CONTROL_STEN_Msk             (0x4000UL)                /*!< EPCA CONTROL: STEN (Bitfield-Mask: 0x01)              */
#define EPCA_CONTROL_STESEL_Pos           (13UL)                    /*!< EPCA CONTROL: STESEL (Bit 13)                         */
#define EPCA_CONTROL_STESEL_Msk           (0x2000UL)                /*!< EPCA CONTROL: STESEL (Bitfield-Mask: 0x01)            */
#define EPCA_CONTROL_STSEL_Pos            (11UL)                    /*!< EPCA CONTROL: STSEL (Bit 11)                          */
#define EPCA_CONTROL_STSEL_Msk            (0x1800UL)                /*!< EPCA CONTROL: STSEL (Bitfield-Mask: 0x03)             */
#define EPCA_CONTROL_HALTEN_Pos           (9UL)                     /*!< EPCA CONTROL: HALTEN (Bit 9)                          */
#define EPCA_CONTROL_HALTEN_Msk           (0x200UL)                 /*!< EPCA CONTROL: HALTEN (Bitfield-Mask: 0x01)            */
#define EPCA_CONTROL_DBGMD_Pos            (6UL)                     /*!< EPCA CONTROL: DBGMD (Bit 6)                           */
#define EPCA_CONTROL_DBGMD_Msk            (0x40UL)                  /*!< EPCA CONTROL: DBGMD (Bitfield-Mask: 0x01)             */
#define EPCA_CONTROL_NOUPD_Pos            (4UL)                     /*!< EPCA CONTROL: NOUPD (Bit 4)                           */
#define EPCA_CONTROL_NOUPD_Msk            (0x10UL)                  /*!< EPCA CONTROL: NOUPD (Bitfield-Mask: 0x01)             */
#define EPCA_CONTROL_HALTIEN_Pos          (3UL)                     /*!< EPCA CONTROL: HALTIEN (Bit 3)                         */
#define EPCA_CONTROL_HALTIEN_Msk          (0x8UL)                   /*!< EPCA CONTROL: HALTIEN (Bitfield-Mask: 0x01)           */
#define EPCA_CONTROL_OVFSEN_Pos           (2UL)                     /*!< EPCA CONTROL: OVFSEN (Bit 2)                          */
#define EPCA_CONTROL_OVFSEN_Msk           (0x4UL)                   /*!< EPCA CONTROL: OVFSEN (Bitfield-Mask: 0x01)            */
#define EPCA_CONTROL_OVFDEN_Pos           (1UL)                     /*!< EPCA CONTROL: OVFDEN (Bit 1)                          */
#define EPCA_CONTROL_OVFDEN_Msk           (0x2UL)                   /*!< EPCA CONTROL: OVFDEN (Bitfield-Mask: 0x01)            */
#define EPCA_CONTROL_OVFIEN_Pos           (0UL)                     /*!< EPCA CONTROL: OVFIEN (Bit 0)                          */
#define EPCA_CONTROL_OVFIEN_Msk           (0x1UL)                   /*!< EPCA CONTROL: OVFIEN (Bitfield-Mask: 0x01)            */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  STATUS  ========================================================= */
#define EPCA_STATUS_C5IOVFI_Pos           (15UL)                    /*!< EPCA STATUS: C5IOVFI (Bit 15)                         */
#define EPCA_STATUS_C5IOVFI_Msk           (0x8000UL)                /*!< EPCA STATUS: C5IOVFI (Bitfield-Mask: 0x01)            */
#define EPCA_STATUS_C4IOVFI_Pos           (14UL)                    /*!< EPCA STATUS: C4IOVFI (Bit 14)                         */
#define EPCA_STATUS_C4IOVFI_Msk           (0x4000UL)                /*!< EPCA STATUS: C4IOVFI (Bitfield-Mask: 0x01)            */
#define EPCA_STATUS_C3IOVFI_Pos           (13UL)                    /*!< EPCA STATUS: C3IOVFI (Bit 13)                         */
#define EPCA_STATUS_C3IOVFI_Msk           (0x2000UL)                /*!< EPCA STATUS: C3IOVFI (Bitfield-Mask: 0x01)            */
#define EPCA_STATUS_C2IOVFI_Pos           (12UL)                    /*!< EPCA STATUS: C2IOVFI (Bit 12)                         */
#define EPCA_STATUS_C2IOVFI_Msk           (0x1000UL)                /*!< EPCA STATUS: C2IOVFI (Bitfield-Mask: 0x01)            */
#define EPCA_STATUS_C1IOVFI_Pos           (11UL)                    /*!< EPCA STATUS: C1IOVFI (Bit 11)                         */
#define EPCA_STATUS_C1IOVFI_Msk           (0x800UL)                 /*!< EPCA STATUS: C1IOVFI (Bitfield-Mask: 0x01)            */
#define EPCA_STATUS_C0IOVFI_Pos           (10UL)                    /*!< EPCA STATUS: C0IOVFI (Bit 10)                         */
#define EPCA_STATUS_C0IOVFI_Msk           (0x400UL)                 /*!< EPCA STATUS: C0IOVFI (Bitfield-Mask: 0x01)            */
#define EPCA_STATUS_HALTI_Pos             (9UL)                     /*!< EPCA STATUS: HALTI (Bit 9)                            */
#define EPCA_STATUS_HALTI_Msk             (0x200UL)                 /*!< EPCA STATUS: HALTI (Bitfield-Mask: 0x01)              */
#define EPCA_STATUS_UPDCF_Pos             (8UL)                     /*!< EPCA STATUS: UPDCF (Bit 8)                            */
#define EPCA_STATUS_UPDCF_Msk             (0x100UL)                 /*!< EPCA STATUS: UPDCF (Bitfield-Mask: 0x01)              */
#define EPCA_STATUS_OVFI_Pos              (7UL)                     /*!< EPCA STATUS: OVFI (Bit 7)                             */
#define EPCA_STATUS_OVFI_Msk              (0x80UL)                  /*!< EPCA STATUS: OVFI (Bitfield-Mask: 0x01)               */
#define EPCA_STATUS_RUN_Pos               (6UL)                     /*!< EPCA STATUS: RUN (Bit 6)                              */
#define EPCA_STATUS_RUN_Msk               (0x40UL)                  /*!< EPCA STATUS: RUN (Bitfield-Mask: 0x01)                */
#define EPCA_STATUS_C5CCI_Pos             (5UL)                     /*!< EPCA STATUS: C5CCI (Bit 5)                            */
#define EPCA_STATUS_C5CCI_Msk             (0x20UL)                  /*!< EPCA STATUS: C5CCI (Bitfield-Mask: 0x01)              */
#define EPCA_STATUS_C4CCI_Pos             (4UL)                     /*!< EPCA STATUS: C4CCI (Bit 4)                            */
#define EPCA_STATUS_C4CCI_Msk             (0x10UL)                  /*!< EPCA STATUS: C4CCI (Bitfield-Mask: 0x01)              */
#define EPCA_STATUS_C3CCI_Pos             (3UL)                     /*!< EPCA STATUS: C3CCI (Bit 3)                            */
#define EPCA_STATUS_C3CCI_Msk             (0x8UL)                   /*!< EPCA STATUS: C3CCI (Bitfield-Mask: 0x01)              */
#define EPCA_STATUS_C2CCI_Pos             (2UL)                     /*!< EPCA STATUS: C2CCI (Bit 2)                            */
#define EPCA_STATUS_C2CCI_Msk             (0x4UL)                   /*!< EPCA STATUS: C2CCI (Bitfield-Mask: 0x01)              */
#define EPCA_STATUS_C1CCI_Pos             (1UL)                     /*!< EPCA STATUS: C1CCI (Bit 1)                            */
#define EPCA_STATUS_C1CCI_Msk             (0x2UL)                   /*!< EPCA STATUS: C1CCI (Bitfield-Mask: 0x01)              */
#define EPCA_STATUS_C0CCI_Pos             (0UL)                     /*!< EPCA STATUS: C0CCI (Bit 0)                            */
#define EPCA_STATUS_C0CCI_Msk             (0x1UL)                   /*!< EPCA STATUS: C0CCI (Bitfield-Mask: 0x01)              */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ========================================================  COUNTER  ======================================================== */
#define EPCA_COUNTER_COUNTER_Pos          (0UL)                     /*!< EPCA COUNTER: COUNTER (Bit 0)                         */
#define EPCA_COUNTER_COUNTER_Msk          (0xffffUL)                /*!< EPCA COUNTER: COUNTER (Bitfield-Mask: 0xffff)         */
/* =========================================================  LIMIT  ========================================================= */
#define EPCA_LIMIT_LIMIT_Pos              (0UL)                     /*!< EPCA LIMIT: LIMIT (Bit 0)                             */
#define EPCA_LIMIT_LIMIT_Msk              (0xffffUL)                /*!< EPCA LIMIT: LIMIT (Bitfield-Mask: 0xffff)             */
/* =======================================================  LIMITUPD  ======================================================== */
#define EPCA_LIMITUPD_LIMITUPD_Pos        (0UL)                     /*!< EPCA LIMITUPD: LIMITUPD (Bit 0)                       */
#define EPCA_LIMITUPD_LIMITUPD_Msk        (0xffffUL)                /*!< EPCA LIMITUPD: LIMITUPD (Bitfield-Mask: 0xffff)       */
/* =========================================================  DTIME  ========================================================= */
#define EPCA_DTIME_DTIMEY_Pos             (8UL)                     /*!< EPCA DTIME: DTIMEY (Bit 8)                            */
#define EPCA_DTIME_DTIMEY_Msk             (0xff00UL)                /*!< EPCA DTIME: DTIMEY (Bitfield-Mask: 0xff)              */
#define EPCA_DTIME_DTIMEX_Pos             (0UL)                     /*!< EPCA DTIME: DTIMEX (Bit 0)                            */
#define EPCA_DTIME_DTIMEX_Msk             (0xffUL)                  /*!< EPCA DTIME: DTIMEX (Bitfield-Mask: 0xff)              */
/* ========================================================  DTARGET  ======================================================== */


/* =========================================================================================================================== */
/* ================                                            PCA                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  CH0_MODE  ======================================================== */
/* ======================================================  CH0_CONTROL  ====================================================== */
/* ====================================================  CH0_CONTROL_SET  ==================================================== */
/* ====================================================  CH0_CONTROL_CLR  ==================================================== */
/* =======================================================  CH0_CCAPV  ======================================================= */
/* =====================================================  CH0_CCAPVUPD  ====================================================== */
/* =======================================================  CH1_MODE  ======================================================== */
/* ======================================================  CH1_CONTROL  ====================================================== */
/* ====================================================  CH1_CONTROL_SET  ==================================================== */
/* ====================================================  CH1_CONTROL_CLR  ==================================================== */
/* =======================================================  CH1_CCAPV  ======================================================= */
/* =====================================================  CH1_CCAPVUPD  ====================================================== */
/* =========================================================  MODE  ========================================================== */
#define PCA_MODE_CLKSEL_Pos               (10UL)                    /*!< PCA MODE: CLKSEL (Bit 10)                             */
#define PCA_MODE_CLKSEL_Msk               (0x1c00UL)                /*!< PCA MODE: CLKSEL (Bitfield-Mask: 0x07)                */
#define PCA_MODE_CLKDIV_Pos               (0UL)                     /*!< PCA MODE: CLKDIV (Bit 0)                              */
#define PCA_MODE_CLKDIV_Msk               (0x3ffUL)                 /*!< PCA MODE: CLKDIV (Bitfield-Mask: 0x3ff)               */
/* ========================================================  CONTROL  ======================================================== */
#define PCA_CONTROL_DIV_Pos               (22UL)                    /*!< PCA CONTROL: DIV (Bit 22)                             */
#define PCA_CONTROL_DIV_Msk               (0xffc00000UL)            /*!< PCA CONTROL: DIV (Bitfield-Mask: 0x3ff)               */
#define PCA_CONTROL_DIVST_Pos             (21UL)                    /*!< PCA CONTROL: DIVST (Bit 21)                           */
#define PCA_CONTROL_DIVST_Msk             (0x200000UL)              /*!< PCA CONTROL: DIVST (Bitfield-Mask: 0x01)              */
#define PCA_CONTROL_DBGMD_Pos             (6UL)                     /*!< PCA CONTROL: DBGMD (Bit 6)                            */
#define PCA_CONTROL_DBGMD_Msk             (0x40UL)                  /*!< PCA CONTROL: DBGMD (Bitfield-Mask: 0x01)              */
#define PCA_CONTROL_OVFIEN_Pos            (0UL)                     /*!< PCA CONTROL: OVFIEN (Bit 0)                           */
#define PCA_CONTROL_OVFIEN_Msk            (0x1UL)                   /*!< PCA CONTROL: OVFIEN (Bitfield-Mask: 0x01)             */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  STATUS  ========================================================= */
#define PCA_STATUS_C1IOVFI_Pos            (11UL)                    /*!< PCA STATUS: C1IOVFI (Bit 11)                          */
#define PCA_STATUS_C1IOVFI_Msk            (0x800UL)                 /*!< PCA STATUS: C1IOVFI (Bitfield-Mask: 0x01)             */
#define PCA_STATUS_C0IOVFI_Pos            (10UL)                    /*!< PCA STATUS: C0IOVFI (Bit 10)                          */
#define PCA_STATUS_C0IOVFI_Msk            (0x400UL)                 /*!< PCA STATUS: C0IOVFI (Bitfield-Mask: 0x01)             */
#define PCA_STATUS_OVFI_Pos               (7UL)                     /*!< PCA STATUS: OVFI (Bit 7)                              */
#define PCA_STATUS_OVFI_Msk               (0x80UL)                  /*!< PCA STATUS: OVFI (Bitfield-Mask: 0x01)                */
#define PCA_STATUS_RUN_Pos                (6UL)                     /*!< PCA STATUS: RUN (Bit 6)                               */
#define PCA_STATUS_RUN_Msk                (0x40UL)                  /*!< PCA STATUS: RUN (Bitfield-Mask: 0x01)                 */
#define PCA_STATUS_C1CCI_Pos              (1UL)                     /*!< PCA STATUS: C1CCI (Bit 1)                             */
#define PCA_STATUS_C1CCI_Msk              (0x2UL)                   /*!< PCA STATUS: C1CCI (Bitfield-Mask: 0x01)               */
#define PCA_STATUS_C0CCI_Pos              (0UL)                     /*!< PCA STATUS: C0CCI (Bit 0)                             */
#define PCA_STATUS_C0CCI_Msk              (0x1UL)                   /*!< PCA STATUS: C0CCI (Bitfield-Mask: 0x01)               */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ========================================================  COUNTER  ======================================================== */
#define PCA_COUNTER_COUNTER_Pos           (0UL)                     /*!< PCA COUNTER: COUNTER (Bit 0)                          */
#define PCA_COUNTER_COUNTER_Msk           (0xffffUL)                /*!< PCA COUNTER: COUNTER (Bitfield-Mask: 0xffff)          */
/* =========================================================  LIMIT  ========================================================= */
#define PCA_LIMIT_LIMIT_Pos               (0UL)                     /*!< PCA LIMIT: LIMIT (Bit 0)                              */
#define PCA_LIMIT_LIMIT_Msk               (0xffffUL)                /*!< PCA LIMIT: LIMIT (Bitfield-Mask: 0xffff)              */


/* =========================================================================================================================== */
/* ================                                           TIMER                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define TIMER_CONFIG_HOVFI_Pos            (31UL)                    /*!< TIMER CONFIG: HOVFI (Bit 31)                          */
#define TIMER_CONFIG_HOVFI_Msk            (0x80000000UL)            /*!< TIMER CONFIG: HOVFI (Bitfield-Mask: 0x01)             */
#define TIMER_CONFIG_HEXI_Pos             (30UL)                    /*!< TIMER CONFIG: HEXI (Bit 30)                           */
#define TIMER_CONFIG_HEXI_Msk             (0x40000000UL)            /*!< TIMER CONFIG: HEXI (Bitfield-Mask: 0x01)              */
#define TIMER_CONFIG_HRUN_Pos             (29UL)                    /*!< TIMER CONFIG: HRUN (Bit 29)                           */
#define TIMER_CONFIG_HRUN_Msk             (0x20000000UL)            /*!< TIMER CONFIG: HRUN (Bitfield-Mask: 0x01)              */
#define TIMER_CONFIG_HSTATE_Pos           (28UL)                    /*!< TIMER CONFIG: HSTATE (Bit 28)                         */
#define TIMER_CONFIG_HSTATE_Msk           (0x10000000UL)            /*!< TIMER CONFIG: HSTATE (Bitfield-Mask: 0x01)            */
#define TIMER_CONFIG_HMD_Pos              (24UL)                    /*!< TIMER CONFIG: HMD (Bit 24)                            */
#define TIMER_CONFIG_HMD_Msk              (0xf000000UL)             /*!< TIMER CONFIG: HMD (Bitfield-Mask: 0x0f)               */
#define TIMER_CONFIG_HOVFIEN_Pos          (23UL)                    /*!< TIMER CONFIG: HOVFIEN (Bit 23)                        */
#define TIMER_CONFIG_HOVFIEN_Msk          (0x800000UL)              /*!< TIMER CONFIG: HOVFIEN (Bitfield-Mask: 0x01)           */
#define TIMER_CONFIG_HEXIEN_Pos           (22UL)                    /*!< TIMER CONFIG: HEXIEN (Bit 22)                         */
#define TIMER_CONFIG_HEXIEN_Msk           (0x400000UL)              /*!< TIMER CONFIG: HEXIEN (Bitfield-Mask: 0x01)            */
#define TIMER_CONFIG_DBGMD_Pos            (21UL)                    /*!< TIMER CONFIG: DBGMD (Bit 21)                          */
#define TIMER_CONFIG_DBGMD_Msk            (0x200000UL)              /*!< TIMER CONFIG: DBGMD (Bitfield-Mask: 0x01)             */
#define TIMER_CONFIG_HMSTREN_Pos          (20UL)                    /*!< TIMER CONFIG: HMSTREN (Bit 20)                        */
#define TIMER_CONFIG_HMSTREN_Msk          (0x100000UL)              /*!< TIMER CONFIG: HMSTREN (Bitfield-Mask: 0x01)           */
#define TIMER_CONFIG_MSTRUN_Pos           (19UL)                    /*!< TIMER CONFIG: MSTRUN (Bit 19)                         */
#define TIMER_CONFIG_MSTRUN_Msk           (0x80000UL)               /*!< TIMER CONFIG: MSTRUN (Bitfield-Mask: 0x01)            */
#define TIMER_CONFIG_HCLK_Pos             (16UL)                    /*!< TIMER CONFIG: HCLK (Bit 16)                           */
#define TIMER_CONFIG_HCLK_Msk             (0x30000UL)               /*!< TIMER CONFIG: HCLK (Bitfield-Mask: 0x03)              */
#define TIMER_CONFIG_LOVFI_Pos            (15UL)                    /*!< TIMER CONFIG: LOVFI (Bit 15)                          */
#define TIMER_CONFIG_LOVFI_Msk            (0x8000UL)                /*!< TIMER CONFIG: LOVFI (Bitfield-Mask: 0x01)             */
#define TIMER_CONFIG_LEXI_Pos             (14UL)                    /*!< TIMER CONFIG: LEXI (Bit 14)                           */
#define TIMER_CONFIG_LEXI_Msk             (0x4000UL)                /*!< TIMER CONFIG: LEXI (Bitfield-Mask: 0x01)              */
#define TIMER_CONFIG_LRUN_Pos             (13UL)                    /*!< TIMER CONFIG: LRUN (Bit 13)                           */
#define TIMER_CONFIG_LRUN_Msk             (0x2000UL)                /*!< TIMER CONFIG: LRUN (Bitfield-Mask: 0x01)              */
#define TIMER_CONFIG_LSTATE_Pos           (12UL)                    /*!< TIMER CONFIG: LSTATE (Bit 12)                         */
#define TIMER_CONFIG_LSTATE_Msk           (0x1000UL)                /*!< TIMER CONFIG: LSTATE (Bitfield-Mask: 0x01)            */
#define TIMER_CONFIG_LMD_Pos              (8UL)                     /*!< TIMER CONFIG: LMD (Bit 8)                             */
#define TIMER_CONFIG_LMD_Msk              (0x700UL)                 /*!< TIMER CONFIG: LMD (Bitfield-Mask: 0x07)               */
#define TIMER_CONFIG_LOVFIEN_Pos          (7UL)                     /*!< TIMER CONFIG: LOVFIEN (Bit 7)                         */
#define TIMER_CONFIG_LOVFIEN_Msk          (0x80UL)                  /*!< TIMER CONFIG: LOVFIEN (Bitfield-Mask: 0x01)           */
#define TIMER_CONFIG_LEXIEN_Pos           (6UL)                     /*!< TIMER CONFIG: LEXIEN (Bit 6)                          */
#define TIMER_CONFIG_LEXIEN_Msk           (0x40UL)                  /*!< TIMER CONFIG: LEXIEN (Bitfield-Mask: 0x01)            */
#define TIMER_CONFIG_SPLITEN_Pos          (5UL)                     /*!< TIMER CONFIG: SPLITEN (Bit 5)                         */
#define TIMER_CONFIG_SPLITEN_Msk          (0x20UL)                  /*!< TIMER CONFIG: SPLITEN (Bitfield-Mask: 0x01)           */
#define TIMER_CONFIG_LMSTREN_Pos          (4UL)                     /*!< TIMER CONFIG: LMSTREN (Bit 4)                         */
#define TIMER_CONFIG_LMSTREN_Msk          (0x10UL)                  /*!< TIMER CONFIG: LMSTREN (Bitfield-Mask: 0x01)           */
#define TIMER_CONFIG_LCLK_Pos             (0UL)                     /*!< TIMER CONFIG: LCLK (Bit 0)                            */
#define TIMER_CONFIG_LCLK_Msk             (0x3UL)                   /*!< TIMER CONFIG: LCLK (Bitfield-Mask: 0x03)              */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  CLKDIV  ========================================================= */
#define TIMER_CLKDIV_CLKDIVCT_Pos         (16UL)                    /*!< TIMER CLKDIV: CLKDIVCT (Bit 16)                       */
#define TIMER_CLKDIV_CLKDIVCT_Msk         (0xff0000UL)              /*!< TIMER CLKDIV: CLKDIVCT (Bitfield-Mask: 0xff)          */
#define TIMER_CLKDIV_CLKDIVRL_Pos         (0UL)                     /*!< TIMER CLKDIV: CLKDIVRL (Bit 0)                        */
#define TIMER_CLKDIV_CLKDIVRL_Msk         (0xffUL)                  /*!< TIMER CLKDIV: CLKDIVRL (Bitfield-Mask: 0xff)          */
/* =========================================================  COUNT  ========================================================= */
#define TIMER_COUNT_HCOUNT_Pos            (16UL)                    /*!< TIMER COUNT: HCOUNT (Bit 16)                          */
#define TIMER_COUNT_HCOUNT_Msk            (0xffff0000UL)            /*!< TIMER COUNT: HCOUNT (Bitfield-Mask: 0xffff)           */
#define TIMER_COUNT_LCOUNT_Pos            (0UL)                     /*!< TIMER COUNT: LCOUNT (Bit 0)                           */
#define TIMER_COUNT_LCOUNT_Msk            (0xffffUL)                /*!< TIMER COUNT: LCOUNT (Bitfield-Mask: 0xffff)           */
/* ========================================================  CAPTURE  ======================================================== */
#define TIMER_CAPTURE_HCCR_Pos            (16UL)                    /*!< TIMER CAPTURE: HCCR (Bit 16)                          */
#define TIMER_CAPTURE_HCCR_Msk            (0xffff0000UL)            /*!< TIMER CAPTURE: HCCR (Bitfield-Mask: 0xffff)           */
#define TIMER_CAPTURE_LCCR_Pos            (0UL)                     /*!< TIMER CAPTURE: LCCR (Bit 0)                           */
#define TIMER_CAPTURE_LCCR_Msk            (0xffffUL)                /*!< TIMER CAPTURE: LCCR (Bitfield-Mask: 0xffff)           */


/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  FADDR  ========================================================= */
#define USB_FADDR_FADDRUPD_Pos            (7UL)                     /*!< USB FADDR: FADDRUPD (Bit 7)                           */
#define USB_FADDR_FADDRUPD_Msk            (0x80UL)                  /*!< USB FADDR: FADDRUPD (Bitfield-Mask: 0x01)             */
#define USB_FADDR_FADDR_Pos               (0UL)                     /*!< USB FADDR: FADDR (Bit 0)                              */
#define USB_FADDR_FADDR_Msk               (0x7fUL)                  /*!< USB FADDR: FADDR (Bitfield-Mask: 0x7f)                */
/* =========================================================  POWER  ========================================================= */
#define USB_POWER_ISOUPDMD_Pos            (7UL)                     /*!< USB POWER: ISOUPDMD (Bit 7)                           */
#define USB_POWER_ISOUPDMD_Msk            (0x80UL)                  /*!< USB POWER: ISOUPDMD (Bitfield-Mask: 0x01)             */
#define USB_POWER_DITHEN_Pos              (5UL)                     /*!< USB POWER: DITHEN (Bit 5)                             */
#define USB_POWER_DITHEN_Msk              (0x20UL)                  /*!< USB POWER: DITHEN (Bitfield-Mask: 0x01)               */
#define USB_POWER_USBINH_Pos              (4UL)                     /*!< USB POWER: USBINH (Bit 4)                             */
#define USB_POWER_USBINH_Msk              (0x10UL)                  /*!< USB POWER: USBINH (Bitfield-Mask: 0x01)               */
#define USB_POWER_RSTDETF_Pos             (3UL)                     /*!< USB POWER: RSTDETF (Bit 3)                            */
#define USB_POWER_RSTDETF_Msk             (0x8UL)                   /*!< USB POWER: RSTDETF (Bitfield-Mask: 0x01)              */
#define USB_POWER_RESUME_Pos              (2UL)                     /*!< USB POWER: RESUME (Bit 2)                             */
#define USB_POWER_RESUME_Msk              (0x4UL)                   /*!< USB POWER: RESUME (Bitfield-Mask: 0x01)               */
#define USB_POWER_SUSMDF_Pos              (1UL)                     /*!< USB POWER: SUSMDF (Bit 1)                             */
#define USB_POWER_SUSMDF_Msk              (0x2UL)                   /*!< USB POWER: SUSMDF (Bitfield-Mask: 0x01)               */
#define USB_POWER_SUSDEN_Pos              (0UL)                     /*!< USB POWER: SUSDEN (Bit 0)                             */
#define USB_POWER_SUSDEN_Msk              (0x1UL)                   /*!< USB POWER: SUSDEN (Bitfield-Mask: 0x01)               */
/* =========================================================  IOINT  ========================================================= */
#define USB_IOINT_OUT4I_Pos               (20UL)                    /*!< USB IOINT: OUT4I (Bit 20)                             */
#define USB_IOINT_OUT4I_Msk               (0x100000UL)              /*!< USB IOINT: OUT4I (Bitfield-Mask: 0x01)                */
#define USB_IOINT_OUT3I_Pos               (19UL)                    /*!< USB IOINT: OUT3I (Bit 19)                             */
#define USB_IOINT_OUT3I_Msk               (0x80000UL)               /*!< USB IOINT: OUT3I (Bitfield-Mask: 0x01)                */
#define USB_IOINT_OUT2I_Pos               (18UL)                    /*!< USB IOINT: OUT2I (Bit 18)                             */
#define USB_IOINT_OUT2I_Msk               (0x40000UL)               /*!< USB IOINT: OUT2I (Bitfield-Mask: 0x01)                */
#define USB_IOINT_OUT1I_Pos               (17UL)                    /*!< USB IOINT: OUT1I (Bit 17)                             */
#define USB_IOINT_OUT1I_Msk               (0x20000UL)               /*!< USB IOINT: OUT1I (Bitfield-Mask: 0x01)                */
#define USB_IOINT_IN4I_Pos                (4UL)                     /*!< USB IOINT: IN4I (Bit 4)                               */
#define USB_IOINT_IN4I_Msk                (0x10UL)                  /*!< USB IOINT: IN4I (Bitfield-Mask: 0x01)                 */
#define USB_IOINT_IN3I_Pos                (3UL)                     /*!< USB IOINT: IN3I (Bit 3)                               */
#define USB_IOINT_IN3I_Msk                (0x8UL)                   /*!< USB IOINT: IN3I (Bitfield-Mask: 0x01)                 */
#define USB_IOINT_IN2I_Pos                (2UL)                     /*!< USB IOINT: IN2I (Bit 2)                               */
#define USB_IOINT_IN2I_Msk                (0x4UL)                   /*!< USB IOINT: IN2I (Bitfield-Mask: 0x01)                 */
#define USB_IOINT_IN1I_Pos                (1UL)                     /*!< USB IOINT: IN1I (Bit 1)                               */
#define USB_IOINT_IN1I_Msk                (0x2UL)                   /*!< USB IOINT: IN1I (Bitfield-Mask: 0x01)                 */
#define USB_IOINT_EP0I_Pos                (0UL)                     /*!< USB IOINT: EP0I (Bit 0)                               */
#define USB_IOINT_EP0I_Msk                (0x1UL)                   /*!< USB IOINT: EP0I (Bitfield-Mask: 0x01)                 */
/* =======================================================  IOINT_CLR  ======================================================= */
/* =========================================================  CMINT  ========================================================= */
#define USB_CMINT_SOFI_Pos                (3UL)                     /*!< USB CMINT: SOFI (Bit 3)                               */
#define USB_CMINT_SOFI_Msk                (0x8UL)                   /*!< USB CMINT: SOFI (Bitfield-Mask: 0x01)                 */
#define USB_CMINT_RSTI_Pos                (2UL)                     /*!< USB CMINT: RSTI (Bit 2)                               */
#define USB_CMINT_RSTI_Msk                (0x4UL)                   /*!< USB CMINT: RSTI (Bitfield-Mask: 0x01)                 */
#define USB_CMINT_RESI_Pos                (1UL)                     /*!< USB CMINT: RESI (Bit 1)                               */
#define USB_CMINT_RESI_Msk                (0x2UL)                   /*!< USB CMINT: RESI (Bitfield-Mask: 0x01)                 */
#define USB_CMINT_SUSI_Pos                (0UL)                     /*!< USB CMINT: SUSI (Bit 0)                               */
#define USB_CMINT_SUSI_Msk                (0x1UL)                   /*!< USB CMINT: SUSI (Bitfield-Mask: 0x01)                 */
/* =======================================================  CMINT_CLR  ======================================================= */
/* ========================================================  IOINTE  ========================================================= */
#define USB_IOINTE_OUT4IEN_Pos            (20UL)                    /*!< USB IOINTE: OUT4IEN (Bit 20)                          */
#define USB_IOINTE_OUT4IEN_Msk            (0x100000UL)              /*!< USB IOINTE: OUT4IEN (Bitfield-Mask: 0x01)             */
#define USB_IOINTE_OUT3IEN_Pos            (19UL)                    /*!< USB IOINTE: OUT3IEN (Bit 19)                          */
#define USB_IOINTE_OUT3IEN_Msk            (0x80000UL)               /*!< USB IOINTE: OUT3IEN (Bitfield-Mask: 0x01)             */
#define USB_IOINTE_OUT2IEN_Pos            (18UL)                    /*!< USB IOINTE: OUT2IEN (Bit 18)                          */
#define USB_IOINTE_OUT2IEN_Msk            (0x40000UL)               /*!< USB IOINTE: OUT2IEN (Bitfield-Mask: 0x01)             */
#define USB_IOINTE_OUT1IEN_Pos            (17UL)                    /*!< USB IOINTE: OUT1IEN (Bit 17)                          */
#define USB_IOINTE_OUT1IEN_Msk            (0x20000UL)               /*!< USB IOINTE: OUT1IEN (Bitfield-Mask: 0x01)             */
#define USB_IOINTE_IN4IEN_Pos             (4UL)                     /*!< USB IOINTE: IN4IEN (Bit 4)                            */
#define USB_IOINTE_IN4IEN_Msk             (0x10UL)                  /*!< USB IOINTE: IN4IEN (Bitfield-Mask: 0x01)              */
#define USB_IOINTE_IN3IEN_Pos             (3UL)                     /*!< USB IOINTE: IN3IEN (Bit 3)                            */
#define USB_IOINTE_IN3IEN_Msk             (0x8UL)                   /*!< USB IOINTE: IN3IEN (Bitfield-Mask: 0x01)              */
#define USB_IOINTE_IN2IEN_Pos             (2UL)                     /*!< USB IOINTE: IN2IEN (Bit 2)                            */
#define USB_IOINTE_IN2IEN_Msk             (0x4UL)                   /*!< USB IOINTE: IN2IEN (Bitfield-Mask: 0x01)              */
#define USB_IOINTE_IN1IEN_Pos             (1UL)                     /*!< USB IOINTE: IN1IEN (Bit 1)                            */
#define USB_IOINTE_IN1IEN_Msk             (0x2UL)                   /*!< USB IOINTE: IN1IEN (Bitfield-Mask: 0x01)              */
#define USB_IOINTE_EP0IEN_Pos             (0UL)                     /*!< USB IOINTE: EP0IEN (Bit 0)                            */
#define USB_IOINTE_EP0IEN_Msk             (0x1UL)                   /*!< USB IOINTE: EP0IEN (Bitfield-Mask: 0x01)              */
/* =======================================================  CMINTEPE  ======================================================== */
#define USB_CMINTEPE_EP4EN_Pos            (20UL)                    /*!< USB CMINTEPE: EP4EN (Bit 20)                          */
#define USB_CMINTEPE_EP4EN_Msk            (0x100000UL)              /*!< USB CMINTEPE: EP4EN (Bitfield-Mask: 0x01)             */
#define USB_CMINTEPE_EP3EN_Pos            (19UL)                    /*!< USB CMINTEPE: EP3EN (Bit 19)                          */
#define USB_CMINTEPE_EP3EN_Msk            (0x80000UL)               /*!< USB CMINTEPE: EP3EN (Bitfield-Mask: 0x01)             */
#define USB_CMINTEPE_EP2EN_Pos            (18UL)                    /*!< USB CMINTEPE: EP2EN (Bit 18)                          */
#define USB_CMINTEPE_EP2EN_Msk            (0x40000UL)               /*!< USB CMINTEPE: EP2EN (Bitfield-Mask: 0x01)             */
#define USB_CMINTEPE_EP1EN_Pos            (17UL)                    /*!< USB CMINTEPE: EP1EN (Bit 17)                          */
#define USB_CMINTEPE_EP1EN_Msk            (0x20000UL)               /*!< USB CMINTEPE: EP1EN (Bitfield-Mask: 0x01)             */
#define USB_CMINTEPE_EP0EN_Pos            (16UL)                    /*!< USB CMINTEPE: EP0EN (Bit 16)                          */
#define USB_CMINTEPE_EP0EN_Msk            (0x10000UL)               /*!< USB CMINTEPE: EP0EN (Bitfield-Mask: 0x01)             */
#define USB_CMINTEPE_SOFIEN_Pos           (3UL)                     /*!< USB CMINTEPE: SOFIEN (Bit 3)                          */
#define USB_CMINTEPE_SOFIEN_Msk           (0x8UL)                   /*!< USB CMINTEPE: SOFIEN (Bitfield-Mask: 0x01)            */
#define USB_CMINTEPE_RSTIEN_Pos           (2UL)                     /*!< USB CMINTEPE: RSTIEN (Bit 2)                          */
#define USB_CMINTEPE_RSTIEN_Msk           (0x4UL)                   /*!< USB CMINTEPE: RSTIEN (Bitfield-Mask: 0x01)            */
#define USB_CMINTEPE_RESIEN_Pos           (1UL)                     /*!< USB CMINTEPE: RESIEN (Bit 1)                          */
#define USB_CMINTEPE_RESIEN_Msk           (0x2UL)                   /*!< USB CMINTEPE: RESIEN (Bitfield-Mask: 0x01)            */
#define USB_CMINTEPE_SUSIEN_Pos           (0UL)                     /*!< USB CMINTEPE: SUSIEN (Bit 0)                          */
#define USB_CMINTEPE_SUSIEN_Msk           (0x1UL)                   /*!< USB CMINTEPE: SUSIEN (Bitfield-Mask: 0x01)            */
/* =======================================================  CRCONTROL  ======================================================= */
#define USB_CRCONTROL_CREN_Pos            (7UL)                     /*!< USB CRCONTROL: CREN (Bit 7)                           */
#define USB_CRCONTROL_CREN_Msk            (0x80UL)                  /*!< USB CRCONTROL: CREN (Bitfield-Mask: 0x01)             */
#define USB_CRCONTROL_CRSSEN_Pos          (6UL)                     /*!< USB CRCONTROL: CRSSEN (Bit 6)                         */
#define USB_CRCONTROL_CRSSEN_Msk          (0x40UL)                  /*!< USB CRCONTROL: CRSSEN (Bitfield-Mask: 0x01)           */
#define USB_CRCONTROL_LSCRMD_Pos          (5UL)                     /*!< USB CRCONTROL: LSCRMD (Bit 5)                         */
#define USB_CRCONTROL_LSCRMD_Msk          (0x20UL)                  /*!< USB CRCONTROL: LSCRMD (Bitfield-Mask: 0x01)           */
#define USB_CRCONTROL_OLEN_Pos            (4UL)                     /*!< USB CRCONTROL: OLEN (Bit 4)                           */
#define USB_CRCONTROL_OLEN_Msk            (0x10UL)                  /*!< USB CRCONTROL: OLEN (Bitfield-Mask: 0x01)             */
/* =========================================================  FRAME  ========================================================= */
#define USB_FRAME_FRAMENUM_Pos            (0UL)                     /*!< USB FRAME: FRAMENUM (Bit 0)                           */
#define USB_FRAME_FRAMENUM_Msk            (0x7ffUL)                 /*!< USB FRAME: FRAMENUM (Bitfield-Mask: 0x7ff)            */
/* =======================================================  TCONTROL  ======================================================== */
#define USB_TCONTROL_PUEN_Pos             (7UL)                     /*!< USB TCONTROL: PUEN (Bit 7)                            */
#define USB_TCONTROL_PUEN_Msk             (0x80UL)                  /*!< USB TCONTROL: PUEN (Bitfield-Mask: 0x01)              */
#define USB_TCONTROL_PHYEN_Pos            (6UL)                     /*!< USB TCONTROL: PHYEN (Bit 6)                           */
#define USB_TCONTROL_PHYEN_Msk            (0x40UL)                  /*!< USB TCONTROL: PHYEN (Bitfield-Mask: 0x01)             */
#define USB_TCONTROL_SSEL_Pos             (5UL)                     /*!< USB TCONTROL: SSEL (Bit 5)                            */
#define USB_TCONTROL_SSEL_Msk             (0x20UL)                  /*!< USB TCONTROL: SSEL (Bitfield-Mask: 0x01)              */
#define USB_TCONTROL_PHYTST_Pos           (3UL)                     /*!< USB TCONTROL: PHYTST (Bit 3)                          */
#define USB_TCONTROL_PHYTST_Msk           (0x18UL)                  /*!< USB TCONTROL: PHYTST (Bitfield-Mask: 0x03)            */
#define USB_TCONTROL_DFREC_Pos            (2UL)                     /*!< USB TCONTROL: DFREC (Bit 2)                           */
#define USB_TCONTROL_DFREC_Msk            (0x4UL)                   /*!< USB TCONTROL: DFREC (Bitfield-Mask: 0x01)             */
#define USB_TCONTROL_DP_Pos               (1UL)                     /*!< USB TCONTROL: DP (Bit 1)                              */
#define USB_TCONTROL_DP_Msk               (0x2UL)                   /*!< USB TCONTROL: DP (Bitfield-Mask: 0x01)                */
#define USB_TCONTROL_DN_Pos               (0UL)                     /*!< USB TCONTROL: DN (Bit 0)                              */
#define USB_TCONTROL_DN_Msk               (0x1UL)                   /*!< USB TCONTROL: DN (Bitfield-Mask: 0x01)                */
/* ========================================================  CLKSEL  ========================================================= */
#define USB_CLKSEL_RESET_Pos              (6UL)                     /*!< USB CLKSEL: RESET (Bit 6)                             */
#define USB_CLKSEL_RESET_Msk              (0x40UL)                  /*!< USB CLKSEL: RESET (Bitfield-Mask: 0x01)               */
#define USB_CLKSEL_CLKDIV_Pos             (4UL)                     /*!< USB CLKSEL: CLKDIV (Bit 4)                            */
#define USB_CLKSEL_CLKDIV_Msk             (0x30UL)                  /*!< USB CLKSEL: CLKDIV (Bitfield-Mask: 0x03)              */
#define USB_CLKSEL_CLKSEL_Pos             (0UL)                     /*!< USB CLKSEL: CLKSEL (Bit 0)                            */
#define USB_CLKSEL_CLKSEL_Msk             (0x3UL)                   /*!< USB CLKSEL: CLKSEL (Bitfield-Mask: 0x03)              */
/* ======================================================  OSCCONTROL  ======================================================= */
#define USB_OSCCONTROL_OSCEN_Pos          (7UL)                     /*!< USB OSCCONTROL: OSCEN (Bit 7)                         */
#define USB_OSCCONTROL_OSCEN_Msk          (0x80UL)                  /*!< USB OSCCONTROL: OSCEN (Bitfield-Mask: 0x01)           */
#define USB_OSCCONTROL_SUSPEND_Pos        (5UL)                     /*!< USB OSCCONTROL: SUSPEND (Bit 5)                       */
#define USB_OSCCONTROL_SUSPEND_Msk        (0x20UL)                  /*!< USB OSCCONTROL: SUSPEND (Bitfield-Mask: 0x01)         */
/* ====================================================  OSCCONTROL_SET  ===================================================== */
/* ====================================================  OSCCONTROL_CLR  ===================================================== */
/* =======================================================  AFADJUST  ======================================================== */
#define USB_AFADJUST_DITHEN_Pos           (6UL)                     /*!< USB AFADJUST: DITHEN (Bit 6)                          */
#define USB_AFADJUST_DITHEN_Msk           (0x40UL)                  /*!< USB AFADJUST: DITHEN (Bitfield-Mask: 0x01)            */
#define USB_AFADJUST_FINEFADJ_Pos         (0UL)                     /*!< USB AFADJUST: FINEFADJ (Bit 0)                        */
#define USB_AFADJUST_FINEFADJ_Msk         (0x3fUL)                  /*!< USB AFADJUST: FINEFADJ (Bitfield-Mask: 0x3f)          */
/* =====================================================  AFADJUST_SET  ====================================================== */
/* =====================================================  AFADJUST_CLR  ====================================================== */
/* ========================================================  FADJUST  ======================================================== */
#define USB_FADJUST_FADJ_Pos              (0UL)                     /*!< USB FADJUST: FADJ (Bit 0)                             */
#define USB_FADJUST_FADJ_Msk              (0x7fUL)                  /*!< USB FADJUST: FADJ (Bitfield-Mask: 0x7f)               */
/* ========================================================  DMAFIFO  ======================================================== */
/* ======================================================  DMACONTROL  ======================================================= */
#define USB_DMACONTROL_DFIFOFL_Pos        (7UL)                     /*!< USB DMACONTROL: DFIFOFL (Bit 7)                       */
#define USB_DMACONTROL_DFIFOFL_Msk        (0x80UL)                  /*!< USB DMACONTROL: DFIFOFL (Bitfield-Mask: 0x01)         */
#define USB_DMACONTROL_DBUSYF_Pos         (6UL)                     /*!< USB DMACONTROL: DBUSYF (Bit 6)                        */
#define USB_DMACONTROL_DBUSYF_Msk         (0x40UL)                  /*!< USB DMACONTROL: DBUSYF (Bitfield-Mask: 0x01)          */
#define USB_DMACONTROL_TERRF_Pos          (5UL)                     /*!< USB DMACONTROL: TERRF (Bit 5)                         */
#define USB_DMACONTROL_TERRF_Msk          (0x20UL)                  /*!< USB DMACONTROL: TERRF (Bitfield-Mask: 0x01)           */
#define USB_DMACONTROL_DBGMD_Pos          (4UL)                     /*!< USB DMACONTROL: DBGMD (Bit 4)                         */
#define USB_DMACONTROL_DBGMD_Msk          (0x10UL)                  /*!< USB DMACONTROL: DBGMD (Bitfield-Mask: 0x01)           */
/* ======================================================  EP0CONTROL  ======================================================= */
#define USB_EP0CONTROL_SUENDIS_Pos        (7UL)                     /*!< USB EP0CONTROL: SUENDIS (Bit 7)                       */
#define USB_EP0CONTROL_SUENDIS_Msk        (0x80UL)                  /*!< USB EP0CONTROL: SUENDIS (Bitfield-Mask: 0x01)         */
#define USB_EP0CONTROL_OPRDYIS_Pos        (6UL)                     /*!< USB EP0CONTROL: OPRDYIS (Bit 6)                       */
#define USB_EP0CONTROL_OPRDYIS_Msk        (0x40UL)                  /*!< USB EP0CONTROL: OPRDYIS (Bitfield-Mask: 0x01)         */
#define USB_EP0CONTROL_SDSTL_Pos          (5UL)                     /*!< USB EP0CONTROL: SDSTL (Bit 5)                         */
#define USB_EP0CONTROL_SDSTL_Msk          (0x20UL)                  /*!< USB EP0CONTROL: SDSTL (Bitfield-Mask: 0x01)           */
#define USB_EP0CONTROL_SUENDI_Pos         (4UL)                     /*!< USB EP0CONTROL: SUENDI (Bit 4)                        */
#define USB_EP0CONTROL_SUENDI_Msk         (0x10UL)                  /*!< USB EP0CONTROL: SUENDI (Bitfield-Mask: 0x01)          */
#define USB_EP0CONTROL_DEND_Pos           (3UL)                     /*!< USB EP0CONTROL: DEND (Bit 3)                          */
#define USB_EP0CONTROL_DEND_Msk           (0x8UL)                   /*!< USB EP0CONTROL: DEND (Bitfield-Mask: 0x01)            */
#define USB_EP0CONTROL_STSTLI_Pos         (2UL)                     /*!< USB EP0CONTROL: STSTLI (Bit 2)                        */
#define USB_EP0CONTROL_STSTLI_Msk         (0x4UL)                   /*!< USB EP0CONTROL: STSTLI (Bitfield-Mask: 0x01)          */
#define USB_EP0CONTROL_IPRDYI_Pos         (1UL)                     /*!< USB EP0CONTROL: IPRDYI (Bit 1)                        */
#define USB_EP0CONTROL_IPRDYI_Msk         (0x2UL)                   /*!< USB EP0CONTROL: IPRDYI (Bitfield-Mask: 0x01)          */
#define USB_EP0CONTROL_OPRDYI_Pos         (0UL)                     /*!< USB EP0CONTROL: OPRDYI (Bit 0)                        */
#define USB_EP0CONTROL_OPRDYI_Msk         (0x1UL)                   /*!< USB EP0CONTROL: OPRDYI (Bitfield-Mask: 0x01)          */
/* =======================================================  EP0COUNT  ======================================================== */
#define USB_EP0COUNT_COUNT_Pos            (0UL)                     /*!< USB EP0COUNT: COUNT (Bit 0)                           */
#define USB_EP0COUNT_COUNT_Msk            (0x7fUL)                  /*!< USB EP0COUNT: COUNT (Bitfield-Mask: 0x7f)             */
/* ========================================================  EP0FIFO  ======================================================== */
/* =====================================================  EP1_EPMPSIZE  ====================================================== */
/* =====================================================  EP1_EPCONTROL  ===================================================== */
/* ======================================================  EP1_EPCOUNT  ====================================================== */
/* ======================================================  EP1_EPFIFO  ======================================================= */
/* =====================================================  EP2_EPMPSIZE  ====================================================== */
/* =====================================================  EP2_EPCONTROL  ===================================================== */
/* ======================================================  EP2_EPCOUNT  ====================================================== */
/* ======================================================  EP2_EPFIFO  ======================================================= */
/* =====================================================  EP3_EPMPSIZE  ====================================================== */
/* =====================================================  EP3_EPCONTROL  ===================================================== */
/* ======================================================  EP3_EPCOUNT  ====================================================== */
/* ======================================================  EP3_EPFIFO  ======================================================= */
/* =====================================================  EP4_EPMPSIZE  ====================================================== */
/* =====================================================  EP4_EPCONTROL  ===================================================== */
/* ======================================================  EP4_EPCOUNT  ====================================================== */
/* ======================================================  EP4_EPFIFO  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          SARADC                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define SARADC_CONFIG_FURIEN_Pos          (30UL)                    /*!< SARADC CONFIG: FURIEN (Bit 30)                        */
#define SARADC_CONFIG_FURIEN_Msk          (0x40000000UL)            /*!< SARADC CONFIG: FURIEN (Bitfield-Mask: 0x01)           */
#define SARADC_CONFIG_FORIEN_Pos          (29UL)                    /*!< SARADC CONFIG: FORIEN (Bit 29)                        */
#define SARADC_CONFIG_FORIEN_Msk          (0x20000000UL)            /*!< SARADC CONFIG: FORIEN (Bitfield-Mask: 0x01)           */
#define SARADC_CONFIG_SDIEN_Pos           (28UL)                    /*!< SARADC CONFIG: SDIEN (Bit 28)                         */
#define SARADC_CONFIG_SDIEN_Msk           (0x10000000UL)            /*!< SARADC CONFIG: SDIEN (Bitfield-Mask: 0x01)            */
#define SARADC_CONFIG_SCCIEN_Pos          (27UL)                    /*!< SARADC CONFIG: SCCIEN (Bit 27)                        */
#define SARADC_CONFIG_SCCIEN_Msk          (0x8000000UL)             /*!< SARADC CONFIG: SCCIEN (Bitfield-Mask: 0x01)           */
#define SARADC_CONFIG_CLKDIV_Pos          (16UL)                    /*!< SARADC CONFIG: CLKDIV (Bit 16)                        */
#define SARADC_CONFIG_CLKDIV_Msk          (0x7ff0000UL)             /*!< SARADC CONFIG: CLKDIV (Bitfield-Mask: 0x7ff)          */
#define SARADC_CONFIG_BCLKSEL_Pos         (15UL)                    /*!< SARADC CONFIG: BCLKSEL (Bit 15)                       */
#define SARADC_CONFIG_BCLKSEL_Msk         (0x8000UL)                /*!< SARADC CONFIG: BCLKSEL (Bitfield-Mask: 0x01)          */
#define SARADC_CONFIG_DMAEN_Pos           (14UL)                    /*!< SARADC CONFIG: DMAEN (Bit 14)                         */
#define SARADC_CONFIG_DMAEN_Msk           (0x4000UL)                /*!< SARADC CONFIG: DMAEN (Bitfield-Mask: 0x01)            */
#define SARADC_CONFIG_SCANMD_Pos          (12UL)                    /*!< SARADC CONFIG: SCANMD (Bit 12)                        */
#define SARADC_CONFIG_SCANMD_Msk          (0x1000UL)                /*!< SARADC CONFIG: SCANMD (Bitfield-Mask: 0x01)           */
#define SARADC_CONFIG_SCANEN_Pos          (10UL)                    /*!< SARADC CONFIG: SCANEN (Bit 10)                        */
#define SARADC_CONFIG_SCANEN_Msk          (0x400UL)                 /*!< SARADC CONFIG: SCANEN (Bitfield-Mask: 0x01)           */
#define SARADC_CONFIG_INTLVEN_Pos         (9UL)                     /*!< SARADC CONFIG: INTLVEN (Bit 9)                        */
#define SARADC_CONFIG_INTLVEN_Msk         (0x200UL)                 /*!< SARADC CONFIG: INTLVEN (Bitfield-Mask: 0x01)          */
#define SARADC_CONFIG_SIMCEN_Pos          (8UL)                     /*!< SARADC CONFIG: SIMCEN (Bit 8)                         */
#define SARADC_CONFIG_SIMCEN_Msk          (0x100UL)                 /*!< SARADC CONFIG: SIMCEN (Bitfield-Mask: 0x01)           */
#define SARADC_CONFIG_PACKMD_Pos          (6UL)                     /*!< SARADC CONFIG: PACKMD (Bit 6)                         */
#define SARADC_CONFIG_PACKMD_Msk          (0xc0UL)                  /*!< SARADC CONFIG: PACKMD (Bitfield-Mask: 0x03)           */
#define SARADC_CONFIG_SSGEN_Pos           (5UL)                     /*!< SARADC CONFIG: SSGEN (Bit 5)                          */
#define SARADC_CONFIG_SSGEN_Msk           (0x20UL)                  /*!< SARADC CONFIG: SSGEN (Bitfield-Mask: 0x01)            */
#define SARADC_CONFIG_SPEN_Pos            (4UL)                     /*!< SARADC CONFIG: SPEN (Bit 4)                           */
#define SARADC_CONFIG_SPEN_Msk            (0x10UL)                  /*!< SARADC CONFIG: SPEN (Bitfield-Mask: 0x01)             */
#define SARADC_CONFIG_SPSEL_Pos           (0UL)                     /*!< SARADC CONFIG: SPSEL (Bit 0)                          */
#define SARADC_CONFIG_SPSEL_Msk           (0xfUL)                   /*!< SARADC CONFIG: SPSEL (Bitfield-Mask: 0x0f)            */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
#define SARADC_CONTROL_VREFSEL_Pos        (30UL)                    /*!< SARADC CONTROL: VREFSEL (Bit 30)                      */
#define SARADC_CONTROL_VREFSEL_Msk        (0xc0000000UL)            /*!< SARADC CONTROL: VREFSEL (Bitfield-Mask: 0x03)         */
#define SARADC_CONTROL_MREFLPEN_Pos       (27UL)                    /*!< SARADC CONTROL: MREFLPEN (Bit 27)                     */
#define SARADC_CONTROL_MREFLPEN_Msk       (0x8000000UL)             /*!< SARADC CONTROL: MREFLPEN (Bitfield-Mask: 0x01)        */
#define SARADC_CONTROL_LPMDEN_Pos         (26UL)                    /*!< SARADC CONTROL: LPMDEN (Bit 26)                       */
#define SARADC_CONTROL_LPMDEN_Msk         (0x4000000UL)             /*!< SARADC CONTROL: LPMDEN (Bitfield-Mask: 0x01)          */
#define SARADC_CONTROL_BIASSEL_Pos        (24UL)                    /*!< SARADC CONTROL: BIASSEL (Bit 24)                      */
#define SARADC_CONTROL_BIASSEL_Msk        (0x3000000UL)             /*!< SARADC CONTROL: BIASSEL (Bitfield-Mask: 0x03)         */
#define SARADC_CONTROL_ADBUSY_Pos         (23UL)                    /*!< SARADC CONTROL: ADBUSY (Bit 23)                       */
#define SARADC_CONTROL_ADBUSY_Msk         (0x800000UL)              /*!< SARADC CONTROL: ADBUSY (Bitfield-Mask: 0x01)          */
#define SARADC_CONTROL_TRKMD_Pos          (22UL)                    /*!< SARADC CONTROL: TRKMD (Bit 22)                        */
#define SARADC_CONTROL_TRKMD_Msk          (0x400000UL)              /*!< SARADC CONTROL: TRKMD (Bitfield-Mask: 0x01)           */
#define SARADC_CONTROL_ACCMD_Pos          (21UL)                    /*!< SARADC CONTROL: ACCMD (Bit 21)                        */
#define SARADC_CONTROL_ACCMD_Msk          (0x200000UL)              /*!< SARADC CONTROL: ACCMD (Bitfield-Mask: 0x01)           */
#define SARADC_CONTROL_VCMEN_Pos          (19UL)                    /*!< SARADC CONTROL: VCMEN (Bit 19)                        */
#define SARADC_CONTROL_VCMEN_Msk          (0x80000UL)               /*!< SARADC CONTROL: VCMEN (Bitfield-Mask: 0x01)           */
#define SARADC_CONTROL_AD12BSSEL_Pos      (18UL)                    /*!< SARADC CONTROL: AD12BSSEL (Bit 18)                    */
#define SARADC_CONTROL_AD12BSSEL_Msk      (0x40000UL)               /*!< SARADC CONTROL: AD12BSSEL (Bitfield-Mask: 0x01)       */
#define SARADC_CONTROL_ADCEN_Pos          (17UL)                    /*!< SARADC CONTROL: ADCEN (Bit 17)                        */
#define SARADC_CONTROL_ADCEN_Msk          (0x20000UL)               /*!< SARADC CONTROL: ADCEN (Bitfield-Mask: 0x01)           */
#define SARADC_CONTROL_BURSTEN_Pos        (16UL)                    /*!< SARADC CONTROL: BURSTEN (Bit 16)                      */
#define SARADC_CONTROL_BURSTEN_Msk        (0x10000UL)               /*!< SARADC CONTROL: BURSTEN (Bitfield-Mask: 0x01)         */
#define SARADC_CONTROL_PWRTIME_Pos        (12UL)                    /*!< SARADC CONTROL: PWRTIME (Bit 12)                      */
#define SARADC_CONTROL_PWRTIME_Msk        (0xf000UL)                /*!< SARADC CONTROL: PWRTIME (Bitfield-Mask: 0x0f)         */
#define SARADC_CONTROL_SCSEL_Pos          (8UL)                     /*!< SARADC CONTROL: SCSEL (Bit 8)                         */
#define SARADC_CONTROL_SCSEL_Msk          (0xf00UL)                 /*!< SARADC CONTROL: SCSEL (Bitfield-Mask: 0x0f)           */
#define SARADC_CONTROL_BMTK_Pos           (2UL)                     /*!< SARADC CONTROL: BMTK (Bit 2)                          */
#define SARADC_CONTROL_BMTK_Msk           (0xfcUL)                  /*!< SARADC CONTROL: BMTK (Bitfield-Mask: 0x3f)            */
#define SARADC_CONTROL_CLKESEL_Pos        (1UL)                     /*!< SARADC CONTROL: CLKESEL (Bit 1)                       */
#define SARADC_CONTROL_CLKESEL_Msk        (0x2UL)                   /*!< SARADC CONTROL: CLKESEL (Bitfield-Mask: 0x01)         */
#define SARADC_CONTROL_REFGNDSEL_Pos      (0UL)                     /*!< SARADC CONTROL: REFGNDSEL (Bit 0)                     */
#define SARADC_CONTROL_REFGNDSEL_Msk      (0x1UL)                   /*!< SARADC CONTROL: REFGNDSEL (Bitfield-Mask: 0x01)       */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  SQ7654  ========================================================= */
#define SARADC_SQ7654_TS7MUX_Pos          (26UL)                    /*!< SARADC SQ7654: TS7MUX (Bit 26)                        */
#define SARADC_SQ7654_TS7MUX_Msk          (0x7c000000UL)            /*!< SARADC SQ7654: TS7MUX (Bitfield-Mask: 0x1f)           */
#define SARADC_SQ7654_TS7CHR_Pos          (24UL)                    /*!< SARADC SQ7654: TS7CHR (Bit 24)                        */
#define SARADC_SQ7654_TS7CHR_Msk          (0x3000000UL)             /*!< SARADC SQ7654: TS7CHR (Bitfield-Mask: 0x03)           */
#define SARADC_SQ7654_TS6MUX_Pos          (18UL)                    /*!< SARADC SQ7654: TS6MUX (Bit 18)                        */
#define SARADC_SQ7654_TS6MUX_Msk          (0x7c0000UL)              /*!< SARADC SQ7654: TS6MUX (Bitfield-Mask: 0x1f)           */
#define SARADC_SQ7654_TS6CHR_Pos          (16UL)                    /*!< SARADC SQ7654: TS6CHR (Bit 16)                        */
#define SARADC_SQ7654_TS6CHR_Msk          (0x30000UL)               /*!< SARADC SQ7654: TS6CHR (Bitfield-Mask: 0x03)           */
#define SARADC_SQ7654_TS5MUX_Pos          (10UL)                    /*!< SARADC SQ7654: TS5MUX (Bit 10)                        */
#define SARADC_SQ7654_TS5MUX_Msk          (0x7c00UL)                /*!< SARADC SQ7654: TS5MUX (Bitfield-Mask: 0x1f)           */
#define SARADC_SQ7654_TS5CHR_Pos          (8UL)                     /*!< SARADC SQ7654: TS5CHR (Bit 8)                         */
#define SARADC_SQ7654_TS5CHR_Msk          (0x300UL)                 /*!< SARADC SQ7654: TS5CHR (Bitfield-Mask: 0x03)           */
#define SARADC_SQ7654_TS4MUX_Pos          (2UL)                     /*!< SARADC SQ7654: TS4MUX (Bit 2)                         */
#define SARADC_SQ7654_TS4MUX_Msk          (0x7cUL)                  /*!< SARADC SQ7654: TS4MUX (Bitfield-Mask: 0x1f)           */
#define SARADC_SQ7654_TS4CHR_Pos          (0UL)                     /*!< SARADC SQ7654: TS4CHR (Bit 0)                         */
#define SARADC_SQ7654_TS4CHR_Msk          (0x3UL)                   /*!< SARADC SQ7654: TS4CHR (Bitfield-Mask: 0x03)           */
/* ========================================================  SQ3210  ========================================================= */
#define SARADC_SQ3210_TS3MUX_Pos          (26UL)                    /*!< SARADC SQ3210: TS3MUX (Bit 26)                        */
#define SARADC_SQ3210_TS3MUX_Msk          (0x7c000000UL)            /*!< SARADC SQ3210: TS3MUX (Bitfield-Mask: 0x1f)           */
#define SARADC_SQ3210_TS3CHR_Pos          (24UL)                    /*!< SARADC SQ3210: TS3CHR (Bit 24)                        */
#define SARADC_SQ3210_TS3CHR_Msk          (0x3000000UL)             /*!< SARADC SQ3210: TS3CHR (Bitfield-Mask: 0x03)           */
#define SARADC_SQ3210_TS2MUX_Pos          (18UL)                    /*!< SARADC SQ3210: TS2MUX (Bit 18)                        */
#define SARADC_SQ3210_TS2MUX_Msk          (0x7c0000UL)              /*!< SARADC SQ3210: TS2MUX (Bitfield-Mask: 0x1f)           */
#define SARADC_SQ3210_TS2CHR_Pos          (16UL)                    /*!< SARADC SQ3210: TS2CHR (Bit 16)                        */
#define SARADC_SQ3210_TS2CHR_Msk          (0x30000UL)               /*!< SARADC SQ3210: TS2CHR (Bitfield-Mask: 0x03)           */
#define SARADC_SQ3210_TS1MUX_Pos          (10UL)                    /*!< SARADC SQ3210: TS1MUX (Bit 10)                        */
#define SARADC_SQ3210_TS1MUX_Msk          (0x7c00UL)                /*!< SARADC SQ3210: TS1MUX (Bitfield-Mask: 0x1f)           */
#define SARADC_SQ3210_TS1CHR_Pos          (8UL)                     /*!< SARADC SQ3210: TS1CHR (Bit 8)                         */
#define SARADC_SQ3210_TS1CHR_Msk          (0x300UL)                 /*!< SARADC SQ3210: TS1CHR (Bitfield-Mask: 0x03)           */
#define SARADC_SQ3210_TS0MUX_Pos          (2UL)                     /*!< SARADC SQ3210: TS0MUX (Bit 2)                         */
#define SARADC_SQ3210_TS0MUX_Msk          (0x7cUL)                  /*!< SARADC SQ3210: TS0MUX (Bitfield-Mask: 0x1f)           */
#define SARADC_SQ3210_TS0CHR_Pos          (0UL)                     /*!< SARADC SQ3210: TS0CHR (Bit 0)                         */
#define SARADC_SQ3210_TS0CHR_Msk          (0x3UL)                   /*!< SARADC SQ3210: TS0CHR (Bitfield-Mask: 0x03)           */
/* ========================================================  CHAR32  ========================================================= */
#define SARADC_CHAR32_CHR3WCIEN_Pos       (24UL)                    /*!< SARADC CHAR32: CHR3WCIEN (Bit 24)                     */
#define SARADC_CHAR32_CHR3WCIEN_Msk       (0x1000000UL)             /*!< SARADC CHAR32: CHR3WCIEN (Bitfield-Mask: 0x01)        */
#define SARADC_CHAR32_CHR3RSEL_Pos        (23UL)                    /*!< SARADC CHAR32: CHR3RSEL (Bit 23)                      */
#define SARADC_CHAR32_CHR3RSEL_Msk        (0x800000UL)              /*!< SARADC CHAR32: CHR3RSEL (Bitfield-Mask: 0x01)         */
#define SARADC_CHAR32_CHR3LS_Pos          (20UL)                    /*!< SARADC CHAR32: CHR3LS (Bit 20)                        */
#define SARADC_CHAR32_CHR3LS_Msk          (0x700000UL)              /*!< SARADC CHAR32: CHR3LS (Bitfield-Mask: 0x07)           */
#define SARADC_CHAR32_CHR3RPT_Pos         (17UL)                    /*!< SARADC CHAR32: CHR3RPT (Bit 17)                       */
#define SARADC_CHAR32_CHR3RPT_Msk         (0xe0000UL)               /*!< SARADC CHAR32: CHR3RPT (Bitfield-Mask: 0x07)          */
#define SARADC_CHAR32_CHR3GN_Pos          (16UL)                    /*!< SARADC CHAR32: CHR3GN (Bit 16)                        */
#define SARADC_CHAR32_CHR3GN_Msk          (0x10000UL)               /*!< SARADC CHAR32: CHR3GN (Bitfield-Mask: 0x01)           */
#define SARADC_CHAR32_CHR2WCIEN_Pos       (8UL)                     /*!< SARADC CHAR32: CHR2WCIEN (Bit 8)                      */
#define SARADC_CHAR32_CHR2WCIEN_Msk       (0x100UL)                 /*!< SARADC CHAR32: CHR2WCIEN (Bitfield-Mask: 0x01)        */
#define SARADC_CHAR32_CHR2RSEL_Pos        (7UL)                     /*!< SARADC CHAR32: CHR2RSEL (Bit 7)                       */
#define SARADC_CHAR32_CHR2RSEL_Msk        (0x80UL)                  /*!< SARADC CHAR32: CHR2RSEL (Bitfield-Mask: 0x01)         */
#define SARADC_CHAR32_CHR2LS_Pos          (4UL)                     /*!< SARADC CHAR32: CHR2LS (Bit 4)                         */
#define SARADC_CHAR32_CHR2LS_Msk          (0x70UL)                  /*!< SARADC CHAR32: CHR2LS (Bitfield-Mask: 0x07)           */
#define SARADC_CHAR32_CHR2RPT_Pos         (1UL)                     /*!< SARADC CHAR32: CHR2RPT (Bit 1)                        */
#define SARADC_CHAR32_CHR2RPT_Msk         (0xeUL)                   /*!< SARADC CHAR32: CHR2RPT (Bitfield-Mask: 0x07)          */
#define SARADC_CHAR32_CHR2GN_Pos          (0UL)                     /*!< SARADC CHAR32: CHR2GN (Bit 0)                         */
#define SARADC_CHAR32_CHR2GN_Msk          (0x1UL)                   /*!< SARADC CHAR32: CHR2GN (Bitfield-Mask: 0x01)           */
/* ======================================================  CHAR32_SET  ======================================================= */
/* ======================================================  CHAR32_CLR  ======================================================= */
/* ========================================================  CHAR10  ========================================================= */
#define SARADC_CHAR10_CHR1WCIEN_Pos       (24UL)                    /*!< SARADC CHAR10: CHR1WCIEN (Bit 24)                     */
#define SARADC_CHAR10_CHR1WCIEN_Msk       (0x1000000UL)             /*!< SARADC CHAR10: CHR1WCIEN (Bitfield-Mask: 0x01)        */
#define SARADC_CHAR10_CHR1RSEL_Pos        (23UL)                    /*!< SARADC CHAR10: CHR1RSEL (Bit 23)                      */
#define SARADC_CHAR10_CHR1RSEL_Msk        (0x800000UL)              /*!< SARADC CHAR10: CHR1RSEL (Bitfield-Mask: 0x01)         */
#define SARADC_CHAR10_CHR1LS_Pos          (20UL)                    /*!< SARADC CHAR10: CHR1LS (Bit 20)                        */
#define SARADC_CHAR10_CHR1LS_Msk          (0x700000UL)              /*!< SARADC CHAR10: CHR1LS (Bitfield-Mask: 0x07)           */
#define SARADC_CHAR10_CHR1RPT_Pos         (17UL)                    /*!< SARADC CHAR10: CHR1RPT (Bit 17)                       */
#define SARADC_CHAR10_CHR1RPT_Msk         (0xe0000UL)               /*!< SARADC CHAR10: CHR1RPT (Bitfield-Mask: 0x07)          */
#define SARADC_CHAR10_CHR1GN_Pos          (16UL)                    /*!< SARADC CHAR10: CHR1GN (Bit 16)                        */
#define SARADC_CHAR10_CHR1GN_Msk          (0x10000UL)               /*!< SARADC CHAR10: CHR1GN (Bitfield-Mask: 0x01)           */
#define SARADC_CHAR10_CHR0WCIEN_Pos       (8UL)                     /*!< SARADC CHAR10: CHR0WCIEN (Bit 8)                      */
#define SARADC_CHAR10_CHR0WCIEN_Msk       (0x100UL)                 /*!< SARADC CHAR10: CHR0WCIEN (Bitfield-Mask: 0x01)        */
#define SARADC_CHAR10_CHR0RSEL_Pos        (7UL)                     /*!< SARADC CHAR10: CHR0RSEL (Bit 7)                       */
#define SARADC_CHAR10_CHR0RSEL_Msk        (0x80UL)                  /*!< SARADC CHAR10: CHR0RSEL (Bitfield-Mask: 0x01)         */
#define SARADC_CHAR10_CHR0LS_Pos          (4UL)                     /*!< SARADC CHAR10: CHR0LS (Bit 4)                         */
#define SARADC_CHAR10_CHR0LS_Msk          (0x70UL)                  /*!< SARADC CHAR10: CHR0LS (Bitfield-Mask: 0x07)           */
#define SARADC_CHAR10_CHR0RPT_Pos         (1UL)                     /*!< SARADC CHAR10: CHR0RPT (Bit 1)                        */
#define SARADC_CHAR10_CHR0RPT_Msk         (0xeUL)                   /*!< SARADC CHAR10: CHR0RPT (Bitfield-Mask: 0x07)          */
#define SARADC_CHAR10_CHR0GN_Pos          (0UL)                     /*!< SARADC CHAR10: CHR0GN (Bit 0)                         */
#define SARADC_CHAR10_CHR0GN_Msk          (0x1UL)                   /*!< SARADC CHAR10: CHR0GN (Bitfield-Mask: 0x01)           */
/* ======================================================  CHAR10_SET  ======================================================= */
/* ======================================================  CHAR10_CLR  ======================================================= */
/* =========================================================  DATA  ========================================================== */
/* =======================================================  WCLIMITS  ======================================================== */
#define SARADC_WCLIMITS_WCGT_Pos          (16UL)                    /*!< SARADC WCLIMITS: WCGT (Bit 16)                        */
#define SARADC_WCLIMITS_WCGT_Msk          (0xffff0000UL)            /*!< SARADC WCLIMITS: WCGT (Bitfield-Mask: 0xffff)         */
#define SARADC_WCLIMITS_WCLT_Pos          (0UL)                     /*!< SARADC WCLIMITS: WCLT (Bit 0)                         */
#define SARADC_WCLIMITS_WCLT_Msk          (0xffffUL)                /*!< SARADC WCLIMITS: WCLT (Bitfield-Mask: 0xffff)         */
/* ==========================================================  ACC  ========================================================== */
#define SARADC_ACC_ACC_Pos                (0UL)                     /*!< SARADC ACC: ACC (Bit 0)                               */
#define SARADC_ACC_ACC_Msk                (0xffffUL)                /*!< SARADC ACC: ACC (Bitfield-Mask: 0xffff)               */
/* ========================================================  STATUS  ========================================================= */
#define SARADC_STATUS_FURI_Pos            (4UL)                     /*!< SARADC STATUS: FURI (Bit 4)                           */
#define SARADC_STATUS_FURI_Msk            (0x10UL)                  /*!< SARADC STATUS: FURI (Bitfield-Mask: 0x01)             */
#define SARADC_STATUS_FORI_Pos            (3UL)                     /*!< SARADC STATUS: FORI (Bit 3)                           */
#define SARADC_STATUS_FORI_Msk            (0x8UL)                   /*!< SARADC STATUS: FORI (Bitfield-Mask: 0x01)             */
#define SARADC_STATUS_SDI_Pos             (2UL)                     /*!< SARADC STATUS: SDI (Bit 2)                            */
#define SARADC_STATUS_SDI_Msk             (0x4UL)                   /*!< SARADC STATUS: SDI (Bitfield-Mask: 0x01)              */
#define SARADC_STATUS_SCCI_Pos            (1UL)                     /*!< SARADC STATUS: SCCI (Bit 1)                           */
#define SARADC_STATUS_SCCI_Msk            (0x2UL)                   /*!< SARADC STATUS: SCCI (Bitfield-Mask: 0x01)             */
#define SARADC_STATUS_WCI_Pos             (0UL)                     /*!< SARADC STATUS: WCI (Bit 0)                            */
#define SARADC_STATUS_WCI_Msk             (0x1UL)                   /*!< SARADC STATUS: WCI (Bitfield-Mask: 0x01)              */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ======================================================  FIFOSTATUS  ======================================================= */
#define SARADC_FIFOSTATUS_DRDYF_Pos       (5UL)                     /*!< SARADC FIFOSTATUS: DRDYF (Bit 5)                      */
#define SARADC_FIFOSTATUS_DRDYF_Msk       (0x20UL)                  /*!< SARADC FIFOSTATUS: DRDYF (Bitfield-Mask: 0x01)        */
#define SARADC_FIFOSTATUS_DPSTS_Pos       (4UL)                     /*!< SARADC FIFOSTATUS: DPSTS (Bit 4)                      */
#define SARADC_FIFOSTATUS_DPSTS_Msk       (0x10UL)                  /*!< SARADC FIFOSTATUS: DPSTS (Bitfield-Mask: 0x01)        */
#define SARADC_FIFOSTATUS_FIFOLVL_Pos     (0UL)                     /*!< SARADC FIFOSTATUS: FIFOLVL (Bit 0)                    */
#define SARADC_FIFOSTATUS_FIFOLVL_Msk     (0xfUL)                   /*!< SARADC FIFOSTATUS: FIFOLVL (Bitfield-Mask: 0x0f)      */


/* =========================================================================================================================== */
/* ================                                            SSG                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define SSG_CONFIG_PUGFREN_Pos            (14UL)                    /*!< SSG CONFIG: PUGFREN (Bit 14)                          */
#define SSG_CONFIG_PUGFREN_Msk            (0x4000UL)                /*!< SSG CONFIG: PUGFREN (Bitfield-Mask: 0x01)             */
#define SSG_CONFIG_PHGFREN_Pos            (13UL)                    /*!< SSG CONFIG: PHGFREN (Bit 13)                          */
#define SSG_CONFIG_PHGFREN_Msk            (0x2000UL)                /*!< SSG CONFIG: PHGFREN (Bitfield-Mask: 0x01)             */
#define SSG_CONFIG_SSEL_Pos               (12UL)                    /*!< SSG CONFIG: SSEL (Bit 12)                             */
#define SSG_CONFIG_SSEL_Msk               (0x1000UL)                /*!< SSG CONFIG: SSEL (Bitfield-Mask: 0x01)                */
#define SSG_CONFIG_COUNT_Pos              (0UL)                     /*!< SSG CONFIG: COUNT (Bit 0)                             */
#define SSG_CONFIG_COUNT_Msk              (0xfffUL)                 /*!< SSG CONFIG: COUNT (Bitfield-Mask: 0xfff)              */
/* ========================================================  CONTROL  ======================================================== */
#define SSG_CONTROL_STATUS_Pos            (8UL)                     /*!< SSG CONTROL: STATUS (Bit 8)                           */
#define SSG_CONTROL_STATUS_Msk            (0x100UL)                 /*!< SSG CONTROL: STATUS (Bitfield-Mask: 0x01)             */
#define SSG_CONTROL_EX3EN_Pos             (7UL)                     /*!< SSG CONTROL: EX3EN (Bit 7)                            */
#define SSG_CONTROL_EX3EN_Msk             (0x80UL)                  /*!< SSG CONTROL: EX3EN (Bitfield-Mask: 0x01)              */
#define SSG_CONTROL_EX2EN_Pos             (6UL)                     /*!< SSG CONTROL: EX2EN (Bit 6)                            */
#define SSG_CONTROL_EX2EN_Msk             (0x40UL)                  /*!< SSG CONTROL: EX2EN (Bitfield-Mask: 0x01)              */
#define SSG_CONTROL_EX1EN_Pos             (5UL)                     /*!< SSG CONTROL: EX1EN (Bit 5)                            */
#define SSG_CONTROL_EX1EN_Msk             (0x20UL)                  /*!< SSG CONTROL: EX1EN (Bitfield-Mask: 0x01)              */
#define SSG_CONTROL_EX0EN_Pos             (4UL)                     /*!< SSG CONTROL: EX0EN (Bit 4)                            */
#define SSG_CONTROL_EX0EN_Msk             (0x10UL)                  /*!< SSG CONTROL: EX0EN (Bitfield-Mask: 0x01)              */
#define SSG_CONTROL_EX3INVEN_Pos          (3UL)                     /*!< SSG CONTROL: EX3INVEN (Bit 3)                         */
#define SSG_CONTROL_EX3INVEN_Msk          (0x8UL)                   /*!< SSG CONTROL: EX3INVEN (Bitfield-Mask: 0x01)           */
#define SSG_CONTROL_EX2INVEN_Pos          (2UL)                     /*!< SSG CONTROL: EX2INVEN (Bit 2)                         */
#define SSG_CONTROL_EX2INVEN_Msk          (0x4UL)                   /*!< SSG CONTROL: EX2INVEN (Bitfield-Mask: 0x01)           */
#define SSG_CONTROL_EX1INVEN_Pos          (1UL)                     /*!< SSG CONTROL: EX1INVEN (Bit 1)                         */
#define SSG_CONTROL_EX1INVEN_Msk          (0x2UL)                   /*!< SSG CONTROL: EX1INVEN (Bitfield-Mask: 0x01)           */
#define SSG_CONTROL_EX0INVEN_Pos          (0UL)                     /*!< SSG CONTROL: EX0INVEN (Bit 0)                         */
#define SSG_CONTROL_EX0INVEN_Msk          (0x1UL)                   /*!< SSG CONTROL: EX0INVEN (Bitfield-Mask: 0x01)           */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                            CMP                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CMP_CONTROL_CMPEN_Pos             (31UL)                    /*!< CMP CONTROL: CMPEN (Bit 31)                           */
#define CMP_CONTROL_CMPEN_Msk             (0x80000000UL)            /*!< CMP CONTROL: CMPEN (Bitfield-Mask: 0x01)              */
#define CMP_CONTROL_CMPOUT_Pos            (30UL)                    /*!< CMP CONTROL: CMPOUT (Bit 30)                          */
#define CMP_CONTROL_CMPOUT_Msk            (0x40000000UL)            /*!< CMP CONTROL: CMPOUT (Bitfield-Mask: 0x01)             */
#define CMP_CONTROL_CMPRI_Pos             (14UL)                    /*!< CMP CONTROL: CMPRI (Bit 14)                           */
#define CMP_CONTROL_CMPRI_Msk             (0x4000UL)                /*!< CMP CONTROL: CMPRI (Bitfield-Mask: 0x01)              */
#define CMP_CONTROL_CMPFI_Pos             (13UL)                    /*!< CMP CONTROL: CMPFI (Bit 13)                           */
#define CMP_CONTROL_CMPFI_Msk             (0x2000UL)                /*!< CMP CONTROL: CMPFI (Bitfield-Mask: 0x01)              */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  MODE  ========================================================== */
#define CMP_MODE_INVEN_Pos                (30UL)                    /*!< CMP MODE: INVEN (Bit 30)                              */
#define CMP_MODE_INVEN_Msk                (0x40000000UL)            /*!< CMP MODE: INVEN (Bitfield-Mask: 0x01)                 */
#define CMP_MODE_CMPHYP_Pos               (26UL)                    /*!< CMP MODE: CMPHYP (Bit 26)                             */
#define CMP_MODE_CMPHYP_Msk               (0xc000000UL)             /*!< CMP MODE: CMPHYP (Bitfield-Mask: 0x03)                */
#define CMP_MODE_CMPHYN_Pos               (24UL)                    /*!< CMP MODE: CMPHYN (Bit 24)                             */
#define CMP_MODE_CMPHYN_Msk               (0x3000000UL)             /*!< CMP MODE: CMPHYN (Bitfield-Mask: 0x03)                */
#define CMP_MODE_PWPUEN_Pos               (23UL)                    /*!< CMP MODE: PWPUEN (Bit 23)                             */
#define CMP_MODE_PWPUEN_Msk               (0x800000UL)              /*!< CMP MODE: PWPUEN (Bitfield-Mask: 0x01)                */
#define CMP_MODE_NWPUEN_Pos               (22UL)                    /*!< CMP MODE: NWPUEN (Bit 22)                             */
#define CMP_MODE_NWPUEN_Msk               (0x400000UL)              /*!< CMP MODE: NWPUEN (Bitfield-Mask: 0x01)                */
#define CMP_MODE_DACLVL_Pos               (16UL)                    /*!< CMP MODE: DACLVL (Bit 16)                             */
#define CMP_MODE_DACLVL_Msk               (0x3f0000UL)              /*!< CMP MODE: DACLVL (Bitfield-Mask: 0x3f)                */
#define CMP_MODE_RIEN_Pos                 (14UL)                    /*!< CMP MODE: RIEN (Bit 14)                               */
#define CMP_MODE_RIEN_Msk                 (0x4000UL)                /*!< CMP MODE: RIEN (Bitfield-Mask: 0x01)                  */
#define CMP_MODE_FIEN_Pos                 (13UL)                    /*!< CMP MODE: FIEN (Bit 13)                               */
#define CMP_MODE_FIEN_Msk                 (0x2000UL)                /*!< CMP MODE: FIEN (Bitfield-Mask: 0x01)                  */
#define CMP_MODE_CMPMD_Pos                (10UL)                    /*!< CMP MODE: CMPMD (Bit 10)                              */
#define CMP_MODE_CMPMD_Msk                (0xc00UL)                 /*!< CMP MODE: CMPMD (Bitfield-Mask: 0x03)                 */
#define CMP_MODE_INMUX_Pos                (8UL)                     /*!< CMP MODE: INMUX (Bit 8)                               */
#define CMP_MODE_INMUX_Msk                (0x300UL)                 /*!< CMP MODE: INMUX (Bitfield-Mask: 0x03)                 */
#define CMP_MODE_PMUX_Pos                 (4UL)                     /*!< CMP MODE: PMUX (Bit 4)                                */
#define CMP_MODE_PMUX_Msk                 (0xf0UL)                  /*!< CMP MODE: PMUX (Bitfield-Mask: 0x0f)                  */
#define CMP_MODE_NMUX_Pos                 (0UL)                     /*!< CMP MODE: NMUX (Bit 0)                                */
#define CMP_MODE_NMUX_Msk                 (0xfUL)                   /*!< CMP MODE: NMUX (Bitfield-Mask: 0x0f)                  */
/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                         CAPSENSE                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CAPSENSE_CONTROL_EOSI_Pos         (26UL)                    /*!< CAPSENSE CONTROL: EOSI (Bit 26)                       */
#define CAPSENSE_CONTROL_EOSI_Msk         (0x4000000UL)             /*!< CAPSENSE CONTROL: EOSI (Bitfield-Mask: 0x01)          */
#define CAPSENSE_CONTROL_CDI_Pos          (25UL)                    /*!< CAPSENSE CONTROL: CDI (Bit 25)                        */
#define CAPSENSE_CONTROL_CDI_Msk          (0x2000000UL)             /*!< CAPSENSE CONTROL: CDI (Bitfield-Mask: 0x01)           */
#define CAPSENSE_CONTROL_CMPI_Pos         (24UL)                    /*!< CAPSENSE CONTROL: CMPI (Bit 24)                       */
#define CAPSENSE_CONTROL_CMPI_Msk         (0x1000000UL)             /*!< CAPSENSE CONTROL: CMPI (Bitfield-Mask: 0x01)          */
#define CAPSENSE_CONTROL_EOSIEN_Pos       (22UL)                    /*!< CAPSENSE CONTROL: EOSIEN (Bit 22)                     */
#define CAPSENSE_CONTROL_EOSIEN_Msk       (0x400000UL)              /*!< CAPSENSE CONTROL: EOSIEN (Bitfield-Mask: 0x01)        */
#define CAPSENSE_CONTROL_CDIEN_Pos        (21UL)                    /*!< CAPSENSE CONTROL: CDIEN (Bit 21)                      */
#define CAPSENSE_CONTROL_CDIEN_Msk        (0x200000UL)              /*!< CAPSENSE CONTROL: CDIEN (Bitfield-Mask: 0x01)         */
#define CAPSENSE_CONTROL_CMPEN_Pos        (20UL)                    /*!< CAPSENSE CONTROL: CMPEN (Bit 20)                      */
#define CAPSENSE_CONTROL_CMPEN_Msk        (0x100000UL)              /*!< CAPSENSE CONTROL: CMPEN (Bitfield-Mask: 0x01)         */
#define CAPSENSE_CONTROL_PMEF_Pos         (18UL)                    /*!< CAPSENSE CONTROL: PMEF (Bit 18)                       */
#define CAPSENSE_CONTROL_PMEF_Msk         (0x40000UL)               /*!< CAPSENSE CONTROL: PMEF (Bitfield-Mask: 0x01)          */
#define CAPSENSE_CONTROL_PMMD_Pos         (16UL)                    /*!< CAPSENSE CONTROL: PMMD (Bit 16)                       */
#define CAPSENSE_CONTROL_PMMD_Msk         (0x30000UL)               /*!< CAPSENSE CONTROL: PMMD (Bitfield-Mask: 0x03)          */
#define CAPSENSE_CONTROL_CSCM_Pos         (12UL)                    /*!< CAPSENSE CONTROL: CSCM (Bit 12)                       */
#define CAPSENSE_CONTROL_CSCM_Msk         (0xf000UL)                /*!< CAPSENSE CONTROL: CSCM (Bitfield-Mask: 0x0f)          */
#define CAPSENSE_CONTROL_MCEN_Pos         (11UL)                    /*!< CAPSENSE CONTROL: MCEN (Bit 11)                       */
#define CAPSENSE_CONTROL_MCEN_Msk         (0x800UL)                 /*!< CAPSENSE CONTROL: MCEN (Bitfield-Mask: 0x01)          */
#define CAPSENSE_CONTROL_ACCMD_Pos        (8UL)                     /*!< CAPSENSE CONTROL: ACCMD (Bit 8)                       */
#define CAPSENSE_CONTROL_ACCMD_Msk        (0x700UL)                 /*!< CAPSENSE CONTROL: ACCMD (Bitfield-Mask: 0x07)         */
#define CAPSENSE_CONTROL_CNVR_Pos         (6UL)                     /*!< CAPSENSE CONTROL: CNVR (Bit 6)                        */
#define CAPSENSE_CONTROL_CNVR_Msk         (0xc0UL)                  /*!< CAPSENSE CONTROL: CNVR (Bitfield-Mask: 0x03)          */
#define CAPSENSE_CONTROL_CMD_Pos          (4UL)                     /*!< CAPSENSE CONTROL: CMD (Bit 4)                         */
#define CAPSENSE_CONTROL_CMD_Msk          (0x30UL)                  /*!< CAPSENSE CONTROL: CMD (Bitfield-Mask: 0x03)           */
#define CAPSENSE_CONTROL_CMPPOL_Pos       (3UL)                     /*!< CAPSENSE CONTROL: CMPPOL (Bit 3)                      */
#define CAPSENSE_CONTROL_CMPPOL_Msk       (0x8UL)                   /*!< CAPSENSE CONTROL: CMPPOL (Bitfield-Mask: 0x01)        */
#define CAPSENSE_CONTROL_BIASEN_Pos       (2UL)                     /*!< CAPSENSE CONTROL: BIASEN (Bit 2)                      */
#define CAPSENSE_CONTROL_BIASEN_Msk       (0x4UL)                   /*!< CAPSENSE CONTROL: BIASEN (Bitfield-Mask: 0x01)        */
#define CAPSENSE_CONTROL_CSEN_Pos         (1UL)                     /*!< CAPSENSE CONTROL: CSEN (Bit 1)                        */
#define CAPSENSE_CONTROL_CSEN_Msk         (0x2UL)                   /*!< CAPSENSE CONTROL: CSEN (Bitfield-Mask: 0x01)          */
#define CAPSENSE_CONTROL_BUSYF_Pos        (0UL)                     /*!< CAPSENSE CONTROL: BUSYF (Bit 0)                       */
#define CAPSENSE_CONTROL_BUSYF_Msk        (0x1UL)                   /*!< CAPSENSE CONTROL: BUSYF (Bitfield-Mask: 0x01)         */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  MODE  ========================================================== */
#define CAPSENSE_MODE_DTSEL_Pos           (12UL)                    /*!< CAPSENSE MODE: DTSEL (Bit 12)                         */
#define CAPSENSE_MODE_DTSEL_Msk           (0x7000UL)                /*!< CAPSENSE MODE: DTSEL (Bitfield-Mask: 0x07)            */
#define CAPSENSE_MODE_IASEL_Pos           (8UL)                     /*!< CAPSENSE MODE: IASEL (Bit 8)                          */
#define CAPSENSE_MODE_IASEL_Msk           (0x700UL)                 /*!< CAPSENSE MODE: IASEL (Bitfield-Mask: 0x07)            */
#define CAPSENSE_MODE_RAMPSEL_Pos         (6UL)                     /*!< CAPSENSE MODE: RAMPSEL (Bit 6)                        */
#define CAPSENSE_MODE_RAMPSEL_Msk         (0xc0UL)                  /*!< CAPSENSE MODE: RAMPSEL (Bitfield-Mask: 0x03)          */
#define CAPSENSE_MODE_CGSEL_Pos           (0UL)                     /*!< CAPSENSE MODE: CGSEL (Bit 0)                          */
#define CAPSENSE_MODE_CGSEL_Msk           (0x7UL)                   /*!< CAPSENSE MODE: CGSEL (Bitfield-Mask: 0x07)            */
/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */
/* =========================================================  DATA  ========================================================== */
#define CAPSENSE_DATA_DATA_Pos            (0UL)                     /*!< CAPSENSE DATA: DATA (Bit 0)                           */
#define CAPSENSE_DATA_DATA_Msk            (0xffffUL)                /*!< CAPSENSE DATA: DATA (Bitfield-Mask: 0xffff)           */
/* =========================================================  SCAN  ========================================================== */
#define CAPSENSE_SCAN_SCANEN_Pos          (0UL)                     /*!< CAPSENSE SCAN: SCANEN (Bit 0)                         */
#define CAPSENSE_SCAN_SCANEN_Msk          (0xffffUL)                /*!< CAPSENSE SCAN: SCANEN (Bitfield-Mask: 0xffff)         */
/* =========================================================  CSTH  ========================================================== */
#define CAPSENSE_CSTH_CSTH_Pos            (0UL)                     /*!< CAPSENSE CSTH: CSTH (Bit 0)                           */
#define CAPSENSE_CSTH_CSTH_Msk            (0xffffUL)                /*!< CAPSENSE CSTH: CSTH (Bitfield-Mask: 0xffff)           */
/* ==========================================================  MUX  ========================================================== */
#define CAPSENSE_MUX_CSDISC_Pos           (7UL)                     /*!< CAPSENSE MUX: CSDISC (Bit 7)                          */
#define CAPSENSE_MUX_CSDISC_Msk           (0x80UL)                  /*!< CAPSENSE MUX: CSDISC (Bitfield-Mask: 0x01)            */
#define CAPSENSE_MUX_CSMX_Pos             (0UL)                     /*!< CAPSENSE MUX: CSMX (Bit 0)                            */
#define CAPSENSE_MUX_CSMX_Msk             (0xfUL)                   /*!< CAPSENSE MUX: CSMX (Bitfield-Mask: 0x0f)              */


/* =========================================================================================================================== */
/* ================                                           EMIF                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define EMIF_CONTROL_OFFSTEN_Pos          (4UL)                     /*!< EMIF CONTROL: OFFSTEN (Bit 4)                         */
#define EMIF_CONTROL_OFFSTEN_Msk          (0x10UL)                  /*!< EMIF CONTROL: OFFSTEN (Bitfield-Mask: 0x01)           */
#define EMIF_CONTROL_IF1EN_Pos            (1UL)                     /*!< EMIF CONTROL: IF1EN (Bit 1)                           */
#define EMIF_CONTROL_IF1EN_Msk            (0x2UL)                   /*!< EMIF CONTROL: IF1EN (Bitfield-Mask: 0x01)             */
#define EMIF_CONTROL_IF0EN_Pos            (0UL)                     /*!< EMIF CONTROL: IF0EN (Bit 0)                           */
#define EMIF_CONTROL_IF0EN_Msk            (0x1UL)                   /*!< EMIF CONTROL: IF0EN (Bitfield-Mask: 0x01)             */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  STATUS  ========================================================= */
#define EMIF_STATUS_IDLESTS_Pos           (1UL)                     /*!< EMIF STATUS: IDLESTS (Bit 1)                          */
#define EMIF_STATUS_IDLESTS_Msk           (0x2UL)                   /*!< EMIF STATUS: IDLESTS (Bitfield-Mask: 0x01)            */
#define EMIF_STATUS_OFFSTS_Pos            (0UL)                     /*!< EMIF STATUS: OFFSTS (Bit 0)                           */
#define EMIF_STATUS_OFFSTS_Msk            (0x1UL)                   /*!< EMIF STATUS: OFFSTS (Bitfield-Mask: 0x01)             */
/* ======================================================  IF0_CONFIG  ======================================================= */
/* ====================================================  IF0_CONFIG_SET  ===================================================== */
/* ====================================================  IF0_CONFIG_CLR  ===================================================== */
/* =======================================================  IF0_IFRT  ======================================================== */
/* =======================================================  IF0_IFWT  ======================================================== */
/* ======================================================  IF0_IFRCST  ======================================================= */
/* ======================================================  IF0_IFWCST  ======================================================= */
/* ======================================================  IF1_CONFIG  ======================================================= */
/* ====================================================  IF1_CONFIG_SET  ===================================================== */
/* ====================================================  IF1_CONFIG_CLR  ===================================================== */
/* =======================================================  IF1_IFRT  ======================================================== */
/* =======================================================  IF1_IFWT  ======================================================== */
/* ======================================================  IF1_IFRCST  ======================================================= */
/* ======================================================  IF1_IFWCST  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            AES                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define AES_CONTROL_RESET_Pos             (31UL)                    /*!< AES CONTROL: RESET (Bit 31)                           */
#define AES_CONTROL_RESET_Msk             (0x80000000UL)            /*!< AES CONTROL: RESET (Bitfield-Mask: 0x01)              */
#define AES_CONTROL_DBGMD_Pos             (30UL)                    /*!< AES CONTROL: DBGMD (Bit 30)                           */
#define AES_CONTROL_DBGMD_Msk             (0x40000000UL)            /*!< AES CONTROL: DBGMD (Bitfield-Mask: 0x01)              */
#define AES_CONTROL_OCIEN_Pos             (25UL)                    /*!< AES CONTROL: OCIEN (Bit 25)                           */
#define AES_CONTROL_OCIEN_Msk             (0x2000000UL)             /*!< AES CONTROL: OCIEN (Bitfield-Mask: 0x01)              */
#define AES_CONTROL_ERRIEN_Pos            (24UL)                    /*!< AES CONTROL: ERRIEN (Bit 24)                          */
#define AES_CONTROL_ERRIEN_Msk            (0x1000000UL)             /*!< AES CONTROL: ERRIEN (Bitfield-Mask: 0x01)             */
#define AES_CONTROL_KEYSIZE_Pos           (16UL)                    /*!< AES CONTROL: KEYSIZE (Bit 16)                         */
#define AES_CONTROL_KEYSIZE_Msk           (0x30000UL)               /*!< AES CONTROL: KEYSIZE (Bitfield-Mask: 0x03)            */
#define AES_CONTROL_HCBCEN_Pos            (13UL)                    /*!< AES CONTROL: HCBCEN (Bit 13)                          */
#define AES_CONTROL_HCBCEN_Msk            (0x2000UL)                /*!< AES CONTROL: HCBCEN (Bitfield-Mask: 0x01)             */
#define AES_CONTROL_HCTREN_Pos            (12UL)                    /*!< AES CONTROL: HCTREN (Bit 12)                          */
#define AES_CONTROL_HCTREN_Msk            (0x1000UL)                /*!< AES CONTROL: HCTREN (Bitfield-Mask: 0x01)             */
#define AES_CONTROL_XOREN_Pos             (10UL)                    /*!< AES CONTROL: XOREN (Bit 10)                           */
#define AES_CONTROL_XOREN_Msk             (0xc00UL)                 /*!< AES CONTROL: XOREN (Bitfield-Mask: 0x03)              */
#define AES_CONTROL_BEN_Pos               (9UL)                     /*!< AES CONTROL: BEN (Bit 9)                              */
#define AES_CONTROL_BEN_Msk               (0x200UL)                 /*!< AES CONTROL: BEN (Bitfield-Mask: 0x01)                */
#define AES_CONTROL_SWMDEN_Pos            (8UL)                     /*!< AES CONTROL: SWMDEN (Bit 8)                           */
#define AES_CONTROL_SWMDEN_Msk            (0x100UL)                 /*!< AES CONTROL: SWMDEN (Bitfield-Mask: 0x01)             */
#define AES_CONTROL_EDMD_Pos              (2UL)                     /*!< AES CONTROL: EDMD (Bit 2)                             */
#define AES_CONTROL_EDMD_Msk              (0x4UL)                   /*!< AES CONTROL: EDMD (Bitfield-Mask: 0x01)               */
#define AES_CONTROL_KEYCPEN_Pos           (1UL)                     /*!< AES CONTROL: KEYCPEN (Bit 1)                          */
#define AES_CONTROL_KEYCPEN_Msk           (0x2UL)                   /*!< AES CONTROL: KEYCPEN (Bitfield-Mask: 0x01)            */
#define AES_CONTROL_XFRSTA_Pos            (0UL)                     /*!< AES CONTROL: XFRSTA (Bit 0)                           */
#define AES_CONTROL_XFRSTA_Msk            (0x1UL)                   /*!< AES CONTROL: XFRSTA (Bitfield-Mask: 0x01)             */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  XFRSIZE  ======================================================== */
#define AES_XFRSIZE_XFRSIZE_Pos           (0UL)                     /*!< AES XFRSIZE: XFRSIZE (Bit 0)                          */
#define AES_XFRSIZE_XFRSIZE_Msk           (0x7ffUL)                 /*!< AES XFRSIZE: XFRSIZE (Bitfield-Mask: 0x7ff)           */
/* =======================================================  DATAFIFO  ======================================================== */
/* ========================================================  XORFIFO  ======================================================== */
/* ========================================================  HWKEY0  ========================================================= */
/* ========================================================  HWKEY1  ========================================================= */
/* ========================================================  HWKEY2  ========================================================= */
/* ========================================================  HWKEY3  ========================================================= */
/* ========================================================  HWKEY4  ========================================================= */
/* ========================================================  HWKEY5  ========================================================= */
/* ========================================================  HWKEY6  ========================================================= */
/* ========================================================  HWKEY7  ========================================================= */
/* ========================================================  HWCTR0  ========================================================= */
/* ========================================================  HWCTR1  ========================================================= */
/* ========================================================  HWCTR2  ========================================================= */
/* ========================================================  HWCTR3  ========================================================= */
/* ========================================================  STATUS  ========================================================= */
#define AES_STATUS_OCI_Pos                (31UL)                    /*!< AES STATUS: OCI (Bit 31)                              */
#define AES_STATUS_OCI_Msk                (0x80000000UL)            /*!< AES STATUS: OCI (Bitfield-Mask: 0x01)                 */
#define AES_STATUS_ERRI_Pos               (30UL)                    /*!< AES STATUS: ERRI (Bit 30)                             */
#define AES_STATUS_ERRI_Msk               (0x40000000UL)            /*!< AES STATUS: ERRI (Bitfield-Mask: 0x01)                */
#define AES_STATUS_BUSYF_Pos              (16UL)                    /*!< AES STATUS: BUSYF (Bit 16)                            */
#define AES_STATUS_BUSYF_Msk              (0x10000UL)               /*!< AES STATUS: BUSYF (Bitfield-Mask: 0x01)               */
#define AES_STATUS_XFIFOLVL_Pos           (8UL)                     /*!< AES STATUS: XFIFOLVL (Bit 8)                          */
#define AES_STATUS_XFIFOLVL_Msk           (0x700UL)                 /*!< AES STATUS: XFIFOLVL (Bitfield-Mask: 0x07)            */
#define AES_STATUS_DFIFOLVL_Pos           (4UL)                     /*!< AES STATUS: DFIFOLVL (Bit 4)                          */
#define AES_STATUS_DFIFOLVL_Msk           (0x70UL)                  /*!< AES STATUS: DFIFOLVL (Bitfield-Mask: 0x07)            */
#define AES_STATUS_XORF_Pos               (2UL)                     /*!< AES STATUS: XORF (Bit 2)                              */
#define AES_STATUS_XORF_Msk               (0x4UL)                   /*!< AES STATUS: XORF (Bitfield-Mask: 0x01)                */
#define AES_STATUS_DORF_Pos               (1UL)                     /*!< AES STATUS: DORF (Bit 1)                              */
#define AES_STATUS_DORF_Msk               (0x2UL)                   /*!< AES STATUS: DORF (Bitfield-Mask: 0x01)                */
#define AES_STATUS_DURF_Pos               (0UL)                     /*!< AES STATUS: DURF (Bit 0)                              */
#define AES_STATUS_DURF_Msk               (0x1UL)                   /*!< AES STATUS: DURF (Bitfield-Mask: 0x01)                */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CRC_CONTROL_ORDER_Pos             (10UL)                    /*!< CRC CONTROL: ORDER (Bit 10)                           */
#define CRC_CONTROL_ORDER_Msk             (0xc00UL)                 /*!< CRC CONTROL: ORDER (Bitfield-Mask: 0x03)              */
#define CRC_CONTROL_BBREN_Pos             (9UL)                     /*!< CRC CONTROL: BBREN (Bit 9)                            */
#define CRC_CONTROL_BBREN_Msk             (0x200UL)                 /*!< CRC CONTROL: BBREN (Bitfield-Mask: 0x01)              */
#define CRC_CONTROL_BMDEN_Pos             (8UL)                     /*!< CRC CONTROL: BMDEN (Bit 8)                            */
#define CRC_CONTROL_BMDEN_Msk             (0x100UL)                 /*!< CRC CONTROL: BMDEN (Bitfield-Mask: 0x01)              */
#define CRC_CONTROL_POLYSEL_Pos           (4UL)                     /*!< CRC CONTROL: POLYSEL (Bit 4)                          */
#define CRC_CONTROL_POLYSEL_Msk           (0x30UL)                  /*!< CRC CONTROL: POLYSEL (Bitfield-Mask: 0x03)            */
#define CRC_CONTROL_CRCEN_Pos             (2UL)                     /*!< CRC CONTROL: CRCEN (Bit 2)                            */
#define CRC_CONTROL_CRCEN_Msk             (0x4UL)                   /*!< CRC CONTROL: CRCEN (Bitfield-Mask: 0x01)              */
#define CRC_CONTROL_SEED_Pos              (1UL)                     /*!< CRC CONTROL: SEED (Bit 1)                             */
#define CRC_CONTROL_SEED_Msk              (0x2UL)                   /*!< CRC CONTROL: SEED (Bitfield-Mask: 0x01)               */
#define CRC_CONTROL_SINITEN_Pos           (0UL)                     /*!< CRC CONTROL: SINITEN (Bit 0)                          */
#define CRC_CONTROL_SINITEN_Msk           (0x1UL)                   /*!< CRC CONTROL: SINITEN (Bitfield-Mask: 0x01)            */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  DATA  ========================================================== */
/* =========================================================  RDATA  ========================================================= */


/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define RTC_CONFIG_RTCEN_Pos              (31UL)                    /*!< RTC CONFIG: RTCEN (Bit 31)                            */
#define RTC_CONFIG_RTCEN_Msk              (0x80000000UL)            /*!< RTC CONFIG: RTCEN (Bitfield-Mask: 0x01)               */
#define RTC_CONFIG_CLKSEL_Pos             (30UL)                    /*!< RTC CONFIG: CLKSEL (Bit 30)                           */
#define RTC_CONFIG_CLKSEL_Msk             (0x40000000UL)            /*!< RTC CONFIG: CLKSEL (Bitfield-Mask: 0x01)              */
#define RTC_CONFIG_RTCOEN_Pos             (29UL)                    /*!< RTC CONFIG: RTCOEN (Bit 29)                           */
#define RTC_CONFIG_RTCOEN_Msk             (0x20000000UL)            /*!< RTC CONFIG: RTCOEN (Bitfield-Mask: 0x01)              */
#define RTC_CONFIG_ALM2EN_Pos             (26UL)                    /*!< RTC CONFIG: ALM2EN (Bit 26)                           */
#define RTC_CONFIG_ALM2EN_Msk             (0x4000000UL)             /*!< RTC CONFIG: ALM2EN (Bitfield-Mask: 0x01)              */
#define RTC_CONFIG_ALM1EN_Pos             (25UL)                    /*!< RTC CONFIG: ALM1EN (Bit 25)                           */
#define RTC_CONFIG_ALM1EN_Msk             (0x2000000UL)             /*!< RTC CONFIG: ALM1EN (Bitfield-Mask: 0x01)              */
#define RTC_CONFIG_ALM0EN_Pos             (24UL)                    /*!< RTC CONFIG: ALM0EN (Bit 24)                           */
#define RTC_CONFIG_ALM0EN_Msk             (0x1000000UL)             /*!< RTC CONFIG: ALM0EN (Bitfield-Mask: 0x01)              */
#define RTC_CONFIG_AGCEN_Pos              (18UL)                    /*!< RTC CONFIG: AGCEN (Bit 18)                            */
#define RTC_CONFIG_AGCEN_Msk              (0x40000UL)               /*!< RTC CONFIG: AGCEN (Bitfield-Mask: 0x01)               */
#define RTC_CONFIG_CRYSEN_Pos             (17UL)                    /*!< RTC CONFIG: CRYSEN (Bit 17)                           */
#define RTC_CONFIG_CRYSEN_Msk             (0x20000UL)               /*!< RTC CONFIG: CRYSEN (Bitfield-Mask: 0x01)              */
#define RTC_CONFIG_BDEN_Pos               (16UL)                    /*!< RTC CONFIG: BDEN (Bit 16)                             */
#define RTC_CONFIG_BDEN_Msk               (0x10000UL)               /*!< RTC CONFIG: BDEN (Bitfield-Mask: 0x01)                */
#define RTC_CONFIG_RTCLC_Pos              (4UL)                     /*!< RTC CONFIG: RTCLC (Bit 4)                             */
#define RTC_CONFIG_RTCLC_Msk              (0xf0UL)                  /*!< RTC CONFIG: RTCLC (Bitfield-Mask: 0x0f)               */
#define RTC_CONFIG_ASEN_Pos               (3UL)                     /*!< RTC CONFIG: ASEN (Bit 3)                              */
#define RTC_CONFIG_ASEN_Msk               (0x8UL)                   /*!< RTC CONFIG: ASEN (Bitfield-Mask: 0x01)                */
#define RTC_CONFIG_MCLKEN_Pos             (2UL)                     /*!< RTC CONFIG: MCLKEN (Bit 2)                            */
#define RTC_CONFIG_MCLKEN_Msk             (0x4UL)                   /*!< RTC CONFIG: MCLKEN (Bitfield-Mask: 0x01)              */
#define RTC_CONFIG_RUN_Pos                (1UL)                     /*!< RTC CONFIG: RUN (Bit 1)                               */
#define RTC_CONFIG_RUN_Msk                (0x2UL)                   /*!< RTC CONFIG: RUN (Bitfield-Mask: 0x01)                 */
#define RTC_CONFIG_ALM0AREN_Pos           (0UL)                     /*!< RTC CONFIG: ALM0AREN (Bit 0)                          */
#define RTC_CONFIG_ALM0AREN_Msk           (0x1UL)                   /*!< RTC CONFIG: ALM0AREN (Bitfield-Mask: 0x01)            */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
#define RTC_CONTROL_LRDYF_Pos             (8UL)                     /*!< RTC CONTROL: LRDYF (Bit 8)                            */
#define RTC_CONTROL_LRDYF_Msk             (0x100UL)                 /*!< RTC CONTROL: LRDYF (Bitfield-Mask: 0x01)              */
#define RTC_CONTROL_HSMDEN_Pos            (7UL)                     /*!< RTC CONTROL: HSMDEN (Bit 7)                           */
#define RTC_CONTROL_HSMDEN_Msk            (0x80UL)                  /*!< RTC CONTROL: HSMDEN (Bitfield-Mask: 0x01)             */
#define RTC_CONTROL_OSCFI_Pos             (6UL)                     /*!< RTC CONTROL: OSCFI (Bit 6)                            */
#define RTC_CONTROL_OSCFI_Msk             (0x40UL)                  /*!< RTC CONTROL: OSCFI (Bitfield-Mask: 0x01)              */
#define RTC_CONTROL_CLKVF_Pos             (5UL)                     /*!< RTC CONTROL: CLKVF (Bit 5)                            */
#define RTC_CONTROL_CLKVF_Msk             (0x20UL)                  /*!< RTC CONTROL: CLKVF (Bitfield-Mask: 0x01)              */
#define RTC_CONTROL_TMRSET_Pos            (4UL)                     /*!< RTC CONTROL: TMRSET (Bit 4)                           */
#define RTC_CONTROL_TMRSET_Msk            (0x10UL)                  /*!< RTC CONTROL: TMRSET (Bitfield-Mask: 0x01)             */
#define RTC_CONTROL_TMRCAP_Pos            (3UL)                     /*!< RTC CONTROL: TMRCAP (Bit 3)                           */
#define RTC_CONTROL_TMRCAP_Msk            (0x8UL)                   /*!< RTC CONTROL: TMRCAP (Bitfield-Mask: 0x01)             */
#define RTC_CONTROL_ALM2I_Pos             (2UL)                     /*!< RTC CONTROL: ALM2I (Bit 2)                            */
#define RTC_CONTROL_ALM2I_Msk             (0x4UL)                   /*!< RTC CONTROL: ALM2I (Bitfield-Mask: 0x01)              */
#define RTC_CONTROL_ALM1I_Pos             (1UL)                     /*!< RTC CONTROL: ALM1I (Bit 1)                            */
#define RTC_CONTROL_ALM1I_Msk             (0x2UL)                   /*!< RTC CONTROL: ALM1I (Bitfield-Mask: 0x01)              */
#define RTC_CONTROL_ALM0I_Pos             (0UL)                     /*!< RTC CONTROL: ALM0I (Bit 0)                            */
#define RTC_CONTROL_ALM0I_Msk             (0x1UL)                   /*!< RTC CONTROL: ALM0I (Bitfield-Mask: 0x01)              */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  ALARM0  ========================================================= */
/* ========================================================  ALARM1  ========================================================= */
/* ========================================================  ALARM2  ========================================================= */
/* ========================================================  SETCAP  ========================================================= */
/* ======================================================  LFOCONTROL  ======================================================= */
#define RTC_LFOCONTROL_LFOSCEN_Pos        (31UL)                    /*!< RTC LFOCONTROL: LFOSCEN (Bit 31)                      */
#define RTC_LFOCONTROL_LFOSCEN_Msk        (0x80000000UL)            /*!< RTC LFOCONTROL: LFOSCEN (Bitfield-Mask: 0x01)         */


/* =========================================================================================================================== */
/* ================                                           PBCFG                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  CONTROL0  ======================================================== */
#define PBCFG_CONTROL0_PGDONEF_Pos        (31UL)                    /*!< PBCFG CONTROL0: PGDONEF (Bit 31)                      */
#define PBCFG_CONTROL0_PGDONEF_Msk        (0x80000000UL)            /*!< PBCFG CONTROL0: PGDONEF (Bitfield-Mask: 0x01)         */
#define PBCFG_CONTROL0_PGTIMER_Pos        (24UL)                    /*!< PBCFG CONTROL0: PGTIMER (Bit 24)                      */
#define PBCFG_CONTROL0_PGTIMER_Msk        (0x1f000000UL)            /*!< PBCFG CONTROL0: PGTIMER (Bitfield-Mask: 0x1f)         */
#define PBCFG_CONTROL0_INT1EN_Pos         (15UL)                    /*!< PBCFG CONTROL0: INT1EN (Bit 15)                       */
#define PBCFG_CONTROL0_INT1EN_Msk         (0x8000UL)                /*!< PBCFG CONTROL0: INT1EN (Bitfield-Mask: 0x01)          */
#define PBCFG_CONTROL0_INT1MD_Pos         (13UL)                    /*!< PBCFG CONTROL0: INT1MD (Bit 13)                       */
#define PBCFG_CONTROL0_INT1MD_Msk         (0x6000UL)                /*!< PBCFG CONTROL0: INT1MD (Bitfield-Mask: 0x03)          */
#define PBCFG_CONTROL0_INT1POL_Pos        (12UL)                    /*!< PBCFG CONTROL0: INT1POL (Bit 12)                      */
#define PBCFG_CONTROL0_INT1POL_Msk        (0x1000UL)                /*!< PBCFG CONTROL0: INT1POL (Bitfield-Mask: 0x01)         */
#define PBCFG_CONTROL0_INT1SEL_Pos        (8UL)                     /*!< PBCFG CONTROL0: INT1SEL (Bit 8)                       */
#define PBCFG_CONTROL0_INT1SEL_Msk        (0xf00UL)                 /*!< PBCFG CONTROL0: INT1SEL (Bitfield-Mask: 0x0f)         */
#define PBCFG_CONTROL0_INT0EN_Pos         (7UL)                     /*!< PBCFG CONTROL0: INT0EN (Bit 7)                        */
#define PBCFG_CONTROL0_INT0EN_Msk         (0x80UL)                  /*!< PBCFG CONTROL0: INT0EN (Bitfield-Mask: 0x01)          */
#define PBCFG_CONTROL0_INT0MD_Pos         (5UL)                     /*!< PBCFG CONTROL0: INT0MD (Bit 5)                        */
#define PBCFG_CONTROL0_INT0MD_Msk         (0x60UL)                  /*!< PBCFG CONTROL0: INT0MD (Bitfield-Mask: 0x03)          */
#define PBCFG_CONTROL0_INT0POL_Pos        (4UL)                     /*!< PBCFG CONTROL0: INT0POL (Bit 4)                       */
#define PBCFG_CONTROL0_INT0POL_Msk        (0x10UL)                  /*!< PBCFG CONTROL0: INT0POL (Bitfield-Mask: 0x01)         */
#define PBCFG_CONTROL0_INT0SEL_Pos        (0UL)                     /*!< PBCFG CONTROL0: INT0SEL (Bit 0)                       */
#define PBCFG_CONTROL0_INT0SEL_Msk        (0xfUL)                   /*!< PBCFG CONTROL0: INT0SEL (Bitfield-Mask: 0x0f)         */
/* =====================================================  CONTROL0_SET  ====================================================== */
/* =====================================================  CONTROL0_CLR  ====================================================== */
/* =======================================================  CONTROL1  ======================================================== */
#define PBCFG_CONTROL1_LOCK_Pos           (31UL)                    /*!< PBCFG CONTROL1: LOCK (Bit 31)                         */
#define PBCFG_CONTROL1_LOCK_Msk           (0x80000000UL)            /*!< PBCFG CONTROL1: LOCK (Bitfield-Mask: 0x01)            */
#define PBCFG_CONTROL1_EVREGRMD_Pos       (23UL)                    /*!< PBCFG CONTROL1: EVREGRMD (Bit 23)                     */
#define PBCFG_CONTROL1_EVREGRMD_Msk       (0x800000UL)              /*!< PBCFG CONTROL1: EVREGRMD (Bitfield-Mask: 0x01)        */
#define PBCFG_CONTROL1_MATMD_Pos          (16UL)                    /*!< PBCFG CONTROL1: MATMD (Bit 16)                        */
#define PBCFG_CONTROL1_MATMD_Msk          (0x30000UL)               /*!< PBCFG CONTROL1: MATMD (Bitfield-Mask: 0x03)           */
#define PBCFG_CONTROL1_EMIFWIDTH_Pos      (10UL)                    /*!< PBCFG CONTROL1: EMIFWIDTH (Bit 10)                    */
#define PBCFG_CONTROL1_EMIFWIDTH_Msk      (0xfc00UL)                /*!< PBCFG CONTROL1: EMIFWIDTH (Bitfield-Mask: 0x3f)       */
#define PBCFG_CONTROL1_EMIFEN_Pos         (9UL)                     /*!< PBCFG CONTROL1: EMIFEN (Bit 9)                        */
#define PBCFG_CONTROL1_EMIFEN_Msk         (0x200UL)                 /*!< PBCFG CONTROL1: EMIFEN (Bitfield-Mask: 0x01)          */
#define PBCFG_CONTROL1_EMIFCS1EN_Pos      (8UL)                     /*!< PBCFG CONTROL1: EMIFCS1EN (Bit 8)                     */
#define PBCFG_CONTROL1_EMIFCS1EN_Msk      (0x100UL)                 /*!< PBCFG CONTROL1: EMIFCS1EN (Bitfield-Mask: 0x01)       */
#define PBCFG_CONTROL1_EMIFBE0BEN_Pos     (7UL)                     /*!< PBCFG CONTROL1: EMIFBE0BEN (Bit 7)                    */
#define PBCFG_CONTROL1_EMIFBE0BEN_Msk     (0x80UL)                  /*!< PBCFG CONTROL1: EMIFBE0BEN (Bitfield-Mask: 0x01)      */
#define PBCFG_CONTROL1_ETMEN_Pos          (1UL)                     /*!< PBCFG CONTROL1: ETMEN (Bit 1)                         */
#define PBCFG_CONTROL1_ETMEN_Msk          (0x2UL)                   /*!< PBCFG CONTROL1: ETMEN (Bitfield-Mask: 0x01)           */
#define PBCFG_CONTROL1_JTAGEN_Pos         (0UL)                     /*!< PBCFG CONTROL1: JTAGEN (Bit 0)                        */
#define PBCFG_CONTROL1_JTAGEN_Msk         (0x1UL)                   /*!< PBCFG CONTROL1: JTAGEN (Bitfield-Mask: 0x01)          */
/* =====================================================  CONTROL1_SET  ====================================================== */
/* =====================================================  CONTROL1_CLR  ====================================================== */
/* ========================================================  XBAR0L  ========================================================= */
#define PBCFG_XBAR0L_TMR1EXEN_Pos         (30UL)                    /*!< PBCFG XBAR0L: TMR1EXEN (Bit 30)                       */
#define PBCFG_XBAR0L_TMR1EXEN_Msk         (0x40000000UL)            /*!< PBCFG XBAR0L: TMR1EXEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR0L_TMR1CTEN_Pos         (29UL)                    /*!< PBCFG XBAR0L: TMR1CTEN (Bit 29)                       */
#define PBCFG_XBAR0L_TMR1CTEN_Msk         (0x20000000UL)            /*!< PBCFG XBAR0L: TMR1CTEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR0L_TMR0EXEN_Pos         (28UL)                    /*!< PBCFG XBAR0L: TMR0EXEN (Bit 28)                       */
#define PBCFG_XBAR0L_TMR0EXEN_Msk         (0x10000000UL)            /*!< PBCFG XBAR0L: TMR0EXEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR0L_TMR0CTEN_Pos         (27UL)                    /*!< PBCFG XBAR0L: TMR0CTEN (Bit 27)                       */
#define PBCFG_XBAR0L_TMR0CTEN_Msk         (0x8000000UL)             /*!< PBCFG XBAR0L: TMR0CTEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR0L_CMP1AEN_Pos          (26UL)                    /*!< PBCFG XBAR0L: CMP1AEN (Bit 26)                        */
#define PBCFG_XBAR0L_CMP1AEN_Msk          (0x4000000UL)             /*!< PBCFG XBAR0L: CMP1AEN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR0L_CMP1SEN_Pos          (25UL)                    /*!< PBCFG XBAR0L: CMP1SEN (Bit 25)                        */
#define PBCFG_XBAR0L_CMP1SEN_Msk          (0x2000000UL)             /*!< PBCFG XBAR0L: CMP1SEN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR0L_CMP0AEN_Pos          (24UL)                    /*!< PBCFG XBAR0L: CMP0AEN (Bit 24)                        */
#define PBCFG_XBAR0L_CMP0AEN_Msk          (0x1000000UL)             /*!< PBCFG XBAR0L: CMP0AEN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR0L_CMP0SEN_Pos          (23UL)                    /*!< PBCFG XBAR0L: CMP0SEN (Bit 23)                        */
#define PBCFG_XBAR0L_CMP0SEN_Msk          (0x800000UL)              /*!< PBCFG XBAR0L: CMP0SEN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR0L_I2C0EN_Pos           (22UL)                    /*!< PBCFG XBAR0L: I2C0EN (Bit 22)                         */
#define PBCFG_XBAR0L_I2C0EN_Msk           (0x400000UL)              /*!< PBCFG XBAR0L: I2C0EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR0L_I2S0TXEN_Pos         (21UL)                    /*!< PBCFG XBAR0L: I2S0TXEN (Bit 21)                       */
#define PBCFG_XBAR0L_I2S0TXEN_Msk         (0x200000UL)              /*!< PBCFG XBAR0L: I2S0TXEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR0L_ECI1EN_Pos           (20UL)                    /*!< PBCFG XBAR0L: ECI1EN (Bit 20)                         */
#define PBCFG_XBAR0L_ECI1EN_Msk           (0x100000UL)              /*!< PBCFG XBAR0L: ECI1EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR0L_ECI0EN_Pos           (19UL)                    /*!< PBCFG XBAR0L: ECI0EN (Bit 19)                         */
#define PBCFG_XBAR0L_ECI0EN_Msk           (0x80000UL)               /*!< PBCFG XBAR0L: ECI0EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR0L_EECI0EN_Pos          (18UL)                    /*!< PBCFG XBAR0L: EECI0EN (Bit 18)                        */
#define PBCFG_XBAR0L_EECI0EN_Msk          (0x40000UL)               /*!< PBCFG XBAR0L: EECI0EN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR0L_PCA1EN_Pos           (16UL)                    /*!< PBCFG XBAR0L: PCA1EN (Bit 16)                         */
#define PBCFG_XBAR0L_PCA1EN_Msk           (0x30000UL)               /*!< PBCFG XBAR0L: PCA1EN (Bitfield-Mask: 0x03)            */
#define PBCFG_XBAR0L_PCA0EN_Pos           (14UL)                    /*!< PBCFG XBAR0L: PCA0EN (Bit 14)                         */
#define PBCFG_XBAR0L_PCA0EN_Msk           (0xc000UL)                /*!< PBCFG XBAR0L: PCA0EN (Bitfield-Mask: 0x03)            */
#define PBCFG_XBAR0L_EPCA0EN_Pos          (8UL)                     /*!< PBCFG XBAR0L: EPCA0EN (Bit 8)                         */
#define PBCFG_XBAR0L_EPCA0EN_Msk          (0x700UL)                 /*!< PBCFG XBAR0L: EPCA0EN (Bitfield-Mask: 0x07)           */
#define PBCFG_XBAR0L_USART1CEN_Pos        (7UL)                     /*!< PBCFG XBAR0L: USART1CEN (Bit 7)                       */
#define PBCFG_XBAR0L_USART1CEN_Msk        (0x80UL)                  /*!< PBCFG XBAR0L: USART1CEN (Bitfield-Mask: 0x01)         */
#define PBCFG_XBAR0L_USART1FCEN_Pos       (6UL)                     /*!< PBCFG XBAR0L: USART1FCEN (Bit 6)                      */
#define PBCFG_XBAR0L_USART1FCEN_Msk       (0x40UL)                  /*!< PBCFG XBAR0L: USART1FCEN (Bitfield-Mask: 0x01)        */
#define PBCFG_XBAR0L_USART1EN_Pos         (5UL)                     /*!< PBCFG XBAR0L: USART1EN (Bit 5)                        */
#define PBCFG_XBAR0L_USART1EN_Msk         (0x20UL)                  /*!< PBCFG XBAR0L: USART1EN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR0L_SPI0NSSEN_Pos        (4UL)                     /*!< PBCFG XBAR0L: SPI0NSSEN (Bit 4)                       */
#define PBCFG_XBAR0L_SPI0NSSEN_Msk        (0x10UL)                  /*!< PBCFG XBAR0L: SPI0NSSEN (Bitfield-Mask: 0x01)         */
#define PBCFG_XBAR0L_SPI0EN_Pos           (3UL)                     /*!< PBCFG XBAR0L: SPI0EN (Bit 3)                          */
#define PBCFG_XBAR0L_SPI0EN_Msk           (0x8UL)                   /*!< PBCFG XBAR0L: SPI0EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR0L_USART0CEN_Pos        (2UL)                     /*!< PBCFG XBAR0L: USART0CEN (Bit 2)                       */
#define PBCFG_XBAR0L_USART0CEN_Msk        (0x4UL)                   /*!< PBCFG XBAR0L: USART0CEN (Bitfield-Mask: 0x01)         */
#define PBCFG_XBAR0L_USART0FCEN_Pos       (1UL)                     /*!< PBCFG XBAR0L: USART0FCEN (Bit 1)                      */
#define PBCFG_XBAR0L_USART0FCEN_Msk       (0x2UL)                   /*!< PBCFG XBAR0L: USART0FCEN (Bitfield-Mask: 0x01)        */
#define PBCFG_XBAR0L_USART0EN_Pos         (0UL)                     /*!< PBCFG XBAR0L: USART0EN (Bit 0)                        */
#define PBCFG_XBAR0L_USART0EN_Msk         (0x1UL)                   /*!< PBCFG XBAR0L: USART0EN (Bitfield-Mask: 0x01)          */
/* ======================================================  XBAR0L_SET  ======================================================= */
/* ======================================================  XBAR0L_CLR  ======================================================= */
/* ========================================================  XBAR0H  ========================================================= */
#define PBCFG_XBAR0H_XBAR0EN_Pos          (31UL)                    /*!< PBCFG XBAR0H: XBAR0EN (Bit 31)                        */
#define PBCFG_XBAR0H_XBAR0EN_Msk          (0x80000000UL)            /*!< PBCFG XBAR0H: XBAR0EN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR0H_AHBEN_Pos            (7UL)                     /*!< PBCFG XBAR0H: AHBEN (Bit 7)                           */
#define PBCFG_XBAR0H_AHBEN_Msk            (0x80UL)                  /*!< PBCFG XBAR0H: AHBEN (Bitfield-Mask: 0x01)             */
#define PBCFG_XBAR0H_SPI2NSSEN_Pos        (6UL)                     /*!< PBCFG XBAR0H: SPI2NSSEN (Bit 6)                       */
#define PBCFG_XBAR0H_SPI2NSSEN_Msk        (0x40UL)                  /*!< PBCFG XBAR0H: SPI2NSSEN (Bitfield-Mask: 0x01)         */
#define PBCFG_XBAR0H_SPI2EN_Pos           (5UL)                     /*!< PBCFG XBAR0H: SPI2EN (Bit 5)                          */
#define PBCFG_XBAR0H_SPI2EN_Msk           (0x20UL)                  /*!< PBCFG XBAR0H: SPI2EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR0H_SPI1NSSEN_Pos        (4UL)                     /*!< PBCFG XBAR0H: SPI1NSSEN (Bit 4)                       */
#define PBCFG_XBAR0H_SPI1NSSEN_Msk        (0x10UL)                  /*!< PBCFG XBAR0H: SPI1NSSEN (Bitfield-Mask: 0x01)         */
#define PBCFG_XBAR0H_SPI1EN_Pos           (3UL)                     /*!< PBCFG XBAR0H: SPI1EN (Bit 3)                          */
#define PBCFG_XBAR0H_SPI1EN_Msk           (0x8UL)                   /*!< PBCFG XBAR0H: SPI1EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR0H_UART1EN_Pos          (2UL)                     /*!< PBCFG XBAR0H: UART1EN (Bit 2)                         */
#define PBCFG_XBAR0H_UART1EN_Msk          (0x4UL)                   /*!< PBCFG XBAR0H: UART1EN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR0H_UART0FCEN_Pos        (1UL)                     /*!< PBCFG XBAR0H: UART0FCEN (Bit 1)                       */
#define PBCFG_XBAR0H_UART0FCEN_Msk        (0x2UL)                   /*!< PBCFG XBAR0H: UART0FCEN (Bitfield-Mask: 0x01)         */
#define PBCFG_XBAR0H_UART0EN_Pos          (0UL)                     /*!< PBCFG XBAR0H: UART0EN (Bit 0)                         */
#define PBCFG_XBAR0H_UART0EN_Msk          (0x1UL)                   /*!< PBCFG XBAR0H: UART0EN (Bitfield-Mask: 0x01)           */
/* ======================================================  XBAR0H_SET  ======================================================= */
/* ======================================================  XBAR0H_CLR  ======================================================= */
/* =========================================================  XBAR1  ========================================================= */
#define PBCFG_XBAR1_XBAR1EN_Pos           (31UL)                    /*!< PBCFG XBAR1: XBAR1EN (Bit 31)                         */
#define PBCFG_XBAR1_XBAR1EN_Msk           (0x80000000UL)            /*!< PBCFG XBAR1: XBAR1EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR1_KILLHDEN_Pos          (21UL)                    /*!< PBCFG XBAR1: KILLHDEN (Bit 21)                        */
#define PBCFG_XBAR1_KILLHDEN_Msk          (0x200000UL)              /*!< PBCFG XBAR1: KILLHDEN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR1_I2C1EN_Pos            (20UL)                    /*!< PBCFG XBAR1: I2C1EN (Bit 20)                          */
#define PBCFG_XBAR1_I2C1EN_Msk            (0x100000UL)              /*!< PBCFG XBAR1: I2C1EN (Bitfield-Mask: 0x01)             */
#define PBCFG_XBAR1_LPT0OEN_Pos           (19UL)                    /*!< PBCFG XBAR1: LPT0OEN (Bit 19)                         */
#define PBCFG_XBAR1_LPT0OEN_Msk           (0x80000UL)               /*!< PBCFG XBAR1: LPT0OEN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR1_I2S0RXEN_Pos          (17UL)                    /*!< PBCFG XBAR1: I2S0RXEN (Bit 17)                        */
#define PBCFG_XBAR1_I2S0RXEN_Msk          (0x20000UL)               /*!< PBCFG XBAR1: I2S0RXEN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR1_UART1EN_Pos           (16UL)                    /*!< PBCFG XBAR1: UART1EN (Bit 16)                         */
#define PBCFG_XBAR1_UART1EN_Msk           (0x10000UL)               /*!< PBCFG XBAR1: UART1EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR1_I2C0EN_Pos            (15UL)                    /*!< PBCFG XBAR1: I2C0EN (Bit 15)                          */
#define PBCFG_XBAR1_I2C0EN_Msk            (0x8000UL)                /*!< PBCFG XBAR1: I2C0EN (Bitfield-Mask: 0x01)             */
#define PBCFG_XBAR1_I2S0TXEN_Pos          (14UL)                    /*!< PBCFG XBAR1: I2S0TXEN (Bit 14)                        */
#define PBCFG_XBAR1_I2S0TXEN_Msk          (0x4000UL)                /*!< PBCFG XBAR1: I2S0TXEN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR1_UART0FCEN_Pos         (13UL)                    /*!< PBCFG XBAR1: UART0FCEN (Bit 13)                       */
#define PBCFG_XBAR1_UART0FCEN_Msk         (0x2000UL)                /*!< PBCFG XBAR1: UART0FCEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR1_UART0EN_Pos           (12UL)                    /*!< PBCFG XBAR1: UART0EN (Bit 12)                         */
#define PBCFG_XBAR1_UART0EN_Msk           (0x1000UL)                /*!< PBCFG XBAR1: UART0EN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR1_USART1CEN_Pos         (11UL)                    /*!< PBCFG XBAR1: USART1CEN (Bit 11)                       */
#define PBCFG_XBAR1_USART1CEN_Msk         (0x800UL)                 /*!< PBCFG XBAR1: USART1CEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR1_USART1FCEN_Pos        (10UL)                    /*!< PBCFG XBAR1: USART1FCEN (Bit 10)                      */
#define PBCFG_XBAR1_USART1FCEN_Msk        (0x400UL)                 /*!< PBCFG XBAR1: USART1FCEN (Bitfield-Mask: 0x01)         */
#define PBCFG_XBAR1_USART1EN_Pos          (9UL)                     /*!< PBCFG XBAR1: USART1EN (Bit 9)                         */
#define PBCFG_XBAR1_USART1EN_Msk          (0x200UL)                 /*!< PBCFG XBAR1: USART1EN (Bitfield-Mask: 0x01)           */
#define PBCFG_XBAR1_SPI2NSSEN_Pos         (8UL)                     /*!< PBCFG XBAR1: SPI2NSSEN (Bit 8)                        */
#define PBCFG_XBAR1_SPI2NSSEN_Msk         (0x100UL)                 /*!< PBCFG XBAR1: SPI2NSSEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR1_SPI2EN_Pos            (7UL)                     /*!< PBCFG XBAR1: SPI2EN (Bit 7)                           */
#define PBCFG_XBAR1_SPI2EN_Msk            (0x80UL)                  /*!< PBCFG XBAR1: SPI2EN (Bitfield-Mask: 0x01)             */
#define PBCFG_XBAR1_RTC0EN_Pos            (6UL)                     /*!< PBCFG XBAR1: RTC0EN (Bit 6)                           */
#define PBCFG_XBAR1_RTC0EN_Msk            (0x40UL)                  /*!< PBCFG XBAR1: RTC0EN (Bitfield-Mask: 0x01)             */
#define PBCFG_XBAR1_SPI1NSSEN_Pos         (5UL)                     /*!< PBCFG XBAR1: SPI1NSSEN (Bit 5)                        */
#define PBCFG_XBAR1_SPI1NSSEN_Msk         (0x20UL)                  /*!< PBCFG XBAR1: SPI1NSSEN (Bitfield-Mask: 0x01)          */
#define PBCFG_XBAR1_SPI1EN_Pos            (4UL)                     /*!< PBCFG XBAR1: SPI1EN (Bit 4)                           */
#define PBCFG_XBAR1_SPI1EN_Msk            (0x10UL)                  /*!< PBCFG XBAR1: SPI1EN (Bitfield-Mask: 0x01)             */
#define PBCFG_XBAR1_CMP1SEN_Pos           (3UL)                     /*!< PBCFG XBAR1: CMP1SEN (Bit 3)                          */
#define PBCFG_XBAR1_CMP1SEN_Msk           (0x8UL)                   /*!< PBCFG XBAR1: CMP1SEN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR1_CMP0SEN_Pos           (2UL)                     /*!< PBCFG XBAR1: CMP0SEN (Bit 2)                          */
#define PBCFG_XBAR1_CMP0SEN_Msk           (0x4UL)                   /*!< PBCFG XBAR1: CMP0SEN (Bitfield-Mask: 0x01)            */
#define PBCFG_XBAR1_SSG0EN_Pos            (0UL)                     /*!< PBCFG XBAR1: SSG0EN (Bit 0)                           */
#define PBCFG_XBAR1_SSG0EN_Msk            (0x3UL)                   /*!< PBCFG XBAR1: SSG0EN (Bitfield-Mask: 0x03)             */
/* =======================================================  XBAR1_SET  ======================================================= */
/* =======================================================  XBAR1_CLR  ======================================================= */
/* =========================================================  PBKEY  ========================================================= */
#define PBCFG_PBKEY_KEY_Pos               (0UL)                     /*!< PBCFG PBKEY: KEY (Bit 0)                              */
#define PBCFG_PBKEY_KEY_Msk               (0xffUL)                  /*!< PBCFG PBKEY: KEY (Bitfield-Mask: 0xff)                */


/* =========================================================================================================================== */
/* ================                                           PBSTD                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  PB  =========================================================== */
#define PBSTD_PB_PB_Pos                   (0UL)                     /*!< PBSTD PB: PB (Bit 0)                                  */
#define PBSTD_PB_PB_Msk                   (0xffffUL)                /*!< PBSTD PB: PB (Bitfield-Mask: 0xffff)                  */
/* ========================================================  PB_SET  ========================================================= */
/* ========================================================  PB_CLR  ========================================================= */
/* ========================================================  PB_MSK  ========================================================= */
/* =========================================================  PBPIN  ========================================================= */
#define PBSTD_PBPIN_PBPIN_Pos             (0UL)                     /*!< PBSTD PBPIN: PBPIN (Bit 0)                            */
#define PBSTD_PBPIN_PBPIN_Msk             (0xffffUL)                /*!< PBSTD PBPIN: PBPIN (Bitfield-Mask: 0xffff)            */
/* ========================================================  PBMDSEL  ======================================================== */
#define PBSTD_PBMDSEL_PBMDSEL_Pos         (0UL)                     /*!< PBSTD PBMDSEL: PBMDSEL (Bit 0)                        */
#define PBSTD_PBMDSEL_PBMDSEL_Msk         (0xffffUL)                /*!< PBSTD PBMDSEL: PBMDSEL (Bitfield-Mask: 0xffff)        */
/* ======================================================  PBMDSEL_SET  ====================================================== */
/* ======================================================  PBMDSEL_CLR  ====================================================== */
/* =======================================================  PBSKIPEN  ======================================================== */
#define PBSTD_PBSKIPEN_PBSKIPEN_Pos       (0UL)                     /*!< PBSTD PBSKIPEN: PBSKIPEN (Bit 0)                      */
#define PBSTD_PBSKIPEN_PBSKIPEN_Msk       (0xffffUL)                /*!< PBSTD PBSKIPEN: PBSKIPEN (Bitfield-Mask: 0xffff)      */
/* =====================================================  PBSKIPEN_SET  ====================================================== */
/* =====================================================  PBSKIPEN_CLR  ====================================================== */
/* ========================================================  PBOUTMD  ======================================================== */
#define PBSTD_PBOUTMD_PBOUTMD_Pos         (0UL)                     /*!< PBSTD PBOUTMD: PBOUTMD (Bit 0)                        */
#define PBSTD_PBOUTMD_PBOUTMD_Msk         (0xffffUL)                /*!< PBSTD PBOUTMD: PBOUTMD (Bitfield-Mask: 0xffff)        */
/* ======================================================  PBOUTMD_SET  ====================================================== */
/* ======================================================  PBOUTMD_CLR  ====================================================== */
/* =========================================================  PBDRV  ========================================================= */
#define PBSTD_PBDRV_PBPUEN_Pos            (16UL)                    /*!< PBSTD PBDRV: PBPUEN (Bit 16)                          */
#define PBSTD_PBDRV_PBPUEN_Msk            (0x10000UL)               /*!< PBSTD PBDRV: PBPUEN (Bitfield-Mask: 0x01)             */
#define PBSTD_PBDRV_PBDRV_Pos             (0UL)                     /*!< PBSTD PBDRV: PBDRV (Bit 0)                            */
#define PBSTD_PBDRV_PBDRV_Msk             (0xffffUL)                /*!< PBSTD PBDRV: PBDRV (Bitfield-Mask: 0xffff)            */
/* =======================================================  PBDRV_SET  ======================================================= */
/* =======================================================  PBDRV_CLR  ======================================================= */
/* ==========================================================  PM  =========================================================== */
#define PBSTD_PM_PM_Pos                   (0UL)                     /*!< PBSTD PM: PM (Bit 0)                                  */
#define PBSTD_PM_PM_Msk                   (0xffffUL)                /*!< PBSTD PM: PM (Bitfield-Mask: 0xffff)                  */
/* ========================================================  PM_SET  ========================================================= */
/* ========================================================  PM_CLR  ========================================================= */
/* =========================================================  PMEN  ========================================================== */
#define PBSTD_PMEN_PMEN_Pos               (0UL)                     /*!< PBSTD PMEN: PMEN (Bit 0)                              */
#define PBSTD_PMEN_PMEN_Msk               (0xffffUL)                /*!< PBSTD PMEN: PMEN (Bitfield-Mask: 0xffff)              */
/* =======================================================  PMEN_SET  ======================================================== */
/* =======================================================  PMEN_CLR  ======================================================== */
/* ========================================================  PBLOCK  ========================================================= */
#define PBSTD_PBLOCK_PBLOCK_Pos           (0UL)                     /*!< PBSTD PBLOCK: PBLOCK (Bit 0)                          */
#define PBSTD_PBLOCK_PBLOCK_Msk           (0xffffUL)                /*!< PBSTD PBLOCK: PBLOCK (Bitfield-Mask: 0xffff)          */
/* ========================================================  PBPGEN  ========================================================= */
#define PBSTD_PBPGEN_PBPGEN_Pos           (0UL)                     /*!< PBSTD PBPGEN: PBPGEN (Bit 0)                          */
#define PBSTD_PBPGEN_PBPGEN_Msk           (0xffffUL)                /*!< PBSTD PBPGEN: PBPGEN (Bitfield-Mask: 0xffff)          */
/* =======================================================  PBPGPHASE  ======================================================= */
#define PBSTD_PBPGPHASE_PBPGPH1_Pos       (16UL)                    /*!< PBSTD PBPGPHASE: PBPGPH1 (Bit 16)                     */
#define PBSTD_PBPGPHASE_PBPGPH1_Msk       (0xffff0000UL)            /*!< PBSTD PBPGPHASE: PBPGPH1 (Bitfield-Mask: 0xffff)      */
#define PBSTD_PBPGPHASE_PBPGPH0_Pos       (0UL)                     /*!< PBSTD PBPGPHASE: PBPGPH0 (Bit 0)                      */
#define PBSTD_PBPGPHASE_PBPGPH0_Msk       (0xffffUL)                /*!< PBSTD PBPGPHASE: PBPGPH0 (Bitfield-Mask: 0xffff)      */


/* =========================================================================================================================== */
/* ================                                           PBHD                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  PB  =========================================================== */
#define PBHD_PB_PB_Pos                    (0UL)                     /*!< PBHD PB: PB (Bit 0)                                   */
#define PBHD_PB_PB_Msk                    (0x3fUL)                  /*!< PBHD PB: PB (Bitfield-Mask: 0x3f)                     */
/* ========================================================  PB_SET  ========================================================= */
/* ========================================================  PB_CLR  ========================================================= */
/* ========================================================  PB_MSK  ========================================================= */
/* =========================================================  PBPIN  ========================================================= */
#define PBHD_PBPIN_PBPIN_Pos              (0UL)                     /*!< PBHD PBPIN: PBPIN (Bit 0)                             */
#define PBHD_PBPIN_PBPIN_Msk              (0x3fUL)                  /*!< PBHD PBPIN: PBPIN (Bitfield-Mask: 0x3f)               */
/* ========================================================  PBMDSEL  ======================================================== */
#define PBHD_PBMDSEL_PBMDSEL_Pos          (0UL)                     /*!< PBHD PBMDSEL: PBMDSEL (Bit 0)                         */
#define PBHD_PBMDSEL_PBMDSEL_Msk          (0x3fUL)                  /*!< PBHD PBMDSEL: PBMDSEL (Bitfield-Mask: 0x3f)           */
/* ======================================================  PBMDSEL_SET  ====================================================== */
/* ======================================================  PBMDSEL_CLR  ====================================================== */
/* =========================================================  PBDEN  ========================================================= */
#define PBHD_PBDEN_PBPDEN_Pos             (16UL)                    /*!< PBHD PBDEN: PBPDEN (Bit 16)                           */
#define PBHD_PBDEN_PBPDEN_Msk             (0x3f0000UL)              /*!< PBHD PBDEN: PBPDEN (Bitfield-Mask: 0x3f)              */
#define PBHD_PBDEN_PBNDEN_Pos             (0UL)                     /*!< PBHD PBDEN: PBNDEN (Bit 0)                            */
#define PBHD_PBDEN_PBNDEN_Msk             (0x3fUL)                  /*!< PBHD PBDEN: PBNDEN (Bitfield-Mask: 0x3f)              */
/* =======================================================  PBDEN_SET  ======================================================= */
/* =======================================================  PBDEN_CLR  ======================================================= */
/* =========================================================  PBDRV  ========================================================= */
#define PBHD_PBDRV_PBVTRKEN_Pos           (23UL)                    /*!< PBHD PBDRV: PBVTRKEN (Bit 23)                         */
#define PBHD_PBDRV_PBVTRKEN_Msk           (0x800000UL)              /*!< PBHD PBDRV: PBVTRKEN (Bitfield-Mask: 0x01)            */
#define PBHD_PBDRV_PBDRVEN_Pos            (22UL)                    /*!< PBHD PBDRV: PBDRVEN (Bit 22)                          */
#define PBHD_PBDRV_PBDRVEN_Msk            (0x400000UL)              /*!< PBHD PBDRV: PBDRVEN (Bitfield-Mask: 0x01)             */
#define PBHD_PBDRV_PBBIASEN_Pos           (21UL)                    /*!< PBHD PBDRV: PBBIASEN (Bit 21)                         */
#define PBHD_PBDRV_PBBIASEN_Msk           (0x200000UL)              /*!< PBHD PBDRV: PBBIASEN (Bitfield-Mask: 0x01)            */
#define PBHD_PBDRV_PBSLEW_Pos             (18UL)                    /*!< PBHD PBDRV: PBSLEW (Bit 18)                           */
#define PBHD_PBDRV_PBSLEW_Msk             (0xc0000UL)               /*!< PBHD PBDRV: PBSLEW (Bitfield-Mask: 0x03)              */
#define PBHD_PBDRV_PBLVMD_Pos             (17UL)                    /*!< PBHD PBDRV: PBLVMD (Bit 17)                           */
#define PBHD_PBDRV_PBLVMD_Msk             (0x20000UL)               /*!< PBHD PBDRV: PBLVMD (Bitfield-Mask: 0x01)              */
#define PBHD_PBDRV_PBPUEN_Pos             (16UL)                    /*!< PBHD PBDRV: PBPUEN (Bit 16)                           */
#define PBHD_PBDRV_PBPUEN_Msk             (0x10000UL)               /*!< PBHD PBDRV: PBPUEN (Bitfield-Mask: 0x01)              */
#define PBHD_PBDRV_PBDRV_Pos              (0UL)                     /*!< PBHD PBDRV: PBDRV (Bit 0)                             */
#define PBHD_PBDRV_PBDRV_Msk              (0x3fUL)                  /*!< PBHD PBDRV: PBDRV (Bitfield-Mask: 0x3f)               */
/* =======================================================  PBDRV_SET  ======================================================= */
/* =======================================================  PBDRV_CLR  ======================================================= */
/* =======================================================  PBILIMIT  ======================================================== */
#define PBHD_PBILIMIT_PILIMIT_Pos         (20UL)                    /*!< PBHD PBILIMIT: PILIMIT (Bit 20)                       */
#define PBHD_PBILIMIT_PILIMIT_Msk         (0xf00000UL)              /*!< PBHD PBILIMIT: PILIMIT (Bitfield-Mask: 0x0f)          */
#define PBHD_PBILIMIT_NILIMIT_Pos         (16UL)                    /*!< PBHD PBILIMIT: NILIMIT (Bit 16)                       */
#define PBHD_PBILIMIT_NILIMIT_Msk         (0xf0000UL)               /*!< PBHD PBILIMIT: NILIMIT (Bitfield-Mask: 0x0f)          */
#define PBHD_PBILIMIT_PBILEN_Pos          (0UL)                     /*!< PBHD PBILIMIT: PBILEN (Bit 0)                         */
#define PBHD_PBILIMIT_PBILEN_Msk          (0x3fUL)                  /*!< PBHD PBILIMIT: PBILEN (Bitfield-Mask: 0x3f)           */
/* =====================================================  PBILIMIT_SET  ====================================================== */
/* =====================================================  PBILIMIT_CLR  ====================================================== */
/* ========================================================  PBFSEL  ========================================================= */
#define PBHD_PBFSEL_PB5SEL_Pos            (10UL)                    /*!< PBHD PBFSEL: PB5SEL (Bit 10)                          */
#define PBHD_PBFSEL_PB5SEL_Msk            (0x1c00UL)                /*!< PBHD PBFSEL: PB5SEL (Bitfield-Mask: 0x07)             */
#define PBHD_PBFSEL_PB4SEL_Pos            (8UL)                     /*!< PBHD PBFSEL: PB4SEL (Bit 8)                           */
#define PBHD_PBFSEL_PB4SEL_Msk            (0x300UL)                 /*!< PBHD PBFSEL: PB4SEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBFSEL_PB3SEL_Pos            (6UL)                     /*!< PBHD PBFSEL: PB3SEL (Bit 6)                           */
#define PBHD_PBFSEL_PB3SEL_Msk            (0xc0UL)                  /*!< PBHD PBFSEL: PB3SEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBFSEL_PB2SEL_Pos            (4UL)                     /*!< PBHD PBFSEL: PB2SEL (Bit 4)                           */
#define PBHD_PBFSEL_PB2SEL_Msk            (0x30UL)                  /*!< PBHD PBFSEL: PB2SEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBFSEL_PB1SEL_Pos            (2UL)                     /*!< PBHD PBFSEL: PB1SEL (Bit 2)                           */
#define PBHD_PBFSEL_PB1SEL_Msk            (0xcUL)                   /*!< PBHD PBFSEL: PB1SEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBFSEL_PB0SEL_Pos            (0UL)                     /*!< PBHD PBFSEL: PB0SEL (Bit 0)                           */
#define PBHD_PBFSEL_PB0SEL_Msk            (0x3UL)                   /*!< PBHD PBFSEL: PB0SEL (Bitfield-Mask: 0x03)             */
/* =========================================================  PBSS  ========================================================== */
#define PBHD_PBSS_PBSSSMD_Pos             (17UL)                    /*!< PBHD PBSS: PBSSSMD (Bit 17)                           */
#define PBHD_PBSS_PBSSSMD_Msk             (0x20000UL)               /*!< PBHD PBSS: PBSSSMD (Bitfield-Mask: 0x01)              */
#define PBHD_PBSS_SSMDEN_Pos              (16UL)                    /*!< PBHD PBSS: SSMDEN (Bit 16)                            */
#define PBHD_PBSS_SSMDEN_Msk              (0x10000UL)               /*!< PBHD PBSS: SSMDEN (Bitfield-Mask: 0x01)               */
#define PBHD_PBSS_PB5SSSEL_Pos            (10UL)                    /*!< PBHD PBSS: PB5SSSEL (Bit 10)                          */
#define PBHD_PBSS_PB5SSSEL_Msk            (0xc00UL)                 /*!< PBHD PBSS: PB5SSSEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBSS_PB4SSSEL_Pos            (8UL)                     /*!< PBHD PBSS: PB4SSSEL (Bit 8)                           */
#define PBHD_PBSS_PB4SSSEL_Msk            (0x300UL)                 /*!< PBHD PBSS: PB4SSSEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBSS_PB3SSSEL_Pos            (6UL)                     /*!< PBHD PBSS: PB3SSSEL (Bit 6)                           */
#define PBHD_PBSS_PB3SSSEL_Msk            (0xc0UL)                  /*!< PBHD PBSS: PB3SSSEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBSS_PB2SSSEL_Pos            (4UL)                     /*!< PBHD PBSS: PB2SSSEL (Bit 4)                           */
#define PBHD_PBSS_PB2SSSEL_Msk            (0x30UL)                  /*!< PBHD PBSS: PB2SSSEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBSS_PB1SSSEL_Pos            (2UL)                     /*!< PBHD PBSS: PB1SSSEL (Bit 2)                           */
#define PBHD_PBSS_PB1SSSEL_Msk            (0xcUL)                   /*!< PBHD PBSS: PB1SSSEL (Bitfield-Mask: 0x03)             */
#define PBHD_PBSS_PB0SSSEL_Pos            (0UL)                     /*!< PBHD PBSS: PB0SSSEL (Bit 0)                           */
#define PBHD_PBSS_PB0SSSEL_Msk            (0x3UL)                   /*!< PBHD PBSS: PB0SSSEL (Bitfield-Mask: 0x03)             */
/* =======================================================  PBSS_SET  ======================================================== */
/* =======================================================  PBSS_CLR  ======================================================== */
/* ========================================================  PBLOCK  ========================================================= */
#define PBHD_PBLOCK_PBLOCK_Pos            (0UL)                     /*!< PBHD PBLOCK: PBLOCK (Bit 0)                           */
#define PBHD_PBLOCK_PBLOCK_Msk            (0x3fUL)                  /*!< PBHD PBLOCK: PBLOCK (Bitfield-Mask: 0x3f)             */


/* =========================================================================================================================== */
/* ================                                          CLKCTRL                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CLKCTRL_CONTROL_OBUSYF_Pos        (29UL)                    /*!< CLKCTRL CONTROL: OBUSYF (Bit 29)                      */
#define CLKCTRL_CONTROL_OBUSYF_Msk        (0x20000000UL)            /*!< CLKCTRL CONTROL: OBUSYF (Bitfield-Mask: 0x01)         */
#define CLKCTRL_CONTROL_EXTESEL_Pos       (28UL)                    /*!< CLKCTRL CONTROL: EXTESEL (Bit 28)                     */
#define CLKCTRL_CONTROL_EXTESEL_Msk       (0x10000000UL)            /*!< CLKCTRL CONTROL: EXTESEL (Bitfield-Mask: 0x01)        */
#define CLKCTRL_CONTROL_APBDIV_Pos        (16UL)                    /*!< CLKCTRL CONTROL: APBDIV (Bit 16)                      */
#define CLKCTRL_CONTROL_APBDIV_Msk        (0x10000UL)               /*!< CLKCTRL CONTROL: APBDIV (Bitfield-Mask: 0x01)         */
#define CLKCTRL_CONTROL_AHBDIV_Pos        (8UL)                     /*!< CLKCTRL CONTROL: AHBDIV (Bit 8)                       */
#define CLKCTRL_CONTROL_AHBDIV_Msk        (0x700UL)                 /*!< CLKCTRL CONTROL: AHBDIV (Bitfield-Mask: 0x07)         */
#define CLKCTRL_CONTROL_AHBSEL_Pos        (0UL)                     /*!< CLKCTRL CONTROL: AHBSEL (Bit 0)                       */
#define CLKCTRL_CONTROL_AHBSEL_Msk        (0x7UL)                   /*!< CLKCTRL CONTROL: AHBSEL (Bitfield-Mask: 0x07)         */
/* ========================================================  AHBCLKG  ======================================================== */
#define CLKCTRL_AHBCLKG_USB0BCEN_Pos      (4UL)                     /*!< CLKCTRL AHBCLKG: USB0BCEN (Bit 4)                     */
#define CLKCTRL_AHBCLKG_USB0BCEN_Msk      (0x10UL)                  /*!< CLKCTRL AHBCLKG: USB0BCEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_AHBCLKG_EMIF0CEN_Pos      (3UL)                     /*!< CLKCTRL AHBCLKG: EMIF0CEN (Bit 3)                     */
#define CLKCTRL_AHBCLKG_EMIF0CEN_Msk      (0x8UL)                   /*!< CLKCTRL AHBCLKG: EMIF0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_AHBCLKG_FLASHCEN_Pos      (2UL)                     /*!< CLKCTRL AHBCLKG: FLASHCEN (Bit 2)                     */
#define CLKCTRL_AHBCLKG_FLASHCEN_Msk      (0x4UL)                   /*!< CLKCTRL AHBCLKG: FLASHCEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_AHBCLKG_DMACEN_Pos        (1UL)                     /*!< CLKCTRL AHBCLKG: DMACEN (Bit 1)                       */
#define CLKCTRL_AHBCLKG_DMACEN_Msk        (0x2UL)                   /*!< CLKCTRL AHBCLKG: DMACEN (Bitfield-Mask: 0x01)         */
#define CLKCTRL_AHBCLKG_RAMCEN_Pos        (0UL)                     /*!< CLKCTRL AHBCLKG: RAMCEN (Bit 0)                       */
#define CLKCTRL_AHBCLKG_RAMCEN_Msk        (0x1UL)                   /*!< CLKCTRL AHBCLKG: RAMCEN (Bitfield-Mask: 0x01)         */
/* ======================================================  AHBCLKG_SET  ====================================================== */
/* ======================================================  AHBCLKG_CLR  ====================================================== */
/* =======================================================  APBCLKG0  ======================================================== */
#define CLKCTRL_APBCLKG0_FLCTRLCEN_Pos    (30UL)                    /*!< CLKCTRL APBCLKG0: FLCTRLCEN (Bit 30)                  */
#define CLKCTRL_APBCLKG0_FLCTRLCEN_Msk    (0x40000000UL)            /*!< CLKCTRL APBCLKG0: FLCTRLCEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_APBCLKG0_EVREGCEN_Pos     (29UL)                    /*!< CLKCTRL APBCLKG0: EVREGCEN (Bit 29)                   */
#define CLKCTRL_APBCLKG0_EVREGCEN_Msk     (0x20000000UL)            /*!< CLKCTRL APBCLKG0: EVREGCEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_APBCLKG0_USB0CEN_Pos      (28UL)                    /*!< CLKCTRL APBCLKG0: USB0CEN (Bit 28)                    */
#define CLKCTRL_APBCLKG0_USB0CEN_Msk      (0x10000000UL)            /*!< CLKCTRL APBCLKG0: USB0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_I2S0CEN_Pos      (27UL)                    /*!< CLKCTRL APBCLKG0: I2S0CEN (Bit 27)                    */
#define CLKCTRL_APBCLKG0_I2S0CEN_Msk      (0x8000000UL)             /*!< CLKCTRL APBCLKG0: I2S0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_LPT0CEN_Pos      (26UL)                    /*!< CLKCTRL APBCLKG0: LPT0CEN (Bit 26)                    */
#define CLKCTRL_APBCLKG0_LPT0CEN_Msk      (0x4000000UL)             /*!< CLKCTRL APBCLKG0: LPT0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_IDAC1CEN_Pos     (25UL)                    /*!< CLKCTRL APBCLKG0: IDAC1CEN (Bit 25)                   */
#define CLKCTRL_APBCLKG0_IDAC1CEN_Msk     (0x2000000UL)             /*!< CLKCTRL APBCLKG0: IDAC1CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_APBCLKG0_IDAC0CEN_Pos     (24UL)                    /*!< CLKCTRL APBCLKG0: IDAC0CEN (Bit 24)                   */
#define CLKCTRL_APBCLKG0_IDAC0CEN_Msk     (0x1000000UL)             /*!< CLKCTRL APBCLKG0: IDAC0CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_APBCLKG0_CRC0CEN_Pos      (23UL)                    /*!< CLKCTRL APBCLKG0: CRC0CEN (Bit 23)                    */
#define CLKCTRL_APBCLKG0_CRC0CEN_Msk      (0x800000UL)              /*!< CLKCTRL APBCLKG0: CRC0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_AES0CEN_Pos      (22UL)                    /*!< CLKCTRL APBCLKG0: AES0CEN (Bit 22)                    */
#define CLKCTRL_APBCLKG0_AES0CEN_Msk      (0x400000UL)              /*!< CLKCTRL APBCLKG0: AES0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_CS0CEN_Pos       (21UL)                    /*!< CLKCTRL APBCLKG0: CS0CEN (Bit 21)                     */
#define CLKCTRL_APBCLKG0_CS0CEN_Msk       (0x200000UL)              /*!< CLKCTRL APBCLKG0: CS0CEN (Bitfield-Mask: 0x01)        */
#define CLKCTRL_APBCLKG0_CMP1CEN_Pos      (20UL)                    /*!< CLKCTRL APBCLKG0: CMP1CEN (Bit 20)                    */
#define CLKCTRL_APBCLKG0_CMP1CEN_Msk      (0x100000UL)              /*!< CLKCTRL APBCLKG0: CMP1CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_CMP0CEN_Pos      (19UL)                    /*!< CLKCTRL APBCLKG0: CMP0CEN (Bit 19)                    */
#define CLKCTRL_APBCLKG0_CMP0CEN_Msk      (0x80000UL)               /*!< CLKCTRL APBCLKG0: CMP0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_ADC1CEN_Pos      (18UL)                    /*!< CLKCTRL APBCLKG0: ADC1CEN (Bit 18)                    */
#define CLKCTRL_APBCLKG0_ADC1CEN_Msk      (0x40000UL)               /*!< CLKCTRL APBCLKG0: ADC1CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_ADC0CEN_Pos      (17UL)                    /*!< CLKCTRL APBCLKG0: ADC0CEN (Bit 17)                    */
#define CLKCTRL_APBCLKG0_ADC0CEN_Msk      (0x20000UL)               /*!< CLKCTRL APBCLKG0: ADC0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_TIMER1CEN_Pos    (16UL)                    /*!< CLKCTRL APBCLKG0: TIMER1CEN (Bit 16)                  */
#define CLKCTRL_APBCLKG0_TIMER1CEN_Msk    (0x10000UL)               /*!< CLKCTRL APBCLKG0: TIMER1CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_APBCLKG0_TIMER0CEN_Pos    (15UL)                    /*!< CLKCTRL APBCLKG0: TIMER0CEN (Bit 15)                  */
#define CLKCTRL_APBCLKG0_TIMER0CEN_Msk    (0x8000UL)                /*!< CLKCTRL APBCLKG0: TIMER0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_APBCLKG0_SSG0CEN_Pos      (14UL)                    /*!< CLKCTRL APBCLKG0: SSG0CEN (Bit 14)                    */
#define CLKCTRL_APBCLKG0_SSG0CEN_Msk      (0x4000UL)                /*!< CLKCTRL APBCLKG0: SSG0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_PCA1CEN_Pos      (13UL)                    /*!< CLKCTRL APBCLKG0: PCA1CEN (Bit 13)                    */
#define CLKCTRL_APBCLKG0_PCA1CEN_Msk      (0x2000UL)                /*!< CLKCTRL APBCLKG0: PCA1CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_PCA0CEN_Pos      (12UL)                    /*!< CLKCTRL APBCLKG0: PCA0CEN (Bit 12)                    */
#define CLKCTRL_APBCLKG0_PCA0CEN_Msk      (0x1000UL)                /*!< CLKCTRL APBCLKG0: PCA0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_EPCA0CEN_Pos     (11UL)                    /*!< CLKCTRL APBCLKG0: EPCA0CEN (Bit 11)                   */
#define CLKCTRL_APBCLKG0_EPCA0CEN_Msk     (0x800UL)                 /*!< CLKCTRL APBCLKG0: EPCA0CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_APBCLKG0_I2C1CEN_Pos      (10UL)                    /*!< CLKCTRL APBCLKG0: I2C1CEN (Bit 10)                    */
#define CLKCTRL_APBCLKG0_I2C1CEN_Msk      (0x400UL)                 /*!< CLKCTRL APBCLKG0: I2C1CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_I2C0CEN_Pos      (9UL)                     /*!< CLKCTRL APBCLKG0: I2C0CEN (Bit 9)                     */
#define CLKCTRL_APBCLKG0_I2C0CEN_Msk      (0x200UL)                 /*!< CLKCTRL APBCLKG0: I2C0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_SPI2CEN_Pos      (8UL)                     /*!< CLKCTRL APBCLKG0: SPI2CEN (Bit 8)                     */
#define CLKCTRL_APBCLKG0_SPI2CEN_Msk      (0x100UL)                 /*!< CLKCTRL APBCLKG0: SPI2CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_SPI1CEN_Pos      (7UL)                     /*!< CLKCTRL APBCLKG0: SPI1CEN (Bit 7)                     */
#define CLKCTRL_APBCLKG0_SPI1CEN_Msk      (0x80UL)                  /*!< CLKCTRL APBCLKG0: SPI1CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_SPI0CEN_Pos      (6UL)                     /*!< CLKCTRL APBCLKG0: SPI0CEN (Bit 6)                     */
#define CLKCTRL_APBCLKG0_SPI0CEN_Msk      (0x40UL)                  /*!< CLKCTRL APBCLKG0: SPI0CEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_APBCLKG0_UART1CEN_Pos     (5UL)                     /*!< CLKCTRL APBCLKG0: UART1CEN (Bit 5)                    */
#define CLKCTRL_APBCLKG0_UART1CEN_Msk     (0x20UL)                  /*!< CLKCTRL APBCLKG0: UART1CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_APBCLKG0_UART0CEN_Pos     (4UL)                     /*!< CLKCTRL APBCLKG0: UART0CEN (Bit 4)                    */
#define CLKCTRL_APBCLKG0_UART0CEN_Msk     (0x10UL)                  /*!< CLKCTRL APBCLKG0: UART0CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_APBCLKG0_USART1CEN_Pos    (3UL)                     /*!< CLKCTRL APBCLKG0: USART1CEN (Bit 3)                   */
#define CLKCTRL_APBCLKG0_USART1CEN_Msk    (0x8UL)                   /*!< CLKCTRL APBCLKG0: USART1CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_APBCLKG0_USART0CEN_Pos    (2UL)                     /*!< CLKCTRL APBCLKG0: USART0CEN (Bit 2)                   */
#define CLKCTRL_APBCLKG0_USART0CEN_Msk    (0x4UL)                   /*!< CLKCTRL APBCLKG0: USART0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_APBCLKG0_PB0CEN_Pos       (1UL)                     /*!< CLKCTRL APBCLKG0: PB0CEN (Bit 1)                      */
#define CLKCTRL_APBCLKG0_PB0CEN_Msk       (0x2UL)                   /*!< CLKCTRL APBCLKG0: PB0CEN (Bitfield-Mask: 0x01)        */
#define CLKCTRL_APBCLKG0_PLL0CEN_Pos      (0UL)                     /*!< CLKCTRL APBCLKG0: PLL0CEN (Bit 0)                     */
#define CLKCTRL_APBCLKG0_PLL0CEN_Msk      (0x1UL)                   /*!< CLKCTRL APBCLKG0: PLL0CEN (Bitfield-Mask: 0x01)       */
/* =====================================================  APBCLKG0_SET  ====================================================== */
/* =====================================================  APBCLKG0_CLR  ====================================================== */
/* =======================================================  APBCLKG1  ======================================================== */
#define CLKCTRL_APBCLKG1_MISC2CEN_Pos     (2UL)                     /*!< CLKCTRL APBCLKG1: MISC2CEN (Bit 2)                    */
#define CLKCTRL_APBCLKG1_MISC2CEN_Msk     (0x4UL)                   /*!< CLKCTRL APBCLKG1: MISC2CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_APBCLKG1_MISC1CEN_Pos     (1UL)                     /*!< CLKCTRL APBCLKG1: MISC1CEN (Bit 1)                    */
#define CLKCTRL_APBCLKG1_MISC1CEN_Msk     (0x2UL)                   /*!< CLKCTRL APBCLKG1: MISC1CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_APBCLKG1_MISC0CEN_Pos     (0UL)                     /*!< CLKCTRL APBCLKG1: MISC0CEN (Bit 0)                    */
#define CLKCTRL_APBCLKG1_MISC0CEN_Msk     (0x1UL)                   /*!< CLKCTRL APBCLKG1: MISC0CEN (Bitfield-Mask: 0x01)      */
/* =====================================================  APBCLKG1_SET  ====================================================== */
/* =====================================================  APBCLKG1_CLR  ====================================================== */
/* =========================================================  PM3CN  ========================================================= */
#define CLKCTRL_PM3CN_PM3CEN_Pos          (16UL)                    /*!< CLKCTRL PM3CN: PM3CEN (Bit 16)                        */
#define CLKCTRL_PM3CN_PM3CEN_Msk          (0x10000UL)               /*!< CLKCTRL PM3CN: PM3CEN (Bitfield-Mask: 0x01)           */
#define CLKCTRL_PM3CN_PM3CSEL_Pos         (0UL)                     /*!< CLKCTRL PM3CN: PM3CSEL (Bit 0)                        */
#define CLKCTRL_PM3CN_PM3CSEL_Msk         (0x7UL)                   /*!< CLKCTRL PM3CN: PM3CSEL (Bitfield-Mask: 0x07)          */


/* =========================================================================================================================== */
/* ================                                          RSTSRC                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  RESETEN  ======================================================== */
#define RSTSRC_RESETEN_WAKEREN_Pos        (11UL)                    /*!< RSTSRC RESETEN: WAKEREN (Bit 11)                      */
#define RSTSRC_RESETEN_WAKEREN_Msk        (0x800UL)                 /*!< RSTSRC RESETEN: WAKEREN (Bitfield-Mask: 0x01)         */
#define RSTSRC_RESETEN_RTC0REN_Pos        (10UL)                    /*!< RSTSRC RESETEN: RTC0REN (Bit 10)                      */
#define RSTSRC_RESETEN_RTC0REN_Msk        (0x400UL)                 /*!< RSTSRC RESETEN: RTC0REN (Bitfield-Mask: 0x01)         */
#define RSTSRC_RESETEN_USB0REN_Pos        (9UL)                     /*!< RSTSRC RESETEN: USB0REN (Bit 9)                       */
#define RSTSRC_RESETEN_USB0REN_Msk        (0x200UL)                 /*!< RSTSRC RESETEN: USB0REN (Bitfield-Mask: 0x01)         */
#define RSTSRC_RESETEN_CMP1REN_Pos        (8UL)                     /*!< RSTSRC RESETEN: CMP1REN (Bit 8)                       */
#define RSTSRC_RESETEN_CMP1REN_Msk        (0x100UL)                 /*!< RSTSRC RESETEN: CMP1REN (Bitfield-Mask: 0x01)         */
#define RSTSRC_RESETEN_CMP0REN_Pos        (7UL)                     /*!< RSTSRC RESETEN: CMP0REN (Bit 7)                       */
#define RSTSRC_RESETEN_CMP0REN_Msk        (0x80UL)                  /*!< RSTSRC RESETEN: CMP0REN (Bitfield-Mask: 0x01)         */
#define RSTSRC_RESETEN_SWREN_Pos          (6UL)                     /*!< RSTSRC RESETEN: SWREN (Bit 6)                         */
#define RSTSRC_RESETEN_SWREN_Msk          (0x40UL)                  /*!< RSTSRC RESETEN: SWREN (Bitfield-Mask: 0x01)           */
#define RSTSRC_RESETEN_WDTREN_Pos         (5UL)                     /*!< RSTSRC RESETEN: WDTREN (Bit 5)                        */
#define RSTSRC_RESETEN_WDTREN_Msk         (0x20UL)                  /*!< RSTSRC RESETEN: WDTREN (Bitfield-Mask: 0x01)          */
#define RSTSRC_RESETEN_MCDREN_Pos         (4UL)                     /*!< RSTSRC RESETEN: MCDREN (Bit 4)                        */
#define RSTSRC_RESETEN_MCDREN_Msk         (0x10UL)                  /*!< RSTSRC RESETEN: MCDREN (Bitfield-Mask: 0x01)          */
#define RSTSRC_RESETEN_VMONREN_Pos        (2UL)                     /*!< RSTSRC RESETEN: VMONREN (Bit 2)                       */
#define RSTSRC_RESETEN_VMONREN_Msk        (0x4UL)                   /*!< RSTSRC RESETEN: VMONREN (Bitfield-Mask: 0x01)         */
/* ======================================================  RESETEN_SET  ====================================================== */
/* ======================================================  RESETEN_CLR  ====================================================== */
/* =======================================================  RESETFLAG  ======================================================= */
#define RSTSRC_RESETFLAG_WAKERF_Pos       (11UL)                    /*!< RSTSRC RESETFLAG: WAKERF (Bit 11)                     */
#define RSTSRC_RESETFLAG_WAKERF_Msk       (0x800UL)                 /*!< RSTSRC RESETFLAG: WAKERF (Bitfield-Mask: 0x01)        */
#define RSTSRC_RESETFLAG_RTC0RF_Pos       (10UL)                    /*!< RSTSRC RESETFLAG: RTC0RF (Bit 10)                     */
#define RSTSRC_RESETFLAG_RTC0RF_Msk       (0x400UL)                 /*!< RSTSRC RESETFLAG: RTC0RF (Bitfield-Mask: 0x01)        */
#define RSTSRC_RESETFLAG_USB0RF_Pos       (9UL)                     /*!< RSTSRC RESETFLAG: USB0RF (Bit 9)                      */
#define RSTSRC_RESETFLAG_USB0RF_Msk       (0x200UL)                 /*!< RSTSRC RESETFLAG: USB0RF (Bitfield-Mask: 0x01)        */
#define RSTSRC_RESETFLAG_CMP1RF_Pos       (8UL)                     /*!< RSTSRC RESETFLAG: CMP1RF (Bit 8)                      */
#define RSTSRC_RESETFLAG_CMP1RF_Msk       (0x100UL)                 /*!< RSTSRC RESETFLAG: CMP1RF (Bitfield-Mask: 0x01)        */
#define RSTSRC_RESETFLAG_CMP0RF_Pos       (7UL)                     /*!< RSTSRC RESETFLAG: CMP0RF (Bit 7)                      */
#define RSTSRC_RESETFLAG_CMP0RF_Msk       (0x80UL)                  /*!< RSTSRC RESETFLAG: CMP0RF (Bitfield-Mask: 0x01)        */
#define RSTSRC_RESETFLAG_SWRF_Pos         (6UL)                     /*!< RSTSRC RESETFLAG: SWRF (Bit 6)                        */
#define RSTSRC_RESETFLAG_SWRF_Msk         (0x40UL)                  /*!< RSTSRC RESETFLAG: SWRF (Bitfield-Mask: 0x01)          */
#define RSTSRC_RESETFLAG_WDTRF_Pos        (5UL)                     /*!< RSTSRC RESETFLAG: WDTRF (Bit 5)                       */
#define RSTSRC_RESETFLAG_WDTRF_Msk        (0x20UL)                  /*!< RSTSRC RESETFLAG: WDTRF (Bitfield-Mask: 0x01)         */
#define RSTSRC_RESETFLAG_MCDRF_Pos        (4UL)                     /*!< RSTSRC RESETFLAG: MCDRF (Bit 4)                       */
#define RSTSRC_RESETFLAG_MCDRF_Msk        (0x10UL)                  /*!< RSTSRC RESETFLAG: MCDRF (Bitfield-Mask: 0x01)         */
#define RSTSRC_RESETFLAG_CORERF_Pos       (3UL)                     /*!< RSTSRC RESETFLAG: CORERF (Bit 3)                      */
#define RSTSRC_RESETFLAG_CORERF_Msk       (0x8UL)                   /*!< RSTSRC RESETFLAG: CORERF (Bitfield-Mask: 0x01)        */
#define RSTSRC_RESETFLAG_VMONRF_Pos       (2UL)                     /*!< RSTSRC RESETFLAG: VMONRF (Bit 2)                      */
#define RSTSRC_RESETFLAG_VMONRF_Msk       (0x4UL)                   /*!< RSTSRC RESETFLAG: VMONRF (Bitfield-Mask: 0x01)        */
#define RSTSRC_RESETFLAG_PORRF_Pos        (1UL)                     /*!< RSTSRC RESETFLAG: PORRF (Bit 1)                       */
#define RSTSRC_RESETFLAG_PORRF_Msk        (0x2UL)                   /*!< RSTSRC RESETFLAG: PORRF (Bitfield-Mask: 0x01)         */
#define RSTSRC_RESETFLAG_PINRF_Pos        (0UL)                     /*!< RSTSRC RESETFLAG: PINRF (Bit 0)                       */
#define RSTSRC_RESETFLAG_PINRF_Msk        (0x1UL)                   /*!< RSTSRC RESETFLAG: PINRF (Bitfield-Mask: 0x01)         */
/* ========================================================  CONFIG  ========================================================= */
#define RSTSRC_CONFIG_PMSEL_Pos           (0UL)                     /*!< RSTSRC CONFIG: PMSEL (Bit 0)                          */
#define RSTSRC_CONFIG_PMSEL_Msk           (0x1UL)                   /*!< RSTSRC CONFIG: PMSEL (Bitfield-Mask: 0x01)            */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                         FLASHCTRL                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define FLASHCTRL_CONFIG_BUSYF_Pos        (20UL)                    /*!< FLASHCTRL CONFIG: BUSYF (Bit 20)                      */
#define FLASHCTRL_CONFIG_BUSYF_Msk        (0x100000UL)              /*!< FLASHCTRL CONFIG: BUSYF (Bitfield-Mask: 0x01)         */
#define FLASHCTRL_CONFIG_BUFSTS_Pos       (19UL)                    /*!< FLASHCTRL CONFIG: BUFSTS (Bit 19)                     */
#define FLASHCTRL_CONFIG_BUFSTS_Msk       (0x80000UL)               /*!< FLASHCTRL CONFIG: BUFSTS (Bitfield-Mask: 0x01)        */
#define FLASHCTRL_CONFIG_ERASEEN_Pos      (18UL)                    /*!< FLASHCTRL CONFIG: ERASEEN (Bit 18)                    */
#define FLASHCTRL_CONFIG_ERASEEN_Msk      (0x40000UL)               /*!< FLASHCTRL CONFIG: ERASEEN (Bitfield-Mask: 0x01)       */
#define FLASHCTRL_CONFIG_SQWEN_Pos        (16UL)                    /*!< FLASHCTRL CONFIG: SQWEN (Bit 16)                      */
#define FLASHCTRL_CONFIG_SQWEN_Msk        (0x10000UL)               /*!< FLASHCTRL CONFIG: SQWEN (Bitfield-Mask: 0x01)         */
#define FLASHCTRL_CONFIG_PFINH_Pos        (7UL)                     /*!< FLASHCTRL CONFIG: PFINH (Bit 7)                       */
#define FLASHCTRL_CONFIG_PFINH_Msk        (0x80UL)                  /*!< FLASHCTRL CONFIG: PFINH (Bitfield-Mask: 0x01)         */
#define FLASHCTRL_CONFIG_DPFEN_Pos        (6UL)                     /*!< FLASHCTRL CONFIG: DPFEN (Bit 6)                       */
#define FLASHCTRL_CONFIG_DPFEN_Msk        (0x40UL)                  /*!< FLASHCTRL CONFIG: DPFEN (Bitfield-Mask: 0x01)         */
#define FLASHCTRL_CONFIG_RDSEN_Pos        (4UL)                     /*!< FLASHCTRL CONFIG: RDSEN (Bit 4)                       */
#define FLASHCTRL_CONFIG_RDSEN_Msk        (0x10UL)                  /*!< FLASHCTRL CONFIG: RDSEN (Bitfield-Mask: 0x01)         */
#define FLASHCTRL_CONFIG_SPMD_Pos         (0UL)                     /*!< FLASHCTRL CONFIG: SPMD (Bit 0)                        */
#define FLASHCTRL_CONFIG_SPMD_Msk         (0x3UL)                   /*!< FLASHCTRL CONFIG: SPMD (Bitfield-Mask: 0x03)          */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  WRADDR  ========================================================= */
/* ========================================================  WRDATA  ========================================================= */
/* ==========================================================  KEY  ========================================================== */
#define FLASHCTRL_KEY_KEY_Pos             (0UL)                     /*!< FLASHCTRL KEY: KEY (Bit 0)                            */
#define FLASHCTRL_KEY_KEY_Msk             (0xffUL)                  /*!< FLASHCTRL KEY: KEY (Bitfield-Mask: 0xff)              */
/* =======================================================  TCONTROL  ======================================================== */
#define FLASHCTRL_TCONTROL_FLRTMD_Pos     (6UL)                     /*!< FLASHCTRL TCONTROL: FLRTMD (Bit 6)                    */
#define FLASHCTRL_TCONTROL_FLRTMD_Msk     (0x40UL)                  /*!< FLASHCTRL TCONTROL: FLRTMD (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                           VMON                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define VMON_CONTROL_VMONEN_Pos           (31UL)                    /*!< VMON CONTROL: VMONEN (Bit 31)                         */
#define VMON_CONTROL_VMONEN_Msk           (0x80000000UL)            /*!< VMON CONTROL: VMONEN (Bitfield-Mask: 0x01)            */
#define VMON_CONTROL_VREGINLIEN_Pos       (7UL)                     /*!< VMON CONTROL: VREGINLIEN (Bit 7)                      */
#define VMON_CONTROL_VREGINLIEN_Msk       (0x80UL)                  /*!< VMON CONTROL: VREGINLIEN (Bitfield-Mask: 0x01)        */
#define VMON_CONTROL_VDDLIEN_Pos          (6UL)                     /*!< VMON CONTROL: VDDLIEN (Bit 6)                         */
#define VMON_CONTROL_VDDLIEN_Msk          (0x40UL)                  /*!< VMON CONTROL: VDDLIEN (Bitfield-Mask: 0x01)           */
#define VMON_CONTROL_VDDHITHEN_Pos        (4UL)                     /*!< VMON CONTROL: VDDHITHEN (Bit 4)                       */
#define VMON_CONTROL_VDDHITHEN_Msk        (0x10UL)                  /*!< VMON CONTROL: VDDHITHEN (Bitfield-Mask: 0x01)         */
#define VMON_CONTROL_VDDLI_Pos            (3UL)                     /*!< VMON CONTROL: VDDLI (Bit 3)                           */
#define VMON_CONTROL_VDDLI_Msk            (0x8UL)                   /*!< VMON CONTROL: VDDLI (Bitfield-Mask: 0x01)             */
#define VMON_CONTROL_VDDRSTF_Pos          (2UL)                     /*!< VMON CONTROL: VDDRSTF (Bit 2)                         */
#define VMON_CONTROL_VDDRSTF_Msk          (0x4UL)                   /*!< VMON CONTROL: VDDRSTF (Bitfield-Mask: 0x01)           */
#define VMON_CONTROL_VREGINLI_Pos         (1UL)                     /*!< VMON CONTROL: VREGINLI (Bit 1)                        */
#define VMON_CONTROL_VREGINLI_Msk         (0x2UL)                   /*!< VMON CONTROL: VREGINLI (Bitfield-Mask: 0x01)          */
#define VMON_CONTROL_VREGINSEN_Pos        (0UL)                     /*!< VMON CONTROL: VREGINSEN (Bit 0)                       */
#define VMON_CONTROL_VREGINSEN_Msk        (0x1UL)                   /*!< VMON CONTROL: VREGINSEN (Bitfield-Mask: 0x01)         */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                          WDTIMER                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define WDTIMER_CONTROL_DBGMD_Pos         (1UL)                     /*!< WDTIMER CONTROL: DBGMD (Bit 1)                        */
#define WDTIMER_CONTROL_DBGMD_Msk         (0x2UL)                   /*!< WDTIMER CONTROL: DBGMD (Bitfield-Mask: 0x01)          */
#define WDTIMER_CONTROL_EWIEN_Pos         (0UL)                     /*!< WDTIMER CONTROL: EWIEN (Bit 0)                        */
#define WDTIMER_CONTROL_EWIEN_Msk         (0x1UL)                   /*!< WDTIMER CONTROL: EWIEN (Bitfield-Mask: 0x01)          */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  STATUS  ========================================================= */
#define WDTIMER_STATUS_UPDSTS_Pos         (4UL)                     /*!< WDTIMER STATUS: UPDSTS (Bit 4)                        */
#define WDTIMER_STATUS_UPDSTS_Msk         (0x10UL)                  /*!< WDTIMER STATUS: UPDSTS (Bitfield-Mask: 0x01)          */
#define WDTIMER_STATUS_RTHF_Pos           (3UL)                     /*!< WDTIMER STATUS: RTHF (Bit 3)                          */
#define WDTIMER_STATUS_RTHF_Msk           (0x8UL)                   /*!< WDTIMER STATUS: RTHF (Bitfield-Mask: 0x01)            */
#define WDTIMER_STATUS_EWI_Pos            (2UL)                     /*!< WDTIMER STATUS: EWI (Bit 2)                           */
#define WDTIMER_STATUS_EWI_Msk            (0x4UL)                   /*!< WDTIMER STATUS: EWI (Bitfield-Mask: 0x01)             */
#define WDTIMER_STATUS_PRIVSTS_Pos        (1UL)                     /*!< WDTIMER STATUS: PRIVSTS (Bit 1)                       */
#define WDTIMER_STATUS_PRIVSTS_Msk        (0x2UL)                   /*!< WDTIMER STATUS: PRIVSTS (Bitfield-Mask: 0x01)         */
#define WDTIMER_STATUS_KEYSTS_Pos         (0UL)                     /*!< WDTIMER STATUS: KEYSTS (Bit 0)                        */
#define WDTIMER_STATUS_KEYSTS_Msk         (0x1UL)                   /*!< WDTIMER STATUS: KEYSTS (Bitfield-Mask: 0x01)          */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* =======================================================  THRESHOLD  ======================================================= */
#define WDTIMER_THRESHOLD_RTH_Pos         (16UL)                    /*!< WDTIMER THRESHOLD: RTH (Bit 16)                       */
#define WDTIMER_THRESHOLD_RTH_Msk         (0xffff0000UL)            /*!< WDTIMER THRESHOLD: RTH (Bitfield-Mask: 0xffff)        */
#define WDTIMER_THRESHOLD_EWTH_Pos        (0UL)                     /*!< WDTIMER THRESHOLD: EWTH (Bit 0)                       */
#define WDTIMER_THRESHOLD_EWTH_Msk        (0xffffUL)                /*!< WDTIMER THRESHOLD: EWTH (Bitfield-Mask: 0xffff)       */
/* ========================================================  WDTKEY  ========================================================= */
#define WDTIMER_WDTKEY_KEY_Pos            (0UL)                     /*!< WDTIMER WDTKEY: KEY (Bit 0)                           */
#define WDTIMER_WDTKEY_KEY_Msk            (0xffUL)                  /*!< WDTIMER WDTKEY: KEY (Bitfield-Mask: 0xff)             */


/* =========================================================================================================================== */
/* ================                                           IDAC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define IDAC_CONTROL_IDACEN_Pos           (31UL)                    /*!< IDAC CONTROL: IDACEN (Bit 31)                         */
#define IDAC_CONTROL_IDACEN_Msk           (0x80000000UL)            /*!< IDAC CONTROL: IDACEN (Bitfield-Mask: 0x01)            */
#define IDAC_CONTROL_LOADEN_Pos           (30UL)                    /*!< IDAC CONTROL: LOADEN (Bit 30)                         */
#define IDAC_CONTROL_LOADEN_Msk           (0x40000000UL)            /*!< IDAC CONTROL: LOADEN (Bitfield-Mask: 0x01)            */
#define IDAC_CONTROL_DBGMD_Pos            (29UL)                    /*!< IDAC CONTROL: DBGMD (Bit 29)                          */
#define IDAC_CONTROL_DBGMD_Msk            (0x20000000UL)            /*!< IDAC CONTROL: DBGMD (Bitfield-Mask: 0x01)             */
#define IDAC_CONTROL_WEIEN_Pos            (22UL)                    /*!< IDAC CONTROL: WEIEN (Bit 22)                          */
#define IDAC_CONTROL_WEIEN_Msk            (0x400000UL)              /*!< IDAC CONTROL: WEIEN (Bitfield-Mask: 0x01)             */
#define IDAC_CONTROL_URIEN_Pos            (21UL)                    /*!< IDAC CONTROL: URIEN (Bit 21)                          */
#define IDAC_CONTROL_URIEN_Msk            (0x200000UL)              /*!< IDAC CONTROL: URIEN (Bitfield-Mask: 0x01)             */
#define IDAC_CONTROL_ORIEN_Pos            (20UL)                    /*!< IDAC CONTROL: ORIEN (Bit 20)                          */
#define IDAC_CONTROL_ORIEN_Msk            (0x100000UL)              /*!< IDAC CONTROL: ORIEN (Bitfield-Mask: 0x01)             */
#define IDAC_CONTROL_WRAPEN_Pos           (16UL)                    /*!< IDAC CONTROL: WRAPEN (Bit 16)                         */
#define IDAC_CONTROL_WRAPEN_Msk           (0x10000UL)               /*!< IDAC CONTROL: WRAPEN (Bitfield-Mask: 0x01)            */
#define IDAC_CONTROL_TRIGINH_Pos          (13UL)                    /*!< IDAC CONTROL: TRIGINH (Bit 13)                        */
#define IDAC_CONTROL_TRIGINH_Msk          (0x2000UL)                /*!< IDAC CONTROL: TRIGINH (Bitfield-Mask: 0x01)           */
#define IDAC_CONTROL_BUFRESET_Pos         (12UL)                    /*!< IDAC CONTROL: BUFRESET (Bit 12)                       */
#define IDAC_CONTROL_BUFRESET_Msk         (0x1000UL)                /*!< IDAC CONTROL: BUFRESET (Bitfield-Mask: 0x01)          */
#define IDAC_CONTROL_JSEL_Pos             (11UL)                    /*!< IDAC CONTROL: JSEL (Bit 11)                           */
#define IDAC_CONTROL_JSEL_Msk             (0x800UL)                 /*!< IDAC CONTROL: JSEL (Bitfield-Mask: 0x01)              */
#define IDAC_CONTROL_DMARUN_Pos           (10UL)                    /*!< IDAC CONTROL: DMARUN (Bit 10)                         */
#define IDAC_CONTROL_DMARUN_Msk           (0x400UL)                 /*!< IDAC CONTROL: DMARUN (Bitfield-Mask: 0x01)            */
#define IDAC_CONTROL_INFMT_Pos            (8UL)                     /*!< IDAC CONTROL: INFMT (Bit 8)                           */
#define IDAC_CONTROL_INFMT_Msk            (0x300UL)                 /*!< IDAC CONTROL: INFMT (Bitfield-Mask: 0x03)             */
#define IDAC_CONTROL_OUTMD_Pos            (6UL)                     /*!< IDAC CONTROL: OUTMD (Bit 6)                           */
#define IDAC_CONTROL_OUTMD_Msk            (0xc0UL)                  /*!< IDAC CONTROL: OUTMD (Bitfield-Mask: 0x03)             */
#define IDAC_CONTROL_ETRIG_Pos            (3UL)                     /*!< IDAC CONTROL: ETRIG (Bit 3)                           */
#define IDAC_CONTROL_ETRIG_Msk            (0x38UL)                  /*!< IDAC CONTROL: ETRIG (Bitfield-Mask: 0x07)             */
#define IDAC_CONTROL_OUPDT_Pos            (0UL)                     /*!< IDAC CONTROL: OUPDT (Bit 0)                           */
#define IDAC_CONTROL_OUPDT_Msk            (0x7UL)                   /*!< IDAC CONTROL: OUPDT (Bitfield-Mask: 0x07)             */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  DATA  ========================================================== */
/* =======================================================  BUFSTATUS  ======================================================= */
#define IDAC_BUFSTATUS_WEI_Pos            (6UL)                     /*!< IDAC BUFSTATUS: WEI (Bit 6)                           */
#define IDAC_BUFSTATUS_WEI_Msk            (0x40UL)                  /*!< IDAC BUFSTATUS: WEI (Bitfield-Mask: 0x01)             */
#define IDAC_BUFSTATUS_URI_Pos            (5UL)                     /*!< IDAC BUFSTATUS: URI (Bit 5)                           */
#define IDAC_BUFSTATUS_URI_Msk            (0x20UL)                  /*!< IDAC BUFSTATUS: URI (Bitfield-Mask: 0x01)             */
#define IDAC_BUFSTATUS_ORI_Pos            (4UL)                     /*!< IDAC BUFSTATUS: ORI (Bit 4)                           */
#define IDAC_BUFSTATUS_ORI_Msk            (0x10UL)                  /*!< IDAC BUFSTATUS: ORI (Bitfield-Mask: 0x01)             */
#define IDAC_BUFSTATUS_LEVEL_Pos          (0UL)                     /*!< IDAC BUFSTATUS: LEVEL (Bit 0)                         */
#define IDAC_BUFSTATUS_LEVEL_Msk          (0x7UL)                   /*!< IDAC BUFSTATUS: LEVEL (Bitfield-Mask: 0x07)           */
/* =====================================================  BUFSTATUS_SET  ===================================================== */
/* =====================================================  BUFSTATUS_CLR  ===================================================== */
/* =======================================================  BUFFER10  ======================================================== */
#define IDAC_BUFFER10_BUFFER1_Pos         (16UL)                    /*!< IDAC BUFFER10: BUFFER1 (Bit 16)                       */
#define IDAC_BUFFER10_BUFFER1_Msk         (0xffff0000UL)            /*!< IDAC BUFFER10: BUFFER1 (Bitfield-Mask: 0xffff)        */
#define IDAC_BUFFER10_BUFFER0_Pos         (0UL)                     /*!< IDAC BUFFER10: BUFFER0 (Bit 0)                        */
#define IDAC_BUFFER10_BUFFER0_Msk         (0xffffUL)                /*!< IDAC BUFFER10: BUFFER0 (Bitfield-Mask: 0xffff)        */
/* =======================================================  BUFFER32  ======================================================== */
#define IDAC_BUFFER32_BUFFER3_Pos         (16UL)                    /*!< IDAC BUFFER32: BUFFER3 (Bit 16)                       */
#define IDAC_BUFFER32_BUFFER3_Msk         (0xffff0000UL)            /*!< IDAC BUFFER32: BUFFER3 (Bitfield-Mask: 0xffff)        */
#define IDAC_BUFFER32_BUFFER2_Pos         (0UL)                     /*!< IDAC BUFFER32: BUFFER2 (Bit 0)                        */
#define IDAC_BUFFER32_BUFFER2_Msk         (0xffffUL)                /*!< IDAC BUFFER32: BUFFER2 (Bitfield-Mask: 0xffff)        */
/* ========================================================  GAINADJ  ======================================================== */
#define IDAC_GAINADJ_GAINADJ_Pos          (0UL)                     /*!< IDAC GAINADJ: GAINADJ (Bit 0)                         */
#define IDAC_GAINADJ_GAINADJ_Msk          (0x1fUL)                  /*!< IDAC GAINADJ: GAINADJ (Bitfield-Mask: 0x1f)           */


/* =========================================================================================================================== */
/* ================                                          DMACTRL                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
#define DMACTRL_STATUS_NUMCHAN_Pos        (16UL)                    /*!< DMACTRL STATUS: NUMCHAN (Bit 16)                      */
#define DMACTRL_STATUS_NUMCHAN_Msk        (0x1f0000UL)              /*!< DMACTRL STATUS: NUMCHAN (Bitfield-Mask: 0x1f)         */
#define DMACTRL_STATUS_STATE_Pos          (4UL)                     /*!< DMACTRL STATUS: STATE (Bit 4)                         */
#define DMACTRL_STATUS_STATE_Msk          (0xf0UL)                  /*!< DMACTRL STATUS: STATE (Bitfield-Mask: 0x0f)           */
#define DMACTRL_STATUS_DMAENSTS_Pos       (0UL)                     /*!< DMACTRL STATUS: DMAENSTS (Bit 0)                      */
#define DMACTRL_STATUS_DMAENSTS_Msk       (0x1UL)                   /*!< DMACTRL STATUS: DMAENSTS (Bitfield-Mask: 0x01)        */
/* ========================================================  CONFIG  ========================================================= */
#define DMACTRL_CONFIG_DMAEN_Pos          (0UL)                     /*!< DMACTRL CONFIG: DMAEN (Bit 0)                         */
#define DMACTRL_CONFIG_DMAEN_Msk          (0x1UL)                   /*!< DMACTRL CONFIG: DMAEN (Bitfield-Mask: 0x01)           */
/* ========================================================  BASEPTR  ======================================================== */
#define DMACTRL_BASEPTR_BASEPTR_Pos       (5UL)                     /*!< DMACTRL BASEPTR: BASEPTR (Bit 5)                      */
#define DMACTRL_BASEPTR_BASEPTR_Msk       (0xffffffe0UL)            /*!< DMACTRL BASEPTR: BASEPTR (Bitfield-Mask: 0x7ffffff)   */
/* =======================================================  ABASEPTR  ======================================================== */
/* =======================================================  CHSTATUS  ======================================================== */
#define DMACTRL_CHSTATUS_CH15_Pos         (15UL)                    /*!< DMACTRL CHSTATUS: CH15 (Bit 15)                       */
#define DMACTRL_CHSTATUS_CH15_Msk         (0x8000UL)                /*!< DMACTRL CHSTATUS: CH15 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHSTATUS_CH14_Pos         (14UL)                    /*!< DMACTRL CHSTATUS: CH14 (Bit 14)                       */
#define DMACTRL_CHSTATUS_CH14_Msk         (0x4000UL)                /*!< DMACTRL CHSTATUS: CH14 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHSTATUS_CH13_Pos         (13UL)                    /*!< DMACTRL CHSTATUS: CH13 (Bit 13)                       */
#define DMACTRL_CHSTATUS_CH13_Msk         (0x2000UL)                /*!< DMACTRL CHSTATUS: CH13 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHSTATUS_CH12_Pos         (12UL)                    /*!< DMACTRL CHSTATUS: CH12 (Bit 12)                       */
#define DMACTRL_CHSTATUS_CH12_Msk         (0x1000UL)                /*!< DMACTRL CHSTATUS: CH12 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHSTATUS_CH11_Pos         (11UL)                    /*!< DMACTRL CHSTATUS: CH11 (Bit 11)                       */
#define DMACTRL_CHSTATUS_CH11_Msk         (0x800UL)                 /*!< DMACTRL CHSTATUS: CH11 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHSTATUS_CH10_Pos         (10UL)                    /*!< DMACTRL CHSTATUS: CH10 (Bit 10)                       */
#define DMACTRL_CHSTATUS_CH10_Msk         (0x400UL)                 /*!< DMACTRL CHSTATUS: CH10 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHSTATUS_CH9_Pos          (9UL)                     /*!< DMACTRL CHSTATUS: CH9 (Bit 9)                         */
#define DMACTRL_CHSTATUS_CH9_Msk          (0x200UL)                 /*!< DMACTRL CHSTATUS: CH9 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH8_Pos          (8UL)                     /*!< DMACTRL CHSTATUS: CH8 (Bit 8)                         */
#define DMACTRL_CHSTATUS_CH8_Msk          (0x100UL)                 /*!< DMACTRL CHSTATUS: CH8 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH7_Pos          (7UL)                     /*!< DMACTRL CHSTATUS: CH7 (Bit 7)                         */
#define DMACTRL_CHSTATUS_CH7_Msk          (0x80UL)                  /*!< DMACTRL CHSTATUS: CH7 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH6_Pos          (6UL)                     /*!< DMACTRL CHSTATUS: CH6 (Bit 6)                         */
#define DMACTRL_CHSTATUS_CH6_Msk          (0x40UL)                  /*!< DMACTRL CHSTATUS: CH6 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH5_Pos          (5UL)                     /*!< DMACTRL CHSTATUS: CH5 (Bit 5)                         */
#define DMACTRL_CHSTATUS_CH5_Msk          (0x20UL)                  /*!< DMACTRL CHSTATUS: CH5 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH4_Pos          (4UL)                     /*!< DMACTRL CHSTATUS: CH4 (Bit 4)                         */
#define DMACTRL_CHSTATUS_CH4_Msk          (0x10UL)                  /*!< DMACTRL CHSTATUS: CH4 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH3_Pos          (3UL)                     /*!< DMACTRL CHSTATUS: CH3 (Bit 3)                         */
#define DMACTRL_CHSTATUS_CH3_Msk          (0x8UL)                   /*!< DMACTRL CHSTATUS: CH3 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH2_Pos          (2UL)                     /*!< DMACTRL CHSTATUS: CH2 (Bit 2)                         */
#define DMACTRL_CHSTATUS_CH2_Msk          (0x4UL)                   /*!< DMACTRL CHSTATUS: CH2 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH1_Pos          (1UL)                     /*!< DMACTRL CHSTATUS: CH1 (Bit 1)                         */
#define DMACTRL_CHSTATUS_CH1_Msk          (0x2UL)                   /*!< DMACTRL CHSTATUS: CH1 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSTATUS_CH0_Pos          (0UL)                     /*!< DMACTRL CHSTATUS: CH0 (Bit 0)                         */
#define DMACTRL_CHSTATUS_CH0_Msk          (0x1UL)                   /*!< DMACTRL CHSTATUS: CH0 (Bitfield-Mask: 0x01)           */
/* ========================================================  CHSWRCN  ======================================================== */
#define DMACTRL_CHSWRCN_CH15_Pos          (15UL)                    /*!< DMACTRL CHSWRCN: CH15 (Bit 15)                        */
#define DMACTRL_CHSWRCN_CH15_Msk          (0x8000UL)                /*!< DMACTRL CHSWRCN: CH15 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSWRCN_CH14_Pos          (14UL)                    /*!< DMACTRL CHSWRCN: CH14 (Bit 14)                        */
#define DMACTRL_CHSWRCN_CH14_Msk          (0x4000UL)                /*!< DMACTRL CHSWRCN: CH14 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSWRCN_CH13_Pos          (13UL)                    /*!< DMACTRL CHSWRCN: CH13 (Bit 13)                        */
#define DMACTRL_CHSWRCN_CH13_Msk          (0x2000UL)                /*!< DMACTRL CHSWRCN: CH13 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSWRCN_CH12_Pos          (12UL)                    /*!< DMACTRL CHSWRCN: CH12 (Bit 12)                        */
#define DMACTRL_CHSWRCN_CH12_Msk          (0x1000UL)                /*!< DMACTRL CHSWRCN: CH12 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSWRCN_CH11_Pos          (11UL)                    /*!< DMACTRL CHSWRCN: CH11 (Bit 11)                        */
#define DMACTRL_CHSWRCN_CH11_Msk          (0x800UL)                 /*!< DMACTRL CHSWRCN: CH11 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSWRCN_CH10_Pos          (10UL)                    /*!< DMACTRL CHSWRCN: CH10 (Bit 10)                        */
#define DMACTRL_CHSWRCN_CH10_Msk          (0x400UL)                 /*!< DMACTRL CHSWRCN: CH10 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHSWRCN_CH9_Pos           (9UL)                     /*!< DMACTRL CHSWRCN: CH9 (Bit 9)                          */
#define DMACTRL_CHSWRCN_CH9_Msk           (0x200UL)                 /*!< DMACTRL CHSWRCN: CH9 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH8_Pos           (8UL)                     /*!< DMACTRL CHSWRCN: CH8 (Bit 8)                          */
#define DMACTRL_CHSWRCN_CH8_Msk           (0x100UL)                 /*!< DMACTRL CHSWRCN: CH8 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH7_Pos           (7UL)                     /*!< DMACTRL CHSWRCN: CH7 (Bit 7)                          */
#define DMACTRL_CHSWRCN_CH7_Msk           (0x80UL)                  /*!< DMACTRL CHSWRCN: CH7 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH6_Pos           (6UL)                     /*!< DMACTRL CHSWRCN: CH6 (Bit 6)                          */
#define DMACTRL_CHSWRCN_CH6_Msk           (0x40UL)                  /*!< DMACTRL CHSWRCN: CH6 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH5_Pos           (5UL)                     /*!< DMACTRL CHSWRCN: CH5 (Bit 5)                          */
#define DMACTRL_CHSWRCN_CH5_Msk           (0x20UL)                  /*!< DMACTRL CHSWRCN: CH5 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH4_Pos           (4UL)                     /*!< DMACTRL CHSWRCN: CH4 (Bit 4)                          */
#define DMACTRL_CHSWRCN_CH4_Msk           (0x10UL)                  /*!< DMACTRL CHSWRCN: CH4 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH3_Pos           (3UL)                     /*!< DMACTRL CHSWRCN: CH3 (Bit 3)                          */
#define DMACTRL_CHSWRCN_CH3_Msk           (0x8UL)                   /*!< DMACTRL CHSWRCN: CH3 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH2_Pos           (2UL)                     /*!< DMACTRL CHSWRCN: CH2 (Bit 2)                          */
#define DMACTRL_CHSWRCN_CH2_Msk           (0x4UL)                   /*!< DMACTRL CHSWRCN: CH2 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH1_Pos           (1UL)                     /*!< DMACTRL CHSWRCN: CH1 (Bit 1)                          */
#define DMACTRL_CHSWRCN_CH1_Msk           (0x2UL)                   /*!< DMACTRL CHSWRCN: CH1 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHSWRCN_CH0_Pos           (0UL)                     /*!< DMACTRL CHSWRCN: CH0 (Bit 0)                          */
#define DMACTRL_CHSWRCN_CH0_Msk           (0x1UL)                   /*!< DMACTRL CHSWRCN: CH0 (Bitfield-Mask: 0x01)            */
/* =======================================================  CHREQMSET  ======================================================= */
#define DMACTRL_CHREQMSET_CH15_Pos        (15UL)                    /*!< DMACTRL CHREQMSET: CH15 (Bit 15)                      */
#define DMACTRL_CHREQMSET_CH15_Msk        (0x8000UL)                /*!< DMACTRL CHREQMSET: CH15 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMSET_CH14_Pos        (14UL)                    /*!< DMACTRL CHREQMSET: CH14 (Bit 14)                      */
#define DMACTRL_CHREQMSET_CH14_Msk        (0x4000UL)                /*!< DMACTRL CHREQMSET: CH14 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMSET_CH13_Pos        (13UL)                    /*!< DMACTRL CHREQMSET: CH13 (Bit 13)                      */
#define DMACTRL_CHREQMSET_CH13_Msk        (0x2000UL)                /*!< DMACTRL CHREQMSET: CH13 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMSET_CH12_Pos        (12UL)                    /*!< DMACTRL CHREQMSET: CH12 (Bit 12)                      */
#define DMACTRL_CHREQMSET_CH12_Msk        (0x1000UL)                /*!< DMACTRL CHREQMSET: CH12 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMSET_CH11_Pos        (11UL)                    /*!< DMACTRL CHREQMSET: CH11 (Bit 11)                      */
#define DMACTRL_CHREQMSET_CH11_Msk        (0x800UL)                 /*!< DMACTRL CHREQMSET: CH11 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMSET_CH10_Pos        (10UL)                    /*!< DMACTRL CHREQMSET: CH10 (Bit 10)                      */
#define DMACTRL_CHREQMSET_CH10_Msk        (0x400UL)                 /*!< DMACTRL CHREQMSET: CH10 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMSET_CH9_Pos         (9UL)                     /*!< DMACTRL CHREQMSET: CH9 (Bit 9)                        */
#define DMACTRL_CHREQMSET_CH9_Msk         (0x200UL)                 /*!< DMACTRL CHREQMSET: CH9 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH8_Pos         (8UL)                     /*!< DMACTRL CHREQMSET: CH8 (Bit 8)                        */
#define DMACTRL_CHREQMSET_CH8_Msk         (0x100UL)                 /*!< DMACTRL CHREQMSET: CH8 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH7_Pos         (7UL)                     /*!< DMACTRL CHREQMSET: CH7 (Bit 7)                        */
#define DMACTRL_CHREQMSET_CH7_Msk         (0x80UL)                  /*!< DMACTRL CHREQMSET: CH7 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH6_Pos         (6UL)                     /*!< DMACTRL CHREQMSET: CH6 (Bit 6)                        */
#define DMACTRL_CHREQMSET_CH6_Msk         (0x40UL)                  /*!< DMACTRL CHREQMSET: CH6 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH5_Pos         (5UL)                     /*!< DMACTRL CHREQMSET: CH5 (Bit 5)                        */
#define DMACTRL_CHREQMSET_CH5_Msk         (0x20UL)                  /*!< DMACTRL CHREQMSET: CH5 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH4_Pos         (4UL)                     /*!< DMACTRL CHREQMSET: CH4 (Bit 4)                        */
#define DMACTRL_CHREQMSET_CH4_Msk         (0x10UL)                  /*!< DMACTRL CHREQMSET: CH4 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH3_Pos         (3UL)                     /*!< DMACTRL CHREQMSET: CH3 (Bit 3)                        */
#define DMACTRL_CHREQMSET_CH3_Msk         (0x8UL)                   /*!< DMACTRL CHREQMSET: CH3 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH2_Pos         (2UL)                     /*!< DMACTRL CHREQMSET: CH2 (Bit 2)                        */
#define DMACTRL_CHREQMSET_CH2_Msk         (0x4UL)                   /*!< DMACTRL CHREQMSET: CH2 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH1_Pos         (1UL)                     /*!< DMACTRL CHREQMSET: CH1 (Bit 1)                        */
#define DMACTRL_CHREQMSET_CH1_Msk         (0x2UL)                   /*!< DMACTRL CHREQMSET: CH1 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMSET_CH0_Pos         (0UL)                     /*!< DMACTRL CHREQMSET: CH0 (Bit 0)                        */
#define DMACTRL_CHREQMSET_CH0_Msk         (0x1UL)                   /*!< DMACTRL CHREQMSET: CH0 (Bitfield-Mask: 0x01)          */
/* =======================================================  CHREQMCLR  ======================================================= */
#define DMACTRL_CHREQMCLR_CH15_Pos        (15UL)                    /*!< DMACTRL CHREQMCLR: CH15 (Bit 15)                      */
#define DMACTRL_CHREQMCLR_CH15_Msk        (0x8000UL)                /*!< DMACTRL CHREQMCLR: CH15 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMCLR_CH14_Pos        (14UL)                    /*!< DMACTRL CHREQMCLR: CH14 (Bit 14)                      */
#define DMACTRL_CHREQMCLR_CH14_Msk        (0x4000UL)                /*!< DMACTRL CHREQMCLR: CH14 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMCLR_CH13_Pos        (13UL)                    /*!< DMACTRL CHREQMCLR: CH13 (Bit 13)                      */
#define DMACTRL_CHREQMCLR_CH13_Msk        (0x2000UL)                /*!< DMACTRL CHREQMCLR: CH13 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMCLR_CH12_Pos        (12UL)                    /*!< DMACTRL CHREQMCLR: CH12 (Bit 12)                      */
#define DMACTRL_CHREQMCLR_CH12_Msk        (0x1000UL)                /*!< DMACTRL CHREQMCLR: CH12 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMCLR_CH11_Pos        (11UL)                    /*!< DMACTRL CHREQMCLR: CH11 (Bit 11)                      */
#define DMACTRL_CHREQMCLR_CH11_Msk        (0x800UL)                 /*!< DMACTRL CHREQMCLR: CH11 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMCLR_CH10_Pos        (10UL)                    /*!< DMACTRL CHREQMCLR: CH10 (Bit 10)                      */
#define DMACTRL_CHREQMCLR_CH10_Msk        (0x400UL)                 /*!< DMACTRL CHREQMCLR: CH10 (Bitfield-Mask: 0x01)         */
#define DMACTRL_CHREQMCLR_CH9_Pos         (9UL)                     /*!< DMACTRL CHREQMCLR: CH9 (Bit 9)                        */
#define DMACTRL_CHREQMCLR_CH9_Msk         (0x200UL)                 /*!< DMACTRL CHREQMCLR: CH9 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH8_Pos         (8UL)                     /*!< DMACTRL CHREQMCLR: CH8 (Bit 8)                        */
#define DMACTRL_CHREQMCLR_CH8_Msk         (0x100UL)                 /*!< DMACTRL CHREQMCLR: CH8 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH7_Pos         (7UL)                     /*!< DMACTRL CHREQMCLR: CH7 (Bit 7)                        */
#define DMACTRL_CHREQMCLR_CH7_Msk         (0x80UL)                  /*!< DMACTRL CHREQMCLR: CH7 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH6_Pos         (6UL)                     /*!< DMACTRL CHREQMCLR: CH6 (Bit 6)                        */
#define DMACTRL_CHREQMCLR_CH6_Msk         (0x40UL)                  /*!< DMACTRL CHREQMCLR: CH6 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH5_Pos         (5UL)                     /*!< DMACTRL CHREQMCLR: CH5 (Bit 5)                        */
#define DMACTRL_CHREQMCLR_CH5_Msk         (0x20UL)                  /*!< DMACTRL CHREQMCLR: CH5 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH4_Pos         (4UL)                     /*!< DMACTRL CHREQMCLR: CH4 (Bit 4)                        */
#define DMACTRL_CHREQMCLR_CH4_Msk         (0x10UL)                  /*!< DMACTRL CHREQMCLR: CH4 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH3_Pos         (3UL)                     /*!< DMACTRL CHREQMCLR: CH3 (Bit 3)                        */
#define DMACTRL_CHREQMCLR_CH3_Msk         (0x8UL)                   /*!< DMACTRL CHREQMCLR: CH3 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH2_Pos         (2UL)                     /*!< DMACTRL CHREQMCLR: CH2 (Bit 2)                        */
#define DMACTRL_CHREQMCLR_CH2_Msk         (0x4UL)                   /*!< DMACTRL CHREQMCLR: CH2 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH1_Pos         (1UL)                     /*!< DMACTRL CHREQMCLR: CH1 (Bit 1)                        */
#define DMACTRL_CHREQMCLR_CH1_Msk         (0x2UL)                   /*!< DMACTRL CHREQMCLR: CH1 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHREQMCLR_CH0_Pos         (0UL)                     /*!< DMACTRL CHREQMCLR: CH0 (Bit 0)                        */
#define DMACTRL_CHREQMCLR_CH0_Msk         (0x1UL)                   /*!< DMACTRL CHREQMCLR: CH0 (Bitfield-Mask: 0x01)          */
/* ========================================================  CHENSET  ======================================================== */
#define DMACTRL_CHENSET_CH15_Pos          (15UL)                    /*!< DMACTRL CHENSET: CH15 (Bit 15)                        */
#define DMACTRL_CHENSET_CH15_Msk          (0x8000UL)                /*!< DMACTRL CHENSET: CH15 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENSET_CH14_Pos          (14UL)                    /*!< DMACTRL CHENSET: CH14 (Bit 14)                        */
#define DMACTRL_CHENSET_CH14_Msk          (0x4000UL)                /*!< DMACTRL CHENSET: CH14 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENSET_CH13_Pos          (13UL)                    /*!< DMACTRL CHENSET: CH13 (Bit 13)                        */
#define DMACTRL_CHENSET_CH13_Msk          (0x2000UL)                /*!< DMACTRL CHENSET: CH13 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENSET_CH12_Pos          (12UL)                    /*!< DMACTRL CHENSET: CH12 (Bit 12)                        */
#define DMACTRL_CHENSET_CH12_Msk          (0x1000UL)                /*!< DMACTRL CHENSET: CH12 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENSET_CH11_Pos          (11UL)                    /*!< DMACTRL CHENSET: CH11 (Bit 11)                        */
#define DMACTRL_CHENSET_CH11_Msk          (0x800UL)                 /*!< DMACTRL CHENSET: CH11 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENSET_CH10_Pos          (10UL)                    /*!< DMACTRL CHENSET: CH10 (Bit 10)                        */
#define DMACTRL_CHENSET_CH10_Msk          (0x400UL)                 /*!< DMACTRL CHENSET: CH10 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENSET_CH9_Pos           (9UL)                     /*!< DMACTRL CHENSET: CH9 (Bit 9)                          */
#define DMACTRL_CHENSET_CH9_Msk           (0x200UL)                 /*!< DMACTRL CHENSET: CH9 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH8_Pos           (8UL)                     /*!< DMACTRL CHENSET: CH8 (Bit 8)                          */
#define DMACTRL_CHENSET_CH8_Msk           (0x100UL)                 /*!< DMACTRL CHENSET: CH8 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH7_Pos           (7UL)                     /*!< DMACTRL CHENSET: CH7 (Bit 7)                          */
#define DMACTRL_CHENSET_CH7_Msk           (0x80UL)                  /*!< DMACTRL CHENSET: CH7 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH6_Pos           (6UL)                     /*!< DMACTRL CHENSET: CH6 (Bit 6)                          */
#define DMACTRL_CHENSET_CH6_Msk           (0x40UL)                  /*!< DMACTRL CHENSET: CH6 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH5_Pos           (5UL)                     /*!< DMACTRL CHENSET: CH5 (Bit 5)                          */
#define DMACTRL_CHENSET_CH5_Msk           (0x20UL)                  /*!< DMACTRL CHENSET: CH5 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH4_Pos           (4UL)                     /*!< DMACTRL CHENSET: CH4 (Bit 4)                          */
#define DMACTRL_CHENSET_CH4_Msk           (0x10UL)                  /*!< DMACTRL CHENSET: CH4 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH3_Pos           (3UL)                     /*!< DMACTRL CHENSET: CH3 (Bit 3)                          */
#define DMACTRL_CHENSET_CH3_Msk           (0x8UL)                   /*!< DMACTRL CHENSET: CH3 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH2_Pos           (2UL)                     /*!< DMACTRL CHENSET: CH2 (Bit 2)                          */
#define DMACTRL_CHENSET_CH2_Msk           (0x4UL)                   /*!< DMACTRL CHENSET: CH2 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH1_Pos           (1UL)                     /*!< DMACTRL CHENSET: CH1 (Bit 1)                          */
#define DMACTRL_CHENSET_CH1_Msk           (0x2UL)                   /*!< DMACTRL CHENSET: CH1 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENSET_CH0_Pos           (0UL)                     /*!< DMACTRL CHENSET: CH0 (Bit 0)                          */
#define DMACTRL_CHENSET_CH0_Msk           (0x1UL)                   /*!< DMACTRL CHENSET: CH0 (Bitfield-Mask: 0x01)            */
/* ========================================================  CHENCLR  ======================================================== */
#define DMACTRL_CHENCLR_CH15_Pos          (15UL)                    /*!< DMACTRL CHENCLR: CH15 (Bit 15)                        */
#define DMACTRL_CHENCLR_CH15_Msk          (0x8000UL)                /*!< DMACTRL CHENCLR: CH15 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENCLR_CH14_Pos          (14UL)                    /*!< DMACTRL CHENCLR: CH14 (Bit 14)                        */
#define DMACTRL_CHENCLR_CH14_Msk          (0x4000UL)                /*!< DMACTRL CHENCLR: CH14 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENCLR_CH13_Pos          (13UL)                    /*!< DMACTRL CHENCLR: CH13 (Bit 13)                        */
#define DMACTRL_CHENCLR_CH13_Msk          (0x2000UL)                /*!< DMACTRL CHENCLR: CH13 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENCLR_CH12_Pos          (12UL)                    /*!< DMACTRL CHENCLR: CH12 (Bit 12)                        */
#define DMACTRL_CHENCLR_CH12_Msk          (0x1000UL)                /*!< DMACTRL CHENCLR: CH12 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENCLR_CH11_Pos          (11UL)                    /*!< DMACTRL CHENCLR: CH11 (Bit 11)                        */
#define DMACTRL_CHENCLR_CH11_Msk          (0x800UL)                 /*!< DMACTRL CHENCLR: CH11 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENCLR_CH10_Pos          (10UL)                    /*!< DMACTRL CHENCLR: CH10 (Bit 10)                        */
#define DMACTRL_CHENCLR_CH10_Msk          (0x400UL)                 /*!< DMACTRL CHENCLR: CH10 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHENCLR_CH9_Pos           (9UL)                     /*!< DMACTRL CHENCLR: CH9 (Bit 9)                          */
#define DMACTRL_CHENCLR_CH9_Msk           (0x200UL)                 /*!< DMACTRL CHENCLR: CH9 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH8_Pos           (8UL)                     /*!< DMACTRL CHENCLR: CH8 (Bit 8)                          */
#define DMACTRL_CHENCLR_CH8_Msk           (0x100UL)                 /*!< DMACTRL CHENCLR: CH8 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH7_Pos           (7UL)                     /*!< DMACTRL CHENCLR: CH7 (Bit 7)                          */
#define DMACTRL_CHENCLR_CH7_Msk           (0x80UL)                  /*!< DMACTRL CHENCLR: CH7 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH6_Pos           (6UL)                     /*!< DMACTRL CHENCLR: CH6 (Bit 6)                          */
#define DMACTRL_CHENCLR_CH6_Msk           (0x40UL)                  /*!< DMACTRL CHENCLR: CH6 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH5_Pos           (5UL)                     /*!< DMACTRL CHENCLR: CH5 (Bit 5)                          */
#define DMACTRL_CHENCLR_CH5_Msk           (0x20UL)                  /*!< DMACTRL CHENCLR: CH5 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH4_Pos           (4UL)                     /*!< DMACTRL CHENCLR: CH4 (Bit 4)                          */
#define DMACTRL_CHENCLR_CH4_Msk           (0x10UL)                  /*!< DMACTRL CHENCLR: CH4 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH3_Pos           (3UL)                     /*!< DMACTRL CHENCLR: CH3 (Bit 3)                          */
#define DMACTRL_CHENCLR_CH3_Msk           (0x8UL)                   /*!< DMACTRL CHENCLR: CH3 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH2_Pos           (2UL)                     /*!< DMACTRL CHENCLR: CH2 (Bit 2)                          */
#define DMACTRL_CHENCLR_CH2_Msk           (0x4UL)                   /*!< DMACTRL CHENCLR: CH2 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH1_Pos           (1UL)                     /*!< DMACTRL CHENCLR: CH1 (Bit 1)                          */
#define DMACTRL_CHENCLR_CH1_Msk           (0x2UL)                   /*!< DMACTRL CHENCLR: CH1 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHENCLR_CH0_Pos           (0UL)                     /*!< DMACTRL CHENCLR: CH0 (Bit 0)                          */
#define DMACTRL_CHENCLR_CH0_Msk           (0x1UL)                   /*!< DMACTRL CHENCLR: CH0 (Bitfield-Mask: 0x01)            */
/* =======================================================  CHALTSET  ======================================================== */
#define DMACTRL_CHALTSET_CH15_Pos         (15UL)                    /*!< DMACTRL CHALTSET: CH15 (Bit 15)                       */
#define DMACTRL_CHALTSET_CH15_Msk         (0x8000UL)                /*!< DMACTRL CHALTSET: CH15 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTSET_CH14_Pos         (14UL)                    /*!< DMACTRL CHALTSET: CH14 (Bit 14)                       */
#define DMACTRL_CHALTSET_CH14_Msk         (0x4000UL)                /*!< DMACTRL CHALTSET: CH14 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTSET_CH13_Pos         (13UL)                    /*!< DMACTRL CHALTSET: CH13 (Bit 13)                       */
#define DMACTRL_CHALTSET_CH13_Msk         (0x2000UL)                /*!< DMACTRL CHALTSET: CH13 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTSET_CH12_Pos         (12UL)                    /*!< DMACTRL CHALTSET: CH12 (Bit 12)                       */
#define DMACTRL_CHALTSET_CH12_Msk         (0x1000UL)                /*!< DMACTRL CHALTSET: CH12 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTSET_CH11_Pos         (11UL)                    /*!< DMACTRL CHALTSET: CH11 (Bit 11)                       */
#define DMACTRL_CHALTSET_CH11_Msk         (0x800UL)                 /*!< DMACTRL CHALTSET: CH11 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTSET_CH10_Pos         (10UL)                    /*!< DMACTRL CHALTSET: CH10 (Bit 10)                       */
#define DMACTRL_CHALTSET_CH10_Msk         (0x400UL)                 /*!< DMACTRL CHALTSET: CH10 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTSET_CH9_Pos          (9UL)                     /*!< DMACTRL CHALTSET: CH9 (Bit 9)                         */
#define DMACTRL_CHALTSET_CH9_Msk          (0x200UL)                 /*!< DMACTRL CHALTSET: CH9 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH8_Pos          (8UL)                     /*!< DMACTRL CHALTSET: CH8 (Bit 8)                         */
#define DMACTRL_CHALTSET_CH8_Msk          (0x100UL)                 /*!< DMACTRL CHALTSET: CH8 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH7_Pos          (7UL)                     /*!< DMACTRL CHALTSET: CH7 (Bit 7)                         */
#define DMACTRL_CHALTSET_CH7_Msk          (0x80UL)                  /*!< DMACTRL CHALTSET: CH7 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH6_Pos          (6UL)                     /*!< DMACTRL CHALTSET: CH6 (Bit 6)                         */
#define DMACTRL_CHALTSET_CH6_Msk          (0x40UL)                  /*!< DMACTRL CHALTSET: CH6 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH5_Pos          (5UL)                     /*!< DMACTRL CHALTSET: CH5 (Bit 5)                         */
#define DMACTRL_CHALTSET_CH5_Msk          (0x20UL)                  /*!< DMACTRL CHALTSET: CH5 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH4_Pos          (4UL)                     /*!< DMACTRL CHALTSET: CH4 (Bit 4)                         */
#define DMACTRL_CHALTSET_CH4_Msk          (0x10UL)                  /*!< DMACTRL CHALTSET: CH4 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH3_Pos          (3UL)                     /*!< DMACTRL CHALTSET: CH3 (Bit 3)                         */
#define DMACTRL_CHALTSET_CH3_Msk          (0x8UL)                   /*!< DMACTRL CHALTSET: CH3 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH2_Pos          (2UL)                     /*!< DMACTRL CHALTSET: CH2 (Bit 2)                         */
#define DMACTRL_CHALTSET_CH2_Msk          (0x4UL)                   /*!< DMACTRL CHALTSET: CH2 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH1_Pos          (1UL)                     /*!< DMACTRL CHALTSET: CH1 (Bit 1)                         */
#define DMACTRL_CHALTSET_CH1_Msk          (0x2UL)                   /*!< DMACTRL CHALTSET: CH1 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTSET_CH0_Pos          (0UL)                     /*!< DMACTRL CHALTSET: CH0 (Bit 0)                         */
#define DMACTRL_CHALTSET_CH0_Msk          (0x1UL)                   /*!< DMACTRL CHALTSET: CH0 (Bitfield-Mask: 0x01)           */
/* =======================================================  CHALTCLR  ======================================================== */
#define DMACTRL_CHALTCLR_CH15_Pos         (15UL)                    /*!< DMACTRL CHALTCLR: CH15 (Bit 15)                       */
#define DMACTRL_CHALTCLR_CH15_Msk         (0x8000UL)                /*!< DMACTRL CHALTCLR: CH15 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTCLR_CH14_Pos         (14UL)                    /*!< DMACTRL CHALTCLR: CH14 (Bit 14)                       */
#define DMACTRL_CHALTCLR_CH14_Msk         (0x4000UL)                /*!< DMACTRL CHALTCLR: CH14 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTCLR_CH13_Pos         (13UL)                    /*!< DMACTRL CHALTCLR: CH13 (Bit 13)                       */
#define DMACTRL_CHALTCLR_CH13_Msk         (0x2000UL)                /*!< DMACTRL CHALTCLR: CH13 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTCLR_CH12_Pos         (12UL)                    /*!< DMACTRL CHALTCLR: CH12 (Bit 12)                       */
#define DMACTRL_CHALTCLR_CH12_Msk         (0x1000UL)                /*!< DMACTRL CHALTCLR: CH12 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTCLR_CH11_Pos         (11UL)                    /*!< DMACTRL CHALTCLR: CH11 (Bit 11)                       */
#define DMACTRL_CHALTCLR_CH11_Msk         (0x800UL)                 /*!< DMACTRL CHALTCLR: CH11 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTCLR_CH10_Pos         (10UL)                    /*!< DMACTRL CHALTCLR: CH10 (Bit 10)                       */
#define DMACTRL_CHALTCLR_CH10_Msk         (0x400UL)                 /*!< DMACTRL CHALTCLR: CH10 (Bitfield-Mask: 0x01)          */
#define DMACTRL_CHALTCLR_CH9_Pos          (9UL)                     /*!< DMACTRL CHALTCLR: CH9 (Bit 9)                         */
#define DMACTRL_CHALTCLR_CH9_Msk          (0x200UL)                 /*!< DMACTRL CHALTCLR: CH9 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH8_Pos          (8UL)                     /*!< DMACTRL CHALTCLR: CH8 (Bit 8)                         */
#define DMACTRL_CHALTCLR_CH8_Msk          (0x100UL)                 /*!< DMACTRL CHALTCLR: CH8 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH7_Pos          (7UL)                     /*!< DMACTRL CHALTCLR: CH7 (Bit 7)                         */
#define DMACTRL_CHALTCLR_CH7_Msk          (0x80UL)                  /*!< DMACTRL CHALTCLR: CH7 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH6_Pos          (6UL)                     /*!< DMACTRL CHALTCLR: CH6 (Bit 6)                         */
#define DMACTRL_CHALTCLR_CH6_Msk          (0x40UL)                  /*!< DMACTRL CHALTCLR: CH6 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH5_Pos          (5UL)                     /*!< DMACTRL CHALTCLR: CH5 (Bit 5)                         */
#define DMACTRL_CHALTCLR_CH5_Msk          (0x20UL)                  /*!< DMACTRL CHALTCLR: CH5 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH4_Pos          (4UL)                     /*!< DMACTRL CHALTCLR: CH4 (Bit 4)                         */
#define DMACTRL_CHALTCLR_CH4_Msk          (0x10UL)                  /*!< DMACTRL CHALTCLR: CH4 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH3_Pos          (3UL)                     /*!< DMACTRL CHALTCLR: CH3 (Bit 3)                         */
#define DMACTRL_CHALTCLR_CH3_Msk          (0x8UL)                   /*!< DMACTRL CHALTCLR: CH3 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH2_Pos          (2UL)                     /*!< DMACTRL CHALTCLR: CH2 (Bit 2)                         */
#define DMACTRL_CHALTCLR_CH2_Msk          (0x4UL)                   /*!< DMACTRL CHALTCLR: CH2 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH1_Pos          (1UL)                     /*!< DMACTRL CHALTCLR: CH1 (Bit 1)                         */
#define DMACTRL_CHALTCLR_CH1_Msk          (0x2UL)                   /*!< DMACTRL CHALTCLR: CH1 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHALTCLR_CH0_Pos          (0UL)                     /*!< DMACTRL CHALTCLR: CH0 (Bit 0)                         */
#define DMACTRL_CHALTCLR_CH0_Msk          (0x1UL)                   /*!< DMACTRL CHALTCLR: CH0 (Bitfield-Mask: 0x01)           */
/* ========================================================  CHHPSET  ======================================================== */
#define DMACTRL_CHHPSET_CH15_Pos          (15UL)                    /*!< DMACTRL CHHPSET: CH15 (Bit 15)                        */
#define DMACTRL_CHHPSET_CH15_Msk          (0x8000UL)                /*!< DMACTRL CHHPSET: CH15 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPSET_CH14_Pos          (14UL)                    /*!< DMACTRL CHHPSET: CH14 (Bit 14)                        */
#define DMACTRL_CHHPSET_CH14_Msk          (0x4000UL)                /*!< DMACTRL CHHPSET: CH14 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPSET_CH13_Pos          (13UL)                    /*!< DMACTRL CHHPSET: CH13 (Bit 13)                        */
#define DMACTRL_CHHPSET_CH13_Msk          (0x2000UL)                /*!< DMACTRL CHHPSET: CH13 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPSET_CH12_Pos          (12UL)                    /*!< DMACTRL CHHPSET: CH12 (Bit 12)                        */
#define DMACTRL_CHHPSET_CH12_Msk          (0x1000UL)                /*!< DMACTRL CHHPSET: CH12 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPSET_CH11_Pos          (11UL)                    /*!< DMACTRL CHHPSET: CH11 (Bit 11)                        */
#define DMACTRL_CHHPSET_CH11_Msk          (0x800UL)                 /*!< DMACTRL CHHPSET: CH11 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPSET_CH10_Pos          (10UL)                    /*!< DMACTRL CHHPSET: CH10 (Bit 10)                        */
#define DMACTRL_CHHPSET_CH10_Msk          (0x400UL)                 /*!< DMACTRL CHHPSET: CH10 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPSET_CH9_Pos           (9UL)                     /*!< DMACTRL CHHPSET: CH9 (Bit 9)                          */
#define DMACTRL_CHHPSET_CH9_Msk           (0x200UL)                 /*!< DMACTRL CHHPSET: CH9 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH8_Pos           (8UL)                     /*!< DMACTRL CHHPSET: CH8 (Bit 8)                          */
#define DMACTRL_CHHPSET_CH8_Msk           (0x100UL)                 /*!< DMACTRL CHHPSET: CH8 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH7_Pos           (7UL)                     /*!< DMACTRL CHHPSET: CH7 (Bit 7)                          */
#define DMACTRL_CHHPSET_CH7_Msk           (0x80UL)                  /*!< DMACTRL CHHPSET: CH7 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH6_Pos           (6UL)                     /*!< DMACTRL CHHPSET: CH6 (Bit 6)                          */
#define DMACTRL_CHHPSET_CH6_Msk           (0x40UL)                  /*!< DMACTRL CHHPSET: CH6 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH5_Pos           (5UL)                     /*!< DMACTRL CHHPSET: CH5 (Bit 5)                          */
#define DMACTRL_CHHPSET_CH5_Msk           (0x20UL)                  /*!< DMACTRL CHHPSET: CH5 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH4_Pos           (4UL)                     /*!< DMACTRL CHHPSET: CH4 (Bit 4)                          */
#define DMACTRL_CHHPSET_CH4_Msk           (0x10UL)                  /*!< DMACTRL CHHPSET: CH4 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH3_Pos           (3UL)                     /*!< DMACTRL CHHPSET: CH3 (Bit 3)                          */
#define DMACTRL_CHHPSET_CH3_Msk           (0x8UL)                   /*!< DMACTRL CHHPSET: CH3 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH2_Pos           (2UL)                     /*!< DMACTRL CHHPSET: CH2 (Bit 2)                          */
#define DMACTRL_CHHPSET_CH2_Msk           (0x4UL)                   /*!< DMACTRL CHHPSET: CH2 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH1_Pos           (1UL)                     /*!< DMACTRL CHHPSET: CH1 (Bit 1)                          */
#define DMACTRL_CHHPSET_CH1_Msk           (0x2UL)                   /*!< DMACTRL CHHPSET: CH1 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPSET_CH0_Pos           (0UL)                     /*!< DMACTRL CHHPSET: CH0 (Bit 0)                          */
#define DMACTRL_CHHPSET_CH0_Msk           (0x1UL)                   /*!< DMACTRL CHHPSET: CH0 (Bitfield-Mask: 0x01)            */
/* ========================================================  CHHPCLR  ======================================================== */
#define DMACTRL_CHHPCLR_CH15_Pos          (15UL)                    /*!< DMACTRL CHHPCLR: CH15 (Bit 15)                        */
#define DMACTRL_CHHPCLR_CH15_Msk          (0x8000UL)                /*!< DMACTRL CHHPCLR: CH15 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPCLR_CH14_Pos          (14UL)                    /*!< DMACTRL CHHPCLR: CH14 (Bit 14)                        */
#define DMACTRL_CHHPCLR_CH14_Msk          (0x4000UL)                /*!< DMACTRL CHHPCLR: CH14 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPCLR_CH13_Pos          (13UL)                    /*!< DMACTRL CHHPCLR: CH13 (Bit 13)                        */
#define DMACTRL_CHHPCLR_CH13_Msk          (0x2000UL)                /*!< DMACTRL CHHPCLR: CH13 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPCLR_CH12_Pos          (12UL)                    /*!< DMACTRL CHHPCLR: CH12 (Bit 12)                        */
#define DMACTRL_CHHPCLR_CH12_Msk          (0x1000UL)                /*!< DMACTRL CHHPCLR: CH12 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPCLR_CH11_Pos          (11UL)                    /*!< DMACTRL CHHPCLR: CH11 (Bit 11)                        */
#define DMACTRL_CHHPCLR_CH11_Msk          (0x800UL)                 /*!< DMACTRL CHHPCLR: CH11 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPCLR_CH10_Pos          (10UL)                    /*!< DMACTRL CHHPCLR: CH10 (Bit 10)                        */
#define DMACTRL_CHHPCLR_CH10_Msk          (0x400UL)                 /*!< DMACTRL CHHPCLR: CH10 (Bitfield-Mask: 0x01)           */
#define DMACTRL_CHHPCLR_CH9_Pos           (9UL)                     /*!< DMACTRL CHHPCLR: CH9 (Bit 9)                          */
#define DMACTRL_CHHPCLR_CH9_Msk           (0x200UL)                 /*!< DMACTRL CHHPCLR: CH9 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH8_Pos           (8UL)                     /*!< DMACTRL CHHPCLR: CH8 (Bit 8)                          */
#define DMACTRL_CHHPCLR_CH8_Msk           (0x100UL)                 /*!< DMACTRL CHHPCLR: CH8 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH7_Pos           (7UL)                     /*!< DMACTRL CHHPCLR: CH7 (Bit 7)                          */
#define DMACTRL_CHHPCLR_CH7_Msk           (0x80UL)                  /*!< DMACTRL CHHPCLR: CH7 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH6_Pos           (6UL)                     /*!< DMACTRL CHHPCLR: CH6 (Bit 6)                          */
#define DMACTRL_CHHPCLR_CH6_Msk           (0x40UL)                  /*!< DMACTRL CHHPCLR: CH6 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH5_Pos           (5UL)                     /*!< DMACTRL CHHPCLR: CH5 (Bit 5)                          */
#define DMACTRL_CHHPCLR_CH5_Msk           (0x20UL)                  /*!< DMACTRL CHHPCLR: CH5 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH4_Pos           (4UL)                     /*!< DMACTRL CHHPCLR: CH4 (Bit 4)                          */
#define DMACTRL_CHHPCLR_CH4_Msk           (0x10UL)                  /*!< DMACTRL CHHPCLR: CH4 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH3_Pos           (3UL)                     /*!< DMACTRL CHHPCLR: CH3 (Bit 3)                          */
#define DMACTRL_CHHPCLR_CH3_Msk           (0x8UL)                   /*!< DMACTRL CHHPCLR: CH3 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH2_Pos           (2UL)                     /*!< DMACTRL CHHPCLR: CH2 (Bit 2)                          */
#define DMACTRL_CHHPCLR_CH2_Msk           (0x4UL)                   /*!< DMACTRL CHHPCLR: CH2 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH1_Pos           (1UL)                     /*!< DMACTRL CHHPCLR: CH1 (Bit 1)                          */
#define DMACTRL_CHHPCLR_CH1_Msk           (0x2UL)                   /*!< DMACTRL CHHPCLR: CH1 (Bitfield-Mask: 0x01)            */
#define DMACTRL_CHHPCLR_CH0_Pos           (0UL)                     /*!< DMACTRL CHHPCLR: CH0 (Bit 0)                          */
#define DMACTRL_CHHPCLR_CH0_Msk           (0x1UL)                   /*!< DMACTRL CHHPCLR: CH0 (Bitfield-Mask: 0x01)            */
/* ========================================================  BERRCLR  ======================================================== */
#define DMACTRL_BERRCLR_ERROR_Pos         (0UL)                     /*!< DMACTRL BERRCLR: ERROR (Bit 0)                        */
#define DMACTRL_BERRCLR_ERROR_Msk         (0x1UL)                   /*!< DMACTRL BERRCLR: ERROR (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                          DMAXBAR                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  DMAXBAR0  ======================================================== */
#define DMAXBAR_DMAXBAR0_CH7SEL_Pos       (28UL)                    /*!< DMAXBAR DMAXBAR0: CH7SEL (Bit 28)                     */
#define DMAXBAR_DMAXBAR0_CH7SEL_Msk       (0xf0000000UL)            /*!< DMAXBAR DMAXBAR0: CH7SEL (Bitfield-Mask: 0x0f)        */
#define DMAXBAR_DMAXBAR0_CH6SEL_Pos       (24UL)                    /*!< DMAXBAR DMAXBAR0: CH6SEL (Bit 24)                     */
#define DMAXBAR_DMAXBAR0_CH6SEL_Msk       (0xf000000UL)             /*!< DMAXBAR DMAXBAR0: CH6SEL (Bitfield-Mask: 0x0f)        */
#define DMAXBAR_DMAXBAR0_CH5SEL_Pos       (20UL)                    /*!< DMAXBAR DMAXBAR0: CH5SEL (Bit 20)                     */
#define DMAXBAR_DMAXBAR0_CH5SEL_Msk       (0xf00000UL)              /*!< DMAXBAR DMAXBAR0: CH5SEL (Bitfield-Mask: 0x0f)        */
#define DMAXBAR_DMAXBAR0_CH4SEL_Pos       (16UL)                    /*!< DMAXBAR DMAXBAR0: CH4SEL (Bit 16)                     */
#define DMAXBAR_DMAXBAR0_CH4SEL_Msk       (0xf0000UL)               /*!< DMAXBAR DMAXBAR0: CH4SEL (Bitfield-Mask: 0x0f)        */
#define DMAXBAR_DMAXBAR0_CH3SEL_Pos       (12UL)                    /*!< DMAXBAR DMAXBAR0: CH3SEL (Bit 12)                     */
#define DMAXBAR_DMAXBAR0_CH3SEL_Msk       (0xf000UL)                /*!< DMAXBAR DMAXBAR0: CH3SEL (Bitfield-Mask: 0x0f)        */
#define DMAXBAR_DMAXBAR0_CH2SEL_Pos       (8UL)                     /*!< DMAXBAR DMAXBAR0: CH2SEL (Bit 8)                      */
#define DMAXBAR_DMAXBAR0_CH2SEL_Msk       (0xf00UL)                 /*!< DMAXBAR DMAXBAR0: CH2SEL (Bitfield-Mask: 0x0f)        */
#define DMAXBAR_DMAXBAR0_CH1SEL_Pos       (4UL)                     /*!< DMAXBAR DMAXBAR0: CH1SEL (Bit 4)                      */
#define DMAXBAR_DMAXBAR0_CH1SEL_Msk       (0xf0UL)                  /*!< DMAXBAR DMAXBAR0: CH1SEL (Bitfield-Mask: 0x0f)        */
#define DMAXBAR_DMAXBAR0_CH0SEL_Pos       (0UL)                     /*!< DMAXBAR DMAXBAR0: CH0SEL (Bit 0)                      */
#define DMAXBAR_DMAXBAR0_CH0SEL_Msk       (0xfUL)                   /*!< DMAXBAR DMAXBAR0: CH0SEL (Bitfield-Mask: 0x0f)        */
/* =====================================================  DMAXBAR0_SET  ====================================================== */
/* =====================================================  DMAXBAR0_CLR  ====================================================== */
/* =======================================================  DMAXBAR1  ======================================================== */
#define DMAXBAR_DMAXBAR1_CH15SEL_Pos      (28UL)                    /*!< DMAXBAR DMAXBAR1: CH15SEL (Bit 28)                    */
#define DMAXBAR_DMAXBAR1_CH15SEL_Msk      (0xf0000000UL)            /*!< DMAXBAR DMAXBAR1: CH15SEL (Bitfield-Mask: 0x0f)       */
#define DMAXBAR_DMAXBAR1_CH14SEL_Pos      (24UL)                    /*!< DMAXBAR DMAXBAR1: CH14SEL (Bit 24)                    */
#define DMAXBAR_DMAXBAR1_CH14SEL_Msk      (0xf000000UL)             /*!< DMAXBAR DMAXBAR1: CH14SEL (Bitfield-Mask: 0x0f)       */
#define DMAXBAR_DMAXBAR1_CH13SEL_Pos      (20UL)                    /*!< DMAXBAR DMAXBAR1: CH13SEL (Bit 20)                    */
#define DMAXBAR_DMAXBAR1_CH13SEL_Msk      (0xf00000UL)              /*!< DMAXBAR DMAXBAR1: CH13SEL (Bitfield-Mask: 0x0f)       */
#define DMAXBAR_DMAXBAR1_CH12SEL_Pos      (16UL)                    /*!< DMAXBAR DMAXBAR1: CH12SEL (Bit 16)                    */
#define DMAXBAR_DMAXBAR1_CH12SEL_Msk      (0xf0000UL)               /*!< DMAXBAR DMAXBAR1: CH12SEL (Bitfield-Mask: 0x0f)       */
#define DMAXBAR_DMAXBAR1_CH11SEL_Pos      (12UL)                    /*!< DMAXBAR DMAXBAR1: CH11SEL (Bit 12)                    */
#define DMAXBAR_DMAXBAR1_CH11SEL_Msk      (0xf000UL)                /*!< DMAXBAR DMAXBAR1: CH11SEL (Bitfield-Mask: 0x0f)       */
#define DMAXBAR_DMAXBAR1_CH10SEL_Pos      (8UL)                     /*!< DMAXBAR DMAXBAR1: CH10SEL (Bit 8)                     */
#define DMAXBAR_DMAXBAR1_CH10SEL_Msk      (0xf00UL)                 /*!< DMAXBAR DMAXBAR1: CH10SEL (Bitfield-Mask: 0x0f)       */
#define DMAXBAR_DMAXBAR1_CH9SEL_Pos       (4UL)                     /*!< DMAXBAR DMAXBAR1: CH9SEL (Bit 4)                      */
#define DMAXBAR_DMAXBAR1_CH9SEL_Msk       (0xf0UL)                  /*!< DMAXBAR DMAXBAR1: CH9SEL (Bitfield-Mask: 0x0f)        */
#define DMAXBAR_DMAXBAR1_CH8SEL_Pos       (0UL)                     /*!< DMAXBAR DMAXBAR1: CH8SEL (Bit 0)                      */
#define DMAXBAR_DMAXBAR1_CH8SEL_Msk       (0xfUL)                   /*!< DMAXBAR DMAXBAR1: CH8SEL (Bitfield-Mask: 0x0f)        */
/* =====================================================  DMAXBAR1_SET  ====================================================== */
/* =====================================================  DMAXBAR1_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                          LPTIMER                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define LPTIMER_CONTROL_RUN_Pos           (31UL)                    /*!< LPTIMER CONTROL: RUN (Bit 31)                         */
#define LPTIMER_CONTROL_RUN_Msk           (0x80000000UL)            /*!< LPTIMER CONTROL: RUN (Bitfield-Mask: 0x01)            */
#define LPTIMER_CONTROL_DBGMD_Pos         (30UL)                    /*!< LPTIMER CONTROL: DBGMD (Bit 30)                       */
#define LPTIMER_CONTROL_DBGMD_Msk         (0x40000000UL)            /*!< LPTIMER CONTROL: DBGMD (Bitfield-Mask: 0x01)          */
#define LPTIMER_CONTROL_CMPRSTEN_Pos      (24UL)                    /*!< LPTIMER CONTROL: CMPRSTEN (Bit 24)                    */
#define LPTIMER_CONTROL_CMPRSTEN_Msk      (0x1000000UL)             /*!< LPTIMER CONTROL: CMPRSTEN (Bitfield-Mask: 0x01)       */
#define LPTIMER_CONTROL_CMPTMD_Pos        (19UL)                    /*!< LPTIMER CONTROL: CMPTMD (Bit 19)                      */
#define LPTIMER_CONTROL_CMPTMD_Msk        (0x80000UL)               /*!< LPTIMER CONTROL: CMPTMD (Bitfield-Mask: 0x01)         */
#define LPTIMER_CONTROL_OVFTMD_Pos        (18UL)                    /*!< LPTIMER CONTROL: OVFTMD (Bit 18)                      */
#define LPTIMER_CONTROL_OVFTMD_Msk        (0x40000UL)               /*!< LPTIMER CONTROL: OVFTMD (Bitfield-Mask: 0x01)         */
#define LPTIMER_CONTROL_CMPIEN_Pos        (17UL)                    /*!< LPTIMER CONTROL: CMPIEN (Bit 17)                      */
#define LPTIMER_CONTROL_CMPIEN_Msk        (0x20000UL)               /*!< LPTIMER CONTROL: CMPIEN (Bitfield-Mask: 0x01)         */
#define LPTIMER_CONTROL_OVFIEN_Pos        (16UL)                    /*!< LPTIMER CONTROL: OVFIEN (Bit 16)                      */
#define LPTIMER_CONTROL_OVFIEN_Msk        (0x10000UL)               /*!< LPTIMER CONTROL: OVFIEN (Bitfield-Mask: 0x01)         */
#define LPTIMER_CONTROL_CMPCAP_Pos        (11UL)                    /*!< LPTIMER CONTROL: CMPCAP (Bit 11)                      */
#define LPTIMER_CONTROL_CMPCAP_Msk        (0x800UL)                 /*!< LPTIMER CONTROL: CMPCAP (Bitfield-Mask: 0x01)         */
#define LPTIMER_CONTROL_CMPSET_Pos        (10UL)                    /*!< LPTIMER CONTROL: CMPSET (Bit 10)                      */
#define LPTIMER_CONTROL_CMPSET_Msk        (0x400UL)                 /*!< LPTIMER CONTROL: CMPSET (Bitfield-Mask: 0x01)         */
#define LPTIMER_CONTROL_TMRCAP_Pos        (9UL)                     /*!< LPTIMER CONTROL: TMRCAP (Bit 9)                       */
#define LPTIMER_CONTROL_TMRCAP_Msk        (0x200UL)                 /*!< LPTIMER CONTROL: TMRCAP (Bitfield-Mask: 0x01)         */
#define LPTIMER_CONTROL_TMRSET_Pos        (8UL)                     /*!< LPTIMER CONTROL: TMRSET (Bit 8)                       */
#define LPTIMER_CONTROL_TMRSET_Msk        (0x100UL)                 /*!< LPTIMER CONTROL: TMRSET (Bitfield-Mask: 0x01)         */
#define LPTIMER_CONTROL_EXTSEL_Pos        (4UL)                     /*!< LPTIMER CONTROL: EXTSEL (Bit 4)                       */
#define LPTIMER_CONTROL_EXTSEL_Msk        (0xf0UL)                  /*!< LPTIMER CONTROL: EXTSEL (Bitfield-Mask: 0x0f)         */
#define LPTIMER_CONTROL_CMD_Pos           (0UL)                     /*!< LPTIMER CONTROL: CMD (Bit 0)                          */
#define LPTIMER_CONTROL_CMD_Msk           (0x3UL)                   /*!< LPTIMER CONTROL: CMD (Bitfield-Mask: 0x03)            */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  DATA  ========================================================== */
#define LPTIMER_DATA_DATA_Pos             (0UL)                     /*!< LPTIMER DATA: DATA (Bit 0)                            */
#define LPTIMER_DATA_DATA_Msk             (0xffffUL)                /*!< LPTIMER DATA: DATA (Bitfield-Mask: 0xffff)            */
/* ========================================================  STATUS  ========================================================= */
#define LPTIMER_STATUS_CMPI_Pos           (1UL)                     /*!< LPTIMER STATUS: CMPI (Bit 1)                          */
#define LPTIMER_STATUS_CMPI_Msk           (0x2UL)                   /*!< LPTIMER STATUS: CMPI (Bitfield-Mask: 0x01)            */
#define LPTIMER_STATUS_OVFI_Pos           (0UL)                     /*!< LPTIMER STATUS: OVFI (Bit 0)                          */
#define LPTIMER_STATUS_OVFI_Msk           (0x1UL)                   /*!< LPTIMER STATUS: OVFI (Bitfield-Mask: 0x01)            */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                            LDO                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define LDO_CONTROL_LDOAEN_Pos            (31UL)                    /*!< LDO CONTROL: LDOAEN (Bit 31)                          */
#define LDO_CONTROL_LDOAEN_Msk            (0x80000000UL)            /*!< LDO CONTROL: LDOAEN (Bitfield-Mask: 0x01)             */
#define LDO_CONTROL_LDOIBIAS_Pos          (1UL)                     /*!< LDO CONTROL: LDOIBIAS (Bit 1)                         */
#define LDO_CONTROL_LDOIBIAS_Msk          (0x2UL)                   /*!< LDO CONTROL: LDOIBIAS (Bitfield-Mask: 0x01)           */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           VREF                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define VREF_CONTROL_VREFEN_Pos           (31UL)                    /*!< VREF CONTROL: VREFEN (Bit 31)                         */
#define VREF_CONTROL_VREFEN_Msk           (0x80000000UL)            /*!< VREF CONTROL: VREFEN (Bitfield-Mask: 0x01)            */
#define VREF_CONTROL_TEMPEN_Pos           (1UL)                     /*!< VREF CONTROL: TEMPEN (Bit 1)                          */
#define VREF_CONTROL_TEMPEN_Msk           (0x2UL)                   /*!< VREF CONTROL: TEMPEN (Bitfield-Mask: 0x01)            */
#define VREF_CONTROL_VREF2X_Pos           (0UL)                     /*!< VREF CONTROL: VREF2X (Bit 0)                          */
#define VREF_CONTROL_VREF2X_Msk           (0x1UL)                   /*!< VREF CONTROL: VREF2X (Bitfield-Mask: 0x01)            */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                            I2S                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  TXCONTROL  ======================================================= */
#define I2S_TXCONTROL_TXEN_Pos            (29UL)                    /*!< I2S TXCONTROL: TXEN (Bit 29)                          */
#define I2S_TXCONTROL_TXEN_Msk            (0x20000000UL)            /*!< I2S TXCONTROL: TXEN (Bitfield-Mask: 0x01)             */
#define I2S_TXCONTROL_MBSEL_Pos           (24UL)                    /*!< I2S TXCONTROL: MBSEL (Bit 24)                         */
#define I2S_TXCONTROL_MBSEL_Msk           (0x7000000UL)             /*!< I2S TXCONTROL: MBSEL (Bitfield-Mask: 0x07)            */
#define I2S_TXCONTROL_ORDER_Pos           (22UL)                    /*!< I2S TXCONTROL: ORDER (Bit 22)                         */
#define I2S_TXCONTROL_ORDER_Msk           (0x400000UL)              /*!< I2S TXCONTROL: ORDER (Bitfield-Mask: 0x01)            */
#define I2S_TXCONTROL_SCLKINVEN_Pos       (21UL)                    /*!< I2S TXCONTROL: SCLKINVEN (Bit 21)                     */
#define I2S_TXCONTROL_SCLKINVEN_Msk       (0x200000UL)              /*!< I2S TXCONTROL: SCLKINVEN (Bitfield-Mask: 0x01)        */
#define I2S_TXCONTROL_FSINVEN_Pos         (20UL)                    /*!< I2S TXCONTROL: FSINVEN (Bit 20)                       */
#define I2S_TXCONTROL_FSINVEN_Msk         (0x100000UL)              /*!< I2S TXCONTROL: FSINVEN (Bitfield-Mask: 0x01)          */
#define I2S_TXCONTROL_JSEL_Pos            (17UL)                    /*!< I2S TXCONTROL: JSEL (Bit 17)                          */
#define I2S_TXCONTROL_JSEL_Msk            (0x20000UL)               /*!< I2S TXCONTROL: JSEL (Bitfield-Mask: 0x01)             */
#define I2S_TXCONTROL_FILLSEL_Pos         (15UL)                    /*!< I2S TXCONTROL: FILLSEL (Bit 15)                       */
#define I2S_TXCONTROL_FILLSEL_Msk         (0x18000UL)               /*!< I2S TXCONTROL: FILLSEL (Bitfield-Mask: 0x03)          */
#define I2S_TXCONTROL_FSSRCSEL_Pos        (14UL)                    /*!< I2S TXCONTROL: FSSRCSEL (Bit 14)                      */
#define I2S_TXCONTROL_FSSRCSEL_Msk        (0x4000UL)                /*!< I2S TXCONTROL: FSSRCSEL (Bitfield-Mask: 0x01)         */
#define I2S_TXCONTROL_FSDEL_Pos           (6UL)                     /*!< I2S TXCONTROL: FSDEL (Bit 6)                          */
#define I2S_TXCONTROL_FSDEL_Msk           (0x3fc0UL)                /*!< I2S TXCONTROL: FSDEL (Bitfield-Mask: 0xff)            */
#define I2S_TXCONTROL_DDIS_Pos            (5UL)                     /*!< I2S TXCONTROL: DDIS (Bit 5)                           */
#define I2S_TXCONTROL_DDIS_Msk            (0x20UL)                  /*!< I2S TXCONTROL: DDIS (Bitfield-Mask: 0x01)             */
#define I2S_TXCONTROL_FSSEN_Pos           (1UL)                     /*!< I2S TXCONTROL: FSSEN (Bit 1)                          */
#define I2S_TXCONTROL_FSSEN_Msk           (0x2UL)                   /*!< I2S TXCONTROL: FSSEN (Bitfield-Mask: 0x01)            */
#define I2S_TXCONTROL_FSGEN_Pos           (0UL)                     /*!< I2S TXCONTROL: FSGEN (Bit 0)                          */
#define I2S_TXCONTROL_FSGEN_Msk           (0x1UL)                   /*!< I2S TXCONTROL: FSGEN (Bitfield-Mask: 0x01)            */
/* =====================================================  TXCONTROL_SET  ===================================================== */
/* =====================================================  TXCONTROL_CLR  ===================================================== */
/* ========================================================  TXMODE  ========================================================= */
#define I2S_TXMODE_TDMEN_Pos              (27UL)                    /*!< I2S TXMODE: TDMEN (Bit 27)                            */
#define I2S_TXMODE_TDMEN_Msk              (0x8000000UL)             /*!< I2S TXMODE: TDMEN (Bitfield-Mask: 0x01)               */
#define I2S_TXMODE_DIMD_Pos               (26UL)                    /*!< I2S TXMODE: DIMD (Bit 26)                             */
#define I2S_TXMODE_DIMD_Msk               (0x4000000UL)             /*!< I2S TXMODE: DIMD (Bitfield-Mask: 0x01)                */
#define I2S_TXMODE_DEDIS_Pos              (25UL)                    /*!< I2S TXMODE: DEDIS (Bit 25)                            */
#define I2S_TXMODE_DEDIS_Msk              (0x2000000UL)             /*!< I2S TXMODE: DEDIS (Bitfield-Mask: 0x01)               */
#define I2S_TXMODE_SLOTS_Pos              (20UL)                    /*!< I2S TXMODE: SLOTS (Bit 20)                            */
#define I2S_TXMODE_SLOTS_Msk              (0x1f00000UL)             /*!< I2S TXMODE: SLOTS (Bitfield-Mask: 0x1f)               */
#define I2S_TXMODE_START_Pos              (12UL)                    /*!< I2S TXMODE: START (Bit 12)                            */
#define I2S_TXMODE_START_Msk              (0xff000UL)               /*!< I2S TXMODE: START (Bitfield-Mask: 0xff)               */
#define I2S_TXMODE_CYCLE_Pos              (0UL)                     /*!< I2S TXMODE: CYCLE (Bit 0)                             */
#define I2S_TXMODE_CYCLE_Msk              (0xfffUL)                 /*!< I2S TXMODE: CYCLE (Bitfield-Mask: 0xfff)              */
/* ======================================================  TXMODE_SET  ======================================================= */
/* ======================================================  TXMODE_CLR  ======================================================= */
/* ========================================================  FSDUTY  ========================================================= */
#define I2S_FSDUTY_FSHIGH_Pos             (16UL)                    /*!< I2S FSDUTY: FSHIGH (Bit 16)                           */
#define I2S_FSDUTY_FSHIGH_Msk             (0xffff0000UL)            /*!< I2S FSDUTY: FSHIGH (Bitfield-Mask: 0xffff)            */
#define I2S_FSDUTY_FSLOW_Pos              (0UL)                     /*!< I2S FSDUTY: FSLOW (Bit 0)                             */
#define I2S_FSDUTY_FSLOW_Msk              (0xffffUL)                /*!< I2S FSDUTY: FSLOW (Bitfield-Mask: 0xffff)             */
/* =======================================================  RXCONTROL  ======================================================= */
#define I2S_RXCONTROL_RXEN_Pos            (21UL)                    /*!< I2S RXCONTROL: RXEN (Bit 21)                          */
#define I2S_RXCONTROL_RXEN_Msk            (0x200000UL)              /*!< I2S RXCONTROL: RXEN (Bitfield-Mask: 0x01)             */
#define I2S_RXCONTROL_FSSRCSEL_Pos        (20UL)                    /*!< I2S RXCONTROL: FSSRCSEL (Bit 20)                      */
#define I2S_RXCONTROL_FSSRCSEL_Msk        (0x100000UL)              /*!< I2S RXCONTROL: FSSRCSEL (Bitfield-Mask: 0x01)         */
#define I2S_RXCONTROL_MBSEL_Pos           (15UL)                    /*!< I2S RXCONTROL: MBSEL (Bit 15)                         */
#define I2S_RXCONTROL_MBSEL_Msk           (0x38000UL)               /*!< I2S RXCONTROL: MBSEL (Bitfield-Mask: 0x07)            */
#define I2S_RXCONTROL_ORDER_Pos           (13UL)                    /*!< I2S RXCONTROL: ORDER (Bit 13)                         */
#define I2S_RXCONTROL_ORDER_Msk           (0x2000UL)                /*!< I2S RXCONTROL: ORDER (Bitfield-Mask: 0x01)            */
#define I2S_RXCONTROL_SCLKINVEN_Pos       (12UL)                    /*!< I2S RXCONTROL: SCLKINVEN (Bit 12)                     */
#define I2S_RXCONTROL_SCLKINVEN_Msk       (0x1000UL)                /*!< I2S RXCONTROL: SCLKINVEN (Bitfield-Mask: 0x01)        */
#define I2S_RXCONTROL_FSINVEN_Pos         (11UL)                    /*!< I2S RXCONTROL: FSINVEN (Bit 11)                       */
#define I2S_RXCONTROL_FSINVEN_Msk         (0x800UL)                 /*!< I2S RXCONTROL: FSINVEN (Bitfield-Mask: 0x01)          */
#define I2S_RXCONTROL_DDIS_Pos            (9UL)                     /*!< I2S RXCONTROL: DDIS (Bit 9)                           */
#define I2S_RXCONTROL_DDIS_Msk            (0x200UL)                 /*!< I2S RXCONTROL: DDIS (Bitfield-Mask: 0x01)             */
#define I2S_RXCONTROL_JSEL_Pos            (8UL)                     /*!< I2S RXCONTROL: JSEL (Bit 8)                           */
#define I2S_RXCONTROL_JSEL_Msk            (0x100UL)                 /*!< I2S RXCONTROL: JSEL (Bitfield-Mask: 0x01)             */
#define I2S_RXCONTROL_FSDEL_Pos           (0UL)                     /*!< I2S RXCONTROL: FSDEL (Bit 0)                          */
#define I2S_RXCONTROL_FSDEL_Msk           (0xffUL)                  /*!< I2S RXCONTROL: FSDEL (Bitfield-Mask: 0xff)            */
/* =====================================================  RXCONTROL_SET  ===================================================== */
/* =====================================================  RXCONTROL_CLR  ===================================================== */
/* ========================================================  RXMODE  ========================================================= */
#define I2S_RXMODE_TDMEN_Pos              (27UL)                    /*!< I2S RXMODE: TDMEN (Bit 27)                            */
#define I2S_RXMODE_TDMEN_Msk              (0x8000000UL)             /*!< I2S RXMODE: TDMEN (Bitfield-Mask: 0x01)               */
#define I2S_RXMODE_SLOTS_Pos              (20UL)                    /*!< I2S RXMODE: SLOTS (Bit 20)                            */
#define I2S_RXMODE_SLOTS_Msk              (0x3f00000UL)             /*!< I2S RXMODE: SLOTS (Bitfield-Mask: 0x3f)               */
#define I2S_RXMODE_START_Pos              (12UL)                    /*!< I2S RXMODE: START (Bit 12)                            */
#define I2S_RXMODE_START_Msk              (0xff000UL)               /*!< I2S RXMODE: START (Bitfield-Mask: 0xff)               */
#define I2S_RXMODE_CYCLE_Pos              (0UL)                     /*!< I2S RXMODE: CYCLE (Bit 0)                             */
#define I2S_RXMODE_CYCLE_Msk              (0xfffUL)                 /*!< I2S RXMODE: CYCLE (Bitfield-Mask: 0xfff)              */
/* ======================================================  RXMODE_SET  ======================================================= */
/* ======================================================  RXMODE_CLR  ======================================================= */
/* ======================================================  CLKCONTROL  ======================================================= */
#define I2S_CLKCONTROL_TXSCLKMD_Pos       (27UL)                    /*!< I2S CLKCONTROL: TXSCLKMD (Bit 27)                     */
#define I2S_CLKCONTROL_TXSCLKMD_Msk       (0x8000000UL)             /*!< I2S CLKCONTROL: TXSCLKMD (Bitfield-Mask: 0x01)        */
#define I2S_CLKCONTROL_RXSCLKMD_Pos       (26UL)                    /*!< I2S CLKCONTROL: RXSCLKMD (Bit 26)                     */
#define I2S_CLKCONTROL_RXSCLKMD_Msk       (0x4000000UL)             /*!< I2S CLKCONTROL: RXSCLKMD (Bitfield-Mask: 0x01)        */
#define I2S_CLKCONTROL_TXCLKEN_Pos        (25UL)                    /*!< I2S CLKCONTROL: TXCLKEN (Bit 25)                      */
#define I2S_CLKCONTROL_TXCLKEN_Msk        (0x2000000UL)             /*!< I2S CLKCONTROL: TXCLKEN (Bitfield-Mask: 0x01)         */
#define I2S_CLKCONTROL_RXCLKEN_Pos        (24UL)                    /*!< I2S CLKCONTROL: RXCLKEN (Bit 24)                      */
#define I2S_CLKCONTROL_RXCLKEN_Msk        (0x1000000UL)             /*!< I2S CLKCONTROL: RXCLKEN (Bitfield-Mask: 0x01)         */
#define I2S_CLKCONTROL_RESET_Pos          (23UL)                    /*!< I2S CLKCONTROL: RESET (Bit 23)                        */
#define I2S_CLKCONTROL_RESET_Msk          (0x800000UL)              /*!< I2S CLKCONTROL: RESET (Bitfield-Mask: 0x01)           */
#define I2S_CLKCONTROL_RXCLKSEL_Pos       (22UL)                    /*!< I2S CLKCONTROL: RXCLKSEL (Bit 22)                     */
#define I2S_CLKCONTROL_RXCLKSEL_Msk       (0x400000UL)              /*!< I2S CLKCONTROL: RXCLKSEL (Bitfield-Mask: 0x01)        */
#define I2S_CLKCONTROL_TXCLKSEL_Pos       (21UL)                    /*!< I2S CLKCONTROL: TXCLKSEL (Bit 21)                     */
#define I2S_CLKCONTROL_TXCLKSEL_Msk       (0x200000UL)              /*!< I2S CLKCONTROL: TXCLKSEL (Bitfield-Mask: 0x01)        */
#define I2S_CLKCONTROL_DIVEN_Pos          (20UL)                    /*!< I2S CLKCONTROL: DIVEN (Bit 20)                        */
#define I2S_CLKCONTROL_DIVEN_Msk          (0x100000UL)              /*!< I2S CLKCONTROL: DIVEN (Bitfield-Mask: 0x01)           */
#define I2S_CLKCONTROL_CLKUPD_Pos         (19UL)                    /*!< I2S CLKCONTROL: CLKUPD (Bit 19)                       */
#define I2S_CLKCONTROL_CLKUPD_Msk         (0x80000UL)               /*!< I2S CLKCONTROL: CLKUPD (Bitfield-Mask: 0x01)          */
#define I2S_CLKCONTROL_DUTYMD_Pos         (18UL)                    /*!< I2S CLKCONTROL: DUTYMD (Bit 18)                       */
#define I2S_CLKCONTROL_DUTYMD_Msk         (0x40000UL)               /*!< I2S CLKCONTROL: DUTYMD (Bitfield-Mask: 0x01)          */
#define I2S_CLKCONTROL_FRACDIV_Pos        (10UL)                    /*!< I2S CLKCONTROL: FRACDIV (Bit 10)                      */
#define I2S_CLKCONTROL_FRACDIV_Msk        (0x3fc00UL)               /*!< I2S CLKCONTROL: FRACDIV (Bitfield-Mask: 0xff)         */
#define I2S_CLKCONTROL_INTDIV_Pos         (0UL)                     /*!< I2S CLKCONTROL: INTDIV (Bit 0)                        */
#define I2S_CLKCONTROL_INTDIV_Msk         (0x3ffUL)                 /*!< I2S CLKCONTROL: INTDIV (Bitfield-Mask: 0x3ff)         */
/* ====================================================  CLKCONTROL_SET  ===================================================== */
/* ====================================================  CLKCONTROL_CLR  ===================================================== */
/* ========================================================  TXFIFO  ========================================================= */
/* ========================================================  RXFIFO  ========================================================= */
/* ======================================================  FIFOSTATUS  ======================================================= */
#define I2S_FIFOSTATUS_RXFIFONUM_Pos      (16UL)                    /*!< I2S FIFOSTATUS: RXFIFONUM (Bit 16)                    */
#define I2S_FIFOSTATUS_RXFIFONUM_Msk      (0xf0000UL)               /*!< I2S FIFOSTATUS: RXFIFONUM (Bitfield-Mask: 0x0f)       */
#define I2S_FIFOSTATUS_TXFIFONUM_Pos      (0UL)                     /*!< I2S FIFOSTATUS: TXFIFONUM (Bit 0)                     */
#define I2S_FIFOSTATUS_TXFIFONUM_Msk      (0xfUL)                   /*!< I2S FIFOSTATUS: TXFIFONUM (Bitfield-Mask: 0x0f)       */
/* ======================================================  FIFOCONTROL  ====================================================== */
#define I2S_FIFOCONTROL_RXFIFOFL_Pos      (22UL)                    /*!< I2S FIFOCONTROL: RXFIFOFL (Bit 22)                    */
#define I2S_FIFOCONTROL_RXFIFOFL_Msk      (0x400000UL)              /*!< I2S FIFOCONTROL: RXFIFOFL (Bitfield-Mask: 0x01)       */
#define I2S_FIFOCONTROL_TXFIFOFL_Pos      (21UL)                    /*!< I2S FIFOCONTROL: TXFIFOFL (Bit 21)                    */
#define I2S_FIFOCONTROL_TXFIFOFL_Msk      (0x200000UL)              /*!< I2S FIFOCONTROL: TXFIFOFL (Bitfield-Mask: 0x01)       */
#define I2S_FIFOCONTROL_RXFIFOWM_Pos      (16UL)                    /*!< I2S FIFOCONTROL: RXFIFOWM (Bit 16)                    */
#define I2S_FIFOCONTROL_RXFIFOWM_Msk      (0xf0000UL)               /*!< I2S FIFOCONTROL: RXFIFOWM (Bitfield-Mask: 0x0f)       */
#define I2S_FIFOCONTROL_TXFIFOWM_Pos      (0UL)                     /*!< I2S FIFOCONTROL: TXFIFOWM (Bit 0)                     */
#define I2S_FIFOCONTROL_TXFIFOWM_Msk      (0xfUL)                   /*!< I2S FIFOCONTROL: TXFIFOWM (Bitfield-Mask: 0x0f)       */
/* ====================================================  FIFOCONTROL_SET  ==================================================== */
/* ====================================================  FIFOCONTROL_CLR  ==================================================== */
/* ======================================================  INTCONTROL  ======================================================= */
#define I2S_INTCONTROL_RXHWMIEN_Pos       (3UL)                     /*!< I2S INTCONTROL: RXHWMIEN (Bit 3)                      */
#define I2S_INTCONTROL_RXHWMIEN_Msk       (0x8UL)                   /*!< I2S INTCONTROL: RXHWMIEN (Bitfield-Mask: 0x01)        */
#define I2S_INTCONTROL_TXLWMIEN_Pos       (2UL)                     /*!< I2S INTCONTROL: TXLWMIEN (Bit 2)                      */
#define I2S_INTCONTROL_TXLWMIEN_Msk       (0x4UL)                   /*!< I2S INTCONTROL: TXLWMIEN (Bitfield-Mask: 0x01)        */
#define I2S_INTCONTROL_RXOFIEN_Pos        (1UL)                     /*!< I2S INTCONTROL: RXOFIEN (Bit 1)                       */
#define I2S_INTCONTROL_RXOFIEN_Msk        (0x2UL)                   /*!< I2S INTCONTROL: RXOFIEN (Bitfield-Mask: 0x01)         */
#define I2S_INTCONTROL_TXUFIEN_Pos        (0UL)                     /*!< I2S INTCONTROL: TXUFIEN (Bit 0)                       */
#define I2S_INTCONTROL_TXUFIEN_Msk        (0x1UL)                   /*!< I2S INTCONTROL: TXUFIEN (Bitfield-Mask: 0x01)         */
/* ====================================================  INTCONTROL_SET  ===================================================== */
/* ====================================================  INTCONTROL_CLR  ===================================================== */
/* ========================================================  STATUS  ========================================================= */
#define I2S_STATUS_RXCLKENRF_Pos          (9UL)                     /*!< I2S STATUS: RXCLKENRF (Bit 9)                         */
#define I2S_STATUS_RXCLKENRF_Msk          (0x200UL)                 /*!< I2S STATUS: RXCLKENRF (Bitfield-Mask: 0x01)           */
#define I2S_STATUS_TXCLKENRF_Pos          (8UL)                     /*!< I2S STATUS: TXCLKENRF (Bit 8)                         */
#define I2S_STATUS_TXCLKENRF_Msk          (0x100UL)                 /*!< I2S STATUS: TXCLKENRF (Bitfield-Mask: 0x01)           */
#define I2S_STATUS_RXCLKSELRF_Pos         (7UL)                     /*!< I2S STATUS: RXCLKSELRF (Bit 7)                        */
#define I2S_STATUS_RXCLKSELRF_Msk         (0x80UL)                  /*!< I2S STATUS: RXCLKSELRF (Bitfield-Mask: 0x01)          */
#define I2S_STATUS_TXCLKSELRF_Pos         (6UL)                     /*!< I2S STATUS: TXCLKSELRF (Bit 6)                        */
#define I2S_STATUS_TXCLKSELRF_Msk         (0x40UL)                  /*!< I2S STATUS: TXCLKSELRF (Bitfield-Mask: 0x01)          */
#define I2S_STATUS_CDSTS_Pos              (5UL)                     /*!< I2S STATUS: CDSTS (Bit 5)                             */
#define I2S_STATUS_CDSTS_Msk              (0x20UL)                  /*!< I2S STATUS: CDSTS (Bitfield-Mask: 0x01)               */
#define I2S_STATUS_CDBUSYF_Pos            (4UL)                     /*!< I2S STATUS: CDBUSYF (Bit 4)                           */
#define I2S_STATUS_CDBUSYF_Msk            (0x10UL)                  /*!< I2S STATUS: CDBUSYF (Bitfield-Mask: 0x01)             */
#define I2S_STATUS_RXHWMI_Pos             (3UL)                     /*!< I2S STATUS: RXHWMI (Bit 3)                            */
#define I2S_STATUS_RXHWMI_Msk             (0x8UL)                   /*!< I2S STATUS: RXHWMI (Bitfield-Mask: 0x01)              */
#define I2S_STATUS_TXLWMI_Pos             (2UL)                     /*!< I2S STATUS: TXLWMI (Bit 2)                            */
#define I2S_STATUS_TXLWMI_Msk             (0x4UL)                   /*!< I2S STATUS: TXLWMI (Bitfield-Mask: 0x01)              */
#define I2S_STATUS_RXOFI_Pos              (1UL)                     /*!< I2S STATUS: RXOFI (Bit 1)                             */
#define I2S_STATUS_RXOFI_Msk              (0x2UL)                   /*!< I2S STATUS: RXOFI (Bitfield-Mask: 0x01)               */
#define I2S_STATUS_TXUFI_Pos              (0UL)                     /*!< I2S STATUS: TXUFI (Bit 0)                             */
#define I2S_STATUS_TXUFI_Msk              (0x1UL)                   /*!< I2S STATUS: TXUFI (Bitfield-Mask: 0x01)               */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ======================================================  DMACONTROL  ======================================================= */
#define I2S_DMACONTROL_RXDMABMD_Pos       (3UL)                     /*!< I2S DMACONTROL: RXDMABMD (Bit 3)                      */
#define I2S_DMACONTROL_RXDMABMD_Msk       (0x8UL)                   /*!< I2S DMACONTROL: RXDMABMD (Bitfield-Mask: 0x01)        */
#define I2S_DMACONTROL_TXDMABMD_Pos       (2UL)                     /*!< I2S DMACONTROL: TXDMABMD (Bit 2)                      */
#define I2S_DMACONTROL_TXDMABMD_Msk       (0x4UL)                   /*!< I2S DMACONTROL: TXDMABMD (Bitfield-Mask: 0x01)        */
#define I2S_DMACONTROL_RXDMAEN_Pos        (1UL)                     /*!< I2S DMACONTROL: RXDMAEN (Bit 1)                       */
#define I2S_DMACONTROL_RXDMAEN_Msk        (0x2UL)                   /*!< I2S DMACONTROL: RXDMAEN (Bitfield-Mask: 0x01)         */
#define I2S_DMACONTROL_TXDMAEN_Pos        (0UL)                     /*!< I2S DMACONTROL: TXDMAEN (Bit 0)                       */
#define I2S_DMACONTROL_TXDMAEN_Msk        (0x1UL)                   /*!< I2S DMACONTROL: TXDMAEN (Bitfield-Mask: 0x01)         */
/* ====================================================  DMACONTROL_SET  ===================================================== */
/* ====================================================  DMACONTROL_CLR  ===================================================== */
/* ======================================================  DBGCONTROL  ======================================================= */
#define I2S_DBGCONTROL_RXDBGMD_Pos        (3UL)                     /*!< I2S DBGCONTROL: RXDBGMD (Bit 3)                       */
#define I2S_DBGCONTROL_RXDBGMD_Msk        (0x8UL)                   /*!< I2S DBGCONTROL: RXDBGMD (Bitfield-Mask: 0x01)         */
#define I2S_DBGCONTROL_TXDBGMD_Pos        (2UL)                     /*!< I2S DBGCONTROL: TXDBGMD (Bit 2)                       */
#define I2S_DBGCONTROL_TXDBGMD_Msk        (0x4UL)                   /*!< I2S DBGCONTROL: TXDBGMD (Bitfield-Mask: 0x01)         */
#define I2S_DBGCONTROL_RXDBGHEN_Pos       (1UL)                     /*!< I2S DBGCONTROL: RXDBGHEN (Bit 1)                      */
#define I2S_DBGCONTROL_RXDBGHEN_Msk       (0x2UL)                   /*!< I2S DBGCONTROL: RXDBGHEN (Bitfield-Mask: 0x01)        */
#define I2S_DBGCONTROL_TXDBGHEN_Pos       (0UL)                     /*!< I2S DBGCONTROL: TXDBGHEN (Bit 0)                      */
#define I2S_DBGCONTROL_TXDBGHEN_Msk       (0x1UL)                   /*!< I2S DBGCONTROL: TXDBGHEN (Bitfield-Mask: 0x01)        */
/* ====================================================  DBGCONTROL_SET  ===================================================== */
/* ====================================================  DBGCONTROL_CLR  ===================================================== */


/* =========================================================================================================================== */
/* ================                                            PLL                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  DIVIDER  ======================================================== */
#define PLL_DIVIDER_N_Pos                 (16UL)                    /*!< PLL DIVIDER: N (Bit 16)                               */
#define PLL_DIVIDER_N_Msk                 (0xfff0000UL)             /*!< PLL DIVIDER: N (Bitfield-Mask: 0xfff)                 */
#define PLL_DIVIDER_M_Pos                 (0UL)                     /*!< PLL DIVIDER: M (Bit 0)                                */
#define PLL_DIVIDER_M_Msk                 (0xfffUL)                 /*!< PLL DIVIDER: M (Bitfield-Mask: 0xfff)                 */
/* ========================================================  CONTROL  ======================================================== */
#define PLL_CONTROL_OUTMD_Pos             (30UL)                    /*!< PLL CONTROL: OUTMD (Bit 30)                           */
#define PLL_CONTROL_OUTMD_Msk             (0xc0000000UL)            /*!< PLL CONTROL: OUTMD (Bitfield-Mask: 0x03)              */
#define PLL_CONTROL_EDGSEL_Pos            (29UL)                    /*!< PLL CONTROL: EDGSEL (Bit 29)                          */
#define PLL_CONTROL_EDGSEL_Msk            (0x20000000UL)            /*!< PLL CONTROL: EDGSEL (Bitfield-Mask: 0x01)             */
#define PLL_CONTROL_DITHEN_Pos            (28UL)                    /*!< PLL CONTROL: DITHEN (Bit 28)                          */
#define PLL_CONTROL_DITHEN_Msk            (0x10000000UL)            /*!< PLL CONTROL: DITHEN (Bitfield-Mask: 0x01)             */
#define PLL_CONTROL_STALL_Pos             (26UL)                    /*!< PLL CONTROL: STALL (Bit 26)                           */
#define PLL_CONTROL_STALL_Msk             (0x4000000UL)             /*!< PLL CONTROL: STALL (Bitfield-Mask: 0x01)              */
#define PLL_CONTROL_LOCKTH_Pos            (20UL)                    /*!< PLL CONTROL: LOCKTH (Bit 20)                          */
#define PLL_CONTROL_LOCKTH_Msk            (0x300000UL)              /*!< PLL CONTROL: LOCKTH (Bitfield-Mask: 0x03)             */
#define PLL_CONTROL_REFSEL_Pos            (16UL)                    /*!< PLL CONTROL: REFSEL (Bit 16)                          */
#define PLL_CONTROL_REFSEL_Msk            (0x30000UL)               /*!< PLL CONTROL: REFSEL (Bitfield-Mask: 0x03)             */
#define PLL_CONTROL_LCKPOL_Pos            (11UL)                    /*!< PLL CONTROL: LCKPOL (Bit 11)                          */
#define PLL_CONTROL_LCKPOL_Msk            (0x800UL)                 /*!< PLL CONTROL: LCKPOL (Bitfield-Mask: 0x01)             */
#define PLL_CONTROL_LCKIEN_Pos            (10UL)                    /*!< PLL CONTROL: LCKIEN (Bit 10)                          */
#define PLL_CONTROL_LCKIEN_Msk            (0x400UL)                 /*!< PLL CONTROL: LCKIEN (Bitfield-Mask: 0x01)             */
#define PLL_CONTROL_LMTIEN_Pos            (9UL)                     /*!< PLL CONTROL: LMTIEN (Bit 9)                           */
#define PLL_CONTROL_LMTIEN_Msk            (0x200UL)                 /*!< PLL CONTROL: LMTIEN (Bitfield-Mask: 0x01)             */
#define PLL_CONTROL_LCKI_Pos              (2UL)                     /*!< PLL CONTROL: LCKI (Bit 2)                             */
#define PLL_CONTROL_LCKI_Msk              (0x4UL)                   /*!< PLL CONTROL: LCKI (Bitfield-Mask: 0x01)               */
#define PLL_CONTROL_HLMTF_Pos             (1UL)                     /*!< PLL CONTROL: HLMTF (Bit 1)                            */
#define PLL_CONTROL_HLMTF_Msk             (0x2UL)                   /*!< PLL CONTROL: HLMTF (Bitfield-Mask: 0x01)              */
#define PLL_CONTROL_LLMTF_Pos             (0UL)                     /*!< PLL CONTROL: LLMTF (Bit 0)                            */
#define PLL_CONTROL_LLMTF_Msk             (0x1UL)                   /*!< PLL CONTROL: LLMTF (Bitfield-Mask: 0x01)              */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  SSPR  ========================================================== */
#define PLL_SSPR_SSUINV_Pos               (8UL)                     /*!< PLL SSPR: SSUINV (Bit 8)                              */
#define PLL_SSPR_SSUINV_Msk               (0x1f00UL)                /*!< PLL SSPR: SSUINV (Bitfield-Mask: 0x1f)                */
#define PLL_SSPR_SSAMP_Pos                (0UL)                     /*!< PLL SSPR: SSAMP (Bit 0)                               */
#define PLL_SSPR_SSAMP_Msk                (0x7UL)                   /*!< PLL SSPR: SSAMP (Bitfield-Mask: 0x07)                 */
/* =======================================================  CALCONFIG  ======================================================= */
#define PLL_CALCONFIG_RANGE_Pos           (16UL)                    /*!< PLL CALCONFIG: RANGE (Bit 16)                         */
#define PLL_CALCONFIG_RANGE_Msk           (0x70000UL)               /*!< PLL CALCONFIG: RANGE (Bitfield-Mask: 0x07)            */
#define PLL_CALCONFIG_CAL_Pos             (4UL)                     /*!< PLL CALCONFIG: CAL (Bit 4)                            */
#define PLL_CALCONFIG_CAL_Msk             (0xfff0UL)                /*!< PLL CALCONFIG: CAL (Bitfield-Mask: 0xfff)             */
#define PLL_CALCONFIG_DITHER_Pos          (0UL)                     /*!< PLL CALCONFIG: DITHER (Bit 0)                         */
#define PLL_CALCONFIG_DITHER_Msk          (0xfUL)                   /*!< PLL CALCONFIG: DITHER (Bitfield-Mask: 0x0f)           */


/* =========================================================================================================================== */
/* ================                                          EXTOSC                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define EXTOSC_CONTROL_OSCMD_Pos          (4UL)                     /*!< EXTOSC CONTROL: OSCMD (Bit 4)                         */
#define EXTOSC_CONTROL_OSCMD_Msk          (0x70UL)                  /*!< EXTOSC CONTROL: OSCMD (Bitfield-Mask: 0x07)           */
#define EXTOSC_CONTROL_OSCVLDF_Pos        (3UL)                     /*!< EXTOSC CONTROL: OSCVLDF (Bit 3)                       */
#define EXTOSC_CONTROL_OSCVLDF_Msk        (0x8UL)                   /*!< EXTOSC CONTROL: OSCVLDF (Bitfield-Mask: 0x01)         */
#define EXTOSC_CONTROL_FREQCN_Pos         (0UL)                     /*!< EXTOSC CONTROL: FREQCN (Bit 0)                        */
#define EXTOSC_CONTROL_FREQCN_Msk         (0x7UL)                   /*!< EXTOSC CONTROL: FREQCN (Bitfield-Mask: 0x07)          */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           VREG                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define VREG_CONTROL_VREGDIS_Pos          (31UL)                    /*!< VREG CONTROL: VREGDIS (Bit 31)                        */
#define VREG_CONTROL_VREGDIS_Msk          (0x80000000UL)            /*!< VREG CONTROL: VREGDIS (Bitfield-Mask: 0x01)           */
#define VREG_CONTROL_VBUSIVLDIEN_Pos      (8UL)                     /*!< VREG CONTROL: VBUSIVLDIEN (Bit 8)                     */
#define VREG_CONTROL_VBUSIVLDIEN_Msk      (0x100UL)                 /*!< VREG CONTROL: VBUSIVLDIEN (Bitfield-Mask: 0x01)       */
#define VREG_CONTROL_VBUSIVLDI_Pos        (7UL)                     /*!< VREG CONTROL: VBUSIVLDI (Bit 7)                       */
#define VREG_CONTROL_VBUSIVLDI_Msk        (0x80UL)                  /*!< VREG CONTROL: VBUSIVLDI (Bitfield-Mask: 0x01)         */
#define VREG_CONTROL_SENSEEN_Pos          (6UL)                     /*!< VREG CONTROL: SENSEEN (Bit 6)                         */
#define VREG_CONTROL_SENSEEN_Msk          (0x40UL)                  /*!< VREG CONTROL: SENSEEN (Bitfield-Mask: 0x01)           */
#define VREG_CONTROL_BGDIS_Pos            (5UL)                     /*!< VREG CONTROL: BGDIS (Bit 5)                           */
#define VREG_CONTROL_BGDIS_Msk            (0x20UL)                  /*!< VREG CONTROL: BGDIS (Bitfield-Mask: 0x01)             */
#define VREG_CONTROL_SUSEN_Pos            (1UL)                     /*!< VREG CONTROL: SUSEN (Bit 1)                           */
#define VREG_CONTROL_SUSEN_Msk            (0x2UL)                   /*!< VREG CONTROL: SUSEN (Bitfield-Mask: 0x01)             */
#define VREG_CONTROL_VBUSVLDF_Pos         (0UL)                     /*!< VREG CONTROL: VBUSVLDF (Bit 0)                        */
#define VREG_CONTROL_VBUSVLDF_Msk         (0x1UL)                   /*!< VREG CONTROL: VBUSVLDF (Bitfield-Mask: 0x01)          */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           LPOSC                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  OSCVAL  ========================================================= */
#define LPOSC_OSCVAL_OSCVAL_Pos           (0UL)                     /*!< LPOSC OSCVAL: OSCVAL (Bit 0)                          */
#define LPOSC_OSCVAL_OSCVAL_Msk           (0xfUL)                   /*!< LPOSC OSCVAL: OSCVAL (Bitfield-Mask: 0x0f)            */
/* ======================================================  OSCVAL_SET  ======================================================= */
/* ======================================================  OSCVAL_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          EXTVREG                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define EXTVREG_CONTROL_EVREGEN_Pos       (31UL)                    /*!< EXTVREG CONTROL: EVREGEN (Bit 31)                     */
#define EXTVREG_CONTROL_EVREGEN_Msk       (0x80000000UL)            /*!< EXTVREG CONTROL: EVREGEN (Bitfield-Mask: 0x01)        */
#define EXTVREG_CONTROL_FBPINSEL_Pos      (27UL)                    /*!< EXTVREG CONTROL: FBPINSEL (Bit 27)                    */
#define EXTVREG_CONTROL_FBPINSEL_Msk      (0x8000000UL)             /*!< EXTVREG CONTROL: FBPINSEL (Bitfield-Mask: 0x01)       */
#define EXTVREG_CONTROL_PNSEL_Pos         (26UL)                    /*!< EXTVREG CONTROL: PNSEL (Bit 26)                       */
#define EXTVREG_CONTROL_PNSEL_Msk         (0x4000000UL)             /*!< EXTVREG CONTROL: PNSEL (Bitfield-Mask: 0x01)          */
#define EXTVREG_CONTROL_FBLEN_Pos         (25UL)                    /*!< EXTVREG CONTROL: FBLEN (Bit 25)                       */
#define EXTVREG_CONTROL_FBLEN_Msk         (0x2000000UL)             /*!< EXTVREG CONTROL: FBLEN (Bitfield-Mask: 0x01)          */
#define EXTVREG_CONTROL_WPULLEN_Pos       (24UL)                    /*!< EXTVREG CONTROL: WPULLEN (Bit 24)                     */
#define EXTVREG_CONTROL_WPULLEN_Msk       (0x1000000UL)             /*!< EXTVREG CONTROL: WPULLEN (Bitfield-Mask: 0x01)        */
#define EXTVREG_CONTROL_SAEN_Pos          (0UL)                     /*!< EXTVREG CONTROL: SAEN (Bit 0)                         */
#define EXTVREG_CONTROL_SAEN_Msk          (0x1UL)                   /*!< EXTVREG CONTROL: SAEN (Bitfield-Mask: 0x01)           */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  CONFIG  ========================================================= */
#define EXTVREG_CONFIG_VOUTSEL_Pos        (24UL)                    /*!< EXTVREG CONFIG: VOUTSEL (Bit 24)                      */
#define EXTVREG_CONFIG_VOUTSEL_Msk        (0x3f000000UL)            /*!< EXTVREG CONFIG: VOUTSEL (Bitfield-Mask: 0x3f)         */
#define EXTVREG_CONFIG_IMAX_Pos           (16UL)                    /*!< EXTVREG CONFIG: IMAX (Bit 16)                         */
#define EXTVREG_CONFIG_IMAX_Msk           (0x70000UL)               /*!< EXTVREG CONFIG: IMAX (Bitfield-Mask: 0x07)            */
#define EXTVREG_CONFIG_FBRATE_Pos         (12UL)                    /*!< EXTVREG CONFIG: FBRATE (Bit 12)                       */
#define EXTVREG_CONFIG_FBRATE_Msk         (0x7000UL)                /*!< EXTVREG CONFIG: FBRATE (Bitfield-Mask: 0x07)          */
#define EXTVREG_CONFIG_FBVOSEL_Pos        (8UL)                     /*!< EXTVREG CONFIG: FBVOSEL (Bit 8)                       */
#define EXTVREG_CONFIG_FBVOSEL_Msk        (0x700UL)                 /*!< EXTVREG CONFIG: FBVOSEL (Bitfield-Mask: 0x07)         */
#define EXTVREG_CONFIG_IMIN_Pos           (2UL)                     /*!< EXTVREG CONFIG: IMIN (Bit 2)                          */
#define EXTVREG_CONFIG_IMIN_Msk           (0x1cUL)                  /*!< EXTVREG CONFIG: IMIN (Bitfield-Mask: 0x07)            */
#define EXTVREG_CONFIG_IMINFINE_Pos       (0UL)                     /*!< EXTVREG CONFIG: IMINFINE (Bit 0)                      */
#define EXTVREG_CONFIG_IMINFINE_Msk       (0x3UL)                   /*!< EXTVREG CONFIG: IMINFINE (Bitfield-Mask: 0x03)        */
/* ========================================================  STATUS  ========================================================= */
#define EXTVREG_STATUS_FBMAXF_Pos         (0UL)                     /*!< EXTVREG STATUS: FBMAXF (Bit 0)                        */
#define EXTVREG_STATUS_FBMAXF_Msk         (0x1UL)                   /*!< EXTVREG STATUS: FBMAXF (Bitfield-Mask: 0x01)          */
/* =======================================================  CSCONTROL  ======================================================= */
#define EXTVREG_CSCONTROL_ADCISNSEN_Pos   (31UL)                    /*!< EXTVREG CSCONTROL: ADCISNSEN (Bit 31)                 */
#define EXTVREG_CSCONTROL_ADCISNSEN_Msk   (0x80000000UL)            /*!< EXTVREG CSCONTROL: ADCISNSEN (Bitfield-Mask: 0x01)    */
#define EXTVREG_CSCONTROL_ISNSEN_Pos      (30UL)                    /*!< EXTVREG CSCONTROL: ISNSEN (Bit 30)                    */
#define EXTVREG_CSCONTROL_ISNSEN_Msk      (0x40000000UL)            /*!< EXTVREG CSCONTROL: ISNSEN (Bitfield-Mask: 0x01)       */
/* =====================================================  CSCONTROL_SET  ===================================================== */
/* =====================================================  CSCONTROL_CLR  ===================================================== */
/* =======================================================  CSCONFIG  ======================================================== */
#define EXTVREG_CSCONFIG_ISINSEL_Pos      (6UL)                     /*!< EXTVREG CSCONFIG: ISINSEL (Bit 6)                     */
#define EXTVREG_CSCONFIG_ISINSEL_Msk      (0xc0UL)                  /*!< EXTVREG CSCONFIG: ISINSEL (Bitfield-Mask: 0x03)       */
#define EXTVREG_CSCONFIG_ISOGAIN_Pos      (3UL)                     /*!< EXTVREG CSCONFIG: ISOGAIN (Bit 3)                     */
#define EXTVREG_CSCONFIG_ISOGAIN_Msk      (0x38UL)                  /*!< EXTVREG CSCONFIG: ISOGAIN (Bitfield-Mask: 0x07)       */
#define EXTVREG_CSCONFIG_ISADCGAIN_Pos    (0UL)                     /*!< EXTVREG CSCONFIG: ISADCGAIN (Bit 0)                   */
#define EXTVREG_CSCONFIG_ISADCGAIN_Msk    (0x7UL)                   /*!< EXTVREG CSCONFIG: ISADCGAIN (Bitfield-Mask: 0x07)     */


/* =========================================================================================================================== */
/* ================                                            IVC                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define IVC_CONTROL_C1EN_Pos              (31UL)                    /*!< IVC CONTROL: C1EN (Bit 31)                            */
#define IVC_CONTROL_C1EN_Msk              (0x80000000UL)            /*!< IVC CONTROL: C1EN (Bitfield-Mask: 0x01)               */
#define IVC_CONTROL_C0EN_Pos              (30UL)                    /*!< IVC CONTROL: C0EN (Bit 30)                            */
#define IVC_CONTROL_C0EN_Msk              (0x40000000UL)            /*!< IVC CONTROL: C0EN (Bitfield-Mask: 0x01)               */
#define IVC_CONTROL_IN1RANGE_Pos          (4UL)                     /*!< IVC CONTROL: IN1RANGE (Bit 4)                         */
#define IVC_CONTROL_IN1RANGE_Msk          (0x70UL)                  /*!< IVC CONTROL: IN1RANGE (Bitfield-Mask: 0x07)           */
#define IVC_CONTROL_IN0RANGE_Pos          (0UL)                     /*!< IVC CONTROL: IN0RANGE (Bit 0)                         */
#define IVC_CONTROL_IN0RANGE_Msk          (0x7UL)                   /*!< IVC CONTROL: IN0RANGE (Bitfield-Mask: 0x07)           */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                            PMU                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define PMU_CONTROL_PMUASLPEN_Pos         (4UL)                     /*!< PMU CONTROL: PMUASLPEN (Bit 4)                        */
#define PMU_CONTROL_PMUASLPEN_Msk         (0x10UL)                  /*!< PMU CONTROL: PMUASLPEN (Bitfield-Mask: 0x01)          */
#define PMU_CONTROL_PWAKEEN_Pos           (3UL)                     /*!< PMU CONTROL: PWAKEEN (Bit 3)                          */
#define PMU_CONTROL_PWAKEEN_Msk           (0x8UL)                   /*!< PMU CONTROL: PWAKEEN (Bitfield-Mask: 0x01)            */
#define PMU_CONTROL_PINLPEN_Pos           (2UL)                     /*!< PMU CONTROL: PINLPEN (Bit 2)                          */
#define PMU_CONTROL_PINLPEN_Msk           (0x4UL)                   /*!< PMU CONTROL: PINLPEN (Bitfield-Mask: 0x01)            */
#define PMU_CONTROL_PERILPEN_Pos          (1UL)                     /*!< PMU CONTROL: PERILPEN (Bit 1)                         */
#define PMU_CONTROL_PERILPEN_Msk          (0x2UL)                   /*!< PMU CONTROL: PERILPEN (Bitfield-Mask: 0x01)           */
#define PMU_CONTROL_WAKECLR_Pos           (0UL)                     /*!< PMU CONTROL: WAKECLR (Bit 0)                          */
#define PMU_CONTROL_WAKECLR_Msk           (0x1UL)                   /*!< PMU CONTROL: WAKECLR (Bitfield-Mask: 0x01)            */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  CONFIG  ========================================================= */
#define PMU_CONFIG_LPT0REN_Pos            (15UL)                    /*!< PMU CONFIG: LPT0REN (Bit 15)                          */
#define PMU_CONFIG_LPT0REN_Msk            (0x8000UL)                /*!< PMU CONFIG: LPT0REN (Bitfield-Mask: 0x01)             */
#define PMU_CONFIG_PWAKEREN_Pos           (14UL)                    /*!< PMU CONFIG: PWAKEREN (Bit 14)                         */
#define PMU_CONFIG_PWAKEREN_Msk           (0x4000UL)                /*!< PMU CONFIG: PWAKEREN (Bitfield-Mask: 0x01)            */
#define PMU_CONFIG_CMP0REN_Pos            (13UL)                    /*!< PMU CONFIG: CMP0REN (Bit 13)                          */
#define PMU_CONFIG_CMP0REN_Msk            (0x2000UL)                /*!< PMU CONFIG: CMP0REN (Bitfield-Mask: 0x01)             */
#define PMU_CONFIG_RTC0AREN_Pos           (9UL)                     /*!< PMU CONFIG: RTC0AREN (Bit 9)                          */
#define PMU_CONFIG_RTC0AREN_Msk           (0x200UL)                 /*!< PMU CONFIG: RTC0AREN (Bitfield-Mask: 0x01)            */
#define PMU_CONFIG_RTC0FREN_Pos           (8UL)                     /*!< PMU CONFIG: RTC0FREN (Bit 8)                          */
#define PMU_CONFIG_RTC0FREN_Msk           (0x100UL)                 /*!< PMU CONFIG: RTC0FREN (Bitfield-Mask: 0x01)            */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  STATUS  ========================================================= */
#define PMU_STATUS_PORF_Pos               (2UL)                     /*!< PMU STATUS: PORF (Bit 2)                              */
#define PMU_STATUS_PORF_Msk               (0x4UL)                   /*!< PMU STATUS: PORF (Bitfield-Mask: 0x01)                */
#define PMU_STATUS_PWAKEF_Pos             (1UL)                     /*!< PMU STATUS: PWAKEF (Bit 1)                            */
#define PMU_STATUS_PWAKEF_Msk             (0x2UL)                   /*!< PMU STATUS: PWAKEF (Bitfield-Mask: 0x01)              */
#define PMU_STATUS_PM9EF_Pos              (0UL)                     /*!< PMU STATUS: PM9EF (Bit 0)                             */
#define PMU_STATUS_PM9EF_Msk              (0x1UL)                   /*!< PMU STATUS: PM9EF (Bitfield-Mask: 0x01)               */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ========================================================  WAKEEN  ========================================================= */
#define PMU_WAKEEN_RSTWEN_Pos             (8UL)                     /*!< PMU WAKEEN: RSTWEN (Bit 8)                            */
#define PMU_WAKEEN_RSTWEN_Msk             (0x100UL)                 /*!< PMU WAKEEN: RSTWEN (Bitfield-Mask: 0x01)              */
#define PMU_WAKEEN_LPT0WEN_Pos            (7UL)                     /*!< PMU WAKEEN: LPT0WEN (Bit 7)                           */
#define PMU_WAKEEN_LPT0WEN_Msk            (0x80UL)                  /*!< PMU WAKEEN: LPT0WEN (Bitfield-Mask: 0x01)             */
#define PMU_WAKEEN_PWAKEWEN_Pos           (6UL)                     /*!< PMU WAKEEN: PWAKEWEN (Bit 6)                          */
#define PMU_WAKEEN_PWAKEWEN_Msk           (0x40UL)                  /*!< PMU WAKEEN: PWAKEWEN (Bitfield-Mask: 0x01)            */
#define PMU_WAKEEN_CMP0WEN_Pos            (5UL)                     /*!< PMU WAKEEN: CMP0WEN (Bit 5)                           */
#define PMU_WAKEEN_CMP0WEN_Msk            (0x20UL)                  /*!< PMU WAKEEN: CMP0WEN (Bitfield-Mask: 0x01)             */
#define PMU_WAKEEN_RTC0AWEN_Pos           (1UL)                     /*!< PMU WAKEEN: RTC0AWEN (Bit 1)                          */
#define PMU_WAKEEN_RTC0AWEN_Msk           (0x2UL)                   /*!< PMU WAKEEN: RTC0AWEN (Bitfield-Mask: 0x01)            */
#define PMU_WAKEEN_RTC0FWEN_Pos           (0UL)                     /*!< PMU WAKEEN: RTC0FWEN (Bit 0)                          */
#define PMU_WAKEEN_RTC0FWEN_Msk           (0x1UL)                   /*!< PMU WAKEEN: RTC0FWEN (Bitfield-Mask: 0x01)            */
/* ======================================================  WAKEEN_SET  ======================================================= */
/* ======================================================  WAKEEN_CLR  ======================================================= */
/* ======================================================  WAKESTATUS  ======================================================= */
#define PMU_WAKESTATUS_RSTWF_Pos          (8UL)                     /*!< PMU WAKESTATUS: RSTWF (Bit 8)                         */
#define PMU_WAKESTATUS_RSTWF_Msk          (0x100UL)                 /*!< PMU WAKESTATUS: RSTWF (Bitfield-Mask: 0x01)           */
#define PMU_WAKESTATUS_LPT0WF_Pos         (7UL)                     /*!< PMU WAKESTATUS: LPT0WF (Bit 7)                        */
#define PMU_WAKESTATUS_LPT0WF_Msk         (0x80UL)                  /*!< PMU WAKESTATUS: LPT0WF (Bitfield-Mask: 0x01)          */
#define PMU_WAKESTATUS_PWAKEWF_Pos        (6UL)                     /*!< PMU WAKESTATUS: PWAKEWF (Bit 6)                       */
#define PMU_WAKESTATUS_PWAKEWF_Msk        (0x40UL)                  /*!< PMU WAKESTATUS: PWAKEWF (Bitfield-Mask: 0x01)         */
#define PMU_WAKESTATUS_CMP0WF_Pos         (5UL)                     /*!< PMU WAKESTATUS: CMP0WF (Bit 5)                        */
#define PMU_WAKESTATUS_CMP0WF_Msk         (0x20UL)                  /*!< PMU WAKESTATUS: CMP0WF (Bitfield-Mask: 0x01)          */
#define PMU_WAKESTATUS_RTC0AWF_Pos        (1UL)                     /*!< PMU WAKESTATUS: RTC0AWF (Bit 1)                       */
#define PMU_WAKESTATUS_RTC0AWF_Msk        (0x2UL)                   /*!< PMU WAKESTATUS: RTC0AWF (Bitfield-Mask: 0x01)         */
#define PMU_WAKESTATUS_RTC0FWF_Pos        (0UL)                     /*!< PMU WAKESTATUS: RTC0FWF (Bit 0)                       */
#define PMU_WAKESTATUS_RTC0FWF_Msk        (0x1UL)                   /*!< PMU WAKESTATUS: RTC0FWF (Bitfield-Mask: 0x01)         */
/* =========================================================  PWEN  ========================================================== */
#define PMU_PWEN_PW15EN_Pos               (15UL)                    /*!< PMU PWEN: PW15EN (Bit 15)                             */
#define PMU_PWEN_PW15EN_Msk               (0x8000UL)                /*!< PMU PWEN: PW15EN (Bitfield-Mask: 0x01)                */
#define PMU_PWEN_PW14EN_Pos               (14UL)                    /*!< PMU PWEN: PW14EN (Bit 14)                             */
#define PMU_PWEN_PW14EN_Msk               (0x4000UL)                /*!< PMU PWEN: PW14EN (Bitfield-Mask: 0x01)                */
#define PMU_PWEN_PW13EN_Pos               (13UL)                    /*!< PMU PWEN: PW13EN (Bit 13)                             */
#define PMU_PWEN_PW13EN_Msk               (0x2000UL)                /*!< PMU PWEN: PW13EN (Bitfield-Mask: 0x01)                */
#define PMU_PWEN_PW12EN_Pos               (12UL)                    /*!< PMU PWEN: PW12EN (Bit 12)                             */
#define PMU_PWEN_PW12EN_Msk               (0x1000UL)                /*!< PMU PWEN: PW12EN (Bitfield-Mask: 0x01)                */
#define PMU_PWEN_PW11EN_Pos               (11UL)                    /*!< PMU PWEN: PW11EN (Bit 11)                             */
#define PMU_PWEN_PW11EN_Msk               (0x800UL)                 /*!< PMU PWEN: PW11EN (Bitfield-Mask: 0x01)                */
#define PMU_PWEN_PW10EN_Pos               (10UL)                    /*!< PMU PWEN: PW10EN (Bit 10)                             */
#define PMU_PWEN_PW10EN_Msk               (0x400UL)                 /*!< PMU PWEN: PW10EN (Bitfield-Mask: 0x01)                */
#define PMU_PWEN_PW9EN_Pos                (9UL)                     /*!< PMU PWEN: PW9EN (Bit 9)                               */
#define PMU_PWEN_PW9EN_Msk                (0x200UL)                 /*!< PMU PWEN: PW9EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW8EN_Pos                (8UL)                     /*!< PMU PWEN: PW8EN (Bit 8)                               */
#define PMU_PWEN_PW8EN_Msk                (0x100UL)                 /*!< PMU PWEN: PW8EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW7EN_Pos                (7UL)                     /*!< PMU PWEN: PW7EN (Bit 7)                               */
#define PMU_PWEN_PW7EN_Msk                (0x80UL)                  /*!< PMU PWEN: PW7EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW6EN_Pos                (6UL)                     /*!< PMU PWEN: PW6EN (Bit 6)                               */
#define PMU_PWEN_PW6EN_Msk                (0x40UL)                  /*!< PMU PWEN: PW6EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW5EN_Pos                (5UL)                     /*!< PMU PWEN: PW5EN (Bit 5)                               */
#define PMU_PWEN_PW5EN_Msk                (0x20UL)                  /*!< PMU PWEN: PW5EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW4EN_Pos                (4UL)                     /*!< PMU PWEN: PW4EN (Bit 4)                               */
#define PMU_PWEN_PW4EN_Msk                (0x10UL)                  /*!< PMU PWEN: PW4EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW3EN_Pos                (3UL)                     /*!< PMU PWEN: PW3EN (Bit 3)                               */
#define PMU_PWEN_PW3EN_Msk                (0x8UL)                   /*!< PMU PWEN: PW3EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW2EN_Pos                (2UL)                     /*!< PMU PWEN: PW2EN (Bit 2)                               */
#define PMU_PWEN_PW2EN_Msk                (0x4UL)                   /*!< PMU PWEN: PW2EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW1EN_Pos                (1UL)                     /*!< PMU PWEN: PW1EN (Bit 1)                               */
#define PMU_PWEN_PW1EN_Msk                (0x2UL)                   /*!< PMU PWEN: PW1EN (Bitfield-Mask: 0x01)                 */
#define PMU_PWEN_PW0EN_Pos                (0UL)                     /*!< PMU PWEN: PW0EN (Bit 0)                               */
#define PMU_PWEN_PW0EN_Msk                (0x1UL)                   /*!< PMU PWEN: PW0EN (Bitfield-Mask: 0x01)                 */
/* =======================================================  PWEN_SET  ======================================================== */
/* =======================================================  PWEN_CLR  ======================================================== */
/* =========================================================  PWPOL  ========================================================= */
#define PMU_PWPOL_PW15POL_Pos             (15UL)                    /*!< PMU PWPOL: PW15POL (Bit 15)                           */
#define PMU_PWPOL_PW15POL_Msk             (0x8000UL)                /*!< PMU PWPOL: PW15POL (Bitfield-Mask: 0x01)              */
#define PMU_PWPOL_PW14POL_Pos             (14UL)                    /*!< PMU PWPOL: PW14POL (Bit 14)                           */
#define PMU_PWPOL_PW14POL_Msk             (0x4000UL)                /*!< PMU PWPOL: PW14POL (Bitfield-Mask: 0x01)              */
#define PMU_PWPOL_PW13POL_Pos             (13UL)                    /*!< PMU PWPOL: PW13POL (Bit 13)                           */
#define PMU_PWPOL_PW13POL_Msk             (0x2000UL)                /*!< PMU PWPOL: PW13POL (Bitfield-Mask: 0x01)              */
#define PMU_PWPOL_PW12POL_Pos             (12UL)                    /*!< PMU PWPOL: PW12POL (Bit 12)                           */
#define PMU_PWPOL_PW12POL_Msk             (0x1000UL)                /*!< PMU PWPOL: PW12POL (Bitfield-Mask: 0x01)              */
#define PMU_PWPOL_PW11POL_Pos             (11UL)                    /*!< PMU PWPOL: PW11POL (Bit 11)                           */
#define PMU_PWPOL_PW11POL_Msk             (0x800UL)                 /*!< PMU PWPOL: PW11POL (Bitfield-Mask: 0x01)              */
#define PMU_PWPOL_PW10POL_Pos             (10UL)                    /*!< PMU PWPOL: PW10POL (Bit 10)                           */
#define PMU_PWPOL_PW10POL_Msk             (0x400UL)                 /*!< PMU PWPOL: PW10POL (Bitfield-Mask: 0x01)              */
#define PMU_PWPOL_PW9POL_Pos              (9UL)                     /*!< PMU PWPOL: PW9POL (Bit 9)                             */
#define PMU_PWPOL_PW9POL_Msk              (0x200UL)                 /*!< PMU PWPOL: PW9POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW8POL_Pos              (8UL)                     /*!< PMU PWPOL: PW8POL (Bit 8)                             */
#define PMU_PWPOL_PW8POL_Msk              (0x100UL)                 /*!< PMU PWPOL: PW8POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW7POL_Pos              (7UL)                     /*!< PMU PWPOL: PW7POL (Bit 7)                             */
#define PMU_PWPOL_PW7POL_Msk              (0x80UL)                  /*!< PMU PWPOL: PW7POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW6POL_Pos              (6UL)                     /*!< PMU PWPOL: PW6POL (Bit 6)                             */
#define PMU_PWPOL_PW6POL_Msk              (0x40UL)                  /*!< PMU PWPOL: PW6POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW5POL_Pos              (5UL)                     /*!< PMU PWPOL: PW5POL (Bit 5)                             */
#define PMU_PWPOL_PW5POL_Msk              (0x20UL)                  /*!< PMU PWPOL: PW5POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW4POL_Pos              (4UL)                     /*!< PMU PWPOL: PW4POL (Bit 4)                             */
#define PMU_PWPOL_PW4POL_Msk              (0x10UL)                  /*!< PMU PWPOL: PW4POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW3POL_Pos              (3UL)                     /*!< PMU PWPOL: PW3POL (Bit 3)                             */
#define PMU_PWPOL_PW3POL_Msk              (0x8UL)                   /*!< PMU PWPOL: PW3POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW2POL_Pos              (2UL)                     /*!< PMU PWPOL: PW2POL (Bit 2)                             */
#define PMU_PWPOL_PW2POL_Msk              (0x4UL)                   /*!< PMU PWPOL: PW2POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW1POL_Pos              (1UL)                     /*!< PMU PWPOL: PW1POL (Bit 1)                             */
#define PMU_PWPOL_PW1POL_Msk              (0x2UL)                   /*!< PMU PWPOL: PW1POL (Bitfield-Mask: 0x01)               */
#define PMU_PWPOL_PW0POL_Pos              (0UL)                     /*!< PMU PWPOL: PW0POL (Bit 0)                             */
#define PMU_PWPOL_PW0POL_Msk              (0x1UL)                   /*!< PMU PWPOL: PW0POL (Bitfield-Mask: 0x01)               */
/* =======================================================  PWPOL_SET  ======================================================= */
/* =======================================================  PWPOL_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           LOCK                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
#define LOCK_KEY_KEY_Pos                  (0UL)                     /*!< LOCK KEY: KEY (Bit 0)                                 */
#define LOCK_KEY_KEY_Msk                  (0xffUL)                  /*!< LOCK KEY: KEY (Bitfield-Mask: 0xff)                   */
/* ======================================================  PERIPHLOCK0  ====================================================== */
#define LOCK_PERIPHLOCK0_IVCL_Pos         (28UL)                    /*!< LOCK PERIPHLOCK0: IVCL (Bit 28)                       */
#define LOCK_PERIPHLOCK0_IVCL_Msk         (0x10000000UL)            /*!< LOCK PERIPHLOCK0: IVCL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_EVREGL_Pos       (26UL)                    /*!< LOCK PERIPHLOCK0: EVREGL (Bit 26)                     */
#define LOCK_PERIPHLOCK0_EVREGL_Msk       (0x4000000UL)             /*!< LOCK PERIPHLOCK0: EVREGL (Bitfield-Mask: 0x01)        */
#define LOCK_PERIPHLOCK0_LPOSCL_Pos       (25UL)                    /*!< LOCK PERIPHLOCK0: LPOSCL (Bit 25)                     */
#define LOCK_PERIPHLOCK0_LPOSCL_Msk       (0x2000000UL)             /*!< LOCK PERIPHLOCK0: LPOSCL (Bitfield-Mask: 0x01)        */
#define LOCK_PERIPHLOCK0_VREGL_Pos        (24UL)                    /*!< LOCK PERIPHLOCK0: VREGL (Bit 24)                      */
#define LOCK_PERIPHLOCK0_VREGL_Msk        (0x1000000UL)             /*!< LOCK PERIPHLOCK0: VREGL (Bitfield-Mask: 0x01)         */
#define LOCK_PERIPHLOCK0_EXTOSCL_Pos      (23UL)                    /*!< LOCK PERIPHLOCK0: EXTOSCL (Bit 23)                    */
#define LOCK_PERIPHLOCK0_EXTOSCL_Msk      (0x800000UL)              /*!< LOCK PERIPHLOCK0: EXTOSCL (Bitfield-Mask: 0x01)       */
#define LOCK_PERIPHLOCK0_PLLL_Pos         (22UL)                    /*!< LOCK PERIPHLOCK0: PLLL (Bit 22)                       */
#define LOCK_PERIPHLOCK0_PLLL_Msk         (0x400000UL)              /*!< LOCK PERIPHLOCK0: PLLL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_I2SL_Pos         (21UL)                    /*!< LOCK PERIPHLOCK0: I2SL (Bit 21)                       */
#define LOCK_PERIPHLOCK0_I2SL_Msk         (0x200000UL)              /*!< LOCK PERIPHLOCK0: I2SL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_VREFL_Pos        (20UL)                    /*!< LOCK PERIPHLOCK0: VREFL (Bit 20)                      */
#define LOCK_PERIPHLOCK0_VREFL_Msk        (0x100000UL)              /*!< LOCK PERIPHLOCK0: VREFL (Bitfield-Mask: 0x01)         */
#define LOCK_PERIPHLOCK0_LPTL_Pos         (19UL)                    /*!< LOCK PERIPHLOCK0: LPTL (Bit 19)                       */
#define LOCK_PERIPHLOCK0_LPTL_Msk         (0x80000UL)               /*!< LOCK PERIPHLOCK0: LPTL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_DMAXBARL_Pos     (18UL)                    /*!< LOCK PERIPHLOCK0: DMAXBARL (Bit 18)                   */
#define LOCK_PERIPHLOCK0_DMAXBARL_Msk     (0x40000UL)               /*!< LOCK PERIPHLOCK0: DMAXBARL (Bitfield-Mask: 0x01)      */
#define LOCK_PERIPHLOCK0_DMACTRLL_Pos     (17UL)                    /*!< LOCK PERIPHLOCK0: DMACTRLL (Bit 17)                   */
#define LOCK_PERIPHLOCK0_DMACTRLL_Msk     (0x20000UL)               /*!< LOCK PERIPHLOCK0: DMACTRLL (Bitfield-Mask: 0x01)      */
#define LOCK_PERIPHLOCK0_IDACL_Pos        (16UL)                    /*!< LOCK PERIPHLOCK0: IDACL (Bit 16)                      */
#define LOCK_PERIPHLOCK0_IDACL_Msk        (0x10000UL)               /*!< LOCK PERIPHLOCK0: IDACL (Bitfield-Mask: 0x01)         */
#define LOCK_PERIPHLOCK0_VMONL_Pos        (15UL)                    /*!< LOCK PERIPHLOCK0: VMONL (Bit 15)                      */
#define LOCK_PERIPHLOCK0_VMONL_Msk        (0x8000UL)                /*!< LOCK PERIPHLOCK0: VMONL (Bitfield-Mask: 0x01)         */
#define LOCK_PERIPHLOCK0_CLKRSTL_Pos      (14UL)                    /*!< LOCK PERIPHLOCK0: CLKRSTL (Bit 14)                    */
#define LOCK_PERIPHLOCK0_CLKRSTL_Msk      (0x4000UL)                /*!< LOCK PERIPHLOCK0: CLKRSTL (Bitfield-Mask: 0x01)       */
#define LOCK_PERIPHLOCK0_RTCL_Pos         (13UL)                    /*!< LOCK PERIPHLOCK0: RTCL (Bit 13)                       */
#define LOCK_PERIPHLOCK0_RTCL_Msk         (0x2000UL)                /*!< LOCK PERIPHLOCK0: RTCL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_CRCL_Pos         (12UL)                    /*!< LOCK PERIPHLOCK0: CRCL (Bit 12)                       */
#define LOCK_PERIPHLOCK0_CRCL_Msk         (0x1000UL)                /*!< LOCK PERIPHLOCK0: CRCL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_AESL_Pos         (11UL)                    /*!< LOCK PERIPHLOCK0: AESL (Bit 11)                       */
#define LOCK_PERIPHLOCK0_AESL_Msk         (0x800UL)                 /*!< LOCK PERIPHLOCK0: AESL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_EMIFL_Pos        (10UL)                    /*!< LOCK PERIPHLOCK0: EMIFL (Bit 10)                      */
#define LOCK_PERIPHLOCK0_EMIFL_Msk        (0x400UL)                 /*!< LOCK PERIPHLOCK0: EMIFL (Bitfield-Mask: 0x01)         */
#define LOCK_PERIPHLOCK0_CSL_Pos          (9UL)                     /*!< LOCK PERIPHLOCK0: CSL (Bit 9)                         */
#define LOCK_PERIPHLOCK0_CSL_Msk          (0x200UL)                 /*!< LOCK PERIPHLOCK0: CSL (Bitfield-Mask: 0x01)           */
#define LOCK_PERIPHLOCK0_CMPL_Pos         (8UL)                     /*!< LOCK PERIPHLOCK0: CMPL (Bit 8)                        */
#define LOCK_PERIPHLOCK0_CMPL_Msk         (0x100UL)                 /*!< LOCK PERIPHLOCK0: CMPL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_SSGL_Pos         (7UL)                     /*!< LOCK PERIPHLOCK0: SSGL (Bit 7)                        */
#define LOCK_PERIPHLOCK0_SSGL_Msk         (0x80UL)                  /*!< LOCK PERIPHLOCK0: SSGL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_SARADCL_Pos      (6UL)                     /*!< LOCK PERIPHLOCK0: SARADCL (Bit 6)                     */
#define LOCK_PERIPHLOCK0_SARADCL_Msk      (0x40UL)                  /*!< LOCK PERIPHLOCK0: SARADCL (Bitfield-Mask: 0x01)       */
#define LOCK_PERIPHLOCK0_USBL_Pos         (5UL)                     /*!< LOCK PERIPHLOCK0: USBL (Bit 5)                        */
#define LOCK_PERIPHLOCK0_USBL_Msk         (0x20UL)                  /*!< LOCK PERIPHLOCK0: USBL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_TIMERL_Pos       (4UL)                     /*!< LOCK PERIPHLOCK0: TIMERL (Bit 4)                      */
#define LOCK_PERIPHLOCK0_TIMERL_Msk       (0x10UL)                  /*!< LOCK PERIPHLOCK0: TIMERL (Bitfield-Mask: 0x01)        */
#define LOCK_PERIPHLOCK0_PCAL_Pos         (3UL)                     /*!< LOCK PERIPHLOCK0: PCAL (Bit 3)                        */
#define LOCK_PERIPHLOCK0_PCAL_Msk         (0x8UL)                   /*!< LOCK PERIPHLOCK0: PCAL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_I2CL_Pos         (2UL)                     /*!< LOCK PERIPHLOCK0: I2CL (Bit 2)                        */
#define LOCK_PERIPHLOCK0_I2CL_Msk         (0x4UL)                   /*!< LOCK PERIPHLOCK0: I2CL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_SPIL_Pos         (1UL)                     /*!< LOCK PERIPHLOCK0: SPIL (Bit 1)                        */
#define LOCK_PERIPHLOCK0_SPIL_Msk         (0x2UL)                   /*!< LOCK PERIPHLOCK0: SPIL (Bitfield-Mask: 0x01)          */
#define LOCK_PERIPHLOCK0_USARTL_Pos       (0UL)                     /*!< LOCK PERIPHLOCK0: USARTL (Bit 0)                      */
#define LOCK_PERIPHLOCK0_USARTL_Msk       (0x1UL)                   /*!< LOCK PERIPHLOCK0: USARTL (Bitfield-Mask: 0x01)        */
/* ====================================================  PERIPHLOCK0_SET  ==================================================== */
/* ====================================================  PERIPHLOCK0_CLR  ==================================================== */
/* ======================================================  PERIPHLOCK1  ====================================================== */
#define LOCK_PERIPHLOCK1_PMUL_Pos         (0UL)                     /*!< LOCK PERIPHLOCK1: PMUL (Bit 0)                        */
#define LOCK_PERIPHLOCK1_PMUL_Msk         (0x1UL)                   /*!< LOCK PERIPHLOCK1: PMUL (Bitfield-Mask: 0x01)          */
/* ====================================================  PERIPHLOCK1_SET  ==================================================== */
/* ====================================================  PERIPHLOCK1_CLR  ==================================================== */


/* =========================================================================================================================== */
/* ================                                          SCONFIG                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                         DEVICEID                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  DEVICEID0  ======================================================= */
#define DEVICEID_DEVICEID0_PACKID_Pos     (8UL)                     /*!< DEVICEID DEVICEID0: PACKID (Bit 8)                    */
#define DEVICEID_DEVICEID0_PACKID_Msk     (0xffffff00UL)            /*!< DEVICEID DEVICEID0: PACKID (Bitfield-Mask: 0xffffff)  */
#define DEVICEID_DEVICEID0_REVID_Pos      (0UL)                     /*!< DEVICEID DEVICEID0: REVID (Bit 0)                     */
#define DEVICEID_DEVICEID0_REVID_Msk      (0xfUL)                   /*!< DEVICEID DEVICEID0: REVID (Bitfield-Mask: 0x0f)       */
/* =======================================================  DEVICEID1  ======================================================= */
/* =======================================================  DEVICEID2  ======================================================= */
/* =======================================================  DEVICEID3  ======================================================= */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                             Enumerated Values Cluster Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           DATA                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  U32  ========================================================== */
/* ==========================================================  U16  ========================================================== */
/* ==========================================================  U8  =========================================================== */


/* =========================================================================================================================== */
/* ================                                           DATA                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  U32  ========================================================== */
/* ==========================================================  U16  ========================================================== */
/* ==========================================================  U8  =========================================================== */

/** @} */ /* End of group EnumValue_clusters */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          USART0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ============================================  USART0 CONFIG TSYNCEN [31..31]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TSYNCEN                                                     */
  USART0_CONFIG_TSYNCEN_0              = 0,     /*!< 0 : The transmitter operates in asynchronous mode.                        */
  USART0_CONFIG_TSYNCEN_1              = 1,     /*!< 1 : The transmitter operates in synchronous mode.                         */
} USART0_CONFIG_TSYNCEN_Enum;

/* =============================================  USART0 CONFIG TINVEN [30..30]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TINVEN                                                      */
  USART0_CONFIG_TINVEN_0               = 0,     /*!< 0 : Do not invert the TX pin signals (the TX idle state is high).         */
  USART0_CONFIG_TINVEN_1               = 1,     /*!< 1 : Invert the TX pin signals (the TX idle state is low).                 */
} USART0_CONFIG_TINVEN_Enum;

/* ============================================  USART0 CONFIG TIRDAEN [29..29]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TIRDAEN                                                     */
  USART0_CONFIG_TIRDAEN_Disable        = 0,     /*!< Disable : Disable IrDA transmit mode.                                     */
  USART0_CONFIG_TIRDAEN_Enable         = 1,     /*!< Enable : Enable IrDA transmit mode.                                       */
} USART0_CONFIG_TIRDAEN_Enum;

/* =============================================  USART0 CONFIG TSCEN [28..28]  ============================================== */
typedef enum {                                  /*!< USART0_CONFIG_TSCEN                                                       */
  USART0_CONFIG_TSCEN_0                = 0,     /*!< 0 : The transmitter does not check for a Smartcard parity error
                                                                    response.                                                  */
  USART0_CONFIG_TSCEN_1                = 1,     /*!< 1 : The transmitter checks for a Smartcard parity error response.         */
} USART0_CONFIG_TSCEN_Enum;

/* =============================================  USART0 CONFIG TDATLN [24..26]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TDATLN                                                      */
  USART0_CONFIG_TDATLN_000             = 0,     /*!< 000 : 5 bits.                                                             */
  USART0_CONFIG_TDATLN_001             = 1,     /*!< 001 : 6 bits.                                                             */
  USART0_CONFIG_TDATLN_010             = 2,     /*!< 010 : 7 bits.                                                             */
  USART0_CONFIG_TDATLN_011             = 3,     /*!< 011 : 8 bits.                                                             */
  USART0_CONFIG_TDATLN_100             = 4,     /*!< 100 : 9 bits. The 9th bit is taken from the FIFO data (normal
                                                     mode).                                                                    */
  USART0_CONFIG_TDATLN_101             = 5,     /*!< 101 : 9 bits. The 9th bit is set by the value of TBIT (fixed
                                                     mode).                                                                    */
  USART0_CONFIG_TDATLN_110             = 6,     /*!< 110 : Reserved.                                                           */
} USART0_CONFIG_TDATLN_Enum;

/* =============================================  USART0 CONFIG TPARMD [21..22]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TPARMD                                                      */
  USART0_CONFIG_TPARMD_00              = 0,     /*!< 00 : Odd Parity.                                                          */
  USART0_CONFIG_TPARMD_01              = 1,     /*!< 01 : Even Parity.                                                         */
  USART0_CONFIG_TPARMD_10              = 2,     /*!< 10 : Set (Parity = 1).                                                    */
  USART0_CONFIG_TPARMD_11              = 3,     /*!< 11 : Clear (Parity = 0).                                                  */
} USART0_CONFIG_TPARMD_Enum;

/* =============================================  USART0 CONFIG TSTPMD [19..20]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TSTPMD                                                      */
  USART0_CONFIG_TSTPMD_00              = 0,     /*!< 00 : 0.5 stop bit.                                                        */
  USART0_CONFIG_TSTPMD_01              = 1,     /*!< 01 : 1 stop bit.                                                          */
  USART0_CONFIG_TSTPMD_10              = 2,     /*!< 10 : 1.5 stop bits.                                                       */
  USART0_CONFIG_TSTPMD_11              = 3,     /*!< 11 : 2 stop bits.                                                         */
} USART0_CONFIG_TSTPMD_Enum;

/* =============================================  USART0 CONFIG TSTPEN [18..18]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TSTPEN                                                      */
  USART0_CONFIG_TSTPEN_0               = 0,     /*!< 0 : Do not send stop bits during transmissions.                           */
  USART0_CONFIG_TSTPEN_1               = 1,     /*!< 1 : Send stop bits during transmissions.                                  */
} USART0_CONFIG_TSTPEN_Enum;

/* =============================================  USART0 CONFIG TPAREN [17..17]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TPAREN                                                      */
  USART0_CONFIG_TPAREN_0               = 0,     /*!< 0 : Do not send a parity bit during transmissions.                        */
  USART0_CONFIG_TPAREN_1               = 1,     /*!< 1 : Send a parity bit during transmissions.                               */
} USART0_CONFIG_TPAREN_Enum;

/* ============================================  USART0 CONFIG TSTRTEN [16..16]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_TSTRTEN                                                     */
  USART0_CONFIG_TSTRTEN_0              = 0,     /*!< 0 : Do not generate a start bit during transmissions.                     */
  USART0_CONFIG_TSTRTEN_1              = 1,     /*!< 1 : Generate a start bit during transmissions.                            */
} USART0_CONFIG_TSTRTEN_Enum;

/* ============================================  USART0 CONFIG RSYNCEN [15..15]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_RSYNCEN                                                     */
  USART0_CONFIG_RSYNCEN_0              = 0,     /*!< 0 : The receiver operates in asynchronous mode.                           */
  USART0_CONFIG_RSYNCEN_1              = 1,     /*!< 1 : The receiver operates in synchronous mode.                            */
} USART0_CONFIG_RSYNCEN_Enum;

/* =============================================  USART0 CONFIG RINVEN [14..14]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_RINVEN                                                      */
  USART0_CONFIG_RINVEN_0               = 0,     /*!< 0 : Do not invert the RX pin signals (the RX idle state is high).         */
  USART0_CONFIG_RINVEN_1               = 1,     /*!< 1 : Invert the RX pin signals (the RX idle state is low).                 */
} USART0_CONFIG_RINVEN_Enum;

/* ============================================  USART0 CONFIG RIRDAEN [13..13]  ============================================= */
typedef enum {                                  /*!< USART0_CONFIG_RIRDAEN                                                     */
  USART0_CONFIG_RIRDAEN_0              = 0,     /*!< 0 : The receiver does not operate in IrDA mode.                           */
  USART0_CONFIG_RIRDAEN_1              = 1,     /*!< 1 : The receiver operates in IrDA mode.                                   */
} USART0_CONFIG_RIRDAEN_Enum;

/* =============================================  USART0 CONFIG RSCEN [12..12]  ============================================== */
typedef enum {                                  /*!< USART0_CONFIG_RSCEN                                                       */
  USART0_CONFIG_RSCEN_0                = 0,     /*!< 0 : The receiver does not send a Smartcard parity error response.         */
  USART0_CONFIG_RSCEN_1                = 1,     /*!< 1 : The receiver sends a Smartcard parity response.                       */
} USART0_CONFIG_RSCEN_Enum;

/* =============================================  USART0 CONFIG RDATLN [8..10]  ============================================== */
typedef enum {                                  /*!< USART0_CONFIG_RDATLN                                                      */
  USART0_CONFIG_RDATLN_000             = 0,     /*!< 000 : 5 bits.                                                             */
  USART0_CONFIG_RDATLN_001             = 1,     /*!< 001 : 6 bits.                                                             */
  USART0_CONFIG_RDATLN_010             = 2,     /*!< 010 : 7 bits.                                                             */
  USART0_CONFIG_RDATLN_011             = 3,     /*!< 011 : 8 bits.                                                             */
  USART0_CONFIG_RDATLN_100             = 4,     /*!< 100 : 9 bits. The 9th bit is stored in the FIFO (normal mode).            */
  USART0_CONFIG_RDATLN_101             = 5,     /*!< 101 : 9 bits. The 9th bit is not stored in the FIFO (fixed mode).
                                                     This mode is used when the 9th bit is only used for match
                                                     operations (see MATMD).                                                   */
  USART0_CONFIG_RDATLN_110             = 6,     /*!< 110 : Reserved.                                                           */
} USART0_CONFIG_RDATLN_Enum;

/* ==============================================  USART0 CONFIG RPARMD [5..6]  ============================================== */
typedef enum {                                  /*!< USART0_CONFIG_RPARMD                                                      */
  USART0_CONFIG_RPARMD_00              = 0,     /*!< 00 : Odd Parity.                                                          */
  USART0_CONFIG_RPARMD_01              = 1,     /*!< 01 : Even Parity.                                                         */
  USART0_CONFIG_RPARMD_10              = 2,     /*!< 10 : Set (Parity = 1).                                                    */
  USART0_CONFIG_RPARMD_11              = 3,     /*!< 11 : Clear (Parity = 0).                                                  */
} USART0_CONFIG_RPARMD_Enum;

/* ==============================================  USART0 CONFIG RSTPMD [3..4]  ============================================== */
typedef enum {                                  /*!< USART0_CONFIG_RSTPMD                                                      */
  USART0_CONFIG_RSTPMD_00              = 0,     /*!< 00 : 0.5 stop bit.                                                        */
  USART0_CONFIG_RSTPMD_01              = 1,     /*!< 01 : 1 stop bit.                                                          */
  USART0_CONFIG_RSTPMD_10              = 2,     /*!< 10 : 1.5 stop bits.                                                       */
  USART0_CONFIG_RSTPMD_11              = 3,     /*!< 11 : 2 stop bits.                                                         */
} USART0_CONFIG_RSTPMD_Enum;

/* ==============================================  USART0 CONFIG RSTPEN [2..2]  ============================================== */
typedef enum {                                  /*!< USART0_CONFIG_RSTPEN                                                      */
  USART0_CONFIG_RSTPEN_0               = 0,     /*!< 0 : Do not expect stop bits during receptions.                            */
  USART0_CONFIG_RSTPEN_1               = 1,     /*!< 1 : Expect stop bits during receptions.                                   */
} USART0_CONFIG_RSTPEN_Enum;

/* ==============================================  USART0 CONFIG RPAREN [1..1]  ============================================== */
typedef enum {                                  /*!< USART0_CONFIG_RPAREN                                                      */
  USART0_CONFIG_RPAREN_0               = 0,     /*!< 0 : Do not expect a parity bit during receptions.                         */
  USART0_CONFIG_RPAREN_1               = 1,     /*!< 1 : Expect a parity bit during receptions.                                */
} USART0_CONFIG_RPAREN_Enum;

/* =============================================  USART0 CONFIG RSTRTEN [0..0]  ============================================== */
typedef enum {                                  /*!< USART0_CONFIG_RSTRTEN                                                     */
  USART0_CONFIG_RSTRTEN_0              = 0,     /*!< 0 : Do not expect a start bit during receptions.                          */
  USART0_CONFIG_RSTRTEN_1              = 1,     /*!< 1 : Expect a start bit during receptions.                                 */
} USART0_CONFIG_RSTRTEN_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* =========================================================  MODE  ========================================================== */
/* ===============================================  USART0 MODE OPMD [31..31]  =============================================== */
typedef enum {                                  /*!< USART0_MODE_OPMD                                                          */
  USART0_MODE_OPMD_0                   = 0,     /*!< 0 : The USART operates as a slave.                                        */
  USART0_MODE_OPMD_1                   = 1,     /*!< 1 : The USART operates as a master.                                       */
} USART0_MODE_OPMD_Enum;

/* ==============================================  USART0 MODE ITSEN [30..30]  =============================================== */
typedef enum {                                  /*!< USART0_MODE_ITSEN                                                         */
  USART0_MODE_ITSEN_0                  = 0,     /*!< 0 : The TX and UCLK (if in synchronous master mode) pins are
                                                     always an output in this mode, even when idle.                            */
  USART0_MODE_ITSEN_1                  = 1,     /*!< 1 : The TX pin is tristated when idle. If ISTCLK is cleared
                                                     to 0 and the transmitter is configured in synchronous master
                                                     mode, the UCLK pin will also be tristated when idle.                      */
} USART0_MODE_ITSEN_Enum;

/* =============================================  USART0 MODE CLKESEL [29..29]  ============================================== */
typedef enum {                                  /*!< USART0_MODE_CLKESEL                                                       */
  USART0_MODE_CLKESEL_0                = 0,     /*!< 0 : The clock falls in the middle of each bit.                            */
  USART0_MODE_CLKESEL_1                = 1,     /*!< 1 : The clock rises in the middle of each bit.                            */
} USART0_MODE_CLKESEL_Enum;

/* =============================================  USART0 MODE CLKIDLE [28..28]  ============================================== */
typedef enum {                                  /*!< USART0_MODE_CLKIDLE                                                       */
  USART0_MODE_CLKIDLE_0                = 0,     /*!< 0 : The synchronous clock is low when idle.                               */
  USART0_MODE_CLKIDLE_1                = 1,     /*!< 1 : The synchronous clock is high when idle.                              */
} USART0_MODE_CLKIDLE_Enum;

/* =============================================  USART0 MODE DUPLEXMD [27..27]  ============================================= */
typedef enum {                                  /*!< USART0_MODE_DUPLEXMD                                                      */
  USART0_MODE_DUPLEXMD_0               = 0,     /*!< 0 : Full-duplex mode. The transmitter and receiver can operate
                                                     simultaneously.                                                           */
  USART0_MODE_DUPLEXMD_1               = 1,     /*!< 1 : Half-duplex mode. The transmitter automatically inhibits
                                                     when the receiver is active and the receiver automatically
                                                     inhibits when the transmitter is active.                                  */
} USART0_MODE_DUPLEXMD_Enum;

/* ==============================================  USART0 MODE ISTCLK [23..23]  ============================================== */
typedef enum {                                  /*!< USART0_MODE_ISTCLK                                                        */
  USART0_MODE_ISTCLK_0                 = 0,     /*!< 0 : When the USART is a clock master and CLKESEL is not equal
                                                     to CLKIDLE, the clock is held idle between transmissions.
                                                     When the USART is a clock master and CLKESEL equals CLKIDEL,
                                                     the clock will still be generated between transmissions.
                                                     When the USART is a clock slave, the USART will begin transmissions
                                                     without wait-ing for the next clock edge.                                 */
  USART0_MODE_ISTCLK_1                 = 1,     /*!< 1 : When the USART is a clock master, the clock is generated
                                                     between transmis-sions or receptions. When the USART is
                                                     a clock slave, the USART will wait until the next clock
                                                     edge before transmitting.                                                 */
} USART0_MODE_ISTCLK_Enum;

/* ============================================  USART0 MODE STRTSTCLK [22..22]  ============================================= */
typedef enum {                                  /*!< USART0_MODE_STRTSTCLK                                                     */
  USART0_MODE_STRTSTCLK_0              = 0,     /*!< 0 : When the USART is a clock master, the clock is held idle
                                                     during a start bit.                                                       */
  USART0_MODE_STRTSTCLK_1              = 1,     /*!< 1 : When the USART is a clock master, the clock is generated
                                                     during a start bit.                                                       */
} USART0_MODE_STRTSTCLK_Enum;

/* =============================================  USART0 MODE STPSTCLK [21..21]  ============================================= */
typedef enum {                                  /*!< USART0_MODE_STPSTCLK                                                      */
  USART0_MODE_STPSTCLK_0               = 0,     /*!< 0 : When the USART is a clock master, the clock is not generated
                                                     during stop bits.                                                         */
  USART0_MODE_STPSTCLK_1               = 1,     /*!< 1 : When the USART is a clock master, the clock is generated
                                                     during stop bits.                                                         */
} USART0_MODE_STPSTCLK_Enum;

/* ===============================================  USART0 MODE LBMD [18..19]  =============================================== */
typedef enum {                                  /*!< USART0_MODE_LBMD                                                          */
  USART0_MODE_LBMD_00                  = 0,     /*!< 00 : Loop back is disabled and the TX and RX signals are connected
                                                     to the corre-sponding external pins.                                      */
  USART0_MODE_LBMD_01                  = 1,     /*!< 01 : Receive loop back. The receiver input path is disconnected
                                                     from the RX pin and internally connected to the transmitter.
                                                     Data transmitted will be sent out on TX and also received
                                                     by the device.                                                            */
  USART0_MODE_LBMD_10                  = 2,     /*!< 10 : Transmit loop back. The transmitter output path is disconnected
                                                     from the TX pin and the RX input pin is internally looped
                                                     back out to the TX pin. Data received at RX will be received
                                                     by the device and also sent directly back out on TX.                      */
  USART0_MODE_LBMD_11                  = 3,     /*!< 11 : Full loop back. Internally, the transmitter output is routed
                                                     back to the receiver input. Neither the transmitter nor
                                                     receiver are connected to external device pins. The device
                                                     pin RX is looped back to TX in a similar fashion. Data
                                                     transmitted on TX will be sent directly back in on RX.                    */
} USART0_MODE_LBMD_Enum;

/* ==============================================  USART0 MODE DBGMD [16..16]  =============================================== */
typedef enum {                                  /*!< USART0_MODE_DBGMD                                                         */
  USART0_MODE_DBGMD_0                  = 0,     /*!< 0 : The USART module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  USART0_MODE_DBGMD_1                  = 1,     /*!< 1 : A debug breakpoint will cause the USART module to halt.
                                                     Any active transmis-sions and receptions will complete
                                                     first.                                                                    */
} USART0_MODE_DBGMD_Enum;

/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */
/* ========================================================  FLOWCN  ========================================================= */
/* ============================================  USART0 FLOWCN TIRDAPW [28..29]  ============================================= */
typedef enum {                                  /*!< USART0_FLOWCN_TIRDAPW                                                     */
  USART0_FLOWCN_TIRDAPW_00             = 0,     /*!< 00 : The IrDA pulse width is 1/16th of a bit period.                      */
  USART0_FLOWCN_TIRDAPW_01             = 1,     /*!< 01 : The IrDA pulse width is 1/8th of a bit period.                       */
  USART0_FLOWCN_TIRDAPW_10             = 2,     /*!< 10 : The IrDA pulse width is 3/16th of a bit period.                      */
  USART0_FLOWCN_TIRDAPW_11             = 3,     /*!< 11 : The IrDA pulse width is 1/4th of a bit period.                       */
} USART0_FLOWCN_TIRDAPW_Enum;

/* =============================================  USART0 FLOWCN CTSEN [23..23]  ============================================== */
typedef enum {                                  /*!< USART0_FLOWCN_CTSEN                                                       */
  USART0_FLOWCN_CTSEN_0                = 0,     /*!< 0 : The CTS pin state does not affect transmissions.                      */
  USART0_FLOWCN_CTSEN_1                = 1,     /*!< 1 : Transmissions will begin only if the CTS pin (after optional
                                                     inversion) is low.                                                        */
} USART0_FLOWCN_CTSEN_Enum;

/* ============================================  USART0 FLOWCN CTSINVEN [21..21]  ============================================ */
typedef enum {                                  /*!< USART0_FLOWCN_CTSINVEN                                                    */
  USART0_FLOWCN_CTSINVEN_0             = 0,     /*!< 0 : The USART does not invert CTS.                                        */
  USART0_FLOWCN_CTSINVEN_1             = 1,     /*!< 1 : The USART inverts CTS.                                                */
} USART0_FLOWCN_CTSINVEN_Enum;

/* ==============================================  USART0 FLOWCN UCLK [18..18]  ============================================== */
typedef enum {                                  /*!< USART0_FLOWCN_UCLK                                                        */
  USART0_FLOWCN_UCLK_0                 = 0,     /*!< 0 : The UCLK pin is low.                                                  */
  USART0_FLOWCN_UCLK_1                 = 1,     /*!< 1 : The UCLK pin is high.                                                 */
} USART0_FLOWCN_UCLK_Enum;

/* ===============================================  USART0 FLOWCN TX [17..17]  =============================================== */
typedef enum {                                  /*!< USART0_FLOWCN_TX                                                          */
  USART0_FLOWCN_TX_0                   = 0,     /*!< 0 : The TX pin (before optional inversion) is low.                        */
  USART0_FLOWCN_TX_1                   = 1,     /*!< 1 : The TX pin (before optional inversion) is high.                       */
} USART0_FLOWCN_TX_Enum;

/* ==============================================  USART0 FLOWCN CTS [16..16]  =============================================== */
typedef enum {                                  /*!< USART0_FLOWCN_CTS                                                         */
  USART0_FLOWCN_CTS_0                  = 0,     /*!< 0 : Indicates the CTS pin state (after optional inversion) is
                                                     low.                                                                      */
  USART0_FLOWCN_CTS_1                  = 1,     /*!< 1 : Indicates the CTS pin state (after optional inversion) is
                                                     high.                                                                     */
} USART0_FLOWCN_CTS_Enum;

/* ==============================================  USART0 FLOWCN RTSEN [7..7]  =============================================== */
typedef enum {                                  /*!< USART0_FLOWCN_RTSEN                                                       */
  USART0_FLOWCN_RTSEN_Disable          = 0,     /*!< Disable : The RTS state is not changed by hardware. The RTS
                                                     bit can be written only when hardware RTS is disabled (RTSEN
                                                     = 0).                                                                     */
  USART0_FLOWCN_RTSEN_1                = 1,     /*!< 1 : Hardware sets RTS when the receive FIFO is at or above the
                                                     threshold set by RTSTH and clears RTS otherwise.                          */
} USART0_FLOWCN_RTSEN_Enum;

/* ==============================================  USART0 FLOWCN RTSTH [6..6]  =============================================== */
typedef enum {                                  /*!< USART0_FLOWCN_RTSTH                                                       */
  USART0_FLOWCN_RTSTH_0                = 0,     /*!< 0 : RTS is de-asserted when the receive FIFO and shift register
                                                     are full and no more incoming data can be stored.                         */
  USART0_FLOWCN_RTSTH_1                = 1,     /*!< 1 : RTS is de-asserted when the receive FIFO and shift register
                                                     are nearly full and only one more data can be received.                   */
} USART0_FLOWCN_RTSTH_Enum;

/* =============================================  USART0 FLOWCN RTSINVEN [5..5]  ============================================= */
typedef enum {                                  /*!< USART0_FLOWCN_RTSINVEN                                                    */
  USART0_FLOWCN_RTSINVEN_0             = 0,     /*!< 0 : The USART does not invert the RTS signal before driving
                                                     the pin.                                                                  */
  USART0_FLOWCN_RTSINVEN_1             = 1,     /*!< 1 : The USART inverts the RTS signal driving the pin.                     */
} USART0_FLOWCN_RTSINVEN_Enum;

/* ================================================  USART0 FLOWCN RX [1..1]  ================================================ */
typedef enum {                                  /*!< USART0_FLOWCN_RX                                                          */
  USART0_FLOWCN_RX_0                   = 0,     /*!< 0 : RX pin (after optional inversion) is low.                             */
  USART0_FLOWCN_RX_1                   = 1,     /*!< 1 : RX pin (after optional inversion) is high.                            */
} USART0_FLOWCN_RX_Enum;

/* ===============================================  USART0 FLOWCN RTS [0..0]  ================================================ */
typedef enum {                                  /*!< USART0_FLOWCN_RTS                                                         */
  USART0_FLOWCN_RTS_0                  = 0,     /*!< 0 : RTS pin (before optional inversion) is driven low.                    */
  USART0_FLOWCN_RTS_1                  = 1,     /*!< 1 : RTS pin (before optional inversion) is driven high.                   */
} USART0_FLOWCN_RTS_Enum;

/* ======================================================  FLOWCN_SET  ======================================================= */
/* ======================================================  FLOWCN_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  USART0 CONTROL TEN [31..31]  ============================================== */
typedef enum {                                  /*!< USART0_CONTROL_TEN                                                        */
  USART0_CONTROL_TEN_Disable           = 0,     /*!< Disable : Disable the transmitter. When cleared, the transmitter
                                                     immediately aborts any active transmission. Clearing this
                                                     bit does not automatically flush the transmit FIFO.                       */
  USART0_CONTROL_TEN_Enable            = 1,     /*!< Enable : Enable the transmitter. The transmitter will initiate
                                                     a transmission when data becomes available in the transmit
                                                     FIFO.                                                                     */
} USART0_CONTROL_TEN_Enum;

/* =============================================  USART0 CONTROL TINH [30..30]  ============================================== */
typedef enum {                                  /*!< USART0_CONTROL_TINH                                                       */
  USART0_CONTROL_TINH_0                = 0,     /*!< 0 : The transmitter operates normally.                                    */
  USART0_CONTROL_TINH_1                = 1,     /*!< 1 : Transmissions are inhibited. The transmitter will stall
                                                     after any current transmis-sion is complete.                              */
} USART0_CONTROL_TINH_Enum;

/* ============================================  USART0 CONTROL TBUSYF [27..27]  ============================================= */
typedef enum {                                  /*!< USART0_CONTROL_TBUSYF                                                     */
  USART0_CONTROL_TBUSYF_0              = 0,     /*!< 0 : The USART transmitter is idle.                                        */
  USART0_CONTROL_TBUSYF_1              = 1,     /*!< 1 : The USART transmitter is active and transmitting.                     */
} USART0_CONTROL_TBUSYF_Enum;

/* ============================================  USART0 CONTROL TCPTIEN [23..23]  ============================================ */
typedef enum {                                  /*!< USART0_CONTROL_TCPTIEN                                                    */
  USART0_CONTROL_TCPTIEN_Disable       = 0,     /*!< Disable : Disable the transmit complete interrupt.                        */
  USART0_CONTROL_TCPTIEN_Enable        = 1,     /*!< Enable : Enable the transmit complete interrupt. A transmit
                                                     interrupt is generated when TCPTI is set to 1.                            */
} USART0_CONTROL_TCPTIEN_Enum;

/* ===========================================  USART0 CONTROL TDREQIEN [22..22]  ============================================ */
typedef enum {                                  /*!< USART0_CONTROL_TDREQIEN                                                   */
  USART0_CONTROL_TDREQIEN_Disable      = 0,     /*!< Disable : Disable the transmit data request interrupt.                    */
  USART0_CONTROL_TDREQIEN_Enable       = 1,     /*!< Enable : Enable the transmit data request interrupt. A transmit
                                                     interrupt is asserted when TDREQI is set to 1.                            */
} USART0_CONTROL_TDREQIEN_Enum;

/* ============================================  USART0 CONTROL TERIEN [21..21]  ============================================= */
typedef enum {                                  /*!< USART0_CONTROL_TERIEN                                                     */
  USART0_CONTROL_TERIEN_Disable        = 0,     /*!< Disable : Disable the transmit error interrupt.                           */
  USART0_CONTROL_TERIEN_Enable         = 1,     /*!< Enable : Enable the transmit error interrupt. A transmit interrupt
                                                     is generated when TUREI or TSCERI is set to 1.                            */
} USART0_CONTROL_TERIEN_Enum;

/* ============================================  USART0 CONTROL TCPTTH [20..20]  ============================================= */
typedef enum {                                  /*!< USART0_CONTROL_TCPTTH                                                     */
  USART0_CONTROL_TCPTTH_0              = 0,     /*!< 0 : A transmit is completed (TCPTI = 1) at the end of each transmission.  */
  USART0_CONTROL_TCPTTH_1              = 1,     /*!< 1 : A transmit is completed (TCPTI = 1) only at the end of a
                                                     transmission when no more data is available to transmit.                  */
} USART0_CONTROL_TCPTTH_Enum;

/* ============================================  USART0 CONTROL TDREQI [18..18]  ============================================= */
typedef enum {                                  /*!< USART0_CONTROL_TDREQI                                                     */
  USART0_CONTROL_TDREQI_0              = 0,     /*!< 0 : The transmitter is not requesting more FIFO data.                     */
  USART0_CONTROL_TDREQI_1              = 1,     /*!< 1 : The transmitter is requesting more FIFO data.                         */
} USART0_CONTROL_TDREQI_Enum;

/* ==============================================  USART0 CONTROL REN [15..15]  ============================================== */
typedef enum {                                  /*!< USART0_CONTROL_REN                                                        */
  USART0_CONTROL_REN_Disable           = 0,     /*!< Disable : Disable the receiver. The receiver can receive one
                                                     data transaction only if ROSEN is set.                                    */
  USART0_CONTROL_REN_Enable            = 1,     /*!< Enable : Enable the receiver.                                             */
} USART0_CONTROL_REN_Enum;

/* =============================================  USART0 CONTROL RINH [14..14]  ============================================== */
typedef enum {                                  /*!< USART0_CONTROL_RINH                                                       */
  USART0_CONTROL_RINH_0                = 0,     /*!< 0 : The receiver operates normally.                                       */
  USART0_CONTROL_RINH_1                = 1,     /*!< 1 : RTS is immediately asserted when RINH is set. The receiver
                                                     will complete any ongoing reception, but ignore all traffic
                                                     after that.                                                               */
} USART0_CONTROL_RINH_Enum;

/* =============================================  USART0 CONTROL ROSEN [13..13]  ============================================= */
typedef enum {                                  /*!< USART0_CONTROL_ROSEN                                                      */
  USART0_CONTROL_ROSEN_Disable         = 0,     /*!< Disable : Disable one-shot receive mode.                                  */
  USART0_CONTROL_ROSEN_Enable          = 1,     /*!< Enable : Enable one-shot receive mode.                                    */
} USART0_CONTROL_ROSEN_Enum;

/* ============================================  USART0 CONTROL RBUSYF [11..11]  ============================================= */
typedef enum {                                  /*!< USART0_CONTROL_RBUSYF                                                     */
  USART0_CONTROL_RBUSYF_0              = 0,     /*!< 0 : The USART receiver is idle.                                           */
  USART0_CONTROL_RBUSYF_1              = 1,     /*!< 1 : The USART receiver is receiving data.                                 */
} USART0_CONTROL_RBUSYF_Enum;

/* ============================================  USART0 CONTROL RABDEN [10..10]  ============================================= */
typedef enum {                                  /*!< USART0_CONTROL_RABDEN                                                     */
  USART0_CONTROL_RABDEN_Disable        = 0,     /*!< Disable : Disable receiver auto-baud.                                     */
  USART0_CONTROL_RABDEN_Enable         = 1,     /*!< Enable : Enable receiver auto-baud.                                       */
} USART0_CONTROL_RABDEN_Enum;

/* ==============================================  USART0 CONTROL MATMD [8..9]  ============================================== */
typedef enum {                                  /*!< USART0_CONTROL_MATMD                                                      */
  USART0_CONTROL_MATMD_00              = 0,     /*!< 00 : Disable the match function.                                          */
  USART0_CONTROL_MATMD_01              = 1,     /*!< 01 : (MCE) Data whose last data bit equals RBIT is accepted
                                                     and stored.                                                               */
  USART0_CONTROL_MATMD_10              = 2,     /*!< 10 : (Frame) A framing error is asserted if the last received
                                                     bit matches RBIT.                                                         */
  USART0_CONTROL_MATMD_11              = 3,     /*!< 11 : (Store) Store the last incoming data bit in RBIT. This
                                                     mode can be used incon-junction with the RDATLN setting.                  */
} USART0_CONTROL_MATMD_Enum;

/* ============================================  USART0 CONTROL RDREQIEN [6..6]  ============================================= */
typedef enum {                                  /*!< USART0_CONTROL_RDREQIEN                                                   */
  USART0_CONTROL_RDREQIEN_Disable      = 0,     /*!< Disable : Disable the read data request interrupt.                        */
  USART0_CONTROL_RDREQIEN_Enable       = 1,     /*!< Enable : Enable the read data request interrupt. A receive interrupt
                                                     is generated when RDREQI is set to 1.                                     */
} USART0_CONTROL_RDREQIEN_Enum;

/* =============================================  USART0 CONTROL RERIEN [5..5]  ============================================== */
typedef enum {                                  /*!< USART0_CONTROL_RERIEN                                                     */
  USART0_CONTROL_RERIEN_Disable        = 0,     /*!< Disable : Disable the receive error interrupt.                            */
  USART0_CONTROL_RERIEN_Enable         = 1,     /*!< Enable : Enable the receive error interrupt. A receive error
                                                     interrupt is asserted when ROREI, RFRMERI, or RPARERI is
                                                     set to 1.                                                                 */
} USART0_CONTROL_RERIEN_Enum;

/* =============================================  USART0 CONTROL RDREQI [3..3]  ============================================== */
typedef enum {                                  /*!< USART0_CONTROL_RDREQI                                                     */
  USART0_CONTROL_RDREQI_0              = 0,     /*!< 0 : Fewer than RFTH FIFO slots are filled with data.                      */
  USART0_CONTROL_RDREQI_1              = 1,     /*!< 1 : At least RFTH FIFO slots are filled with data.                        */
} USART0_CONTROL_RDREQI_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  IPDELAY  ======================================================== */
/* =======================================================  BAUDRATE  ======================================================== */
/* ========================================================  FIFOCN  ========================================================= */
/* =============================================  USART0 FIFOCN TFERI [25..25]  ============================================== */
typedef enum {                                  /*!< USART0_FIFOCN_TFERI                                                       */
  USART0_FIFOCN_TFERI_0                = 0,     /*!< 0 : A transmit FIFO error has not occurred since TFERI was last
                                                     cleared.                                                                  */
  USART0_FIFOCN_TFERI_1                = 1,     /*!< 1 : A transmit FIFO error occurred.                                       */
} USART0_FIFOCN_TFERI_Enum;

/* =============================================  USART0 FIFOCN TDMAEN [23..23]  ============================================= */
typedef enum {                                  /*!< USART0_FIFOCN_TDMAEN                                                      */
  USART0_FIFOCN_TDMAEN_Disable         = 0,     /*!< Disable : Disable transmit FIFO DMA requests.                             */
  USART0_FIFOCN_TDMAEN_Enable          = 1,     /*!< Enable : Enable transmit FIFO DMA requests.                               */
} USART0_FIFOCN_TDMAEN_Enum;

/* ==============================================  USART0 FIFOCN TFTH [20..21]  ============================================== */
typedef enum {                                  /*!< USART0_FIFOCN_TFTH                                                        */
  USART0_FIFOCN_TFTH_00                = 0,     /*!< 00 : A DMA request or transmit data request interrupt (TDREQI)
                                                     is asserted when > 1 FIFO slot is empty.                                  */
  USART0_FIFOCN_TFTH_01                = 1,     /*!< 01 : A DMA request or transmit data request interrupt (TDREQI)
                                                     is asserted when > 2 FIFO slots are empty.                                */
  USART0_FIFOCN_TFTH_10                = 2,     /*!< 10 : A DMA request or transmit data request interrupt (TDREQ)
                                                     is asserted when > 4 FIFO slots are empty.                                */
  USART0_FIFOCN_TFTH_11                = 3,     /*!< 11 : Reserved.                                                            */
} USART0_FIFOCN_TFTH_Enum;

/* ==============================================  USART0 FIFOCN RFERI [9..9]  =============================================== */
typedef enum {                                  /*!< USART0_FIFOCN_RFERI                                                       */
  USART0_FIFOCN_RFERI_0                = 0,     /*!< 0 : A receive FIFO error has not occurred since RFERI was last
                                                     cleared.                                                                  */
  USART0_FIFOCN_RFERI_1                = 1,     /*!< 1 : A receive FIFO error occurred.                                        */
} USART0_FIFOCN_RFERI_Enum;

/* ==============================================  USART0 FIFOCN RDMAEN [7..7]  ============================================== */
typedef enum {                                  /*!< USART0_FIFOCN_RDMAEN                                                      */
  USART0_FIFOCN_RDMAEN_Disable         = 0,     /*!< Disable : Disable receive FIFO DMA requests.                              */
  USART0_FIFOCN_RDMAEN_Enable          = 1,     /*!< Enable : Enable receive FIFO DMA requests.                                */
} USART0_FIFOCN_RDMAEN_Enum;

/* ===============================================  USART0 FIFOCN RFTH [4..5]  =============================================== */
typedef enum {                                  /*!< USART0_FIFOCN_RFTH                                                        */
  USART0_FIFOCN_RFTH_00                = 0,     /*!< 00 : A DMA request or read data request interrupt (RDREQI) is
                                                     asserted when > 1 FIFO slot is full.                                      */
  USART0_FIFOCN_RFTH_01                = 1,     /*!< 01 : A DMA request or read data request interrupt (RDREQI) is
                                                     asserted when > 2 FIFO slots are full.                                    */
  USART0_FIFOCN_RFTH_10                = 2,     /*!< 10 : A DMA request or read data request interrupt (RDREQ) is
                                                     asserted when > 4 FIFO slots are full.                                    */
  USART0_FIFOCN_RFTH_11                = 3,     /*!< 11 : Reserved.                                                            */
} USART0_FIFOCN_RFTH_Enum;

/* ======================================================  FIFOCN_SET  ======================================================= */
/* ======================================================  FIFOCN_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           UART0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  UART0 CONFIG TINVEN [30..30]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_TINVEN                                                       */
  UART0_CONFIG_TINVEN_0                = 0,     /*!< 0 : Do not invert the TX pin signals (the TX idle state is high).         */
  UART0_CONFIG_TINVEN_1                = 1,     /*!< 1 : Invert the TX pin signals (the TX idle state is low).                 */
} UART0_CONFIG_TINVEN_Enum;

/* =============================================  UART0 CONFIG TIRDAEN [29..29]  ============================================= */
typedef enum {                                  /*!< UART0_CONFIG_TIRDAEN                                                      */
  UART0_CONFIG_TIRDAEN_Disable         = 0,     /*!< Disable : Disable IrDA transmit mode.                                     */
  UART0_CONFIG_TIRDAEN_Enable          = 1,     /*!< Enable : Enable IrDA transmit mode.                                       */
} UART0_CONFIG_TIRDAEN_Enum;

/* ==============================================  UART0 CONFIG TSCEN [28..28]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_TSCEN                                                        */
  UART0_CONFIG_TSCEN_0                 = 0,     /*!< 0 : The transmitter does not check for a Smartcard parity error
                                                     response.                                                                 */
  UART0_CONFIG_TSCEN_1                 = 1,     /*!< 1 : The transmitter checks for a Smartcard parity error response.         */
} UART0_CONFIG_TSCEN_Enum;

/* =============================================  UART0 CONFIG TDATLN [24..26]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_TDATLN                                                       */
  UART0_CONFIG_TDATLN_000              = 0,     /*!< 000 : 5 bits.                                                             */
  UART0_CONFIG_TDATLN_001              = 1,     /*!< 001 : 6 bits.                                                             */
  UART0_CONFIG_TDATLN_010              = 2,     /*!< 010 : 7 bits.                                                             */
  UART0_CONFIG_TDATLN_011              = 3,     /*!< 011 : 8 bits.                                                             */
  UART0_CONFIG_TDATLN_100              = 4,     /*!< 100 : 9 bits. The 9th bit is taken from the FIFO data (normal
                                                     mode).                                                                    */
  UART0_CONFIG_TDATLN_101              = 5,     /*!< 101 : 9 bits. The 9th bit is set by the value of TBIT (fixed
                                                     mode).                                                                    */
  UART0_CONFIG_TDATLN_110              = 6,     /*!< 110 : Reserved.                                                           */
} UART0_CONFIG_TDATLN_Enum;

/* =============================================  UART0 CONFIG TPARMD [21..22]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_TPARMD                                                       */
  UART0_CONFIG_TPARMD_00               = 0,     /*!< 00 : Odd Parity.                                                          */
  UART0_CONFIG_TPARMD_01               = 1,     /*!< 01 : Even Parity.                                                         */
  UART0_CONFIG_TPARMD_10               = 2,     /*!< 10 : Set (Parity = 1).                                                    */
  UART0_CONFIG_TPARMD_11               = 3,     /*!< 11 : Clear (Parity = 0).                                                  */
} UART0_CONFIG_TPARMD_Enum;

/* =============================================  UART0 CONFIG TSTPMD [19..20]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_TSTPMD                                                       */
  UART0_CONFIG_TSTPMD_00               = 0,     /*!< 00 : 0.5 stop bit.                                                        */
  UART0_CONFIG_TSTPMD_01               = 1,     /*!< 01 : 1 stop bit.                                                          */
  UART0_CONFIG_TSTPMD_10               = 2,     /*!< 10 : 1.5 stop bits.                                                       */
  UART0_CONFIG_TSTPMD_11               = 3,     /*!< 11 : 2 stop bits.                                                         */
} UART0_CONFIG_TSTPMD_Enum;

/* =============================================  UART0 CONFIG TSTPEN [18..18]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_TSTPEN                                                       */
  UART0_CONFIG_TSTPEN_0                = 0,     /*!< 0 : Do not send stop bits during transmissions.                           */
  UART0_CONFIG_TSTPEN_1                = 1,     /*!< 1 : Send stop bits during transmissions.                                  */
} UART0_CONFIG_TSTPEN_Enum;

/* =============================================  UART0 CONFIG TPAREN [17..17]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_TPAREN                                                       */
  UART0_CONFIG_TPAREN_0                = 0,     /*!< 0 : Do not send a parity bit during transmissions.                        */
  UART0_CONFIG_TPAREN_1                = 1,     /*!< 1 : Send a parity bit during transmissions.                               */
} UART0_CONFIG_TPAREN_Enum;

/* =============================================  UART0 CONFIG TSTRTEN [16..16]  ============================================= */
typedef enum {                                  /*!< UART0_CONFIG_TSTRTEN                                                      */
  UART0_CONFIG_TSTRTEN_0               = 0,     /*!< 0 : Do not generate a start bit during transmissions.                     */
  UART0_CONFIG_TSTRTEN_1               = 1,     /*!< 1 : Generate a start bit during transmissions.                            */
} UART0_CONFIG_TSTRTEN_Enum;

/* =============================================  UART0 CONFIG RINVEN [14..14]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_RINVEN                                                       */
  UART0_CONFIG_RINVEN_0                = 0,     /*!< 0 : Do not invert the RX pin signals (the RX idle state is high).         */
  UART0_CONFIG_RINVEN_1                = 1,     /*!< 1 : Invert the RX pin signals (the RX idle state is low).                 */
} UART0_CONFIG_RINVEN_Enum;

/* =============================================  UART0 CONFIG RIRDAEN [13..13]  ============================================= */
typedef enum {                                  /*!< UART0_CONFIG_RIRDAEN                                                      */
  UART0_CONFIG_RIRDAEN_0               = 0,     /*!< 0 : The receiver does not operate in IrDA mode.                           */
  UART0_CONFIG_RIRDAEN_1               = 1,     /*!< 1 : The receiver operates in IrDA mode.                                   */
} UART0_CONFIG_RIRDAEN_Enum;

/* ==============================================  UART0 CONFIG RSCEN [12..12]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_RSCEN                                                        */
  UART0_CONFIG_RSCEN_0                 = 0,     /*!< 0 : The receiver does not send a Smartcard parity error response.         */
  UART0_CONFIG_RSCEN_1                 = 1,     /*!< 1 : The receiver sends a Smartcard Parity response.                       */
} UART0_CONFIG_RSCEN_Enum;

/* ==============================================  UART0 CONFIG RDATLN [8..10]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_RDATLN                                                       */
  UART0_CONFIG_RDATLN_000              = 0,     /*!< 000 : 5 bits.                                                             */
  UART0_CONFIG_RDATLN_001              = 1,     /*!< 001 : 6 bits.                                                             */
  UART0_CONFIG_RDATLN_010              = 2,     /*!< 010 : 7 bits.                                                             */
  UART0_CONFIG_RDATLN_011              = 3,     /*!< 011 : 8 bits.                                                             */
  UART0_CONFIG_RDATLN_100              = 4,     /*!< 100 : 9 bits. The 9th bit is stored in the FIFO (normal mode).            */
  UART0_CONFIG_RDATLN_101              = 5,     /*!< 101 : 9 bits. The 9th bit is not stored in the FIFO (fixed mode).
                                                     This mode is used when the 9th bit is only used for match
                                                     operations (see MATMD).                                                   */
  UART0_CONFIG_RDATLN_110              = 6,     /*!< 110 : Reserved.                                                           */
} UART0_CONFIG_RDATLN_Enum;

/* ==============================================  UART0 CONFIG RPARMD [5..6]  =============================================== */
typedef enum {                                  /*!< UART0_CONFIG_RPARMD                                                       */
  UART0_CONFIG_RPARMD_00               = 0,     /*!< 00 : Odd Parity.                                                          */
  UART0_CONFIG_RPARMD_01               = 1,     /*!< 01 : Even Parity.                                                         */
  UART0_CONFIG_RPARMD_10               = 2,     /*!< 10 : Set (Parity = 1).                                                    */
  UART0_CONFIG_RPARMD_11               = 3,     /*!< 11 : Clear (Parity = 0).                                                  */
} UART0_CONFIG_RPARMD_Enum;

/* ==============================================  UART0 CONFIG RSTPMD [3..4]  =============================================== */
typedef enum {                                  /*!< UART0_CONFIG_RSTPMD                                                       */
  UART0_CONFIG_RSTPMD_00               = 0,     /*!< 00 : 0.5 stop bit.                                                        */
  UART0_CONFIG_RSTPMD_01               = 1,     /*!< 01 : 1 stop bit.                                                          */
  UART0_CONFIG_RSTPMD_10               = 2,     /*!< 10 : 1.5 stop bits.                                                       */
  UART0_CONFIG_RSTPMD_11               = 3,     /*!< 11 : 2 stop bits.                                                         */
} UART0_CONFIG_RSTPMD_Enum;

/* ==============================================  UART0 CONFIG RSTPEN [2..2]  =============================================== */
typedef enum {                                  /*!< UART0_CONFIG_RSTPEN                                                       */
  UART0_CONFIG_RSTPEN_0                = 0,     /*!< 0 : Do not expect stop bits during receptions.                            */
  UART0_CONFIG_RSTPEN_1                = 1,     /*!< 1 : Expect stop bits during receptions.                                   */
} UART0_CONFIG_RSTPEN_Enum;

/* ==============================================  UART0 CONFIG RPAREN [1..1]  =============================================== */
typedef enum {                                  /*!< UART0_CONFIG_RPAREN                                                       */
  UART0_CONFIG_RPAREN_0                = 0,     /*!< 0 : Do not expect a parity bit during receptions.                         */
  UART0_CONFIG_RPAREN_1                = 1,     /*!< 1 : Expect a parity bit during receptions.                                */
} UART0_CONFIG_RPAREN_Enum;

/* ==============================================  UART0 CONFIG RSTRTEN [0..0]  ============================================== */
typedef enum {                                  /*!< UART0_CONFIG_RSTRTEN                                                      */
  UART0_CONFIG_RSTRTEN_0               = 0,     /*!< 0 : Do not expect a start bit during receptions.                          */
  UART0_CONFIG_RSTRTEN_1               = 1,     /*!< 1 : Expect a start bit during receptions.                                 */
} UART0_CONFIG_RSTRTEN_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* =========================================================  MODE  ========================================================== */
/* ===============================================  UART0 MODE ITSEN [30..30]  =============================================== */
typedef enum {                                  /*!< UART0_MODE_ITSEN                                                          */
  UART0_MODE_ITSEN_0                   = 0,     /*!< 0 : The TX and UCLK (if in synchronous master mode) pins are
                                                     always an output in this mode, even when idle.                            */
  UART0_MODE_ITSEN_1                   = 1,     /*!< 1 : The TX pin is tristated when idle. If ISTCLK is cleared
                                                     to 0 and the transmitter is configured in synchronous master
                                                     mode, the UCLK pin will also be tristated when idle.                      */
} UART0_MODE_ITSEN_Enum;

/* =============================================  UART0 MODE DUPLEXMD [27..27]  ============================================== */
typedef enum {                                  /*!< UART0_MODE_DUPLEXMD                                                       */
  UART0_MODE_DUPLEXMD_0                = 0,     /*!< 0 : Full-duplex mode. The transmitter and receiver can operate
                                                     simultaneously.                                                           */
  UART0_MODE_DUPLEXMD_1                = 1,     /*!< 1 : Half-duplex mode. The transmitter automatically inhibits
                                                     when the receiver is active and the receiver automatically
                                                     inhibits when the transmitter is active.                                  */
} UART0_MODE_DUPLEXMD_Enum;

/* ===============================================  UART0 MODE LBMD [18..19]  ================================================ */
typedef enum {                                  /*!< UART0_MODE_LBMD                                                           */
  UART0_MODE_LBMD_00                   = 0,     /*!< 00 : Loop back is disabled and the TX and RX signals are connected
                                                     to the corre-sponding external pins.                                      */
  UART0_MODE_LBMD_01                   = 1,     /*!< 01 : Receive loop back. The receiver input path is disconnected
                                                     from the RX pin and internally connected to the transmitter.
                                                     Data transmitted will be sent out on TX and also received
                                                     by the device.                                                            */
  UART0_MODE_LBMD_10                   = 2,     /*!< 10 : Transmit loop back. The transmitter output path is disconnected
                                                     from the TX pin and the RX input pin is internally looped
                                                     back out to the TX pin. Data received at RX will be received
                                                     by the device and also sent directly back out on TX.                      */
  UART0_MODE_LBMD_11                   = 3,     /*!< 11 : Full loop back. Internally, the transmitter output is routed
                                                     back to the receiver input. Neither the transmitter nor
                                                     receiver are connected to external device pins. The device
                                                     pin RX is looped back to TX in a similar fashion. Data
                                                     transmitted on TX will be sent directly back in on RX.                    */
} UART0_MODE_LBMD_Enum;

/* ===============================================  UART0 MODE DBGMD [16..16]  =============================================== */
typedef enum {                                  /*!< UART0_MODE_DBGMD                                                          */
  UART0_MODE_DBGMD_0                   = 0,     /*!< 0 : The UART module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  UART0_MODE_DBGMD_1                   = 1,     /*!< 1 : A debug breakpoint will cause the UART module to halt. Any
                                                     active transmissions and receptions will complete first.                  */
} UART0_MODE_DBGMD_Enum;

/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */
/* ========================================================  FLOWCN  ========================================================= */
/* =============================================  UART0 FLOWCN TIRDAPW [28..29]  ============================================= */
typedef enum {                                  /*!< UART0_FLOWCN_TIRDAPW                                                      */
  UART0_FLOWCN_TIRDAPW_00              = 0,     /*!< 00 : The IrDA pulse width is 1/16th of a bit period.                      */
  UART0_FLOWCN_TIRDAPW_01              = 1,     /*!< 01 : The IrDA pulse width is 1/8th of a bit period.                       */
  UART0_FLOWCN_TIRDAPW_10              = 2,     /*!< 10 : The IrDA pulse width is 3/16th of a bit period.                      */
  UART0_FLOWCN_TIRDAPW_11              = 3,     /*!< 11 : The IrDA pulse width is 1/4th of a bit period.                       */
} UART0_FLOWCN_TIRDAPW_Enum;

/* ==============================================  UART0 FLOWCN CTSEN [23..23]  ============================================== */
typedef enum {                                  /*!< UART0_FLOWCN_CTSEN                                                        */
  UART0_FLOWCN_CTSEN_0                 = 0,     /*!< 0 : The CTS pin state does not affect transmissions.                      */
  UART0_FLOWCN_CTSEN_1                 = 1,     /*!< 1 : Transmissions will begin only if the CTS pin (after optional
                                                     inversion) is low.                                                        */
} UART0_FLOWCN_CTSEN_Enum;

/* ============================================  UART0 FLOWCN CTSINVEN [21..21]  ============================================= */
typedef enum {                                  /*!< UART0_FLOWCN_CTSINVEN                                                     */
  UART0_FLOWCN_CTSINVEN_0              = 0,     /*!< 0 : The UART does not invert CTS.                                         */
  UART0_FLOWCN_CTSINVEN_1              = 1,     /*!< 1 : The UART inverts CTS.                                                 */
} UART0_FLOWCN_CTSINVEN_Enum;

/* ===============================================  UART0 FLOWCN TX [17..17]  ================================================ */
typedef enum {                                  /*!< UART0_FLOWCN_TX                                                           */
  UART0_FLOWCN_TX_0                    = 0,     /*!< 0 : The TX pin (before optional inversion) is low.                        */
  UART0_FLOWCN_TX_1                    = 1,     /*!< 1 : The TX pin (before optional inversion) is high.                       */
} UART0_FLOWCN_TX_Enum;

/* ===============================================  UART0 FLOWCN CTS [16..16]  =============================================== */
typedef enum {                                  /*!< UART0_FLOWCN_CTS                                                          */
  UART0_FLOWCN_CTS_0                   = 0,     /*!< 0 : Indicates the CTS pin state (after optional inversion) is
                                                     low.                                                                      */
  UART0_FLOWCN_CTS_1                   = 1,     /*!< 1 : Indicates the CTS pin state (after optional inversion) is
                                                     high.                                                                     */
} UART0_FLOWCN_CTS_Enum;

/* ===============================================  UART0 FLOWCN RTSEN [7..7]  =============================================== */
typedef enum {                                  /*!< UART0_FLOWCN_RTSEN                                                        */
  UART0_FLOWCN_RTSEN_Disable           = 0,     /*!< Disable : The RTS state is not changed by hardware. The RTS
                                                     bit can be written only when hardware RTS is disabled (RTSEN
                                                     = 0).                                                                     */
  UART0_FLOWCN_RTSEN_1                 = 1,     /*!< 1 : Hardware sets RTS when the receive FIFO is at or above the
                                                     threshold set by RTSTH and clears RTS otherwise.                          */
} UART0_FLOWCN_RTSEN_Enum;

/* ===============================================  UART0 FLOWCN RTSTH [6..6]  =============================================== */
typedef enum {                                  /*!< UART0_FLOWCN_RTSTH                                                        */
  UART0_FLOWCN_RTSTH_0                 = 0,     /*!< 0 : RTS is de-asserted when the receive FIFO and shift register
                                                     are full and no more incoming data can be stored.                         */
  UART0_FLOWCN_RTSTH_1                 = 1,     /*!< 1 : RTS is de-asserted when the receive FIFO and shift register
                                                     are nearly full and only one more data can be received.                   */
} UART0_FLOWCN_RTSTH_Enum;

/* =============================================  UART0 FLOWCN RTSINVEN [5..5]  ============================================== */
typedef enum {                                  /*!< UART0_FLOWCN_RTSINVEN                                                     */
  UART0_FLOWCN_RTSINVEN_0              = 0,     /*!< 0 : The UART does not invert the RTS signal before driving the
                                                     pin.                                                                      */
  UART0_FLOWCN_RTSINVEN_1              = 1,     /*!< 1 : The UART inverts the RTS signal driving the pin.                      */
} UART0_FLOWCN_RTSINVEN_Enum;

/* ================================================  UART0 FLOWCN RX [1..1]  ================================================= */
typedef enum {                                  /*!< UART0_FLOWCN_RX                                                           */
  UART0_FLOWCN_RX_0                    = 0,     /*!< 0 : RX pin (after optional inversion) is low.                             */
  UART0_FLOWCN_RX_1                    = 1,     /*!< 1 : RX pin (after optional inversion) is high.                            */
} UART0_FLOWCN_RX_Enum;

/* ================================================  UART0 FLOWCN RTS [0..0]  ================================================ */
typedef enum {                                  /*!< UART0_FLOWCN_RTS                                                          */
  UART0_FLOWCN_RTS_0                   = 0,     /*!< 0 : RTS pin (before optional inversion) is driven low.                    */
  UART0_FLOWCN_RTS_1                   = 1,     /*!< 1 : RTS pin (before optional inversion) is driven high.                   */
} UART0_FLOWCN_RTS_Enum;

/* ======================================================  FLOWCN_SET  ======================================================= */
/* ======================================================  FLOWCN_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  UART0 CONTROL TEN [31..31]  =============================================== */
typedef enum {                                  /*!< UART0_CONTROL_TEN                                                         */
  UART0_CONTROL_TEN_Disable            = 0,     /*!< Disable : Disable the transmitter. When cleared, the transmitter
                                                     immediately aborts any active transmission. Clearing this
                                                     bit does not automatically flush the transmit FIFO.                       */
  UART0_CONTROL_TEN_Enable             = 1,     /*!< Enable : Enable the transmitter. The transmitter will initiate
                                                     a transmission when data becomes available in the transmit
                                                     FIFO.                                                                     */
} UART0_CONTROL_TEN_Enum;

/* ==============================================  UART0 CONTROL TINH [30..30]  ============================================== */
typedef enum {                                  /*!< UART0_CONTROL_TINH                                                        */
  UART0_CONTROL_TINH_0                 = 0,     /*!< 0 : The transmitter operates normally.                                    */
  UART0_CONTROL_TINH_1                 = 1,     /*!< 1 : Transmissions are inhibited. The transmitter will stall
                                                     after any current transmis-sion is complete.                              */
} UART0_CONTROL_TINH_Enum;

/* =============================================  UART0 CONTROL TBUSYF [27..27]  ============================================= */
typedef enum {                                  /*!< UART0_CONTROL_TBUSYF                                                      */
  UART0_CONTROL_TBUSYF_0               = 0,     /*!< 0 : The UART transmitter is idle.                                         */
  UART0_CONTROL_TBUSYF_1               = 1,     /*!< 1 : The UART transmitter is active and transmitting.                      */
} UART0_CONTROL_TBUSYF_Enum;

/* ============================================  UART0 CONTROL TCPTIEN [23..23]  ============================================= */
typedef enum {                                  /*!< UART0_CONTROL_TCPTIEN                                                     */
  UART0_CONTROL_TCPTIEN_Disable        = 0,     /*!< Disable : Disable the transmit complete interrupt.                        */
  UART0_CONTROL_TCPTIEN_Enable         = 1,     /*!< Enable : Enable the transmit complete interrupt. A transmit
                                                     interrupt is generated when TCPTI is set to 1.                            */
} UART0_CONTROL_TCPTIEN_Enum;

/* ============================================  UART0 CONTROL TDREQIEN [22..22]  ============================================ */
typedef enum {                                  /*!< UART0_CONTROL_TDREQIEN                                                    */
  UART0_CONTROL_TDREQIEN_Disable       = 0,     /*!< Disable : Disable the transmit data request interrupt.                    */
  UART0_CONTROL_TDREQIEN_Enable        = 1,     /*!< Enable : Enable the transmit data request interrupt. A transmit
                                                     interrupt is asserted when TDREQI is set to 1.                            */
} UART0_CONTROL_TDREQIEN_Enum;

/* =============================================  UART0 CONTROL TERIEN [21..21]  ============================================= */
typedef enum {                                  /*!< UART0_CONTROL_TERIEN                                                      */
  UART0_CONTROL_TERIEN_Disable         = 0,     /*!< Disable : Disable the transmit error interrupt.                           */
  UART0_CONTROL_TERIEN_Enable          = 1,     /*!< Enable : Enable the transmit error interrupt. A transmit interrupt
                                                     is generated when TSCERI is set to 1.                                     */
} UART0_CONTROL_TERIEN_Enum;

/* =============================================  UART0 CONTROL TCPTTH [20..20]  ============================================= */
typedef enum {                                  /*!< UART0_CONTROL_TCPTTH                                                      */
  UART0_CONTROL_TCPTTH_0               = 0,     /*!< 0 : A transmit is completed (TCPTI = 1) at the end of each transmission.  */
  UART0_CONTROL_TCPTTH_1               = 1,     /*!< 1 : A transmit is completed (TCPTI = 1) only at the end of a
                                                     transmission when no more data is available to transmit.                  */
} UART0_CONTROL_TCPTTH_Enum;

/* =============================================  UART0 CONTROL TDREQI [18..18]  ============================================= */
typedef enum {                                  /*!< UART0_CONTROL_TDREQI                                                      */
  UART0_CONTROL_TDREQI_0               = 0,     /*!< 0 : The transmitter is not requesting more FIFO data.                     */
  UART0_CONTROL_TDREQI_1               = 1,     /*!< 1 : The transmitter is requesting more FIFO data.                         */
} UART0_CONTROL_TDREQI_Enum;

/* ==============================================  UART0 CONTROL REN [15..15]  =============================================== */
typedef enum {                                  /*!< UART0_CONTROL_REN                                                         */
  UART0_CONTROL_REN_Disable            = 0,     /*!< Disable : Disable the receiver. The receiver can receive one
                                                     data transaction only if ROSEN is set.                                    */
  UART0_CONTROL_REN_Enable             = 1,     /*!< Enable : Enable the receiver.                                             */
} UART0_CONTROL_REN_Enum;

/* ==============================================  UART0 CONTROL RINH [14..14]  ============================================== */
typedef enum {                                  /*!< UART0_CONTROL_RINH                                                        */
  UART0_CONTROL_RINH_0                 = 0,     /*!< 0 : The receiver operates normally.                                       */
  UART0_CONTROL_RINH_1                 = 1,     /*!< 1 : RTS is immediately asserted when RINH is set. The receiver
                                                     will complete any ongoing reception, but ignore all traffic
                                                     after that.                                                               */
} UART0_CONTROL_RINH_Enum;

/* =============================================  UART0 CONTROL ROSEN [13..13]  ============================================== */
typedef enum {                                  /*!< UART0_CONTROL_ROSEN                                                       */
  UART0_CONTROL_ROSEN_Disable          = 0,     /*!< Disable : Disable one-shot receive mode.                                  */
  UART0_CONTROL_ROSEN_Enable           = 1,     /*!< Enable : Enable one-shot receive mode.                                    */
} UART0_CONTROL_ROSEN_Enum;

/* =============================================  UART0 CONTROL RBUSYF [11..11]  ============================================= */
typedef enum {                                  /*!< UART0_CONTROL_RBUSYF                                                      */
  UART0_CONTROL_RBUSYF_0               = 0,     /*!< 0 : The UART receiver is idle.                                            */
  UART0_CONTROL_RBUSYF_1               = 1,     /*!< 1 : The UART receiver is receiving data.                                  */
} UART0_CONTROL_RBUSYF_Enum;

/* =============================================  UART0 CONTROL RABDEN [10..10]  ============================================= */
typedef enum {                                  /*!< UART0_CONTROL_RABDEN                                                      */
  UART0_CONTROL_RABDEN_Disable         = 0,     /*!< Disable : Disable receiver auto-baud.                                     */
  UART0_CONTROL_RABDEN_Enable          = 1,     /*!< Enable : Enable receiver auto-baud.                                       */
} UART0_CONTROL_RABDEN_Enum;

/* ==============================================  UART0 CONTROL MATMD [8..9]  =============================================== */
typedef enum {                                  /*!< UART0_CONTROL_MATMD                                                       */
  UART0_CONTROL_MATMD_00               = 0,     /*!< 00 : Disable the match function.                                          */
  UART0_CONTROL_MATMD_01               = 1,     /*!< 01 : (MCE) Data whose last data bit equals RBIT is accepted
                                                     and stored.                                                               */
  UART0_CONTROL_MATMD_10               = 2,     /*!< 10 : (Frame) A framing error is asserted if the last received
                                                     bit matches RBIT.                                                         */
  UART0_CONTROL_MATMD_11               = 3,     /*!< 11 : (Store) Store the last incoming data bit in RBIT. This
                                                     mode can be used incon-junction with the RDATLN setting.                  */
} UART0_CONTROL_MATMD_Enum;

/* =============================================  UART0 CONTROL RDREQIEN [6..6]  ============================================= */
typedef enum {                                  /*!< UART0_CONTROL_RDREQIEN                                                    */
  UART0_CONTROL_RDREQIEN_Disable       = 0,     /*!< Disable : Disable the read data request interrupt.                        */
  UART0_CONTROL_RDREQIEN_Enable        = 1,     /*!< Enable : Enable the read data request interrupt. A receive interrupt
                                                     is generated when RDREQI is set to 1.                                     */
} UART0_CONTROL_RDREQIEN_Enum;

/* ==============================================  UART0 CONTROL RERIEN [5..5]  ============================================== */
typedef enum {                                  /*!< UART0_CONTROL_RERIEN                                                      */
  UART0_CONTROL_RERIEN_Disable         = 0,     /*!< Disable : Disable the receive error interrupt.                            */
  UART0_CONTROL_RERIEN_Enable          = 1,     /*!< Enable : Enable the receive error interrupt. A receive error
                                                     interrupt is asserted when ROREI, RFRMERI, or RPARERI is
                                                     set to 1.                                                                 */
} UART0_CONTROL_RERIEN_Enum;

/* ==============================================  UART0 CONTROL RDREQI [3..3]  ============================================== */
typedef enum {                                  /*!< UART0_CONTROL_RDREQI                                                      */
  UART0_CONTROL_RDREQI_0               = 0,     /*!< 0 : Fewer than RFTH FIFO slots are filled with data.                      */
  UART0_CONTROL_RDREQI_1               = 1,     /*!< 1 : At least RFTH FIFO slots are filled with data.                        */
} UART0_CONTROL_RDREQI_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  IPDELAY  ======================================================== */
/* =======================================================  BAUDRATE  ======================================================== */
/* ========================================================  FIFOCN  ========================================================= */
/* ==============================================  UART0 FIFOCN TFERI [25..25]  ============================================== */
typedef enum {                                  /*!< UART0_FIFOCN_TFERI                                                        */
  UART0_FIFOCN_TFERI_0                 = 0,     /*!< 0 : A transmit FIFO error has not occurred since TFERI was last
                                                     cleared.                                                                  */
  UART0_FIFOCN_TFERI_1                 = 1,     /*!< 1 : A transmit FIFO error occurred.                                       */
} UART0_FIFOCN_TFERI_Enum;

/* ==============================================  UART0 FIFOCN TFTH [20..21]  =============================================== */
typedef enum {                                  /*!< UART0_FIFOCN_TFTH                                                         */
  UART0_FIFOCN_TFTH_00                 = 0,     /*!< 00 : A transmit data request interrupt (TDREQI) is asserted
                                                     when > 1 FIFO slot is empty.                                              */
  UART0_FIFOCN_TFTH_01                 = 1,     /*!< 01 : A transmit data request interrupt (TDREQI) is asserted
                                                     when > 2 FIFO slots are empty.                                            */
  UART0_FIFOCN_TFTH_10                 = 2,     /*!< 10 : A transmit data request interrupt (TDREQI) is asserted
                                                     when > 4 FIFO slots are empty.                                            */
  UART0_FIFOCN_TFTH_11                 = 3,     /*!< 11 : Reserved.                                                            */
} UART0_FIFOCN_TFTH_Enum;

/* ===============================================  UART0 FIFOCN RFERI [9..9]  =============================================== */
typedef enum {                                  /*!< UART0_FIFOCN_RFERI                                                        */
  UART0_FIFOCN_RFERI_0                 = 0,     /*!< 0 : A receive FIFO error has not occurred since RFERI was last
                                                     cleared.                                                                  */
  UART0_FIFOCN_RFERI_1                 = 1,     /*!< 1 : A receive FIFO error occurred.                                        */
} UART0_FIFOCN_RFERI_Enum;

/* ===============================================  UART0 FIFOCN RFTH [4..5]  ================================================ */
typedef enum {                                  /*!< UART0_FIFOCN_RFTH                                                         */
  UART0_FIFOCN_RFTH_00                 = 0,     /*!< 00 : A read data request interrupt (RDREQI) is asserted when
                                                     > 1 FIFO slot is full.                                                    */
  UART0_FIFOCN_RFTH_01                 = 1,     /*!< 01 : A read data request interrupt (RDREQI) is asserted when
                                                     > 2 FIFO slots are full.                                                  */
  UART0_FIFOCN_RFTH_10                 = 2,     /*!< 10 : A read data request interrupt (RDREQI) is asserted when
                                                     > 4 FIFO slots are full.                                                  */
  UART0_FIFOCN_RFTH_11                 = 3,     /*!< 11 : Reserved.                                                            */
} UART0_FIFOCN_RFTH_Enum;

/* ======================================================  FIFOCN_SET  ======================================================= */
/* ======================================================  FIFOCN_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           SPI0                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  SPI0 CONTROL DBGMD [24..24]  ============================================== */
typedef enum {                                  /*!< SPI0_CONTROL_DBGMD                                                        */
  SPI0_CONTROL_DBGMD_0                 = 0,     /*!< 0 : The SPI module will continue to operate while the core is
                                                     halted in debug mode.                                                     */
  SPI0_CONTROL_DBGMD_1                 = 1,     /*!< 1 : A debug breakpoint will cause the SPI module to halt.                 */
} SPI0_CONTROL_DBGMD_Enum;

/* ==============================================  SPI0 CONTROL BUSYF [15..15]  ============================================== */
typedef enum {                                  /*!< SPI0_CONTROL_BUSYF                                                        */
  SPI0_CONTROL_BUSYF_0                 = 0,     /*!< 0 : The SPI is not busy and a transfer is not in progress.                */
  SPI0_CONTROL_BUSYF_1                 = 1,     /*!< 1 : The SPI is currently busy and a transfer is in progress.              */
} SPI0_CONTROL_BUSYF_Enum;

/* =============================================  SPI0 CONTROL NSSSTS [14..14]  ============================================== */
typedef enum {                                  /*!< SPI0_CONTROL_NSSSTS                                                       */
  SPI0_CONTROL_NSSSTS_0                = 0,     /*!< 0 : NSS is currently a logic low.                                         */
  SPI0_CONTROL_NSSSTS_1                = 1,     /*!< 1 : NSS is currently a logic high.                                        */
} SPI0_CONTROL_NSSSTS_Enum;

/* ===============================================  SPI0 CONTROL SREI [7..7]  ================================================ */
typedef enum {                                  /*!< SPI0_CONTROL_SREI                                                         */
  SPI0_CONTROL_SREI_0                  = 0,     /*!< 0 : There is data still present in the transmit FIFO.                     */
  SPI0_CONTROL_SREI_1                  = 1,     /*!< 1 : All data has been transferred out of the shift register
                                                     and there is no data waiting in the transmit FIFO.                        */
} SPI0_CONTROL_SREI_Enum;

/* ==============================================  SPI0 CONTROL SLVSELI [4..4]  ============================================== */
typedef enum {                                  /*!< SPI0_CONTROL_SLVSELI                                                      */
  SPI0_CONTROL_SLVSELI_0               = 0,     /*!< 0 : The slave select signal (NSS) is not active.                          */
  SPI0_CONTROL_SLVSELI_1               = 1,     /*!< 1 : The slave select signal (NSS) is active.                              */
} SPI0_CONTROL_SLVSELI_Enum;

/* ===============================================  SPI0 CONTROL TFRQI [2..2]  =============================================== */
typedef enum {                                  /*!< SPI0_CONTROL_TFRQI                                                        */
  SPI0_CONTROL_TFRQI_0                 = 0,     /*!< 0 : The TX FIFO has fewer bytes than the level defined by TFTH.           */
  SPI0_CONTROL_TFRQI_1                 = 1,     /*!< 1 : The TX FIFO has equal or more bytes than the level defined
                                                     by TFTH.                                                                  */
} SPI0_CONTROL_TFRQI_Enum;

/* ===============================================  SPI0 CONTROL RFRQI [0..0]  =============================================== */
typedef enum {                                  /*!< SPI0_CONTROL_RFRQI                                                        */
  SPI0_CONTROL_RFRQI_0                 = 0,     /*!< 0 : The RX FIFO has fewer bytes than the level defined by RFTH.           */
  SPI0_CONTROL_RFRQI_1                 = 1,     /*!< 1 : The RX FIFO has equal or more bytes than the level defined
                                                     by RFTH.                                                                  */
} SPI0_CONTROL_RFRQI_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  CONFIG  ========================================================= */
/* ==============================================  SPI0 CONFIG RESET [31..31]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_RESET                                                         */
  SPI0_CONFIG_RESET_0                  = 0,     /*!< 0 : SPI module is not in soft reset.                                      */
  SPI0_CONFIG_RESET_1                  = 1,     /*!< 1 : SPI module is in soft reset and some of the module bits
                                                     cannot be accessed until this bit is cleared to 0 by hardware.            */
} SPI0_CONFIG_RESET_Enum;

/* ==============================================  SPI0 CONFIG DMAEN [24..24]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_DMAEN                                                         */
  SPI0_CONFIG_DMAEN_Disable            = 0,     /*!< Disable : Disable DMA requests.                                           */
  SPI0_CONFIG_DMAEN_Enable             = 1,     /*!< Enable : Enable DMA requests when the transmit buffer is empty
                                                     or the receive buffer is full.                                            */
} SPI0_CONFIG_DMAEN_Enum;

/* ===============================================  SPI0 CONFIG TFTH [18..19]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_TFTH                                                          */
  SPI0_CONFIG_TFTH_00                  = 0,     /*!< 00 : A DMA / TFRQ request asserts when > 1 FIFO slot is empty.            */
  SPI0_CONFIG_TFTH_01                  = 1,     /*!< 01 : A DMA / TFRQ request asserts when > 2 FIFO slots are empty.          */
  SPI0_CONFIG_TFTH_10                  = 2,     /*!< 10 : A DMA / TFRQ request asserts when > 4 FIFO slots are empty.          */
  SPI0_CONFIG_TFTH_11                  = 3,     /*!< 11 : A DMA / TFRQ request asserts when all FIFO slots are empty.          */
} SPI0_CONFIG_TFTH_Enum;

/* ===============================================  SPI0 CONFIG RFTH [16..17]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_RFTH                                                          */
  SPI0_CONFIG_RFTH_00                  = 0,     /*!< 00 : A DMA / RFRQ request asserts when > 1 FIFO slot is filled.           */
  SPI0_CONFIG_RFTH_01                  = 1,     /*!< 01 : A DMA / RFRQ request asserts when > 2 FIFO slots are filled.         */
  SPI0_CONFIG_RFTH_10                  = 2,     /*!< 10 : A DMA / RFRQ request asserts when > 4 FIFO slots are filled.         */
  SPI0_CONFIG_RFTH_11                  = 3,     /*!< 11 : A DMA / RFRQ request asserts when all FIFO slots are filled.         */
} SPI0_CONFIG_RFTH_Enum;

/* ==============================================  SPI0 CONFIG NSSMD [14..15]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_NSSMD                                                         */
  SPI0_CONFIG_NSSMD_00                 = 0,     /*!< 00 : 3-wire Slave or 3-wire Master.                                       */
  SPI0_CONFIG_NSSMD_01                 = 1,     /*!< 01 : 4-wire slave (NSS input). This setting can also be used
                                                     for multi-master configu-rations.                                         */
  SPI0_CONFIG_NSSMD_10                 = 2,     /*!< 10 : 4-wire master with NSS low (NSS output).                             */
  SPI0_CONFIG_NSSMD_11                 = 3,     /*!< 11 : 4-wire master with NSS high (NSS output).                            */
} SPI0_CONFIG_NSSMD_Enum;

/* =============================================  SPI0 CONFIG DDIRSEL [13..13]  ============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_DDIRSEL                                                       */
  SPI0_CONFIG_DDIRSEL_0                = 0,     /*!< 0 : Data will be shifted MSB first.                                       */
  SPI0_CONFIG_DDIRSEL_1                = 1,     /*!< 1 : Data will be shifted LSB first.                                       */
} SPI0_CONFIG_DDIRSEL_Enum;

/* ==============================================  SPI0 CONFIG NSSPOL [12..12]  ============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_NSSPOL                                                        */
  SPI0_CONFIG_NSSPOL_0                 = 0,     /*!< 0 : NSS is active low.                                                    */
  SPI0_CONFIG_NSSPOL_1                 = 1,     /*!< 1 : NSS is active high.                                                   */
} SPI0_CONFIG_NSSPOL_Enum;

/* ==============================================  SPI0 CONFIG CLKPHA [11..11]  ============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_CLKPHA                                                        */
  SPI0_CONFIG_CLKPHA_0                 = 0,     /*!< 0 : The first edge of SCK is the sample edge (center of data
                                                     bit).                                                                     */
  SPI0_CONFIG_CLKPHA_1                 = 1,     /*!< 1 : The first edge of SCK is the shift edge (edge of data bit).           */
} SPI0_CONFIG_CLKPHA_Enum;

/* ==============================================  SPI0 CONFIG CLKPOL [10..10]  ============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_CLKPOL                                                        */
  SPI0_CONFIG_CLKPOL_0                 = 0,     /*!< 0 : The SCK line is low in the idle state.                                */
  SPI0_CONFIG_CLKPOL_1                 = 1,     /*!< 1 : The SCK line is high in the idle state.                               */
} SPI0_CONFIG_CLKPOL_Enum;

/* ===============================================  SPI0 CONFIG MSTEN [9..9]  ================================================ */
typedef enum {                                  /*!< SPI0_CONFIG_MSTEN                                                         */
  SPI0_CONFIG_MSTEN_0                  = 0,     /*!< 0 : Operate in slave mode.                                                */
  SPI0_CONFIG_MSTEN_1                  = 1,     /*!< 1 : Operate in master mode.                                               */
} SPI0_CONFIG_MSTEN_Enum;

/* ===============================================  SPI0 CONFIG SPIEN [8..8]  ================================================ */
typedef enum {                                  /*!< SPI0_CONFIG_SPIEN                                                         */
  SPI0_CONFIG_SPIEN_Disable            = 0,     /*!< Disable : Disable the SPI.                                                */
  SPI0_CONFIG_SPIEN_Enable             = 1,     /*!< Enable : Enable the SPI.                                                  */
} SPI0_CONFIG_SPIEN_Enum;

/* ===============================================  SPI0 CONFIG SREIEN [7..7]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_SREIEN                                                        */
  SPI0_CONFIG_SREIEN_Disable           = 0,     /*!< Disable : Disable the shift register empty interrupt.                     */
  SPI0_CONFIG_SREIEN_Enable            = 1,     /*!< Enable : Enable the shift register empty interrupt.                       */
} SPI0_CONFIG_SREIEN_Enum;

/* ===============================================  SPI0 CONFIG URIEN [6..6]  ================================================ */
typedef enum {                                  /*!< SPI0_CONFIG_URIEN                                                         */
  SPI0_CONFIG_URIEN_Disable            = 0,     /*!< Disable : Disable the underrun interrupt.                                 */
  SPI0_CONFIG_URIEN_Enable             = 1,     /*!< Enable : Enable the underrun interrupt.                                   */
} SPI0_CONFIG_URIEN_Enum;

/* ===============================================  SPI0 CONFIG MDFIEN [5..5]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_MDFIEN                                                        */
  SPI0_CONFIG_MDFIEN_Disable           = 0,     /*!< Disable : Disable the mode fault interrupt.                               */
  SPI0_CONFIG_MDFIEN_Enable            = 1,     /*!< Enable : Enable the mode fault interrupt.                                 */
} SPI0_CONFIG_MDFIEN_Enum;

/* =============================================  SPI0 CONFIG SLVSELIEN [4..4]  ============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_SLVSELIEN                                                     */
  SPI0_CONFIG_SLVSELIEN_Disable        = 0,     /*!< Disable : Disable the slave select interrupt.                             */
  SPI0_CONFIG_SLVSELIEN_Enable         = 1,     /*!< Enable : Enable the slave select interrupt.                               */
} SPI0_CONFIG_SLVSELIEN_Enum;

/* ==============================================  SPI0 CONFIG TFORIEN [3..3]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_TFORIEN                                                       */
  SPI0_CONFIG_TFORIEN_Disable          = 0,     /*!< Disable : Disable the transmit FIFO overrun interrupt.                    */
  SPI0_CONFIG_TFORIEN_Enable           = 1,     /*!< Enable : Enable the transmit FIFO overrun interrupt.                      */
} SPI0_CONFIG_TFORIEN_Enum;

/* ==============================================  SPI0 CONFIG TFRQIEN [2..2]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_TFRQIEN                                                       */
  SPI0_CONFIG_TFRQIEN_Disable          = 0,     /*!< Disable : Disable the transmit FIFO data request interrupt.               */
  SPI0_CONFIG_TFRQIEN_Enable           = 1,     /*!< Enable : Enable the transmit FIFO data request interrupt.                 */
} SPI0_CONFIG_TFRQIEN_Enum;

/* ==============================================  SPI0 CONFIG RFORIEN [1..1]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_RFORIEN                                                       */
  SPI0_CONFIG_RFORIEN_Disable          = 0,     /*!< Disable : Disable the receive FIFO overrun interrupt.                     */
  SPI0_CONFIG_RFORIEN_Enable           = 1,     /*!< Enable : Enable the receive FIFO overrun interrupt.                       */
} SPI0_CONFIG_RFORIEN_Enum;

/* ==============================================  SPI0 CONFIG RFRQIEN [0..0]  =============================================== */
typedef enum {                                  /*!< SPI0_CONFIG_RFRQIEN                                                       */
  SPI0_CONFIG_RFRQIEN_Disable          = 0,     /*!< Disable : Disable the receive FIFO request interrupt.                     */
  SPI0_CONFIG_RFRQIEN_Enable           = 1,     /*!< Enable : Enable the receive FIFO request interrupt.                       */
} SPI0_CONFIG_RFRQIEN_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  CLKRATE  ======================================================== */
/* ========================================================  FSTATUS  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           I2C0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  I2C0 CONTROL I2CEN [31..31]  ============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_I2CEN                                                        */
  I2C0_CONTROL_I2CEN_Disable           = 0,     /*!< Disable : Disable the I2C module.                                         */
  I2C0_CONTROL_I2CEN_Enable            = 1,     /*!< Enable : Enable the I2C module.                                           */
} I2C0_CONTROL_I2CEN_Enum;

/* ==============================================  I2C0 CONTROL RESET [30..30]  ============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_RESET                                                        */
  I2C0_CONTROL_RESET_0                 = 0,     /*!< 0 : I2C module is not in soft reset.                                      */
  I2C0_CONTROL_RESET_1                 = 1,     /*!< 1 : I2C module is in soft reset and firmware cannot access all
                                                     bits in the module.                                                       */
} I2C0_CONTROL_RESET_Enum;

/* ==============================================  I2C0 CONTROL GCEN [29..29]  =============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_GCEN                                                         */
  I2C0_CONTROL_GCEN_Disable            = 0,     /*!< Disable : Disable General Call address decoding.                          */
  I2C0_CONTROL_GCEN_Enable             = 1,     /*!< Enable : Enable General Call address decoding.                            */
} I2C0_CONTROL_GCEN_Enum;

/* =============================================  I2C0 CONTROL LBACKEN [27..27]  ============================================= */
typedef enum {                                  /*!< I2C0_CONTROL_LBACKEN                                                      */
  I2C0_CONTROL_LBACKEN_0               = 0,     /*!< 0 : NACK after the last byte is received.                                 */
  I2C0_CONTROL_LBACKEN_1               = 1,     /*!< 1 : ACK after the last byte is received.                                  */
} I2C0_CONTROL_LBACKEN_Enum;

/* =============================================  I2C0 CONTROL HACKEN [25..25]  ============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_HACKEN                                                       */
  I2C0_CONTROL_HACKEN_Disable          = 0,     /*!< Disable : Disable automatic hardware acknowledge.                         */
  I2C0_CONTROL_HACKEN_Enable           = 1,     /*!< Enable : Enable automatic hardware acknowledge.                           */
} I2C0_CONTROL_HACKEN_Enum;

/* ==============================================  I2C0 CONTROL SMINH [24..24]  ============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_SMINH                                                        */
  I2C0_CONTROL_SMINH_0                 = 0,     /*!< 0 : Enable Slave modes.                                                   */
  I2C0_CONTROL_SMINH_1                 = 1,     /*!< 1 : Inhibit Slave modes. The module will not respond to a Master
                                                     on the bus.                                                               */
} I2C0_CONTROL_SMINH_Enum;

/* ==============================================  I2C0 CONTROL DBGMD [23..23]  ============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_DBGMD                                                        */
  I2C0_CONTROL_DBGMD_0                 = 0,     /*!< 0 : The I2C module will continue to operate while the core is
                                                     halted in debug mode.                                                     */
  I2C0_CONTROL_DBGMD_1                 = 1,     /*!< 1 : A debug breakpoint will cause the I2C module to halt.                 */
} I2C0_CONTROL_DBGMD_Enum;

/* ===============================================  I2C0 CONTROL FMD [22..22]  =============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_FMD                                                          */
  I2C0_CONTROL_FMD_0                   = 0,     /*!< 0 : Enable the input filter.                                              */
  I2C0_CONTROL_FMD_1                   = 1,     /*!< 1 : Disable the input filter.                                             */
} I2C0_CONTROL_FMD_Enum;

/* =============================================  I2C0 CONTROL ATXRXEN [21..21]  ============================================= */
typedef enum {                                  /*!< I2C0_CONTROL_ATXRXEN                                                      */
  I2C0_CONTROL_ATXRXEN_0               = 0,     /*!< 0 : Do not automatically switch to transmit or receive mode
                                                     after a Start.                                                            */
  I2C0_CONTROL_ATXRXEN_Enable          = 1,     /*!< Enable : If automatic hardware acknowledge mode is enabled (HACKEN
                                                     = 1), automati-cally switch to transmit or receive mode
                                                     after a Start.                                                            */
} I2C0_CONTROL_ATXRXEN_Enum;

/* ==============================================  I2C0 CONTROL SLVAF [20..20]  ============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_SLVAF                                                        */
  I2C0_CONTROL_SLVAF_0                 = 0,     /*!< 0 : Slave address detected.                                               */
  I2C0_CONTROL_SLVAF_1                 = 1,     /*!< 1 : General Call address detected.                                        */
} I2C0_CONTROL_SLVAF_Enum;

/* ==============================================  I2C0 CONTROL TXARM [19..19]  ============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_TXARM                                                        */
  I2C0_CONTROL_TXARM_Disable           = 0,     /*!< Disable : Disable data and address transmission.                          */
  I2C0_CONTROL_TXARM_Enable            = 1,     /*!< Enable : Enable the module to perform a transmit operation.               */
} I2C0_CONTROL_TXARM_Enum;

/* ==============================================  I2C0 CONTROL RXARM [18..18]  ============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_RXARM                                                        */
  I2C0_CONTROL_RXARM_Disable           = 0,     /*!< Disable : Disable data and address reception.                             */
  I2C0_CONTROL_RXARM_Enable            = 1,     /*!< Enable : Enable the module to perform a receive operation.                */
} I2C0_CONTROL_RXARM_Enum;

/* ===============================================  I2C0 CONTROL MSMDF [7..7]  =============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_MSMDF                                                        */
  I2C0_CONTROL_MSMDF_0                 = 0,     /*!< 0 : Module is operating in Slave mode.                                    */
  I2C0_CONTROL_MSMDF_1                 = 1,     /*!< 1 : Module is operating in Master mode.                                   */
} I2C0_CONTROL_MSMDF_Enum;

/* ===============================================  I2C0 CONTROL TXMDF [6..6]  =============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_TXMDF                                                        */
  I2C0_CONTROL_TXMDF_0                 = 0,     /*!< 0 : Module is in receiver mode.                                           */
  I2C0_CONTROL_TXMDF_1                 = 1,     /*!< 1 : Module is in transmitter mode.                                        */
} I2C0_CONTROL_TXMDF_Enum;

/* ==============================================  I2C0 CONTROL ACKRQF [3..3]  =============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_ACKRQF                                                       */
  I2C0_CONTROL_ACKRQF_0                = 0,     /*!< 0 : ACK has not been requested.                                           */
  I2C0_CONTROL_ACKRQF_1                = 1,     /*!< 1 : ACK requested.                                                        */
} I2C0_CONTROL_ACKRQF_Enum;

/* ===============================================  I2C0 CONTROL ARBLF [2..2]  =============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_ARBLF                                                        */
  I2C0_CONTROL_ARBLF_0                 = 0,     /*!< 0 : Arbitration lost error has not occurred.                              */
  I2C0_CONTROL_ARBLF_1                 = 1,     /*!< 1 : Arbitration lost error occurred.                                      */
} I2C0_CONTROL_ARBLF_Enum;

/* ===============================================  I2C0 CONTROL BUSYF [0..0]  =============================================== */
typedef enum {                                  /*!< I2C0_CONTROL_BUSYF                                                        */
  I2C0_CONTROL_BUSYF_0                 = 0,     /*!< 0 : A transaction is not currently taking place.                          */
  I2C0_CONTROL_BUSYF_1                 = 1,     /*!< 1 : A transaction is currently taking place.                              */
} I2C0_CONTROL_BUSYF_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  CONFIG  ========================================================= */
/* =============================================  I2C0 CONFIG TIMEREN [31..31]  ============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_TIMEREN                                                       */
  I2C0_CONFIG_TIMEREN_Disable          = 0,     /*!< Disable : Disable I2C Timer.                                              */
  I2C0_CONFIG_TIMEREN_Enable           = 1,     /*!< Enable : Enable I2C Timer for general purpose use. This setting
                                                     should not be used when the I2C module is enabled (I2CEN
                                                     = 1).                                                                     */
} I2C0_CONFIG_TIMEREN_Enum;

/* ===============================================  I2C0 CONFIG TMD [28..29]  ================================================ */
typedef enum {                                  /*!< I2C0_CONFIG_TMD                                                           */
  I2C0_CONFIG_TMD_00                   = 0,     /*!< 00 : I2C Timer Mode 0: Operate the I2C timer as a single 32-bit
                                                     timer : Timer Bytes [3 : 2 : 1 : 0].                                      */
  I2C0_CONFIG_TMD_01                   = 1,     /*!< 01 : I2C Timer Mode 1: Operate the I2C timer as two 16-bit timers
                                                     : Timer Bytes [3 : 2] and Timer Bytes [1 : 0].                            */
  I2C0_CONFIG_TMD_10                   = 2,     /*!< 10 : I2C Timer Mode 2: Operate the I2C timer as four independent
                                                     8-bit timers : Timer Byte 3, Timer Byte 2, Timer Byte 1,
                                                     and Timer Byte 0.                                                         */
  I2C0_CONFIG_TMD_11                   = 3,     /*!< 11 : I2C Timer Mode 3: Operate the I2C timer as one 16-bit and
                                                     two 8-bit timers : Timer Bytes [3 : 2], Timer Byte 1, and
                                                     Timer Byte 0.                                                             */
} I2C0_CONFIG_TMD_Enum;

/* ==============================================  I2C0 CONFIG T3RUN [27..27]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_T3RUN                                                         */
  I2C0_CONFIG_T3RUN_0                  = 0,     /*!< 0 : Stop Timer Byte 3.                                                    */
  I2C0_CONFIG_T3RUN_1                  = 1,     /*!< 1 : Start Timer Byte 3 running.                                           */
} I2C0_CONFIG_T3RUN_Enum;

/* ==============================================  I2C0 CONFIG T2RUN [26..26]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_T2RUN                                                         */
  I2C0_CONFIG_T2RUN_0                  = 0,     /*!< 0 : Stop Timer Byte 2.                                                    */
  I2C0_CONFIG_T2RUN_1                  = 1,     /*!< 1 : Start Timer Byte 2 running.                                           */
} I2C0_CONFIG_T2RUN_Enum;

/* ==============================================  I2C0 CONFIG T1RUN [25..25]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_T1RUN                                                         */
  I2C0_CONFIG_T1RUN_0                  = 0,     /*!< 0 : Stop Timer Byte 1.                                                    */
  I2C0_CONFIG_T1RUN_1                  = 1,     /*!< 1 : Start Timer Byte 1 running.                                           */
} I2C0_CONFIG_T1RUN_Enum;

/* ==============================================  I2C0 CONFIG T0RUN [24..24]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_T0RUN                                                         */
  I2C0_CONFIG_T0RUN_0                  = 0,     /*!< 0 : Stop Timer Byte 0.                                                    */
  I2C0_CONFIG_T0RUN_1                  = 1,     /*!< 1 : Start Timer Byte 0 running.                                           */
} I2C0_CONFIG_T0RUN_Enum;

/* ==============================================  I2C0 CONFIG T3IEN [17..17]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_T3IEN                                                         */
  I2C0_CONFIG_T3IEN_Disable            = 0,     /*!< Disable : Disable the I2C Timer Byte 3 and SCL low timeout interrupt.     */
  I2C0_CONFIG_T3IEN_Enable             = 1,     /*!< Enable : Enable the I2C Timer Byte 3 and SCL low timeout interrupt
                                                     (T3I).                                                                    */
} I2C0_CONFIG_T3IEN_Enum;

/* ==============================================  I2C0 CONFIG T2IEN [16..16]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_T2IEN                                                         */
  I2C0_CONFIG_T2IEN_Disable            = 0,     /*!< Disable : Disable the I2C Timer Byte 2 interrupt.                         */
  I2C0_CONFIG_T2IEN_Enable             = 1,     /*!< Enable : Enable the I2C Timer Byte 2 interrupt (T2I).                     */
} I2C0_CONFIG_T2IEN_Enum;

/* ==============================================  I2C0 CONFIG T1IEN [15..15]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_T1IEN                                                         */
  I2C0_CONFIG_T1IEN_Disable            = 0,     /*!< Disable : Disable the I2C Timer Byte 1 interrupt.                         */
  I2C0_CONFIG_T1IEN_Enable             = 1,     /*!< Enable : Enable the I2C Timer Byte 1 interrupt (T1I).                     */
} I2C0_CONFIG_T1IEN_Enum;

/* ==============================================  I2C0 CONFIG T0IEN [14..14]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_T0IEN                                                         */
  I2C0_CONFIG_T0IEN_Disable            = 0,     /*!< Disable : Disable the I2C Timer Byte 0 interrupt.                         */
  I2C0_CONFIG_T0IEN_Enable             = 1,     /*!< Enable : Enable the I2C Timer Byte 0 interrupt (T0I).                     */
} I2C0_CONFIG_T0IEN_Enum;

/* =============================================  I2C0 CONFIG ARBLIEN [13..13]  ============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_ARBLIEN                                                       */
  I2C0_CONFIG_ARBLIEN_Disable          = 0,     /*!< Disable : Disable the arbitration lost interrupt.                         */
  I2C0_CONFIG_ARBLIEN_Enable           = 1,     /*!< Enable : Enable the arbitration lost interrupt (ARBLI).                   */
} I2C0_CONFIG_ARBLIEN_Enum;

/* ==============================================  I2C0 CONFIG STAIEN [12..12]  ============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_STAIEN                                                        */
  I2C0_CONFIG_STAIEN_Disable           = 0,     /*!< Disable : Disable the start interrupt.                                    */
  I2C0_CONFIG_STAIEN_Enable            = 1,     /*!< Enable : Enable the start interrupt (STAI).                               */
} I2C0_CONFIG_STAIEN_Enum;

/* ==============================================  I2C0 CONFIG TXIEN [11..11]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_TXIEN                                                         */
  I2C0_CONFIG_TXIEN_Disable            = 0,     /*!< Disable : Disable the transmit done interrupt.                            */
  I2C0_CONFIG_TXIEN_Enable             = 1,     /*!< Enable : Enable the transmit done interrupt (TXI).                        */
} I2C0_CONFIG_TXIEN_Enum;

/* ==============================================  I2C0 CONFIG RXIEN [10..10]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_RXIEN                                                         */
  I2C0_CONFIG_RXIEN_Disable            = 0,     /*!< Disable : Disable the receive done interrupt.                             */
  I2C0_CONFIG_RXIEN_Enable             = 1,     /*!< Enable : Enable the receive done interrupt (RXI).                         */
} I2C0_CONFIG_RXIEN_Enum;

/* ===============================================  I2C0 CONFIG ACKIEN [9..9]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_ACKIEN                                                        */
  I2C0_CONFIG_ACKIEN_Disable           = 0,     /*!< Disable : Disable the acknowledge interrupt.                              */
  I2C0_CONFIG_ACKIEN_Enable            = 1,     /*!< Enable : Enable the acknowledge interrupt (ACKI).                         */
} I2C0_CONFIG_ACKIEN_Enum;

/* ===============================================  I2C0 CONFIG STOIEN [8..8]  =============================================== */
typedef enum {                                  /*!< I2C0_CONFIG_STOIEN                                                        */
  I2C0_CONFIG_STOIEN_Disable           = 0,     /*!< Disable : Disable the stop interrupt.                                     */
  I2C0_CONFIG_STOIEN_Enable            = 1,     /*!< Enable : Enable the stop interrupt (STOI).                                */
} I2C0_CONFIG_STOIEN_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* =======================================================  SADDRESS  ======================================================== */
/* =========================================================  SMASK  ========================================================= */
/* =========================================================  DATA  ========================================================== */
/* =========================================================  TIMER  ========================================================= */
/* ========================================================  TIMERRL  ======================================================== */
/* ========================================================  SCONFIG  ======================================================== */
/* ========================================================  I2CDMA  ========================================================= */
/* ==============================================  I2C0 I2CDMA DMAEN [31..31]  =============================================== */
typedef enum {                                  /*!< I2C0_I2CDMA_DMAEN                                                         */
  I2C0_I2CDMA_DMAEN_Disable            = 0,     /*!< Disable : Disable I2C DMA data requests.                                  */
  I2C0_I2CDMA_DMAEN_Enable             = 1,     /*!< Enable : Enable I2C DMA data requests.                                    */
} I2C0_I2CDMA_DMAEN_Enum;



/* =========================================================================================================================== */
/* ================                                           EPCA0                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  CH0_MODE  ======================================================== */
/* ======================================================  CH0_CONTROL  ====================================================== */
/* ====================================================  CH0_CONTROL_SET  ==================================================== */
/* ====================================================  CH0_CONTROL_CLR  ==================================================== */
/* =======================================================  CH0_CCAPV  ======================================================= */
/* =====================================================  CH0_CCAPVUPD  ====================================================== */
/* =======================================================  CH1_MODE  ======================================================== */
/* ======================================================  CH1_CONTROL  ====================================================== */
/* ====================================================  CH1_CONTROL_SET  ==================================================== */
/* ====================================================  CH1_CONTROL_CLR  ==================================================== */
/* =======================================================  CH1_CCAPV  ======================================================= */
/* =====================================================  CH1_CCAPVUPD  ====================================================== */
/* =======================================================  CH2_MODE  ======================================================== */
/* ======================================================  CH2_CONTROL  ====================================================== */
/* ====================================================  CH2_CONTROL_SET  ==================================================== */
/* ====================================================  CH2_CONTROL_CLR  ==================================================== */
/* =======================================================  CH2_CCAPV  ======================================================= */
/* =====================================================  CH2_CCAPVUPD  ====================================================== */
/* =======================================================  CH3_MODE  ======================================================== */
/* ======================================================  CH3_CONTROL  ====================================================== */
/* ====================================================  CH3_CONTROL_SET  ==================================================== */
/* ====================================================  CH3_CONTROL_CLR  ==================================================== */
/* =======================================================  CH3_CCAPV  ======================================================= */
/* =====================================================  CH3_CCAPVUPD  ====================================================== */
/* =======================================================  CH4_MODE  ======================================================== */
/* ======================================================  CH4_CONTROL  ====================================================== */
/* ====================================================  CH4_CONTROL_SET  ==================================================== */
/* ====================================================  CH4_CONTROL_CLR  ==================================================== */
/* =======================================================  CH4_CCAPV  ======================================================= */
/* =====================================================  CH4_CCAPVUPD  ====================================================== */
/* =======================================================  CH5_MODE  ======================================================== */
/* ======================================================  CH5_CONTROL  ====================================================== */
/* ====================================================  CH5_CONTROL_SET  ==================================================== */
/* ====================================================  CH5_CONTROL_CLR  ==================================================== */
/* =======================================================  CH5_CCAPV  ======================================================= */
/* =====================================================  CH5_CCAPVUPD  ====================================================== */
/* =========================================================  MODE  ========================================================== */
/* ==============================================  EPCA0 MODE STDOSEL [27..28]  ============================================== */
typedef enum {                                  /*!< EPCA0_MODE_STDOSEL                                                        */
  EPCA0_MODE_STDOSEL_00                = 0,     /*!< 00 : Select the non-differential channel outputs (Channels 0-5)
                                                     for the standard PB pins.                                                 */
  EPCA0_MODE_STDOSEL_01                = 1,     /*!< 01 : Select the differential output from Channel 2 and non-differential
                                                     outputs from Channels 0, 1, 3, and 4 for the standard PB
                                                     pins.                                                                     */
  EPCA0_MODE_STDOSEL_10                = 2,     /*!< 10 : Select the differential outputs from Channels 1 and 2 and
                                                     non-differential out-puts from Channels 0 and 3 for the
                                                     standard PB pins.                                                         */
  EPCA0_MODE_STDOSEL_11                = 3,     /*!< 11 : Select three differential outputs from Channels 0, 1, and
                                                     2 for the standard PB pins.                                               */
} EPCA0_MODE_STDOSEL_Enum;

/* ==============================================  EPCA0 MODE DBUSYF [25..25]  =============================================== */
typedef enum {                                  /*!< EPCA0_MODE_DBUSYF                                                         */
  EPCA0_MODE_DBUSYF_0                  = 0,     /*!< 0 : The DMA channel is not servicing an EPCA control transfer.            */
  EPCA0_MODE_DBUSYF_1                  = 1,     /*!< 1 : The DMA channel is busy servicing an EPCA control transfer.           */
} EPCA0_MODE_DBUSYF_Enum;

/* ==============================================  EPCA0 MODE DSTART [22..24]  =============================================== */
typedef enum {                                  /*!< EPCA0_MODE_DSTART                                                         */
  EPCA0_MODE_DSTART_000                = 0,     /*!< 000 : Set the first register in a DMA write transfer to LIMITUPD.         */
  EPCA0_MODE_DSTART_001                = 1,     /*!< 001 : Set the first register in a DMA write transfer to Channel
                                                     0 CCAPVUPD.                                                               */
  EPCA0_MODE_DSTART_010                = 2,     /*!< 010 : Set the first register in a DMA write transfer to Channel
                                                     1 CCAPVUPD.                                                               */
  EPCA0_MODE_DSTART_011                = 3,     /*!< 011 : Set the first register in a DMA write transfer to Channel
                                                     2 CCAPVUPD.                                                               */
  EPCA0_MODE_DSTART_100                = 4,     /*!< 100 : Set the first register in a DMA write transfer to Channel
                                                     3 CCAPVUPD.                                                               */
  EPCA0_MODE_DSTART_101                = 5,     /*!< 101 : Set the first register in a DMA write transfer to Channel
                                                     4 CCAPVUPD.                                                               */
  EPCA0_MODE_DSTART_110                = 6,     /*!< 110 : Set the first register in a DMA write transfer to Channel
                                                     5 CCAPVUPD.                                                               */
  EPCA0_MODE_DSTART_111                = 7,     /*!< 111 : Empty slot.                                                         */
} EPCA0_MODE_DSTART_Enum;

/* ===============================================  EPCA0 MODE DPTR [19..21]  ================================================ */
typedef enum {                                  /*!< EPCA0_MODE_DPTR                                                           */
  EPCA0_MODE_DPTR_000                  = 0,     /*!< 000 : The DMA channel will write to LIMITUPD next.                        */
  EPCA0_MODE_DPTR_001                  = 1,     /*!< 001 : The DMA channel will write to Channel 0 CCAPVUPD next.              */
  EPCA0_MODE_DPTR_010                  = 2,     /*!< 010 : The DMA channel will write to Channel 1 CCAPVUPD next.              */
  EPCA0_MODE_DPTR_011                  = 3,     /*!< 011 : The DMA channel will write to Channel 2 CCAPVUPD next.              */
  EPCA0_MODE_DPTR_100                  = 4,     /*!< 100 : The DMA channel will write to Channel 3 CCAPVUPD next.              */
  EPCA0_MODE_DPTR_101                  = 5,     /*!< 101 : The DMA channel will write to Channel 4 CCAPVUPD next.              */
  EPCA0_MODE_DPTR_110                  = 6,     /*!< 110 : The DMA channel will write to Channel 5 CCAPVUPD next.              */
  EPCA0_MODE_DPTR_111                  = 7,     /*!< 111 : Empty slot.                                                         */
} EPCA0_MODE_DPTR_Enum;

/* ===============================================  EPCA0 MODE DEND [16..18]  ================================================ */
typedef enum {                                  /*!< EPCA0_MODE_DEND                                                           */
  EPCA0_MODE_DEND_000                  = 0,     /*!< 000 : Set the last register in a DMA write transfer to LIMITUPD.          */
  EPCA0_MODE_DEND_001                  = 1,     /*!< 001 : Set the last register in a DMA write transfer to Channel
                                                     0 CCAPVUPD.                                                               */
  EPCA0_MODE_DEND_010                  = 2,     /*!< 010 : Set the last register in a DMA write transfer to Channel
                                                     1 CCAPVUPD.                                                               */
  EPCA0_MODE_DEND_011                  = 3,     /*!< 011 : Set the last register in a DMA write transfer to Channel
                                                     2 CCAPVUPD.                                                               */
  EPCA0_MODE_DEND_100                  = 4,     /*!< 100 : Set the last register in a DMA write transfer to Channel
                                                     3 CCAPVUPD.                                                               */
  EPCA0_MODE_DEND_101                  = 5,     /*!< 101 : Set the last register in a DMA write transfer to Channel
                                                     4 CCAPVUPD.                                                               */
  EPCA0_MODE_DEND_110                  = 6,     /*!< 110 : Set the last register in a DMA write transfer to Channel
                                                     5 CCAPVUPD.                                                               */
  EPCA0_MODE_DEND_111                  = 7,     /*!< 111 : Empty slot.                                                         */
} EPCA0_MODE_DEND_Enum;

/* ==============================================  EPCA0 MODE HDOSEL [14..15]  =============================================== */
typedef enum {                                  /*!< EPCA0_MODE_HDOSEL                                                         */
  EPCA0_MODE_HDOSEL_00                 = 0,     /*!< 00 : Select three differential outputs from Channels 3, 4, and
                                                     5 for the High Drive pins.                                                */
  EPCA0_MODE_HDOSEL_01                 = 1,     /*!< 01 : Select the differential outputs from Channels 4 and 5 and
                                                     non-differential out-puts from Channels 2 and 3 for the
                                                     High Drive pins.                                                          */
  EPCA0_MODE_HDOSEL_10                 = 2,     /*!< 10 : Select the differential output from Channel 5 and non-differential
                                                     outputs from Channels 1-4 for the High Drive pins.                        */
  EPCA0_MODE_HDOSEL_11                 = 3,     /*!< 11 : Select the non-differential channel outputs (Channels 0-5)
                                                     for the High Drive pins.                                                  */
} EPCA0_MODE_HDOSEL_Enum;

/* ==============================================  EPCA0 MODE CLKSEL [10..12]  =============================================== */
typedef enum {                                  /*!< EPCA0_MODE_CLKSEL                                                         */
  EPCA0_MODE_CLKSEL_000                = 0,     /*!< 000 : Set the APB as the input clock (FCLKIN).                            */
  EPCA0_MODE_CLKSEL_001                = 1,     /*!< 001 : Set Timer 0 low overflows divided by 2 as the input clock
                                                     (FCLKIN).                                                                 */
  EPCA0_MODE_CLKSEL_010                = 2,     /*!< 010 : Set high-to-low transitions on ECI divided by 2 as the
                                                     input clock (FCLKIN).                                                     */
  EPCA0_MODE_CLKSEL_011                = 3,     /*!< 011 : Set the external oscillator module output (EXTOSCn) divided
                                                     by 2 as the input clock (FCLKIN).                                         */
  EPCA0_MODE_CLKSEL_100                = 4,     /*!< 100 : Set ECI transitions divided by 2 as the input clock (FCLKIN).       */
  EPCA0_MODE_CLKSEL_101                = 5,     /*!< 101 : Reserved.                                                           */
} EPCA0_MODE_CLKSEL_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  EPCA0 CONTROL DIVST [21..21]  ============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_DIVST                                                       */
  EPCA0_CONTROL_DIVST_0                = 0,     /*!< 0 : The clock divider is currently in the first half-cycle.               */
  EPCA0_CONTROL_DIVST_1                = 1,     /*!< 1 : The clock divider is currently in the second half-cycle.              */
} EPCA0_CONTROL_DIVST_Enum;

/* ==============================================  EPCA0 CONTROL STEN [14..14]  ============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_STEN                                                        */
  EPCA0_CONTROL_STEN_Disable           = 0,     /*!< Disable : Disable the input trigger (EPCAnTx). The EPCA counter/timer
                                                     will continue to run if the RUN bit is set regardless of
                                                     the value on the input trigger.                                           */
  EPCA0_CONTROL_STEN_Enable            = 1,     /*!< Enable : Enable the input trigger (EPCAnTx). If RUN is set to
                                                     1, the EPCA counter/timer will start running when the selected
                                                     input trigger (STSEL) meets the criteria set by STESEL.
                                                     It will not stop running if the criteria is no longer met.                */
} EPCA0_CONTROL_STEN_Enum;

/* =============================================  EPCA0 CONTROL STESEL [13..13]  ============================================= */
typedef enum {                                  /*!< EPCA0_CONTROL_STESEL                                                      */
  EPCA0_CONTROL_STESEL_0               = 0,     /*!< 0 : A high-to-low transition (falling edge) on EPCAnTx will
                                                     start the counter/timer.                                                  */
  EPCA0_CONTROL_STESEL_1               = 1,     /*!< 1 : A low-to-high transition (rising edge) on EPCAnTx will start
                                                     the counter/timer.                                                        */
} EPCA0_CONTROL_STESEL_Enum;

/* =============================================  EPCA0 CONTROL STSEL [11..12]  ============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_STSEL                                                       */
  EPCA0_CONTROL_STSEL_00               = 0,     /*!< 00 : Select input trigger 0, Comparator0 output.                          */
  EPCA0_CONTROL_STSEL_01               = 1,     /*!< 01 : Select input trigger 1, Comparator1 output.                          */
  EPCA0_CONTROL_STSEL_10               = 2,     /*!< 10 : Select input trigger 2, Timer 0 high overflow.                       */
  EPCA0_CONTROL_STSEL_11               = 3,     /*!< 11 : Select input trigger 3, Timer 1 high overflow.                       */
} EPCA0_CONTROL_STSEL_Enum;

/* ==============================================  EPCA0 CONTROL HALTEN [9..9]  ============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_HALTEN                                                      */
  EPCA0_CONTROL_HALTEN_0               = 0,     /*!< 0 : The Halt input (PB_HDKill) does not affect the EPCA counter/timer.    */
  EPCA0_CONTROL_HALTEN_1               = 1,     /*!< 1 : An assertion of the Halt input (PB_HDKill) will stop the
                                                     EPCA counter/timer.                                                       */
} EPCA0_CONTROL_HALTEN_Enum;

/* ==============================================  EPCA0 CONTROL DBGMD [6..6]  =============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_DBGMD                                                       */
  EPCA0_CONTROL_DBGMD_0                = 0,     /*!< 0 : A debug breakpoint will stop the EPCA counter/timer.                  */
  EPCA0_CONTROL_DBGMD_1                = 1,     /*!< 1 : The EPCA will continue to operate while the core is halted
                                                     in debug mode.                                                            */
} EPCA0_CONTROL_DBGMD_Enum;

/* ==============================================  EPCA0 CONTROL NOUPD [4..4]  =============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_NOUPD                                                       */
  EPCA0_CONTROL_NOUPD_0                = 0,     /*!< 0 : The EPCA registers will automatically load any new update
                                                     values after an over-flow/limit event occurs.                             */
  EPCA0_CONTROL_NOUPD_1                = 1,     /*!< 1 : The EPCA registers will not load any new update values after
                                                     an overflow/limit event occurs.                                           */
} EPCA0_CONTROL_NOUPD_Enum;

/* =============================================  EPCA0 CONTROL HALTIEN [3..3]  ============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_HALTIEN                                                     */
  EPCA0_CONTROL_HALTIEN_0              = 0,     /*!< 0 : Do not generate an interrupt if the EPCA halt input is high.          */
  EPCA0_CONTROL_HALTIEN_1              = 1,     /*!< 1 : Generate an interrupt if the EPCA halt input is high.                 */
} EPCA0_CONTROL_HALTIEN_Enum;

/* ==============================================  EPCA0 CONTROL OVFSEN [2..2]  ============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_OVFSEN                                                      */
  EPCA0_CONTROL_OVFSEN_0               = 0,     /*!< 0 : Do not send a synchronization signal when a EPCA counter
                                                     overflow/limit event occurs.                                              */
  EPCA0_CONTROL_OVFSEN_1               = 1,     /*!< 1 : Send a synchronization signal when a EPCA counter overflow/limit
                                                     event occurs.                                                             */
} EPCA0_CONTROL_OVFSEN_Enum;

/* ==============================================  EPCA0 CONTROL OVFDEN [1..1]  ============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_OVFDEN                                                      */
  EPCA0_CONTROL_OVFDEN_0               = 0,     /*!< 0 : Do not request DMA data when a EPCA counter overflow/limit
                                                     event occurs.                                                             */
  EPCA0_CONTROL_OVFDEN_1               = 1,     /*!< 1 : Request DMA data when a EPCA counter overflow/limit event
                                                     occurs.                                                                   */
} EPCA0_CONTROL_OVFDEN_Enum;

/* ==============================================  EPCA0 CONTROL OVFIEN [0..0]  ============================================== */
typedef enum {                                  /*!< EPCA0_CONTROL_OVFIEN                                                      */
  EPCA0_CONTROL_OVFIEN_Disable         = 0,     /*!< Disable : Disable the EPCA counter overflow/limit event interrupt.        */
  EPCA0_CONTROL_OVFIEN_Enable          = 1,     /*!< Enable : Enable the EPCA counter overflow/limit event interrupt.          */
} EPCA0_CONTROL_OVFIEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =============================================  EPCA0 STATUS C5IOVFI [15..15]  ============================================= */
typedef enum {                                  /*!< EPCA0_STATUS_C5IOVFI                                                      */
  EPCA0_STATUS_C5IOVFI_0               = 0,     /*!< 0 : Channel 5 did not count past the channel n-bit mode limit.            */
  EPCA0_STATUS_C5IOVFI_1               = 1,     /*!< 1 : Channel 5 counted past the channel n-bit mode limit.                  */
} EPCA0_STATUS_C5IOVFI_Enum;

/* =============================================  EPCA0 STATUS C4IOVFI [14..14]  ============================================= */
typedef enum {                                  /*!< EPCA0_STATUS_C4IOVFI                                                      */
  EPCA0_STATUS_C4IOVFI_0               = 0,     /*!< 0 : Channel 4 did not count past the channel n-bit mode limit.            */
  EPCA0_STATUS_C4IOVFI_1               = 1,     /*!< 1 : Channel 4 counted past the channel n-bit mode limit.                  */
} EPCA0_STATUS_C4IOVFI_Enum;

/* =============================================  EPCA0 STATUS C3IOVFI [13..13]  ============================================= */
typedef enum {                                  /*!< EPCA0_STATUS_C3IOVFI                                                      */
  EPCA0_STATUS_C3IOVFI_0               = 0,     /*!< 0 : Channel 3 did not count past the channel n-bit mode limit.            */
  EPCA0_STATUS_C3IOVFI_1               = 1,     /*!< 1 : Channel 3 counted past the channel n-bit mode limit.                  */
} EPCA0_STATUS_C3IOVFI_Enum;

/* =============================================  EPCA0 STATUS C2IOVFI [12..12]  ============================================= */
typedef enum {                                  /*!< EPCA0_STATUS_C2IOVFI                                                      */
  EPCA0_STATUS_C2IOVFI_0               = 0,     /*!< 0 : Channel 2 did not count past the channel n-bit mode limit.            */
  EPCA0_STATUS_C2IOVFI_1               = 1,     /*!< 1 : Channel 2 counted past the channel n-bit mode limit.                  */
} EPCA0_STATUS_C2IOVFI_Enum;

/* =============================================  EPCA0 STATUS C1IOVFI [11..11]  ============================================= */
typedef enum {                                  /*!< EPCA0_STATUS_C1IOVFI                                                      */
  EPCA0_STATUS_C1IOVFI_0               = 0,     /*!< 0 : Channel 1 did not count past the channel n-bit mode limit.            */
  EPCA0_STATUS_C1IOVFI_1               = 1,     /*!< 1 : Channel 1 counted past the channel n-bit mode limit.                  */
} EPCA0_STATUS_C1IOVFI_Enum;

/* =============================================  EPCA0 STATUS C0IOVFI [10..10]  ============================================= */
typedef enum {                                  /*!< EPCA0_STATUS_C0IOVFI                                                      */
  EPCA0_STATUS_C0IOVFI_0               = 0,     /*!< 0 : Channel 0 did not count past the channel n-bit mode limit.            */
  EPCA0_STATUS_C0IOVFI_1               = 1,     /*!< 1 : Channel 0 counted past the channel n-bit mode limit.                  */
} EPCA0_STATUS_C0IOVFI_Enum;

/* ===============================================  EPCA0 STATUS HALTI [9..9]  =============================================== */
typedef enum {                                  /*!< EPCA0_STATUS_HALTI                                                        */
  EPCA0_STATUS_HALTI_0                 = 0,     /*!< 0 : The Halt input (PB_HDKill) was not asserted.                          */
  EPCA0_STATUS_HALTI_1                 = 1,     /*!< 1 : The Halt input (PB_HDKill) was asserted.                              */
} EPCA0_STATUS_HALTI_Enum;

/* ===============================================  EPCA0 STATUS UPDCF [8..8]  =============================================== */
typedef enum {                                  /*!< EPCA0_STATUS_UPDCF                                                        */
  EPCA0_STATUS_UPDCF_0                 = 0,     /*!< 0 : An EPCA register update completed or is not pending.                  */
  EPCA0_STATUS_UPDCF_1                 = 1,     /*!< 1 : An EPCA register update has not completed and is still pending.       */
} EPCA0_STATUS_UPDCF_Enum;

/* ===============================================  EPCA0 STATUS OVFI [7..7]  ================================================ */
typedef enum {                                  /*!< EPCA0_STATUS_OVFI                                                         */
  EPCA0_STATUS_OVFI_0                  = 0,     /*!< 0 : An EPCA Counter/Timer overflow/limit event did not occur.             */
  EPCA0_STATUS_OVFI_1                  = 1,     /*!< 1 : An EPCA Counter/Timer overflow/limit event occurred.                  */
} EPCA0_STATUS_OVFI_Enum;

/* ================================================  EPCA0 STATUS RUN [6..6]  ================================================ */
typedef enum {                                  /*!< EPCA0_STATUS_RUN                                                          */
  EPCA0_STATUS_RUN_0                   = 0,     /*!< 0 : Stop the EPCA Counter/Timer.                                          */
  EPCA0_STATUS_RUN_1                   = 1,     /*!< 1 : Start the EPCA Counter/Timer.                                         */
} EPCA0_STATUS_RUN_Enum;

/* ===============================================  EPCA0 STATUS C5CCI [5..5]  =============================================== */
typedef enum {                                  /*!< EPCA0_STATUS_C5CCI                                                        */
  EPCA0_STATUS_C5CCI_0                 = 0,     /*!< 0 : A Channel 5 match or capture event did not occur.                     */
  EPCA0_STATUS_C5CCI_1                 = 1,     /*!< 1 : A Channel 5 match or capture event occurred.                          */
} EPCA0_STATUS_C5CCI_Enum;

/* ===============================================  EPCA0 STATUS C4CCI [4..4]  =============================================== */
typedef enum {                                  /*!< EPCA0_STATUS_C4CCI                                                        */
  EPCA0_STATUS_C4CCI_0                 = 0,     /*!< 0 : A Channel 4 match or capture event did not occur.                     */
  EPCA0_STATUS_C4CCI_1                 = 1,     /*!< 1 : A Channel 4 match or capture event occurred.                          */
} EPCA0_STATUS_C4CCI_Enum;

/* ===============================================  EPCA0 STATUS C3CCI [3..3]  =============================================== */
typedef enum {                                  /*!< EPCA0_STATUS_C3CCI                                                        */
  EPCA0_STATUS_C3CCI_0                 = 0,     /*!< 0 : A Channel 3 match or capture event did not occur.                     */
  EPCA0_STATUS_C3CCI_1                 = 1,     /*!< 1 : A Channel 3 match or capture event occurred.                          */
} EPCA0_STATUS_C3CCI_Enum;

/* ===============================================  EPCA0 STATUS C2CCI [2..2]  =============================================== */
typedef enum {                                  /*!< EPCA0_STATUS_C2CCI                                                        */
  EPCA0_STATUS_C2CCI_0                 = 0,     /*!< 0 : A Channel 2 match or capture event did not occur.                     */
  EPCA0_STATUS_C2CCI_1                 = 1,     /*!< 1 : A Channel 2 match or capture event occurred.                          */
} EPCA0_STATUS_C2CCI_Enum;

/* ===============================================  EPCA0 STATUS C1CCI [1..1]  =============================================== */
typedef enum {                                  /*!< EPCA0_STATUS_C1CCI                                                        */
  EPCA0_STATUS_C1CCI_0                 = 0,     /*!< 0 : A Channel 1 match or capture event did not occur.                     */
  EPCA0_STATUS_C1CCI_1                 = 1,     /*!< 1 : A Channel 1 match or capture event occurred.                          */
} EPCA0_STATUS_C1CCI_Enum;

/* ===============================================  EPCA0 STATUS C0CCI [0..0]  =============================================== */
typedef enum {                                  /*!< EPCA0_STATUS_C0CCI                                                        */
  EPCA0_STATUS_C0CCI_0                 = 0,     /*!< 0 : A Channel 0 match or capture event did not occur.                     */
  EPCA0_STATUS_C0CCI_1                 = 1,     /*!< 1 : A Channel 0 match or capture event occurred.                          */
} EPCA0_STATUS_C0CCI_Enum;

/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ========================================================  COUNTER  ======================================================== */
/* =========================================================  LIMIT  ========================================================= */
/* =======================================================  LIMITUPD  ======================================================== */
/* =========================================================  DTIME  ========================================================= */
/* ========================================================  DTARGET  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           PCA0                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  CH0_MODE  ======================================================== */
/* ======================================================  CH0_CONTROL  ====================================================== */
/* ====================================================  CH0_CONTROL_SET  ==================================================== */
/* ====================================================  CH0_CONTROL_CLR  ==================================================== */
/* =======================================================  CH0_CCAPV  ======================================================= */
/* =====================================================  CH0_CCAPVUPD  ====================================================== */
/* =======================================================  CH1_MODE  ======================================================== */
/* ======================================================  CH1_CONTROL  ====================================================== */
/* ====================================================  CH1_CONTROL_SET  ==================================================== */
/* ====================================================  CH1_CONTROL_CLR  ==================================================== */
/* =======================================================  CH1_CCAPV  ======================================================= */
/* =====================================================  CH1_CCAPVUPD  ====================================================== */
/* =========================================================  MODE  ========================================================== */
/* ===============================================  PCA0 MODE CLKSEL [10..12]  =============================================== */
typedef enum {                                  /*!< PCA0_MODE_CLKSEL                                                          */
  PCA0_MODE_CLKSEL_000                 = 0,     /*!< 000 : Set the APB as the input clock (FCLKIN).                            */
  PCA0_MODE_CLKSEL_001                 = 1,     /*!< 001 : Set Timer 0 low overflows divided by 2 as the input clock
                                                     (FCLKIN).                                                                 */
  PCA0_MODE_CLKSEL_010                 = 2,     /*!< 010 : Set high-to-low transitions on ECI divided by 2 as the
                                                     input clock (FCLKIN).                                                     */
  PCA0_MODE_CLKSEL_011                 = 3,     /*!< 011 : Set the external oscillator module output (EXTOSCn) divided
                                                     by 2 as the input clock (FCLKIN).                                         */
  PCA0_MODE_CLKSEL_100                 = 4,     /*!< 100 : Set ECI transitions divided by 2 as the input clock (FCLKIN).       */
  PCA0_MODE_CLKSEL_101                 = 5,     /*!< 101 : Reserved.                                                           */
} PCA0_MODE_CLKSEL_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  PCA0 CONTROL DIVST [21..21]  ============================================== */
typedef enum {                                  /*!< PCA0_CONTROL_DIVST                                                        */
  PCA0_CONTROL_DIVST_0                 = 0,     /*!< 0 : The clock divider is currently in the first half-cycle.               */
  PCA0_CONTROL_DIVST_1                 = 1,     /*!< 1 : The clock divider is currently in the second half-cycle.              */
} PCA0_CONTROL_DIVST_Enum;

/* ===============================================  PCA0 CONTROL DBGMD [6..6]  =============================================== */
typedef enum {                                  /*!< PCA0_CONTROL_DBGMD                                                        */
  PCA0_CONTROL_DBGMD_0                 = 0,     /*!< 0 : A debug breakpoint will cause the PCA to halt.                        */
  PCA0_CONTROL_DBGMD_1                 = 1,     /*!< 1 : The PCA will continue to operate while the core is halted
                                                     in debug mode.                                                            */
} PCA0_CONTROL_DBGMD_Enum;

/* ==============================================  PCA0 CONTROL OVFIEN [0..0]  =============================================== */
typedef enum {                                  /*!< PCA0_CONTROL_OVFIEN                                                       */
  PCA0_CONTROL_OVFIEN_Disable          = 0,     /*!< Disable : Disable the PCA counter overflow/limit event interrupt.         */
  PCA0_CONTROL_OVFIEN_Enable           = 1,     /*!< Enable : Enable the PCA counter overflow/limit event interrupt.           */
} PCA0_CONTROL_OVFIEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =============================================  PCA0 STATUS C1IOVFI [11..11]  ============================================== */
typedef enum {                                  /*!< PCA0_STATUS_C1IOVFI                                                       */
  PCA0_STATUS_C1IOVFI_0                = 0,     /*!< 0 : Channel 1 did not count past the channel n-bit mode limit.            */
  PCA0_STATUS_C1IOVFI_1                = 1,     /*!< 1 : Channel 1 counted past the channel n-bit mode limit.                  */
} PCA0_STATUS_C1IOVFI_Enum;

/* =============================================  PCA0 STATUS C0IOVFI [10..10]  ============================================== */
typedef enum {                                  /*!< PCA0_STATUS_C0IOVFI                                                       */
  PCA0_STATUS_C0IOVFI_0                = 0,     /*!< 0 : Channel 0 did not count past the channel n-bit mode limit.            */
  PCA0_STATUS_C0IOVFI_1                = 1,     /*!< 1 : Channel 0 counted past the channel n-bit mode limit.                  */
} PCA0_STATUS_C0IOVFI_Enum;

/* ================================================  PCA0 STATUS OVFI [7..7]  ================================================ */
typedef enum {                                  /*!< PCA0_STATUS_OVFI                                                          */
  PCA0_STATUS_OVFI_0                   = 0,     /*!< 0 : A PCA Counter/Timer overflow/limit event did not occur.               */
  PCA0_STATUS_OVFI_1                   = 1,     /*!< 1 : A PCA Counter/Timer overflow/limit event occurred.                    */
} PCA0_STATUS_OVFI_Enum;

/* ================================================  PCA0 STATUS RUN [6..6]  ================================================= */
typedef enum {                                  /*!< PCA0_STATUS_RUN                                                           */
  PCA0_STATUS_RUN_0                    = 0,     /*!< 0 : Stop the PCA Counter/Timer.                                           */
  PCA0_STATUS_RUN_1                    = 1,     /*!< 1 : Start the PCA Counter/Timer.                                          */
} PCA0_STATUS_RUN_Enum;

/* ===============================================  PCA0 STATUS C1CCI [1..1]  ================================================ */
typedef enum {                                  /*!< PCA0_STATUS_C1CCI                                                         */
  PCA0_STATUS_C1CCI_0                  = 0,     /*!< 0 : A Channel 1 match or capture event did not occur.                     */
  PCA0_STATUS_C1CCI_1                  = 1,     /*!< 1 : A Channel 1 match or capture event occurred.                          */
} PCA0_STATUS_C1CCI_Enum;

/* ===============================================  PCA0 STATUS C0CCI [0..0]  ================================================ */
typedef enum {                                  /*!< PCA0_STATUS_C0CCI                                                         */
  PCA0_STATUS_C0CCI_0                  = 0,     /*!< 0 : A Channel 0 match or capture event did not occur.                     */
  PCA0_STATUS_C0CCI_1                  = 1,     /*!< 1 : A Channel 0 match or capture event occurred.                          */
} PCA0_STATUS_C0CCI_Enum;

/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ========================================================  COUNTER  ======================================================== */
/* =========================================================  LIMIT  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ==============================================  TIMER0 CONFIG HRUN [29..29]  ============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_HRUN                                                        */
  TIMER0_CONFIG_HRUN_0                 = 0,     /*!< 0 : Stop the high timer or entire 32-bit timer.                           */
  TIMER0_CONFIG_HRUN_1                 = 1,     /*!< 1 : The high timer runs if HMSTREN = 0 or MSTRUN (in Timer 0)
                                                     = 1. The full 32-bit timer runs if split mode is disabled
                                                     and (HMSTREN = 0 or MSTRUN = 1).                                          */
} TIMER0_CONFIG_HRUN_Enum;

/* ==============================================  TIMER0 CONFIG HMD [24..27]  =============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_HMD                                                         */
  TIMER0_CONFIG_HMD_0000               = 0,     /*!< 0000 : The high 16-bit timer or entire 32-bit timer is in Auto-Reload
                                                     Mode.                                                                     */
  TIMER0_CONFIG_HMD_0001               = 1,     /*!< 0001 : The high 16-bit timer or entire 32-bit timer is in Up/Down
                                                     Count Mode.                                                               */
  TIMER0_CONFIG_HMD_0010               = 2,     /*!< 0010 : The high 16-bit timer or entire 32-bit timer is in Falling
                                                     Edge Capture Mode.                                                        */
  TIMER0_CONFIG_HMD_0011               = 3,     /*!< 0011 : The high 16-bit timer or entire 32-bit timer is in Rising
                                                     Edge Capture Mode.                                                        */
  TIMER0_CONFIG_HMD_0100               = 4,     /*!< 0100 : The high 16-bit timer or entire 32-bit timer is in Low
                                                     Time Capture Mode.                                                        */
  TIMER0_CONFIG_HMD_0101               = 5,     /*!< 0101 : The high 16-bit timer or entire 32-bit timer is in High
                                                     Time Capture Mode.                                                        */
  TIMER0_CONFIG_HMD_0110               = 6,     /*!< 0110 : The high 16-bit timer or entire 32-bit timer is in Duty
                                                     Cycle Capture Mode.                                                       */
  TIMER0_CONFIG_HMD_0111               = 7,     /*!< 0111 : The high 16-bit timer or entire 32-bit timer is in Oneshot
                                                     Mode.                                                                     */
  TIMER0_CONFIG_HMD_1000               = 8,     /*!< 1000 : The high 16-bit timer or entire 32-bit timer is in Square
                                                     Wave Output Mode.                                                         */
  TIMER0_CONFIG_HMD_1001               = 9,     /*!< 1001 : The high 16-bit timer or entire 32-bit timer is in PWM
                                                     Mode.                                                                     */
  TIMER0_CONFIG_HMD_1010               = 10,    /*!< 1010 : Reserved.                                                          */
} TIMER0_CONFIG_HMD_Enum;

/* ============================================  TIMER0 CONFIG HOVFIEN [23..23]  ============================================= */
typedef enum {                                  /*!< TIMER0_CONFIG_HOVFIEN                                                     */
  TIMER0_CONFIG_HOVFIEN_0              = 0,     /*!< 0 : The state of HOVFI does not affect the high timer interrupt.          */
  TIMER0_CONFIG_HOVFIEN_1              = 1,     /*!< 1 : A high timer interrupt request is generated if HOVFI is
                                                     set to 1.                                                                 */
} TIMER0_CONFIG_HOVFIEN_Enum;

/* =============================================  TIMER0 CONFIG HEXIEN [22..22]  ============================================= */
typedef enum {                                  /*!< TIMER0_CONFIG_HEXIEN                                                      */
  TIMER0_CONFIG_HEXIEN_0               = 0,     /*!< 0 : The state of the HEXI flag does not affect the high timer
                                                     interrupt.                                                                */
  TIMER0_CONFIG_HEXIEN_1               = 1,     /*!< 1 : A high timer interrupt request is generated if HEXI is set
                                                     to 1.                                                                     */
} TIMER0_CONFIG_HEXIEN_Enum;

/* =============================================  TIMER0 CONFIG DBGMD [21..21]  ============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_DBGMD                                                       */
  TIMER0_CONFIG_DBGMD_0                = 0,     /*!< 0 : The timer will continue to operate while the core is halted
                                                     in debug mode.                                                            */
  TIMER0_CONFIG_DBGMD_1                = 1,     /*!< 1 : A debug breakpoint will cause the Timer to halt.                      */
} TIMER0_CONFIG_DBGMD_Enum;

/* ============================================  TIMER0 CONFIG HMSTREN [20..20]  ============================================= */
typedef enum {                                  /*!< TIMER0_CONFIG_HMSTREN                                                     */
  TIMER0_CONFIG_HMSTREN_0              = 0,     /*!< 0 : MSTRUN does not need to be set for the timer to run.                  */
  TIMER0_CONFIG_HMSTREN_1              = 1,     /*!< 1 : MSTRUN must be set for the timer to run.                              */
} TIMER0_CONFIG_HMSTREN_Enum;

/* =============================================  TIMER0 CONFIG MSTRUN [19..19]  ============================================= */
typedef enum {                                  /*!< TIMER0_CONFIG_MSTRUN                                                      */
  TIMER0_CONFIG_MSTRUN_Disable         = 0,     /*!< Disable : Disable the master run control for all timers.                  */
  TIMER0_CONFIG_MSTRUN_Enable          = 1,     /*!< Enable : Enable the master run control for all timers.                    */
} TIMER0_CONFIG_MSTRUN_Enum;

/* ==============================================  TIMER0 CONFIG HCLK [16..17]  ============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_HCLK                                                        */
  TIMER0_CONFIG_HCLK_00                = 0,     /*!< 00 : Select the APB clock as the timer source.                            */
  TIMER0_CONFIG_HCLK_01                = 1,     /*!< 01 : Select the external oscillator clock as the timer source.
                                                     The external oscillator must run slower than one-half the
                                                     APB clock.                                                                */
  TIMER0_CONFIG_HCLK_10                = 2,     /*!< 10 : Select the dedicated 8-bit prescaler as the timer source.            */
  TIMER0_CONFIG_HCLK_11                = 3,     /*!< 11 : Select falling edges of the CT signal as the timer clock
                                                     source.                                                                   */
} TIMER0_CONFIG_HCLK_Enum;

/* ==============================================  TIMER0 CONFIG LRUN [13..13]  ============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_LRUN                                                        */
  TIMER0_CONFIG_LRUN_0                 = 0,     /*!< 0 : Stop the low timer if split mode is enabled (SPLITEN = 1).            */
  TIMER0_CONFIG_LRUN_Enable            = 1,     /*!< Enable : The low timer runs if split mode is enabled (SPLITEN
                                                     = 1) and (LMSTREN = 0 or MSTRUN = 1 in Timer 0).                          */
} TIMER0_CONFIG_LRUN_Enum;

/* ===============================================  TIMER0 CONFIG LMD [8..10]  =============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_LMD                                                         */
  TIMER0_CONFIG_LMD_000                = 0,     /*!< 000 : The low timer is in Auto-Reload Mode.                               */
  TIMER0_CONFIG_LMD_001                = 1,     /*!< 001 : The low timer is in Up/Down Count Mode.                             */
  TIMER0_CONFIG_LMD_010                = 2,     /*!< 010 : The low timer is in Falling Edge Capture Mode.                      */
  TIMER0_CONFIG_LMD_011                = 3,     /*!< 011 : The low timer is in Rising Edge Capture Mode.                       */
  TIMER0_CONFIG_LMD_100                = 4,     /*!< 100 : The low timer is in Low Time Capture Mode.                          */
  TIMER0_CONFIG_LMD_101                = 5,     /*!< 101 : The low timer is in High Time Capture Mode.                         */
  TIMER0_CONFIG_LMD_110                = 6,     /*!< 110 : The low timer is in Duty Cycle Capture Mode.                        */
  TIMER0_CONFIG_LMD_111                = 7,     /*!< 111 : The low timer is in Oneshot Mode.                                   */
} TIMER0_CONFIG_LMD_Enum;

/* =============================================  TIMER0 CONFIG LOVFIEN [7..7]  ============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_LOVFIEN                                                     */
  TIMER0_CONFIG_LOVFIEN_0              = 0,     /*!< 0 : The state of LOVFI does not affect the low timer interrupt.           */
  TIMER0_CONFIG_LOVFIEN_1              = 1,     /*!< 1 : A low timer interrupt request is generated if LOVFI = 1.              */
} TIMER0_CONFIG_LOVFIEN_Enum;

/* ==============================================  TIMER0 CONFIG LEXIEN [6..6]  ============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_LEXIEN                                                      */
  TIMER0_CONFIG_LEXIEN_0               = 0,     /*!< 0 : The state of the LEXI flag does not affect the low timer
                                                     interrupt.                                                                */
  TIMER0_CONFIG_LEXIEN_1               = 1,     /*!< 1 : A low timer interrupt request is generated if LEXI is set
                                                     to 1.                                                                     */
} TIMER0_CONFIG_LEXIEN_Enum;

/* =============================================  TIMER0 CONFIG SPLITEN [5..5]  ============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_SPLITEN                                                     */
  TIMER0_CONFIG_SPLITEN_0              = 0,     /*!< 0 : The timer operates as a single 32-bit timer controlled by
                                                     the high timer fields.                                                    */
  TIMER0_CONFIG_SPLITEN_1              = 1,     /*!< 1 : The timer operates as two independent 16-bit timers.                  */
} TIMER0_CONFIG_SPLITEN_Enum;

/* =============================================  TIMER0 CONFIG LMSTREN [4..4]  ============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_LMSTREN                                                     */
  TIMER0_CONFIG_LMSTREN_0              = 0,     /*!< 0 : MSTRUN does not need to be set for the low timer to run.              */
  TIMER0_CONFIG_LMSTREN_1              = 1,     /*!< 1 : MSTRUN must be set for the low timer to run.                          */
} TIMER0_CONFIG_LMSTREN_Enum;

/* ===============================================  TIMER0 CONFIG LCLK [0..1]  =============================================== */
typedef enum {                                  /*!< TIMER0_CONFIG_LCLK                                                        */
  TIMER0_CONFIG_LCLK_00                = 0,     /*!< 00 : Select the APB clock as the timer source.                            */
  TIMER0_CONFIG_LCLK_01                = 1,     /*!< 01 : Select the external oscillator clock as the timer source.
                                                     The external oscillator must run slower than one-half the
                                                     APB clock.                                                                */
  TIMER0_CONFIG_LCLK_10                = 2,     /*!< 10 : Select the dedicated 8-bit prescaler as the timer source.            */
  TIMER0_CONFIG_LCLK_11                = 3,     /*!< 11 : Select falling edges of the CT signal as the timer clock
                                                     source.                                                                   */
} TIMER0_CONFIG_LCLK_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  CLKDIV  ========================================================= */
/* =========================================================  COUNT  ========================================================= */
/* ========================================================  CAPTURE  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           USB0                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  FADDR  ========================================================= */
/* ==============================================  USB0 FADDR FADDRUPD [7..7]  =============================================== */
typedef enum {                                  /*!< USB0_FADDR_FADDRUPD                                                       */
  USB0_FADDR_FADDRUPD_0                = 0,     /*!< 0 : The last address written to FADDR is in effect.                       */
  USB0_FADDR_FADDRUPD_1                = 1,     /*!< 1 : The last address written to FADDR is not yet in effect.               */
} USB0_FADDR_FADDRUPD_Enum;

/* =========================================================  POWER  ========================================================= */
/* ==============================================  USB0 POWER ISOUPDMD [7..7]  =============================================== */
typedef enum {                                  /*!< USB0_POWER_ISOUPDMD                                                       */
  USB0_POWER_ISOUPDMD_0                = 0,     /*!< 0 : When software writes IPRDYI = 1, USB will send the packet
                                                     when the next IN token is received.                                       */
  USB0_POWER_ISOUPDMD_1                = 1,     /*!< 1 : When software writes IPRDYI = 1, USB will wait for a SOF
                                                     token before sending the packet. If an IN token is received
                                                     before a SOF token, USB will send a zero-length data packet.              */
} USB0_POWER_ISOUPDMD_Enum;

/* ===============================================  USB0 POWER DITHEN [5..5]  ================================================ */
typedef enum {                                  /*!< USB0_POWER_DITHEN                                                         */
  USB0_POWER_DITHEN_Disable            = 0,     /*!< Disable : Disable automatic USB dithering.                                */
  USB0_POWER_DITHEN_Enable             = 1,     /*!< Enable : Enable automatic USB dithering.                                  */
} USB0_POWER_DITHEN_Enum;

/* ===============================================  USB0 POWER USBINH [4..4]  ================================================ */
typedef enum {                                  /*!< USB0_POWER_USBINH                                                         */
  USB0_POWER_USBINH_0                  = 0,     /*!< 0 : Enable the USB module.                                                */
  USB0_POWER_USBINH_1                  = 1,     /*!< 1 : USB module inhibited. All USB traffic is ignored.                     */
} USB0_POWER_USBINH_Enum;

/* ===============================================  USB0 POWER RSTDETF [3..3]  =============================================== */
typedef enum {                                  /*!< USB0_POWER_RSTDETF                                                        */
  USB0_POWER_RSTDETF_0                 = 0,     /*!< 0 : Reset signaling is not present on the bus.                            */
  USB0_POWER_RSTDETF_1                 = 1,     /*!< 1 : Reset signaling detected on the bus.                                  */
} USB0_POWER_RSTDETF_Enum;

/* ===============================================  USB0 POWER SUSMDF [1..1]  ================================================ */
typedef enum {                                  /*!< USB0_POWER_SUSMDF                                                         */
  USB0_POWER_SUSMDF_0                  = 0,     /*!< 0 : The USB module is not in suspend mode.                                */
  USB0_POWER_SUSMDF_1                  = 1,     /*!< 1 : The USB module is in suspend mode.                                    */
} USB0_POWER_SUSMDF_Enum;

/* ===============================================  USB0 POWER SUSDEN [0..0]  ================================================ */
typedef enum {                                  /*!< USB0_POWER_SUSDEN                                                         */
  USB0_POWER_SUSDEN_Disable            = 0,     /*!< Disable : Disable suspend detection. The USB module will ignore
                                                     suspend signaling on the bus.                                             */
  USB0_POWER_SUSDEN_Enable             = 1,     /*!< Enable : Enable suspend detection. The USB module will enter
                                                     suspend mode if it detects suspend signalling on the bus.                 */
} USB0_POWER_SUSDEN_Enum;

/* =========================================================  IOINT  ========================================================= */
/* =======================================================  IOINT_CLR  ======================================================= */
/* =========================================================  CMINT  ========================================================= */
/* =======================================================  CMINT_CLR  ======================================================= */
/* ========================================================  IOINTE  ========================================================= */
/* =============================================  USB0 IOINTE OUT4IEN [20..20]  ============================================== */
typedef enum {                                  /*!< USB0_IOINTE_OUT4IEN                                                       */
  USB0_IOINTE_OUT4IEN_Disable          = 0,     /*!< Disable : Disable the OUT Endpoint 4 interrupt.                           */
  USB0_IOINTE_OUT4IEN_Enable           = 1,     /*!< Enable : Enable the OUT Endpoint 4 interrupt.                             */
} USB0_IOINTE_OUT4IEN_Enum;

/* =============================================  USB0 IOINTE OUT3IEN [19..19]  ============================================== */
typedef enum {                                  /*!< USB0_IOINTE_OUT3IEN                                                       */
  USB0_IOINTE_OUT3IEN_Disable          = 0,     /*!< Disable : Disable the OUT Endpoint 3 interrupt.                           */
  USB0_IOINTE_OUT3IEN_Enable           = 1,     /*!< Enable : Enable the OUT Endpoint 3 interrupt.                             */
} USB0_IOINTE_OUT3IEN_Enum;

/* =============================================  USB0 IOINTE OUT2IEN [18..18]  ============================================== */
typedef enum {                                  /*!< USB0_IOINTE_OUT2IEN                                                       */
  USB0_IOINTE_OUT2IEN_Disable          = 0,     /*!< Disable : Disable the OUT Endpoint 2 interrupt.                           */
  USB0_IOINTE_OUT2IEN_Enable           = 1,     /*!< Enable : Enable the OUT Endpoint 2 interrupt.                             */
} USB0_IOINTE_OUT2IEN_Enum;

/* =============================================  USB0 IOINTE OUT1IEN [17..17]  ============================================== */
typedef enum {                                  /*!< USB0_IOINTE_OUT1IEN                                                       */
  USB0_IOINTE_OUT1IEN_Disable          = 0,     /*!< Disable : Disable the OUT Endpoint 1 interrupt.                           */
  USB0_IOINTE_OUT1IEN_Enable           = 1,     /*!< Enable : Enable the OUT Endpoint 1 interrupt.                             */
} USB0_IOINTE_OUT1IEN_Enum;

/* ===============================================  USB0 IOINTE IN4IEN [4..4]  =============================================== */
typedef enum {                                  /*!< USB0_IOINTE_IN4IEN                                                        */
  USB0_IOINTE_IN4IEN_Disable           = 0,     /*!< Disable : Disable the IN Endpoint 4 interrupt.                            */
  USB0_IOINTE_IN4IEN_Enable            = 1,     /*!< Enable : Enable the IN Endpoint 4 interrupt.                              */
} USB0_IOINTE_IN4IEN_Enum;

/* ===============================================  USB0 IOINTE IN3IEN [3..3]  =============================================== */
typedef enum {                                  /*!< USB0_IOINTE_IN3IEN                                                        */
  USB0_IOINTE_IN3IEN_Disable           = 0,     /*!< Disable : Disable the IN Endpoint 3 interrupt.                            */
  USB0_IOINTE_IN3IEN_Enable            = 1,     /*!< Enable : Enable the IN Endpoint 3 interrupt.                              */
} USB0_IOINTE_IN3IEN_Enum;

/* ===============================================  USB0 IOINTE IN2IEN [2..2]  =============================================== */
typedef enum {                                  /*!< USB0_IOINTE_IN2IEN                                                        */
  USB0_IOINTE_IN2IEN_Disable           = 0,     /*!< Disable : Disable the IN Endpoint 2 interrupt.                            */
  USB0_IOINTE_IN2IEN_Enable            = 1,     /*!< Enable : Enable the IN Endpoint 2 interrupt.                              */
} USB0_IOINTE_IN2IEN_Enum;

/* ===============================================  USB0 IOINTE IN1IEN [1..1]  =============================================== */
typedef enum {                                  /*!< USB0_IOINTE_IN1IEN                                                        */
  USB0_IOINTE_IN1IEN_Disable           = 0,     /*!< Disable : Disable the IN Endpoint 1 interrupt.                            */
  USB0_IOINTE_IN1IEN_Enable            = 1,     /*!< Enable : Enable the IN Endpoint 1 interrupt.                              */
} USB0_IOINTE_IN1IEN_Enum;

/* ===============================================  USB0 IOINTE EP0IEN [0..0]  =============================================== */
typedef enum {                                  /*!< USB0_IOINTE_EP0IEN                                                        */
  USB0_IOINTE_EP0IEN_Disable           = 0,     /*!< Disable : Disable the Endpoint 0 interrupt.                               */
  USB0_IOINTE_EP0IEN_Enable            = 1,     /*!< Enable : Enable the Endpoint 0 interrupt.                                 */
} USB0_IOINTE_EP0IEN_Enum;

/* =======================================================  CMINTEPE  ======================================================== */
/* =============================================  USB0 CMINTEPE EP4EN [20..20]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_EP4EN                                                       */
  USB0_CMINTEPE_EP4EN_Disable          = 0,     /*!< Disable : Disable Endpoint 4 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB0_CMINTEPE_EP4EN_Enable           = 1,     /*!< Enable : Enable Endpoint 4 (normal).                                      */
} USB0_CMINTEPE_EP4EN_Enum;

/* =============================================  USB0 CMINTEPE EP3EN [19..19]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_EP3EN                                                       */
  USB0_CMINTEPE_EP3EN_Disable          = 0,     /*!< Disable : Disable Endpoint 3 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB0_CMINTEPE_EP3EN_Enable           = 1,     /*!< Enable : Enable Endpoint 3 (normal).                                      */
} USB0_CMINTEPE_EP3EN_Enum;

/* =============================================  USB0 CMINTEPE EP2EN [18..18]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_EP2EN                                                       */
  USB0_CMINTEPE_EP2EN_Disable          = 0,     /*!< Disable : Disable Endpoint 2 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB0_CMINTEPE_EP2EN_Enable           = 1,     /*!< Enable : Enable Endpoint 2 (normal).                                      */
} USB0_CMINTEPE_EP2EN_Enum;

/* =============================================  USB0 CMINTEPE EP1EN [17..17]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_EP1EN                                                       */
  USB0_CMINTEPE_EP1EN_Disable          = 0,     /*!< Disable : Disable Endpoint 1 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB0_CMINTEPE_EP1EN_Enable           = 1,     /*!< Enable : Enable Endpoint 1 (normal).                                      */
} USB0_CMINTEPE_EP1EN_Enum;

/* =============================================  USB0 CMINTEPE EP0EN [16..16]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_EP0EN                                                       */
  USB0_CMINTEPE_EP0EN_Disable          = 0,     /*!< Disable : Disable Endpoint 0 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB0_CMINTEPE_EP0EN_Enable           = 1,     /*!< Enable : Enable Endpoint 0 (normal).                                      */
} USB0_CMINTEPE_EP0EN_Enum;

/* ==============================================  USB0 CMINTEPE SOFIEN [3..3]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_SOFIEN                                                      */
  USB0_CMINTEPE_SOFIEN_Disable         = 0,     /*!< Disable : Disable the SOF interrupt.                                      */
  USB0_CMINTEPE_SOFIEN_Enable          = 1,     /*!< Enable : Enable the SOF interrupt.                                        */
} USB0_CMINTEPE_SOFIEN_Enum;

/* ==============================================  USB0 CMINTEPE RSTIEN [2..2]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_RSTIEN                                                      */
  USB0_CMINTEPE_RSTIEN_Disable         = 0,     /*!< Disable : Disable the Reset interrupt.                                    */
  USB0_CMINTEPE_RSTIEN_Enable          = 1,     /*!< Enable : Enable the Reset interrupt.                                      */
} USB0_CMINTEPE_RSTIEN_Enum;

/* ==============================================  USB0 CMINTEPE RESIEN [1..1]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_RESIEN                                                      */
  USB0_CMINTEPE_RESIEN_Disable         = 0,     /*!< Disable : Disable the Resume interrupt.                                   */
  USB0_CMINTEPE_RESIEN_Enable          = 1,     /*!< Enable : Enable the Resume interrupt.                                     */
} USB0_CMINTEPE_RESIEN_Enum;

/* ==============================================  USB0 CMINTEPE SUSIEN [0..0]  ============================================== */
typedef enum {                                  /*!< USB0_CMINTEPE_SUSIEN                                                      */
  USB0_CMINTEPE_SUSIEN_Disable         = 0,     /*!< Disable : Disable the Suspend interrupt.                                  */
  USB0_CMINTEPE_SUSIEN_Enable          = 1,     /*!< Enable : Enable the Suspend interrupt.                                    */
} USB0_CMINTEPE_SUSIEN_Enum;

/* =======================================================  CRCONTROL  ======================================================= */
/* ==============================================  USB0 CRCONTROL CREN [7..7]  =============================================== */
typedef enum {                                  /*!< USB0_CRCONTROL_CREN                                                       */
  USB0_CRCONTROL_CREN_Disable          = 0,     /*!< Disable : Disable clock recovery.                                         */
  USB0_CRCONTROL_CREN_Enable           = 1,     /*!< Enable : Enable clock recovery.                                           */
} USB0_CRCONTROL_CREN_Enum;

/* =============================================  USB0 CRCONTROL CRSSEN [6..6]  ============================================== */
typedef enum {                                  /*!< USB0_CRCONTROL_CRSSEN                                                     */
  USB0_CRCONTROL_CRSSEN_0              = 0,     /*!< 0 : Normal calibration mode.                                              */
  USB0_CRCONTROL_CRSSEN_1              = 1,     /*!< 1 : Single step mode.                                                     */
} USB0_CRCONTROL_CRSSEN_Enum;

/* =============================================  USB0 CRCONTROL LSCRMD [5..5]  ============================================== */
typedef enum {                                  /*!< USB0_CRCONTROL_LSCRMD                                                     */
  USB0_CRCONTROL_LSCRMD_0              = 0,     /*!< 0 : Full Speed Mode.                                                      */
  USB0_CRCONTROL_LSCRMD_1              = 1,     /*!< 1 : Low Speed Mode.                                                       */
} USB0_CRCONTROL_LSCRMD_Enum;

/* ==============================================  USB0 CRCONTROL OLEN [4..4]  =============================================== */
typedef enum {                                  /*!< USB0_CRCONTROL_OLEN                                                       */
  USB0_CRCONTROL_OLEN_0                = 0,     /*!< 0 : Do not freeze the USB oscillator output frequency (closed
                                                     loop mode).                                                               */
  USB0_CRCONTROL_OLEN_1                = 1,     /*!< 1 : Freeze the USB oscillator output frequency (open loop mode).          */
} USB0_CRCONTROL_OLEN_Enum;

/* =========================================================  FRAME  ========================================================= */
/* =======================================================  TCONTROL  ======================================================== */
/* ===============================================  USB0 TCONTROL PUEN [7..7]  =============================================== */
typedef enum {                                  /*!< USB0_TCONTROL_PUEN                                                        */
  USB0_TCONTROL_PUEN_Disable           = 0,     /*!< Disable : Disable the internal pull-up resistor (device effectively
                                                     detached from the USB network).                                           */
  USB0_TCONTROL_PUEN_Enable            = 1,     /*!< Enable : Enable the internal pull-up resistor when VBUS is present
                                                     (device is attached to the USB network).                                  */
} USB0_TCONTROL_PUEN_Enum;

/* ==============================================  USB0 TCONTROL PHYEN [6..6]  =============================================== */
typedef enum {                                  /*!< USB0_TCONTROL_PHYEN                                                       */
  USB0_TCONTROL_PHYEN_Disable          = 0,     /*!< Disable : Disable the USB physical layer Transceiver (suspend).           */
  USB0_TCONTROL_PHYEN_Enable           = 1,     /*!< Enable : Enable the USB physical layer Transceiver (normal).              */
} USB0_TCONTROL_PHYEN_Enum;

/* ===============================================  USB0 TCONTROL SSEL [5..5]  =============================================== */
typedef enum {                                  /*!< USB0_TCONTROL_SSEL                                                        */
  USB0_TCONTROL_SSEL_0                 = 0,     /*!< 0 : USB operates as a Low Speed device. If enabled, the internal
                                                     pull-up resistor appears on the D- line.                                  */
  USB0_TCONTROL_SSEL_Enable            = 1,     /*!< Enable : USB operates as a Full Speed device. If enabled, the
                                                     internal pull-up resistor appears on the D+ line.                         */
} USB0_TCONTROL_SSEL_Enum;

/* ==============================================  USB0 TCONTROL PHYTST [3..4]  ============================================== */
typedef enum {                                  /*!< USB0_TCONTROL_PHYTST                                                      */
  USB0_TCONTROL_PHYTST_00              = 0,     /*!< 00 : Mode 0: Normal (non-test mode) (D+ = X, D- = X).                     */
  USB0_TCONTROL_PHYTST_01              = 1,     /*!< 01 : Mode 1: Differential 1 Forced (D+ = 1, D- = 0).                      */
  USB0_TCONTROL_PHYTST_10              = 2,     /*!< 10 : Mode 2: Differential 0 Forced (D+ = 0, D- = 1).                      */
  USB0_TCONTROL_PHYTST_11              = 3,     /*!< 11 : Mode 3: Single-Ended 0 Forced (D+ = 0, D- = 0).                      */
} USB0_TCONTROL_PHYTST_Enum;

/* ==============================================  USB0 TCONTROL DFREC [2..2]  =============================================== */
typedef enum {                                  /*!< USB0_TCONTROL_DFREC                                                       */
  USB0_TCONTROL_DFREC_0                = 0,     /*!< 0 : Differential 0 signalling is present on the bus.                      */
  USB0_TCONTROL_DFREC_1                = 1,     /*!< 1 : Differential 1 signalling is present on the bus.                      */
} USB0_TCONTROL_DFREC_Enum;

/* ================================================  USB0 TCONTROL DP [1..1]  ================================================ */
typedef enum {                                  /*!< USB0_TCONTROL_DP                                                          */
  USB0_TCONTROL_DP_0                   = 0,     /*!< 0 : D+ signal currently at logic 0.                                       */
  USB0_TCONTROL_DP_1                   = 1,     /*!< 1 : D+ signal currently at logic 1.                                       */
} USB0_TCONTROL_DP_Enum;

/* ================================================  USB0 TCONTROL DN [0..0]  ================================================ */
typedef enum {                                  /*!< USB0_TCONTROL_DN                                                          */
  USB0_TCONTROL_DN_0                   = 0,     /*!< 0 : D- signal currently at logic 0.                                       */
  USB0_TCONTROL_DN_1                   = 1,     /*!< 1 : D- signal currently at logic 1.                                       */
} USB0_TCONTROL_DN_Enum;

/* ========================================================  CLKSEL  ========================================================= */
/* ===============================================  USB0 CLKSEL RESET [6..6]  ================================================ */
typedef enum {                                  /*!< USB0_CLKSEL_RESET                                                         */
  USB0_CLKSEL_RESET_0                  = 0,     /*!< 0 : Do not reset the USB module.                                          */
  USB0_CLKSEL_RESET_1                  = 1,     /*!< 1 : Reset the USB module.                                                 */
} USB0_CLKSEL_RESET_Enum;

/* ===============================================  USB0 CLKSEL CLKDIV [4..5]  =============================================== */
typedef enum {                                  /*!< USB0_CLKSEL_CLKDIV                                                        */
  USB0_CLKSEL_CLKDIV_00                = 0,     /*!< 00 : The USB module uses the selected input clock divided by
                                                     1.                                                                        */
  USB0_CLKSEL_CLKDIV_01                = 1,     /*!< 01 : The USB module uses the selected input clock divided by
                                                     2.                                                                        */
  USB0_CLKSEL_CLKDIV_10                = 2,     /*!< 10 : The USB module uses the selected input clock divided by
                                                     4.                                                                        */
  USB0_CLKSEL_CLKDIV_11                = 3,     /*!< 11 : The USB module uses the selected input clock divided by
                                                     8.                                                                        */
} USB0_CLKSEL_CLKDIV_Enum;

/* ===============================================  USB0 CLKSEL CLKSEL [0..1]  =============================================== */
typedef enum {                                  /*!< USB0_CLKSEL_CLKSEL                                                        */
  USB0_CLKSEL_CLKSEL_00                = 0,     /*!< 00 : Select the USB Oscillator as the USB clock.                          */
  USB0_CLKSEL_CLKSEL_01                = 1,     /*!< 01 : Select the PLL output as the USB clock.                              */
  USB0_CLKSEL_CLKSEL_10                = 2,     /*!< 10 : Select the External Oscillator output (EXTOSCn) as the
                                                     USB clock.                                                                */
  USB0_CLKSEL_CLKSEL_11                = 3,     /*!< 11 : Reserved.                                                            */
} USB0_CLKSEL_CLKSEL_Enum;

/* ======================================================  OSCCONTROL  ======================================================= */
/* =============================================  USB0 OSCCONTROL OSCEN [7..7]  ============================================== */
typedef enum {                                  /*!< USB0_OSCCONTROL_OSCEN                                                     */
  USB0_OSCCONTROL_OSCEN_Disable        = 0,     /*!< Disable : Disable the USB oscillator.                                     */
  USB0_OSCCONTROL_OSCEN_Enable         = 1,     /*!< Enable : Enable the USB oscillator.                                       */
} USB0_OSCCONTROL_OSCEN_Enum;

/* ============================================  USB0 OSCCONTROL SUSPEND [5..5]  ============================================= */
typedef enum {                                  /*!< USB0_OSCCONTROL_SUSPEND                                                   */
  USB0_OSCCONTROL_SUSPEND_0            = 0,     /*!< 0 : The USB oscillator is not suspended.                                  */
  USB0_OSCCONTROL_SUSPEND_1            = 1,     /*!< 1 : Suspend the USB oscillator.                                           */
} USB0_OSCCONTROL_SUSPEND_Enum;

/* ====================================================  OSCCONTROL_SET  ===================================================== */
/* ====================================================  OSCCONTROL_CLR  ===================================================== */
/* =======================================================  AFADJUST  ======================================================== */
/* ==============================================  USB0 AFADJUST DITHEN [6..6]  ============================================== */
typedef enum {                                  /*!< USB0_AFADJUST_DITHEN                                                      */
  USB0_AFADJUST_DITHEN_Disable         = 0,     /*!< Disable : Disable USB oscillator dithering.                               */
  USB0_AFADJUST_DITHEN_Enable          = 1,     /*!< Enable : Enable USB oscillator dithering.                                 */
} USB0_AFADJUST_DITHEN_Enum;

/* =====================================================  AFADJUST_SET  ====================================================== */
/* =====================================================  AFADJUST_CLR  ====================================================== */
/* ========================================================  FADJUST  ======================================================== */
/* ========================================================  DMAFIFO  ======================================================== */
/* ======================================================  DMACONTROL  ======================================================= */
/* =============================================  USB0 DMACONTROL DBUSYF [6..6]  ============================================= */
typedef enum {                                  /*!< USB0_DMACONTROL_DBUSYF                                                    */
  USB0_DMACONTROL_DBUSYF_0             = 0,     /*!< 0 : The DMA buffer is not busy.                                           */
  USB0_DMACONTROL_DBUSYF_1             = 1,     /*!< 1 : The DMA buffer is busy reading or writing an 8-word packet.           */
} USB0_DMACONTROL_DBUSYF_Enum;

/* =============================================  USB0 DMACONTROL TERRF [5..5]  ============================================== */
typedef enum {                                  /*!< USB0_DMACONTROL_TERRF                                                     */
  USB0_DMACONTROL_TERRF_0              = 0,     /*!< 0 : A timeout error has not occurred.                                     */
  USB0_DMACONTROL_TERRF_1              = 1,     /*!< 1 : A timeout error occurred.                                             */
} USB0_DMACONTROL_TERRF_Enum;

/* =============================================  USB0 DMACONTROL DBGMD [4..4]  ============================================== */
typedef enum {                                  /*!< USB0_DMACONTROL_DBGMD                                                     */
  USB0_DMACONTROL_DBGMD_0              = 0,     /*!< 0 : The USB module will continue to operate while the core is
                                                     halted in debug mode.                                                     */
  USB0_DMACONTROL_DBGMD_1              = 1,     /*!< 1 : A debug breakpoint will prevent the USB DMA buffer from
                                                     transferring data to and from the USB FIFOs when the core
                                                     is halted.                                                                */
} USB0_DMACONTROL_DBGMD_Enum;

/* ======================================================  EP0CONTROL  ======================================================= */
/* ============================================  USB0 EP0CONTROL SUENDIS [7..7]  ============================================= */
typedef enum {                                  /*!< USB0_EP0CONTROL_SUENDIS                                                   */
  USB0_EP0CONTROL_SUENDIS_0            = 0,     /*!< 0 : Setup end has not been serviced.                                      */
  USB0_EP0CONTROL_SUENDIS_1            = 1,     /*!< 1 : Setup end has been serviced.                                          */
} USB0_EP0CONTROL_SUENDIS_Enum;

/* ============================================  USB0 EP0CONTROL OPRDYIS [6..6]  ============================================= */
typedef enum {                                  /*!< USB0_EP0CONTROL_OPRDYIS                                                   */
  USB0_EP0CONTROL_OPRDYIS_0            = 0,     /*!< 0 : The out packet has not been processed.                                */
  USB0_EP0CONTROL_OPRDYIS_1            = 1,     /*!< 1 : The out packet has been received and accepted.                        */
} USB0_EP0CONTROL_OPRDYIS_Enum;

/* =============================================  USB0 EP0CONTROL SDSTL [5..5]  ============================================== */
typedef enum {                                  /*!< USB0_EP0CONTROL_SDSTL                                                     */
  USB0_EP0CONTROL_SDSTL_0              = 0,     /*!< 0 : The STALL handshake has been transmitted or not triggered.            */
  USB0_EP0CONTROL_SDSTL_1              = 1,     /*!< 1 : Initiate a STALL condition.                                           */
} USB0_EP0CONTROL_SDSTL_Enum;

/* =============================================  USB0 EP0CONTROL SUENDI [4..4]  ============================================= */
typedef enum {                                  /*!< USB0_EP0CONTROL_SUENDI                                                    */
  USB0_EP0CONTROL_SUENDI_0             = 0,     /*!< 0 : The current packet is not the last packet of setup.                   */
  USB0_EP0CONTROL_SUENDI_1             = 1,     /*!< 1 : The current packet is the last packet of setup.                       */
} USB0_EP0CONTROL_SUENDI_Enum;

/* ==============================================  USB0 EP0CONTROL DEND [3..3]  ============================================== */
typedef enum {                                  /*!< USB0_EP0CONTROL_DEND                                                      */
  USB0_EP0CONTROL_DEND_0               = 0,     /*!< 0 : The current packet is not the last packet of the transfer.            */
  USB0_EP0CONTROL_DEND_1               = 1,     /*!< 1 : The current packet is the last packet of the transfer.                */
} USB0_EP0CONTROL_DEND_Enum;

/* =============================================  USB0 EP0CONTROL IPRDYI [1..1]  ============================================= */
typedef enum {                                  /*!< USB0_EP0CONTROL_IPRDYI                                                    */
  USB0_EP0CONTROL_IPRDYI_0             = 0,     /*!< 0 : A packet is not ready for transmission to host.                       */
  USB0_EP0CONTROL_IPRDYI_1             = 1,     /*!< 1 : A packet is ready for transmission to host.                           */
} USB0_EP0CONTROL_IPRDYI_Enum;

/* =============================================  USB0 EP0CONTROL OPRDYI [0..0]  ============================================= */
typedef enum {                                  /*!< USB0_EP0CONTROL_OPRDYI                                                    */
  USB0_EP0CONTROL_OPRDYI_0             = 0,     /*!< 0 : A packet is not available.                                            */
  USB0_EP0CONTROL_OPRDYI_1             = 1,     /*!< 1 : A packet is available.                                                */
} USB0_EP0CONTROL_OPRDYI_Enum;

/* =======================================================  EP0COUNT  ======================================================== */
/* ========================================================  EP0FIFO  ======================================================== */
/* =====================================================  EP1_EPMPSIZE  ====================================================== */
/* =====================================================  EP1_EPCONTROL  ===================================================== */
/* ======================================================  EP1_EPCOUNT  ====================================================== */
/* ======================================================  EP1_EPFIFO  ======================================================= */
/* =====================================================  EP2_EPMPSIZE  ====================================================== */
/* =====================================================  EP2_EPCONTROL  ===================================================== */
/* ======================================================  EP2_EPCOUNT  ====================================================== */
/* ======================================================  EP2_EPFIFO  ======================================================= */
/* =====================================================  EP3_EPMPSIZE  ====================================================== */
/* =====================================================  EP3_EPCONTROL  ===================================================== */
/* ======================================================  EP3_EPCOUNT  ====================================================== */
/* ======================================================  EP3_EPFIFO  ======================================================= */
/* =====================================================  EP4_EPMPSIZE  ====================================================== */
/* =====================================================  EP4_EPCONTROL  ===================================================== */
/* ======================================================  EP4_EPCOUNT  ====================================================== */
/* ======================================================  EP4_EPFIFO  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          SARADC0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ============================================  SARADC0 CONFIG FURIEN [30..30]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONFIG_FURIEN                                                     */
  SARADC0_CONFIG_FURIEN_Disable        = 0,     /*!< Disable : Disable the data FIFO underrun interrupt.                       */
  SARADC0_CONFIG_FURIEN_Enable         = 1,     /*!< Enable : Enable the data FIFO underrun interrupt.                         */
} SARADC0_CONFIG_FURIEN_Enum;

/* ============================================  SARADC0 CONFIG FORIEN [29..29]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONFIG_FORIEN                                                     */
  SARADC0_CONFIG_FORIEN_Disable        = 0,     /*!< Disable : Disable the data FIFO overrun interrupt.                        */
  SARADC0_CONFIG_FORIEN_Enable         = 1,     /*!< Enable : Enable the data FIFO overrun interrupt.                          */
} SARADC0_CONFIG_FORIEN_Enum;

/* =============================================  SARADC0 CONFIG SDIEN [28..28]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONFIG_SDIEN                                                      */
  SARADC0_CONFIG_SDIEN_Disable         = 0,     /*!< Disable : Disable the ADC scan complete interrupt.                        */
  SARADC0_CONFIG_SDIEN_Enable          = 1,     /*!< Enable : Enable the ADC scan complete interrupt.                          */
} SARADC0_CONFIG_SDIEN_Enum;

/* ============================================  SARADC0 CONFIG SCCIEN [27..27]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONFIG_SCCIEN                                                     */
  SARADC0_CONFIG_SCCIEN_Disable        = 0,     /*!< Disable : Disable the ADC single data conversion complete interrupt.      */
  SARADC0_CONFIG_SCCIEN_Enable         = 1,     /*!< Enable : Enable the ADC single data conversion complete interrupt.        */
} SARADC0_CONFIG_SCCIEN_Enum;

/* ============================================  SARADC0 CONFIG BCLKSEL [15..15]  ============================================ */
typedef enum {                                  /*!< SARADC0_CONFIG_BCLKSEL                                                    */
  SARADC0_CONFIG_BCLKSEL_0             = 0,     /*!< 0 : Burst mode uses the Low Power Oscillator.                             */
  SARADC0_CONFIG_BCLKSEL_1             = 1,     /*!< 1 : Burst mode uses the APB clock.                                        */
} SARADC0_CONFIG_BCLKSEL_Enum;

/* =============================================  SARADC0 CONFIG DMAEN [14..14]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONFIG_DMAEN                                                      */
  SARADC0_CONFIG_DMAEN_Disable         = 0,     /*!< Disable : Disable the ADC module DMA interface.                           */
  SARADC0_CONFIG_DMAEN_Enable          = 1,     /*!< Enable : Enable the ADC module DMA interface.                             */
} SARADC0_CONFIG_DMAEN_Enum;

/* ============================================  SARADC0 CONFIG SCANMD [12..12]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONFIG_SCANMD                                                     */
  SARADC0_CONFIG_SCANMD_0              = 0,     /*!< 0 : The channel sequencer will cycle through all of the specified
                                                     time slots once.                                                          */
  SARADC0_CONFIG_SCANMD_1              = 1,     /*!< 1 : The channel sequencer will cycle through all of the specified
                                                     time slots in a loop until SCANEN is cleared to 0.                        */
} SARADC0_CONFIG_SCANMD_Enum;

/* ============================================  SARADC0 CONFIG SCANEN [10..10]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONFIG_SCANEN                                                     */
  SARADC0_CONFIG_SCANEN_Disable        = 0,     /*!< Disable : Disable ADC scan mode.                                          */
  SARADC0_CONFIG_SCANEN_Enable         = 1,     /*!< Enable : Enable ADC scan mode. The ADC will scan through the
                                                     defined time slots in sequence on every start of conversion.              */
} SARADC0_CONFIG_SCANEN_Enum;

/* =============================================  SARADC0 CONFIG INTLVEN [9..9]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONFIG_INTLVEN                                                    */
  SARADC0_CONFIG_INTLVEN_Disable       = 0,     /*!< Disable : Disable interleaved mode conversion packing.                    */
  SARADC0_CONFIG_INTLVEN_Enable        = 1,     /*!< Enable : Enable interleaved mode conversion packing.                      */
} SARADC0_CONFIG_INTLVEN_Enum;

/* =============================================  SARADC0 CONFIG SIMCEN [8..8]  ============================================== */
typedef enum {                                  /*!< SARADC0_CONFIG_SIMCEN                                                     */
  SARADC0_CONFIG_SIMCEN_Disable        = 0,     /*!< Disable : Disable simultaneous mode conversion packing.                   */
  SARADC0_CONFIG_SIMCEN_Enable         = 1,     /*!< Enable : Enable simultaneous mode conversion packing.                     */
} SARADC0_CONFIG_SIMCEN_Enum;

/* =============================================  SARADC0 CONFIG PACKMD [6..7]  ============================================== */
typedef enum {                                  /*!< SARADC0_CONFIG_PACKMD                                                     */
  SARADC0_CONFIG_PACKMD_00             = 0,     /*!< 00 : Data is written to the upper half-word and the lower half-word
                                                     is filled with 0's. An SCI interrupt is triggered when
                                                     data is written, if enabled.                                              */
  SARADC0_CONFIG_PACKMD_01             = 1,     /*!< 01 : Data is written to the lower half-word, and the upper half-word
                                                     is filled with 0's. An SCI interrupt is triggered when
                                                     data is written, if enabled.                                              */
  SARADC0_CONFIG_PACKMD_10             = 2,     /*!< 10 : Two data words are packed into the register with the upper
                                                     half-word represent-ing the earlier data, and the lower
                                                     half-word representing the later data. If SIMCEN is set
                                                     to 1, the upper half-word represents data from the master
                                                     ADC and the lower half-word represents data from the slave
                                                     ADC. The ADC write to the lower half-word will trigger
                                                     the SCI interrupt, if enabled.                                            */
  SARADC0_CONFIG_PACKMD_11             = 3,     /*!< 11 : Two data words are packed into the register with the lower
                                                     half-word represent-ing the earlier data, and the upper
                                                     half-word representing the later data. If SIMCEN is set
                                                     to 1, the lower half-word represents data from the master
                                                     ADC and the upper half-word represents data from the slave
                                                     ADC. The ADC write to the upper half-word will trigger
                                                     the SCI interrupt, if enabled.                                            */
} SARADC0_CONFIG_PACKMD_Enum;

/* ==============================================  SARADC0 CONFIG SSGEN [5..5]  ============================================== */
typedef enum {                                  /*!< SARADC0_CONFIG_SSGEN                                                      */
  SARADC0_CONFIG_SSGEN_Disable         = 0,     /*!< Disable : Disables conversion trigger generation from the SSG
                                                     module phase output.                                                      */
  SARADC0_CONFIG_SSGEN_Enable          = 1,     /*!< Enable : Enables conversion trigger generation from the SSG
                                                     module phase output.                                                      */
} SARADC0_CONFIG_SSGEN_Enum;

/* ==============================================  SARADC0 CONFIG SPEN [4..4]  =============================================== */
typedef enum {                                  /*!< SARADC0_CONFIG_SPEN                                                       */
  SARADC0_CONFIG_SPEN_Disable          = 0,     /*!< Disable : Disable Phase Select. The ADC will always sample on
                                                     the start-of-conversion trigger selected by the SCSEL field.              */
  SARADC0_CONFIG_SPEN_Enable           = 1,     /*!< Enable : Enable Phase Select. The ADC will sample according
                                                     to the phase selected by the SPSEL field.                                 */
} SARADC0_CONFIG_SPEN_Enum;

/* ==============================================  SARADC0 CONFIG SPSEL [0..3]  ============================================== */
typedef enum {                                  /*!< SARADC0_CONFIG_SPSEL                                                      */
  SARADC0_CONFIG_SPSEL_0000            = 0,     /*!< 0000 : The ADC samples at SSG phase 0.                                    */
  SARADC0_CONFIG_SPSEL_0001            = 1,     /*!< 0001 : The ADC samples at SSG phase 1.                                    */
  SARADC0_CONFIG_SPSEL_0010            = 2,     /*!< 0010 : The ADC samples at SSG phase 2.                                    */
  SARADC0_CONFIG_SPSEL_0011            = 3,     /*!< 0011 : The ADC samples at SSG phase 3.                                    */
  SARADC0_CONFIG_SPSEL_0100            = 4,     /*!< 0100 : The ADC samples at SSG phase 4.                                    */
  SARADC0_CONFIG_SPSEL_0101            = 5,     /*!< 0101 : The ADC samples at SSG phase 5.                                    */
  SARADC0_CONFIG_SPSEL_0110            = 6,     /*!< 0110 : The ADC samples at SSG phase 6.                                    */
  SARADC0_CONFIG_SPSEL_0111            = 7,     /*!< 0111 : The ADC samples at SSG phase 7.                                    */
  SARADC0_CONFIG_SPSEL_1000            = 8,     /*!< 1000 : The ADC samples at SSG phase 8.                                    */
  SARADC0_CONFIG_SPSEL_1001            = 9,     /*!< 1001 : The ADC samples at SSG phase 9.                                    */
  SARADC0_CONFIG_SPSEL_1010            = 10,    /*!< 1010 : The ADC samples at SSG phase 10.                                   */
  SARADC0_CONFIG_SPSEL_1011            = 11,    /*!< 1011 : The ADC samples at SSG phase 11.                                   */
  SARADC0_CONFIG_SPSEL_1100            = 12,    /*!< 1100 : The ADC samples at SSG phase 12.                                   */
  SARADC0_CONFIG_SPSEL_1101            = 13,    /*!< 1101 : The ADC samples at SSG phase 13.                                   */
  SARADC0_CONFIG_SPSEL_1110            = 14,    /*!< 1110 : The ADC samples at SSG phase 14.                                   */
  SARADC0_CONFIG_SPSEL_1111            = 15,    /*!< 1111 : The ADC samples at SSG phase 15.                                   */
} SARADC0_CONFIG_SPSEL_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
/* ===========================================  SARADC0 CONTROL VREFSEL [30..31]  ============================================ */
typedef enum {                                  /*!< SARADC0_CONTROL_VREFSEL                                                   */
  SARADC0_CONTROL_VREFSEL_00           = 0,     /*!< 00 : Select the internal, dedicated SARADC voltage reference
                                                     as the ADC refer-ence.                                                    */
  SARADC0_CONTROL_VREFSEL_01           = 1,     /*!< 01 : Select the VDD pin as the ADC reference.                             */
  SARADC0_CONTROL_VREFSEL_10           = 2,     /*!< 10 : Select the output of the internal LDO regulator (~1.8 V)
                                                     as the ADC reference.                                                     */
  SARADC0_CONTROL_VREFSEL_11           = 3,     /*!< 11 : Select the VREF pin as the ADC reference. This option is
                                                     used for either an external VREF or the on-chip VREF driving
                                                     out to the VREF pin.                                                      */
} SARADC0_CONTROL_VREFSEL_Enum;

/* ===========================================  SARADC0 CONTROL MREFLPEN [27..27]  =========================================== */
typedef enum {                                  /*!< SARADC0_CONTROL_MREFLPEN                                                  */
  SARADC0_CONTROL_MREFLPEN_Disable     = 0,     /*!< Disable : Disable low power mode.                                         */
  SARADC0_CONTROL_MREFLPEN_Enable      = 1,     /*!< Enable : Enable low power mode (SAR clock < 4 MHz).                       */
} SARADC0_CONTROL_MREFLPEN_Enum;

/* ============================================  SARADC0 CONTROL LPMDEN [26..26]  ============================================ */
typedef enum {                                  /*!< SARADC0_CONTROL_LPMDEN                                                    */
  SARADC0_CONTROL_LPMDEN_Disable       = 0,     /*!< Disable : Disable low power mode.                                         */
  SARADC0_CONTROL_LPMDEN_Enable        = 1,     /*!< Enable : Enable low power mode (requires extended tracking time).         */
} SARADC0_CONTROL_LPMDEN_Enum;

/* ===========================================  SARADC0 CONTROL BIASSEL [24..25]  ============================================ */
typedef enum {                                  /*!< SARADC0_CONTROL_BIASSEL                                                   */
  SARADC0_CONTROL_BIASSEL_00           = 0,     /*!< 00 : Select bias current mode 0. Recommended to use modes 1,
                                                     2, or 3.                                                                  */
  SARADC0_CONTROL_BIASSEL_01           = 1,     /*!< 01 : Select bias current mode 1 (SARCLK = 16 MHz).                        */
  SARADC0_CONTROL_BIASSEL_10           = 2,     /*!< 10 : Select bias current mode 2.                                          */
  SARADC0_CONTROL_BIASSEL_11           = 3,     /*!< 11 : Select bias current mode 3 (SARCLK = 4 MHz).                         */
} SARADC0_CONTROL_BIASSEL_Enum;

/* ============================================  SARADC0 CONTROL TRKMD [22..22]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONTROL_TRKMD                                                     */
  SARADC0_CONTROL_TRKMD_0              = 0,     /*!< 0 : Normal Tracking Mode: When the ADC is enabled, a conversion
                                                     begins immedi-ately following the start-of-conversion signal.             */
  SARADC0_CONTROL_TRKMD_Enable         = 1,     /*!< Enable : Delayed Tracking Mode: When the ADC is enabled, a conversion
                                                     begins 3 SAR clock cycles following the start-of-conversion
                                                     signal. The ADC is allowed to track during this time.                     */
} SARADC0_CONTROL_TRKMD_Enum;

/* ============================================  SARADC0 CONTROL ACCMD [21..21]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONTROL_ACCMD                                                     */
  SARADC0_CONTROL_ACCMD_0              = 0,     /*!< 0 : Conversions will be accumulated for the specified number
                                                     of cycles in burst mode according to the channel configuration.           */
  SARADC0_CONTROL_ACCMD_1              = 1,     /*!< 1 : Conversions will not be accumulated in burst mode.                    */
} SARADC0_CONTROL_ACCMD_Enum;

/* ============================================  SARADC0 CONTROL VCMEN [19..19]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONTROL_VCMEN                                                     */
  SARADC0_CONTROL_VCMEN_Disable        = 0,     /*!< Disable : Disable the common mode buffer.                                 */
  SARADC0_CONTROL_VCMEN_Enable         = 1,     /*!< Enable : Enable the common mode buffer.                                   */
} SARADC0_CONTROL_VCMEN_Enum;

/* ==========================================  SARADC0 CONTROL AD12BSSEL [18..18]  =========================================== */
typedef enum {                                  /*!< SARADC0_CONTROL_AD12BSSEL                                                 */
  SARADC0_CONTROL_AD12BSSEL_0          = 0,     /*!< 0 : The ADC re-samples the input before each of the four conversions.     */
  SARADC0_CONTROL_AD12BSSEL_1          = 1,     /*!< 1 : The ADC samples once before the first conversion and converts
                                                     four times.                                                               */
} SARADC0_CONTROL_AD12BSSEL_Enum;

/* ============================================  SARADC0 CONTROL ADCEN [17..17]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONTROL_ADCEN                                                     */
  SARADC0_CONTROL_ADCEN_Disable        = 0,     /*!< Disable : Disable the ADC (low-power shutdown).                           */
  SARADC0_CONTROL_ADCEN_Enable         = 1,     /*!< Enable : Enable the ADC (active and ready for data conversions).          */
} SARADC0_CONTROL_ADCEN_Enum;

/* =============================================  SARADC0 CONTROL SCSEL [8..11]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONTROL_SCSEL                                                     */
  SARADC0_CONTROL_SCSEL_0000           = 0,     /*!< 0000 : An ADC conversion triggers from the ADCnT0 trigger source.         */
  SARADC0_CONTROL_SCSEL_0001           = 1,     /*!< 0001 : An ADC conversion triggers from the ADCnT1 trigger source.         */
  SARADC0_CONTROL_SCSEL_0010           = 2,     /*!< 0010 : An ADC conversion triggers from the ADCnT2 trigger source.         */
  SARADC0_CONTROL_SCSEL_0011           = 3,     /*!< 0011 : An ADC conversion triggers from the ADCnT3 trigger source.         */
  SARADC0_CONTROL_SCSEL_0100           = 4,     /*!< 0100 : An ADC conversion triggers from the ADCnT4 trigger source.         */
  SARADC0_CONTROL_SCSEL_0101           = 5,     /*!< 0101 : An ADC conversion triggers from the ADCnT5 trigger source.         */
  SARADC0_CONTROL_SCSEL_0110           = 6,     /*!< 0110 : An ADC conversion triggers from the ADCnT6 trigger source.         */
  SARADC0_CONTROL_SCSEL_0111           = 7,     /*!< 0111 : An ADC conversion triggers from the ADCnT7 trigger source.         */
  SARADC0_CONTROL_SCSEL_1000           = 8,     /*!< 1000 : An ADC conversion triggers from the ADCnT8 trigger source.         */
  SARADC0_CONTROL_SCSEL_1001           = 9,     /*!< 1001 : An ADC conversion triggers from the ADCnT9 trigger source.         */
  SARADC0_CONTROL_SCSEL_1010           = 10,    /*!< 1010 : An ADC conversion triggers from the ADCnT10 trigger source.        */
  SARADC0_CONTROL_SCSEL_1011           = 11,    /*!< 1011 : An ADC conversion triggers from the ADCnT11 trigger source.        */
  SARADC0_CONTROL_SCSEL_1100           = 12,    /*!< 1100 : An ADC conversion triggers from the ADCnT12 trigger source.        */
  SARADC0_CONTROL_SCSEL_1101           = 13,    /*!< 1101 : An ADC conversion triggers from the ADCnT13 trigger source.        */
  SARADC0_CONTROL_SCSEL_1110           = 14,    /*!< 1110 : An ADC conversion triggers from the ADCnT14 trigger source.        */
  SARADC0_CONTROL_SCSEL_1111           = 15,    /*!< 1111 : An ADC conversion triggers from the ADCnT15 trigger source.        */
} SARADC0_CONTROL_SCSEL_Enum;

/* ============================================  SARADC0 CONTROL CLKESEL [1..1]  ============================================= */
typedef enum {                                  /*!< SARADC0_CONTROL_CLKESEL                                                   */
  SARADC0_CONTROL_CLKESEL_0            = 0,     /*!< 0 : Select the rising edge of the APB clock.                              */
  SARADC0_CONTROL_CLKESEL_1            = 1,     /*!< 1 : Select the falling edge of the APB clock.                             */
} SARADC0_CONTROL_CLKESEL_Enum;

/* ===========================================  SARADC0 CONTROL REFGNDSEL [0..0]  ============================================ */
typedef enum {                                  /*!< SARADC0_CONTROL_REFGNDSEL                                                 */
  SARADC0_CONTROL_REFGNDSEL_0          = 0,     /*!< 0 : The internal device ground is used as the ground reference
                                                     for ADC conversions.                                                      */
  SARADC0_CONTROL_REFGNDSEL_1          = 1,     /*!< 1 : The VREFGND pin is used as the ground reference for ADC
                                                     conversions.                                                              */
} SARADC0_CONTROL_REFGNDSEL_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  SQ7654  ========================================================= */
/* ============================================  SARADC0 SQ7654 TS7CHR [24..25]  ============================================= */
typedef enum {                                  /*!< SARADC0_SQ7654_TS7CHR                                                     */
  SARADC0_SQ7654_TS7CHR_00             = 0,     /*!< 00 : Select conversion characteristic 0 for time slot 7.                  */
  SARADC0_SQ7654_TS7CHR_01             = 1,     /*!< 01 : Select conversion characteristic 1 for time slot 7.                  */
  SARADC0_SQ7654_TS7CHR_10             = 2,     /*!< 10 : Select conversion characteristic 2 for time slot 7.                  */
  SARADC0_SQ7654_TS7CHR_11             = 3,     /*!< 11 : Select conversion characteristic 3 for time slot 7.                  */
} SARADC0_SQ7654_TS7CHR_Enum;

/* ============================================  SARADC0 SQ7654 TS6CHR [16..17]  ============================================= */
typedef enum {                                  /*!< SARADC0_SQ7654_TS6CHR                                                     */
  SARADC0_SQ7654_TS6CHR_00             = 0,     /*!< 00 : Select conversion characteristic 0 for time slot 6.                  */
  SARADC0_SQ7654_TS6CHR_01             = 1,     /*!< 01 : Select conversion characteristic 1 for time slot 6.                  */
  SARADC0_SQ7654_TS6CHR_10             = 2,     /*!< 10 : Select conversion characteristic 2 for time slot 6.                  */
  SARADC0_SQ7654_TS6CHR_11             = 3,     /*!< 11 : Select conversion characteristic 3 for time slot 6.                  */
} SARADC0_SQ7654_TS6CHR_Enum;

/* =============================================  SARADC0 SQ7654 TS5CHR [8..9]  ============================================== */
typedef enum {                                  /*!< SARADC0_SQ7654_TS5CHR                                                     */
  SARADC0_SQ7654_TS5CHR_00             = 0,     /*!< 00 : Select conversion characteristic 0 for time slot 5.                  */
  SARADC0_SQ7654_TS5CHR_01             = 1,     /*!< 01 : Select conversion characteristic 1 for time slot 5.                  */
  SARADC0_SQ7654_TS5CHR_10             = 2,     /*!< 10 : Select conversion characteristic 2 for time slot 5.                  */
  SARADC0_SQ7654_TS5CHR_11             = 3,     /*!< 11 : Select conversion characteristic 3 for time slot 5.                  */
} SARADC0_SQ7654_TS5CHR_Enum;

/* =============================================  SARADC0 SQ7654 TS4CHR [0..1]  ============================================== */
typedef enum {                                  /*!< SARADC0_SQ7654_TS4CHR                                                     */
  SARADC0_SQ7654_TS4CHR_00             = 0,     /*!< 00 : Select conversion characteristic 0 for time slot 4.                  */
  SARADC0_SQ7654_TS4CHR_01             = 1,     /*!< 01 : Select conversion characteristic 1 for time slot 4.                  */
  SARADC0_SQ7654_TS4CHR_10             = 2,     /*!< 10 : Select conversion characteristic 2 for time slot 4.                  */
  SARADC0_SQ7654_TS4CHR_11             = 3,     /*!< 11 : Select conversion characteristic 3 for time slot 4.                  */
} SARADC0_SQ7654_TS4CHR_Enum;

/* ========================================================  SQ3210  ========================================================= */
/* ============================================  SARADC0 SQ3210 TS3CHR [24..25]  ============================================= */
typedef enum {                                  /*!< SARADC0_SQ3210_TS3CHR                                                     */
  SARADC0_SQ3210_TS3CHR_00             = 0,     /*!< 00 : Select conversion characteristic 0 for time slot 3.                  */
  SARADC0_SQ3210_TS3CHR_01             = 1,     /*!< 01 : Select conversion characteristic 1 for time slot 3.                  */
  SARADC0_SQ3210_TS3CHR_10             = 2,     /*!< 10 : Select conversion characteristic 2 for time slot 3.                  */
  SARADC0_SQ3210_TS3CHR_11             = 3,     /*!< 11 : Select conversion characteristic 3 for time slot 3.                  */
} SARADC0_SQ3210_TS3CHR_Enum;

/* ============================================  SARADC0 SQ3210 TS2CHR [16..17]  ============================================= */
typedef enum {                                  /*!< SARADC0_SQ3210_TS2CHR                                                     */
  SARADC0_SQ3210_TS2CHR_00             = 0,     /*!< 00 : Select conversion characteristic 0 for time slot 2.                  */
  SARADC0_SQ3210_TS2CHR_01             = 1,     /*!< 01 : Select conversion characteristic 1 for time slot 2.                  */
  SARADC0_SQ3210_TS2CHR_10             = 2,     /*!< 10 : Select conversion characteristic 2 for time slot 2.                  */
  SARADC0_SQ3210_TS2CHR_11             = 3,     /*!< 11 : Select conversion characteristic 3 for time slot 2.                  */
} SARADC0_SQ3210_TS2CHR_Enum;

/* =============================================  SARADC0 SQ3210 TS1CHR [8..9]  ============================================== */
typedef enum {                                  /*!< SARADC0_SQ3210_TS1CHR                                                     */
  SARADC0_SQ3210_TS1CHR_00             = 0,     /*!< 00 : Select conversion characteristic 0 for time slot 1.                  */
  SARADC0_SQ3210_TS1CHR_01             = 1,     /*!< 01 : Select conversion characteristic 1 for time slot 1.                  */
  SARADC0_SQ3210_TS1CHR_10             = 2,     /*!< 10 : Select conversion characteristic 2 for time slot 1.                  */
  SARADC0_SQ3210_TS1CHR_11             = 3,     /*!< 11 : Select conversion characteristic 3 for time slot 1.                  */
} SARADC0_SQ3210_TS1CHR_Enum;

/* =============================================  SARADC0 SQ3210 TS0CHR [0..1]  ============================================== */
typedef enum {                                  /*!< SARADC0_SQ3210_TS0CHR                                                     */
  SARADC0_SQ3210_TS0CHR_00             = 0,     /*!< 00 : Select conversion characteristic 0 for time slot 0.                  */
  SARADC0_SQ3210_TS0CHR_01             = 1,     /*!< 01 : Select conversion characteristic 1 for time slot 0.                  */
  SARADC0_SQ3210_TS0CHR_10             = 2,     /*!< 10 : Select conversion characteristic 2 for time slot 0.                  */
  SARADC0_SQ3210_TS0CHR_11             = 3,     /*!< 11 : Select conversion characteristic 3 for time slot 0.                  */
} SARADC0_SQ3210_TS0CHR_Enum;

/* ========================================================  CHAR32  ========================================================= */
/* ===========================================  SARADC0 CHAR32 CHR3WCIEN [24..24]  =========================================== */
typedef enum {                                  /*!< SARADC0_CHAR32_CHR3WCIEN                                                  */
  SARADC0_CHAR32_CHR3WCIEN_Disable     = 0,     /*!< Disable : Disable window comparison interrupts.                           */
  SARADC0_CHAR32_CHR3WCIEN_Enable      = 1,     /*!< Enable : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC0_CHAR32_CHR3WCIEN_Enum;

/* ===========================================  SARADC0 CHAR32 CHR3RSEL [23..23]  ============================================ */
typedef enum {                                  /*!< SARADC0_CHAR32_CHR3RSEL                                                   */
  SARADC0_CHAR32_CHR3RSEL_0            = 0,     /*!< 0 : Select 10-bit Mode.                                                   */
  SARADC0_CHAR32_CHR3RSEL_Enable       = 1,     /*!< Enable : Select 12-bit Mode (burst mode must be enabled).                 */
} SARADC0_CHAR32_CHR3RSEL_Enum;

/* ============================================  SARADC0 CHAR32 CHR3RPT [17..19]  ============================================ */
typedef enum {                                  /*!< SARADC0_CHAR32_CHR3RPT                                                    */
  SARADC0_CHAR32_CHR3RPT_000           = 0,     /*!< 000 : Accumulate one sample.                                              */
  SARADC0_CHAR32_CHR3RPT_001           = 1,     /*!< 001 : Accumulate four samples.                                            */
  SARADC0_CHAR32_CHR3RPT_010           = 2,     /*!< 010 : Accumulate eight samples.                                           */
  SARADC0_CHAR32_CHR3RPT_011           = 3,     /*!< 011 : Accumulate sixteen samples.                                         */
  SARADC0_CHAR32_CHR3RPT_100           = 4,     /*!< 100 : Accumulate thirty-two samples (10-bit mode only).                   */
  SARADC0_CHAR32_CHR3RPT_101           = 5,     /*!< 101 : Accumulate sixty-four samples (10-bit mode only).                   */
  SARADC0_CHAR32_CHR3RPT_110           = 6,     /*!< 110 : Reserved.                                                           */
} SARADC0_CHAR32_CHR3RPT_Enum;

/* ============================================  SARADC0 CHAR32 CHR3GN [16..16]  ============================================= */
typedef enum {                                  /*!< SARADC0_CHAR32_CHR3GN                                                     */
  SARADC0_CHAR32_CHR3GN_0              = 0,     /*!< 0 : The on-chip PGA gain is 1.                                            */
  SARADC0_CHAR32_CHR3GN_1              = 1,     /*!< 1 : The on-chip PGA gain is 0.5.                                          */
} SARADC0_CHAR32_CHR3GN_Enum;

/* ============================================  SARADC0 CHAR32 CHR2WCIEN [8..8]  ============================================ */
typedef enum {                                  /*!< SARADC0_CHAR32_CHR2WCIEN                                                  */
  SARADC0_CHAR32_CHR2WCIEN_Disable     = 0,     /*!< Disable : Disable window comparison interrupts.                           */
  SARADC0_CHAR32_CHR2WCIEN_Enable      = 1,     /*!< Enable : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC0_CHAR32_CHR2WCIEN_Enum;

/* ============================================  SARADC0 CHAR32 CHR2RSEL [7..7]  ============================================= */
typedef enum {                                  /*!< SARADC0_CHAR32_CHR2RSEL                                                   */
  SARADC0_CHAR32_CHR2RSEL_0            = 0,     /*!< 0 : Select 10-bit Mode.                                                   */
  SARADC0_CHAR32_CHR2RSEL_Enable       = 1,     /*!< Enable : Select 12-bit Mode (burst mode must be enabled).                 */
} SARADC0_CHAR32_CHR2RSEL_Enum;

/* =============================================  SARADC0 CHAR32 CHR2RPT [1..3]  ============================================= */
typedef enum {                                  /*!< SARADC0_CHAR32_CHR2RPT                                                    */
  SARADC0_CHAR32_CHR2RPT_000           = 0,     /*!< 000 : Accumulate one sample.                                              */
  SARADC0_CHAR32_CHR2RPT_001           = 1,     /*!< 001 : Accumulate four samples.                                            */
  SARADC0_CHAR32_CHR2RPT_010           = 2,     /*!< 010 : Accumulate eight samples.                                           */
  SARADC0_CHAR32_CHR2RPT_011           = 3,     /*!< 011 : Accumulate sixteen samples.                                         */
  SARADC0_CHAR32_CHR2RPT_100           = 4,     /*!< 100 : Accumulate thirty-two samples (10-bit mode only).                   */
  SARADC0_CHAR32_CHR2RPT_101           = 5,     /*!< 101 : Accumulate sixty-four samples (10-bit mode only).                   */
  SARADC0_CHAR32_CHR2RPT_110           = 6,     /*!< 110 : Reserved.                                                           */
} SARADC0_CHAR32_CHR2RPT_Enum;

/* =============================================  SARADC0 CHAR32 CHR2GN [0..0]  ============================================== */
typedef enum {                                  /*!< SARADC0_CHAR32_CHR2GN                                                     */
  SARADC0_CHAR32_CHR2GN_0              = 0,     /*!< 0 : The on-chip PGA gain is 1.                                            */
  SARADC0_CHAR32_CHR2GN_1              = 1,     /*!< 1 : The on-chip PGA gain is 0.5.                                          */
} SARADC0_CHAR32_CHR2GN_Enum;

/* ======================================================  CHAR32_SET  ======================================================= */
/* ======================================================  CHAR32_CLR  ======================================================= */
/* ========================================================  CHAR10  ========================================================= */
/* ===========================================  SARADC0 CHAR10 CHR1WCIEN [24..24]  =========================================== */
typedef enum {                                  /*!< SARADC0_CHAR10_CHR1WCIEN                                                  */
  SARADC0_CHAR10_CHR1WCIEN_Disable     = 0,     /*!< Disable : Disable window comparison interrupts.                           */
  SARADC0_CHAR10_CHR1WCIEN_Enable      = 1,     /*!< Enable : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC0_CHAR10_CHR1WCIEN_Enum;

/* ===========================================  SARADC0 CHAR10 CHR1RSEL [23..23]  ============================================ */
typedef enum {                                  /*!< SARADC0_CHAR10_CHR1RSEL                                                   */
  SARADC0_CHAR10_CHR1RSEL_0            = 0,     /*!< 0 : Select 10-bit Mode.                                                   */
  SARADC0_CHAR10_CHR1RSEL_Enable       = 1,     /*!< Enable : Select 12-bit Mode (burst mode must be enabled).                 */
} SARADC0_CHAR10_CHR1RSEL_Enum;

/* ============================================  SARADC0 CHAR10 CHR1RPT [17..19]  ============================================ */
typedef enum {                                  /*!< SARADC0_CHAR10_CHR1RPT                                                    */
  SARADC0_CHAR10_CHR1RPT_000           = 0,     /*!< 000 : Accumulate one sample.                                              */
  SARADC0_CHAR10_CHR1RPT_001           = 1,     /*!< 001 : Accumulate four samples.                                            */
  SARADC0_CHAR10_CHR1RPT_010           = 2,     /*!< 010 : Accumulate eight samples.                                           */
  SARADC0_CHAR10_CHR1RPT_011           = 3,     /*!< 011 : Accumulate sixteen samples.                                         */
  SARADC0_CHAR10_CHR1RPT_100           = 4,     /*!< 100 : Accumulate thirty-two samples (10-bit mode only).                   */
  SARADC0_CHAR10_CHR1RPT_101           = 5,     /*!< 101 : Accumulate sixty-four samples (10-bit mode only).                   */
  SARADC0_CHAR10_CHR1RPT_110           = 6,     /*!< 110 : Reserved.                                                           */
} SARADC0_CHAR10_CHR1RPT_Enum;

/* ============================================  SARADC0 CHAR10 CHR1GN [16..16]  ============================================= */
typedef enum {                                  /*!< SARADC0_CHAR10_CHR1GN                                                     */
  SARADC0_CHAR10_CHR1GN_0              = 0,     /*!< 0 : The on-chip PGA gain is 1.                                            */
  SARADC0_CHAR10_CHR1GN_1              = 1,     /*!< 1 : The on-chip PGA gain is 0.5.                                          */
} SARADC0_CHAR10_CHR1GN_Enum;

/* ============================================  SARADC0 CHAR10 CHR0WCIEN [8..8]  ============================================ */
typedef enum {                                  /*!< SARADC0_CHAR10_CHR0WCIEN                                                  */
  SARADC0_CHAR10_CHR0WCIEN_Disable     = 0,     /*!< Disable : Disable window comparison interrupts.                           */
  SARADC0_CHAR10_CHR0WCIEN_Enable      = 1,     /*!< Enable : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC0_CHAR10_CHR0WCIEN_Enum;

/* ============================================  SARADC0 CHAR10 CHR0RSEL [7..7]  ============================================= */
typedef enum {                                  /*!< SARADC0_CHAR10_CHR0RSEL                                                   */
  SARADC0_CHAR10_CHR0RSEL_0            = 0,     /*!< 0 : Select 10-bit Mode.                                                   */
  SARADC0_CHAR10_CHR0RSEL_Enable       = 1,     /*!< Enable : Select 12-bit Mode (burst mode must be enabled).                 */
} SARADC0_CHAR10_CHR0RSEL_Enum;

/* =============================================  SARADC0 CHAR10 CHR0RPT [1..3]  ============================================= */
typedef enum {                                  /*!< SARADC0_CHAR10_CHR0RPT                                                    */
  SARADC0_CHAR10_CHR0RPT_000           = 0,     /*!< 000 : Accumulate one sample.                                              */
  SARADC0_CHAR10_CHR0RPT_001           = 1,     /*!< 001 : Accumulate four samples.                                            */
  SARADC0_CHAR10_CHR0RPT_010           = 2,     /*!< 010 : Accumulate eight samples.                                           */
  SARADC0_CHAR10_CHR0RPT_011           = 3,     /*!< 011 : Accumulate sixteen samples.                                         */
  SARADC0_CHAR10_CHR0RPT_100           = 4,     /*!< 100 : Accumulate thirty-two samples (10-bit mode only).                   */
  SARADC0_CHAR10_CHR0RPT_101           = 5,     /*!< 101 : Accumulate sixty-four samples (10-bit mode only).                   */
  SARADC0_CHAR10_CHR0RPT_110           = 6,     /*!< 110 : Reserved.                                                           */
} SARADC0_CHAR10_CHR0RPT_Enum;

/* =============================================  SARADC0 CHAR10 CHR0GN [0..0]  ============================================== */
typedef enum {                                  /*!< SARADC0_CHAR10_CHR0GN                                                     */
  SARADC0_CHAR10_CHR0GN_0              = 0,     /*!< 0 : The on-chip PGA gain is 1.                                            */
  SARADC0_CHAR10_CHR0GN_1              = 1,     /*!< 1 : The on-chip PGA gain is 0.5.                                          */
} SARADC0_CHAR10_CHR0GN_Enum;

/* ======================================================  CHAR10_SET  ======================================================= */
/* ======================================================  CHAR10_CLR  ======================================================= */
/* =========================================================  DATA  ========================================================== */
/* =======================================================  WCLIMITS  ======================================================== */
/* ==========================================================  ACC  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ======================================================  FIFOSTATUS  ======================================================= */
/* ============================================  SARADC0 FIFOSTATUS DRDYF [5..5]  ============================================ */
typedef enum {                                  /*!< SARADC0_FIFOSTATUS_DRDYF                                                  */
  SARADC0_FIFOSTATUS_DRDYF_0           = 0,     /*!< 0 : New data is not produced yet.                                         */
  SARADC0_FIFOSTATUS_DRDYF_1           = 1,     /*!< 1 : New data is ready.                                                    */
} SARADC0_FIFOSTATUS_DRDYF_Enum;

/* ============================================  SARADC0 FIFOSTATUS DPSTS [4..4]  ============================================ */
typedef enum {                                  /*!< SARADC0_FIFOSTATUS_DPSTS                                                  */
  SARADC0_FIFOSTATUS_DPSTS_0           = 0,     /*!< 0 : The next ADC conversion will be written to the lower half-word.       */
  SARADC0_FIFOSTATUS_DPSTS_1           = 1,     /*!< 1 : The next ADC conversion will be written to the upper half-word.       */
} SARADC0_FIFOSTATUS_DPSTS_Enum;



/* =========================================================================================================================== */
/* ================                                           SSG0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  SSG0 CONFIG PUGFREN [14..14]  ============================================== */
typedef enum {                                  /*!< SSG0_CONFIG_PUGFREN                                                       */
  SSG0_CONFIG_PUGFREN_0                = 0,     /*!< 0 : The COUNT field determines the number of pulses generated
                                                     by the Pulse Gen-erator.                                                  */
  SSG0_CONFIG_PUGFREN_1                = 1,     /*!< 1 : The Pulse Generator always generates pulses regardless of
                                                     COUNT unless all outputs are disabled (EX0EN, EX1EN, EX2EN,
                                                     and EX3EN are all 0).                                                     */
} SSG0_CONFIG_PUGFREN_Enum;

/* =============================================  SSG0 CONFIG PHGFREN [13..13]  ============================================== */
typedef enum {                                  /*!< SSG0_CONFIG_PHGFREN                                                       */
  SSG0_CONFIG_PHGFREN_0                = 0,     /*!< 0 : The Phase Generator runs only when pulse generation occurs.           */
  SSG0_CONFIG_PHGFREN_Enable           = 1,     /*!< Enable : The Phase Generator runs when an ADC is enabled, regardless
                                                     of the Pulse Generator settings.                                          */
} SSG0_CONFIG_PHGFREN_Enum;

/* ===============================================  SSG0 CONFIG SSEL [12..12]  =============================================== */
typedef enum {                                  /*!< SSG0_CONFIG_SSEL                                                          */
  SSG0_CONFIG_SSEL_0                   = 0,     /*!< 0 : The SSG module runs at normal speed, where each pulse and
                                                     phase cycle con-sists of 16 ADC clocks.                                   */
  SSG0_CONFIG_SSEL_1                   = 1,     /*!< 1 : The SSG module runs at double speed, where each pulse and
                                                     phase cycle con-sists of 8 ADC clocks.                                    */
} SSG0_CONFIG_SSEL_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  SSG0 CONTROL STATUS [8..8]  =============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_STATUS                                                       */
  SSG0_CONTROL_STATUS_0                = 0,     /*!< 0 : The SSG module is idle and the Pulse Generator is not operating.      */
  SSG0_CONTROL_STATUS_1                = 1,     /*!< 1 : The SSG module is active and the Pulse Generator is counting.         */
} SSG0_CONTROL_STATUS_Enum;

/* ===============================================  SSG0 CONTROL EX3EN [7..7]  =============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_EX3EN                                                        */
  SSG0_CONTROL_EX3EN_Disable           = 0,     /*!< Disable : Disable the EX3 Pulse Generator output.                         */
  SSG0_CONTROL_EX3EN_Enable            = 1,     /*!< Enable : Enable the EX3 Pulse Generator output.                           */
} SSG0_CONTROL_EX3EN_Enum;

/* ===============================================  SSG0 CONTROL EX2EN [6..6]  =============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_EX2EN                                                        */
  SSG0_CONTROL_EX2EN_Disable           = 0,     /*!< Disable : Disable the EX2 Pulse Generator output.                         */
  SSG0_CONTROL_EX2EN_Enable            = 1,     /*!< Enable : Enable the EX2 Pulse Generator output.                           */
} SSG0_CONTROL_EX2EN_Enum;

/* ===============================================  SSG0 CONTROL EX1EN [5..5]  =============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_EX1EN                                                        */
  SSG0_CONTROL_EX1EN_Disable           = 0,     /*!< Disable : Disable the EX1 Pulse Generator output.                         */
  SSG0_CONTROL_EX1EN_Enable            = 1,     /*!< Enable : Enable the EX1 Pulse Generator output.                           */
} SSG0_CONTROL_EX1EN_Enum;

/* ===============================================  SSG0 CONTROL EX0EN [4..4]  =============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_EX0EN                                                        */
  SSG0_CONTROL_EX0EN_Disable           = 0,     /*!< Disable : Disable the EX0 Pulse Generator output.                         */
  SSG0_CONTROL_EX0EN_Enable            = 1,     /*!< Enable : Enable the EX0 Pulse Generator output.                           */
} SSG0_CONTROL_EX0EN_Enum;

/* =============================================  SSG0 CONTROL EX3INVEN [3..3]  ============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_EX3INVEN                                                     */
  SSG0_CONTROL_EX3INVEN_0              = 0,     /*!< 0 : Do not invert the Pulse Generator output on EX3.                      */
  SSG0_CONTROL_EX3INVEN_1              = 1,     /*!< 1 : Invert the Pulse Generator output on EX3.                             */
} SSG0_CONTROL_EX3INVEN_Enum;

/* =============================================  SSG0 CONTROL EX2INVEN [2..2]  ============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_EX2INVEN                                                     */
  SSG0_CONTROL_EX2INVEN_0              = 0,     /*!< 0 : Do not invert the Pulse Generator output on EX2.                      */
  SSG0_CONTROL_EX2INVEN_1              = 1,     /*!< 1 : Invert the Pulse Generator output on EX2.                             */
} SSG0_CONTROL_EX2INVEN_Enum;

/* =============================================  SSG0 CONTROL EX1INVEN [1..1]  ============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_EX1INVEN                                                     */
  SSG0_CONTROL_EX1INVEN_0              = 0,     /*!< 0 : Do not invert the Pulse Generator output on EX1.                      */
  SSG0_CONTROL_EX1INVEN_1              = 1,     /*!< 1 : Invert the Pulse Generator output on EX1.                             */
} SSG0_CONTROL_EX1INVEN_Enum;

/* =============================================  SSG0 CONTROL EX0INVEN [0..0]  ============================================== */
typedef enum {                                  /*!< SSG0_CONTROL_EX0INVEN                                                     */
  SSG0_CONTROL_EX0INVEN_0              = 0,     /*!< 0 : Do not invert the Pulse Generator output on EX0.                      */
  SSG0_CONTROL_EX0INVEN_1              = 1,     /*!< 1 : Invert the Pulse Generator output on EX0.                             */
} SSG0_CONTROL_EX0INVEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           CMP0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  CMP0 CONTROL CMPEN [31..31]  ============================================== */
typedef enum {                                  /*!< CMP0_CONTROL_CMPEN                                                        */
  CMP0_CONTROL_CMPEN_Disable           = 0,     /*!< Disable : Disable the comparator.                                         */
  CMP0_CONTROL_CMPEN_Enable            = 1,     /*!< Enable : Enable the comparator.                                           */
} CMP0_CONTROL_CMPEN_Enum;

/* =============================================  CMP0 CONTROL CMPOUT [30..30]  ============================================== */
typedef enum {                                  /*!< CMP0_CONTROL_CMPOUT                                                       */
  CMP0_CONTROL_CMPOUT_0                = 0,     /*!< 0 : Voltage on CMP+ < CMP- (INVEN = 0).                                   */
  CMP0_CONTROL_CMPOUT_1                = 1,     /*!< 1 : Voltage on CMP+ > CMP- (INVEN = 0).                                   */
} CMP0_CONTROL_CMPOUT_Enum;

/* ==============================================  CMP0 CONTROL CMPRI [14..14]  ============================================== */
typedef enum {                                  /*!< CMP0_CONTROL_CMPRI                                                        */
  CMP0_CONTROL_CMPRI_0                 = 0,     /*!< 0 : No comparator rising edge has occurred since this flag was
                                                     last cleared.                                                             */
  CMP0_CONTROL_CMPRI_1                 = 1,     /*!< 1 : A comparator rising edge occurred since last flag was cleared.        */
} CMP0_CONTROL_CMPRI_Enum;

/* ==============================================  CMP0 CONTROL CMPFI [13..13]  ============================================== */
typedef enum {                                  /*!< CMP0_CONTROL_CMPFI                                                        */
  CMP0_CONTROL_CMPFI_0                 = 0,     /*!< 0 : No comparator falling edge has occurred since this flag
                                                     was last cleared.                                                         */
  CMP0_CONTROL_CMPFI_1                 = 1,     /*!< 1 : A comparator falling edge occurred since last flag was cleared.       */
} CMP0_CONTROL_CMPFI_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  MODE  ========================================================== */
/* ===============================================  CMP0 MODE INVEN [30..30]  ================================================ */
typedef enum {                                  /*!< CMP0_MODE_INVEN                                                           */
  CMP0_MODE_INVEN_0                    = 0,     /*!< 0 : Do not invert the comparator output.                                  */
  CMP0_MODE_INVEN_1                    = 1,     /*!< 1 : Invert the comparator output.                                         */
} CMP0_MODE_INVEN_Enum;

/* ===============================================  CMP0 MODE CMPHYP [26..27]  =============================================== */
typedef enum {                                  /*!< CMP0_MODE_CMPHYP                                                          */
  CMP0_MODE_CMPHYP_00                  = 0,     /*!< 00 : Disable positive hysteresis.                                         */
  CMP0_MODE_CMPHYP_01                  = 1,     /*!< 01 : Set positive hysteresis to 5 mV.                                     */
  CMP0_MODE_CMPHYP_10                  = 2,     /*!< 10 : Set positive hysteresis to 10 mV.                                    */
  CMP0_MODE_CMPHYP_11                  = 3,     /*!< 11 : Set positive hysteresis to 20 mV.                                    */
} CMP0_MODE_CMPHYP_Enum;

/* ===============================================  CMP0 MODE CMPHYN [24..25]  =============================================== */
typedef enum {                                  /*!< CMP0_MODE_CMPHYN                                                          */
  CMP0_MODE_CMPHYN_00                  = 0,     /*!< 00 : Disable negative hysteresis.                                         */
  CMP0_MODE_CMPHYN_01                  = 1,     /*!< 01 : Set negative hysteresis to 5 mV.                                     */
  CMP0_MODE_CMPHYN_10                  = 2,     /*!< 10 : Set negative hysteresis to 10 mV.                                    */
  CMP0_MODE_CMPHYN_11                  = 3,     /*!< 11 : Set negative hysteresis to 20 mV.                                    */
} CMP0_MODE_CMPHYN_Enum;

/* ===============================================  CMP0 MODE PWPUEN [23..23]  =============================================== */
typedef enum {                                  /*!< CMP0_MODE_PWPUEN                                                          */
  CMP0_MODE_PWPUEN_Disable             = 0,     /*!< Disable : Disable the positive input weak pull up.                        */
  CMP0_MODE_PWPUEN_Enable              = 1,     /*!< Enable : Enable the positive input weak pull up.                          */
} CMP0_MODE_PWPUEN_Enum;

/* ===============================================  CMP0 MODE NWPUEN [22..22]  =============================================== */
typedef enum {                                  /*!< CMP0_MODE_NWPUEN                                                          */
  CMP0_MODE_NWPUEN_Disable             = 0,     /*!< Disable : Disable the negative input weak pull up.                        */
  CMP0_MODE_NWPUEN_Enable              = 1,     /*!< Enable : Enable the negative input weak pull up.                          */
} CMP0_MODE_NWPUEN_Enum;

/* ================================================  CMP0 MODE RIEN [14..14]  ================================================ */
typedef enum {                                  /*!< CMP0_MODE_RIEN                                                            */
  CMP0_MODE_RIEN_Disable               = 0,     /*!< Disable : Disable the comparator rising edge interrupt.                   */
  CMP0_MODE_RIEN_Enable                = 1,     /*!< Enable : Enable the comparator rising edge interrupt.                     */
} CMP0_MODE_RIEN_Enum;

/* ================================================  CMP0 MODE FIEN [13..13]  ================================================ */
typedef enum {                                  /*!< CMP0_MODE_FIEN                                                            */
  CMP0_MODE_FIEN_Disable               = 0,     /*!< Disable : Disable the comparator falling edge interrupt.                  */
  CMP0_MODE_FIEN_Enable                = 1,     /*!< Enable : Enable the comparator falling edge interrupt.                    */
} CMP0_MODE_FIEN_Enum;

/* ===============================================  CMP0 MODE CMPMD [10..11]  ================================================ */
typedef enum {                                  /*!< CMP0_MODE_CMPMD                                                           */
  CMP0_MODE_CMPMD_00                   = 0,     /*!< 00 : Mode 0 (fastest response time, highest power consumption).           */
  CMP0_MODE_CMPMD_01                   = 1,     /*!< 01 : Mode 1.                                                              */
  CMP0_MODE_CMPMD_10                   = 2,     /*!< 10 : Mode 2.                                                              */
  CMP0_MODE_CMPMD_11                   = 3,     /*!< 11 : Mode 3 (slowest response time, lowest power consumption).            */
} CMP0_MODE_CMPMD_Enum;

/* ================================================  CMP0 MODE INMUX [8..9]  ================================================= */
typedef enum {                                  /*!< CMP0_MODE_INMUX                                                           */
  CMP0_MODE_INMUX_00                   = 0,     /*!< 00 : Connects the NMUX signal to CMP- and the PMUX signal to
                                                     CMP+.                                                                     */
  CMP0_MODE_INMUX_01                   = 1,     /*!< 01 : Connects VSS to CMP- and the PMUX signal to CMP+.                    */
  CMP0_MODE_INMUX_10                   = 2,     /*!< 10 : Connects the NMUX signal to CMP-, the PMUX signal to the
                                                     Comparator DAC voltage reference, and the DAC output to
                                                     CMP+.                                                                     */
  CMP0_MODE_INMUX_11                   = 3,     /*!< 11 : Connects the PMUX signal to CMP+, the NMUX signal to the
                                                     Comparator DAC voltage reference, and the DAC output to
                                                     CMP-.                                                                     */
} CMP0_MODE_INMUX_Enum;

/* =================================================  CMP0 MODE PMUX [4..7]  ================================================= */
typedef enum {                                  /*!< CMP0_MODE_PMUX                                                            */
  CMP0_MODE_PMUX_0000                  = 0,     /*!< 0000 : Select CMPnP.0.                                                    */
  CMP0_MODE_PMUX_0001                  = 1,     /*!< 0001 : Select CMPnP.1.                                                    */
  CMP0_MODE_PMUX_0010                  = 2,     /*!< 0010 : Select CMPnP.2.                                                    */
  CMP0_MODE_PMUX_0011                  = 3,     /*!< 0011 : Select CMPnP.3.                                                    */
  CMP0_MODE_PMUX_0100                  = 4,     /*!< 0100 : Select CMPnP.4.                                                    */
  CMP0_MODE_PMUX_0101                  = 5,     /*!< 0101 : Select CMPnP.5.                                                    */
  CMP0_MODE_PMUX_0110                  = 6,     /*!< 0110 : Select CMPnP.6.                                                    */
  CMP0_MODE_PMUX_0111                  = 7,     /*!< 0111 : Select CMPnP.7.                                                    */
  CMP0_MODE_PMUX_1000                  = 8,     /*!< 1000 : Select CMPnP.8.                                                    */
  CMP0_MODE_PMUX_1001                  = 9,     /*!< 1001 : Select CMPnP.9.                                                    */
  CMP0_MODE_PMUX_1010                  = 10,    /*!< 1010 : Select CMPnP.10.                                                   */
  CMP0_MODE_PMUX_1011                  = 11,    /*!< 1011 : Select CMPnP.11.                                                   */
  CMP0_MODE_PMUX_1100                  = 12,    /*!< 1100 : Select CMPnP.12.                                                   */
  CMP0_MODE_PMUX_1101                  = 13,    /*!< 1101 : Select CMPnP.13.                                                   */
  CMP0_MODE_PMUX_1110                  = 14,    /*!< 1110 : Select CMPnP.14.                                                   */
  CMP0_MODE_PMUX_1111                  = 15,    /*!< 1111 : Select CMPnP.15.                                                   */
} CMP0_MODE_PMUX_Enum;

/* =================================================  CMP0 MODE NMUX [0..3]  ================================================= */
typedef enum {                                  /*!< CMP0_MODE_NMUX                                                            */
  CMP0_MODE_NMUX_0000                  = 0,     /*!< 0000 : Select CMPnN.0.                                                    */
  CMP0_MODE_NMUX_0001                  = 1,     /*!< 0001 : Select CMPnN.1.                                                    */
  CMP0_MODE_NMUX_0010                  = 2,     /*!< 0010 : Select CMPnN.2.                                                    */
  CMP0_MODE_NMUX_0011                  = 3,     /*!< 0011 : Select CMPnN.3.                                                    */
  CMP0_MODE_NMUX_0100                  = 4,     /*!< 0100 : Select CMPnN.4.                                                    */
  CMP0_MODE_NMUX_0101                  = 5,     /*!< 0101 : Select CMPnN.5.                                                    */
  CMP0_MODE_NMUX_0110                  = 6,     /*!< 0110 : Select CMPnN.6.                                                    */
  CMP0_MODE_NMUX_0111                  = 7,     /*!< 0111 : Select CMPnN.7.                                                    */
  CMP0_MODE_NMUX_1000                  = 8,     /*!< 1000 : Select CMPnN.8.                                                    */
  CMP0_MODE_NMUX_1001                  = 9,     /*!< 1001 : Select CMPnN.9.                                                    */
  CMP0_MODE_NMUX_1010                  = 10,    /*!< 1010 : Select CMPnN.10.                                                   */
  CMP0_MODE_NMUX_1011                  = 11,    /*!< 1011 : Select CMPnN.11.                                                   */
  CMP0_MODE_NMUX_1100                  = 12,    /*!< 1100 : Select CMPnN.12.                                                   */
  CMP0_MODE_NMUX_1101                  = 13,    /*!< 1101 : Select CMPnN.13.                                                   */
  CMP0_MODE_NMUX_1110                  = 14,    /*!< 1110 : Select CMPnN.14.                                                   */
  CMP0_MODE_NMUX_1111                  = 15,    /*!< 1111 : Select CMPnN.15.                                                   */
} CMP0_MODE_NMUX_Enum;

/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */


/* =========================================================================================================================== */
/* ================                                         CAPSENSE0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ===========================================  CAPSENSE0 CONTROL EOSIEN [22..22]  =========================================== */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_EOSIEN                                                  */
  CAPSENSE0_CONTROL_EOSIEN_Disable     = 0,     /*!< Disable : Disable the single scan end-of-scan interrupt.                  */
  CAPSENSE0_CONTROL_EOSIEN_Enable      = 1,     /*!< Enable : Enable the single scan end-of-scan interrupt.                    */
} CAPSENSE0_CONTROL_EOSIEN_Enum;

/* ===========================================  CAPSENSE0 CONTROL CDIEN [21..21]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_CDIEN                                                   */
  CAPSENSE0_CONTROL_CDIEN_Disable      = 0,     /*!< Disable : Disable the single conversion done interrupt.                   */
  CAPSENSE0_CONTROL_CDIEN_Enable       = 1,     /*!< Enable : Enable the single conversion done interrupt.                     */
} CAPSENSE0_CONTROL_CDIEN_Enum;

/* ===========================================  CAPSENSE0 CONTROL CMPEN [20..20]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_CMPEN                                                   */
  CAPSENSE0_CONTROL_CMPEN_Disable      = 0,     /*!< Disable : Disable the threshold comparator.                               */
  CAPSENSE0_CONTROL_CMPEN_Enable       = 1,     /*!< Enable : Enable the threshold comparator.                                 */
} CAPSENSE0_CONTROL_CMPEN_Enum;

/* ============================================  CAPSENSE0 CONTROL PMEF [18..18]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_PMEF                                                    */
  CAPSENSE0_CONTROL_PMEF_0             = 0,     /*!< 0 : A retry did not occur due to a pin monitor event during
                                                     the last conversion.                                                      */
  CAPSENSE0_CONTROL_PMEF_1             = 1,     /*!< 1 : A retry occurred due to a pin monitor event during the last
                                                     conversion.                                                               */
} CAPSENSE0_CONTROL_PMEF_Enum;

/* ============================================  CAPSENSE0 CONTROL PMMD [16..17]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_PMMD                                                    */
  CAPSENSE0_CONTROL_PMMD_00            = 0,     /*!< 00 : Always retry on a pin state change.                                  */
  CAPSENSE0_CONTROL_PMMD_01            = 1,     /*!< 01 : Retry up to twice on consecutive bit cycles.                         */
  CAPSENSE0_CONTROL_PMMD_10            = 2,     /*!< 10 : Retry up to four times on consecutive bit cycles.                    */
  CAPSENSE0_CONTROL_PMMD_11            = 3,     /*!< 11 : Ignore monitored signal state change.                                */
} CAPSENSE0_CONTROL_PMMD_Enum;

/* ============================================  CAPSENSE0 CONTROL CSCM [12..15]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_CSCM                                                    */
  CAPSENSE0_CONTROL_CSCM_0000          = 0,     /*!< 0000 : The CSnT0 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_0001          = 1,     /*!< 0001 : The CSnT1 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_0010          = 2,     /*!< 0010 : The CSnT2 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_0011          = 3,     /*!< 0011 : The CSnT3 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_0100          = 4,     /*!< 0100 : The CSnT4 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_0101          = 5,     /*!< 0101 : The CSnT5 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_0110          = 6,     /*!< 0110 : The CSnT6 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_0111          = 7,     /*!< 0111 : The CSnT7 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_1000          = 8,     /*!< 1000 : The CSnT8 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_1001          = 9,     /*!< 1001 : The CSnT9 trigger source starts conversions.                       */
  CAPSENSE0_CONTROL_CSCM_1010          = 10,    /*!< 1010 : The CSnT10 trigger source starts conversions.                      */
  CAPSENSE0_CONTROL_CSCM_1011          = 11,    /*!< 1011 : The CSnT11 trigger source starts conversions.                      */
  CAPSENSE0_CONTROL_CSCM_1100          = 12,    /*!< 1100 : The CSnT12 trigger source starts conversions.                      */
  CAPSENSE0_CONTROL_CSCM_1101          = 13,    /*!< 1101 : The CSnT13 trigger source starts conversions.                      */
  CAPSENSE0_CONTROL_CSCM_1110          = 14,    /*!< 1110 : The CSnT14 trigger source starts conversions.                      */
  CAPSENSE0_CONTROL_CSCM_1111          = 15,    /*!< 1111 : The CSnT15 trigger source starts conversions.                      */
} CAPSENSE0_CONTROL_CSCM_Enum;

/* ============================================  CAPSENSE0 CONTROL MCEN [11..11]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_MCEN                                                    */
  CAPSENSE0_CONTROL_MCEN_Disable       = 0,     /*!< Disable : Disable the multiple channel measurement feature.               */
  CAPSENSE0_CONTROL_MCEN_Enable        = 1,     /*!< Enable : Enable the multiple channel measurement feature.                 */
} CAPSENSE0_CONTROL_MCEN_Enum;

/* ============================================  CAPSENSE0 CONTROL ACCMD [8..10]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_ACCMD                                                   */
  CAPSENSE0_CONTROL_ACCMD_000          = 0,     /*!< 000 : Accumulate 1 sample.                                                */
  CAPSENSE0_CONTROL_ACCMD_001          = 1,     /*!< 001 : Accumulate 4 samples.                                               */
  CAPSENSE0_CONTROL_ACCMD_010          = 2,     /*!< 010 : Accumulate 8 samples.                                               */
  CAPSENSE0_CONTROL_ACCMD_011          = 3,     /*!< 011 : Accumulate 16 samples.                                              */
  CAPSENSE0_CONTROL_ACCMD_100          = 4,     /*!< 100 : Accumulate 32 samples.                                              */
  CAPSENSE0_CONTROL_ACCMD_101          = 5,     /*!< 101 : Accumulate 64 samples.                                              */
  CAPSENSE0_CONTROL_ACCMD_110          = 6,     /*!< 110 : Reserved.                                                           */
} CAPSENSE0_CONTROL_ACCMD_Enum;

/* =============================================  CAPSENSE0 CONTROL CNVR [6..7]  ============================================= */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_CNVR                                                    */
  CAPSENSE0_CONTROL_CNVR_00            = 0,     /*!< 00 : Conversions last 12 internal CAPSENSE clocks and results
                                                     are 12 bits in length.                                                    */
  CAPSENSE0_CONTROL_CNVR_01            = 1,     /*!< 01 : Conversions last 13 internal CAPSENSE clocks and results
                                                     are 13 bits in length.                                                    */
  CAPSENSE0_CONTROL_CNVR_10            = 2,     /*!< 10 : Conversions last 14 internal CAPSENSE clocks and results
                                                     are 14 bits in length.                                                    */
  CAPSENSE0_CONTROL_CNVR_11            = 3,     /*!< 11 : Conversions last 16 internal CAPSENSE clocks and results
                                                     are 16 bits in length.                                                    */
} CAPSENSE0_CONTROL_CNVR_Enum;

/* =============================================  CAPSENSE0 CONTROL CMD [4..5]  ============================================== */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_CMD                                                     */
  CAPSENSE0_CONTROL_CMD_00             = 0,     /*!< 00 : Single Conversion Mode: One conversion occurs on a single
                                                     channel.                                                                  */
  CAPSENSE0_CONTROL_CMD_01             = 1,     /*!< 01 : Single Scan Mode: One conversion on each channel selected
                                                     by SCANEN occurs. An end-of-scan interrupt indicates all
                                                     channels have been measured.                                              */
  CAPSENSE0_CONTROL_CMD_10             = 2,     /*!< 10 : Continuous Single Conversion Mode: Continuously converts
                                                     on a single chan-nel. This operation ends only if the module
                                                     is disabled (CSEN = 0) or if a compare threshold event
                                                     occurs (CMPI = 1).                                                        */
  CAPSENSE0_CONTROL_CMD_11             = 3,     /*!< 11 : Continuous Scan Mode: Continuously loops through and converts
                                                     on all the channels selected by SCANEN. This operation
                                                     ends only if the module is disabled (CSEN = 0) or if a
                                                     compare threshold event occurs (CMPI = 1).                                */
} CAPSENSE0_CONTROL_CMD_Enum;

/* ============================================  CAPSENSE0 CONTROL CMPPOL [3..3]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_CMPPOL                                                  */
  CAPSENSE0_CONTROL_CMPPOL_0           = 0,     /*!< 0 : The digital comparator generates an interrupt if the conversion
                                                     is greater than the CSTH threshold.                                       */
  CAPSENSE0_CONTROL_CMPPOL_1           = 1,     /*!< 1 : The digital comparator generates an interrupt if the conversion
                                                     is less than or equal to the CSTH threshold.                              */
} CAPSENSE0_CONTROL_CMPPOL_Enum;

/* ============================================  CAPSENSE0 CONTROL BIASEN [2..2]  ============================================ */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_BIASEN                                                  */
  CAPSENSE0_CONTROL_BIASEN_Disable     = 0,     /*!< Disable : Disable the bias.                                               */
  CAPSENSE0_CONTROL_BIASEN_Enable      = 1,     /*!< Enable : Enable the bias.                                                 */
} CAPSENSE0_CONTROL_BIASEN_Enum;

/* =============================================  CAPSENSE0 CONTROL CSEN [1..1]  ============================================= */
typedef enum {                                  /*!< CAPSENSE0_CONTROL_CSEN                                                    */
  CAPSENSE0_CONTROL_CSEN_Disable       = 0,     /*!< Disable : Disable the capacitive sensing module.                          */
  CAPSENSE0_CONTROL_CSEN_Enable        = 1,     /*!< Enable : Enable the capacitive sensing module.                            */
} CAPSENSE0_CONTROL_CSEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  MODE  ========================================================== */
/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */
/* =========================================================  DATA  ========================================================== */
/* =========================================================  SCAN  ========================================================== */
/* =========================================================  CSTH  ========================================================== */
/* ==========================================================  MUX  ========================================================== */
/* ==============================================  CAPSENSE0 MUX CSDISC [7..7]  ============================================== */
typedef enum {                                  /*!< CAPSENSE0_MUX_CSDISC                                                      */
  CAPSENSE0_MUX_CSDISC_0               = 0,     /*!< 0 : Connect the capacitive sensing circuit to the selected channel.       */
  CAPSENSE0_MUX_CSDISC_1               = 1,     /*!< 1 : Disconnect the capacitive sensing input channel.                      */
} CAPSENSE0_MUX_CSDISC_Enum;

/* ===============================================  CAPSENSE0 MUX CSMX [0..3]  =============================================== */
typedef enum {                                  /*!< CAPSENSE0_MUX_CSMX                                                        */
  CAPSENSE0_MUX_CSMX_0000              = 0,     /*!< 0000 : Select CSn.0.                                                      */
  CAPSENSE0_MUX_CSMX_0001              = 1,     /*!< 0001 : Select CSn.1.                                                      */
  CAPSENSE0_MUX_CSMX_0010              = 2,     /*!< 0010 : Select CSn.2.                                                      */
  CAPSENSE0_MUX_CSMX_0011              = 3,     /*!< 0011 : Select CSn.3.                                                      */
  CAPSENSE0_MUX_CSMX_0100              = 4,     /*!< 0100 : Select CSn.4.                                                      */
  CAPSENSE0_MUX_CSMX_0101              = 5,     /*!< 0101 : Select CSn.5.                                                      */
  CAPSENSE0_MUX_CSMX_0110              = 6,     /*!< 0110 : Select CSn.6.                                                      */
  CAPSENSE0_MUX_CSMX_0111              = 7,     /*!< 0111 : Select CSn.7.                                                      */
  CAPSENSE0_MUX_CSMX_1000              = 8,     /*!< 1000 : Select CSn.8.                                                      */
  CAPSENSE0_MUX_CSMX_1001              = 9,     /*!< 1001 : Select CSn.9.                                                      */
  CAPSENSE0_MUX_CSMX_1010              = 10,    /*!< 1010 : Select CSn.10.                                                     */
  CAPSENSE0_MUX_CSMX_1011              = 11,    /*!< 1011 : Select CSn.11.                                                     */
  CAPSENSE0_MUX_CSMX_1100              = 12,    /*!< 1100 : Select CSn.12.                                                     */
  CAPSENSE0_MUX_CSMX_1101              = 13,    /*!< 1101 : Select CSn.13.                                                     */
  CAPSENSE0_MUX_CSMX_1110              = 14,    /*!< 1110 : Select CSn.14.                                                     */
  CAPSENSE0_MUX_CSMX_1111              = 15,    /*!< 1111 : Select CSn.15.                                                     */
} CAPSENSE0_MUX_CSMX_Enum;



/* =========================================================================================================================== */
/* ================                                           EMIF0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  EMIF0 CONTROL OFFSTEN [4..4]  ============================================== */
typedef enum {                                  /*!< EMIF0_CONTROL_OFFSTEN                                                     */
  EMIF0_CONTROL_OFFSTEN_0              = 0,     /*!< 0 : EMIF will not enter the off state after 4 idle cycles.                */
  EMIF0_CONTROL_OFFSTEN_1              = 1,     /*!< 1 : EMIF will enter the off state after 4 idle cycles.                    */
} EMIF0_CONTROL_OFFSTEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  STATUS  ========================================================= */
/* ==============================================  EMIF0 STATUS IDLESTS [1..1]  ============================================== */
typedef enum {                                  /*!< EMIF0_STATUS_IDLESTS                                                      */
  EMIF0_STATUS_IDLESTS_0               = 0,     /*!< 0 : The EMIF has not been idle for four cycles.                           */
  EMIF0_STATUS_IDLESTS_1               = 1,     /*!< 1 : The EMIF has been idle for four four cycles.                          */
} EMIF0_STATUS_IDLESTS_Enum;

/* ==============================================  EMIF0 STATUS OFFSTS [0..0]  =============================================== */
typedef enum {                                  /*!< EMIF0_STATUS_OFFSTS                                                       */
  EMIF0_STATUS_OFFSTS_0                = 0,     /*!< 0 : The EMIF bus is active.                                               */
  EMIF0_STATUS_OFFSTS_1                = 1,     /*!< 1 : The EMIF is in the off bus state.                                     */
} EMIF0_STATUS_OFFSTS_Enum;

/* ======================================================  IF0_CONFIG  ======================================================= */
/* ====================================================  IF0_CONFIG_SET  ===================================================== */
/* ====================================================  IF0_CONFIG_CLR  ===================================================== */
/* =======================================================  IF0_IFRT  ======================================================== */
/* =======================================================  IF0_IFWT  ======================================================== */
/* ======================================================  IF0_IFRCST  ======================================================= */
/* ======================================================  IF0_IFWCST  ======================================================= */
/* ======================================================  IF1_CONFIG  ======================================================= */
/* ====================================================  IF1_CONFIG_SET  ===================================================== */
/* ====================================================  IF1_CONFIG_CLR  ===================================================== */
/* =======================================================  IF1_IFRT  ======================================================== */
/* =======================================================  IF1_IFWT  ======================================================== */
/* ======================================================  IF1_IFRCST  ======================================================= */
/* ======================================================  IF1_IFWCST  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           AES0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  AES0 CONTROL RESET [31..31]  ============================================== */
typedef enum {                                  /*!< AES0_CONTROL_RESET                                                        */
  AES0_CONTROL_RESET_0                 = 0,     /*!< 0 : AES module is not in soft reset.                                      */
  AES0_CONTROL_RESET_1                 = 1,     /*!< 1 : AES module is in soft reset and none of the module bits
                                                     can be accessed.                                                          */
} AES0_CONTROL_RESET_Enum;

/* ==============================================  AES0 CONTROL DBGMD [30..30]  ============================================== */
typedef enum {                                  /*!< AES0_CONTROL_DBGMD                                                        */
  AES0_CONTROL_DBGMD_0                 = 0,     /*!< 0 : A debug breakpoint will cause the AES module to halt.                 */
  AES0_CONTROL_DBGMD_1                 = 1,     /*!< 1 : The AES module will continue to operate while the core is
                                                     halted in debug mode.                                                     */
} AES0_CONTROL_DBGMD_Enum;

/* ==============================================  AES0 CONTROL OCIEN [25..25]  ============================================== */
typedef enum {                                  /*!< AES0_CONTROL_OCIEN                                                        */
  AES0_CONTROL_OCIEN_Disable           = 0,     /*!< Disable : Disable the operation complete interrupt.                       */
  AES0_CONTROL_OCIEN_Enable            = 1,     /*!< Enable : Enable the operation complete interrupt.                         */
} AES0_CONTROL_OCIEN_Enum;

/* =============================================  AES0 CONTROL ERRIEN [24..24]  ============================================== */
typedef enum {                                  /*!< AES0_CONTROL_ERRIEN                                                       */
  AES0_CONTROL_ERRIEN_Disable          = 0,     /*!< Disable : Disable the error interrupt.                                    */
  AES0_CONTROL_ERRIEN_Enable           = 1,     /*!< Enable : Enable the error interrupt.                                      */
} AES0_CONTROL_ERRIEN_Enum;

/* =============================================  AES0 CONTROL KEYSIZE [16..17]  ============================================= */
typedef enum {                                  /*!< AES0_CONTROL_KEYSIZE                                                      */
  AES0_CONTROL_KEYSIZE_00              = 0,     /*!< 00 : Key is composed of 128 bits.                                         */
  AES0_CONTROL_KEYSIZE_01              = 1,     /*!< 01 : Key is composed of 192 bits.                                         */
  AES0_CONTROL_KEYSIZE_10              = 2,     /*!< 10 : Key is composed of 256 bits.                                         */
  AES0_CONTROL_KEYSIZE_11              = 3,     /*!< 11 : Reserved.                                                            */
} AES0_CONTROL_KEYSIZE_Enum;

/* =============================================  AES0 CONTROL HCBCEN [13..13]  ============================================== */
typedef enum {                                  /*!< AES0_CONTROL_HCBCEN                                                       */
  AES0_CONTROL_HCBCEN_Disable          = 0,     /*!< Disable : Disable hardware cipher-block chaining (CBC) mode.              */
  AES0_CONTROL_HCBCEN_Enable           = 1,     /*!< Enable : Enable hardware cipher-block chaining (CBC) mode.                */
} AES0_CONTROL_HCBCEN_Enum;

/* =============================================  AES0 CONTROL HCTREN [12..12]  ============================================== */
typedef enum {                                  /*!< AES0_CONTROL_HCTREN                                                       */
  AES0_CONTROL_HCTREN_Disable          = 0,     /*!< Disable : Disable hardware counter mode.                                  */
  AES0_CONTROL_HCTREN_Enable           = 1,     /*!< Enable : Enable hardware counter mode.                                    */
} AES0_CONTROL_HCTREN_Enum;

/* ==============================================  AES0 CONTROL XOREN [10..11]  ============================================== */
typedef enum {                                  /*!< AES0_CONTROL_XOREN                                                        */
  AES0_CONTROL_XOREN_00                = 0,     /*!< 00 : Disable the XOR paths.                                               */
  AES0_CONTROL_XOREN_01                = 1,     /*!< 01 : Enable the XOR input path, disable the XOR output path.              */
  AES0_CONTROL_XOREN_10                = 2,     /*!< 10 : Disable the XOR input path, enable the XOR output path.              */
  AES0_CONTROL_XOREN_11                = 3,     /*!< 11 : Reserved.                                                            */
} AES0_CONTROL_XOREN_Enum;

/* ================================================  AES0 CONTROL BEN [9..9]  ================================================ */
typedef enum {                                  /*!< AES0_CONTROL_BEN                                                          */
  AES0_CONTROL_BEN_0                   = 0,     /*!< 0 : Do not bypass AES operations.                                         */
  AES0_CONTROL_BEN_1                   = 1,     /*!< 1 : Bypass AES operations.                                                */
} AES0_CONTROL_BEN_Enum;

/* ==============================================  AES0 CONTROL SWMDEN [8..8]  =============================================== */
typedef enum {                                  /*!< AES0_CONTROL_SWMDEN                                                       */
  AES0_CONTROL_SWMDEN_Disable          = 0,     /*!< Disable : Disable software mode.                                          */
  AES0_CONTROL_SWMDEN_Enable           = 1,     /*!< Enable : Enable software mode.                                            */
} AES0_CONTROL_SWMDEN_Enum;

/* ===============================================  AES0 CONTROL EDMD [2..2]  ================================================ */
typedef enum {                                  /*!< AES0_CONTROL_EDMD                                                         */
  AES0_CONTROL_EDMD_0                  = 0,     /*!< 0 : AES module performs a decryption operation                            */
  AES0_CONTROL_EDMD_1                  = 1,     /*!< 1 : AES module performs an encryption operation.                          */
} AES0_CONTROL_EDMD_Enum;

/* ==============================================  AES0 CONTROL KEYCPEN [1..1]  ============================================== */
typedef enum {                                  /*!< AES0_CONTROL_KEYCPEN                                                      */
  AES0_CONTROL_KEYCPEN_Disable         = 0,     /*!< Disable : Disable key capture.                                            */
  AES0_CONTROL_KEYCPEN_Enable          = 1,     /*!< Enable : Enable key capture.                                              */
} AES0_CONTROL_KEYCPEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  XFRSIZE  ======================================================== */
/* =======================================================  DATAFIFO  ======================================================== */
/* ========================================================  XORFIFO  ======================================================== */
/* ========================================================  HWKEY0  ========================================================= */
/* ========================================================  HWKEY1  ========================================================= */
/* ========================================================  HWKEY2  ========================================================= */
/* ========================================================  HWKEY3  ========================================================= */
/* ========================================================  HWKEY4  ========================================================= */
/* ========================================================  HWKEY5  ========================================================= */
/* ========================================================  HWKEY6  ========================================================= */
/* ========================================================  HWKEY7  ========================================================= */
/* ========================================================  HWCTR0  ========================================================= */
/* ========================================================  HWCTR1  ========================================================= */
/* ========================================================  HWCTR2  ========================================================= */
/* ========================================================  HWCTR3  ========================================================= */
/* ========================================================  STATUS  ========================================================= */
/* ==============================================  AES0 STATUS BUSYF [16..16]  =============================================== */
typedef enum {                                  /*!< AES0_STATUS_BUSYF                                                         */
  AES0_STATUS_BUSYF_0                  = 0,     /*!< 0 : AES module is not busy.                                               */
  AES0_STATUS_BUSYF_1                  = 1,     /*!< 1 : AES module is completing an operation.                                */
} AES0_STATUS_BUSYF_Enum;

/* =============================================  AES0 STATUS XFIFOLVL [8..10]  ============================================== */
typedef enum {                                  /*!< AES0_STATUS_XFIFOLVL                                                      */
  AES0_STATUS_XFIFOLVL_000             = 0,     /*!< 000 : XOR data FIFO is empty.                                             */
  AES0_STATUS_XFIFOLVL_001             = 1,     /*!< 001 : XOR data FIFO contains 1 word.                                      */
  AES0_STATUS_XFIFOLVL_010             = 2,     /*!< 010 : XOR data FIFO contains 2 words.                                     */
  AES0_STATUS_XFIFOLVL_011             = 3,     /*!< 011 : XOR data FIFO contains 3 words.                                     */
  AES0_STATUS_XFIFOLVL_100             = 4,     /*!< 100 : XOR data FIFO contains 4 words (full).                              */
  AES0_STATUS_XFIFOLVL_101             = 5,     /*!< 101 : Reserved.                                                           */
} AES0_STATUS_XFIFOLVL_Enum;

/* ==============================================  AES0 STATUS DFIFOLVL [4..6]  ============================================== */
typedef enum {                                  /*!< AES0_STATUS_DFIFOLVL                                                      */
  AES0_STATUS_DFIFOLVL_000             = 0,     /*!< 000 : Input/Output data FIFO is empty.                                    */
  AES0_STATUS_DFIFOLVL_001             = 1,     /*!< 001 : Input/Output data FIFO contains 1 word.                             */
  AES0_STATUS_DFIFOLVL_010             = 2,     /*!< 010 : Input/Output data FIFO contains 2 words.                            */
  AES0_STATUS_DFIFOLVL_011             = 3,     /*!< 011 : Input/Output data FIFO contains 3 words.                            */
  AES0_STATUS_DFIFOLVL_100             = 4,     /*!< 100 : Input/Output data FIFO contains 4 words (full).                     */
  AES0_STATUS_DFIFOLVL_101             = 5,     /*!< 101 : Reserved.                                                           */
} AES0_STATUS_DFIFOLVL_Enum;

/* ================================================  AES0 STATUS XORF [2..2]  ================================================ */
typedef enum {                                  /*!< AES0_STATUS_XORF                                                          */
  AES0_STATUS_XORF_0                   = 0,     /*!< 0 : No XOR data FIFO overrun.                                             */
  AES0_STATUS_XORF_1                   = 1,     /*!< 1 : An XOR data FIFO overrun has occurred.                                */
} AES0_STATUS_XORF_Enum;

/* ================================================  AES0 STATUS DORF [1..1]  ================================================ */
typedef enum {                                  /*!< AES0_STATUS_DORF                                                          */
  AES0_STATUS_DORF_0                   = 0,     /*!< 0 : No input/output data FIFO overrun.                                    */
  AES0_STATUS_DORF_1                   = 1,     /*!< 1 : An input/output data FIFO overrun has occurred.                       */
} AES0_STATUS_DORF_Enum;

/* ================================================  AES0 STATUS DURF [0..0]  ================================================ */
typedef enum {                                  /*!< AES0_STATUS_DURF                                                          */
  AES0_STATUS_DURF_0                   = 0,     /*!< 0 : No input/output data FIFO underrun.                                   */
  AES0_STATUS_DURF_1                   = 1,     /*!< 1 : An input/output data FIFO underrun has occurred.                      */
} AES0_STATUS_DURF_Enum;

/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           CRC0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  CRC0 CONTROL ORDER [10..11]  ============================================== */
typedef enum {                                  /*!< CRC0_CONTROL_ORDER                                                        */
  CRC0_CONTROL_ORDER_00                = 0,     /*!< 00 : No byte reorientation (output is same order as input).               */
  CRC0_CONTROL_ORDER_01                = 1,     /*!< 01 : Swap for 16-bit big endian order (input: B3 B2 B1 B0, output:
                                                     B2 B3 B0 B1).                                                             */
  CRC0_CONTROL_ORDER_10                = 2,     /*!< 10 : Swap for 32-bit big endian order (input: B3 B2 B1 B0, output:
                                                     B0 B1 B2 B3).                                                             */
  CRC0_CONTROL_ORDER_11                = 3,     /*!< 11 : Reserved.                                                            */
} CRC0_CONTROL_ORDER_Enum;

/* ===============================================  CRC0 CONTROL BBREN [9..9]  =============================================== */
typedef enum {                                  /*!< CRC0_CONTROL_BBREN                                                        */
  CRC0_CONTROL_BBREN_0                 = 0,     /*!< 0 : No byte-level bit reversal (input is same order as written).          */
  CRC0_CONTROL_BBREN_Enable            = 1,     /*!< Enable : Byte-level bit reversal enabled (the bits in each byte
                                                     are reversed).                                                            */
} CRC0_CONTROL_BBREN_Enum;

/* ===============================================  CRC0 CONTROL BMDEN [8..8]  =============================================== */
typedef enum {                                  /*!< CRC0_CONTROL_BMDEN                                                        */
  CRC0_CONTROL_BMDEN_Disable           = 0,     /*!< Disable : Disable byte mode (word/byte width is determined automatically
                                                     by the hard-ware).                                                        */
  CRC0_CONTROL_BMDEN_Enable            = 1,     /*!< Enable : Enable byte mode (all writes are considered as bytes).           */
} CRC0_CONTROL_BMDEN_Enum;

/* ==============================================  CRC0 CONTROL POLYSEL [4..5]  ============================================== */
typedef enum {                                  /*!< CRC0_CONTROL_POLYSEL                                                      */
  CRC0_CONTROL_POLYSEL_00              = 0,     /*!< 00 : Select 32-bit polynomial: 0x04C11DB7.                                */
  CRC0_CONTROL_POLYSEL_01              = 1,     /*!< 01 : Select 16-bit polynomial: 0x1021.                                    */
  CRC0_CONTROL_POLYSEL_10              = 2,     /*!< 10 : Select 16-bit polynomial: 0x3D65.                                    */
  CRC0_CONTROL_POLYSEL_11              = 3,     /*!< 11 : Select 16-bit polynomial: 0x8005.                                    */
} CRC0_CONTROL_POLYSEL_Enum;

/* ===============================================  CRC0 CONTROL CRCEN [2..2]  =============================================== */
typedef enum {                                  /*!< CRC0_CONTROL_CRCEN                                                        */
  CRC0_CONTROL_CRCEN_Disable           = 0,     /*!< Disable : Disable CRC operations.                                         */
  CRC0_CONTROL_CRCEN_Enable            = 1,     /*!< Enable : Enable CRC operations.                                           */
} CRC0_CONTROL_CRCEN_Enum;

/* ===============================================  CRC0 CONTROL SEED [1..1]  ================================================ */
typedef enum {                                  /*!< CRC0_CONTROL_SEED                                                         */
  CRC0_CONTROL_SEED_0                  = 0,     /*!< 0 : CRC seed value is all 0's (0x00000000)                                */
  CRC0_CONTROL_SEED_1                  = 1,     /*!< 1 : CRC seed value is all 1's (0xFFFFFFFF).                               */
} CRC0_CONTROL_SEED_Enum;

/* ==============================================  CRC0 CONTROL SINITEN [0..0]  ============================================== */
typedef enum {                                  /*!< CRC0_CONTROL_SINITEN                                                      */
  CRC0_CONTROL_SINITEN_0               = 0,     /*!< 0 : Do not initialize the CRC module to the value set by the
                                                     SEED bit.                                                                 */
  CRC0_CONTROL_SINITEN_1               = 1,     /*!< 1 : Initialize the CRC module to the value set by the SEED bit.           */
} CRC0_CONTROL_SINITEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  DATA  ========================================================== */
/* =========================================================  RDATA  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           RTC0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ==============================================  RTC0 CONFIG RTCEN [31..31]  =============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_RTCEN                                                         */
  RTC0_CONFIG_RTCEN_Disable            = 0,     /*!< Disable : Disable the RTC timer.                                          */
  RTC0_CONFIG_RTCEN_Enable             = 1,     /*!< Enable : Enable the RTC timer.                                            */
} RTC0_CONFIG_RTCEN_Enum;

/* ==============================================  RTC0 CONFIG CLKSEL [30..30]  ============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_CLKSEL                                                        */
  RTC0_CONFIG_CLKSEL_0                 = 0,     /*!< 0 : Select the External Crystal or External CMOS Clock as the
                                                     RTC Timer clock (RTCnTCLK) source.                                        */
  RTC0_CONFIG_CLKSEL_1                 = 1,     /*!< 1 : Select the Low Frequency Oscillator as the RTC Timer clock
                                                     (RTCnTCLK) source.                                                        */
} RTC0_CONFIG_CLKSEL_Enum;

/* ==============================================  RTC0 CONFIG RTCOEN [29..29]  ============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_RTCOEN                                                        */
  RTC0_CONFIG_RTCOEN_Disable           = 0,     /*!< Disable : Disable the external RTCnOSC output.                            */
  RTC0_CONFIG_RTCOEN_Enable            = 1,     /*!< Enable : Enable the external RTCnOSC output.                              */
} RTC0_CONFIG_RTCOEN_Enum;

/* ==============================================  RTC0 CONFIG ALM2EN [26..26]  ============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_ALM2EN                                                        */
  RTC0_CONFIG_ALM2EN_Disable           = 0,     /*!< Disable : Disable RTC Alarm 2.                                            */
  RTC0_CONFIG_ALM2EN_Enable            = 1,     /*!< Enable : Enable RTC Alarm 2 and Alarm 2 Interrupt.                        */
} RTC0_CONFIG_ALM2EN_Enum;

/* ==============================================  RTC0 CONFIG ALM1EN [25..25]  ============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_ALM1EN                                                        */
  RTC0_CONFIG_ALM1EN_Disable           = 0,     /*!< Disable : Disable RTC Alarm 1.                                            */
  RTC0_CONFIG_ALM1EN_Enable            = 1,     /*!< Enable : Enable RTC Alarm 1 and Alarm 1 Interrupt.                        */
} RTC0_CONFIG_ALM1EN_Enum;

/* ==============================================  RTC0 CONFIG ALM0EN [24..24]  ============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_ALM0EN                                                        */
  RTC0_CONFIG_ALM0EN_Disable           = 0,     /*!< Disable : Disable RTC Alarm 0.                                            */
  RTC0_CONFIG_ALM0EN_Enable            = 1,     /*!< Enable : Enable RTC Alarm 0 and Alarm 0 Interrupt.                        */
} RTC0_CONFIG_ALM0EN_Enum;

/* ==============================================  RTC0 CONFIG AGCEN [18..18]  =============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_AGCEN                                                         */
  RTC0_CONFIG_AGCEN_Disable            = 0,     /*!< Disable : Disable automatic gain control.                                 */
  RTC0_CONFIG_AGCEN_Enable             = 1,     /*!< Enable : Enable automatic gain control, saving power.                     */
} RTC0_CONFIG_AGCEN_Enum;

/* ==============================================  RTC0 CONFIG CRYSEN [17..17]  ============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_CRYSEN                                                        */
  RTC0_CONFIG_CRYSEN_Disable           = 0,     /*!< Disable : Disable the crystal oscillator circuitry.                       */
  RTC0_CONFIG_CRYSEN_Enable            = 1,     /*!< Enable : Enable the crystal oscillator circuitry.                         */
} RTC0_CONFIG_CRYSEN_Enum;

/* ===============================================  RTC0 CONFIG BDEN [16..16]  =============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_BDEN                                                          */
  RTC0_CONFIG_BDEN_Disable             = 0,     /*!< Disable : Disable the bias doubler, saving power.                         */
  RTC0_CONFIG_BDEN_Enable              = 1,     /*!< Enable : Enable the bias doubler.                                         */
} RTC0_CONFIG_BDEN_Enum;

/* ================================================  RTC0 CONFIG ASEN [3..3]  ================================================ */
typedef enum {                                  /*!< RTC0_CONFIG_ASEN                                                          */
  RTC0_CONFIG_ASEN_Disable             = 0,     /*!< Disable : Disable automatic load capacitance stepping.                    */
  RTC0_CONFIG_ASEN_Enable              = 1,     /*!< Enable : Enable automatic load capacitance stepping.                      */
} RTC0_CONFIG_ASEN_Enum;

/* ===============================================  RTC0 CONFIG MCLKEN [2..2]  =============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_MCLKEN                                                        */
  RTC0_CONFIG_MCLKEN_Disable           = 0,     /*!< Disable : Disable the missing clock detector.                             */
  RTC0_CONFIG_MCLKEN_Enable            = 1,     /*!< Enable : Enable the missing clock detector. If the missing clock
                                                     detector triggers, it will generate an RTC Fail event.                    */
} RTC0_CONFIG_MCLKEN_Enum;

/* ================================================  RTC0 CONFIG RUN [1..1]  ================================================= */
typedef enum {                                  /*!< RTC0_CONFIG_RUN                                                           */
  RTC0_CONFIG_RUN_0                    = 0,     /*!< 0 : Stop the RTC timer.                                                   */
  RTC0_CONFIG_RUN_1                    = 1,     /*!< 1 : Start the RTC timer running.                                          */
} RTC0_CONFIG_RUN_Enum;

/* ==============================================  RTC0 CONFIG ALM0AREN [0..0]  ============================================== */
typedef enum {                                  /*!< RTC0_CONFIG_ALM0AREN                                                      */
  RTC0_CONFIG_ALM0AREN_Disable         = 0,     /*!< Disable : Disable the Alarm 0 automatic reset.                            */
  RTC0_CONFIG_ALM0AREN_Enable          = 1,     /*!< Enable : Enable the Alarm 0 automatic reset.                              */
} RTC0_CONFIG_ALM0AREN_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
/* ===============================================  RTC0 CONTROL LRDYF [8..8]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_LRDYF                                                        */
  RTC0_CONTROL_LRDYF_0                 = 0,     /*!< 0 : The load capacitance is currently stepping.                           */
  RTC0_CONTROL_LRDYF_1                 = 1,     /*!< 1 : The load capacitance has reached its programmed value.                */
} RTC0_CONTROL_LRDYF_Enum;

/* ==============================================  RTC0 CONTROL HSMDEN [7..7]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_HSMDEN                                                       */
  RTC0_CONTROL_HSMDEN_Disable          = 0,     /*!< Disable : Disable high speed mode. (AHBCLK < 4x RTCnTCLK)                 */
  RTC0_CONTROL_HSMDEN_Enable           = 1,     /*!< Enable : Enable high speed mode. (AHBCLK >= 4x RTCnTCLK)                  */
} RTC0_CONTROL_HSMDEN_Enum;

/* ===============================================  RTC0 CONTROL OSCFI [6..6]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_OSCFI                                                        */
  RTC0_CONTROL_OSCFI_0                 = 0,     /*!< 0 : Oscillator is running.                                                */
  RTC0_CONTROL_OSCFI_1                 = 1,     /*!< 1 : Oscillator has failed.                                                */
} RTC0_CONTROL_OSCFI_Enum;

/* ===============================================  RTC0 CONTROL CLKVF [5..5]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_CLKVF                                                        */
  RTC0_CONTROL_CLKVF_0                 = 0,     /*!< 0 : External oscillator is not valid.                                     */
  RTC0_CONTROL_CLKVF_1                 = 1,     /*!< 1 : External oscillator is valid.                                         */
} RTC0_CONTROL_CLKVF_Enum;

/* ==============================================  RTC0 CONTROL TMRSET [4..4]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_TMRSET                                                       */
  RTC0_CONTROL_TMRSET_0                = 0,     /*!< 0 : RTC timer set operation is complete.                                  */
  RTC0_CONTROL_TMRSET_1                = 1,     /*!< 1 : Start the RTC timer set.                                              */
} RTC0_CONTROL_TMRSET_Enum;

/* ==============================================  RTC0 CONTROL TMRCAP [3..3]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_TMRCAP                                                       */
  RTC0_CONTROL_TMRCAP_0                = 0,     /*!< 0 : RTC timer capture operation is complete.                              */
  RTC0_CONTROL_TMRCAP_1                = 1,     /*!< 1 : Start the RTC timer capture.                                          */
} RTC0_CONTROL_TMRCAP_Enum;

/* ===============================================  RTC0 CONTROL ALM2I [2..2]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_ALM2I                                                        */
  RTC0_CONTROL_ALM2I_0                 = 0,     /*!< 0 : Alarm 2 event has not occurred.                                       */
  RTC0_CONTROL_ALM2I_1                 = 1,     /*!< 1 : Alarm 2 event occurred.                                               */
} RTC0_CONTROL_ALM2I_Enum;

/* ===============================================  RTC0 CONTROL ALM1I [1..1]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_ALM1I                                                        */
  RTC0_CONTROL_ALM1I_0                 = 0,     /*!< 0 : Alarm 1 event has not occurred.                                       */
  RTC0_CONTROL_ALM1I_1                 = 1,     /*!< 1 : Alarm 1 event occurred.                                               */
} RTC0_CONTROL_ALM1I_Enum;

/* ===============================================  RTC0 CONTROL ALM0I [0..0]  =============================================== */
typedef enum {                                  /*!< RTC0_CONTROL_ALM0I                                                        */
  RTC0_CONTROL_ALM0I_0                 = 0,     /*!< 0 : Alarm 0 event has not occurred.                                       */
  RTC0_CONTROL_ALM0I_1                 = 1,     /*!< 1 : Alarm 0 event occurred.                                               */
} RTC0_CONTROL_ALM0I_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  ALARM0  ========================================================= */
/* ========================================================  ALARM1  ========================================================= */
/* ========================================================  ALARM2  ========================================================= */
/* ========================================================  SETCAP  ========================================================= */
/* ======================================================  LFOCONTROL  ======================================================= */
/* ===========================================  RTC0 LFOCONTROL LFOSCEN [31..31]  ============================================ */
typedef enum {                                  /*!< RTC0_LFOCONTROL_LFOSCEN                                                   */
  RTC0_LFOCONTROL_LFOSCEN_Disable      = 0,     /*!< Disable : Disable the Low Frequency Oscillator (LFOSCn).                  */
  RTC0_LFOCONTROL_LFOSCEN_Enable       = 1,     /*!< Enable : Enable the Low Frequency Oscillator (LFOSCn).                    */
} RTC0_LFOCONTROL_LFOSCEN_Enum;



/* =========================================================================================================================== */
/* ================                                          PBCFG0                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  CONTROL0  ======================================================== */
/* ============================================  PBCFG0 CONTROL0 INT1EN [15..15]  ============================================ */
typedef enum {                                  /*!< PBCFG0_CONTROL0_INT1EN                                                    */
  PBCFG0_CONTROL0_INT1EN_Disable       = 0,     /*!< Disable : Disable external interrupt 1.                                   */
  PBCFG0_CONTROL0_INT1EN_Enable        = 1,     /*!< Enable : Enable external interrupt 1.                                     */
} PBCFG0_CONTROL0_INT1EN_Enum;

/* ============================================  PBCFG0 CONTROL0 INT1MD [13..14]  ============================================ */
typedef enum {                                  /*!< PBCFG0_CONTROL0_INT1MD                                                    */
  PBCFG0_CONTROL0_INT1MD_00            = 0,     /*!< 00 : Interrupt based on level sensitivity.                                */
  PBCFG0_CONTROL0_INT1MD_01            = 1,     /*!< 01 : Interrupt based on edge sensitivity.                                 */
  PBCFG0_CONTROL0_INT1MD_10            = 2,     /*!< 10 : Reserved.                                                            */
} PBCFG0_CONTROL0_INT1MD_Enum;

/* ===========================================  PBCFG0 CONTROL0 INT1POL [12..12]  ============================================ */
typedef enum {                                  /*!< PBCFG0_CONTROL0_INT1POL                                                   */
  PBCFG0_CONTROL0_INT1POL_0            = 0,     /*!< 0 : A low value or falling edge on the selected pin will cause
                                                     interrupt.                                                                */
  PBCFG0_CONTROL0_INT1POL_1            = 1,     /*!< 1 : A high value or rising edge on the selected pin will cause
                                                     interrupt.                                                                */
} PBCFG0_CONTROL0_INT1POL_Enum;

/* =============================================  PBCFG0 CONTROL0 INT0EN [7..7]  ============================================= */
typedef enum {                                  /*!< PBCFG0_CONTROL0_INT0EN                                                    */
  PBCFG0_CONTROL0_INT0EN_Disable       = 0,     /*!< Disable : Disable external interrupt 0.                                   */
  PBCFG0_CONTROL0_INT0EN_Enable        = 1,     /*!< Enable : Enable external interrupt 0.                                     */
} PBCFG0_CONTROL0_INT0EN_Enum;

/* =============================================  PBCFG0 CONTROL0 INT0MD [5..6]  ============================================= */
typedef enum {                                  /*!< PBCFG0_CONTROL0_INT0MD                                                    */
  PBCFG0_CONTROL0_INT0MD_00            = 0,     /*!< 00 : Interrupt based on level sensitivity.                                */
  PBCFG0_CONTROL0_INT0MD_01            = 1,     /*!< 01 : Interrupt based on edge sensitivity.                                 */
  PBCFG0_CONTROL0_INT0MD_10            = 2,     /*!< 10 : Reserved.                                                            */
} PBCFG0_CONTROL0_INT0MD_Enum;

/* ============================================  PBCFG0 CONTROL0 INT0POL [4..4]  ============================================= */
typedef enum {                                  /*!< PBCFG0_CONTROL0_INT0POL                                                   */
  PBCFG0_CONTROL0_INT0POL_0            = 0,     /*!< 0 : A low value or falling edge on the selected pin will cause
                                                     interrupt.                                                                */
  PBCFG0_CONTROL0_INT0POL_1            = 1,     /*!< 1 : A high value or rising edge on the selected pin will cause
                                                     interrupt.                                                                */
} PBCFG0_CONTROL0_INT0POL_Enum;

/* =====================================================  CONTROL0_SET  ====================================================== */
/* =====================================================  CONTROL0_CLR  ====================================================== */
/* =======================================================  CONTROL1  ======================================================== */
/* =============================================  PBCFG0 CONTROL1 LOCK [31..31]  ============================================= */
typedef enum {                                  /*!< PBCFG0_CONTROL1_LOCK                                                      */
  PBCFG0_CONTROL1_LOCK_0               = 0,     /*!< 0 : Port Bank Configuration and Control registers are unlocked.           */
  PBCFG0_CONTROL1_LOCK_1               = 1,     /*!< 1 : The following registers are locked from write access: CONTROL1,
                                                     XBAR0L, XBAR0H, XBAR1, and all PBSKIP registers.                          */
} PBCFG0_CONTROL1_LOCK_Enum;

/* ===========================================  PBCFG0 CONTROL1 EVREGRMD [23..23]  =========================================== */
typedef enum {                                  /*!< PBCFG0_CONTROL1_EVREGRMD                                                  */
  PBCFG0_CONTROL1_EVREGRMD_0           = 0,     /*!< 0 : The pins used by the external regulator will default to
                                                     digital inputs with weak pull-up enabled on any reset.                    */
  PBCFG0_CONTROL1_EVREGRMD_Enable      = 1,     /*!< Enable : The pins used by the external regulator will default
                                                     to digital inputs with weak pull-up enabled only on Power-On
                                                     Reset. Their configured mode will be preserved through
                                                     all other resets.                                                         */
} PBCFG0_CONTROL1_EVREGRMD_Enum;

/* ============================================  PBCFG0 CONTROL1 MATMD [16..17]  ============================================= */
typedef enum {                                  /*!< PBCFG0_CONTROL1_MATMD                                                     */
  PBCFG0_CONTROL1_MATMD_00             = 0,     /*!< 00 : Port Match registers used to provide interrupt / wake sources.       */
  PBCFG0_CONTROL1_MATMD_01             = 1,     /*!< 01 : Port Match registers used to monitor output pin activity
                                                     for Capacitive Sensing measurements.                                      */
  PBCFG0_CONTROL1_MATMD_10             = 2,     /*!< 10 : Port Match registers used to monitor input pin activity
                                                     for Capacitive Sensing measurements.                                      */
  PBCFG0_CONTROL1_MATMD_11             = 3,     /*!< 11 : Reserved.                                                            */
} PBCFG0_CONTROL1_MATMD_Enum;

/* =============================================  PBCFG0 CONTROL1 EMIFEN [9..9]  ============================================= */
typedef enum {                                  /*!< PBCFG0_CONTROL1_EMIFEN                                                    */
  PBCFG0_CONTROL1_EMIFEN_Disable       = 0,     /*!< Disable : Disable the EMIF pins.                                          */
  PBCFG0_CONTROL1_EMIFEN_Enable        = 1,     /*!< Enable : EMIF is enabled and pinned out.                                  */
} PBCFG0_CONTROL1_EMIFEN_Enum;

/* ===========================================  PBCFG0 CONTROL1 EMIFCS1EN [8..8]  ============================================ */
typedef enum {                                  /*!< PBCFG0_CONTROL1_EMIFCS1EN                                                 */
  PBCFG0_CONTROL1_EMIFCS1EN_Disable    = 0,     /*!< Disable : Disable the EMIF CS1 pin.                                       */
  PBCFG0_CONTROL1_EMIFCS1EN_Enable     = 1,     /*!< Enable : Enable the CS1 pin if EMIFEN is also set to 1.                   */
} PBCFG0_CONTROL1_EMIFCS1EN_Enum;

/* ===========================================  PBCFG0 CONTROL1 EMIFBE0BEN [7..7]  =========================================== */
typedef enum {                                  /*!< PBCFG0_CONTROL1_EMIFBE0BEN                                                */
  PBCFG0_CONTROL1_EMIFBE0BEN_Disable   = 0,     /*!< Disable : Disable the EMIF BE0 pin.                                       */
  PBCFG0_CONTROL1_EMIFBE0BEN_Enable    = 1,     /*!< Enable : Enable the BE0 pin if EMIFEN is also set to 1.                   */
} PBCFG0_CONTROL1_EMIFBE0BEN_Enum;

/* =============================================  PBCFG0 CONTROL1 ETMEN [1..1]  ============================================== */
typedef enum {                                  /*!< PBCFG0_CONTROL1_ETMEN                                                     */
  PBCFG0_CONTROL1_ETMEN_0              = 0,     /*!< 0 : ETM not pinned out.                                                   */
  PBCFG0_CONTROL1_ETMEN_Enable         = 1,     /*!< Enable : ETM is enabled and pinned out.                                   */
} PBCFG0_CONTROL1_ETMEN_Enum;

/* =============================================  PBCFG0 CONTROL1 JTAGEN [0..0]  ============================================= */
typedef enum {                                  /*!< PBCFG0_CONTROL1_JTAGEN                                                    */
  PBCFG0_CONTROL1_JTAGEN_0             = 0,     /*!< 0 : JTAG functionality is not pinned out.                                 */
  PBCFG0_CONTROL1_JTAGEN_1             = 1,     /*!< 1 : JTAG functionality is pinned out.                                     */
} PBCFG0_CONTROL1_JTAGEN_Enum;

/* =====================================================  CONTROL1_SET  ====================================================== */
/* =====================================================  CONTROL1_CLR  ====================================================== */
/* ========================================================  XBAR0L  ========================================================= */
/* ============================================  PBCFG0 XBAR0L TMR1EXEN [30..30]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR0L_TMR1EXEN                                                    */
  PBCFG0_XBAR0L_TMR1EXEN_Disable       = 0,     /*!< Disable : Disable TIMER1 EX on Crossbar 0.                                */
  PBCFG0_XBAR0L_TMR1EXEN_Enable        = 1,     /*!< Enable : Enable TIMER1 EX on Crossbar 0.                                  */
} PBCFG0_XBAR0L_TMR1EXEN_Enum;

/* ============================================  PBCFG0 XBAR0L TMR1CTEN [29..29]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR0L_TMR1CTEN                                                    */
  PBCFG0_XBAR0L_TMR1CTEN_Disable       = 0,     /*!< Disable : Disable TIMER1 CT on Crossbar 0.                                */
  PBCFG0_XBAR0L_TMR1CTEN_Enable        = 1,     /*!< Enable : Enable TIMER1 CT on Crossbar 0.                                  */
} PBCFG0_XBAR0L_TMR1CTEN_Enum;

/* ============================================  PBCFG0 XBAR0L TMR0EXEN [28..28]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR0L_TMR0EXEN                                                    */
  PBCFG0_XBAR0L_TMR0EXEN_Disable       = 0,     /*!< Disable : Disable TIMER0 EX on Crossbar 0.                                */
  PBCFG0_XBAR0L_TMR0EXEN_Enable        = 1,     /*!< Enable : Enable TIMER0 EX on Crossbar 0.                                  */
} PBCFG0_XBAR0L_TMR0EXEN_Enum;

/* ============================================  PBCFG0 XBAR0L TMR0CTEN [27..27]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR0L_TMR0CTEN                                                    */
  PBCFG0_XBAR0L_TMR0CTEN_Disable       = 0,     /*!< Disable : Disable TIMER0 CT on Crossbar 0.                                */
  PBCFG0_XBAR0L_TMR0CTEN_Enable        = 1,     /*!< Enable : Enable TIMER0 CT on Crossbar 0.                                  */
} PBCFG0_XBAR0L_TMR0CTEN_Enum;

/* ============================================  PBCFG0 XBAR0L CMP1AEN [26..26]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_CMP1AEN                                                     */
  PBCFG0_XBAR0L_CMP1AEN_Disable        = 0,     /*!< Disable : Disable Comparator 1 Asynchronous Output (CMP1A) on
                                                     Crossbar 0.                                                               */
  PBCFG0_XBAR0L_CMP1AEN_Enable         = 1,     /*!< Enable : Enable Comparator 1 Asynchronous Output (CMP1A) on
                                                     Crossbar 0.                                                               */
} PBCFG0_XBAR0L_CMP1AEN_Enum;

/* ============================================  PBCFG0 XBAR0L CMP1SEN [25..25]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_CMP1SEN                                                     */
  PBCFG0_XBAR0L_CMP1SEN_Disable        = 0,     /*!< Disable : Disable Comparator 1 Synchronous Output (CMP1S) on
                                                     Crossbar 0.                                                               */
  PBCFG0_XBAR0L_CMP1SEN_Enable         = 1,     /*!< Enable : Enable Comparator 1 Synchronous Output (CMP1S) on Crossbar
                                                     0.                                                                        */
} PBCFG0_XBAR0L_CMP1SEN_Enum;

/* ============================================  PBCFG0 XBAR0L CMP0AEN [24..24]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_CMP0AEN                                                     */
  PBCFG0_XBAR0L_CMP0AEN_Disable        = 0,     /*!< Disable : Disable Comparator 0 Asynchronous Output (CMP0A) on
                                                     Crossbar 0.                                                               */
  PBCFG0_XBAR0L_CMP0AEN_Enable         = 1,     /*!< Enable : Enable Comparator 0 Asynchronous Output (CMP0A) on
                                                     Crossbar 0.                                                               */
} PBCFG0_XBAR0L_CMP0AEN_Enum;

/* ============================================  PBCFG0 XBAR0L CMP0SEN [23..23]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_CMP0SEN                                                     */
  PBCFG0_XBAR0L_CMP0SEN_Disable        = 0,     /*!< Disable : Disable Comparator 0 Synchronous Output (CMP0S) on
                                                     Crossbar 0.                                                               */
  PBCFG0_XBAR0L_CMP0SEN_Enable         = 1,     /*!< Enable : Enable Comparator 0 Synchronous Output (CMP0S) on Crossbar
                                                     0.                                                                        */
} PBCFG0_XBAR0L_CMP0SEN_Enum;

/* =============================================  PBCFG0 XBAR0L I2C0EN [22..22]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_I2C0EN                                                      */
  PBCFG0_XBAR0L_I2C0EN_Disable         = 0,     /*!< Disable : Disable I2C0 SDA and SCL on Crossbar 0.                         */
  PBCFG0_XBAR0L_I2C0EN_Enable          = 1,     /*!< Enable : Enable I2C0 SDA and SCL on Crossbar 0.                           */
} PBCFG0_XBAR0L_I2C0EN_Enum;

/* ============================================  PBCFG0 XBAR0L I2S0TXEN [21..21]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR0L_I2S0TXEN                                                    */
  PBCFG0_XBAR0L_I2S0TXEN_Disable       = 0,     /*!< Disable : Disable I2S0 TX on Crossbar 0.                                  */
  PBCFG0_XBAR0L_I2S0TXEN_Enable        = 1,     /*!< Enable : Enable I2S0 TX on Crossbar 0.                                    */
} PBCFG0_XBAR0L_I2S0TXEN_Enum;

/* =============================================  PBCFG0 XBAR0L ECI1EN [20..20]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_ECI1EN                                                      */
  PBCFG0_XBAR0L_ECI1EN_Disable         = 0,     /*!< Disable : Disable PCA1 ECI on Crossbar 0.                                 */
  PBCFG0_XBAR0L_ECI1EN_Enable          = 1,     /*!< Enable : Enable PCA1 ECI on Crossbar 0.                                   */
} PBCFG0_XBAR0L_ECI1EN_Enum;

/* =============================================  PBCFG0 XBAR0L ECI0EN [19..19]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_ECI0EN                                                      */
  PBCFG0_XBAR0L_ECI0EN_Disable         = 0,     /*!< Disable : Disable PCA0 ECI on Crossbar 0.                                 */
  PBCFG0_XBAR0L_ECI0EN_Enable          = 1,     /*!< Enable : Enable PCA0 ECI on Crossbar 0.                                   */
} PBCFG0_XBAR0L_ECI0EN_Enum;

/* ============================================  PBCFG0 XBAR0L EECI0EN [18..18]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_EECI0EN                                                     */
  PBCFG0_XBAR0L_EECI0EN_Disable        = 0,     /*!< Disable : Disable EPCA0 ECI on Crossbar 0.                                */
  PBCFG0_XBAR0L_EECI0EN_Enable         = 1,     /*!< Enable : Enable EPCA0 ECI on Crossbar 0.                                  */
} PBCFG0_XBAR0L_EECI0EN_Enum;

/* =============================================  PBCFG0 XBAR0L PCA1EN [16..17]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_PCA1EN                                                      */
  PBCFG0_XBAR0L_PCA1EN_00              = 0,     /*!< 00 : Disable all PCA1 channels on Crossbar 0.                             */
  PBCFG0_XBAR0L_PCA1EN_01              = 1,     /*!< 01 : Enable PCA1 CEX0 on Crossbar 0.                                      */
  PBCFG0_XBAR0L_PCA1EN_10              = 2,     /*!< 10 : Reserved.                                                            */
  PBCFG0_XBAR0L_PCA1EN_11              = 3,     /*!< 11 : Enable PCA1 CEX0 and CEX1 on Crossbar 0.                             */
} PBCFG0_XBAR0L_PCA1EN_Enum;

/* =============================================  PBCFG0 XBAR0L PCA0EN [14..15]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_PCA0EN                                                      */
  PBCFG0_XBAR0L_PCA0EN_00              = 0,     /*!< 00 : Disable all PCA0 channels on Crossbar 0.                             */
  PBCFG0_XBAR0L_PCA0EN_01              = 1,     /*!< 01 : Enable PCA0 CEX0 on Crossbar 0.                                      */
  PBCFG0_XBAR0L_PCA0EN_10              = 2,     /*!< 10 : Reserved.                                                            */
  PBCFG0_XBAR0L_PCA0EN_11              = 3,     /*!< 11 : Enable PCA0 CEX0 and CEX1 on Crossbar 0.                             */
} PBCFG0_XBAR0L_PCA0EN_Enum;

/* =============================================  PBCFG0 XBAR0L EPCA0EN [8..10]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_EPCA0EN                                                     */
  PBCFG0_XBAR0L_EPCA0EN_000            = 0,     /*!< 000 : Disable all EPCA0 channels on Crossbar 0.                           */
  PBCFG0_XBAR0L_EPCA0EN_001            = 1,     /*!< 001 : Enable EPCA0 STD_CEX0 on Crossbar 0.                                */
  PBCFG0_XBAR0L_EPCA0EN_010            = 2,     /*!< 010 : Enable EPCA0 STD_CEX0 and STD_CEX1 on Crossbar 0.                   */
  PBCFG0_XBAR0L_EPCA0EN_011            = 3,     /*!< 011 : Enable EPCA0 STD_CEX0, STD_CEX1, and STD_CEX2 on Crossbar
                                                     0.                                                                        */
  PBCFG0_XBAR0L_EPCA0EN_100            = 4,     /*!< 100 : Enable EPCA0 STD_CEX0, STD_CEX1, STD_CEX2, and STD_CEX3
                                                     on Crossbar 0.                                                            */
  PBCFG0_XBAR0L_EPCA0EN_101            = 5,     /*!< 101 : Enable EPCA0 STD_CEX0, STD_CEX1, STD_CEX2, STD_CEX3, and
                                                     STD_CEX4 on Crossbar 0.                                                   */
  PBCFG0_XBAR0L_EPCA0EN_110            = 6,     /*!< 110 : Enable EPCA0 STD_CEX0, STD_CEX1, STD_CEX2, STD_CEX3, STD_CEX4,
                                                     and STD_CEX5 on Crossbar 0.                                               */
  PBCFG0_XBAR0L_EPCA0EN_111            = 7,     /*!< 111 : Reserved.                                                           */
} PBCFG0_XBAR0L_EPCA0EN_Enum;

/* ============================================  PBCFG0 XBAR0L USART1CEN [7..7]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_USART1CEN                                                   */
  PBCFG0_XBAR0L_USART1CEN_Disable      = 0,     /*!< Disable : Disable USART1 clock on Crossbar 0.                             */
  PBCFG0_XBAR0L_USART1CEN_Enable       = 1,     /*!< Enable : Enable USART1 clock on Crossbar 0.                               */
} PBCFG0_XBAR0L_USART1CEN_Enum;

/* ============================================  PBCFG0 XBAR0L USART1FCEN [6..6]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR0L_USART1FCEN                                                  */
  PBCFG0_XBAR0L_USART1FCEN_Disable     = 0,     /*!< Disable : Disable USART1 flow control on Crossbar 0.                      */
  PBCFG0_XBAR0L_USART1FCEN_Enable      = 1,     /*!< Enable : Enable USART1 flow control on Crossbar 0.                        */
} PBCFG0_XBAR0L_USART1FCEN_Enum;

/* =============================================  PBCFG0 XBAR0L USART1EN [5..5]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_USART1EN                                                    */
  PBCFG0_XBAR0L_USART1EN_Disable       = 0,     /*!< Disable : Disable USART1 RX and TX on Crossbar 0.                         */
  PBCFG0_XBAR0L_USART1EN_Enable        = 1,     /*!< Enable : Enable USART1 RX and TX on Crossbar 0.                           */
} PBCFG0_XBAR0L_USART1EN_Enum;

/* ============================================  PBCFG0 XBAR0L SPI0NSSEN [4..4]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_SPI0NSSEN                                                   */
  PBCFG0_XBAR0L_SPI0NSSEN_Disable      = 0,     /*!< Disable : Disable SPI0 NSS on Crossbar 0.                                 */
  PBCFG0_XBAR0L_SPI0NSSEN_Enable       = 1,     /*!< Enable : Enable SPI0 NSS on Crossbar 0.                                   */
} PBCFG0_XBAR0L_SPI0NSSEN_Enum;

/* ==============================================  PBCFG0 XBAR0L SPI0EN [3..3]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR0L_SPI0EN                                                      */
  PBCFG0_XBAR0L_SPI0EN_Disable         = 0,     /*!< Disable : Disable SPI0 SCK, MISO, and MOSI on Crossbar 0.                 */
  PBCFG0_XBAR0L_SPI0EN_Enable          = 1,     /*!< Enable : Enable SPI0 SCK, MISO, and MOSI on Crossbar 0.                   */
} PBCFG0_XBAR0L_SPI0EN_Enum;

/* ============================================  PBCFG0 XBAR0L USART0CEN [2..2]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_USART0CEN                                                   */
  PBCFG0_XBAR0L_USART0CEN_Disable      = 0,     /*!< Disable : Disable USART0 clock on Crossbar 0.                             */
  PBCFG0_XBAR0L_USART0CEN_Enable       = 1,     /*!< Enable : Enable USART0 clock on Crossbar 0.                               */
} PBCFG0_XBAR0L_USART0CEN_Enum;

/* ============================================  PBCFG0 XBAR0L USART0FCEN [1..1]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR0L_USART0FCEN                                                  */
  PBCFG0_XBAR0L_USART0FCEN_Disable     = 0,     /*!< Disable : Disable USART0 flow control on Crossbar 0.                      */
  PBCFG0_XBAR0L_USART0FCEN_Enable      = 1,     /*!< Enable : Enable USART0 flow control on Crossbar 0.                        */
} PBCFG0_XBAR0L_USART0FCEN_Enum;

/* =============================================  PBCFG0 XBAR0L USART0EN [0..0]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0L_USART0EN                                                    */
  PBCFG0_XBAR0L_USART0EN_Disable       = 0,     /*!< Disable : Disable USART0 RX and TX on Crossbar 0.                         */
  PBCFG0_XBAR0L_USART0EN_Enable        = 1,     /*!< Enable : Enable USART0 RX and TX on Crossbar 0.                           */
} PBCFG0_XBAR0L_USART0EN_Enum;

/* ======================================================  XBAR0L_SET  ======================================================= */
/* ======================================================  XBAR0L_CLR  ======================================================= */
/* ========================================================  XBAR0H  ========================================================= */
/* ============================================  PBCFG0 XBAR0H XBAR0EN [31..31]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0H_XBAR0EN                                                     */
  PBCFG0_XBAR0H_XBAR0EN_Disable        = 0,     /*!< Disable : Disable Crossbar 0.                                             */
  PBCFG0_XBAR0H_XBAR0EN_Enable         = 1,     /*!< Enable : Enable Crossbar 0.                                               */
} PBCFG0_XBAR0H_XBAR0EN_Enum;

/* ==============================================  PBCFG0 XBAR0H AHBEN [7..7]  =============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR0H_AHBEN                                                       */
  PBCFG0_XBAR0H_AHBEN_Disable          = 0,     /*!< Disable : Disable the AHB Clock / 16 output on Crossbar 0.                */
  PBCFG0_XBAR0H_AHBEN_Enable           = 1,     /*!< Enable : Enable the AHB Clock / 16 output on Crossbar 0.                  */
} PBCFG0_XBAR0H_AHBEN_Enum;

/* ============================================  PBCFG0 XBAR0H SPI2NSSEN [6..6]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0H_SPI2NSSEN                                                   */
  PBCFG0_XBAR0H_SPI2NSSEN_Disable      = 0,     /*!< Disable : Disable SPI2 NSS on Crossbar 0.                                 */
  PBCFG0_XBAR0H_SPI2NSSEN_Enable       = 1,     /*!< Enable : Enable SPI2 NSS on Crossbar 0.                                   */
} PBCFG0_XBAR0H_SPI2NSSEN_Enum;

/* ==============================================  PBCFG0 XBAR0H SPI2EN [5..5]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR0H_SPI2EN                                                      */
  PBCFG0_XBAR0H_SPI2EN_Disable         = 0,     /*!< Disable : Disable SPI2 SCK, MISO, and MOSI on Crossbar 0.                 */
  PBCFG0_XBAR0H_SPI2EN_Enable          = 1,     /*!< Enable : Enable SPI2 SCK, MISO, and MOSI on Crossbar 0.                   */
} PBCFG0_XBAR0H_SPI2EN_Enum;

/* ============================================  PBCFG0 XBAR0H SPI1NSSEN [4..4]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0H_SPI1NSSEN                                                   */
  PBCFG0_XBAR0H_SPI1NSSEN_Disable      = 0,     /*!< Disable : Disable SPI1 NSS on Crossbar 0.                                 */
  PBCFG0_XBAR0H_SPI1NSSEN_Enable       = 1,     /*!< Enable : Enable SPI1 NSS on Crossbar 0.                                   */
} PBCFG0_XBAR0H_SPI1NSSEN_Enum;

/* ==============================================  PBCFG0 XBAR0H SPI1EN [3..3]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR0H_SPI1EN                                                      */
  PBCFG0_XBAR0H_SPI1EN_Disable         = 0,     /*!< Disable : Disable SPI1 SCK, MISO, and MOSI on Crossbar 0.                 */
  PBCFG0_XBAR0H_SPI1EN_Enable          = 1,     /*!< Enable : Enable SPI1 SCK, MISO, and MOSI on Crossbar 0.                   */
} PBCFG0_XBAR0H_SPI1EN_Enum;

/* =============================================  PBCFG0 XBAR0H UART1EN [2..2]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR0H_UART1EN                                                     */
  PBCFG0_XBAR0H_UART1EN_Disable        = 0,     /*!< Disable : Disable UART1 RX and TX on Crossbar 0.                          */
  PBCFG0_XBAR0H_UART1EN_Enable         = 1,     /*!< Enable : Enable UART1 RX and TX on Crossbar 0.                            */
} PBCFG0_XBAR0H_UART1EN_Enum;

/* ============================================  PBCFG0 XBAR0H UART0FCEN [1..1]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR0H_UART0FCEN                                                   */
  PBCFG0_XBAR0H_UART0FCEN_Disable      = 0,     /*!< Disable : Disable UART0 flow control on Crossbar 0.                       */
  PBCFG0_XBAR0H_UART0FCEN_Enable       = 1,     /*!< Enable : Enable UART0 flow control on Crossbar 0.                         */
} PBCFG0_XBAR0H_UART0FCEN_Enum;

/* =============================================  PBCFG0 XBAR0H UART0EN [0..0]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR0H_UART0EN                                                     */
  PBCFG0_XBAR0H_UART0EN_Disable        = 0,     /*!< Disable : Disable UART0 RX and TX on Crossbar 0.                          */
  PBCFG0_XBAR0H_UART0EN_Enable         = 1,     /*!< Enable : Enable UART0 RX and TX on Crossbar 0.                            */
} PBCFG0_XBAR0H_UART0EN_Enum;

/* ======================================================  XBAR0H_SET  ======================================================= */
/* ======================================================  XBAR0H_CLR  ======================================================= */
/* =========================================================  XBAR1  ========================================================= */
/* =============================================  PBCFG0 XBAR1 XBAR1EN [31..31]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_XBAR1EN                                                      */
  PBCFG0_XBAR1_XBAR1EN_Disable         = 0,     /*!< Disable : Disable Crossbar 1.                                             */
  PBCFG0_XBAR1_XBAR1EN_Enable          = 1,     /*!< Enable : Enable Crossbar 1.                                               */
} PBCFG0_XBAR1_XBAR1EN_Enum;

/* ============================================  PBCFG0 XBAR1 KILLHDEN [21..21]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_KILLHDEN                                                     */
  PBCFG0_XBAR1_KILLHDEN_Disable        = 0,     /*!< Disable : Disable the PB High Drive Kill Pin on Crossbar 1.               */
  PBCFG0_XBAR1_KILLHDEN_Enable         = 1,     /*!< Enable : Enable the PB High Drive Kill Pin on Crossbar 1.                 */
} PBCFG0_XBAR1_KILLHDEN_Enum;

/* =============================================  PBCFG0 XBAR1 I2C1EN [20..20]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_I2C1EN                                                       */
  PBCFG0_XBAR1_I2C1EN_Disable          = 0,     /*!< Disable : Disable I2C1 SDA and SCL on Crossbar 1.                         */
  PBCFG0_XBAR1_I2C1EN_Enable           = 1,     /*!< Enable : Enable I2C1 SDA and SCL on Crossbar 1.                           */
} PBCFG0_XBAR1_I2C1EN_Enum;

/* =============================================  PBCFG0 XBAR1 LPT0OEN [19..19]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_LPT0OEN                                                      */
  PBCFG0_XBAR1_LPT0OEN_Disable         = 0,     /*!< Disable : Disable LPTIMER0 Output on Crossbar 1.                          */
  PBCFG0_XBAR1_LPT0OEN_Enable          = 1,     /*!< Enable : Enable LPTIMER0 Output on Crossbar 1.                            */
} PBCFG0_XBAR1_LPT0OEN_Enum;

/* ============================================  PBCFG0 XBAR1 I2S0RXEN [17..17]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_I2S0RXEN                                                     */
  PBCFG0_XBAR1_I2S0RXEN_Disable        = 0,     /*!< Disable : Disable I2S0 RX on Crossbar 1.                                  */
  PBCFG0_XBAR1_I2S0RXEN_Enable         = 1,     /*!< Enable : Enable I2S0 RX on Crossbar 1.                                    */
} PBCFG0_XBAR1_I2S0RXEN_Enum;

/* =============================================  PBCFG0 XBAR1 UART1EN [16..16]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_UART1EN                                                      */
  PBCFG0_XBAR1_UART1EN_Disable         = 0,     /*!< Disable : Disable UART1 RX and TX on Crossbar 1.                          */
  PBCFG0_XBAR1_UART1EN_Enable          = 1,     /*!< Enable : Enable UART1 RX and TX on Crossbar 1.                            */
} PBCFG0_XBAR1_UART1EN_Enum;

/* =============================================  PBCFG0 XBAR1 I2C0EN [15..15]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_I2C0EN                                                       */
  PBCFG0_XBAR1_I2C0EN_Disable          = 0,     /*!< Disable : Disable I2C0 SDA and SCL on Crossbar 1.                         */
  PBCFG0_XBAR1_I2C0EN_Enable           = 1,     /*!< Enable : Enable I2C0 SDA and SCL on Crossbar 1.                           */
} PBCFG0_XBAR1_I2C0EN_Enum;

/* ============================================  PBCFG0 XBAR1 I2S0TXEN [14..14]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_I2S0TXEN                                                     */
  PBCFG0_XBAR1_I2S0TXEN_Disable        = 0,     /*!< Disable : Disable I2S0 TX on Crossbar 1.                                  */
  PBCFG0_XBAR1_I2S0TXEN_Enable         = 1,     /*!< Enable : Enable I2S0 TX on Crossbar 1.                                    */
} PBCFG0_XBAR1_I2S0TXEN_Enum;

/* ============================================  PBCFG0 XBAR1 UART0FCEN [13..13]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR1_UART0FCEN                                                    */
  PBCFG0_XBAR1_UART0FCEN_Disable       = 0,     /*!< Disable : Disable UART0 flow control on Crossbar 1.                       */
  PBCFG0_XBAR1_UART0FCEN_Enable        = 1,     /*!< Enable : Enable UART0 flow control on Crossbar1.                          */
} PBCFG0_XBAR1_UART0FCEN_Enum;

/* =============================================  PBCFG0 XBAR1 UART0EN [12..12]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_UART0EN                                                      */
  PBCFG0_XBAR1_UART0EN_Disable         = 0,     /*!< Disable : Disable UART0 RX and TX on Crossbar 1.                          */
  PBCFG0_XBAR1_UART0EN_Enable          = 1,     /*!< Enable : Enable UART0 RX and TX on Crossbar 1.                            */
} PBCFG0_XBAR1_UART0EN_Enum;

/* ============================================  PBCFG0 XBAR1 USART1CEN [11..11]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR1_USART1CEN                                                    */
  PBCFG0_XBAR1_USART1CEN_Disable       = 0,     /*!< Disable : Disable USART1 clock on Crossbar 1.                             */
  PBCFG0_XBAR1_USART1CEN_Enable        = 1,     /*!< Enable : Enable USART1 clock on Crossbar 1.                               */
} PBCFG0_XBAR1_USART1CEN_Enum;

/* ===========================================  PBCFG0 XBAR1 USART1FCEN [10..10]  ============================================ */
typedef enum {                                  /*!< PBCFG0_XBAR1_USART1FCEN                                                   */
  PBCFG0_XBAR1_USART1FCEN_Disable      = 0,     /*!< Disable : Disable USART1 flow control on Crossbar 1.                      */
  PBCFG0_XBAR1_USART1FCEN_Enable       = 1,     /*!< Enable : Enable USART1 flow control on Crossbar 1.                        */
} PBCFG0_XBAR1_USART1FCEN_Enum;

/* =============================================  PBCFG0 XBAR1 USART1EN [9..9]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_USART1EN                                                     */
  PBCFG0_XBAR1_USART1EN_Disable        = 0,     /*!< Disable : Disable USART1 RX and TX on Crossbar 1.                         */
  PBCFG0_XBAR1_USART1EN_Enable         = 1,     /*!< Enable : Enable USART1 RX and TX on Crossbar 1.                           */
} PBCFG0_XBAR1_USART1EN_Enum;

/* =============================================  PBCFG0 XBAR1 SPI2NSSEN [8..8]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_SPI2NSSEN                                                    */
  PBCFG0_XBAR1_SPI2NSSEN_Disable       = 0,     /*!< Disable : Disable SPI2 NSS on Crossbar 1.                                 */
  PBCFG0_XBAR1_SPI2NSSEN_Enable        = 1,     /*!< Enable : Enable SPI2 NSS on Crossbar 1.                                   */
} PBCFG0_XBAR1_SPI2NSSEN_Enum;

/* ==============================================  PBCFG0 XBAR1 SPI2EN [7..7]  =============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_SPI2EN                                                       */
  PBCFG0_XBAR1_SPI2EN_Disable          = 0,     /*!< Disable : Disable SPI2 SCK, MISO, and MOSI on Crossbar 1.                 */
  PBCFG0_XBAR1_SPI2EN_Enable           = 1,     /*!< Enable : Enable SPI2 SCK, MISO, and MOSI on Crossbar 1.                   */
} PBCFG0_XBAR1_SPI2EN_Enum;

/* ==============================================  PBCFG0 XBAR1 RTC0EN [6..6]  =============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_RTC0EN                                                       */
  PBCFG0_XBAR1_RTC0EN_Disable          = 0,     /*!< Disable : Disable RTC0 Output on Crossbar 1.                              */
  PBCFG0_XBAR1_RTC0EN_Enable           = 1,     /*!< Enable : Enable RTC0 Output on Crossbar 1.                                */
} PBCFG0_XBAR1_RTC0EN_Enum;

/* =============================================  PBCFG0 XBAR1 SPI1NSSEN [5..5]  ============================================= */
typedef enum {                                  /*!< PBCFG0_XBAR1_SPI1NSSEN                                                    */
  PBCFG0_XBAR1_SPI1NSSEN_Disable       = 0,     /*!< Disable : Disable SPI1 NSS on Crossbar 1.                                 */
  PBCFG0_XBAR1_SPI1NSSEN_Enable        = 1,     /*!< Enable : Enable SPI1 NSS on Crossbar 1.                                   */
} PBCFG0_XBAR1_SPI1NSSEN_Enum;

/* ==============================================  PBCFG0 XBAR1 SPI1EN [4..4]  =============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_SPI1EN                                                       */
  PBCFG0_XBAR1_SPI1EN_Disable          = 0,     /*!< Disable : Disable SPI1 SCK, MISO, and MOSI on Crossbar 1.                 */
  PBCFG0_XBAR1_SPI1EN_Enable           = 1,     /*!< Enable : Enable SPI1 SCK, MISO, and MOSI on Crossbar 1.                   */
} PBCFG0_XBAR1_SPI1EN_Enum;

/* ==============================================  PBCFG0 XBAR1 CMP1SEN [3..3]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_CMP1SEN                                                      */
  PBCFG0_XBAR1_CMP1SEN_Disable         = 0,     /*!< Disable : Disable Comparator 1 Synchronous Output (CMP1S) on
                                                     Crossbar 1.                                                               */
  PBCFG0_XBAR1_CMP1SEN_Enable          = 1,     /*!< Enable : Enable Comparator 1 Synchronous Output (CMP1S) on Crossbar
                                                     1.                                                                        */
} PBCFG0_XBAR1_CMP1SEN_Enum;

/* ==============================================  PBCFG0 XBAR1 CMP0SEN [2..2]  ============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_CMP0SEN                                                      */
  PBCFG0_XBAR1_CMP0SEN_Disable         = 0,     /*!< Disable : Disable Comparator 0 Synchronous Output (CMP0S) on
                                                     Crossbar 1.                                                               */
  PBCFG0_XBAR1_CMP0SEN_Enable          = 1,     /*!< Enable : Enable Comparator 0 Synchronous Output (CMP0S) on Crossbar
                                                     1.                                                                        */
} PBCFG0_XBAR1_CMP0SEN_Enum;

/* ==============================================  PBCFG0 XBAR1 SSG0EN [0..1]  =============================================== */
typedef enum {                                  /*!< PBCFG0_XBAR1_SSG0EN                                                       */
  PBCFG0_XBAR1_SSG0EN_00               = 0,     /*!< 00 : Disable all SSG0 channels on Crossbar 1.                             */
  PBCFG0_XBAR1_SSG0EN_01               = 1,     /*!< 01 : Enable SSG0 EX0 on Crossbar 1.                                       */
  PBCFG0_XBAR1_SSG0EN_10               = 2,     /*!< 10 : Enable SSG0 EX0 and EX1 on Crossbar 1.                               */
  PBCFG0_XBAR1_SSG0EN_11               = 3,     /*!< 11 : Enable SSG0 EX0, EX1, EX2, and EX3 on Crossbar 1.                    */
} PBCFG0_XBAR1_SSG0EN_Enum;

/* =======================================================  XBAR1_SET  ======================================================= */
/* =======================================================  XBAR1_CLR  ======================================================= */
/* =========================================================  PBKEY  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          PBSTD2                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  PB  =========================================================== */
/* ========================================================  PB_SET  ========================================================= */
/* ========================================================  PB_CLR  ========================================================= */
/* ========================================================  PB_MSK  ========================================================= */
/* =========================================================  PBPIN  ========================================================= */
/* ========================================================  PBMDSEL  ======================================================== */
/* ======================================================  PBMDSEL_SET  ====================================================== */
/* ======================================================  PBMDSEL_CLR  ====================================================== */
/* =======================================================  PBSKIPEN  ======================================================== */
/* =====================================================  PBSKIPEN_SET  ====================================================== */
/* =====================================================  PBSKIPEN_CLR  ====================================================== */
/* ========================================================  PBOUTMD  ======================================================== */
/* ======================================================  PBOUTMD_SET  ====================================================== */
/* ======================================================  PBOUTMD_CLR  ====================================================== */
/* =========================================================  PBDRV  ========================================================= */
/* =======================================================  PBDRV_SET  ======================================================= */
/* =======================================================  PBDRV_CLR  ======================================================= */
/* ==========================================================  PM  =========================================================== */
/* ========================================================  PM_SET  ========================================================= */
/* ========================================================  PM_CLR  ========================================================= */
/* =========================================================  PMEN  ========================================================== */
/* =======================================================  PMEN_SET  ======================================================== */
/* =======================================================  PMEN_CLR  ======================================================== */
/* ========================================================  PBLOCK  ========================================================= */
/* ========================================================  PBPGEN  ========================================================= */
/* =======================================================  PBPGPHASE  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           PBHD4                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  PB  =========================================================== */
/* ========================================================  PB_SET  ========================================================= */
/* ========================================================  PB_CLR  ========================================================= */
/* ========================================================  PB_MSK  ========================================================= */
/* =========================================================  PBPIN  ========================================================= */
/* ========================================================  PBMDSEL  ======================================================== */
/* ======================================================  PBMDSEL_SET  ====================================================== */
/* ======================================================  PBMDSEL_CLR  ====================================================== */
/* =========================================================  PBDEN  ========================================================= */
/* =======================================================  PBDEN_SET  ======================================================= */
/* =======================================================  PBDEN_CLR  ======================================================= */
/* =========================================================  PBDRV  ========================================================= */
/* =============================================  PBHD4 PBDRV PBVTRKEN [23..23]  ============================================= */
typedef enum {                                  /*!< PBHD4_PBDRV_PBVTRKEN                                                      */
  PBHD4_PBDRV_PBVTRKEN_Disable         = 0,     /*!< Disable : Disable VIOHD tracking.                                         */
  PBHD4_PBDRV_PBVTRKEN_Enable          = 1,     /*!< Enable : Enable VIOHD tracking.                                           */
} PBHD4_PBDRV_PBVTRKEN_Enum;

/* =============================================  PBHD4 PBDRV PBDRVEN [22..22]  ============================================== */
typedef enum {                                  /*!< PBHD4_PBDRV_PBDRVEN                                                       */
  PBHD4_PBDRV_PBDRVEN_Disable          = 0,     /*!< Disable : Disable the port drivers.                                       */
  PBHD4_PBDRV_PBDRVEN_Enable           = 1,     /*!< Enable : Enable the port drivers.                                         */
} PBHD4_PBDRV_PBDRVEN_Enum;

/* ==============================================  PBHD4 PBDRV PBLVMD [17..17]  ============================================== */
typedef enum {                                  /*!< PBHD4_PBDRV_PBLVMD                                                        */
  PBHD4_PBDRV_PBLVMD_0                 = 0,     /*!< 0 : Port configured for normal mode.                                      */
  PBHD4_PBDRV_PBLVMD_1                 = 1,     /*!< 1 : Port configured for low power mode.                                   */
} PBHD4_PBDRV_PBLVMD_Enum;

/* =======================================================  PBDRV_SET  ======================================================= */
/* =======================================================  PBDRV_CLR  ======================================================= */
/* =======================================================  PBILIMIT  ======================================================== */
/* =====================================================  PBILIMIT_SET  ====================================================== */
/* =====================================================  PBILIMIT_CLR  ====================================================== */
/* ========================================================  PBFSEL  ========================================================= */
/* =============================================  PBHD4 PBFSEL PB5SEL [10..12]  ============================================== */
typedef enum {                                  /*!< PBHD4_PBFSEL_PB5SEL                                                       */
  PBHD4_PBFSEL_PB5SEL_000              = 0,     /*!< 000 : Pin configured for GPIO.                                            */
  PBHD4_PBFSEL_PB5SEL_001              = 1,     /*!< 001 : Pin configured for Port Mapped Level Shift.                         */
  PBHD4_PBFSEL_PB5SEL_010              = 2,     /*!< 010 : Pin configured for EPCA0 output.                                    */
  PBHD4_PBFSEL_PB5SEL_011              = 3,     /*!< 011 : Pin configured for UART1 CTS.                                       */
  PBHD4_PBFSEL_PB5SEL_100              = 4,     /*!< 100 : Pin configured for LPTIMER0 toggle output.                          */
  PBHD4_PBFSEL_PB5SEL_101              = 5,     /*!< 101 : Reserved.                                                           */
} PBHD4_PBFSEL_PB5SEL_Enum;

/* ==============================================  PBHD4 PBFSEL PB4SEL [8..9]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBFSEL_PB4SEL                                                       */
  PBHD4_PBFSEL_PB4SEL_00               = 0,     /*!< 00 : Pin configured for GPIO.                                             */
  PBHD4_PBFSEL_PB4SEL_01               = 1,     /*!< 01 : Pin configured for Port Mapped Level Shift.                          */
  PBHD4_PBFSEL_PB4SEL_10               = 2,     /*!< 10 : Pin configured for EPCA0 output.                                     */
  PBHD4_PBFSEL_PB4SEL_11               = 3,     /*!< 11 : Pin configured for UART1 RTS.                                        */
} PBHD4_PBFSEL_PB4SEL_Enum;

/* ==============================================  PBHD4 PBFSEL PB3SEL [6..7]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBFSEL_PB3SEL                                                       */
  PBHD4_PBFSEL_PB3SEL_00               = 0,     /*!< 00 : Pin configured for GPIO.                                             */
  PBHD4_PBFSEL_PB3SEL_01               = 1,     /*!< 01 : Pin configured for Port Mapped Level Shift.                          */
  PBHD4_PBFSEL_PB3SEL_10               = 2,     /*!< 10 : Pin configured for EPCA0 output.                                     */
  PBHD4_PBFSEL_PB3SEL_11               = 3,     /*!< 11 : Pin configured for UART1 RX.                                         */
} PBHD4_PBFSEL_PB3SEL_Enum;

/* ==============================================  PBHD4 PBFSEL PB2SEL [4..5]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBFSEL_PB2SEL                                                       */
  PBHD4_PBFSEL_PB2SEL_00               = 0,     /*!< 00 : Pin configured for GPIO.                                             */
  PBHD4_PBFSEL_PB2SEL_01               = 1,     /*!< 01 : Pin configured for Port Mapped Level Shift.                          */
  PBHD4_PBFSEL_PB2SEL_10               = 2,     /*!< 10 : Pin configured for EPCA0 output.                                     */
  PBHD4_PBFSEL_PB2SEL_11               = 3,     /*!< 11 : Pin configured for UART1 TX.                                         */
} PBHD4_PBFSEL_PB2SEL_Enum;

/* ==============================================  PBHD4 PBFSEL PB1SEL [2..3]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBFSEL_PB1SEL                                                       */
  PBHD4_PBFSEL_PB1SEL_00               = 0,     /*!< 00 : Pin configured for GPIO.                                             */
  PBHD4_PBFSEL_PB1SEL_01               = 1,     /*!< 01 : Pin configured for Port Mapped Level Shift.                          */
  PBHD4_PBFSEL_PB1SEL_10               = 2,     /*!< 10 : Pin configured for EPCA0 output.                                     */
  PBHD4_PBFSEL_PB1SEL_11               = 3,     /*!< 11 : Reserved.                                                            */
} PBHD4_PBFSEL_PB1SEL_Enum;

/* ==============================================  PBHD4 PBFSEL PB0SEL [0..1]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBFSEL_PB0SEL                                                       */
  PBHD4_PBFSEL_PB0SEL_00               = 0,     /*!< 00 : Pin configured for GPIO.                                             */
  PBHD4_PBFSEL_PB0SEL_01               = 1,     /*!< 01 : Pin configured for Port Mapped Level Shift.                          */
  PBHD4_PBFSEL_PB0SEL_10               = 2,     /*!< 10 : Pin configured for EPCA0 output.                                     */
  PBHD4_PBFSEL_PB0SEL_11               = 3,     /*!< 11 : Reserved.                                                            */
} PBHD4_PBFSEL_PB0SEL_Enum;

/* =========================================================  PBSS  ========================================================== */
/* ==============================================  PBHD4 PBSS SSMDEN [16..16]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBSS_SSMDEN                                                         */
  PBHD4_PBSS_SSMDEN_Disable            = 0,     /*!< Disable : Disable Safe State.                                             */
  PBHD4_PBSS_SSMDEN_1                  = 1,     /*!< 1 : Enter Safe State. Each PBn.x pin will enter the states defined
                                                     by PBxSSSEL.                                                              */
} PBHD4_PBSS_SSMDEN_Enum;

/* =============================================  PBHD4 PBSS PB5SSSEL [10..11]  ============================================== */
typedef enum {                                  /*!< PBHD4_PBSS_PB5SSSEL                                                       */
  PBHD4_PBSS_PB5SSSEL_00               = 0,     /*!< 00 : Place PBn.5 in a High Impedance state.                               */
  PBHD4_PBSS_PB5SSSEL_01               = 1,     /*!< 01 : Drive PBn.5 High.                                                    */
  PBHD4_PBSS_PB5SSSEL_10               = 2,     /*!< 10 : Drive PBn.5 Low.                                                     */
  PBHD4_PBSS_PB5SSSEL_11               = 3,     /*!< 11 : Ignore the safe state signal (weak pull-ups disabled).               */
} PBHD4_PBSS_PB5SSSEL_Enum;

/* ==============================================  PBHD4 PBSS PB4SSSEL [8..9]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBSS_PB4SSSEL                                                       */
  PBHD4_PBSS_PB4SSSEL_00               = 0,     /*!< 00 : Place PBn.4 in a High Impedance state.                               */
  PBHD4_PBSS_PB4SSSEL_01               = 1,     /*!< 01 : Drive PBn.4 High.                                                    */
  PBHD4_PBSS_PB4SSSEL_10               = 2,     /*!< 10 : Drive PBn.4 Low.                                                     */
  PBHD4_PBSS_PB4SSSEL_11               = 3,     /*!< 11 : Ignore the safe state signal (weak pull-ups disabled).               */
} PBHD4_PBSS_PB4SSSEL_Enum;

/* ==============================================  PBHD4 PBSS PB3SSSEL [6..7]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBSS_PB3SSSEL                                                       */
  PBHD4_PBSS_PB3SSSEL_00               = 0,     /*!< 00 : Place PBn.3 in a High Impedance state.                               */
  PBHD4_PBSS_PB3SSSEL_01               = 1,     /*!< 01 : Drive PBn.3 High.                                                    */
  PBHD4_PBSS_PB3SSSEL_10               = 2,     /*!< 10 : Drive PBn.3 Low.                                                     */
  PBHD4_PBSS_PB3SSSEL_11               = 3,     /*!< 11 : Ignore the safe state signal (weak pull-ups disabled).               */
} PBHD4_PBSS_PB3SSSEL_Enum;

/* ==============================================  PBHD4 PBSS PB2SSSEL [4..5]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBSS_PB2SSSEL                                                       */
  PBHD4_PBSS_PB2SSSEL_00               = 0,     /*!< 00 : Place PBn.2 in a High Impedance state.                               */
  PBHD4_PBSS_PB2SSSEL_01               = 1,     /*!< 01 : Drive PBn.2 High.                                                    */
  PBHD4_PBSS_PB2SSSEL_10               = 2,     /*!< 10 : Drive PBn.2 Low.                                                     */
  PBHD4_PBSS_PB2SSSEL_11               = 3,     /*!< 11 : Ignore the safe state signal (weak pull-ups disabled).               */
} PBHD4_PBSS_PB2SSSEL_Enum;

/* ==============================================  PBHD4 PBSS PB1SSSEL [2..3]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBSS_PB1SSSEL                                                       */
  PBHD4_PBSS_PB1SSSEL_00               = 0,     /*!< 00 : Place PBn.1 in a High Impedance state.                               */
  PBHD4_PBSS_PB1SSSEL_01               = 1,     /*!< 01 : Drive PBn.1 High.                                                    */
  PBHD4_PBSS_PB1SSSEL_10               = 2,     /*!< 10 : Drive PBn.1 Low.                                                     */
  PBHD4_PBSS_PB1SSSEL_11               = 3,     /*!< 11 : Ignore the safe state signal (weak pull-ups disabled).               */
} PBHD4_PBSS_PB1SSSEL_Enum;

/* ==============================================  PBHD4 PBSS PB0SSSEL [0..1]  =============================================== */
typedef enum {                                  /*!< PBHD4_PBSS_PB0SSSEL                                                       */
  PBHD4_PBSS_PB0SSSEL_00               = 0,     /*!< 00 : Place PBn.0 in a High Impedance state.                               */
  PBHD4_PBSS_PB0SSSEL_01               = 1,     /*!< 01 : Drive PBn.0 High.                                                    */
  PBHD4_PBSS_PB0SSSEL_10               = 2,     /*!< 10 : Drive PBn.0 Low.                                                     */
  PBHD4_PBSS_PB0SSSEL_11               = 3,     /*!< 11 : Ignore the safe state signal (weak pull-ups disabled).               */
} PBHD4_PBSS_PB0SSSEL_Enum;

/* =======================================================  PBSS_SET  ======================================================== */
/* =======================================================  PBSS_CLR  ======================================================== */
/* ========================================================  PBLOCK  ========================================================= */


/* =========================================================================================================================== */
/* ================                                         CLKCTRL0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ===========================================  CLKCTRL0 CONTROL EXTESEL [28..28]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_CONTROL_EXTESEL                                                  */
  CLKCTRL0_CONTROL_EXTESEL_0           = 0,     /*!< 0 : External clock generated by both rising and falling edges
                                                     of the external oscilla-tor.                                              */
  CLKCTRL0_CONTROL_EXTESEL_1           = 1,     /*!< 1 : External clock generated by only rising edges of the external
                                                     oscillator.                                                               */
} CLKCTRL0_CONTROL_EXTESEL_Enum;

/* ===========================================  CLKCTRL0 CONTROL APBDIV [16..16]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_CONTROL_APBDIV                                                   */
  CLKCTRL0_CONTROL_APBDIV_0            = 0,     /*!< 0 : APB clock is the same as the AHB clock (divided by 1).                */
  CLKCTRL0_CONTROL_APBDIV_1            = 1,     /*!< 1 : APB clock is the AHB clock divided by 2.                              */
} CLKCTRL0_CONTROL_APBDIV_Enum;

/* ============================================  CLKCTRL0 CONTROL AHBDIV [8..10]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_CONTROL_AHBDIV                                                   */
  CLKCTRL0_CONTROL_AHBDIV_000          = 0,     /*!< 000 : AHB clock divided by 1.                                             */
  CLKCTRL0_CONTROL_AHBDIV_001          = 1,     /*!< 001 : AHB clock divided by 2.                                             */
  CLKCTRL0_CONTROL_AHBDIV_010          = 2,     /*!< 010 : AHB clock divided by 4.                                             */
  CLKCTRL0_CONTROL_AHBDIV_011          = 3,     /*!< 011 : AHB clock divided by 8.                                             */
  CLKCTRL0_CONTROL_AHBDIV_100          = 4,     /*!< 100 : AHB clock divided by 16.                                            */
  CLKCTRL0_CONTROL_AHBDIV_101          = 5,     /*!< 101 : AHB clock divided by 32.                                            */
  CLKCTRL0_CONTROL_AHBDIV_110          = 6,     /*!< 110 : AHB clock divided by 64.                                            */
  CLKCTRL0_CONTROL_AHBDIV_111          = 7,     /*!< 111 : AHB clock divided by 128.                                           */
} CLKCTRL0_CONTROL_AHBDIV_Enum;

/* ============================================  CLKCTRL0 CONTROL AHBSEL [0..2]  ============================================= */
typedef enum {                                  /*!< CLKCTRL0_CONTROL_AHBSEL                                                   */
  CLKCTRL0_CONTROL_AHBSEL_000          = 0,     /*!< 000 : AHB clock source is the Low-Power Oscillator.                       */
  CLKCTRL0_CONTROL_AHBSEL_001          = 1,     /*!< 001 : AHB clock source is the Low-Frequency Oscillator.                   */
  CLKCTRL0_CONTROL_AHBSEL_010          = 2,     /*!< 010 : AHB clock source is the RTC Oscillator.                             */
  CLKCTRL0_CONTROL_AHBSEL_011          = 3,     /*!< 011 : AHB clock source is the External Oscillator.                        */
  CLKCTRL0_CONTROL_AHBSEL_100          = 4,     /*!< 100 : AHB clock source is the USB Oscillator.                             */
  CLKCTRL0_CONTROL_AHBSEL_101          = 5,     /*!< 101 : AHB clock source is the PLL.                                        */
  CLKCTRL0_CONTROL_AHBSEL_110          = 6,     /*!< 110 : AHB clock source is a divided version of the Low-Power
                                                     Oscillator.                                                               */
  CLKCTRL0_CONTROL_AHBSEL_111          = 7,     /*!< 111 : Reserved.                                                           */
} CLKCTRL0_CONTROL_AHBSEL_Enum;

/* ========================================================  AHBCLKG  ======================================================== */
/* ===========================================  CLKCTRL0 AHBCLKG USB0BCEN [4..4]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_AHBCLKG_USB0BCEN                                                 */
  CLKCTRL0_AHBCLKG_USB0BCEN_Disable    = 0,     /*!< Disable : Disable the AHB clock to the USB0 Buffer (default).             */
  CLKCTRL0_AHBCLKG_USB0BCEN_Enable     = 1,     /*!< Enable : Enable the AHB clock to the USB0 Buffer.                         */
} CLKCTRL0_AHBCLKG_USB0BCEN_Enum;

/* ===========================================  CLKCTRL0 AHBCLKG EMIF0CEN [3..3]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_AHBCLKG_EMIF0CEN                                                 */
  CLKCTRL0_AHBCLKG_EMIF0CEN_Disable    = 0,     /*!< Disable : Disable the AHB clock to the External Memory Interface
                                                     (EMIF) (default).                                                         */
  CLKCTRL0_AHBCLKG_EMIF0CEN_Enable     = 1,     /*!< Enable : Enable the AHB clock to the External Memory Interface
                                                     (EMIF).                                                                   */
} CLKCTRL0_AHBCLKG_EMIF0CEN_Enum;

/* ===========================================  CLKCTRL0 AHBCLKG FLASHCEN [2..2]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_AHBCLKG_FLASHCEN                                                 */
  CLKCTRL0_AHBCLKG_FLASHCEN_Disable    = 0,     /*!< Disable : Disable the AHB clock to the Flash.                             */
  CLKCTRL0_AHBCLKG_FLASHCEN_Enable     = 1,     /*!< Enable : Enable the AHB clock to the Flash (default).                     */
} CLKCTRL0_AHBCLKG_FLASHCEN_Enum;

/* ============================================  CLKCTRL0 AHBCLKG DMACEN [1..1]  ============================================= */
typedef enum {                                  /*!< CLKCTRL0_AHBCLKG_DMACEN                                                   */
  CLKCTRL0_AHBCLKG_DMACEN_Disable      = 0,     /*!< Disable : Disable the AHB clock to the DMA Controller (default).          */
  CLKCTRL0_AHBCLKG_DMACEN_Enable       = 1,     /*!< Enable : Enable the AHB clock to the DMA Controller.                      */
} CLKCTRL0_AHBCLKG_DMACEN_Enum;

/* ============================================  CLKCTRL0 AHBCLKG RAMCEN [0..0]  ============================================= */
typedef enum {                                  /*!< CLKCTRL0_AHBCLKG_RAMCEN                                                   */
  CLKCTRL0_AHBCLKG_RAMCEN_Disable      = 0,     /*!< Disable : Disable the AHB clock to the RAM.                               */
  CLKCTRL0_AHBCLKG_RAMCEN_Enable       = 1,     /*!< Enable : Enable the AHB clock to the RAM (default).                       */
} CLKCTRL0_AHBCLKG_RAMCEN_Enum;

/* ======================================================  AHBCLKG_SET  ====================================================== */
/* ======================================================  AHBCLKG_CLR  ====================================================== */
/* =======================================================  APBCLKG0  ======================================================== */
/* =========================================  CLKCTRL0 APBCLKG0 FLCTRLCEN [30..30]  ========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_FLCTRLCEN                                               */
  CLKCTRL0_APBCLKG0_FLCTRLCEN_Disable  = 0,     /*!< Disable : Disable the APB clock to the Flash Controller Module
                                                     (FLASHCTRL0) (default).                                                   */
  CLKCTRL0_APBCLKG0_FLCTRLCEN_Enable   = 1,     /*!< Enable : Enable the APB clock to the Flash Controller Module
                                                     (FLASHCTRL0).                                                             */
} CLKCTRL0_APBCLKG0_FLCTRLCEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 EVREGCEN [29..29]  ========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_EVREGCEN                                                */
  CLKCTRL0_APBCLKG0_EVREGCEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the External Regulator Module
                                                     (EXTVREG0) (default).                                                     */
  CLKCTRL0_APBCLKG0_EVREGCEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the External Regulator Module
                                                     (EXTVREG0).                                                               */
} CLKCTRL0_APBCLKG0_EVREGCEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 USB0CEN [28..28]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_USB0CEN                                                 */
  CLKCTRL0_APBCLKG0_USB0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the USB0 Module (default).             */
  CLKCTRL0_APBCLKG0_USB0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the USB0 Module.                         */
} CLKCTRL0_APBCLKG0_USB0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 I2S0CEN [27..27]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_I2S0CEN                                                 */
  CLKCTRL0_APBCLKG0_I2S0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the I2S0 Module (default).             */
  CLKCTRL0_APBCLKG0_I2S0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the I2S0 Module.                         */
} CLKCTRL0_APBCLKG0_I2S0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 LPT0CEN [26..26]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_LPT0CEN                                                 */
  CLKCTRL0_APBCLKG0_LPT0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the LPTIMER0 Module (default).         */
  CLKCTRL0_APBCLKG0_LPT0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the LPTIMER0 Module.                     */
} CLKCTRL0_APBCLKG0_LPT0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 IDAC1CEN [25..25]  ========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_IDAC1CEN                                                */
  CLKCTRL0_APBCLKG0_IDAC1CEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the IDAC1 Module (default).            */
  CLKCTRL0_APBCLKG0_IDAC1CEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the IDAC1 Module.                        */
} CLKCTRL0_APBCLKG0_IDAC1CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 IDAC0CEN [24..24]  ========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_IDAC0CEN                                                */
  CLKCTRL0_APBCLKG0_IDAC0CEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the IDAC0 Module (default).            */
  CLKCTRL0_APBCLKG0_IDAC0CEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the IDAC0 Module.                        */
} CLKCTRL0_APBCLKG0_IDAC0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 CRC0CEN [23..23]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_CRC0CEN                                                 */
  CLKCTRL0_APBCLKG0_CRC0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the CRC0 Module (default).             */
  CLKCTRL0_APBCLKG0_CRC0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the CRC0 Module.                         */
} CLKCTRL0_APBCLKG0_CRC0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 AES0CEN [22..22]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_AES0CEN                                                 */
  CLKCTRL0_APBCLKG0_AES0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the AES0 Module (default).             */
  CLKCTRL0_APBCLKG0_AES0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the AES0 Module.                         */
} CLKCTRL0_APBCLKG0_AES0CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG0 CS0CEN [21..21]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_CS0CEN                                                  */
  CLKCTRL0_APBCLKG0_CS0CEN_Disable     = 0,     /*!< Disable : Disable the APB clock to the CAPSENSE0 Module (default).        */
  CLKCTRL0_APBCLKG0_CS0CEN_Enable      = 1,     /*!< Enable : Enable the APB clock to the CAPSENSE0 Module.                    */
} CLKCTRL0_APBCLKG0_CS0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 CMP1CEN [20..20]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_CMP1CEN                                                 */
  CLKCTRL0_APBCLKG0_CMP1CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the Comparator 1 Module (default).     */
  CLKCTRL0_APBCLKG0_CMP1CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the Comparator 1 Module.                 */
} CLKCTRL0_APBCLKG0_CMP1CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 CMP0CEN [19..19]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_CMP0CEN                                                 */
  CLKCTRL0_APBCLKG0_CMP0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the Comparator 0 Module (default).     */
  CLKCTRL0_APBCLKG0_CMP0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the Comparator 0 Module.                 */
} CLKCTRL0_APBCLKG0_CMP0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 ADC1CEN [18..18]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_ADC1CEN                                                 */
  CLKCTRL0_APBCLKG0_ADC1CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the SARADC1 Module (default).          */
  CLKCTRL0_APBCLKG0_ADC1CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the SARADC1 Module.                      */
} CLKCTRL0_APBCLKG0_ADC1CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 ADC0CEN [17..17]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_ADC0CEN                                                 */
  CLKCTRL0_APBCLKG0_ADC0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the SARADC0 Module (default).          */
  CLKCTRL0_APBCLKG0_ADC0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the SARADC0 Module.                      */
} CLKCTRL0_APBCLKG0_ADC0CEN_Enum;

/* =========================================  CLKCTRL0 APBCLKG0 TIMER1CEN [16..16]  ========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_TIMER1CEN                                               */
  CLKCTRL0_APBCLKG0_TIMER1CEN_Disable  = 0,     /*!< Disable : Disable the APB clock to the TIMER1 Module (default).           */
  CLKCTRL0_APBCLKG0_TIMER1CEN_Enable   = 1,     /*!< Enable : Enable the APB clock to the TIMER1 Module.                       */
} CLKCTRL0_APBCLKG0_TIMER1CEN_Enum;

/* =========================================  CLKCTRL0 APBCLKG0 TIMER0CEN [15..15]  ========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_TIMER0CEN                                               */
  CLKCTRL0_APBCLKG0_TIMER0CEN_Disable  = 0,     /*!< Disable : Disable the APB clock to the TIMER0 Module (default).           */
  CLKCTRL0_APBCLKG0_TIMER0CEN_Enable   = 1,     /*!< Enable : Enable the APB clock to the TIMER0 Module.                       */
} CLKCTRL0_APBCLKG0_TIMER0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 SSG0CEN [14..14]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_SSG0CEN                                                 */
  CLKCTRL0_APBCLKG0_SSG0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the SSG0 Module (default).             */
  CLKCTRL0_APBCLKG0_SSG0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the SSG0 Module.                         */
} CLKCTRL0_APBCLKG0_SSG0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 PCA1CEN [13..13]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_PCA1CEN                                                 */
  CLKCTRL0_APBCLKG0_PCA1CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the PCA1 Module (default).             */
  CLKCTRL0_APBCLKG0_PCA1CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the PCA1 Module.                         */
} CLKCTRL0_APBCLKG0_PCA1CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 PCA0CEN [12..12]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_PCA0CEN                                                 */
  CLKCTRL0_APBCLKG0_PCA0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the PCA0 Module (default).             */
  CLKCTRL0_APBCLKG0_PCA0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the PCA0 Module.                         */
} CLKCTRL0_APBCLKG0_PCA0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 EPCA0CEN [11..11]  ========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_EPCA0CEN                                                */
  CLKCTRL0_APBCLKG0_EPCA0CEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the EPCA0 Module (default).            */
  CLKCTRL0_APBCLKG0_EPCA0CEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the EPCA0 Module.                        */
} CLKCTRL0_APBCLKG0_EPCA0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 I2C1CEN [10..10]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_I2C1CEN                                                 */
  CLKCTRL0_APBCLKG0_I2C1CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the I2C1 Module (default).             */
  CLKCTRL0_APBCLKG0_I2C1CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the I2C1 Module.                         */
} CLKCTRL0_APBCLKG0_I2C1CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG0 I2C0CEN [9..9]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_I2C0CEN                                                 */
  CLKCTRL0_APBCLKG0_I2C0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the I2C0 Module (default).             */
  CLKCTRL0_APBCLKG0_I2C0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the I2C0 Module.                         */
} CLKCTRL0_APBCLKG0_I2C0CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG0 SPI2CEN [8..8]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_SPI2CEN                                                 */
  CLKCTRL0_APBCLKG0_SPI2CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the SPI2 Module (default).             */
  CLKCTRL0_APBCLKG0_SPI2CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the SPI2 Module.                         */
} CLKCTRL0_APBCLKG0_SPI2CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG0 SPI1CEN [7..7]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_SPI1CEN                                                 */
  CLKCTRL0_APBCLKG0_SPI1CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the SPI1 Module (default).             */
  CLKCTRL0_APBCLKG0_SPI1CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the SPI1 Module.                         */
} CLKCTRL0_APBCLKG0_SPI1CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG0 SPI0CEN [6..6]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_SPI0CEN                                                 */
  CLKCTRL0_APBCLKG0_SPI0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the SPI0 Module (default).             */
  CLKCTRL0_APBCLKG0_SPI0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the SPI0 Module.                         */
} CLKCTRL0_APBCLKG0_SPI0CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG0 UART1CEN [5..5]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_UART1CEN                                                */
  CLKCTRL0_APBCLKG0_UART1CEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the UART1 Module (default).            */
  CLKCTRL0_APBCLKG0_UART1CEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the UART1 Module.                        */
} CLKCTRL0_APBCLKG0_UART1CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG0 UART0CEN [4..4]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_UART0CEN                                                */
  CLKCTRL0_APBCLKG0_UART0CEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the UART0 Module (default).            */
  CLKCTRL0_APBCLKG0_UART0CEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the UART0 Module.                        */
} CLKCTRL0_APBCLKG0_UART0CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 USART1CEN [3..3]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_USART1CEN                                               */
  CLKCTRL0_APBCLKG0_USART1CEN_Disable  = 0,     /*!< Disable : Disable the APB clock to the USART1 Module (default).           */
  CLKCTRL0_APBCLKG0_USART1CEN_Enable   = 1,     /*!< Enable : Enable the APB clock to the USART1 Module.                       */
} CLKCTRL0_APBCLKG0_USART1CEN_Enum;

/* ==========================================  CLKCTRL0 APBCLKG0 USART0CEN [2..2]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_USART0CEN                                               */
  CLKCTRL0_APBCLKG0_USART0CEN_Disable  = 0,     /*!< Disable : Disable the APB clock to the USART0 Module (default).           */
  CLKCTRL0_APBCLKG0_USART0CEN_Enable   = 1,     /*!< Enable : Enable the APB clock to the USART0 Module.                       */
} CLKCTRL0_APBCLKG0_USART0CEN_Enum;

/* ============================================  CLKCTRL0 APBCLKG0 PB0CEN [1..1]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_PB0CEN                                                  */
  CLKCTRL0_APBCLKG0_PB0CEN_Disable     = 0,     /*!< Disable : Disable the APB clock to the Port Bank Modules (default).       */
  CLKCTRL0_APBCLKG0_PB0CEN_Enable      = 1,     /*!< Enable : Enable the APB clock to the Port Bank Modules.                   */
} CLKCTRL0_APBCLKG0_PB0CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG0 PLL0CEN [0..0]  ============================================ */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG0_PLL0CEN                                                 */
  CLKCTRL0_APBCLKG0_PLL0CEN_Disable    = 0,     /*!< Disable : Disable the APB clock to the PLL0 registers (default).          */
  CLKCTRL0_APBCLKG0_PLL0CEN_Enable     = 1,     /*!< Enable : Enable the APB clock to the PLL0 registers.                      */
} CLKCTRL0_APBCLKG0_PLL0CEN_Enum;

/* =====================================================  APBCLKG0_SET  ====================================================== */
/* =====================================================  APBCLKG0_CLR  ====================================================== */
/* =======================================================  APBCLKG1  ======================================================== */
/* ===========================================  CLKCTRL0 APBCLKG1 MISC2CEN [2..2]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG1_MISC2CEN                                                */
  CLKCTRL0_APBCLKG1_MISC2CEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the OSCVLDF flag in the EXTOSC
                                                     module (default).                                                         */
  CLKCTRL0_APBCLKG1_MISC2CEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the OSCVLDF flag in the EXTOSC
                                                     module.                                                                   */
} CLKCTRL0_APBCLKG1_MISC2CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG1 MISC1CEN [1..1]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG1_MISC1CEN                                                */
  CLKCTRL0_APBCLKG1_MISC1CEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the Watchdog Timer (WDTIMER0),
                                                     EMIF0, and DMA Crossbar (DMAXBAR0) modules.                               */
  CLKCTRL0_APBCLKG1_MISC1CEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the Watchdog Timer (WDTIMER0),
                                                     EMIF0, and DMA Crossbar (DMAXBAR0) modules (default).                     */
} CLKCTRL0_APBCLKG1_MISC1CEN_Enum;

/* ===========================================  CLKCTRL0 APBCLKG1 MISC0CEN [0..0]  =========================================== */
typedef enum {                                  /*!< CLKCTRL0_APBCLKG1_MISC0CEN                                                */
  CLKCTRL0_APBCLKG1_MISC0CEN_Disable   = 0,     /*!< Disable : Disable the APB clock to the RSTSRC0, LOCK0, VMON0,
                                                     VREG0, LDO0, VREF0, EXTOSC0, LPOSC0, EXTVREG0, IVC0 and
                                                     RTC0 modules (default).                                                   */
  CLKCTRL0_APBCLKG1_MISC0CEN_Enable    = 1,     /*!< Enable : Enable the APB clock to the RSTSRC0, LOCK0, VMON0,
                                                     VREG0, LDO0, VREF0, EXTOSC0, LPOSC0, EXTVREG0, IVC0 and
                                                     RTC0 modules.                                                             */
} CLKCTRL0_APBCLKG1_MISC0CEN_Enum;

/* =====================================================  APBCLKG1_SET  ====================================================== */
/* =====================================================  APBCLKG1_CLR  ====================================================== */
/* =========================================================  PM3CN  ========================================================= */
/* ============================================  CLKCTRL0 PM3CN PM3CEN [16..16]  ============================================= */
typedef enum {                                  /*!< CLKCTRL0_PM3CN_PM3CEN                                                     */
  CLKCTRL0_PM3CN_PM3CEN_Disable        = 0,     /*!< Disable : Disable the core clock when in Power Mode 3.                    */
  CLKCTRL0_PM3CN_PM3CEN_Enable         = 1,     /*!< Enable : The core clock is enabled and runs off the clock selected
                                                     by PM3CSEL in Power Mode 3.                                               */
} CLKCTRL0_PM3CN_PM3CEN_Enum;

/* =============================================  CLKCTRL0 PM3CN PM3CSEL [0..2]  ============================================= */
typedef enum {                                  /*!< CLKCTRL0_PM3CN_PM3CSEL                                                    */
  CLKCTRL0_PM3CN_PM3CSEL_000           = 0,     /*!< 000 : Power Mode 3 clock source is the Low-Power Oscillator.              */
  CLKCTRL0_PM3CN_PM3CSEL_001           = 1,     /*!< 001 : Power Mode 3 clock source is the Low-Frequency Oscillator.          */
  CLKCTRL0_PM3CN_PM3CSEL_010           = 2,     /*!< 010 : Power Mode 3 clock source is the RTC Oscillator.                    */
  CLKCTRL0_PM3CN_PM3CSEL_011           = 3,     /*!< 011 : Power Mode 3 clock source is the External Oscillator.               */
  CLKCTRL0_PM3CN_PM3CSEL_100           = 4,     /*!< 100 : Power Mode 3 clock source is the USB Oscillator.                    */
  CLKCTRL0_PM3CN_PM3CSEL_101           = 5,     /*!< 101 : Power Mode 3 clock source is the PLL.                               */
  CLKCTRL0_PM3CN_PM3CSEL_110           = 6,     /*!< 110 : Power Mode 3 clock source is a divided version of the
                                                     Low-Power Oscillator.                                                     */
  CLKCTRL0_PM3CN_PM3CSEL_111           = 7,     /*!< 111 : Reserved.                                                           */
} CLKCTRL0_PM3CN_PM3CSEL_Enum;



/* =========================================================================================================================== */
/* ================                                          RSTSRC0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  RESETEN  ======================================================== */
/* ===========================================  RSTSRC0 RESETEN WAKEREN [11..11]  ============================================ */
typedef enum {                                  /*!< RSTSRC0_RESETEN_WAKEREN                                                   */
  RSTSRC0_RESETEN_WAKEREN_0            = 0,     /*!< 0 : Reserved.                                                             */
  RSTSRC0_RESETEN_WAKEREN_Enable       = 1,     /*!< Enable : Enable the PMU Wakeup event as a reset source.                   */
} RSTSRC0_RESETEN_WAKEREN_Enum;

/* ===========================================  RSTSRC0 RESETEN RTC0REN [10..10]  ============================================ */
typedef enum {                                  /*!< RSTSRC0_RESETEN_RTC0REN                                                   */
  RSTSRC0_RESETEN_RTC0REN_Disable      = 0,     /*!< Disable : Disable the RTC0 event as a reset source.                       */
  RSTSRC0_RESETEN_RTC0REN_Enable       = 1,     /*!< Enable : Enable the RTC0 event as a reset source.                         */
} RSTSRC0_RESETEN_RTC0REN_Enum;

/* ============================================  RSTSRC0 RESETEN USB0REN [9..9]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETEN_USB0REN                                                   */
  RSTSRC0_RESETEN_USB0REN_Disable      = 0,     /*!< Disable : Disable the USB0 reset event as a reset source.                 */
  RSTSRC0_RESETEN_USB0REN_Enable       = 1,     /*!< Enable : Enable the USB0 reset event as a reset source.                   */
} RSTSRC0_RESETEN_USB0REN_Enum;

/* ============================================  RSTSRC0 RESETEN CMP1REN [8..8]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETEN_CMP1REN                                                   */
  RSTSRC0_RESETEN_CMP1REN_Disable      = 0,     /*!< Disable : Disable the Comparator 1 event as a reset source.               */
  RSTSRC0_RESETEN_CMP1REN_Enable       = 1,     /*!< Enable : Enable the Comparator 1 event as a reset source.                 */
} RSTSRC0_RESETEN_CMP1REN_Enum;

/* ============================================  RSTSRC0 RESETEN CMP0REN [7..7]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETEN_CMP0REN                                                   */
  RSTSRC0_RESETEN_CMP0REN_Disable      = 0,     /*!< Disable : Disable the Comparator 0 event as a reset source.               */
  RSTSRC0_RESETEN_CMP0REN_Enable       = 1,     /*!< Enable : Enable the Comparator 0 event as a reset source.                 */
} RSTSRC0_RESETEN_CMP0REN_Enum;

/* =============================================  RSTSRC0 RESETEN WDTREN [5..5]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETEN_WDTREN                                                    */
  RSTSRC0_RESETEN_WDTREN_Disable       = 0,     /*!< Disable : Disable the Watchdog Timer event as a reset source.             */
  RSTSRC0_RESETEN_WDTREN_Enable        = 1,     /*!< Enable : Enable the Watchdog Timer event as a reset source.               */
} RSTSRC0_RESETEN_WDTREN_Enum;

/* =============================================  RSTSRC0 RESETEN MCDREN [4..4]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETEN_MCDREN                                                    */
  RSTSRC0_RESETEN_MCDREN_Disable       = 0,     /*!< Disable : Disable the Missing Clock Detector event as a reset
                                                     source.                                                                   */
  RSTSRC0_RESETEN_MCDREN_Enable        = 1,     /*!< Enable : Enable the Missing Clock Detector event as a reset
                                                     source.                                                                   */
} RSTSRC0_RESETEN_MCDREN_Enum;

/* ============================================  RSTSRC0 RESETEN VMONREN [2..2]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETEN_VMONREN                                                   */
  RSTSRC0_RESETEN_VMONREN_Disable      = 0,     /*!< Disable : Disable the Voltage Supply Monitor VDD event as a
                                                     reset source.                                                             */
  RSTSRC0_RESETEN_VMONREN_Enable       = 1,     /*!< Enable : Enable the Voltage Supply Monitor VDD event as a reset
                                                     source.                                                                   */
} RSTSRC0_RESETEN_VMONREN_Enum;

/* ======================================================  RESETEN_SET  ====================================================== */
/* ======================================================  RESETEN_CLR  ====================================================== */
/* =======================================================  RESETFLAG  ======================================================= */
/* ===========================================  RSTSRC0 RESETFLAG WAKERF [11..11]  =========================================== */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_WAKERF                                                  */
  RSTSRC0_RESETFLAG_WAKERF_0           = 0,     /*!< 0 : A PMU Wakeup event did not cause the last system reset.               */
  RSTSRC0_RESETFLAG_WAKERF_1           = 1,     /*!< 1 : A PMU Wakeup event caused the last system reset.                      */
} RSTSRC0_RESETFLAG_WAKERF_Enum;

/* ===========================================  RSTSRC0 RESETFLAG RTC0RF [10..10]  =========================================== */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_RTC0RF                                                  */
  RSTSRC0_RESETFLAG_RTC0RF_0           = 0,     /*!< 0 : An RTC0 event did not cause the last system reset.                    */
  RSTSRC0_RESETFLAG_RTC0RF_1           = 1,     /*!< 1 : An RTC0 event caused the last system reset.                           */
} RSTSRC0_RESETFLAG_RTC0RF_Enum;

/* ============================================  RSTSRC0 RESETFLAG USB0RF [9..9]  ============================================ */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_USB0RF                                                  */
  RSTSRC0_RESETFLAG_USB0RF_0           = 0,     /*!< 0 : A USB0 Reset event did not cause the last system reset.               */
  RSTSRC0_RESETFLAG_USB0RF_1           = 1,     /*!< 1 : A USB0 Reset event caused the last system reset.                      */
} RSTSRC0_RESETFLAG_USB0RF_Enum;

/* ============================================  RSTSRC0 RESETFLAG CMP1RF [8..8]  ============================================ */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_CMP1RF                                                  */
  RSTSRC0_RESETFLAG_CMP1RF_0           = 0,     /*!< 0 : A Comparator 1 event did not cause the last system reset.             */
  RSTSRC0_RESETFLAG_CMP1RF_1           = 1,     /*!< 1 : A Comparator 1 event caused the last system reset.                    */
} RSTSRC0_RESETFLAG_CMP1RF_Enum;

/* ============================================  RSTSRC0 RESETFLAG CMP0RF [7..7]  ============================================ */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_CMP0RF                                                  */
  RSTSRC0_RESETFLAG_CMP0RF_0           = 0,     /*!< 0 : A Comparator 0 event did not cause the last system reset.             */
  RSTSRC0_RESETFLAG_CMP0RF_1           = 1,     /*!< 1 : A Comparator 0 event caused the last system reset.                    */
} RSTSRC0_RESETFLAG_CMP0RF_Enum;

/* =============================================  RSTSRC0 RESETFLAG SWRF [6..6]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_SWRF                                                    */
  RSTSRC0_RESETFLAG_SWRF_0             = 0,     /*!< 0 : A Software Reset event did not cause the last system reset.           */
  RSTSRC0_RESETFLAG_SWRF_1             = 1,     /*!< 1 : A Software Reset event caused the last system reset.                  */
} RSTSRC0_RESETFLAG_SWRF_Enum;

/* ============================================  RSTSRC0 RESETFLAG WDTRF [5..5]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_WDTRF                                                   */
  RSTSRC0_RESETFLAG_WDTRF_0            = 0,     /*!< 0 : A Watchdog Timer event did not cause the last system reset.           */
  RSTSRC0_RESETFLAG_WDTRF_1            = 1,     /*!< 1 : A Watchdog Timer event caused the last system reset.                  */
} RSTSRC0_RESETFLAG_WDTRF_Enum;

/* ============================================  RSTSRC0 RESETFLAG MCDRF [4..4]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_MCDRF                                                   */
  RSTSRC0_RESETFLAG_MCDRF_0            = 0,     /*!< 0 : A Missing Clock Detector event did not cause the last system
                                                     reset.                                                                    */
  RSTSRC0_RESETFLAG_MCDRF_1            = 1,     /*!< 1 : A Missing Clock Detector event caused the last system reset.          */
} RSTSRC0_RESETFLAG_MCDRF_Enum;

/* ============================================  RSTSRC0 RESETFLAG CORERF [3..3]  ============================================ */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_CORERF                                                  */
  RSTSRC0_RESETFLAG_CORERF_0           = 0,     /*!< 0 : A Core Reset event did not cause the last system reset.               */
  RSTSRC0_RESETFLAG_CORERF_1           = 1,     /*!< 1 : A Core Reset event caused the last system reset.                      */
} RSTSRC0_RESETFLAG_CORERF_Enum;

/* ============================================  RSTSRC0 RESETFLAG VMONRF [2..2]  ============================================ */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_VMONRF                                                  */
  RSTSRC0_RESETFLAG_VMONRF_0           = 0,     /*!< 0 : A Voltage Supply Monitor VDD Reset event did not cause the
                                                     last system reset.                                                        */
  RSTSRC0_RESETFLAG_VMONRF_1           = 1,     /*!< 1 : A Voltage Supply Monitor VDD Reset event caused the last
                                                     system reset.                                                             */
} RSTSRC0_RESETFLAG_VMONRF_Enum;

/* ============================================  RSTSRC0 RESETFLAG PORRF [1..1]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_PORRF                                                   */
  RSTSRC0_RESETFLAG_PORRF_0            = 0,     /*!< 0 : A Power-On Reset event did not cause the last system reset.           */
  RSTSRC0_RESETFLAG_PORRF_1            = 1,     /*!< 1 : A Power-On Reset event caused the last system reset.                  */
} RSTSRC0_RESETFLAG_PORRF_Enum;

/* ============================================  RSTSRC0 RESETFLAG PINRF [0..0]  ============================================= */
typedef enum {                                  /*!< RSTSRC0_RESETFLAG_PINRF                                                   */
  RSTSRC0_RESETFLAG_PINRF_0            = 0,     /*!< 0 : A RESET pin event did not cause the last system reset.                */
  RSTSRC0_RESETFLAG_PINRF_1            = 1,     /*!< 1 : A RESET pin event caused the last system reset.                       */
} RSTSRC0_RESETFLAG_PINRF_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                        FLASHCTRL0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ===========================================  FLASHCTRL0 CONFIG BUSYF [20..20]  ============================================ */
typedef enum {                                  /*!< FLASHCTRL0_CONFIG_BUSYF                                                   */
  FLASHCTRL0_CONFIG_BUSYF_0            = 0,     /*!< 0 : The flash interface is not busy.                                      */
  FLASHCTRL0_CONFIG_BUSYF_1            = 1,     /*!< 1 : The flash interface is busy with an operation.                        */
} FLASHCTRL0_CONFIG_BUSYF_Enum;

/* ===========================================  FLASHCTRL0 CONFIG BUFSTS [19..19]  =========================================== */
typedef enum {                                  /*!< FLASHCTRL0_CONFIG_BUFSTS                                                  */
  FLASHCTRL0_CONFIG_BUFSTS_0           = 0,     /*!< 0 : The flash controller write data buffer is empty.                      */
  FLASHCTRL0_CONFIG_BUFSTS_1           = 1,     /*!< 1 : The flash controller write data buffer is full.                       */
} FLASHCTRL0_CONFIG_BUFSTS_Enum;

/* ==========================================  FLASHCTRL0 CONFIG ERASEEN [18..18]  =========================================== */
typedef enum {                                  /*!< FLASHCTRL0_CONFIG_ERASEEN                                                 */
  FLASHCTRL0_CONFIG_ERASEEN_0          = 0,     /*!< 0 : Writes to the WRDATA field will initiate a write to flash
                                                     at the address in the WRADDR field.                                       */
  FLASHCTRL0_CONFIG_ERASEEN_1          = 1,     /*!< 1 : Writes to the WRDATA field will initiate an erase of the
                                                     flash page containing the address in the WRADDR field.                    */
} FLASHCTRL0_CONFIG_ERASEEN_Enum;

/* ===========================================  FLASHCTRL0 CONFIG SQWEN [16..16]  ============================================ */
typedef enum {                                  /*!< FLASHCTRL0_CONFIG_SQWEN                                                   */
  FLASHCTRL0_CONFIG_SQWEN_Disable      = 0,     /*!< Disable : Disable sequential write mode.                                  */
  FLASHCTRL0_CONFIG_SQWEN_Enable       = 1,     /*!< Enable : Enable sequential write mode.                                    */
} FLASHCTRL0_CONFIG_SQWEN_Enum;

/* ============================================  FLASHCTRL0 CONFIG PFINH [7..7]  ============================================= */
typedef enum {                                  /*!< FLASHCTRL0_CONFIG_PFINH                                                   */
  FLASHCTRL0_CONFIG_PFINH_0            = 0,     /*!< 0 : Any reads from flash are prefetched until the prefetch buffer
                                                     is full.                                                                  */
  FLASHCTRL0_CONFIG_PFINH_1            = 1,     /*!< 1 : Inhibit the prefetch engine.                                          */
} FLASHCTRL0_CONFIG_PFINH_Enum;

/* ============================================  FLASHCTRL0 CONFIG DPFEN [6..6]  ============================================= */
typedef enum {                                  /*!< FLASHCTRL0_CONFIG_DPFEN                                                   */
  FLASHCTRL0_CONFIG_DPFEN_0            = 0,     /*!< 0 : Data accesses are excluded from the prefetch buffer.                  */
  FLASHCTRL0_CONFIG_DPFEN_1            = 1,     /*!< 1 : Data accesses are included in the prefetch buffer.                    */
} FLASHCTRL0_CONFIG_DPFEN_Enum;

/* ============================================  FLASHCTRL0 CONFIG RDSEN [4..4]  ============================================= */
typedef enum {                                  /*!< FLASHCTRL0_CONFIG_RDSEN                                                   */
  FLASHCTRL0_CONFIG_RDSEN_Disable      = 0,     /*!< Disable : Disable read store mode.                                        */
  FLASHCTRL0_CONFIG_RDSEN_Enable       = 1,     /*!< Enable : Enable read store mode.                                          */
} FLASHCTRL0_CONFIG_RDSEN_Enum;

/* =============================================  FLASHCTRL0 CONFIG SPMD [0..1]  ============================================= */
typedef enum {                                  /*!< FLASHCTRL0_CONFIG_SPMD                                                    */
  FLASHCTRL0_CONFIG_SPMD_00            = 0,     /*!< 00 : Read and write the flash at speed mode 0.                            */
  FLASHCTRL0_CONFIG_SPMD_01            = 1,     /*!< 01 : Read and write the flash at speed mode 1.                            */
  FLASHCTRL0_CONFIG_SPMD_10            = 2,     /*!< 10 : Read and write the flash at speed mode 2.                            */
  FLASHCTRL0_CONFIG_SPMD_11            = 3,     /*!< 11 : Read and write the flash at speed mode 3.                            */
} FLASHCTRL0_CONFIG_SPMD_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  WRADDR  ========================================================= */
/* ========================================================  WRDATA  ========================================================= */
/* ==========================================================  KEY  ========================================================== */
/* =======================================================  TCONTROL  ======================================================== */
/* ===========================================  FLASHCTRL0 TCONTROL FLRTMD [6..6]  =========================================== */
typedef enum {                                  /*!< FLASHCTRL0_TCONTROL_FLRTMD                                                */
  FLASHCTRL0_TCONTROL_FLRTMD_0         = 0,     /*!< 0 : Configure the flash read controller for AHB clocks below
                                                     12 MHz.                                                                   */
  FLASHCTRL0_TCONTROL_FLRTMD_1         = 1,     /*!< 1 : Configure the flash read controller for AHB clocks above
                                                     12 MHz.                                                                   */
} FLASHCTRL0_TCONTROL_FLRTMD_Enum;



/* =========================================================================================================================== */
/* ================                                           VMON0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  VMON0 CONTROL VMONEN [31..31]  ============================================= */
typedef enum {                                  /*!< VMON0_CONTROL_VMONEN                                                      */
  VMON0_CONTROL_VMONEN_Disable         = 0,     /*!< Disable : Disable the VDD supply monitor.                                 */
  VMON0_CONTROL_VMONEN_Enable          = 1,     /*!< Enable : Enable the VDD supply monitor.                                   */
} VMON0_CONTROL_VMONEN_Enum;

/* ============================================  VMON0 CONTROL VREGINLIEN [7..7]  ============================================ */
typedef enum {                                  /*!< VMON0_CONTROL_VREGINLIEN                                                  */
  VMON0_CONTROL_VREGINLIEN_Disable     = 0,     /*!< Disable : Disable the VREGIN low interrupt.                               */
  VMON0_CONTROL_VREGINLIEN_Enable      = 1,     /*!< Enable : Enable the VREGIN low interrupt.                                 */
} VMON0_CONTROL_VREGINLIEN_Enum;

/* =============================================  VMON0 CONTROL VDDLIEN [6..6]  ============================================== */
typedef enum {                                  /*!< VMON0_CONTROL_VDDLIEN                                                     */
  VMON0_CONTROL_VDDLIEN_Disable        = 0,     /*!< Disable : Disable the VDD low interrupt.                                  */
  VMON0_CONTROL_VDDLIEN_Enable         = 1,     /*!< Enable : Enable the VDD low interrupt.                                    */
} VMON0_CONTROL_VDDLIEN_Enum;

/* ============================================  VMON0 CONTROL VDDHITHEN [4..4]  ============================================= */
typedef enum {                                  /*!< VMON0_CONTROL_VDDHITHEN                                                   */
  VMON0_CONTROL_VDDHITHEN_0            = 0,     /*!< 0 : Use the standard VDD thresholds.                                      */
  VMON0_CONTROL_VDDHITHEN_1            = 1,     /*!< 1 : Use the high VDD thresholds.                                          */
} VMON0_CONTROL_VDDHITHEN_Enum;

/* ==============================================  VMON0 CONTROL VDDLI [3..3]  =============================================== */
typedef enum {                                  /*!< VMON0_CONTROL_VDDLI                                                       */
  VMON0_CONTROL_VDDLI_0                = 0,     /*!< 0 : The VDD voltage is below the early warning threshold.                 */
  VMON0_CONTROL_VDDLI_1                = 1,     /*!< 1 : The VDD voltage is above the early warning threshold.                 */
} VMON0_CONTROL_VDDLI_Enum;

/* =============================================  VMON0 CONTROL VDDRSTF [2..2]  ============================================== */
typedef enum {                                  /*!< VMON0_CONTROL_VDDRSTF                                                     */
  VMON0_CONTROL_VDDRSTF_0              = 0,     /*!< 0 : The VDD voltage is below the VDD reset threshold.                     */
  VMON0_CONTROL_VDDRSTF_1              = 1,     /*!< 1 : The VDD voltage is above the VDD reset threshold.                     */
} VMON0_CONTROL_VDDRSTF_Enum;

/* =============================================  VMON0 CONTROL VREGINLI [1..1]  ============================================= */
typedef enum {                                  /*!< VMON0_CONTROL_VREGINLI                                                    */
  VMON0_CONTROL_VREGINLI_0             = 0,     /*!< 0 : VREGIN is not above the interrupt threshold.                          */
  VMON0_CONTROL_VREGINLI_1             = 1,     /*!< 1 : VREGIN is above the interrupt threshold.                              */
} VMON0_CONTROL_VREGINLI_Enum;

/* ============================================  VMON0 CONTROL VREGINSEN [0..0]  ============================================= */
typedef enum {                                  /*!< VMON0_CONTROL_VREGINSEN                                                   */
  VMON0_CONTROL_VREGINSEN_Disable      = 0,     /*!< Disable : Disable the VREGIN supply monitor.                              */
  VMON0_CONTROL_VREGINSEN_Enable       = 1,     /*!< Enable : Enable the VREGIN supply monitor.                                */
} VMON0_CONTROL_VREGINSEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                         WDTIMER0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  WDTIMER0 CONTROL EWIEN [0..0]  ============================================= */
typedef enum {                                  /*!< WDTIMER0_CONTROL_EWIEN                                                    */
  WDTIMER0_CONTROL_EWIEN_Disable       = 0,     /*!< Disable : Disable the early warning interrupt (EWI).                      */
  WDTIMER0_CONTROL_EWIEN_Enable        = 1,     /*!< Enable : Enable the early warning interrupt (EWI).                        */
} WDTIMER0_CONTROL_EWIEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =============================================  WDTIMER0 STATUS UPDSTS [4..4]  ============================================= */
typedef enum {                                  /*!< WDTIMER0_STATUS_UPDSTS                                                    */
  WDTIMER0_STATUS_UPDSTS_0             = 0,     /*!< 0 : An update completed or is not pending. The EWTH and RTH
                                                     fields can be writ-ten.                                                   */
  WDTIMER0_STATUS_UPDSTS_1             = 1,     /*!< 1 : An update of the threshold register is occurring. The EWTH
                                                     and RTH fields should not be modified until hardware clears
                                                     UPDSTS to 0.                                                              */
} WDTIMER0_STATUS_UPDSTS_Enum;

/* ==============================================  WDTIMER0 STATUS RTHF [3..3]  ============================================== */
typedef enum {                                  /*!< WDTIMER0_STATUS_RTHF                                                      */
  WDTIMER0_STATUS_RTHF_0               = 0,     /*!< 0 : The counter is currently less than the reset threshold (RTH)
                                                     value.                                                                    */
  WDTIMER0_STATUS_RTHF_1               = 1,     /*!< 1 : The counter is currently greater than or equal to the reset
                                                     threshold (RTH) value.                                                    */
} WDTIMER0_STATUS_RTHF_Enum;

/* ============================================  WDTIMER0 STATUS PRIVSTS [1..1]  ============================================= */
typedef enum {                                  /*!< WDTIMER0_STATUS_PRIVSTS                                                   */
  WDTIMER0_STATUS_PRIVSTS_0            = 0,     /*!< 0 : The watchdog timer registers are currently read-only.                 */
  WDTIMER0_STATUS_PRIVSTS_1            = 1,     /*!< 1 : A write transaction can be performed on the module registers.         */
} WDTIMER0_STATUS_PRIVSTS_Enum;

/* =============================================  WDTIMER0 STATUS KEYSTS [0..0]  ============================================= */
typedef enum {                                  /*!< WDTIMER0_STATUS_KEYSTS                                                    */
  WDTIMER0_STATUS_KEYSTS_0             = 0,     /*!< 0 : No keys have been processed by the interface.                         */
  WDTIMER0_STATUS_KEYSTS_1             = 1,     /*!< 1 : The attention key has been received and the module is awaiting
                                                     a command.                                                                */
} WDTIMER0_STATUS_KEYSTS_Enum;

/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* =======================================================  THRESHOLD  ======================================================= */
/* ========================================================  WDTKEY  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           IDAC0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  IDAC0 CONTROL IDACEN [31..31]  ============================================= */
typedef enum {                                  /*!< IDAC0_CONTROL_IDACEN                                                      */
  IDAC0_CONTROL_IDACEN_Disable         = 0,     /*!< Disable : Disable the IDAC.                                               */
  IDAC0_CONTROL_IDACEN_Enable          = 1,     /*!< Enable : Enable the IDAC.                                                 */
} IDAC0_CONTROL_IDACEN_Enum;

/* =============================================  IDAC0 CONTROL LOADEN [30..30]  ============================================= */
typedef enum {                                  /*!< IDAC0_CONTROL_LOADEN                                                      */
  IDAC0_CONTROL_LOADEN_Disable         = 0,     /*!< Disable : Disable the internal load resistor.                             */
  IDAC0_CONTROL_LOADEN_Enable          = 1,     /*!< Enable : Enable the internal load resistor.                               */
} IDAC0_CONTROL_LOADEN_Enum;

/* =============================================  IDAC0 CONTROL DBGMD [29..29]  ============================================== */
typedef enum {                                  /*!< IDAC0_CONTROL_DBGMD                                                       */
  IDAC0_CONTROL_DBGMD_0                = 0,     /*!< 0 : The IDAC module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  IDAC0_CONTROL_DBGMD_1                = 1,     /*!< 1 : A debug breakpoint will cause the IDAC module to halt (ignore
                                                     update triggers).                                                         */
} IDAC0_CONTROL_DBGMD_Enum;

/* =============================================  IDAC0 CONTROL WRAPEN [16..16]  ============================================= */
typedef enum {                                  /*!< IDAC0_CONTROL_WRAPEN                                                      */
  IDAC0_CONTROL_WRAPEN_0               = 0,     /*!< 0 : The IDAC will not wrap when it reaches the end of the data
                                                     buffer.                                                                   */
  IDAC0_CONTROL_WRAPEN_1               = 1,     /*!< 1 : The IDAC will cycle through the data buffer contents.                 */
} IDAC0_CONTROL_WRAPEN_Enum;

/* ==============================================  IDAC0 CONTROL JSEL [11..11]  ============================================== */
typedef enum {                                  /*!< IDAC0_CONTROL_JSEL                                                        */
  IDAC0_CONTROL_JSEL_0                 = 0,     /*!< 0 : Data is right-justified.                                              */
  IDAC0_CONTROL_JSEL_1                 = 1,     /*!< 1 : Data is left-justified.                                               */
} IDAC0_CONTROL_JSEL_Enum;

/* ==============================================  IDAC0 CONTROL INFMT [8..9]  =============================================== */
typedef enum {                                  /*!< IDAC0_CONTROL_INFMT                                                       */
  IDAC0_CONTROL_INFMT_00               = 0,     /*!< 00 : Writes are interpreted as one 10-bit sample.                         */
  IDAC0_CONTROL_INFMT_01               = 1,     /*!< 01 : Writes are interpreted as two 10-bit samples.                        */
  IDAC0_CONTROL_INFMT_10               = 2,     /*!< 10 : Writes are interpreted as four 8-bit samples.                        */
  IDAC0_CONTROL_INFMT_11               = 3,     /*!< 11 : Reserved.                                                            */
} IDAC0_CONTROL_INFMT_Enum;

/* ==============================================  IDAC0 CONTROL OUTMD [6..7]  =============================================== */
typedef enum {                                  /*!< IDAC0_CONTROL_OUTMD                                                       */
  IDAC0_CONTROL_OUTMD_00               = 0,     /*!< 00 : The full-scale output current is 0.5 mA.                             */
  IDAC0_CONTROL_OUTMD_01               = 1,     /*!< 01 : The full-scale output current is 1 mA.                               */
  IDAC0_CONTROL_OUTMD_10               = 2,     /*!< 10 : The full-scale output current is 2 mA.                               */
  IDAC0_CONTROL_OUTMD_11               = 3,     /*!< 11 : Reserved.                                                            */
} IDAC0_CONTROL_OUTMD_Enum;

/* ==============================================  IDAC0 CONTROL ETRIG [3..5]  =============================================== */
typedef enum {                                  /*!< IDAC0_CONTROL_ETRIG                                                       */
  IDAC0_CONTROL_ETRIG_000              = 0,     /*!< 000 : Select DACnT0 as the IDAC external trigger source.                  */
  IDAC0_CONTROL_ETRIG_001              = 1,     /*!< 001 : Select DACnT1 as the IDAC external trigger source.                  */
  IDAC0_CONTROL_ETRIG_010              = 2,     /*!< 010 : Select DACnT2 as the IDAC external trigger source.                  */
  IDAC0_CONTROL_ETRIG_011              = 3,     /*!< 011 : Select DACnT3 as the IDAC external trigger source.                  */
  IDAC0_CONTROL_ETRIG_100              = 4,     /*!< 100 : Select DACnT4 as the IDAC external trigger source.                  */
  IDAC0_CONTROL_ETRIG_101              = 5,     /*!< 101 : Select DACnT5 as the IDAC external trigger source.                  */
  IDAC0_CONTROL_ETRIG_110              = 6,     /*!< 110 : Select DACnT6 as the IDAC external trigger source.                  */
  IDAC0_CONTROL_ETRIG_111              = 7,     /*!< 111 : Select DACnT7 as the IDAC external trigger source.                  */
} IDAC0_CONTROL_ETRIG_Enum;

/* ==============================================  IDAC0 CONTROL OUPDT [0..2]  =============================================== */
typedef enum {                                  /*!< IDAC0_CONTROL_OUPDT                                                       */
  IDAC0_CONTROL_OUPDT_000              = 0,     /*!< 000 : The IDAC output updates using the DACnT8 trigger source.            */
  IDAC0_CONTROL_OUPDT_001              = 1,     /*!< 001 : The IDAC output updates using the DACnT9 trigger source.            */
  IDAC0_CONTROL_OUPDT_010              = 2,     /*!< 010 : The IDAC output updates using the DACnT10 trigger source.           */
  IDAC0_CONTROL_OUPDT_011              = 3,     /*!< 011 : The IDAC output updates using the DACnT11 trigger source.           */
  IDAC0_CONTROL_OUPDT_100              = 4,     /*!< 100 : The IDAC output updates on the rising edge of the trigger
                                                     source selected by ETRIG.                                                 */
  IDAC0_CONTROL_OUPDT_101              = 5,     /*!< 101 : The IDAC output updates on the falling edge of the trigger
                                                     source selected by ETRIG.                                                 */
  IDAC0_CONTROL_OUPDT_110              = 6,     /*!< 110 : The IDAC output updates on any edge of the trigger source
                                                     selected by ETRIG.                                                        */
  IDAC0_CONTROL_OUPDT_111              = 7,     /*!< 111 : The IDAC output updates on write to DATA register (On
                                                     Demand).                                                                  */
} IDAC0_CONTROL_OUPDT_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  DATA  ========================================================== */
/* =======================================================  BUFSTATUS  ======================================================= */
/* =============================================  IDAC0 BUFSTATUS LEVEL [0..2]  ============================================== */
typedef enum {                                  /*!< IDAC0_BUFSTATUS_LEVEL                                                     */
  IDAC0_BUFSTATUS_LEVEL_000            = 0,     /*!< 000 : The data FIFO is empty.                                             */
  IDAC0_BUFSTATUS_LEVEL_001            = 1,     /*!< 001 : The data FIFO contains one word.                                    */
  IDAC0_BUFSTATUS_LEVEL_010            = 2,     /*!< 010 : The data FIFO contains two words.                                   */
  IDAC0_BUFSTATUS_LEVEL_011            = 3,     /*!< 011 : The data FIFO contains three words.                                 */
  IDAC0_BUFSTATUS_LEVEL_100            = 4,     /*!< 100 : The data FIFO is full and contains four words.                      */
  IDAC0_BUFSTATUS_LEVEL_101            = 5,     /*!< 101 : Reserved.                                                           */
} IDAC0_BUFSTATUS_LEVEL_Enum;

/* =====================================================  BUFSTATUS_SET  ===================================================== */
/* =====================================================  BUFSTATUS_CLR  ===================================================== */
/* =======================================================  BUFFER10  ======================================================== */
/* =======================================================  BUFFER32  ======================================================== */
/* ========================================================  GAINADJ  ======================================================== */


/* =========================================================================================================================== */
/* ================                                         DMACTRL0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
/* =============================================  DMACTRL0 STATUS STATE [4..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_STATUS_STATE                                                     */
  DMACTRL0_STATUS_STATE_0000           = 0,     /*!< 0000 : Idle.                                                              */
  DMACTRL0_STATUS_STATE_0001           = 1,     /*!< 0001 : Reading channel controller data.                                   */
  DMACTRL0_STATUS_STATE_0010           = 2,     /*!< 0010 : Reading source data end pointer.                                   */
  DMACTRL0_STATUS_STATE_0011           = 3,     /*!< 0011 : Reading destination data end pointer.                              */
  DMACTRL0_STATUS_STATE_0100           = 4,     /*!< 0100 : Reading source data.                                               */
  DMACTRL0_STATUS_STATE_0101           = 5,     /*!< 0101 : Writing destination data.                                          */
  DMACTRL0_STATUS_STATE_0110           = 6,     /*!< 0110 : Waiting for a DMA request to clear.                                */
  DMACTRL0_STATUS_STATE_0111           = 7,     /*!< 0111 : Writing channel controller data.                                   */
  DMACTRL0_STATUS_STATE_1000           = 8,     /*!< 1000 : Stalled.                                                           */
  DMACTRL0_STATUS_STATE_1001           = 9,     /*!< 1001 : Done.                                                              */
  DMACTRL0_STATUS_STATE_1010           = 10,    /*!< 1010 : Peripheral scatter-gather transition.                              */
  DMACTRL0_STATUS_STATE_1011           = 11,    /*!< 1011 : Reserved.                                                          */
} DMACTRL0_STATUS_STATE_Enum;

/* ============================================  DMACTRL0 STATUS DMAENSTS [0..0]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_STATUS_DMAENSTS                                                  */
  DMACTRL0_STATUS_DMAENSTS_Disable     = 0,     /*!< Disable : DMA controller is disabled                                      */
  DMACTRL0_STATUS_DMAENSTS_Enable      = 1,     /*!< Enable : DMA controller is enabled.                                       */
} DMACTRL0_STATUS_DMAENSTS_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  DMACTRL0 CONFIG DMAEN [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CONFIG_DMAEN                                                     */
  DMACTRL0_CONFIG_DMAEN_Disable        = 0,     /*!< Disable : Disable the DMA controller.                                     */
  DMACTRL0_CONFIG_DMAEN_Enable         = 1,     /*!< Enable : Enable the DMA controller.                                       */
} DMACTRL0_CONFIG_DMAEN_Enum;

/* ========================================================  BASEPTR  ======================================================== */
/* =======================================================  ABASEPTR  ======================================================== */
/* =======================================================  CHSTATUS  ======================================================== */
/* ============================================  DMACTRL0 CHSTATUS CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH15                                                    */
  DMACTRL0_CHSTATUS_CH15_0             = 0,     /*!< 0 : DMA Channel 15 is not waiting for a data request.                     */
  DMACTRL0_CHSTATUS_CH15_1             = 1,     /*!< 1 : DMA Channel 15 is waiting for a data request.                         */
} DMACTRL0_CHSTATUS_CH15_Enum;

/* ============================================  DMACTRL0 CHSTATUS CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH14                                                    */
  DMACTRL0_CHSTATUS_CH14_0             = 0,     /*!< 0 : DMA Channel 14 is not waiting for a data request.                     */
  DMACTRL0_CHSTATUS_CH14_1             = 1,     /*!< 1 : DMA Channel 14 is waiting for a data request.                         */
} DMACTRL0_CHSTATUS_CH14_Enum;

/* ============================================  DMACTRL0 CHSTATUS CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH13                                                    */
  DMACTRL0_CHSTATUS_CH13_0             = 0,     /*!< 0 : DMA Channel 13 is not waiting for a data request.                     */
  DMACTRL0_CHSTATUS_CH13_1             = 1,     /*!< 1 : DMA Channel 13 is waiting for a data request.                         */
} DMACTRL0_CHSTATUS_CH13_Enum;

/* ============================================  DMACTRL0 CHSTATUS CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH12                                                    */
  DMACTRL0_CHSTATUS_CH12_0             = 0,     /*!< 0 : DMA Channel 12 is not waiting for a data request.                     */
  DMACTRL0_CHSTATUS_CH12_1             = 1,     /*!< 1 : DMA Channel 12 is waiting for a data request.                         */
} DMACTRL0_CHSTATUS_CH12_Enum;

/* ============================================  DMACTRL0 CHSTATUS CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH11                                                    */
  DMACTRL0_CHSTATUS_CH11_0             = 0,     /*!< 0 : DMA Channel 11 is not waiting for a data request.                     */
  DMACTRL0_CHSTATUS_CH11_1             = 1,     /*!< 1 : DMA Channel 11 is waiting for a data request.                         */
} DMACTRL0_CHSTATUS_CH11_Enum;

/* ============================================  DMACTRL0 CHSTATUS CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH10                                                    */
  DMACTRL0_CHSTATUS_CH10_0             = 0,     /*!< 0 : DMA Channel 10 is not waiting for a data request.                     */
  DMACTRL0_CHSTATUS_CH10_1             = 1,     /*!< 1 : DMA Channel 10 is waiting for a data request.                         */
} DMACTRL0_CHSTATUS_CH10_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH9                                                     */
  DMACTRL0_CHSTATUS_CH9_0              = 0,     /*!< 0 : DMA Channel 9 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH9_1              = 1,     /*!< 1 : DMA Channel 9 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH9_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH8                                                     */
  DMACTRL0_CHSTATUS_CH8_0              = 0,     /*!< 0 : DMA Channel 8 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH8_1              = 1,     /*!< 1 : DMA Channel 8 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH8_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH7                                                     */
  DMACTRL0_CHSTATUS_CH7_0              = 0,     /*!< 0 : DMA Channel 7 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH7_1              = 1,     /*!< 1 : DMA Channel 7 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH7_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH6                                                     */
  DMACTRL0_CHSTATUS_CH6_0              = 0,     /*!< 0 : DMA Channel 6 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH6_1              = 1,     /*!< 1 : DMA Channel 6 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH6_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH5                                                     */
  DMACTRL0_CHSTATUS_CH5_0              = 0,     /*!< 0 : DMA Channel 5 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH5_1              = 1,     /*!< 1 : DMA Channel 5 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH5_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH4                                                     */
  DMACTRL0_CHSTATUS_CH4_0              = 0,     /*!< 0 : DMA Channel 4 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH4_1              = 1,     /*!< 1 : DMA Channel 4 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH4_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH3                                                     */
  DMACTRL0_CHSTATUS_CH3_0              = 0,     /*!< 0 : DMA Channel 3 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH3_1              = 1,     /*!< 1 : DMA Channel 3 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH3_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH2                                                     */
  DMACTRL0_CHSTATUS_CH2_0              = 0,     /*!< 0 : DMA Channel 2 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH2_1              = 1,     /*!< 1 : DMA Channel 2 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH2_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH1                                                     */
  DMACTRL0_CHSTATUS_CH1_0              = 0,     /*!< 0 : DMA Channel 1 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH1_1              = 1,     /*!< 1 : DMA Channel 1 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH1_Enum;

/* =============================================  DMACTRL0 CHSTATUS CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSTATUS_CH0                                                     */
  DMACTRL0_CHSTATUS_CH0_0              = 0,     /*!< 0 : DMA Channel 0 is not waiting for a data request.                      */
  DMACTRL0_CHSTATUS_CH0_1              = 1,     /*!< 1 : DMA Channel 0 is waiting for a data request.                          */
} DMACTRL0_CHSTATUS_CH0_Enum;

/* ========================================================  CHSWRCN  ======================================================== */
/* ============================================  DMACTRL0 CHSWRCN CH15 [15..15]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH15                                                     */
  DMACTRL0_CHSWRCN_CH15_0              = 0,     /*!< 0 : DMA Channel 15 does not generate a software data request.             */
  DMACTRL0_CHSWRCN_CH15_1              = 1,     /*!< 1 : DMA Channel 15 generates a software data request.                     */
} DMACTRL0_CHSWRCN_CH15_Enum;

/* ============================================  DMACTRL0 CHSWRCN CH14 [14..14]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH14                                                     */
  DMACTRL0_CHSWRCN_CH14_0              = 0,     /*!< 0 : DMA Channel 14 does not generate a software data request.             */
  DMACTRL0_CHSWRCN_CH14_1              = 1,     /*!< 1 : DMA Channel 14 generates a software data request.                     */
} DMACTRL0_CHSWRCN_CH14_Enum;

/* ============================================  DMACTRL0 CHSWRCN CH13 [13..13]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH13                                                     */
  DMACTRL0_CHSWRCN_CH13_0              = 0,     /*!< 0 : DMA Channel 13 does not generate a software data request.             */
  DMACTRL0_CHSWRCN_CH13_1              = 1,     /*!< 1 : DMA Channel 13 generates a software data request.                     */
} DMACTRL0_CHSWRCN_CH13_Enum;

/* ============================================  DMACTRL0 CHSWRCN CH12 [12..12]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH12                                                     */
  DMACTRL0_CHSWRCN_CH12_0              = 0,     /*!< 0 : DMA Channel 12 does not generate a software data request.             */
  DMACTRL0_CHSWRCN_CH12_1              = 1,     /*!< 1 : DMA Channel 12 generates a software data request.                     */
} DMACTRL0_CHSWRCN_CH12_Enum;

/* ============================================  DMACTRL0 CHSWRCN CH11 [11..11]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH11                                                     */
  DMACTRL0_CHSWRCN_CH11_0              = 0,     /*!< 0 : DMA Channel 11 does not generate a software data request.             */
  DMACTRL0_CHSWRCN_CH11_1              = 1,     /*!< 1 : DMA Channel 11 generates a software data request.                     */
} DMACTRL0_CHSWRCN_CH11_Enum;

/* ============================================  DMACTRL0 CHSWRCN CH10 [10..10]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH10                                                     */
  DMACTRL0_CHSWRCN_CH10_0              = 0,     /*!< 0 : DMA Channel 10 does not generate a software data request.             */
  DMACTRL0_CHSWRCN_CH10_1              = 1,     /*!< 1 : DMA Channel 10 generates a software data request.                     */
} DMACTRL0_CHSWRCN_CH10_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH9                                                      */
  DMACTRL0_CHSWRCN_CH9_0               = 0,     /*!< 0 : DMA Channel 9 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH9_1               = 1,     /*!< 1 : DMA Channel 9 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH9_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH8                                                      */
  DMACTRL0_CHSWRCN_CH8_0               = 0,     /*!< 0 : DMA Channel 8 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH8_1               = 1,     /*!< 1 : DMA Channel 8 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH8_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH7                                                      */
  DMACTRL0_CHSWRCN_CH7_0               = 0,     /*!< 0 : DMA Channel 7 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH7_1               = 1,     /*!< 1 : DMA Channel 7 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH7_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH6                                                      */
  DMACTRL0_CHSWRCN_CH6_0               = 0,     /*!< 0 : DMA Channel 6 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH6_1               = 1,     /*!< 1 : DMA Channel 6 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH6_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH5                                                      */
  DMACTRL0_CHSWRCN_CH5_0               = 0,     /*!< 0 : DMA Channel 5 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH5_1               = 1,     /*!< 1 : DMA Channel 5 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH5_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH4                                                      */
  DMACTRL0_CHSWRCN_CH4_0               = 0,     /*!< 0 : DMA Channel 4 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH4_1               = 1,     /*!< 1 : DMA Channel 4 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH4_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH3                                                      */
  DMACTRL0_CHSWRCN_CH3_0               = 0,     /*!< 0 : DMA Channel 3 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH3_1               = 1,     /*!< 1 : DMA Channel 3 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH3_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH2                                                      */
  DMACTRL0_CHSWRCN_CH2_0               = 0,     /*!< 0 : DMA Channel 2 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH2_1               = 1,     /*!< 1 : DMA Channel 2 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH2_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH1                                                      */
  DMACTRL0_CHSWRCN_CH1_0               = 0,     /*!< 0 : DMA Channel 1 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH1_1               = 1,     /*!< 1 : DMA Channel 1 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH1_Enum;

/* ==============================================  DMACTRL0 CHSWRCN CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHSWRCN_CH0                                                      */
  DMACTRL0_CHSWRCN_CH0_0               = 0,     /*!< 0 : DMA Channel 0 does not generate a software data request.              */
  DMACTRL0_CHSWRCN_CH0_1               = 1,     /*!< 1 : DMA Channel 0 generates a software data request.                      */
} DMACTRL0_CHSWRCN_CH0_Enum;

/* =======================================================  CHREQMSET  ======================================================= */
/* ===========================================  DMACTRL0 CHREQMSET CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH15                                                   */
  DMACTRL0_CHREQMSET_CH15_0_R          = 0,     /*!< 0_R : DMA Channel 15 peripheral data requests enabled.                    */
  DMACTRL0_CHREQMSET_CH15_1_R          = 1,     /*!< 1_R : DMA Channel 15 peripheral data requests disabled.                   */
} DMACTRL0_CHREQMSET_CH15_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH15                                                   */
  DMACTRL0_CHREQMSET_CH15_0_W          = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH15_1_W          = 1,     /*!< 1_W : Disable DMA Channel 15 peripheral data requests.                    */
} DMACTRL0_CHREQMSET_CH15_W_Enum;

/* ===========================================  DMACTRL0 CHREQMSET CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH14                                                   */
  DMACTRL0_CHREQMSET_CH14_0_R          = 0,     /*!< 0_R : DMA Channel 14 peripheral data requests enabled.                    */
  DMACTRL0_CHREQMSET_CH14_1_R          = 1,     /*!< 1_R : DMA Channel 14 peripheral data requests disabled.                   */
} DMACTRL0_CHREQMSET_CH14_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH14                                                   */
  DMACTRL0_CHREQMSET_CH14_0_W          = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH14_1_W          = 1,     /*!< 1_W : Disable DMA Channel 14 peripheral data requests.                    */
} DMACTRL0_CHREQMSET_CH14_W_Enum;

/* ===========================================  DMACTRL0 CHREQMSET CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH13                                                   */
  DMACTRL0_CHREQMSET_CH13_0_R          = 0,     /*!< 0_R : DMA Channel 13 peripheral data requests enabled.                    */
  DMACTRL0_CHREQMSET_CH13_1_R          = 1,     /*!< 1_R : DMA Channel 13 peripheral data requests disabled.                   */
} DMACTRL0_CHREQMSET_CH13_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH13                                                   */
  DMACTRL0_CHREQMSET_CH13_0_W          = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH13_1_W          = 1,     /*!< 1_W : Disable DMA Channel 13 peripheral data requests.                    */
} DMACTRL0_CHREQMSET_CH13_W_Enum;

/* ===========================================  DMACTRL0 CHREQMSET CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH12                                                   */
  DMACTRL0_CHREQMSET_CH12_0_R          = 0,     /*!< 0_R : DMA Channel 12 peripheral data requests enabled.                    */
  DMACTRL0_CHREQMSET_CH12_1_R          = 1,     /*!< 1_R : DMA Channel 12 peripheral data requests disabled.                   */
} DMACTRL0_CHREQMSET_CH12_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH12                                                   */
  DMACTRL0_CHREQMSET_CH12_0_W          = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH12_1_W          = 1,     /*!< 1_W : Disable DMA Channel 12 peripheral data requests.                    */
} DMACTRL0_CHREQMSET_CH12_W_Enum;

/* ===========================================  DMACTRL0 CHREQMSET CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH11                                                   */
  DMACTRL0_CHREQMSET_CH11_0_R          = 0,     /*!< 0_R : DMA Channel 11 peripheral data requests enabled.                    */
  DMACTRL0_CHREQMSET_CH11_1_R          = 1,     /*!< 1_R : DMA Channel 11 peripheral data requests disabled.                   */
} DMACTRL0_CHREQMSET_CH11_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH11                                                   */
  DMACTRL0_CHREQMSET_CH11_0_W          = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH11_1_W          = 1,     /*!< 1_W : Disable DMA Channel 11 peripheral data requests.                    */
} DMACTRL0_CHREQMSET_CH11_W_Enum;

/* ===========================================  DMACTRL0 CHREQMSET CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH10                                                   */
  DMACTRL0_CHREQMSET_CH10_0_R          = 0,     /*!< 0_R : DMA Channel 10 peripheral data requests enabled.                    */
  DMACTRL0_CHREQMSET_CH10_1_R          = 1,     /*!< 1_R : DMA Channel 10 peripheral data requests disabled.                   */
} DMACTRL0_CHREQMSET_CH10_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH10                                                   */
  DMACTRL0_CHREQMSET_CH10_0_W          = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH10_1_W          = 1,     /*!< 1_W : Disable DMA Channel 10 peripheral data requests.                    */
} DMACTRL0_CHREQMSET_CH10_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH9 [9..9]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH9                                                    */
  DMACTRL0_CHREQMSET_CH9_0_R           = 0,     /*!< 0_R : DMA Channel 9 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH9_1_R           = 1,     /*!< 1_R : DMA Channel 9 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH9_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH9                                                    */
  DMACTRL0_CHREQMSET_CH9_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH9_1_W           = 1,     /*!< 1_W : Disable DMA Channel 9 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH9_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH8 [8..8]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH8                                                    */
  DMACTRL0_CHREQMSET_CH8_0_R           = 0,     /*!< 0_R : DMA Channel 8 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH8_1_R           = 1,     /*!< 1_R : DMA Channel 8 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH8_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH8                                                    */
  DMACTRL0_CHREQMSET_CH8_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH8_1_W           = 1,     /*!< 1_W : Disable DMA Channel 8 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH8_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH7 [7..7]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH7                                                    */
  DMACTRL0_CHREQMSET_CH7_0_R           = 0,     /*!< 0_R : DMA Channel 7 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH7_1_R           = 1,     /*!< 1_R : DMA Channel 7 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH7_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH7                                                    */
  DMACTRL0_CHREQMSET_CH7_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH7_1_W           = 1,     /*!< 1_W : Disable DMA Channel 7 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH7_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH6 [6..6]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH6                                                    */
  DMACTRL0_CHREQMSET_CH6_0_R           = 0,     /*!< 0_R : DMA Channel 6 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH6_1_R           = 1,     /*!< 1_R : DMA Channel 6 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH6_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH6                                                    */
  DMACTRL0_CHREQMSET_CH6_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH6_1_W           = 1,     /*!< 1_W : Disable DMA Channel 6 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH6_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH5 [5..5]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH5                                                    */
  DMACTRL0_CHREQMSET_CH5_0_R           = 0,     /*!< 0_R : DMA Channel 5 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH5_1_R           = 1,     /*!< 1_R : DMA Channel 5 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH5_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH5                                                    */
  DMACTRL0_CHREQMSET_CH5_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH5_1_W           = 1,     /*!< 1_W : Disable DMA Channel 5 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH5_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH4 [4..4]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH4                                                    */
  DMACTRL0_CHREQMSET_CH4_0_R           = 0,     /*!< 0_R : DMA Channel 4 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH4_1_R           = 1,     /*!< 1_R : DMA Channel 4 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH4_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH4                                                    */
  DMACTRL0_CHREQMSET_CH4_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH4_1_W           = 1,     /*!< 1_W : Disable DMA Channel 4 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH4_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH3 [3..3]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH3                                                    */
  DMACTRL0_CHREQMSET_CH3_0_R           = 0,     /*!< 0_R : DMA Channel 3 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH3_1_R           = 1,     /*!< 1_R : DMA Channel 3 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH3_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH3                                                    */
  DMACTRL0_CHREQMSET_CH3_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH3_1_W           = 1,     /*!< 1_W : Disable DMA Channel 3 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH3_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH2 [2..2]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH2                                                    */
  DMACTRL0_CHREQMSET_CH2_0_R           = 0,     /*!< 0_R : DMA Channel 2 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH2_1_R           = 1,     /*!< 1_R : DMA Channel 2 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH2_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH2                                                    */
  DMACTRL0_CHREQMSET_CH2_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH2_1_W           = 1,     /*!< 1_W : Disable DMA Channel 2 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH2_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH1 [1..1]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH1                                                    */
  DMACTRL0_CHREQMSET_CH1_0_R           = 0,     /*!< 0_R : DMA Channel 1 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH1_1_R           = 1,     /*!< 1_R : DMA Channel 1 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH1_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH1                                                    */
  DMACTRL0_CHREQMSET_CH1_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH1_1_W           = 1,     /*!< 1_W : Disable DMA Channel 1 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH1_W_Enum;

/* =============================================  DMACTRL0 CHREQMSET CH0 [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH0                                                    */
  DMACTRL0_CHREQMSET_CH0_0_R           = 0,     /*!< 0_R : DMA Channel 0 peripheral data requests enabled.                     */
  DMACTRL0_CHREQMSET_CH0_1_R           = 1,     /*!< 1_R : DMA Channel 0 peripheral data requests disabled.                    */
} DMACTRL0_CHREQMSET_CH0_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHREQMSET_CH0                                                    */
  DMACTRL0_CHREQMSET_CH0_0_W           = 0,     /*!< 0_W : No effect (use CHREQMCLR to clear).                                 */
  DMACTRL0_CHREQMSET_CH0_1_W           = 1,     /*!< 1_W : Disable DMA Channel 0 peripheral data requests.                     */
} DMACTRL0_CHREQMSET_CH0_W_Enum;

/* =======================================================  CHREQMCLR  ======================================================= */
/* ===========================================  DMACTRL0 CHREQMCLR CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH15                                                   */
  DMACTRL0_CHREQMCLR_CH15_0            = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH15_Enable       = 1,     /*!< Enable : Enable DMA Channel 15 peripheral data requests.                  */
} DMACTRL0_CHREQMCLR_CH15_Enum;

/* ===========================================  DMACTRL0 CHREQMCLR CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH14                                                   */
  DMACTRL0_CHREQMCLR_CH14_0            = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH14_Enable       = 1,     /*!< Enable : Enable DMA Channel 14 peripheral data requests.                  */
} DMACTRL0_CHREQMCLR_CH14_Enum;

/* ===========================================  DMACTRL0 CHREQMCLR CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH13                                                   */
  DMACTRL0_CHREQMCLR_CH13_0            = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH13_Enable       = 1,     /*!< Enable : Enable DMA Channel 13 peripheral data requests.                  */
} DMACTRL0_CHREQMCLR_CH13_Enum;

/* ===========================================  DMACTRL0 CHREQMCLR CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH12                                                   */
  DMACTRL0_CHREQMCLR_CH12_0            = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH12_Enable       = 1,     /*!< Enable : Enable DMA Channel 12 peripheral data requests.                  */
} DMACTRL0_CHREQMCLR_CH12_Enum;

/* ===========================================  DMACTRL0 CHREQMCLR CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH11                                                   */
  DMACTRL0_CHREQMCLR_CH11_0            = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH11_Enable       = 1,     /*!< Enable : Enable DMA Channel 11 peripheral data requests.                  */
} DMACTRL0_CHREQMCLR_CH11_Enum;

/* ===========================================  DMACTRL0 CHREQMCLR CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH10                                                   */
  DMACTRL0_CHREQMCLR_CH10_0            = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH10_Enable       = 1,     /*!< Enable : Enable DMA Channel 10 peripheral data requests.                  */
} DMACTRL0_CHREQMCLR_CH10_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH9 [9..9]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH9                                                    */
  DMACTRL0_CHREQMCLR_CH9_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH9_Enable        = 1,     /*!< Enable : Enable DMA Channel 9 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH9_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH8 [8..8]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH8                                                    */
  DMACTRL0_CHREQMCLR_CH8_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH8_Enable        = 1,     /*!< Enable : Enable DMA Channel 8 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH8_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH7 [7..7]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH7                                                    */
  DMACTRL0_CHREQMCLR_CH7_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH7_Enable        = 1,     /*!< Enable : Enable DMA Channel 7 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH7_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH6 [6..6]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH6                                                    */
  DMACTRL0_CHREQMCLR_CH6_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH6_Enable        = 1,     /*!< Enable : Enable DMA Channel 6 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH6_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH5 [5..5]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH5                                                    */
  DMACTRL0_CHREQMCLR_CH5_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH5_Enable        = 1,     /*!< Enable : Enable DMA Channel 5 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH5_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH4 [4..4]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH4                                                    */
  DMACTRL0_CHREQMCLR_CH4_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH4_Enable        = 1,     /*!< Enable : Enable DMA Channel 4 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH4_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH3 [3..3]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH3                                                    */
  DMACTRL0_CHREQMCLR_CH3_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH3_Enable        = 1,     /*!< Enable : Enable DMA Channel 3 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH3_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH2 [2..2]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH2                                                    */
  DMACTRL0_CHREQMCLR_CH2_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH2_Enable        = 1,     /*!< Enable : Enable DMA Channel 2 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH2_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH1 [1..1]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH1                                                    */
  DMACTRL0_CHREQMCLR_CH1_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH1_Enable        = 1,     /*!< Enable : Enable DMA Channel 1 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH1_Enum;

/* =============================================  DMACTRL0 CHREQMCLR CH0 [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHREQMCLR_CH0                                                    */
  DMACTRL0_CHREQMCLR_CH0_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHREQMCLR_CH0_Enable        = 1,     /*!< Enable : Enable DMA Channel 0 peripheral data requests.                   */
} DMACTRL0_CHREQMCLR_CH0_Enum;

/* ========================================================  CHENSET  ======================================================== */
/* ============================================  DMACTRL0 CHENSET CH15 [15..15]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH15                                                     */
  DMACTRL0_CHENSET_CH15_Disable_R      = 0,     /*!< Disable_R : DMA Channel 15 disabled.                                      */
  DMACTRL0_CHENSET_CH15_Enable_R       = 1,     /*!< Enable_R : DMA Channel 15 enabled.                                        */
} DMACTRL0_CHENSET_CH15_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH15                                                     */
  DMACTRL0_CHENSET_CH15_0_W            = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH15_Enable_W       = 1,     /*!< Enable_W : Enable DMA Channel 15.                                         */
} DMACTRL0_CHENSET_CH15_W_Enum;

/* ============================================  DMACTRL0 CHENSET CH14 [14..14]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH14                                                     */
  DMACTRL0_CHENSET_CH14_Disable_R      = 0,     /*!< Disable_R : DMA Channel 14 disabled.                                      */
  DMACTRL0_CHENSET_CH14_Enable_R       = 1,     /*!< Enable_R : DMA Channel 14 enabled.                                        */
} DMACTRL0_CHENSET_CH14_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH14                                                     */
  DMACTRL0_CHENSET_CH14_0_W            = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH14_Enable_W       = 1,     /*!< Enable_W : Enable DMA Channel 14.                                         */
} DMACTRL0_CHENSET_CH14_W_Enum;

/* ============================================  DMACTRL0 CHENSET CH13 [13..13]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH13                                                     */
  DMACTRL0_CHENSET_CH13_Disable_R      = 0,     /*!< Disable_R : DMA Channel 13 disabled.                                      */
  DMACTRL0_CHENSET_CH13_Enable_R       = 1,     /*!< Enable_R : DMA Channel 13 enabled.                                        */
} DMACTRL0_CHENSET_CH13_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH13                                                     */
  DMACTRL0_CHENSET_CH13_0_W            = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH13_Enable_W       = 1,     /*!< Enable_W : Enable DMA Channel 13.                                         */
} DMACTRL0_CHENSET_CH13_W_Enum;

/* ============================================  DMACTRL0 CHENSET CH12 [12..12]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH12                                                     */
  DMACTRL0_CHENSET_CH12_Disable_R      = 0,     /*!< Disable_R : DMA Channel 12 disabled.                                      */
  DMACTRL0_CHENSET_CH12_Enable_R       = 1,     /*!< Enable_R : DMA Channel 12 enabled.                                        */
} DMACTRL0_CHENSET_CH12_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH12                                                     */
  DMACTRL0_CHENSET_CH12_0_W            = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH12_Enable_W       = 1,     /*!< Enable_W : Enable DMA Channel 12.                                         */
} DMACTRL0_CHENSET_CH12_W_Enum;

/* ============================================  DMACTRL0 CHENSET CH11 [11..11]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH11                                                     */
  DMACTRL0_CHENSET_CH11_Disable_R      = 0,     /*!< Disable_R : DMA Channel 11 disabled.                                      */
  DMACTRL0_CHENSET_CH11_Enable_R       = 1,     /*!< Enable_R : DMA Channel 11 enabled.                                        */
} DMACTRL0_CHENSET_CH11_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH11                                                     */
  DMACTRL0_CHENSET_CH11_0_W            = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH11_Enable_W       = 1,     /*!< Enable_W : Enable DMA Channel 11.                                         */
} DMACTRL0_CHENSET_CH11_W_Enum;

/* ============================================  DMACTRL0 CHENSET CH10 [10..10]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH10                                                     */
  DMACTRL0_CHENSET_CH10_Disable_R      = 0,     /*!< Disable_R : DMA Channel 10 disabled.                                      */
  DMACTRL0_CHENSET_CH10_Enable_R       = 1,     /*!< Enable_R : DMA Channel 10 enabled.                                        */
} DMACTRL0_CHENSET_CH10_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH10                                                     */
  DMACTRL0_CHENSET_CH10_0_W            = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH10_Enable_W       = 1,     /*!< Enable_W : Enable DMA Channel 10.                                         */
} DMACTRL0_CHENSET_CH10_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH9                                                      */
  DMACTRL0_CHENSET_CH9_Disable_R       = 0,     /*!< Disable_R : DMA Channel 9 disabled.                                       */
  DMACTRL0_CHENSET_CH9_Enable_R        = 1,     /*!< Enable_R : DMA Channel 9 enabled.                                         */
} DMACTRL0_CHENSET_CH9_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH9                                                      */
  DMACTRL0_CHENSET_CH9_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH9_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 9.                                          */
} DMACTRL0_CHENSET_CH9_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH8                                                      */
  DMACTRL0_CHENSET_CH8_Disable_R       = 0,     /*!< Disable_R : DMA Channel 8 disabled.                                       */
  DMACTRL0_CHENSET_CH8_Enable_R        = 1,     /*!< Enable_R : DMA Channel 8 enabled.                                         */
} DMACTRL0_CHENSET_CH8_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH8                                                      */
  DMACTRL0_CHENSET_CH8_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH8_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 8.                                          */
} DMACTRL0_CHENSET_CH8_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH7                                                      */
  DMACTRL0_CHENSET_CH7_Disable_R       = 0,     /*!< Disable_R : DMA Channel 7 disabled.                                       */
  DMACTRL0_CHENSET_CH7_Enable_R        = 1,     /*!< Enable_R : DMA Channel 7 enabled.                                         */
} DMACTRL0_CHENSET_CH7_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH7                                                      */
  DMACTRL0_CHENSET_CH7_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH7_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 7.                                          */
} DMACTRL0_CHENSET_CH7_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH6                                                      */
  DMACTRL0_CHENSET_CH6_Disable_R       = 0,     /*!< Disable_R : DMA Channel 6 disabled.                                       */
  DMACTRL0_CHENSET_CH6_Enable_R        = 1,     /*!< Enable_R : DMA Channel 6 enabled.                                         */
} DMACTRL0_CHENSET_CH6_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH6                                                      */
  DMACTRL0_CHENSET_CH6_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH6_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 6.                                          */
} DMACTRL0_CHENSET_CH6_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH5                                                      */
  DMACTRL0_CHENSET_CH5_Disable_R       = 0,     /*!< Disable_R : DMA Channel 5 disabled.                                       */
  DMACTRL0_CHENSET_CH5_Enable_R        = 1,     /*!< Enable_R : DMA Channel 5 enabled.                                         */
} DMACTRL0_CHENSET_CH5_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH5                                                      */
  DMACTRL0_CHENSET_CH5_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH5_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 5.                                          */
} DMACTRL0_CHENSET_CH5_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH4                                                      */
  DMACTRL0_CHENSET_CH4_Disable_R       = 0,     /*!< Disable_R : DMA Channel 4 disabled.                                       */
  DMACTRL0_CHENSET_CH4_Enable_R        = 1,     /*!< Enable_R : DMA Channel 4 enabled.                                         */
} DMACTRL0_CHENSET_CH4_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH4                                                      */
  DMACTRL0_CHENSET_CH4_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH4_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 4.                                          */
} DMACTRL0_CHENSET_CH4_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH3                                                      */
  DMACTRL0_CHENSET_CH3_Disable_R       = 0,     /*!< Disable_R : DMA Channel 3 disabled.                                       */
  DMACTRL0_CHENSET_CH3_Enable_R        = 1,     /*!< Enable_R : DMA Channel 3 enabled.                                         */
} DMACTRL0_CHENSET_CH3_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH3                                                      */
  DMACTRL0_CHENSET_CH3_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH3_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 3.                                          */
} DMACTRL0_CHENSET_CH3_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH2                                                      */
  DMACTRL0_CHENSET_CH2_Disable_R       = 0,     /*!< Disable_R : DMA Channel 2 disabled.                                       */
  DMACTRL0_CHENSET_CH2_Enable_R        = 1,     /*!< Enable_R : DMA Channel 2 enabled.                                         */
} DMACTRL0_CHENSET_CH2_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH2                                                      */
  DMACTRL0_CHENSET_CH2_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH2_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 2.                                          */
} DMACTRL0_CHENSET_CH2_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH1                                                      */
  DMACTRL0_CHENSET_CH1_Disable_R       = 0,     /*!< Disable_R : DMA Channel 1 disabled.                                       */
  DMACTRL0_CHENSET_CH1_Enable_R        = 1,     /*!< Enable_R : DMA Channel 1 enabled.                                         */
} DMACTRL0_CHENSET_CH1_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH1                                                      */
  DMACTRL0_CHENSET_CH1_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH1_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 1.                                          */
} DMACTRL0_CHENSET_CH1_W_Enum;

/* ==============================================  DMACTRL0 CHENSET CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENSET_CH0                                                      */
  DMACTRL0_CHENSET_CH0_Disable_R       = 0,     /*!< Disable_R : DMA Channel 0 disabled.                                       */
  DMACTRL0_CHENSET_CH0_Enable_R        = 1,     /*!< Enable_R : DMA Channel 0 enabled.                                         */
} DMACTRL0_CHENSET_CH0_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHENSET_CH0                                                      */
  DMACTRL0_CHENSET_CH0_0_W             = 0,     /*!< 0_W : No effect (use CHENCLR to clear).                                   */
  DMACTRL0_CHENSET_CH0_Enable_W        = 1,     /*!< Enable_W : Enable DMA Channel 0.                                          */
} DMACTRL0_CHENSET_CH0_W_Enum;

/* ========================================================  CHENCLR  ======================================================== */
/* ============================================  DMACTRL0 CHENCLR CH15 [15..15]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH15                                                     */
  DMACTRL0_CHENCLR_CH15_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH15_1              = 1,     /*!< 1 : Disable DMA Channel 15.                                               */
} DMACTRL0_CHENCLR_CH15_Enum;

/* ============================================  DMACTRL0 CHENCLR CH14 [14..14]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH14                                                     */
  DMACTRL0_CHENCLR_CH14_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH14_1              = 1,     /*!< 1 : Disable DMA Channel 14.                                               */
} DMACTRL0_CHENCLR_CH14_Enum;

/* ============================================  DMACTRL0 CHENCLR CH13 [13..13]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH13                                                     */
  DMACTRL0_CHENCLR_CH13_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH13_1              = 1,     /*!< 1 : Disable DMA Channel 13.                                               */
} DMACTRL0_CHENCLR_CH13_Enum;

/* ============================================  DMACTRL0 CHENCLR CH12 [12..12]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH12                                                     */
  DMACTRL0_CHENCLR_CH12_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH12_1              = 1,     /*!< 1 : Disable DMA Channel 12.                                               */
} DMACTRL0_CHENCLR_CH12_Enum;

/* ============================================  DMACTRL0 CHENCLR CH11 [11..11]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH11                                                     */
  DMACTRL0_CHENCLR_CH11_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH11_1              = 1,     /*!< 1 : Disable DMA Channel 11.                                               */
} DMACTRL0_CHENCLR_CH11_Enum;

/* ============================================  DMACTRL0 CHENCLR CH10 [10..10]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH10                                                     */
  DMACTRL0_CHENCLR_CH10_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH10_1              = 1,     /*!< 1 : Disable DMA Channel 10.                                               */
} DMACTRL0_CHENCLR_CH10_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH9                                                      */
  DMACTRL0_CHENCLR_CH9_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH9_1               = 1,     /*!< 1 : Disable DMA Channel 9.                                                */
} DMACTRL0_CHENCLR_CH9_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH8                                                      */
  DMACTRL0_CHENCLR_CH8_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH8_1               = 1,     /*!< 1 : Disable DMA Channel 8.                                                */
} DMACTRL0_CHENCLR_CH8_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH7                                                      */
  DMACTRL0_CHENCLR_CH7_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH7_1               = 1,     /*!< 1 : Disable DMA Channel 7.                                                */
} DMACTRL0_CHENCLR_CH7_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH6                                                      */
  DMACTRL0_CHENCLR_CH6_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH6_1               = 1,     /*!< 1 : Disable DMA Channel 6.                                                */
} DMACTRL0_CHENCLR_CH6_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH5                                                      */
  DMACTRL0_CHENCLR_CH5_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH5_1               = 1,     /*!< 1 : Disable DMA Channel 5.                                                */
} DMACTRL0_CHENCLR_CH5_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH4                                                      */
  DMACTRL0_CHENCLR_CH4_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH4_1               = 1,     /*!< 1 : Disable DMA Channel 4.                                                */
} DMACTRL0_CHENCLR_CH4_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH3                                                      */
  DMACTRL0_CHENCLR_CH3_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH3_1               = 1,     /*!< 1 : Disable DMA Channel 3.                                                */
} DMACTRL0_CHENCLR_CH3_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH2                                                      */
  DMACTRL0_CHENCLR_CH2_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH2_1               = 1,     /*!< 1 : Disable DMA Channel 2.                                                */
} DMACTRL0_CHENCLR_CH2_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH1                                                      */
  DMACTRL0_CHENCLR_CH1_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH1_1               = 1,     /*!< 1 : Disable DMA Channel 1.                                                */
} DMACTRL0_CHENCLR_CH1_Enum;

/* ==============================================  DMACTRL0 CHENCLR CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHENCLR_CH0                                                      */
  DMACTRL0_CHENCLR_CH0_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHENCLR_CH0_1               = 1,     /*!< 1 : Disable DMA Channel 0.                                                */
} DMACTRL0_CHENCLR_CH0_Enum;

/* =======================================================  CHALTSET  ======================================================== */
/* ============================================  DMACTRL0 CHALTSET CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH15                                                    */
  DMACTRL0_CHALTSET_CH15_0_R           = 0,     /*!< 0_R : DMA Channel 15 is using primary data structure.                     */
  DMACTRL0_CHALTSET_CH15_1_R           = 1,     /*!< 1_R : DMA Channel 15 is using alternate data structure.                   */
} DMACTRL0_CHALTSET_CH15_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH15                                                    */
  DMACTRL0_CHALTSET_CH15_0_W           = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH15_1_W           = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 15.                */
} DMACTRL0_CHALTSET_CH15_W_Enum;

/* ============================================  DMACTRL0 CHALTSET CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH14                                                    */
  DMACTRL0_CHALTSET_CH14_0_R           = 0,     /*!< 0_R : DMA Channel 14 is using primary data structure.                     */
  DMACTRL0_CHALTSET_CH14_1_R           = 1,     /*!< 1_R : DMA Channel 14 is using alternate data structure.                   */
} DMACTRL0_CHALTSET_CH14_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH14                                                    */
  DMACTRL0_CHALTSET_CH14_0_W           = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH14_1_W           = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 14.                */
} DMACTRL0_CHALTSET_CH14_W_Enum;

/* ============================================  DMACTRL0 CHALTSET CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH13                                                    */
  DMACTRL0_CHALTSET_CH13_0_R           = 0,     /*!< 0_R : DMA Channel 13 is using primary data structure.                     */
  DMACTRL0_CHALTSET_CH13_1_R           = 1,     /*!< 1_R : DMA Channel 13 is using alternate data structure.                   */
} DMACTRL0_CHALTSET_CH13_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH13                                                    */
  DMACTRL0_CHALTSET_CH13_0_W           = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH13_1_W           = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 13.                */
} DMACTRL0_CHALTSET_CH13_W_Enum;

/* ============================================  DMACTRL0 CHALTSET CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH12                                                    */
  DMACTRL0_CHALTSET_CH12_0_R           = 0,     /*!< 0_R : DMA Channel 12 is using primary data structure.                     */
  DMACTRL0_CHALTSET_CH12_1_R           = 1,     /*!< 1_R : DMA Channel 12 is using alternate data structure.                   */
} DMACTRL0_CHALTSET_CH12_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH12                                                    */
  DMACTRL0_CHALTSET_CH12_0_W           = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH12_1_W           = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 12.                */
} DMACTRL0_CHALTSET_CH12_W_Enum;

/* ============================================  DMACTRL0 CHALTSET CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH11                                                    */
  DMACTRL0_CHALTSET_CH11_0_R           = 0,     /*!< 0_R : DMA Channel 11 is using primary data structure.                     */
  DMACTRL0_CHALTSET_CH11_1_R           = 1,     /*!< 1_R : DMA Channel 11 is using alternate data structure.                   */
} DMACTRL0_CHALTSET_CH11_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH11                                                    */
  DMACTRL0_CHALTSET_CH11_0_W           = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH11_1_W           = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 11.                */
} DMACTRL0_CHALTSET_CH11_W_Enum;

/* ============================================  DMACTRL0 CHALTSET CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH10                                                    */
  DMACTRL0_CHALTSET_CH10_0_R           = 0,     /*!< 0_R : DMA Channel 10 is using primary data structure.                     */
  DMACTRL0_CHALTSET_CH10_1_R           = 1,     /*!< 1_R : DMA Channel 10 is using alternate data structure.                   */
} DMACTRL0_CHALTSET_CH10_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH10                                                    */
  DMACTRL0_CHALTSET_CH10_0_W           = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH10_1_W           = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 10.                */
} DMACTRL0_CHALTSET_CH10_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH9                                                     */
  DMACTRL0_CHALTSET_CH9_0_R            = 0,     /*!< 0_R : DMA Channel 9 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH9_1_R            = 1,     /*!< 1_R : DMA Channel 9 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH9_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH9                                                     */
  DMACTRL0_CHALTSET_CH9_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH9_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 9.                 */
} DMACTRL0_CHALTSET_CH9_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH8                                                     */
  DMACTRL0_CHALTSET_CH8_0_R            = 0,     /*!< 0_R : DMA Channel 8 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH8_1_R            = 1,     /*!< 1_R : DMA Channel 8 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH8_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH8                                                     */
  DMACTRL0_CHALTSET_CH8_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH8_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 8.                 */
} DMACTRL0_CHALTSET_CH8_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH7                                                     */
  DMACTRL0_CHALTSET_CH7_0_R            = 0,     /*!< 0_R : DMA Channel 7 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH7_1_R            = 1,     /*!< 1_R : DMA Channel 7 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH7_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH7                                                     */
  DMACTRL0_CHALTSET_CH7_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH7_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 7.                 */
} DMACTRL0_CHALTSET_CH7_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH6                                                     */
  DMACTRL0_CHALTSET_CH6_0_R            = 0,     /*!< 0_R : DMA Channel 6 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH6_1_R            = 1,     /*!< 1_R : DMA Channel 6 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH6_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH6                                                     */
  DMACTRL0_CHALTSET_CH6_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH6_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 6.                 */
} DMACTRL0_CHALTSET_CH6_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH5                                                     */
  DMACTRL0_CHALTSET_CH5_0_R            = 0,     /*!< 0_R : DMA Channel 5 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH5_1_R            = 1,     /*!< 1_R : DMA Channel 5 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH5_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH5                                                     */
  DMACTRL0_CHALTSET_CH5_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH5_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 5.                 */
} DMACTRL0_CHALTSET_CH5_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH4                                                     */
  DMACTRL0_CHALTSET_CH4_0_R            = 0,     /*!< 0_R : DMA Channel 4 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH4_1_R            = 1,     /*!< 1_R : DMA Channel 4 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH4_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH4                                                     */
  DMACTRL0_CHALTSET_CH4_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH4_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 4.                 */
} DMACTRL0_CHALTSET_CH4_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH3                                                     */
  DMACTRL0_CHALTSET_CH3_0_R            = 0,     /*!< 0_R : DMA Channel 3 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH3_1_R            = 1,     /*!< 1_R : DMA Channel 3 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH3_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH3                                                     */
  DMACTRL0_CHALTSET_CH3_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH3_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 3.                 */
} DMACTRL0_CHALTSET_CH3_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH2                                                     */
  DMACTRL0_CHALTSET_CH2_0_R            = 0,     /*!< 0_R : DMA Channel 2 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH2_1_R            = 1,     /*!< 1_R : DMA Channel 2 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH2_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH2                                                     */
  DMACTRL0_CHALTSET_CH2_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH2_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 2.                 */
} DMACTRL0_CHALTSET_CH2_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH1                                                     */
  DMACTRL0_CHALTSET_CH1_0_R            = 0,     /*!< 0_R : DMA Channel 1 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH1_1_R            = 1,     /*!< 1_R : DMA Channel 1 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH1_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH1                                                     */
  DMACTRL0_CHALTSET_CH1_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH1_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 1.                 */
} DMACTRL0_CHALTSET_CH1_W_Enum;

/* =============================================  DMACTRL0 CHALTSET CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH0                                                     */
  DMACTRL0_CHALTSET_CH0_0_R            = 0,     /*!< 0_R : DMA Channel 0 is using primary data structure.                      */
  DMACTRL0_CHALTSET_CH0_1_R            = 1,     /*!< 1_R : DMA Channel 0 is using alternate data structure.                    */
} DMACTRL0_CHALTSET_CH0_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHALTSET_CH0                                                     */
  DMACTRL0_CHALTSET_CH0_0_W            = 0,     /*!< 0_W : No effect (use CHALTCLR to clear).                                  */
  DMACTRL0_CHALTSET_CH0_1_W            = 1,     /*!< 1_W : Use the alternate data structure for DMA Channel 0.                 */
} DMACTRL0_CHALTSET_CH0_W_Enum;

/* =======================================================  CHALTCLR  ======================================================== */
/* ============================================  DMACTRL0 CHALTCLR CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH15                                                    */
  DMACTRL0_CHALTCLR_CH15_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH15_1             = 1,     /*!< 1 : Use the primary data structure for DMA Channel 15.                    */
} DMACTRL0_CHALTCLR_CH15_Enum;

/* ============================================  DMACTRL0 CHALTCLR CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH14                                                    */
  DMACTRL0_CHALTCLR_CH14_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH14_1             = 1,     /*!< 1 : Use the primary data structure for DMA Channel 14.                    */
} DMACTRL0_CHALTCLR_CH14_Enum;

/* ============================================  DMACTRL0 CHALTCLR CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH13                                                    */
  DMACTRL0_CHALTCLR_CH13_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH13_1             = 1,     /*!< 1 : Use the primary data structure for DMA Channel 13.                    */
} DMACTRL0_CHALTCLR_CH13_Enum;

/* ============================================  DMACTRL0 CHALTCLR CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH12                                                    */
  DMACTRL0_CHALTCLR_CH12_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH12_1             = 1,     /*!< 1 : Use the primary data structure for DMA Channel 12.                    */
} DMACTRL0_CHALTCLR_CH12_Enum;

/* ============================================  DMACTRL0 CHALTCLR CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH11                                                    */
  DMACTRL0_CHALTCLR_CH11_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH11_1             = 1,     /*!< 1 : Use the primary data structure for DMA Channel 11.                    */
} DMACTRL0_CHALTCLR_CH11_Enum;

/* ============================================  DMACTRL0 CHALTCLR CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH10                                                    */
  DMACTRL0_CHALTCLR_CH10_0             = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH10_1             = 1,     /*!< 1 : Use the primary data structure for DMA Channel 10.                    */
} DMACTRL0_CHALTCLR_CH10_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH9                                                     */
  DMACTRL0_CHALTCLR_CH9_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH9_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 9.                     */
} DMACTRL0_CHALTCLR_CH9_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH8                                                     */
  DMACTRL0_CHALTCLR_CH8_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH8_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 8.                     */
} DMACTRL0_CHALTCLR_CH8_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH7                                                     */
  DMACTRL0_CHALTCLR_CH7_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH7_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 7.                     */
} DMACTRL0_CHALTCLR_CH7_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH6                                                     */
  DMACTRL0_CHALTCLR_CH6_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH6_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 6.                     */
} DMACTRL0_CHALTCLR_CH6_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH5                                                     */
  DMACTRL0_CHALTCLR_CH5_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH5_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 5.                     */
} DMACTRL0_CHALTCLR_CH5_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH4                                                     */
  DMACTRL0_CHALTCLR_CH4_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH4_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 4.                     */
} DMACTRL0_CHALTCLR_CH4_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH3                                                     */
  DMACTRL0_CHALTCLR_CH3_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH3_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 3.                     */
} DMACTRL0_CHALTCLR_CH3_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH2                                                     */
  DMACTRL0_CHALTCLR_CH2_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH2_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 2.                     */
} DMACTRL0_CHALTCLR_CH2_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH1                                                     */
  DMACTRL0_CHALTCLR_CH1_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH1_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 1.                     */
} DMACTRL0_CHALTCLR_CH1_Enum;

/* =============================================  DMACTRL0 CHALTCLR CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHALTCLR_CH0                                                     */
  DMACTRL0_CHALTCLR_CH0_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHALTCLR_CH0_1              = 1,     /*!< 1 : Use the primary data structure for DMA Channel 0.                     */
} DMACTRL0_CHALTCLR_CH0_Enum;

/* ========================================================  CHHPSET  ======================================================== */
/* ============================================  DMACTRL0 CHHPSET CH15 [15..15]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH15                                                     */
  DMACTRL0_CHHPSET_CH15_0_R            = 0,     /*!< 0_R : DMA Channel 15 is using the default priority level.                 */
  DMACTRL0_CHHPSET_CH15_1_R            = 1,     /*!< 1_R : DMA Channel 15 is using the high priority level.                    */
} DMACTRL0_CHHPSET_CH15_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH15                                                     */
  DMACTRL0_CHHPSET_CH15_0_W            = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH15_1_W            = 1,     /*!< 1_W : Use the high priority level for DMA Channel 15.                     */
} DMACTRL0_CHHPSET_CH15_W_Enum;

/* ============================================  DMACTRL0 CHHPSET CH14 [14..14]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH14                                                     */
  DMACTRL0_CHHPSET_CH14_0_R            = 0,     /*!< 0_R : DMA Channel 14 is using the default priority level.                 */
  DMACTRL0_CHHPSET_CH14_1_R            = 1,     /*!< 1_R : DMA Channel 14 is using the high priority level.                    */
} DMACTRL0_CHHPSET_CH14_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH14                                                     */
  DMACTRL0_CHHPSET_CH14_0_W            = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH14_1_W            = 1,     /*!< 1_W : Use the high priority level for DMA Channel 14.                     */
} DMACTRL0_CHHPSET_CH14_W_Enum;

/* ============================================  DMACTRL0 CHHPSET CH13 [13..13]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH13                                                     */
  DMACTRL0_CHHPSET_CH13_0_R            = 0,     /*!< 0_R : DMA Channel 13 is using the default priority level.                 */
  DMACTRL0_CHHPSET_CH13_1_R            = 1,     /*!< 1_R : DMA Channel 13 is using the high priority level.                    */
} DMACTRL0_CHHPSET_CH13_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH13                                                     */
  DMACTRL0_CHHPSET_CH13_0_W            = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH13_1_W            = 1,     /*!< 1_W : Use the high priority level for DMA Channel 13.                     */
} DMACTRL0_CHHPSET_CH13_W_Enum;

/* ============================================  DMACTRL0 CHHPSET CH12 [12..12]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH12                                                     */
  DMACTRL0_CHHPSET_CH12_0_R            = 0,     /*!< 0_R : DMA Channel 12 is using the default priority level.                 */
  DMACTRL0_CHHPSET_CH12_1_R            = 1,     /*!< 1_R : DMA Channel 12 is using the high priority level.                    */
} DMACTRL0_CHHPSET_CH12_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH12                                                     */
  DMACTRL0_CHHPSET_CH12_0_W            = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH12_1_W            = 1,     /*!< 1_W : Use the high priority level for DMA Channel 12.                     */
} DMACTRL0_CHHPSET_CH12_W_Enum;

/* ============================================  DMACTRL0 CHHPSET CH11 [11..11]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH11                                                     */
  DMACTRL0_CHHPSET_CH11_0_R            = 0,     /*!< 0_R : DMA Channel 11 is using the default priority level.                 */
  DMACTRL0_CHHPSET_CH11_1_R            = 1,     /*!< 1_R : DMA Channel 11 is using the high priority level.                    */
} DMACTRL0_CHHPSET_CH11_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH11                                                     */
  DMACTRL0_CHHPSET_CH11_0_W            = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH11_1_W            = 1,     /*!< 1_W : Use the high priority level for DMA Channel 11.                     */
} DMACTRL0_CHHPSET_CH11_W_Enum;

/* ============================================  DMACTRL0 CHHPSET CH10 [10..10]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH10                                                     */
  DMACTRL0_CHHPSET_CH10_0_R            = 0,     /*!< 0_R : DMA Channel 10 is using the default priority level.                 */
  DMACTRL0_CHHPSET_CH10_1_R            = 1,     /*!< 1_R : DMA Channel 10 is using the high priority level.                    */
} DMACTRL0_CHHPSET_CH10_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH10                                                     */
  DMACTRL0_CHHPSET_CH10_0_W            = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH10_1_W            = 1,     /*!< 1_W : Use the high priority level for DMA Channel 10.                     */
} DMACTRL0_CHHPSET_CH10_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH9                                                      */
  DMACTRL0_CHHPSET_CH9_0_R             = 0,     /*!< 0_R : DMA Channel 9 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH9_1_R             = 1,     /*!< 1_R : DMA Channel 9 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH9_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH9                                                      */
  DMACTRL0_CHHPSET_CH9_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH9_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 9.                      */
} DMACTRL0_CHHPSET_CH9_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH8                                                      */
  DMACTRL0_CHHPSET_CH8_0_R             = 0,     /*!< 0_R : DMA Channel 8 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH8_1_R             = 1,     /*!< 1_R : DMA Channel 8 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH8_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH8                                                      */
  DMACTRL0_CHHPSET_CH8_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH8_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 8.                      */
} DMACTRL0_CHHPSET_CH8_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH7                                                      */
  DMACTRL0_CHHPSET_CH7_0_R             = 0,     /*!< 0_R : DMA Channel 7 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH7_1_R             = 1,     /*!< 1_R : DMA Channel 7 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH7_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH7                                                      */
  DMACTRL0_CHHPSET_CH7_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH7_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 7.                      */
} DMACTRL0_CHHPSET_CH7_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH6                                                      */
  DMACTRL0_CHHPSET_CH6_0_R             = 0,     /*!< 0_R : DMA Channel 6 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH6_1_R             = 1,     /*!< 1_R : DMA Channel 6 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH6_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH6                                                      */
  DMACTRL0_CHHPSET_CH6_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH6_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 6.                      */
} DMACTRL0_CHHPSET_CH6_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH5                                                      */
  DMACTRL0_CHHPSET_CH5_0_R             = 0,     /*!< 0_R : DMA Channel 5 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH5_1_R             = 1,     /*!< 1_R : DMA Channel 5 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH5_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH5                                                      */
  DMACTRL0_CHHPSET_CH5_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH5_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 5.                      */
} DMACTRL0_CHHPSET_CH5_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH4                                                      */
  DMACTRL0_CHHPSET_CH4_0_R             = 0,     /*!< 0_R : DMA Channel 4 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH4_1_R             = 1,     /*!< 1_R : DMA Channel 4 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH4_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH4                                                      */
  DMACTRL0_CHHPSET_CH4_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH4_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 4.                      */
} DMACTRL0_CHHPSET_CH4_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH3                                                      */
  DMACTRL0_CHHPSET_CH3_0_R             = 0,     /*!< 0_R : DMA Channel 3 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH3_1_R             = 1,     /*!< 1_R : DMA Channel 3 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH3_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH3                                                      */
  DMACTRL0_CHHPSET_CH3_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH3_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 3.                      */
} DMACTRL0_CHHPSET_CH3_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH2                                                      */
  DMACTRL0_CHHPSET_CH2_0_R             = 0,     /*!< 0_R : DMA Channel 2 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH2_1_R             = 1,     /*!< 1_R : DMA Channel 2 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH2_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH2                                                      */
  DMACTRL0_CHHPSET_CH2_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH2_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 2.                      */
} DMACTRL0_CHHPSET_CH2_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH1                                                      */
  DMACTRL0_CHHPSET_CH1_0_R             = 0,     /*!< 0_R : DMA Channel 1 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH1_1_R             = 1,     /*!< 1_R : DMA Channel 1 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH1_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH1                                                      */
  DMACTRL0_CHHPSET_CH1_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH1_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 1.                      */
} DMACTRL0_CHHPSET_CH1_W_Enum;

/* ==============================================  DMACTRL0 CHHPSET CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH0                                                      */
  DMACTRL0_CHHPSET_CH0_0_R             = 0,     /*!< 0_R : DMA Channel 0 is using the default priority level.                  */
  DMACTRL0_CHHPSET_CH0_1_R             = 1,     /*!< 1_R : DMA Channel 0 is using the high priority level.                     */
} DMACTRL0_CHHPSET_CH0_R_Enum;

typedef enum {                                  /*!< DMACTRL0_CHHPSET_CH0                                                      */
  DMACTRL0_CHHPSET_CH0_0_W             = 0,     /*!< 0_W : No effect (use CHHPCLR to clear).                                   */
  DMACTRL0_CHHPSET_CH0_1_W             = 1,     /*!< 1_W : Use the high priority level for DMA Channel 0.                      */
} DMACTRL0_CHHPSET_CH0_W_Enum;

/* ========================================================  CHHPCLR  ======================================================== */
/* ============================================  DMACTRL0 CHHPCLR CH15 [15..15]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH15                                                     */
  DMACTRL0_CHHPCLR_CH15_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH15_1              = 1,     /*!< 1 : Use the high default level for DMA Channel 15.                        */
} DMACTRL0_CHHPCLR_CH15_Enum;

/* ============================================  DMACTRL0 CHHPCLR CH14 [14..14]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH14                                                     */
  DMACTRL0_CHHPCLR_CH14_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH14_1              = 1,     /*!< 1 : Use the high default level for DMA Channel 14.                        */
} DMACTRL0_CHHPCLR_CH14_Enum;

/* ============================================  DMACTRL0 CHHPCLR CH13 [13..13]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH13                                                     */
  DMACTRL0_CHHPCLR_CH13_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH13_1              = 1,     /*!< 1 : Use the high default level for DMA Channel 13.                        */
} DMACTRL0_CHHPCLR_CH13_Enum;

/* ============================================  DMACTRL0 CHHPCLR CH12 [12..12]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH12                                                     */
  DMACTRL0_CHHPCLR_CH12_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH12_1              = 1,     /*!< 1 : Use the high default level for DMA Channel 12.                        */
} DMACTRL0_CHHPCLR_CH12_Enum;

/* ============================================  DMACTRL0 CHHPCLR CH11 [11..11]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH11                                                     */
  DMACTRL0_CHHPCLR_CH11_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH11_1              = 1,     /*!< 1 : Use the high default level for DMA Channel 11.                        */
} DMACTRL0_CHHPCLR_CH11_Enum;

/* ============================================  DMACTRL0 CHHPCLR CH10 [10..10]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH10                                                     */
  DMACTRL0_CHHPCLR_CH10_0              = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH10_1              = 1,     /*!< 1 : Use the high default level for DMA Channel 10.                        */
} DMACTRL0_CHHPCLR_CH10_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH9                                                      */
  DMACTRL0_CHHPCLR_CH9_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH9_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 9.                         */
} DMACTRL0_CHHPCLR_CH9_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH8                                                      */
  DMACTRL0_CHHPCLR_CH8_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH8_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 8.                         */
} DMACTRL0_CHHPCLR_CH8_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH7                                                      */
  DMACTRL0_CHHPCLR_CH7_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH7_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 7.                         */
} DMACTRL0_CHHPCLR_CH7_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH6                                                      */
  DMACTRL0_CHHPCLR_CH6_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH6_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 6.                         */
} DMACTRL0_CHHPCLR_CH6_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH5                                                      */
  DMACTRL0_CHHPCLR_CH5_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH5_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 5.                         */
} DMACTRL0_CHHPCLR_CH5_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH4                                                      */
  DMACTRL0_CHHPCLR_CH4_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH4_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 4.                         */
} DMACTRL0_CHHPCLR_CH4_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH3                                                      */
  DMACTRL0_CHHPCLR_CH3_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH3_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 3.                         */
} DMACTRL0_CHHPCLR_CH3_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH2                                                      */
  DMACTRL0_CHHPCLR_CH2_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH2_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 2.                         */
} DMACTRL0_CHHPCLR_CH2_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH1                                                      */
  DMACTRL0_CHHPCLR_CH1_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH1_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 1.                         */
} DMACTRL0_CHHPCLR_CH1_Enum;

/* ==============================================  DMACTRL0 CHHPCLR CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL0_CHHPCLR_CH0                                                      */
  DMACTRL0_CHHPCLR_CH0_0               = 0,     /*!< 0 : No effect.                                                            */
  DMACTRL0_CHHPCLR_CH0_1               = 1,     /*!< 1 : Use the high default level for DMA Channel 0.                         */
} DMACTRL0_CHHPCLR_CH0_Enum;

/* ========================================================  BERRCLR  ======================================================== */
/* =============================================  DMACTRL0 BERRCLR ERROR [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL0_BERRCLR_ERROR                                                    */
  DMACTRL0_BERRCLR_ERROR_0_R           = 0,     /*!< 0_R : DMA error did not occur.                                            */
  DMACTRL0_BERRCLR_ERROR_1_R           = 1,     /*!< 1_R : DMA error occurred since the last time ERROR was cleared.           */
} DMACTRL0_BERRCLR_ERROR_R_Enum;

typedef enum {                                  /*!< DMACTRL0_BERRCLR_ERROR                                                    */
  DMACTRL0_BERRCLR_ERROR_0_W           = 0,     /*!< 0_W : No effect.                                                          */
  DMACTRL0_BERRCLR_ERROR_1_W           = 1,     /*!< 1_W : Clear the DMA error flag.                                           */
} DMACTRL0_BERRCLR_ERROR_W_Enum;



/* =========================================================================================================================== */
/* ================                                         DMAXBAR0                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  DMAXBAR0  ======================================================== */
/* ===========================================  DMAXBAR0 DMAXBAR0 CH7SEL [28..31]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR0_CH7SEL                                                  */
  DMAXBAR0_DMAXBAR0_CH7SEL_0000        = 0,     /*!< 0000 : Service USB0 EP1 IN data requests.                                 */
  DMAXBAR0_DMAXBAR0_CH7SEL_0001        = 1,     /*!< 0001 : Service AES0 XOR data requests.                                    */
  DMAXBAR0_DMAXBAR0_CH7SEL_0010        = 2,     /*!< 0010 : Service SPI1 TX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH7SEL_0011        = 3,     /*!< 0011 : Service USART0 TX data requests.                                   */
  DMAXBAR0_DMAXBAR0_CH7SEL_0100        = 4,     /*!< 0100 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH7SEL_0101        = 5,     /*!< 0101 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH7SEL_0110        = 6,     /*!< 0110 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH7SEL_0111        = 7,     /*!< 0111 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH7SEL_1000        = 8,     /*!< 1000 : Service TIMER0L overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH7SEL_1001        = 9,     /*!< 1001 : Service TIMER1L overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH7SEL_1010        = 10,    /*!< 1010 : Service TIMER1H overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH7SEL_1011        = 11,    /*!< 1011 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR0_CH7SEL_Enum;

/* ===========================================  DMAXBAR0 DMAXBAR0 CH6SEL [24..27]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR0_CH6SEL                                                  */
  DMAXBAR0_DMAXBAR0_CH6SEL_0000        = 0,     /*!< 0000 : Service USB0 EP2 IN data requests.                                 */
  DMAXBAR0_DMAXBAR0_CH6SEL_0001        = 1,     /*!< 0001 : Service AES0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH6SEL_0010        = 2,     /*!< 0010 : Service USART0 RX data requests.                                   */
  DMAXBAR0_DMAXBAR0_CH6SEL_0011        = 3,     /*!< 0011 : Service I2C0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH6SEL_0100        = 4,     /*!< 0100 : Service IDAC0 data requests.                                       */
  DMAXBAR0_DMAXBAR0_CH6SEL_0101        = 5,     /*!< 0101 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH6SEL_0110        = 6,     /*!< 0110 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH6SEL_0111        = 7,     /*!< 0111 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH6SEL_1000        = 8,     /*!< 1000 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH6SEL_1001        = 9,     /*!< 1001 : Service TIMER0H overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH6SEL_1010        = 10,    /*!< 1010 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR0_CH6SEL_Enum;

/* ===========================================  DMAXBAR0 DMAXBAR0 CH5SEL [20..23]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR0_CH5SEL                                                  */
  DMAXBAR0_DMAXBAR0_CH5SEL_0000        = 0,     /*!< 0000 : Service USB0 EP3 IN data requests.                                 */
  DMAXBAR0_DMAXBAR0_CH5SEL_0001        = 1,     /*!< 0001 : Service AES0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH5SEL_0010        = 2,     /*!< 0010 : Service USART1 TX data requests.                                   */
  DMAXBAR0_DMAXBAR0_CH5SEL_0011        = 3,     /*!< 0011 : Service SARADC0 data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH5SEL_0100        = 4,     /*!< 0100 : Service I2S0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH5SEL_0101        = 5,     /*!< 0101 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH5SEL_0110        = 6,     /*!< 0110 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH5SEL_0111        = 7,     /*!< 0111 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH5SEL_1000        = 8,     /*!< 1000 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH5SEL_1001        = 9,     /*!< 1001 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR0_CH5SEL_Enum;

/* ===========================================  DMAXBAR0 DMAXBAR0 CH4SEL [16..19]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR0_CH4SEL                                                  */
  DMAXBAR0_DMAXBAR0_CH4SEL_0000        = 0,     /*!< 0000 : Service USB0 EP4 IN data requests.                                 */
  DMAXBAR0_DMAXBAR0_CH4SEL_0001        = 1,     /*!< 0001 : Service SPI1 TX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH4SEL_0010        = 2,     /*!< 0010 : Service USART0 TX data requests.                                   */
  DMAXBAR0_DMAXBAR0_CH4SEL_0011        = 3,     /*!< 0011 : Service SARADC0 data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH4SEL_0100        = 4,     /*!< 0100 : Service I2S0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH4SEL_0101        = 5,     /*!< 0101 : Service EPCA0 capture data requests.                               */
  DMAXBAR0_DMAXBAR0_CH4SEL_0110        = 6,     /*!< 0110 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH4SEL_0111        = 7,     /*!< 0111 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH4SEL_1000        = 8,     /*!< 1000 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH4SEL_1001        = 9,     /*!< 1001 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH4SEL_1010        = 10,    /*!< 1010 : Service TIMER0H overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH4SEL_1011        = 11,    /*!< 1011 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR0_CH4SEL_Enum;

/* ===========================================  DMAXBAR0 DMAXBAR0 CH3SEL [12..15]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR0_CH3SEL                                                  */
  DMAXBAR0_DMAXBAR0_CH3SEL_0000        = 0,     /*!< 0000 : Service USB0 EP1 OUT data requests.                                */
  DMAXBAR0_DMAXBAR0_CH3SEL_0001        = 1,     /*!< 0001 : Service SARADC1 data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH3SEL_0010        = 2,     /*!< 0010 : Service IDAC0 data requests.                                       */
  DMAXBAR0_DMAXBAR0_CH3SEL_0011        = 3,     /*!< 0011 : Service I2S0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH3SEL_0100        = 4,     /*!< 0100 : Service EPCA0 capture data requests.                               */
  DMAXBAR0_DMAXBAR0_CH3SEL_0101        = 5,     /*!< 0101 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH3SEL_0110        = 6,     /*!< 0110 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH3SEL_0111        = 7,     /*!< 0111 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH3SEL_1000        = 8,     /*!< 1000 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH3SEL_1001        = 9,     /*!< 1001 : Service TIMER1H overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH3SEL_1010        = 10,    /*!< 1010 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR0_CH3SEL_Enum;

/* ===========================================  DMAXBAR0 DMAXBAR0 CH2SEL [8..11]  ============================================ */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR0_CH2SEL                                                  */
  DMAXBAR0_DMAXBAR0_CH2SEL_0000        = 0,     /*!< 0000 : Service USB0 EP2 OUT data requests.                                */
  DMAXBAR0_DMAXBAR0_CH2SEL_0001        = 1,     /*!< 0001 : Service SPI0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH2SEL_0010        = 2,     /*!< 0010 : Service USART0 TX data requests.                                   */
  DMAXBAR0_DMAXBAR0_CH2SEL_0011        = 3,     /*!< 0011 : Service SARADC0 data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH2SEL_0100        = 4,     /*!< 0100 : Service IDAC1 data requests.                                       */
  DMAXBAR0_DMAXBAR0_CH2SEL_0101        = 5,     /*!< 0101 : Service I2S0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH2SEL_0110        = 6,     /*!< 0110 : Service EPCA0 control data requests.                               */
  DMAXBAR0_DMAXBAR0_CH2SEL_0111        = 7,     /*!< 0111 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH2SEL_1000        = 8,     /*!< 1000 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH2SEL_1001        = 9,     /*!< 1001 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH2SEL_1010        = 10,    /*!< 1010 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH2SEL_1011        = 11,    /*!< 1011 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR0_CH2SEL_Enum;

/* ============================================  DMAXBAR0 DMAXBAR0 CH1SEL [4..7]  ============================================ */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR0_CH1SEL                                                  */
  DMAXBAR0_DMAXBAR0_CH1SEL_0000        = 0,     /*!< 0000 : Service USB0 EP3 OUT data requests.                                */
  DMAXBAR0_DMAXBAR0_CH1SEL_0001        = 1,     /*!< 0001 : Service SPI0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH1SEL_0010        = 2,     /*!< 0010 : Service USART1 RX data requests.                                   */
  DMAXBAR0_DMAXBAR0_CH1SEL_0011        = 3,     /*!< 0011 : Service I2C0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH1SEL_0100        = 4,     /*!< 0100 : Service IDAC1 data requests.                                       */
  DMAXBAR0_DMAXBAR0_CH1SEL_0101        = 5,     /*!< 0101 : Service EPCA0 control data requests.                               */
  DMAXBAR0_DMAXBAR0_CH1SEL_0110        = 6,     /*!< 0110 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH1SEL_0111        = 7,     /*!< 0111 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH1SEL_1000        = 8,     /*!< 1000 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH1SEL_1001        = 9,     /*!< 1001 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH1SEL_1010        = 10,    /*!< 1010 : Service TIMER0L overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH1SEL_1011        = 11,    /*!< 1011 : Service TIMER1L overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH1SEL_1100        = 12,    /*!< 1100 : Service TIMER1H overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH1SEL_1101        = 13,    /*!< 1101 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR0_CH1SEL_Enum;

/* ============================================  DMAXBAR0 DMAXBAR0 CH0SEL [0..3]  ============================================ */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR0_CH0SEL                                                  */
  DMAXBAR0_DMAXBAR0_CH0SEL_0000        = 0,     /*!< 0000 : Service USB0 EP4 OUT data requests.                                */
  DMAXBAR0_DMAXBAR0_CH0SEL_0001        = 1,     /*!< 0001 : Service SPI1 RX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH0SEL_0010        = 2,     /*!< 0010 : Service USART0 RX data requests.                                   */
  DMAXBAR0_DMAXBAR0_CH0SEL_0011        = 3,     /*!< 0011 : Service I2C0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR0_CH0SEL_0100        = 4,     /*!< 0100 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH0SEL_0101        = 5,     /*!< 0101 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH0SEL_0110        = 6,     /*!< 0110 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR0_CH0SEL_0111        = 7,     /*!< 0111 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR0_CH0SEL_1000        = 8,     /*!< 1000 : Service TIMER0L overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH0SEL_1001        = 9,     /*!< 1001 : Service TIMER0H overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH0SEL_1010        = 10,    /*!< 1010 : Service TIMER1L overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH0SEL_1011        = 11,    /*!< 1011 : Service TIMER1H overflow data requests.                            */
  DMAXBAR0_DMAXBAR0_CH0SEL_1100        = 12,    /*!< 1100 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR0_CH0SEL_Enum;

/* =====================================================  DMAXBAR0_SET  ====================================================== */
/* =====================================================  DMAXBAR0_CLR  ====================================================== */
/* =======================================================  DMAXBAR1  ======================================================== */
/* ==========================================  DMAXBAR0 DMAXBAR1 CH15SEL [28..31]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR1_CH15SEL                                                 */
  DMAXBAR0_DMAXBAR1_CH15SEL_0000       = 0,     /*!< 0000 : Service USB0 EP1 IN data requests.                                 */
  DMAXBAR0_DMAXBAR1_CH15SEL_0001       = 1,     /*!< 0001 : Service SARADC1 data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH15SEL_0010       = 2,     /*!< 0010 : Service IDAC0 data requests.                                       */
  DMAXBAR0_DMAXBAR1_CH15SEL_0011       = 3,     /*!< 0011 : Service EPCA0 control data requests.                               */
  DMAXBAR0_DMAXBAR1_CH15SEL_0100       = 4,     /*!< 0100 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH15SEL_0101       = 5,     /*!< 0101 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH15SEL_0110       = 6,     /*!< 0110 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH15SEL_0111       = 7,     /*!< 0111 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH15SEL_1000       = 8,     /*!< 1000 : Service TIMER0H overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH15SEL_1001       = 9,     /*!< 1001 : Service TIMER1H overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH15SEL_1010       = 10,    /*!< 1010 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR1_CH15SEL_Enum;

/* ==========================================  DMAXBAR0 DMAXBAR1 CH14SEL [24..27]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR1_CH14SEL                                                 */
  DMAXBAR0_DMAXBAR1_CH14SEL_0000       = 0,     /*!< 0000 : Service USB0 EP2 IN data requests.                                 */
  DMAXBAR0_DMAXBAR1_CH14SEL_0001       = 1,     /*!< 0001 : Service SPI0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH14SEL_0010       = 2,     /*!< 0010 : Service USART0 TX data requests.                                   */
  DMAXBAR0_DMAXBAR1_CH14SEL_0011       = 3,     /*!< 0011 : Service IDAC0 data requests.                                       */
  DMAXBAR0_DMAXBAR1_CH14SEL_0100       = 4,     /*!< 0100 : Service EPCA0 control data requests.                               */
  DMAXBAR0_DMAXBAR1_CH14SEL_0101       = 5,     /*!< 0101 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH14SEL_0110       = 6,     /*!< 0110 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH14SEL_0111       = 7,     /*!< 0111 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH14SEL_1000       = 8,     /*!< 1000 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH14SEL_1001       = 9,     /*!< 1001 : Service TIMER0L overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH14SEL_1010       = 10,    /*!< 1010 : Service TIMER1L overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH14SEL_1011       = 11,    /*!< 1011 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR1_CH14SEL_Enum;

/* ==========================================  DMAXBAR0 DMAXBAR1 CH13SEL [20..23]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR1_CH13SEL                                                 */
  DMAXBAR0_DMAXBAR1_CH13SEL_0000       = 0,     /*!< 0000 : Service USB0 EP3 IN data requests.                                 */
  DMAXBAR0_DMAXBAR1_CH13SEL_0001       = 1,     /*!< 0001 : Service SPI0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH13SEL_0010       = 2,     /*!< 0010 : Service USART0 RX data requests.                                   */
  DMAXBAR0_DMAXBAR1_CH13SEL_0011       = 3,     /*!< 0011 : Service IDAC1 data requests.                                       */
  DMAXBAR0_DMAXBAR1_CH13SEL_0100       = 4,     /*!< 0100 : Service I2S0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH13SEL_0101       = 5,     /*!< 0101 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH13SEL_0110       = 6,     /*!< 0110 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH13SEL_0111       = 7,     /*!< 0111 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH13SEL_1000       = 8,     /*!< 1000 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH13SEL_1001       = 9,     /*!< 1001 : Service TIMER0H overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH13SEL_1010       = 10,    /*!< 1010 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR1_CH13SEL_Enum;

/* ==========================================  DMAXBAR0 DMAXBAR1 CH12SEL [16..19]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR1_CH12SEL                                                 */
  DMAXBAR0_DMAXBAR1_CH12SEL_0000       = 0,     /*!< 0000 : Service USB0 EP4 IN data requests.                                 */
  DMAXBAR0_DMAXBAR1_CH12SEL_0001       = 1,     /*!< 0001 : Service AES0 XOR data requests.                                    */
  DMAXBAR0_DMAXBAR1_CH12SEL_0010       = 2,     /*!< 0010 : Service USART1 TX data requests.                                   */
  DMAXBAR0_DMAXBAR1_CH12SEL_0011       = 3,     /*!< 0011 : Service SPI1 TX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH12SEL_0100       = 4,     /*!< 0100 : Service IDAC1 data requests.                                       */
  DMAXBAR0_DMAXBAR1_CH12SEL_0101       = 5,     /*!< 0101 : Service I2S0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH12SEL_0110       = 6,     /*!< 0110 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH12SEL_0111       = 7,     /*!< 0111 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH12SEL_1000       = 8,     /*!< 1000 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH12SEL_1001       = 9,     /*!< 1001 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH12SEL_1010       = 10,    /*!< 1010 : Service TIMER0L overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH12SEL_1011       = 11,    /*!< 1011 : Service TIMER1L overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH12SEL_1100       = 12,    /*!< 1100 : Service TIMER1H overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH12SEL_1101       = 13,    /*!< 1101 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR1_CH12SEL_Enum;

/* ==========================================  DMAXBAR0 DMAXBAR1 CH11SEL [12..15]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR1_CH11SEL                                                 */
  DMAXBAR0_DMAXBAR1_CH11SEL_0000       = 0,     /*!< 0000 : Service USB0 EP1 OUT data requests.                                */
  DMAXBAR0_DMAXBAR1_CH11SEL_0001       = 1,     /*!< 0001 : Service AES0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH11SEL_0010       = 2,     /*!< 0010 : Service USART1 RX data requests.                                   */
  DMAXBAR0_DMAXBAR1_CH11SEL_0011       = 3,     /*!< 0011 : Service USART0 RX data requests.                                   */
  DMAXBAR0_DMAXBAR1_CH11SEL_0100       = 4,     /*!< 0100 : Service I2C0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH11SEL_0101       = 5,     /*!< 0101 : Service I2S0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH11SEL_0110       = 6,     /*!< 0110 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH11SEL_0111       = 7,     /*!< 0111 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH11SEL_1000       = 8,     /*!< 1000 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH11SEL_1001       = 9,     /*!< 1001 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH11SEL_1010       = 10,    /*!< 1010 : Service TIMER0H overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH11SEL_1011       = 11,    /*!< 1011 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR1_CH11SEL_Enum;

/* ===========================================  DMAXBAR0 DMAXBAR1 CH10SEL [8..11]  =========================================== */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR1_CH10SEL                                                 */
  DMAXBAR0_DMAXBAR1_CH10SEL_0000       = 0,     /*!< 0000 : Service USB0 EP2 OUT data requests.                                */
  DMAXBAR0_DMAXBAR1_CH10SEL_0001       = 1,     /*!< 0001 : Service AES0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH10SEL_0010       = 2,     /*!< 0010 : Service SARADC1 data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH10SEL_0011       = 3,     /*!< 0011 : Service I2S0 RX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH10SEL_0100       = 4,     /*!< 0100 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH10SEL_0101       = 5,     /*!< 0101 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH10SEL_0110       = 6,     /*!< 0110 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH10SEL_0111       = 7,     /*!< 0111 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH10SEL_1000       = 8,     /*!< 1000 : Service TIMER1H overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH10SEL_1001       = 9,     /*!< 1001 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR1_CH10SEL_Enum;

/* ============================================  DMAXBAR0 DMAXBAR1 CH9SEL [4..7]  ============================================ */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR1_CH9SEL                                                  */
  DMAXBAR0_DMAXBAR1_CH9SEL_0000        = 0,     /*!< 0000 : Service USB0 EP3 OUT data requests.                                */
  DMAXBAR0_DMAXBAR1_CH9SEL_0001        = 1,     /*!< 0001 : Service USART1 TX data requests.                                   */
  DMAXBAR0_DMAXBAR1_CH9SEL_0010        = 2,     /*!< 0010 : Service I2C0 TX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH9SEL_0011        = 3,     /*!< 0011 : Service EPCA0 capture data requests.                               */
  DMAXBAR0_DMAXBAR1_CH9SEL_0100        = 4,     /*!< 0100 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH9SEL_0101        = 5,     /*!< 0101 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH9SEL_0110        = 6,     /*!< 0110 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH9SEL_0111        = 7,     /*!< 0111 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH9SEL_1000        = 8,     /*!< 1000 : Service TIMER0H overflow data requests.                            */
  DMAXBAR0_DMAXBAR1_CH9SEL_1001        = 9,     /*!< 1001 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR1_CH9SEL_Enum;

/* ============================================  DMAXBAR0 DMAXBAR1 CH8SEL [0..3]  ============================================ */
typedef enum {                                  /*!< DMAXBAR0_DMAXBAR1_CH8SEL                                                  */
  DMAXBAR0_DMAXBAR1_CH8SEL_0000        = 0,     /*!< 0000 : Service USB0 EP4 OUT data requests.                                */
  DMAXBAR0_DMAXBAR1_CH8SEL_0001        = 1,     /*!< 0001 : Service USART1 RX data requests.                                   */
  DMAXBAR0_DMAXBAR1_CH8SEL_0010        = 2,     /*!< 0010 : Service SPI1 RX data requests.                                     */
  DMAXBAR0_DMAXBAR1_CH8SEL_0011        = 3,     /*!< 0011 : Service USART0 RX data requests.                                   */
  DMAXBAR0_DMAXBAR1_CH8SEL_0100        = 4,     /*!< 0100 : Service EPCA0 capture data requests.                               */
  DMAXBAR0_DMAXBAR1_CH8SEL_0101        = 5,     /*!< 0101 : Service DMAXT0 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH8SEL_0110        = 6,     /*!< 0110 : Service DMAXT0 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH8SEL_0111        = 7,     /*!< 0111 : Service DMAXT1 rising edge data requests.                          */
  DMAXBAR0_DMAXBAR1_CH8SEL_1000        = 8,     /*!< 1000 : Service DMAXT1 falling edge data requests.                         */
  DMAXBAR0_DMAXBAR1_CH8SEL_1001        = 9,     /*!< 1001 : Reserved.                                                          */
} DMAXBAR0_DMAXBAR1_CH8SEL_Enum;

/* =====================================================  DMAXBAR1_SET  ====================================================== */
/* =====================================================  DMAXBAR1_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                         LPTIMER0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  LPTIMER0 CONTROL RUN [31..31]  ============================================= */
typedef enum {                                  /*!< LPTIMER0_CONTROL_RUN                                                      */
  LPTIMER0_CONTROL_RUN_Disable         = 0,     /*!< Disable : Stop the timer and disable the compare threshold.               */
  LPTIMER0_CONTROL_RUN_Enable          = 1,     /*!< Enable : Start the timer running and enable the compare threshold.        */
} LPTIMER0_CONTROL_RUN_Enum;

/* ============================================  LPTIMER0 CONTROL DBGMD [30..30]  ============================================ */
typedef enum {                                  /*!< LPTIMER0_CONTROL_DBGMD                                                    */
  LPTIMER0_CONTROL_DBGMD_0             = 0,     /*!< 0 : The Low Power Timer module will continue to operate while
                                                     the core is halted in debug mode.                                         */
  LPTIMER0_CONTROL_DBGMD_1             = 1,     /*!< 1 : A debug breakpoint will cause the Low Power Timer module
                                                     to halt.                                                                  */
} LPTIMER0_CONTROL_DBGMD_Enum;

/* ==========================================  LPTIMER0 CONTROL CMPRSTEN [24..24]  =========================================== */
typedef enum {                                  /*!< LPTIMER0_CONTROL_CMPRSTEN                                                 */
  LPTIMER0_CONTROL_CMPRSTEN_0          = 0,     /*!< 0 : Timer compare events do not reset the timer.                          */
  LPTIMER0_CONTROL_CMPRSTEN_1          = 1,     /*!< 1 : Timer compare events reset the timer.                                 */
} LPTIMER0_CONTROL_CMPRSTEN_Enum;

/* ===========================================  LPTIMER0 CONTROL CMPTMD [19..19]  ============================================ */
typedef enum {                                  /*!< LPTIMER0_CONTROL_CMPTMD                                                   */
  LPTIMER0_CONTROL_CMPTMD_0            = 0,     /*!< 0 : Timer compare events do not toggle the Low Power Timer output.        */
  LPTIMER0_CONTROL_CMPTMD_1            = 1,     /*!< 1 : Timer compare events toggle the Low Power Timer output.               */
} LPTIMER0_CONTROL_CMPTMD_Enum;

/* ===========================================  LPTIMER0 CONTROL OVFTMD [18..18]  ============================================ */
typedef enum {                                  /*!< LPTIMER0_CONTROL_OVFTMD                                                   */
  LPTIMER0_CONTROL_OVFTMD_0            = 0,     /*!< 0 : Timer overflows do not toggle the Low Power Timer output.             */
  LPTIMER0_CONTROL_OVFTMD_1            = 1,     /*!< 1 : Timer overflows toggle the Low Power Timer output.                    */
} LPTIMER0_CONTROL_OVFTMD_Enum;

/* ===========================================  LPTIMER0 CONTROL CMPIEN [17..17]  ============================================ */
typedef enum {                                  /*!< LPTIMER0_CONTROL_CMPIEN                                                   */
  LPTIMER0_CONTROL_CMPIEN_Disable      = 0,     /*!< Disable : Disable the timer compare event interrupt.                      */
  LPTIMER0_CONTROL_CMPIEN_Enable       = 1,     /*!< Enable : Enable the timer compare event interrupt.                        */
} LPTIMER0_CONTROL_CMPIEN_Enum;

/* ===========================================  LPTIMER0 CONTROL OVFIEN [16..16]  ============================================ */
typedef enum {                                  /*!< LPTIMER0_CONTROL_OVFIEN                                                   */
  LPTIMER0_CONTROL_OVFIEN_Disable      = 0,     /*!< Disable : Disable the timer overflow interrupt.                           */
  LPTIMER0_CONTROL_OVFIEN_Enable       = 1,     /*!< Enable : Enable the timer overflow interrupt.                             */
} LPTIMER0_CONTROL_OVFIEN_Enum;

/* ============================================  LPTIMER0 CONTROL EXTSEL [4..7]  ============================================= */
typedef enum {                                  /*!< LPTIMER0_CONTROL_EXTSEL                                                   */
  LPTIMER0_CONTROL_EXTSEL_0000         = 0,     /*!< 0000 : Select external trigger LPTnT0.                                    */
  LPTIMER0_CONTROL_EXTSEL_0001         = 1,     /*!< 0001 : Select external trigger LPTnT1.                                    */
  LPTIMER0_CONTROL_EXTSEL_0010         = 2,     /*!< 0010 : Select external trigger LPTnT2.                                    */
  LPTIMER0_CONTROL_EXTSEL_0011         = 3,     /*!< 0011 : Select external trigger LPTnT3.                                    */
  LPTIMER0_CONTROL_EXTSEL_0100         = 4,     /*!< 0100 : Select external trigger LPTnT4.                                    */
  LPTIMER0_CONTROL_EXTSEL_0101         = 5,     /*!< 0101 : Select external trigger LPTnT5.                                    */
  LPTIMER0_CONTROL_EXTSEL_0110         = 6,     /*!< 0110 : Select external trigger LPTnT6.                                    */
  LPTIMER0_CONTROL_EXTSEL_0111         = 7,     /*!< 0111 : Select external trigger LPTnT7.                                    */
  LPTIMER0_CONTROL_EXTSEL_1000         = 8,     /*!< 1000 : Select external trigger LPTnT8.                                    */
  LPTIMER0_CONTROL_EXTSEL_1001         = 9,     /*!< 1001 : Select external trigger LPTnT9.                                    */
  LPTIMER0_CONTROL_EXTSEL_1010         = 10,    /*!< 1010 : Select external trigger LPTnT10.                                   */
  LPTIMER0_CONTROL_EXTSEL_1011         = 11,    /*!< 1011 : Select external trigger LPTnT11.                                   */
  LPTIMER0_CONTROL_EXTSEL_1100         = 12,    /*!< 1100 : Select external trigger LPTnT12.                                   */
  LPTIMER0_CONTROL_EXTSEL_1101         = 13,    /*!< 1101 : Select external trigger LPTnT13.                                   */
  LPTIMER0_CONTROL_EXTSEL_1110         = 14,    /*!< 1110 : Select external trigger LPTnT14.                                   */
  LPTIMER0_CONTROL_EXTSEL_1111         = 15,    /*!< 1111 : Select external trigger LPTnT15.                                   */
} LPTIMER0_CONTROL_EXTSEL_Enum;

/* ==============================================  LPTIMER0 CONTROL CMD [0..1]  ============================================== */
typedef enum {                                  /*!< LPTIMER0_CONTROL_CMD                                                      */
  LPTIMER0_CONTROL_CMD_00              = 0,     /*!< 00 : The timer is free running mode on the RTC0 timer clock
                                                     (RTC0TCLK).                                                               */
  LPTIMER0_CONTROL_CMD_01              = 1,     /*!< 01 : The timer is incremented on the rising edges of the selected
                                                     external trigger (LPTnTx).                                                */
  LPTIMER0_CONTROL_CMD_10              = 2,     /*!< 10 : The timer is incremented on the falling edges of the selected
                                                     external trigger (LPTnTx).                                                */
  LPTIMER0_CONTROL_CMD_11              = 3,     /*!< 11 : The timer is incremented on both edges of the selected
                                                     external trigger (LPT-nTx).                                               */
} LPTIMER0_CONTROL_CMD_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  DATA  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           LDO0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  LDO0 CONTROL LDOAEN [31..31]  ============================================== */
typedef enum {                                  /*!< LDO0_CONTROL_LDOAEN                                                       */
  LDO0_CONTROL_LDOAEN_Disable          = 0,     /*!< Disable : LDO0 analog output disabled.                                    */
  LDO0_CONTROL_LDOAEN_Enable           = 1,     /*!< Enable : LDO0 analog output enabled.                                      */
} LDO0_CONTROL_LDOAEN_Enum;

/* =============================================  LDO0 CONTROL LDOIBIAS [1..1]  ============================================== */
typedef enum {                                  /*!< LDO0_CONTROL_LDOIBIAS                                                     */
  LDO0_CONTROL_LDOIBIAS_0              = 0,     /*!< 0 : Select high bias.                                                     */
  LDO0_CONTROL_LDOIBIAS_1              = 1,     /*!< 1 : Select low bias (AHB frequency < 2.5 MHz).                            */
} LDO0_CONTROL_LDOIBIAS_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           VREF0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  VREF0 CONTROL VREFEN [31..31]  ============================================= */
typedef enum {                                  /*!< VREF0_CONTROL_VREFEN                                                      */
  VREF0_CONTROL_VREFEN_Disable         = 0,     /*!< Disable : Disable the Voltage Reference.                                  */
  VREF0_CONTROL_VREFEN_Enable          = 1,     /*!< Enable : Enable the Voltage Reference.                                    */
} VREF0_CONTROL_VREFEN_Enum;

/* ==============================================  VREF0 CONTROL TEMPEN [1..1]  ============================================== */
typedef enum {                                  /*!< VREF0_CONTROL_TEMPEN                                                      */
  VREF0_CONTROL_TEMPEN_Disable         = 0,     /*!< Disable : Disable the temperature sensor.                                 */
  VREF0_CONTROL_TEMPEN_Enable          = 1,     /*!< Enable : Enable the temperature sensor.                                   */
} VREF0_CONTROL_TEMPEN_Enum;

/* ==============================================  VREF0 CONTROL VREF2X [0..0]  ============================================== */
typedef enum {                                  /*!< VREF0_CONTROL_VREF2X                                                      */
  VREF0_CONTROL_VREF2X_0               = 0,     /*!< 0 : VREF output is nominally 1.2 V                                        */
  VREF0_CONTROL_VREF2X_1               = 1,     /*!< 1 : VREF output is nominally 2.4 V                                        */
} VREF0_CONTROL_VREF2X_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           I2S0                                            ================ */
/* =========================================================================================================================== */

/* =======================================================  TXCONTROL  ======================================================= */
/* =============================================  I2S0 TXCONTROL TXEN [29..29]  ============================================== */
typedef enum {                                  /*!< I2S0_TXCONTROL_TXEN                                                       */
  I2S0_TXCONTROL_TXEN_Disable          = 0,     /*!< Disable : Disable the I2S transmitter.                                    */
  I2S0_TXCONTROL_TXEN_Enable           = 1,     /*!< Enable : Enable the I2S transmitter.                                      */
} I2S0_TXCONTROL_TXEN_Enum;

/* =============================================  I2S0 TXCONTROL MBSEL [24..26]  ============================================= */
typedef enum {                                  /*!< I2S0_TXCONTROL_MBSEL                                                      */
  I2S0_TXCONTROL_MBSEL_000             = 0,     /*!< 000 : 8 bits are sent per mono sample.                                    */
  I2S0_TXCONTROL_MBSEL_001             = 1,     /*!< 001 : 9 bits are sent per mono sample.                                    */
  I2S0_TXCONTROL_MBSEL_010             = 2,     /*!< 010 : 16 bits are sent per mono sample.                                   */
  I2S0_TXCONTROL_MBSEL_011             = 3,     /*!< 011 : 24 bits are sent per mono sample.                                   */
  I2S0_TXCONTROL_MBSEL_100             = 4,     /*!< 100 : 32 bits are sent per mono sample.                                   */
  I2S0_TXCONTROL_MBSEL_101             = 5,     /*!< 101 : Reserved.                                                           */
} I2S0_TXCONTROL_MBSEL_Enum;

/* =============================================  I2S0 TXCONTROL ORDER [22..22]  ============================================= */
typedef enum {                                  /*!< I2S0_TXCONTROL_ORDER                                                      */
  I2S0_TXCONTROL_ORDER_0               = 0,     /*!< 0 : Left sample transmitted first, right sample transmitted
                                                     second. Use this setting for I2S format.                                  */
  I2S0_TXCONTROL_ORDER_1               = 1,     /*!< 1 : Right sample transmitted first, left sample transmitted
                                                     second.                                                                   */
} I2S0_TXCONTROL_ORDER_Enum;

/* ===========================================  I2S0 TXCONTROL SCLKINVEN [21..21]  =========================================== */
typedef enum {                                  /*!< I2S0_TXCONTROL_SCLKINVEN                                                  */
  I2S0_TXCONTROL_SCLKINVEN_0           = 0,     /*!< 0 : Do not invert the transmitter bit clock.                              */
  I2S0_TXCONTROL_SCLKINVEN_1           = 1,     /*!< 1 : Invert the transmitter bit clock.                                     */
} I2S0_TXCONTROL_SCLKINVEN_Enum;

/* ============================================  I2S0 TXCONTROL FSINVEN [20..20]  ============================================ */
typedef enum {                                  /*!< I2S0_TXCONTROL_FSINVEN                                                    */
  I2S0_TXCONTROL_FSINVEN_0             = 0,     /*!< 0 : Don't invert the WS signal. Use this setting for I2S format.          */
  I2S0_TXCONTROL_FSINVEN_1             = 1,     /*!< 1 : Invert the WS signal.                                                 */
} I2S0_TXCONTROL_FSINVEN_Enum;

/* =============================================  I2S0 TXCONTROL JSEL [17..17]  ============================================== */
typedef enum {                                  /*!< I2S0_TXCONTROL_JSEL                                                       */
  I2S0_TXCONTROL_JSEL_0                = 0,     /*!< 0 : Use left-justified or I2S-style formats.                              */
  I2S0_TXCONTROL_JSEL_1                = 1,     /*!< 1 : Use right-justified format.                                           */
} I2S0_TXCONTROL_JSEL_Enum;

/* ============================================  I2S0 TXCONTROL FILLSEL [15..16]  ============================================ */
typedef enum {                                  /*!< I2S0_TXCONTROL_FILLSEL                                                    */
  I2S0_TXCONTROL_FILLSEL_00            = 0,     /*!< 00 : Send zeros during unused bit cycles.                                 */
  I2S0_TXCONTROL_FILLSEL_01            = 1,     /*!< 01 : Send ones during unused bit cycles.                                  */
  I2S0_TXCONTROL_FILLSEL_10            = 2,     /*!< 10 : Send the sign bit of the current sample (MSB-first format)
                                                     or last sample (LSB-first format) during unused bit cycles.               */
  I2S0_TXCONTROL_FILLSEL_11            = 3,     /*!< 11 : Send pseudo-random data generated by an 8-bit LFSR during
                                                     unused bit cycles.                                                        */
} I2S0_TXCONTROL_FILLSEL_Enum;

/* ===========================================  I2S0 TXCONTROL FSSRCSEL [14..14]  ============================================ */
typedef enum {                                  /*!< I2S0_TXCONTROL_FSSRCSEL                                                   */
  I2S0_TXCONTROL_FSSRCSEL_0            = 0,     /*!< 0 : The word select or frame sync is input from the WS pin.               */
  I2S0_TXCONTROL_FSSRCSEL_1            = 1,     /*!< 1 : The word select or frame sync is input from the internal
                                                     DFS generator.                                                            */
} I2S0_TXCONTROL_FSSRCSEL_Enum;

/* ==============================================  I2S0 TXCONTROL DDIS [5..5]  =============================================== */
typedef enum {                                  /*!< I2S0_TXCONTROL_DDIS                                                       */
  I2S0_TXCONTROL_DDIS_0                = 0,     /*!< 0 : The first data bit is sent on the second or later rising
                                                     edge of SCK after WS changes.                                             */
  I2S0_TXCONTROL_DDIS_1                = 1,     /*!< 1 : The first data bit is sent on the first rising edge of SCK
                                                     after WS changes.                                                         */
} I2S0_TXCONTROL_DDIS_Enum;

/* ==============================================  I2S0 TXCONTROL FSSEN [1..1]  ============================================== */
typedef enum {                                  /*!< I2S0_TXCONTROL_FSSEN                                                      */
  I2S0_TXCONTROL_FSSEN_0               = 0,     /*!< 0 : The internal DFS generator starts immediately when FSGEN
                                                     is set to 1.                                                              */
  I2S0_TXCONTROL_FSSEN_1               = 1,     /*!< 1 : Synchronize the rising edge of the internally generated
                                                     WS signal from the DFS generator to the rising edge of
                                                     the external WS input signal.                                             */
} I2S0_TXCONTROL_FSSEN_Enum;

/* ==============================================  I2S0 TXCONTROL FSGEN [0..0]  ============================================== */
typedef enum {                                  /*!< I2S0_TXCONTROL_FSGEN                                                      */
  I2S0_TXCONTROL_FSGEN_Disable         = 0,     /*!< Disable : Disable the internal DFS generator.                             */
  I2S0_TXCONTROL_FSGEN_Enable          = 1,     /*!< Enable : Enable the internal DFS generator.                               */
} I2S0_TXCONTROL_FSGEN_Enum;

/* =====================================================  TXCONTROL_SET  ===================================================== */
/* =====================================================  TXCONTROL_CLR  ===================================================== */
/* ========================================================  TXMODE  ========================================================= */
/* ==============================================  I2S0 TXMODE TDMEN [27..27]  =============================================== */
typedef enum {                                  /*!< I2S0_TXMODE_TDMEN                                                         */
  I2S0_TXMODE_TDMEN_Disable            = 0,     /*!< Disable : Disable the time division multiplexing (TDM) feature.           */
  I2S0_TXMODE_TDMEN_Enable             = 1,     /*!< Enable : Enable the time division multiplexing (TDM) feature.             */
} I2S0_TXMODE_TDMEN_Enum;

/* ===============================================  I2S0 TXMODE DIMD [26..26]  =============================================== */
typedef enum {                                  /*!< I2S0_TXMODE_DIMD                                                          */
  I2S0_TXMODE_DIMD_0                   = 0,     /*!< 0 : Drive zero on the data output pin during non-active slots.            */
  I2S0_TXMODE_DIMD_1                   = 1,     /*!< 1 : Don't drive the data output pin. The data output pin is
                                                     tristated.                                                                */
} I2S0_TXMODE_DIMD_Enum;

/* ==============================================  I2S0 TXMODE DEDIS [25..25]  =============================================== */
typedef enum {                                  /*!< I2S0_TXMODE_DEDIS                                                         */
  I2S0_TXMODE_DEDIS_0                  = 0,     /*!< 0 : Drive the output during every cycle of the transmitter's
                                                     assigned slot(s), including the last clock cycle.                         */
  I2S0_TXMODE_DEDIS_1                  = 1,     /*!< 1 : Drive the output for every cycle of the transmitter's assigned
                                                     slot(s), except for the last clock cycle of the last slot.                */
} I2S0_TXMODE_DEDIS_Enum;

/* ======================================================  TXMODE_SET  ======================================================= */
/* ======================================================  TXMODE_CLR  ======================================================= */
/* ========================================================  FSDUTY  ========================================================= */
/* =======================================================  RXCONTROL  ======================================================= */
/* =============================================  I2S0 RXCONTROL RXEN [21..21]  ============================================== */
typedef enum {                                  /*!< I2S0_RXCONTROL_RXEN                                                       */
  I2S0_RXCONTROL_RXEN_Disable          = 0,     /*!< Disable : Disable the I2S receiver.                                       */
  I2S0_RXCONTROL_RXEN_Enable           = 1,     /*!< Enable : Enable the I2S receiver.                                         */
} I2S0_RXCONTROL_RXEN_Enum;

/* ===========================================  I2S0 RXCONTROL FSSRCSEL [20..20]  ============================================ */
typedef enum {                                  /*!< I2S0_RXCONTROL_FSSRCSEL                                                   */
  I2S0_RXCONTROL_FSSRCSEL_0            = 0,     /*!< 0 : The word select or frame sync is input from the WS pin.               */
  I2S0_RXCONTROL_FSSRCSEL_1            = 1,     /*!< 1 : The word select or frame sync is input from the internal
                                                     DFS generator.                                                            */
} I2S0_RXCONTROL_FSSRCSEL_Enum;

/* =============================================  I2S0 RXCONTROL MBSEL [15..17]  ============================================= */
typedef enum {                                  /*!< I2S0_RXCONTROL_MBSEL                                                      */
  I2S0_RXCONTROL_MBSEL_000             = 0,     /*!< 000 : 8 bits are received per mono sample.                                */
  I2S0_RXCONTROL_MBSEL_001             = 1,     /*!< 001 : 9 bits are received per mono sample.                                */
  I2S0_RXCONTROL_MBSEL_010             = 2,     /*!< 010 : 16 bits are received per mono sample.                               */
  I2S0_RXCONTROL_MBSEL_011             = 3,     /*!< 011 : 24 bits are received per mono sample.                               */
  I2S0_RXCONTROL_MBSEL_100             = 4,     /*!< 100 : 32 bits are received per mono sample.                               */
  I2S0_RXCONTROL_MBSEL_101             = 5,     /*!< 101 : Reserved.                                                           */
} I2S0_RXCONTROL_MBSEL_Enum;

/* =============================================  I2S0 RXCONTROL ORDER [13..13]  ============================================= */
typedef enum {                                  /*!< I2S0_RXCONTROL_ORDER                                                      */
  I2S0_RXCONTROL_ORDER_0               = 0,     /*!< 0 : Left sample received first, right sample received second.
                                                     Use this setting for I2S format.                                          */
  I2S0_RXCONTROL_ORDER_1               = 1,     /*!< 1 : Right sample received first, left sample received second.             */
} I2S0_RXCONTROL_ORDER_Enum;

/* ===========================================  I2S0 RXCONTROL SCLKINVEN [12..12]  =========================================== */
typedef enum {                                  /*!< I2S0_RXCONTROL_SCLKINVEN                                                  */
  I2S0_RXCONTROL_SCLKINVEN_0           = 0,     /*!< 0 : Do not invert the receiver bit clock.                                 */
  I2S0_RXCONTROL_SCLKINVEN_1           = 1,     /*!< 1 : Invert the receiver bit clock.                                        */
} I2S0_RXCONTROL_SCLKINVEN_Enum;

/* ============================================  I2S0 RXCONTROL FSINVEN [11..11]  ============================================ */
typedef enum {                                  /*!< I2S0_RXCONTROL_FSINVEN                                                    */
  I2S0_RXCONTROL_FSINVEN_0             = 0,     /*!< 0 : Don't invert the WS signal. Use this setting for I2S format.          */
  I2S0_RXCONTROL_FSINVEN_1             = 1,     /*!< 1 : Invert the WS signal.                                                 */
} I2S0_RXCONTROL_FSINVEN_Enum;

/* ==============================================  I2S0 RXCONTROL DDIS [9..9]  =============================================== */
typedef enum {                                  /*!< I2S0_RXCONTROL_DDIS                                                       */
  I2S0_RXCONTROL_DDIS_0                = 0,     /*!< 0 : The first data bit is captured on the second or later rising
                                                     edge of SCK after WS changes.                                             */
  I2S0_RXCONTROL_DDIS_1                = 1,     /*!< 1 : The first data bit is captured by the receiver on the first
                                                     rising edge of SCK after WS changes.                                      */
} I2S0_RXCONTROL_DDIS_Enum;

/* ==============================================  I2S0 RXCONTROL JSEL [8..8]  =============================================== */
typedef enum {                                  /*!< I2S0_RXCONTROL_JSEL                                                       */
  I2S0_RXCONTROL_JSEL_0                = 0,     /*!< 0 : Use left-justified or I2S-style formats.                              */
  I2S0_RXCONTROL_JSEL_1                = 1,     /*!< 1 : Use right-justified format.                                           */
} I2S0_RXCONTROL_JSEL_Enum;

/* =====================================================  RXCONTROL_SET  ===================================================== */
/* =====================================================  RXCONTROL_CLR  ===================================================== */
/* ========================================================  RXMODE  ========================================================= */
/* ==============================================  I2S0 RXMODE TDMEN [27..27]  =============================================== */
typedef enum {                                  /*!< I2S0_RXMODE_TDMEN                                                         */
  I2S0_RXMODE_TDMEN_Disable            = 0,     /*!< Disable : Disable the time division multiplexing (TDM) feature.           */
  I2S0_RXMODE_TDMEN_Enable             = 1,     /*!< Enable : Enable the time division multiplexing (TDM) feature.             */
} I2S0_RXMODE_TDMEN_Enum;

/* ======================================================  RXMODE_SET  ======================================================= */
/* ======================================================  RXMODE_CLR  ======================================================= */
/* ======================================================  CLKCONTROL  ======================================================= */
/* ===========================================  I2S0 CLKCONTROL TXSCLKMD [27..27]  =========================================== */
typedef enum {                                  /*!< I2S0_CLKCONTROL_TXSCLKMD                                                  */
  I2S0_CLKCONTROL_TXSCLKMD_0           = 0,     /*!< 0 : The I2S transmitter SCK signal is an output.                          */
  I2S0_CLKCONTROL_TXSCLKMD_1           = 1,     /*!< 1 : The I2S transmitter SCK signal is an input.                           */
} I2S0_CLKCONTROL_TXSCLKMD_Enum;

/* ===========================================  I2S0 CLKCONTROL RXSCLKMD [26..26]  =========================================== */
typedef enum {                                  /*!< I2S0_CLKCONTROL_RXSCLKMD                                                  */
  I2S0_CLKCONTROL_RXSCLKMD_0           = 0,     /*!< 0 : The I2S receiver SCK signal is an output.                             */
  I2S0_CLKCONTROL_RXSCLKMD_1           = 1,     /*!< 1 : The I2S receiver SCK signal is an input.                              */
} I2S0_CLKCONTROL_RXSCLKMD_Enum;

/* ===========================================  I2S0 CLKCONTROL TXCLKEN [25..25]  ============================================ */
typedef enum {                                  /*!< I2S0_CLKCONTROL_TXCLKEN                                                   */
  I2S0_CLKCONTROL_TXCLKEN_Disable      = 0,     /*!< Disable : Disable the I2S transmitter clock.                              */
  I2S0_CLKCONTROL_TXCLKEN_Enable       = 1,     /*!< Enable : Enable the I2S transmitter clock.                                */
} I2S0_CLKCONTROL_TXCLKEN_Enum;

/* ===========================================  I2S0 CLKCONTROL RXCLKEN [24..24]  ============================================ */
typedef enum {                                  /*!< I2S0_CLKCONTROL_RXCLKEN                                                   */
  I2S0_CLKCONTROL_RXCLKEN_Disable      = 0,     /*!< Disable : Disable the I2S receiver clock.                                 */
  I2S0_CLKCONTROL_RXCLKEN_Enable       = 1,     /*!< Enable : Enable the I2S receiver clock.                                   */
} I2S0_CLKCONTROL_RXCLKEN_Enum;

/* ===========================================  I2S0 CLKCONTROL RXCLKSEL [22..22]  =========================================== */
typedef enum {                                  /*!< I2S0_CLKCONTROL_RXCLKSEL                                                  */
  I2S0_CLKCONTROL_RXCLKSEL_0           = 0,     /*!< 0 : The I2S receiver is clocked from the internal clock divider.          */
  I2S0_CLKCONTROL_RXCLKSEL_1           = 1,     /*!< 1 : The I2S receiver is clocked from the SCK pin.                         */
} I2S0_CLKCONTROL_RXCLKSEL_Enum;

/* ===========================================  I2S0 CLKCONTROL TXCLKSEL [21..21]  =========================================== */
typedef enum {                                  /*!< I2S0_CLKCONTROL_TXCLKSEL                                                  */
  I2S0_CLKCONTROL_TXCLKSEL_0           = 0,     /*!< 0 : The I2S transmitter is clocked from the internal clock divider.       */
  I2S0_CLKCONTROL_TXCLKSEL_1           = 1,     /*!< 1 : The I2S transmitter is clocked from the SCK pin.                      */
} I2S0_CLKCONTROL_TXCLKSEL_Enum;

/* ============================================  I2S0 CLKCONTROL DIVEN [20..20]  ============================================= */
typedef enum {                                  /*!< I2S0_CLKCONTROL_DIVEN                                                     */
  I2S0_CLKCONTROL_DIVEN_Disable        = 0,     /*!< Disable : Disable the clock divider.                                      */
  I2S0_CLKCONTROL_DIVEN_Enable         = 1,     /*!< Enable : Enable the clock divider.                                        */
} I2S0_CLKCONTROL_DIVEN_Enum;

/* ============================================  I2S0 CLKCONTROL DUTYMD [18..18]  ============================================ */
typedef enum {                                  /*!< I2S0_CLKCONTROL_DUTYMD                                                    */
  I2S0_CLKCONTROL_DUTYMD_0             = 0,     /*!< 0 : When the division is fractional, the clock high time will
                                                     be greater than 50% (by half of the source clock period).                 */
  I2S0_CLKCONTROL_DUTYMD_1             = 1,     /*!< 1 : When the division is fractional, the clock low time will
                                                     be greater than 50% (by half of the source clock period).                 */
} I2S0_CLKCONTROL_DUTYMD_Enum;

/* ====================================================  CLKCONTROL_SET  ===================================================== */
/* ====================================================  CLKCONTROL_CLR  ===================================================== */
/* ========================================================  TXFIFO  ========================================================= */
/* ========================================================  RXFIFO  ========================================================= */
/* ======================================================  FIFOSTATUS  ======================================================= */
/* ======================================================  FIFOCONTROL  ====================================================== */
/* ====================================================  FIFOCONTROL_SET  ==================================================== */
/* ====================================================  FIFOCONTROL_CLR  ==================================================== */
/* ======================================================  INTCONTROL  ======================================================= */
/* ============================================  I2S0 INTCONTROL RXHWMIEN [3..3]  ============================================ */
typedef enum {                                  /*!< I2S0_INTCONTROL_RXHWMIEN                                                  */
  I2S0_INTCONTROL_RXHWMIEN_Disable     = 0,     /*!< Disable : Disable the receive FIFO high watermark interrupt.              */
  I2S0_INTCONTROL_RXHWMIEN_Enable      = 1,     /*!< Enable : Enable the receive FIFO high watermark interrupt.                */
} I2S0_INTCONTROL_RXHWMIEN_Enum;

/* ============================================  I2S0 INTCONTROL TXLWMIEN [2..2]  ============================================ */
typedef enum {                                  /*!< I2S0_INTCONTROL_TXLWMIEN                                                  */
  I2S0_INTCONTROL_TXLWMIEN_Disable     = 0,     /*!< Disable : Disable the transmit FIFO low watermark interrupt.              */
  I2S0_INTCONTROL_TXLWMIEN_Enable      = 1,     /*!< Enable : Enable the transmit FIFO low watermark interrupt.                */
} I2S0_INTCONTROL_TXLWMIEN_Enum;

/* ============================================  I2S0 INTCONTROL RXOFIEN [1..1]  ============================================= */
typedef enum {                                  /*!< I2S0_INTCONTROL_RXOFIEN                                                   */
  I2S0_INTCONTROL_RXOFIEN_Disable      = 0,     /*!< Disable : Disable the receive overflow interrupt.                         */
  I2S0_INTCONTROL_RXOFIEN_Enable       = 1,     /*!< Enable : Enable the receive overflow interrupt.                           */
} I2S0_INTCONTROL_RXOFIEN_Enum;

/* ============================================  I2S0 INTCONTROL TXUFIEN [0..0]  ============================================= */
typedef enum {                                  /*!< I2S0_INTCONTROL_TXUFIEN                                                   */
  I2S0_INTCONTROL_TXUFIEN_Disable      = 0,     /*!< Disable : Disable the transmit underflow interrupt.                       */
  I2S0_INTCONTROL_TXUFIEN_Enable       = 1,     /*!< Enable : Enable the transmit underflow interrupt.                         */
} I2S0_INTCONTROL_TXUFIEN_Enum;

/* ====================================================  INTCONTROL_SET  ===================================================== */
/* ====================================================  INTCONTROL_CLR  ===================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =============================================  I2S0 STATUS RXCLKENRF [9..9]  ============================================== */
typedef enum {                                  /*!< I2S0_STATUS_RXCLKENRF                                                     */
  I2S0_STATUS_RXCLKENRF_0              = 0,     /*!< 0 : The receive clock is not synchronized.                                */
  I2S0_STATUS_RXCLKENRF_1              = 1,     /*!< 1 : The receive clock is synchronized and the receiver is ready
                                                     to accept data.                                                           */
} I2S0_STATUS_RXCLKENRF_Enum;

/* =============================================  I2S0 STATUS TXCLKENRF [8..8]  ============================================== */
typedef enum {                                  /*!< I2S0_STATUS_TXCLKENRF                                                     */
  I2S0_STATUS_TXCLKENRF_0              = 0,     /*!< 0 : The transmit clock is not synchronized.                               */
  I2S0_STATUS_TXCLKENRF_1              = 1,     /*!< 1 : The transmit clock is synchronized and the transmitter is
                                                     ready to send data.                                                       */
} I2S0_STATUS_TXCLKENRF_Enum;

/* =============================================  I2S0 STATUS RXCLKSELRF [7..7]  ============================================= */
typedef enum {                                  /*!< I2S0_STATUS_RXCLKSELRF                                                    */
  I2S0_STATUS_RXCLKSELRF_0             = 0,     /*!< 0 : The receive clock is not synchronized.                                */
  I2S0_STATUS_RXCLKSELRF_1             = 1,     /*!< 1 : The receive clock is synchronized and the receiver is ready
                                                     to accept data.                                                           */
} I2S0_STATUS_RXCLKSELRF_Enum;

/* =============================================  I2S0 STATUS TXCLKSELRF [6..6]  ============================================= */
typedef enum {                                  /*!< I2S0_STATUS_TXCLKSELRF                                                    */
  I2S0_STATUS_TXCLKSELRF_0             = 0,     /*!< 0 : The transmit clock is not synchronized.                               */
  I2S0_STATUS_TXCLKSELRF_1             = 1,     /*!< 1 : The transmit clock is synchronized and the transmitter is
                                                     ready to send data.                                                       */
} I2S0_STATUS_TXCLKSELRF_Enum;

/* ===============================================  I2S0 STATUS CDSTS [5..5]  ================================================ */
typedef enum {                                  /*!< I2S0_STATUS_CDSTS                                                         */
  I2S0_STATUS_CDSTS_0                  = 0,     /*!< 0 : Divided clock output is running.                                      */
  I2S0_STATUS_CDSTS_1                  = 1,     /*!< 1 : Divided clock output is halted.                                       */
} I2S0_STATUS_CDSTS_Enum;

/* ==============================================  I2S0 STATUS CDBUSYF [4..4]  =============================================== */
typedef enum {                                  /*!< I2S0_STATUS_CDBUSYF                                                       */
  I2S0_STATUS_CDBUSYF_0                = 0,     /*!< 0 : The divider is not busy and an update is not pending.                 */
  I2S0_STATUS_CDBUSYF_1                = 1,     /*!< 1 : The divider is busy and an update is pending.                         */
} I2S0_STATUS_CDBUSYF_Enum;

/* ===============================================  I2S0 STATUS RXHWMI [3..3]  =============================================== */
typedef enum {                                  /*!< I2S0_STATUS_RXHWMI                                                        */
  I2S0_STATUS_RXHWMI_0                 = 0,     /*!< 0 : Receive FIFO level is below the high watermark.                       */
  I2S0_STATUS_RXHWMI_1                 = 1,     /*!< 1 : Receive FIFO level is at or above the high watermark.                 */
} I2S0_STATUS_RXHWMI_Enum;

/* ===============================================  I2S0 STATUS TXLWMI [2..2]  =============================================== */
typedef enum {                                  /*!< I2S0_STATUS_TXLWMI                                                        */
  I2S0_STATUS_TXLWMI_0                 = 0,     /*!< 0 : Transmit FIFO level is above the low watermark.                       */
  I2S0_STATUS_TXLWMI_1                 = 1,     /*!< 1 : Transmit FIFO level is at or below the low watermark.                 */
} I2S0_STATUS_TXLWMI_Enum;

/* ===============================================  I2S0 STATUS RXOFI [1..1]  ================================================ */
typedef enum {                                  /*!< I2S0_STATUS_RXOFI                                                         */
  I2S0_STATUS_RXOFI_0                  = 0,     /*!< 0 : A receive overflow has not occurred.                                  */
  I2S0_STATUS_RXOFI_1                  = 1,     /*!< 1 : A receive overflow occurred.                                          */
} I2S0_STATUS_RXOFI_Enum;

/* ===============================================  I2S0 STATUS TXUFI [0..0]  ================================================ */
typedef enum {                                  /*!< I2S0_STATUS_TXUFI                                                         */
  I2S0_STATUS_TXUFI_0                  = 0,     /*!< 0 : A transmit underflow has not occurred.                                */
  I2S0_STATUS_TXUFI_1                  = 1,     /*!< 1 : A transmit underflow occurred.                                        */
} I2S0_STATUS_TXUFI_Enum;

/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ======================================================  DMACONTROL  ======================================================= */
/* ============================================  I2S0 DMACONTROL RXDMABMD [3..3]  ============================================ */
typedef enum {                                  /*!< I2S0_DMACONTROL_RXDMABMD                                                  */
  I2S0_DMACONTROL_RXDMABMD_0           = 0,     /*!< 0 : The receiver receives one word at a time. Whenever there
                                                     is at least one word in the receive FIFO, a single word
                                                     burst DMA request is generated.                                           */
  I2S0_DMACONTROL_RXDMABMD_1           = 1,     /*!< 1 : The receiver receives four words at a time. Whenever the
                                                     FIFO depth rises above three, a DMA burst request is generated
                                                     for four words.                                                           */
} I2S0_DMACONTROL_RXDMABMD_Enum;

/* ============================================  I2S0 DMACONTROL TXDMABMD [2..2]  ============================================ */
typedef enum {                                  /*!< I2S0_DMACONTROL_TXDMABMD                                                  */
  I2S0_DMACONTROL_TXDMABMD_0           = 0,     /*!< 0 : The transmitter transmits one word at a time. Whenever there
                                                     is any room in the transmit FIFO, a single word burst DMA
                                                     data request is generated.                                                */
  I2S0_DMACONTROL_TXDMABMD_1           = 1,     /*!< 1 : The transmitter transmits four words at a time. Whenever
                                                     the FIFO depth drops below five, a DMA burst request is
                                                     generated for four words.                                                 */
} I2S0_DMACONTROL_TXDMABMD_Enum;

/* ============================================  I2S0 DMACONTROL RXDMAEN [1..1]  ============================================= */
typedef enum {                                  /*!< I2S0_DMACONTROL_RXDMAEN                                                   */
  I2S0_DMACONTROL_RXDMAEN_Disable      = 0,     /*!< Disable : Disable receiver DMA data transfer requests.                    */
  I2S0_DMACONTROL_RXDMAEN_Enable       = 1,     /*!< Enable : Enable receiver DMA data transfer requests.                      */
} I2S0_DMACONTROL_RXDMAEN_Enum;

/* ============================================  I2S0 DMACONTROL TXDMAEN [0..0]  ============================================= */
typedef enum {                                  /*!< I2S0_DMACONTROL_TXDMAEN                                                   */
  I2S0_DMACONTROL_TXDMAEN_Disable      = 0,     /*!< Disable : Disable transmitter DMA data requests.                          */
  I2S0_DMACONTROL_TXDMAEN_Enable       = 1,     /*!< Enable : Enable transmitter DMA data requests.                            */
} I2S0_DMACONTROL_TXDMAEN_Enum;

/* ====================================================  DMACONTROL_SET  ===================================================== */
/* ====================================================  DMACONTROL_CLR  ===================================================== */
/* ======================================================  DBGCONTROL  ======================================================= */
/* ============================================  I2S0 DBGCONTROL RXDBGMD [3..3]  ============================================= */
typedef enum {                                  /*!< I2S0_DBGCONTROL_RXDBGMD                                                   */
  I2S0_DBGCONTROL_RXDBGMD_0            = 0,     /*!< 0 : The clock to the I2S receiver is active in debug mode.                */
  I2S0_DBGCONTROL_RXDBGMD_1            = 1,     /*!< 1 : The clock to the I2S receiver is not active in debug mode.
                                                     The clock divider keeps running and the clock will be disabled
                                                     when two samples are captured in the receiver.                            */
} I2S0_DBGCONTROL_RXDBGMD_Enum;

/* ============================================  I2S0 DBGCONTROL TXDBGMD [2..2]  ============================================= */
typedef enum {                                  /*!< I2S0_DBGCONTROL_TXDBGMD                                                   */
  I2S0_DBGCONTROL_TXDBGMD_0            = 0,     /*!< 0 : The clock to the I2S transmitter is active in debug mode.             */
  I2S0_DBGCONTROL_TXDBGMD_1            = 1,     /*!< 1 : The clock to the I2S transmitter is not active in debug
                                                     mode. The clock divider keeps running and the clock will
                                                     be disabled when two samples are ready to be sent by the
                                                     transmitter.                                                              */
} I2S0_DBGCONTROL_TXDBGMD_Enum;

/* ============================================  I2S0 DBGCONTROL RXDBGHEN [1..1]  ============================================ */
typedef enum {                                  /*!< I2S0_DBGCONTROL_RXDBGHEN                                                  */
  I2S0_DBGCONTROL_RXDBGHEN_0           = 0,     /*!< 0 : Receive DMA requests continue while the core is debug mode.           */
  I2S0_DBGCONTROL_RXDBGHEN_1           = 1,     /*!< 1 : Receive DMA requests stop while the core is debug mode.               */
} I2S0_DBGCONTROL_RXDBGHEN_Enum;

/* ============================================  I2S0 DBGCONTROL TXDBGHEN [0..0]  ============================================ */
typedef enum {                                  /*!< I2S0_DBGCONTROL_TXDBGHEN                                                  */
  I2S0_DBGCONTROL_TXDBGHEN_0           = 0,     /*!< 0 : Transmit DMA requests continue while the core is debug mode.          */
  I2S0_DBGCONTROL_TXDBGHEN_1           = 1,     /*!< 1 : Transmit DMA requests stop while the core is debug mode.              */
} I2S0_DBGCONTROL_TXDBGHEN_Enum;

/* ====================================================  DBGCONTROL_SET  ===================================================== */
/* ====================================================  DBGCONTROL_CLR  ===================================================== */


/* =========================================================================================================================== */
/* ================                                           PLL0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  DIVIDER  ======================================================== */
/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  PLL0 CONTROL OUTMD [30..31]  ============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_OUTMD                                                        */
  PLL0_CONTROL_OUTMD_00                = 0,     /*!< 00 : DCO output is off.                                                   */
  PLL0_CONTROL_OUTMD_01                = 1,     /*!< 01 : DCO output is in Free-Running DCO mode.                              */
  PLL0_CONTROL_OUTMD_10                = 2,     /*!< 10 : DCO output is in frequency-lock mode (reference source
                                                     required).                                                                */
  PLL0_CONTROL_OUTMD_11                = 3,     /*!< 11 : DCO output is in phase-lock mode (reference source required).        */
} PLL0_CONTROL_OUTMD_Enum;

/* =============================================  PLL0 CONTROL EDGSEL [29..29]  ============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_EDGSEL                                                       */
  PLL0_CONTROL_EDGSEL_0                = 0,     /*!< 0 : Lock DCO output frequency to the falling edge of the reference
                                                     frequency.                                                                */
  PLL0_CONTROL_EDGSEL_1                = 1,     /*!< 1 : Lock DCO output frequency to the rising edge of the reference
                                                     frequency.                                                                */
} PLL0_CONTROL_EDGSEL_Enum;

/* =============================================  PLL0 CONTROL DITHEN [28..28]  ============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_DITHEN                                                       */
  PLL0_CONTROL_DITHEN_Disable          = 0,     /*!< Disable : Automatic DCO output dithering disabled.                        */
  PLL0_CONTROL_DITHEN_Enable           = 1,     /*!< Enable : Automatic DCO output dithering enabled.                          */
} PLL0_CONTROL_DITHEN_Enum;

/* ==============================================  PLL0 CONTROL STALL [26..26]  ============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_STALL                                                        */
  PLL0_CONTROL_STALL_0                 = 0,     /*!< 0 : In phase-lock and frequency-lock modes, spectrum spreading,
                                                     and dithering operate normally, if enabled.                               */
  PLL0_CONTROL_STALL_1                 = 1,     /*!< 1 : In phase-lock and frequency-lock modes, spectrum spreading,
                                                     and dithering are prevented from updating the output of
                                                     the DCO.                                                                  */
} PLL0_CONTROL_STALL_Enum;

/* =============================================  PLL0 CONTROL REFSEL [16..17]  ============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_REFSEL                                                       */
  PLL0_CONTROL_REFSEL_00               = 0,     /*!< 00 : PLL reference clock (FREF) is the RTC0 oscillator (RTC0OSC).         */
  PLL0_CONTROL_REFSEL_01               = 1,     /*!< 01 : PLL reference clock (FREF) is the divided Low Power Oscillator
                                                     (LPOSC0).                                                                 */
  PLL0_CONTROL_REFSEL_10               = 2,     /*!< 10 : PLL reference clock (FREF) is the external oscillator output
                                                     (EXTOSC0).                                                                */
  PLL0_CONTROL_REFSEL_11               = 3,     /*!< 11 : PLL reference clock (FREF) is the USB0 oscillator (USB0OSC).         */
} PLL0_CONTROL_REFSEL_Enum;

/* =============================================  PLL0 CONTROL LCKPOL [11..11]  ============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_LCKPOL                                                       */
  PLL0_CONTROL_LCKPOL_0                = 0,     /*!< 0 : The lock state PLL interrupt will occur when LCKI is 0.               */
  PLL0_CONTROL_LCKPOL_1                = 1,     /*!< 1 : The lock state PLL interrupt will occur when LCKI is 1.               */
} PLL0_CONTROL_LCKPOL_Enum;

/* =============================================  PLL0 CONTROL LCKIEN [10..10]  ============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_LCKIEN                                                       */
  PLL0_CONTROL_LCKIEN_0                = 0,     /*!< 0 : The PLL locking does not cause an interrupt                           */
  PLL0_CONTROL_LCKIEN_1                = 1,     /*!< 1 : An interrupt is generated if LCKI matches the state selected
                                                     by LCKPOL.                                                                */
} PLL0_CONTROL_LCKIEN_Enum;

/* ==============================================  PLL0 CONTROL LMTIEN [9..9]  =============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_LMTIEN                                                       */
  PLL0_CONTROL_LMTIEN_Disable          = 0,     /*!< Disable : Saturation (high and low) interrupt disabled.                   */
  PLL0_CONTROL_LMTIEN_Enable           = 1,     /*!< Enable : Saturation (high and low) interrupt enabled.                     */
} PLL0_CONTROL_LMTIEN_Enum;

/* ===============================================  PLL0 CONTROL LCKI [2..2]  ================================================ */
typedef enum {                                  /*!< PLL0_CONTROL_LCKI                                                         */
  PLL0_CONTROL_LCKI_Disable            = 0,     /*!< Disable : DCO is disabled or not locked.                                  */
  PLL0_CONTROL_LCKI_Enable             = 1,     /*!< Enable : DCO is enabled and locked.                                       */
} PLL0_CONTROL_LCKI_Enum;

/* ===============================================  PLL0 CONTROL HLMTF [1..1]  =============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_HLMTF                                                        */
  PLL0_CONTROL_HLMTF_0                 = 0,     /*!< 0 : DCO period is not saturated high.                                     */
  PLL0_CONTROL_HLMTF_1                 = 1,     /*!< 1 : DCO period is saturated high.                                         */
} PLL0_CONTROL_HLMTF_Enum;

/* ===============================================  PLL0 CONTROL LLMTF [0..0]  =============================================== */
typedef enum {                                  /*!< PLL0_CONTROL_LLMTF                                                        */
  PLL0_CONTROL_LLMTF_0                 = 0,     /*!< 0 : DCO period is not saturated low.                                      */
  PLL0_CONTROL_LLMTF_1                 = 1,     /*!< 1 : DCO period is saturated low.                                          */
} PLL0_CONTROL_LLMTF_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* =========================================================  SSPR  ========================================================== */
/* ================================================  PLL0 SSPR SSAMP [0..2]  ================================================= */
typedef enum {                                  /*!< PLL0_SSPR_SSAMP                                                           */
  PLL0_SSPR_SSAMP_000                  = 0,     /*!< 000 : Disable Spectrum Spreading.                                         */
  PLL0_SSPR_SSAMP_001                  = 1,     /*!< 001 : Spectrum Spreading set to approximately + 0.1% of TDCO.             */
  PLL0_SSPR_SSAMP_010                  = 2,     /*!< 010 : Spectrum Spreading set to approximately + 0.2% of TDCO.             */
  PLL0_SSPR_SSAMP_011                  = 3,     /*!< 011 : Spectrum Spreading set to approximately + 0.4% of TDCO.             */
  PLL0_SSPR_SSAMP_100                  = 4,     /*!< 100 : Spectrum Spreading set to approximately + 0.8% of TDCO.             */
  PLL0_SSPR_SSAMP_101                  = 5,     /*!< 101 : Spectrum Spreading set to approximately + 1.6% of TDCO.             */
  PLL0_SSPR_SSAMP_110                  = 6,     /*!< 110 : Reserved.                                                           */
} PLL0_SSPR_SSAMP_Enum;

/* =======================================================  CALCONFIG  ======================================================= */
/* =============================================  PLL0 CALCONFIG RANGE [16..18]  ============================================= */
typedef enum {                                  /*!< PLL0_CALCONFIG_RANGE                                                      */
  PLL0_CALCONFIG_RANGE_000             = 0,     /*!< 000 : DCO operates from 23 to 37 MHz.                                     */
  PLL0_CALCONFIG_RANGE_001             = 1,     /*!< 001 : DCO operates from 33 to 54 MHz.                                     */
  PLL0_CALCONFIG_RANGE_010             = 2,     /*!< 010 : DCO operates from 45 to 71 MHz.                                     */
  PLL0_CALCONFIG_RANGE_011             = 3,     /*!< 011 : DCO operates from 53 to 80 MHz.                                     */
  PLL0_CALCONFIG_RANGE_100             = 4,     /*!< 100 : DCO operates from 73 to 80 MHz.                                     */
  PLL0_CALCONFIG_RANGE_101             = 5,     /*!< 101 : Reserved.                                                           */
} PLL0_CALCONFIG_RANGE_Enum;



/* =========================================================================================================================== */
/* ================                                          EXTOSC0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  EXTOSC0 CONTROL OSCMD [4..6]  ============================================== */
typedef enum {                                  /*!< EXTOSC0_CONTROL_OSCMD                                                     */
  EXTOSC0_CONTROL_OSCMD_000            = 0,     /*!< 000 : External oscillator off.                                            */
  EXTOSC0_CONTROL_OSCMD_001            = 1,     /*!< 001 : Reserved.                                                           */
  EXTOSC0_CONTROL_OSCMD_010            = 2,     /*!< 010 : External CMOS clock mode.                                           */
  EXTOSC0_CONTROL_OSCMD_011            = 3,     /*!< 011 : External CMOS with divide by 2 stage.                               */
  EXTOSC0_CONTROL_OSCMD_100            = 4,     /*!< 100 : RC oscillator mode with divide by 2 stage.                          */
  EXTOSC0_CONTROL_OSCMD_101            = 5,     /*!< 101 : C oscillator mode with divide by 2 stage.                           */
  EXTOSC0_CONTROL_OSCMD_110            = 6,     /*!< 110 : Crystal oscillator mode.                                            */
  EXTOSC0_CONTROL_OSCMD_111            = 7,     /*!< 111 : Crystal oscillator mode with divide by 2 stage.                     */
} EXTOSC0_CONTROL_OSCMD_Enum;

/* ============================================  EXTOSC0 CONTROL OSCVLDF [3..3]  ============================================= */
typedef enum {                                  /*!< EXTOSC0_CONTROL_OSCVLDF                                                   */
  EXTOSC0_CONTROL_OSCVLDF_0            = 0,     /*!< 0 : The external oscillator is unused or not yet stable.                  */
  EXTOSC0_CONTROL_OSCVLDF_1            = 1,     /*!< 1 : The external oscillator is running and stable.                        */
} EXTOSC0_CONTROL_OSCVLDF_Enum;

/* =============================================  EXTOSC0 CONTROL FREQCN [0..2]  ============================================= */
typedef enum {                                  /*!< EXTOSC0_CONTROL_FREQCN                                                    */
  EXTOSC0_CONTROL_FREQCN_000           = 0,     /*!< 000 : Set the external oscillator to range 0.                             */
  EXTOSC0_CONTROL_FREQCN_001           = 1,     /*!< 001 : Set the external oscillator to range 1.                             */
  EXTOSC0_CONTROL_FREQCN_010           = 2,     /*!< 010 : Set the external oscillator to range 2.                             */
  EXTOSC0_CONTROL_FREQCN_011           = 3,     /*!< 011 : Set the external oscillator to range 3.                             */
  EXTOSC0_CONTROL_FREQCN_100           = 4,     /*!< 100 : Set the external oscillator to range 4.                             */
  EXTOSC0_CONTROL_FREQCN_101           = 5,     /*!< 101 : Set the external oscillator to range 5.                             */
  EXTOSC0_CONTROL_FREQCN_110           = 6,     /*!< 110 : Set the external oscillator to range 6.                             */
  EXTOSC0_CONTROL_FREQCN_111           = 7,     /*!< 111 : Set the external oscillator to range 7.                             */
} EXTOSC0_CONTROL_FREQCN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           VREG0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  VREG0 CONTROL VREGDIS [31..31]  ============================================= */
typedef enum {                                  /*!< VREG0_CONTROL_VREGDIS                                                     */
  VREG0_CONTROL_VREGDIS_0              = 0,     /*!< 0 : Enable the voltage regulator.                                         */
  VREG0_CONTROL_VREGDIS_1              = 1,     /*!< 1 : Disable the voltage regulator.                                        */
} VREG0_CONTROL_VREGDIS_Enum;

/* ===========================================  VREG0 CONTROL VBUSIVLDIEN [8..8]  ============================================ */
typedef enum {                                  /*!< VREG0_CONTROL_VBUSIVLDIEN                                                 */
  VREG0_CONTROL_VBUSIVLDIEN_Disable    = 0,     /*!< Disable : Disable the VBUS invalid interrupt.                             */
  VREG0_CONTROL_VBUSIVLDIEN_Enable     = 1,     /*!< Enable : Enable the VBUS invalid interrupt.                               */
} VREG0_CONTROL_VBUSIVLDIEN_Enum;

/* =============================================  VREG0 CONTROL SENSEEN [6..6]  ============================================== */
typedef enum {                                  /*!< VREG0_CONTROL_SENSEEN                                                     */
  VREG0_CONTROL_SENSEEN_Disable        = 0,     /*!< Disable : Disable VREGIN voltage sensing.                                 */
  VREG0_CONTROL_SENSEEN_Enable         = 1,     /*!< Enable : Enable VREGIN voltage sensing.                                   */
} VREG0_CONTROL_SENSEEN_Enum;

/* ==============================================  VREG0 CONTROL BGDIS [5..5]  =============================================== */
typedef enum {                                  /*!< VREG0_CONTROL_BGDIS                                                       */
  VREG0_CONTROL_BGDIS_0                = 0,     /*!< 0 : Enable the voltage regulator band gap.                                */
  VREG0_CONTROL_BGDIS_1                = 1,     /*!< 1 : Disable the voltage regulator band gap.                               */
} VREG0_CONTROL_BGDIS_Enum;

/* ==============================================  VREG0 CONTROL SUSEN [1..1]  =============================================== */
typedef enum {                                  /*!< VREG0_CONTROL_SUSEN                                                       */
  VREG0_CONTROL_SUSEN_Disable          = 0,     /*!< Disable : Disable regulator suspend mode.                                 */
  VREG0_CONTROL_SUSEN_Enable           = 1,     /*!< Enable : Enable regulator suspend mode.                                   */
} VREG0_CONTROL_SUSEN_Enum;

/* =============================================  VREG0 CONTROL VBUSVLDF [0..0]  ============================================= */
typedef enum {                                  /*!< VREG0_CONTROL_VBUSVLDF                                                    */
  VREG0_CONTROL_VBUSVLDF_0             = 0,     /*!< 0 : The current voltage on the VBUS pin is below the valid threshold.     */
  VREG0_CONTROL_VBUSVLDF_1             = 1,     /*!< 1 : The current voltage on the VBUS pin is above the valid threshold.     */
} VREG0_CONTROL_VBUSVLDF_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                          LPOSC0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  OSCVAL  ========================================================= */
/* ======================================================  OSCVAL_SET  ======================================================= */
/* ======================================================  OSCVAL_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                         EXTVREG0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ===========================================  EXTVREG0 CONTROL EVREGEN [31..31]  =========================================== */
typedef enum {                                  /*!< EXTVREG0_CONTROL_EVREGEN                                                  */
  EXTVREG0_CONTROL_EVREGEN_Disable     = 0,     /*!< Disable : Disable the external regulator.                                 */
  EXTVREG0_CONTROL_EVREGEN_Enable      = 1,     /*!< Enable : Enable the external regulator.                                   */
} EXTVREG0_CONTROL_EVREGEN_Enum;

/* ==========================================  EXTVREG0 CONTROL FBPINSEL [27..27]  =========================================== */
typedef enum {                                  /*!< EXTVREG0_CONTROL_FBPINSEL                                                 */
  EXTVREG0_CONTROL_FBPINSEL_0          = 0,     /*!< 0 : Use the input to the EXREGSN pin for foldback limiting.               */
  EXTVREG0_CONTROL_FBPINSEL_1          = 1,     /*!< 1 : Use the input to the VREGIN pin for foldback limiting.                */
} EXTVREG0_CONTROL_FBPINSEL_Enum;

/* ============================================  EXTVREG0 CONTROL PNSEL [26..26]  ============================================ */
typedef enum {                                  /*!< EXTVREG0_CONTROL_PNSEL                                                    */
  EXTVREG0_CONTROL_PNSEL_0             = 0,     /*!< 0 : Select NPN Mode.                                                      */
  EXTVREG0_CONTROL_PNSEL_1             = 1,     /*!< 1 : Select PNP Mode.                                                      */
} EXTVREG0_CONTROL_PNSEL_Enum;

/* ============================================  EXTVREG0 CONTROL FBLEN [25..25]  ============================================ */
typedef enum {                                  /*!< EXTVREG0_CONTROL_FBLEN                                                    */
  EXTVREG0_CONTROL_FBLEN_Disable       = 0,     /*!< Disable : Disable foldback limiting.                                      */
  EXTVREG0_CONTROL_FBLEN_Enable        = 1,     /*!< Enable : Enable foldback limiting.                                        */
} EXTVREG0_CONTROL_FBLEN_Enum;

/* ===========================================  EXTVREG0 CONTROL WPULLEN [24..24]  =========================================== */
typedef enum {                                  /*!< EXTVREG0_CONTROL_WPULLEN                                                  */
  EXTVREG0_CONTROL_WPULLEN_Disable     = 0,     /*!< Disable : Disable the external regulator weak pull-up/down resistor
                                                     on the EXREGBD pin and weak pull-down resistor on the EXREGOUT
                                                     pin.                                                                      */
  EXTVREG0_CONTROL_WPULLEN_Enable      = 1,     /*!< Enable : Enable the external regulator weak pull-up/down resistor
                                                     on the EXREGBD pin and weak pull-down resistor on the EXREGOUT
                                                     pin.                                                                      */
} EXTVREG0_CONTROL_WPULLEN_Enum;

/* =============================================  EXTVREG0 CONTROL SAEN [0..0]  ============================================== */
typedef enum {                                  /*!< EXTVREG0_CONTROL_SAEN                                                     */
  EXTVREG0_CONTROL_SAEN_0              = 0,     /*!< 0 : Use the external regulator in normal mode.                            */
  EXTVREG0_CONTROL_SAEN_1              = 1,     /*!< 1 : Use the external regulator in stand-alone mode.                       */
} EXTVREG0_CONTROL_SAEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  CONFIG  ========================================================= */
/* =============================================  EXTVREG0 CONFIG IMAX [16..18]  ============================================= */
typedef enum {                                  /*!< EXTVREG0_CONFIG_IMAX                                                      */
  EXTVREG0_CONFIG_IMAX_000             = 0,     /*!< 000 : Maximum current limit is 2 uA.                                      */
  EXTVREG0_CONFIG_IMAX_001             = 1,     /*!< 001 : Maximum current limit is 3 uA.                                      */
  EXTVREG0_CONFIG_IMAX_010             = 2,     /*!< 010 : Maximum current limit is 4 uA.                                      */
  EXTVREG0_CONFIG_IMAX_011             = 3,     /*!< 011 : Maximum current limit is 5 uA.                                      */
  EXTVREG0_CONFIG_IMAX_100             = 4,     /*!< 100 : Maximum current limit is 6 uA.                                      */
  EXTVREG0_CONFIG_IMAX_101             = 5,     /*!< 101 : Maximum current limit is 7 uA.                                      */
  EXTVREG0_CONFIG_IMAX_110             = 6,     /*!< 110 : Maximum current limit is 8 uA.                                      */
  EXTVREG0_CONFIG_IMAX_111             = 7,     /*!< 111 : Maximum current limit is 9 uA.                                      */
} EXTVREG0_CONFIG_IMAX_Enum;

/* ============================================  EXTVREG0 CONFIG FBRATE [12..14]  ============================================ */
typedef enum {                                  /*!< EXTVREG0_CONFIG_FBRATE                                                    */
  EXTVREG0_CONFIG_FBRATE_000           = 0,     /*!< 000 : Set the foldback rate to 4 uA/V.                                    */
  EXTVREG0_CONFIG_FBRATE_001           = 1,     /*!< 001 : Set the foldback rate to 2 uA/V.                                    */
  EXTVREG0_CONFIG_FBRATE_010           = 2,     /*!< 010 : Set the foldback rate to 1 uA/V.                                    */
  EXTVREG0_CONFIG_FBRATE_011           = 3,     /*!< 011 : Set the foldback rate to 0.5 uA/V.                                  */
  EXTVREG0_CONFIG_FBRATE_100           = 4,     /*!< 100 : Reserved.                                                           */
  EXTVREG0_CONFIG_FBRATE_101           = 5,     /*!< 101 : Set the foldback rate to 8 uA/V.                                    */
  EXTVREG0_CONFIG_FBRATE_110           = 6,     /*!< 110 : Set the foldback rate to 16 uA/V.                                   */
  EXTVREG0_CONFIG_FBRATE_111           = 7,     /*!< 111 : Set the foldback rate to 32 uA/V.                                   */
} EXTVREG0_CONFIG_FBRATE_Enum;

/* ============================================  EXTVREG0 CONFIG FBVOSEL [8..10]  ============================================ */
typedef enum {                                  /*!< EXTVREG0_CONFIG_FBVOSEL                                                   */
  EXTVREG0_CONFIG_FBVOSEL_000          = 0,     /*!< 000 : Foldback voltage offset is 0 V.                                     */
  EXTVREG0_CONFIG_FBVOSEL_001          = 1,     /*!< 001 : Foldback voltage offset is 0.5 V.                                   */
  EXTVREG0_CONFIG_FBVOSEL_010          = 2,     /*!< 010 : Foldback voltage offset is 1 V.                                     */
  EXTVREG0_CONFIG_FBVOSEL_011          = 3,     /*!< 011 : Foldback voltage offset is 1.5 V.                                   */
  EXTVREG0_CONFIG_FBVOSEL_100          = 4,     /*!< 100 : Foldback voltage offset is 2 V.                                     */
  EXTVREG0_CONFIG_FBVOSEL_101          = 5,     /*!< 101 : Foldback voltage offset is 2.5 V.                                   */
  EXTVREG0_CONFIG_FBVOSEL_110          = 6,     /*!< 110 : Foldback voltage offset is 3 V.                                     */
  EXTVREG0_CONFIG_FBVOSEL_111          = 7,     /*!< 111 : Foldback voltage offset is 3.5 V.                                   */
} EXTVREG0_CONFIG_FBVOSEL_Enum;

/* ==============================================  EXTVREG0 CONFIG IMIN [2..4]  ============================================== */
typedef enum {                                  /*!< EXTVREG0_CONFIG_IMIN                                                      */
  EXTVREG0_CONFIG_IMIN_000             = 0,     /*!< 000 : Minimum current limit is 1 uA + IMINFINE current.                   */
  EXTVREG0_CONFIG_IMIN_001             = 1,     /*!< 001 : Minimum current limit is 2 uA + IMINFINE current.                   */
  EXTVREG0_CONFIG_IMIN_010             = 2,     /*!< 010 : Minimum current limit is 3 uA + IMINFINE current.                   */
  EXTVREG0_CONFIG_IMIN_011             = 3,     /*!< 011 : Minimum current limit is 4 uA + IMINFINE current.                   */
  EXTVREG0_CONFIG_IMIN_100             = 4,     /*!< 100 : Minimum current limit is 5 uA + IMINFINE current.                   */
  EXTVREG0_CONFIG_IMIN_101             = 5,     /*!< 101 : Minimum current limit is 6 uA + IMINFINE current.                   */
  EXTVREG0_CONFIG_IMIN_110             = 6,     /*!< 110 : Minimum current limit is 7 uA + IMINFINE current.                   */
  EXTVREG0_CONFIG_IMIN_111             = 7,     /*!< 111 : Minimum current limit is 8 uA + IMINFINE current.                   */
} EXTVREG0_CONFIG_IMIN_Enum;

/* ============================================  EXTVREG0 CONFIG IMINFINE [0..1]  ============================================ */
typedef enum {                                  /*!< EXTVREG0_CONFIG_IMINFINE                                                  */
  EXTVREG0_CONFIG_IMINFINE_00          = 0,     /*!< 00 : Minimum current limit is IMIN current + 0 uA.                        */
  EXTVREG0_CONFIG_IMINFINE_01          = 1,     /*!< 01 : Minimum current limit is IMIN current + 0.25 uA.                     */
  EXTVREG0_CONFIG_IMINFINE_10          = 2,     /*!< 10 : Minimum current limit is IMIN current + 0.50 uA.                     */
  EXTVREG0_CONFIG_IMINFINE_11          = 3,     /*!< 11 : Minimum current limit is IMIN current + 0.75 uA.                     */
} EXTVREG0_CONFIG_IMINFINE_Enum;

/* ========================================================  STATUS  ========================================================= */
/* =============================================  EXTVREG0 STATUS FBMAXF [0..0]  ============================================= */
typedef enum {                                  /*!< EXTVREG0_STATUS_FBMAXF                                                    */
  EXTVREG0_STATUS_FBMAXF_0             = 0,     /*!< 0 : Maximum foldback has not been reached.                                */
  EXTVREG0_STATUS_FBMAXF_1             = 1,     /*!< 1 : Maximum foldback has been reached.                                    */
} EXTVREG0_STATUS_FBMAXF_Enum;

/* =======================================================  CSCONTROL  ======================================================= */
/* =========================================  EXTVREG0 CSCONTROL ADCISNSEN [31..31]  ========================================= */
typedef enum {                                  /*!< EXTVREG0_CSCONTROL_ADCISNSEN                                              */
  EXTVREG0_CSCONTROL_ADCISNSEN_Disable = 0,     /*!< Disable : Disable ADC current sensing.                                    */
  EXTVREG0_CSCONTROL_ADCISNSEN_Enable  = 1,     /*!< Enable : Enable ADC current sensing.                                      */
} EXTVREG0_CSCONTROL_ADCISNSEN_Enum;

/* ==========================================  EXTVREG0 CSCONTROL ISNSEN [30..30]  =========================================== */
typedef enum {                                  /*!< EXTVREG0_CSCONTROL_ISNSEN                                                 */
  EXTVREG0_CSCONTROL_ISNSEN_Disable    = 0,     /*!< Disable : Disable external regulator current sensing.                     */
  EXTVREG0_CSCONTROL_ISNSEN_Enable     = 1,     /*!< Enable : Enable external regulator current sensing.                       */
} EXTVREG0_CSCONTROL_ISNSEN_Enum;

/* =====================================================  CSCONTROL_SET  ===================================================== */
/* =====================================================  CSCONTROL_CLR  ===================================================== */
/* =======================================================  CSCONFIG  ======================================================== */
/* ===========================================  EXTVREG0 CSCONFIG ISINSEL [6..7]  ============================================ */
typedef enum {                                  /*!< EXTVREG0_CSCONFIG_ISINSEL                                                 */
  EXTVREG0_CSCONFIG_ISINSEL_00         = 0,     /*!< 00 : Select external regulator current sensing mode 0.                    */
  EXTVREG0_CSCONFIG_ISINSEL_01         = 1,     /*!< 01 : Select external regulator current sensing mode 1.                    */
  EXTVREG0_CSCONFIG_ISINSEL_10         = 2,     /*!< 10 : Select external regulator current sensing mode 2.                    */
  EXTVREG0_CSCONFIG_ISINSEL_11         = 3,     /*!< 11 : Reserved.                                                            */
} EXTVREG0_CSCONFIG_ISINSEL_Enum;

/* ===========================================  EXTVREG0 CSCONFIG ISOGAIN [3..5]  ============================================ */
typedef enum {                                  /*!< EXTVREG0_CSCONFIG_ISOGAIN                                                 */
  EXTVREG0_CSCONFIG_ISOGAIN_000        = 0,     /*!< 000 : External regulator current sensing gain is 16.                      */
  EXTVREG0_CSCONFIG_ISOGAIN_001        = 1,     /*!< 001 : External regulator current sensing gain is 8.                       */
  EXTVREG0_CSCONFIG_ISOGAIN_010        = 2,     /*!< 010 : External regulator current sensing gain is 4.                       */
  EXTVREG0_CSCONFIG_ISOGAIN_011        = 3,     /*!< 011 : External regulator current sensing gain is 2.                       */
  EXTVREG0_CSCONFIG_ISOGAIN_100        = 4,     /*!< 100 : External regulator current sensing gain is 1.                       */
  EXTVREG0_CSCONFIG_ISOGAIN_101        = 5,     /*!< 101 : Reserved.                                                           */
} EXTVREG0_CSCONFIG_ISOGAIN_Enum;

/* ==========================================  EXTVREG0 CSCONFIG ISADCGAIN [0..2]  =========================================== */
typedef enum {                                  /*!< EXTVREG0_CSCONFIG_ISADCGAIN                                               */
  EXTVREG0_CSCONFIG_ISADCGAIN_000      = 0,     /*!< 000 : ADC current sensing input gain is 16.                               */
  EXTVREG0_CSCONFIG_ISADCGAIN_001      = 1,     /*!< 001 : ADC current sensing input gain is 8.                                */
  EXTVREG0_CSCONFIG_ISADCGAIN_010      = 2,     /*!< 010 : ADC current sensing input gain is 4.                                */
  EXTVREG0_CSCONFIG_ISADCGAIN_011      = 3,     /*!< 011 : ADC current sensing input gain is 2.                                */
  EXTVREG0_CSCONFIG_ISADCGAIN_100      = 4,     /*!< 100 : ADC current sensing input gain is 1.                                */
  EXTVREG0_CSCONFIG_ISADCGAIN_101      = 5,     /*!< 101 : Reserved.                                                           */
} EXTVREG0_CSCONFIG_ISADCGAIN_Enum;



/* =========================================================================================================================== */
/* ================                                           IVC0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  IVC0 CONTROL C1EN [31..31]  =============================================== */
typedef enum {                                  /*!< IVC0_CONTROL_C1EN                                                         */
  IVC0_CONTROL_C1EN_Disable            = 0,     /*!< Disable : Disable IVC channel 1.                                          */
  IVC0_CONTROL_C1EN_Enable             = 1,     /*!< Enable : Enable IVC channel 1.                                            */
} IVC0_CONTROL_C1EN_Enum;

/* ==============================================  IVC0 CONTROL C0EN [30..30]  =============================================== */
typedef enum {                                  /*!< IVC0_CONTROL_C0EN                                                         */
  IVC0_CONTROL_C0EN_Disable            = 0,     /*!< Disable : Disable IVC channel 0.                                          */
  IVC0_CONTROL_C0EN_Enable             = 1,     /*!< Enable : Enable IVC channel 0.                                            */
} IVC0_CONTROL_C0EN_Enum;

/* =============================================  IVC0 CONTROL IN1RANGE [4..6]  ============================================== */
typedef enum {                                  /*!< IVC0_CONTROL_IN1RANGE                                                     */
  IVC0_CONTROL_IN1RANGE_000            = 0,     /*!< 000 : Input range is 0-6 mA.                                              */
  IVC0_CONTROL_IN1RANGE_001            = 1,     /*!< 001 : Input range is 0-5 mA.                                              */
  IVC0_CONTROL_IN1RANGE_010            = 2,     /*!< 010 : Input range is 0-4 mA.                                              */
  IVC0_CONTROL_IN1RANGE_011            = 3,     /*!< 011 : Input range is 0-3 mA.                                              */
  IVC0_CONTROL_IN1RANGE_100            = 4,     /*!< 100 : Input range is 0-2 mA.                                              */
  IVC0_CONTROL_IN1RANGE_101            = 5,     /*!< 101 : Input range is 0-1 mA.                                              */
  IVC0_CONTROL_IN1RANGE_110            = 6,     /*!< 110 : Reserved.                                                           */
} IVC0_CONTROL_IN1RANGE_Enum;

/* =============================================  IVC0 CONTROL IN0RANGE [0..2]  ============================================== */
typedef enum {                                  /*!< IVC0_CONTROL_IN0RANGE                                                     */
  IVC0_CONTROL_IN0RANGE_000            = 0,     /*!< 000 : Input range is 0-6 mA.                                              */
  IVC0_CONTROL_IN0RANGE_001            = 1,     /*!< 001 : Input range is 0-5 mA.                                              */
  IVC0_CONTROL_IN0RANGE_010            = 2,     /*!< 010 : Input range is 0-4 mA.                                              */
  IVC0_CONTROL_IN0RANGE_011            = 3,     /*!< 011 : Input range is 0-3 mA.                                              */
  IVC0_CONTROL_IN0RANGE_100            = 4,     /*!< 100 : Input range is 0-2 mA.                                              */
  IVC0_CONTROL_IN0RANGE_101            = 5,     /*!< 101 : Input range is 0-1 mA.                                              */
  IVC0_CONTROL_IN0RANGE_110            = 6,     /*!< 110 : Reserved.                                                           */
} IVC0_CONTROL_IN0RANGE_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */


/* =========================================================================================================================== */
/* ================                                           PMU0                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  PMU0 CONTROL PWAKEEN [3..3]  ============================================== */
typedef enum {                                  /*!< PMU0_CONTROL_PWAKEEN                                                      */
  PMU0_CONTROL_PWAKEEN_Disable         = 0,     /*!< Disable : Disable Pin Wake.                                               */
  PMU0_CONTROL_PWAKEEN_Enable          = 1,     /*!< Enable : Enable Pin Wake.                                                 */
} PMU0_CONTROL_PWAKEEN_Enum;

/* ==============================================  PMU0 CONTROL WAKECLR [0..0]  ============================================== */
typedef enum {                                  /*!< PMU0_CONTROL_WAKECLR                                                      */
  PMU0_CONTROL_WAKECLR_0               = 0,     /*!< 0 : Clear all wakeup sources.                                             */
  PMU0_CONTROL_WAKECLR_1               = 1,     /*!< 1 : Reserved.                                                             */
} PMU0_CONTROL_WAKECLR_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  CONFIG  ========================================================= */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* ========================================================  STATUS  ========================================================= */
/* ======================================================  STATUS_SET  ======================================================= */
/* ======================================================  STATUS_CLR  ======================================================= */
/* ========================================================  WAKEEN  ========================================================= */
/* ======================================================  WAKEEN_SET  ======================================================= */
/* ======================================================  WAKEEN_CLR  ======================================================= */
/* ======================================================  WAKESTATUS  ======================================================= */
/* =========================================================  PWEN  ========================================================== */
/* =======================================================  PWEN_SET  ======================================================== */
/* =======================================================  PWEN_CLR  ======================================================== */
/* =========================================================  PWPOL  ========================================================= */
/* =======================================================  PWPOL_SET  ======================================================= */
/* =======================================================  PWPOL_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           LOCK0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* ======================================================  PERIPHLOCK0  ====================================================== */
/* ============================================  LOCK0 PERIPHLOCK0 IVCL [28..28]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_IVCL                                                    */
  LOCK0_PERIPHLOCK0_IVCL_0             = 0,     /*!< 0 : Unlock the IVC0 Module registers.                                     */
  LOCK0_PERIPHLOCK0_IVCL_1             = 1,     /*!< 1 : Lock the IVC0 Module registers (bits can still be read).              */
} LOCK0_PERIPHLOCK0_IVCL_Enum;

/* ===========================================  LOCK0 PERIPHLOCK0 EVREGL [26..26]  =========================================== */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_EVREGL                                                  */
  LOCK0_PERIPHLOCK0_EVREGL_0           = 0,     /*!< 0 : Unlock the External Regulator (EXTVREG0) Module registers.            */
  LOCK0_PERIPHLOCK0_EVREGL_1           = 1,     /*!< 1 : Lock the External Regulator (EXTVREG0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK0_PERIPHLOCK0_EVREGL_Enum;

/* ===========================================  LOCK0 PERIPHLOCK0 LPOSCL [25..25]  =========================================== */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_LPOSCL                                                  */
  LOCK0_PERIPHLOCK0_LPOSCL_0           = 0,     /*!< 0 : Unlock the Low Power Oscillator (LPOSC0) Module registers.            */
  LOCK0_PERIPHLOCK0_LPOSCL_1           = 1,     /*!< 1 : Lock the Low Power Oscillator (LPOSC0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK0_PERIPHLOCK0_LPOSCL_Enum;

/* ===========================================  LOCK0 PERIPHLOCK0 VREGL [24..24]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_VREGL                                                   */
  LOCK0_PERIPHLOCK0_VREGL_0            = 0,     /*!< 0 : Unlock the Voltage Regulator (VREG0) Module registers.                */
  LOCK0_PERIPHLOCK0_VREGL_1            = 1,     /*!< 1 : Lock the Voltage Regulator (VREG0) Module registers (bits
                                                     can still be read).                                                       */
} LOCK0_PERIPHLOCK0_VREGL_Enum;

/* ==========================================  LOCK0 PERIPHLOCK0 EXTOSCL [23..23]  =========================================== */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_EXTOSCL                                                 */
  LOCK0_PERIPHLOCK0_EXTOSCL_0          = 0,     /*!< 0 : Unlock the External Oscillator (EXTOSC0) Module registers.            */
  LOCK0_PERIPHLOCK0_EXTOSCL_1          = 1,     /*!< 1 : Lock the External Oscillator (EXTOSC0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK0_PERIPHLOCK0_EXTOSCL_Enum;

/* ============================================  LOCK0 PERIPHLOCK0 PLLL [22..22]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_PLLL                                                    */
  LOCK0_PERIPHLOCK0_PLLL_0             = 0,     /*!< 0 : Unlock the PLL0 Module registers.                                     */
  LOCK0_PERIPHLOCK0_PLLL_1             = 1,     /*!< 1 : Lock the PLL0 Module registers (bits can still be read).              */
} LOCK0_PERIPHLOCK0_PLLL_Enum;

/* ============================================  LOCK0 PERIPHLOCK0 I2SL [21..21]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_I2SL                                                    */
  LOCK0_PERIPHLOCK0_I2SL_0             = 0,     /*!< 0 : Unlock the I2S0 Module registers.                                     */
  LOCK0_PERIPHLOCK0_I2SL_1             = 1,     /*!< 1 : Lock the I2S0 Module registers (bits can still be read).              */
} LOCK0_PERIPHLOCK0_I2SL_Enum;

/* ===========================================  LOCK0 PERIPHLOCK0 VREFL [20..20]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_VREFL                                                   */
  LOCK0_PERIPHLOCK0_VREFL_0            = 0,     /*!< 0 : Unlock the Voltage Reference (VREF0) Module registers.                */
  LOCK0_PERIPHLOCK0_VREFL_1            = 1,     /*!< 1 : Lock the Voltage Reference (VREF0) Module registers (bits
                                                     can still be read).                                                       */
} LOCK0_PERIPHLOCK0_VREFL_Enum;

/* ============================================  LOCK0 PERIPHLOCK0 LPTL [19..19]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_LPTL                                                    */
  LOCK0_PERIPHLOCK0_LPTL_0             = 0,     /*!< 0 : Unlock the Low Power Timer (LPTIMER0) Module registers.               */
  LOCK0_PERIPHLOCK0_LPTL_1             = 1,     /*!< 1 : Lock the Low Power Timer (LPTIMER0) Module registers (bits
                                                     can still be read).                                                       */
} LOCK0_PERIPHLOCK0_LPTL_Enum;

/* ==========================================  LOCK0 PERIPHLOCK0 DMAXBARL [18..18]  ========================================== */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_DMAXBARL                                                */
  LOCK0_PERIPHLOCK0_DMAXBARL_0         = 0,     /*!< 0 : Unlock the DMA Crossbar (DMAXBAR0) Module registers.                  */
  LOCK0_PERIPHLOCK0_DMAXBARL_1         = 1,     /*!< 1 : Lock the DMA Crossbar (DMAXBAR0) Module registers (bits
                                                     can still be read).                                                       */
} LOCK0_PERIPHLOCK0_DMAXBARL_Enum;

/* ==========================================  LOCK0 PERIPHLOCK0 DMACTRLL [17..17]  ========================================== */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_DMACTRLL                                                */
  LOCK0_PERIPHLOCK0_DMACTRLL_0         = 0,     /*!< 0 : Unlock the DMA Controller (DMACTRL0) Module registers.                */
  LOCK0_PERIPHLOCK0_DMACTRLL_1         = 1,     /*!< 1 : Lock the DMA Controller (DMACTRL0) Module registers (bits
                                                     can still be read).                                                       */
} LOCK0_PERIPHLOCK0_DMACTRLL_Enum;

/* ===========================================  LOCK0 PERIPHLOCK0 IDACL [16..16]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_IDACL                                                   */
  LOCK0_PERIPHLOCK0_IDACL_0            = 0,     /*!< 0 : Unlock the IDAC0 and IDAC1 Module registers.                          */
  LOCK0_PERIPHLOCK0_IDACL_1            = 1,     /*!< 1 : Lock the IDAC0 and IDAC1 Module registers (bits can still
                                                     be read).                                                                 */
} LOCK0_PERIPHLOCK0_IDACL_Enum;

/* ===========================================  LOCK0 PERIPHLOCK0 VMONL [15..15]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_VMONL                                                   */
  LOCK0_PERIPHLOCK0_VMONL_0            = 0,     /*!< 0 : Unlock the Voltage Supply Monitor (VMON0) Module registers.           */
  LOCK0_PERIPHLOCK0_VMONL_1            = 1,     /*!< 1 : Lock the Voltage Supply Monitor (VMON0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK0_PERIPHLOCK0_VMONL_Enum;

/* ==========================================  LOCK0 PERIPHLOCK0 CLKRSTL [14..14]  =========================================== */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_CLKRSTL                                                 */
  LOCK0_PERIPHLOCK0_CLKRSTL_0          = 0,     /*!< 0 : Unlock the Clock Control (CLKCTRL) and Reset Sources (RSTSRC)
                                                     Module reg-isters.                                                        */
  LOCK0_PERIPHLOCK0_CLKRSTL_1          = 1,     /*!< 1 : Lock the Clock Control (CLKCTRL) and Reset Sources (RSTSRC)
                                                     Module regis-ters (bits can still be read).                               */
} LOCK0_PERIPHLOCK0_CLKRSTL_Enum;

/* ============================================  LOCK0 PERIPHLOCK0 RTCL [13..13]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_RTCL                                                    */
  LOCK0_PERIPHLOCK0_RTCL_0             = 0,     /*!< 0 : Unlock the RTC0 Module registers.                                     */
  LOCK0_PERIPHLOCK0_RTCL_1             = 1,     /*!< 1 : Lock the RTC0 Module registers (bits can still be read).              */
} LOCK0_PERIPHLOCK0_RTCL_Enum;

/* ============================================  LOCK0 PERIPHLOCK0 CRCL [12..12]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_CRCL                                                    */
  LOCK0_PERIPHLOCK0_CRCL_0             = 0,     /*!< 0 : Unlock the CRC0 Module registers.                                     */
  LOCK0_PERIPHLOCK0_CRCL_1             = 1,     /*!< 1 : Lock the CRC0 Module registers (bits can still be read).              */
} LOCK0_PERIPHLOCK0_CRCL_Enum;

/* ============================================  LOCK0 PERIPHLOCK0 AESL [11..11]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_AESL                                                    */
  LOCK0_PERIPHLOCK0_AESL_0             = 0,     /*!< 0 : Unlock the AES0 Module registers.                                     */
  LOCK0_PERIPHLOCK0_AESL_1             = 1,     /*!< 1 : Lock the AES0 Module registers (bits can still be read).              */
} LOCK0_PERIPHLOCK0_AESL_Enum;

/* ===========================================  LOCK0 PERIPHLOCK0 EMIFL [10..10]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_EMIFL                                                   */
  LOCK0_PERIPHLOCK0_EMIFL_0            = 0,     /*!< 0 : Unlock the External Memory Interface (EMIF0) Module registers.        */
  LOCK0_PERIPHLOCK0_EMIFL_1            = 1,     /*!< 1 : Lock the External Memory Interface (EMIF0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK0_PERIPHLOCK0_EMIFL_Enum;

/* =============================================  LOCK0 PERIPHLOCK0 CSL [9..9]  ============================================== */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_CSL                                                     */
  LOCK0_PERIPHLOCK0_CSL_0              = 0,     /*!< 0 : Unlock the Capacitive Sensing (CAPSENSE0) Module registers.           */
  LOCK0_PERIPHLOCK0_CSL_1              = 1,     /*!< 1 : Lock the Capacitive Sensing (CAPSENSE0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK0_PERIPHLOCK0_CSL_Enum;

/* =============================================  LOCK0 PERIPHLOCK0 CMPL [8..8]  ============================================= */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_CMPL                                                    */
  LOCK0_PERIPHLOCK0_CMPL_0             = 0,     /*!< 0 : Unlock the Comparator 0 and Comparator 1 Module registers.            */
  LOCK0_PERIPHLOCK0_CMPL_1             = 1,     /*!< 1 : Lock the Comparator 0 and Comparator 1 Module registers
                                                     (bits can still be read).                                                 */
} LOCK0_PERIPHLOCK0_CMPL_Enum;

/* =============================================  LOCK0 PERIPHLOCK0 SSGL [7..7]  ============================================= */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_SSGL                                                    */
  LOCK0_PERIPHLOCK0_SSGL_0             = 0,     /*!< 0 : Unlock the SSG0 Module registers.                                     */
  LOCK0_PERIPHLOCK0_SSGL_1             = 1,     /*!< 1 : Lock the SSG0 Module registers (bits can still be read).              */
} LOCK0_PERIPHLOCK0_SSGL_Enum;

/* ===========================================  LOCK0 PERIPHLOCK0 SARADCL [6..6]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_SARADCL                                                 */
  LOCK0_PERIPHLOCK0_SARADCL_0          = 0,     /*!< 0 : Unlock the SARADC0 and SARADC1 Module registers.                      */
  LOCK0_PERIPHLOCK0_SARADCL_1          = 1,     /*!< 1 : Lock the SARADC0 and SARADC1 Module registers (bits can
                                                     still be read).                                                           */
} LOCK0_PERIPHLOCK0_SARADCL_Enum;

/* =============================================  LOCK0 PERIPHLOCK0 USBL [5..5]  ============================================= */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_USBL                                                    */
  LOCK0_PERIPHLOCK0_USBL_0             = 0,     /*!< 0 : Unlock the USB0 Module registers.                                     */
  LOCK0_PERIPHLOCK0_USBL_1             = 1,     /*!< 1 : Lock the USB0 Module registers (bits can still be read).              */
} LOCK0_PERIPHLOCK0_USBL_Enum;

/* ============================================  LOCK0 PERIPHLOCK0 TIMERL [4..4]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_TIMERL                                                  */
  LOCK0_PERIPHLOCK0_TIMERL_0           = 0,     /*!< 0 : Unlock the TIMER0 and TIMER1 Module registers.                        */
  LOCK0_PERIPHLOCK0_TIMERL_1           = 1,     /*!< 1 : Lock the TIMER0 and TIMER1 Module registers (bits can still
                                                     be read).                                                                 */
} LOCK0_PERIPHLOCK0_TIMERL_Enum;

/* =============================================  LOCK0 PERIPHLOCK0 PCAL [3..3]  ============================================= */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_PCAL                                                    */
  LOCK0_PERIPHLOCK0_PCAL_0             = 0,     /*!< 0 : Unlock the EPCA0, PCA0, and PCA1 Module registers.                    */
  LOCK0_PERIPHLOCK0_PCAL_1             = 1,     /*!< 1 : Lock the EPCA0, PCA0, and PCA1 Module registers (bits can
                                                     still be read).                                                           */
} LOCK0_PERIPHLOCK0_PCAL_Enum;

/* =============================================  LOCK0 PERIPHLOCK0 I2CL [2..2]  ============================================= */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_I2CL                                                    */
  LOCK0_PERIPHLOCK0_I2CL_0             = 0,     /*!< 0 : Unlock the I2C0 and I2C1 Module registers.                            */
  LOCK0_PERIPHLOCK0_I2CL_1             = 1,     /*!< 1 : Lock the I2C0 and I2C1 Module registers (bits can still
                                                     be read).                                                                 */
} LOCK0_PERIPHLOCK0_I2CL_Enum;

/* =============================================  LOCK0 PERIPHLOCK0 SPIL [1..1]  ============================================= */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_SPIL                                                    */
  LOCK0_PERIPHLOCK0_SPIL_0             = 0,     /*!< 0 : Unlock the SPI0, SPI1, and SPI2 Module registers.                     */
  LOCK0_PERIPHLOCK0_SPIL_1             = 1,     /*!< 1 : Lock the SPI0, SPI1, and SPI2 Module registers (bits can
                                                     still be read).                                                           */
} LOCK0_PERIPHLOCK0_SPIL_Enum;

/* ============================================  LOCK0 PERIPHLOCK0 USARTL [0..0]  ============================================ */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK0_USARTL                                                  */
  LOCK0_PERIPHLOCK0_USARTL_0           = 0,     /*!< 0 : Unlock the USART0, USART1, UART0, and UART1 Module registers.         */
  LOCK0_PERIPHLOCK0_USARTL_1           = 1,     /*!< 1 : Lock the USART0, USART1, UART0, and UART1 Module registers
                                                     (bits can still be read).                                                 */
} LOCK0_PERIPHLOCK0_USARTL_Enum;

/* ====================================================  PERIPHLOCK0_SET  ==================================================== */
/* ====================================================  PERIPHLOCK0_CLR  ==================================================== */
/* ======================================================  PERIPHLOCK1  ====================================================== */
/* =============================================  LOCK0 PERIPHLOCK1 PMUL [0..0]  ============================================= */
typedef enum {                                  /*!< LOCK0_PERIPHLOCK1_PMUL                                                    */
  LOCK0_PERIPHLOCK1_PMUL_0             = 0,     /*!< 0 : Unlock the PMU Module registers.                                      */
  LOCK0_PERIPHLOCK1_PMUL_1             = 1,     /*!< 1 : Lock the PMU Module registers (bits can still be read).               */
} LOCK0_PERIPHLOCK1_PMUL_Enum;

/* ====================================================  PERIPHLOCK1_SET  ==================================================== */
/* ====================================================  PERIPHLOCK1_CLR  ==================================================== */


/* =========================================================================================================================== */
/* ================                                         SCONFIG0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                         DEVICEID0                                         ================ */
/* =========================================================================================================================== */

/* =======================================================  DEVICEID0  ======================================================= */
/* ===========================================  DEVICEID0 DEVICEID0 REVID [0..3]  ============================================ */
typedef enum {                                  /*!< DEVICEID0_DEVICEID0_REVID                                                 */
  DEVICEID0_DEVICEID0_REVID_0000       = 0,     /*!< 0000 : Revision A.                                                        */
  DEVICEID0_DEVICEID0_REVID_0001       = 1,     /*!< 0001 : Revision B.                                                        */
  DEVICEID0_DEVICEID0_REVID_0010       = 2,     /*!< 0010 : Reserved.                                                          */
} DEVICEID0_DEVICEID0_REVID_Enum;

/* =======================================================  DEVICEID1  ======================================================= */
/* =======================================================  DEVICEID2  ======================================================= */
/* =======================================================  DEVICEID3  ======================================================= */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* SIM3U167_B_H */


/** @} */ /* End of group SiM3U167_B */

/** @} */ /* End of group  */
