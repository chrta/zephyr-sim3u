/*
 * Copyright (c) 2009-2018 ARM Limited. All rights reserved.
 * 
 * SPDX-License-Identifier: Apache-2.0
 * 
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     /tmp/SIM3U167_B.h
 * @brief    CMSIS HeaderFile
 * @version  1
 * @date     05. February 2019
 * @note     Generated by SVDConv V3.3.21 on Tuesday, 05.02.2019 17:50:37
 *           from File 'SIM3U1x7_SVD.svd',
 */



/** @addtogroup 
  * @{
  */


/** @addtogroup SIM3U167_B
  * @{
  */


#ifndef SIM3U167_B_H
#define SIM3U167_B_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* =========================================  SIM3U167_B Specific Interrupt Numbers  ========================================= */
  WDTIMER_IRQn              =   0,              /*!< 0  WDTIMER                                                                */
  PBEXT0_IRQn               =   1,              /*!< 1  PBEXT0                                                                 */
  PBEXT1_IRQn               =   2,              /*!< 2  PBEXT1                                                                 */
  RTCALRM_IRQn              =   3,              /*!< 3  RTCALRM                                                                */
  DMACH0_IRQn               =   4,              /*!< 4  DMACH0                                                                 */
  DMACH1_IRQn               =   5,              /*!< 5  DMACH1                                                                 */
  DMACH2_IRQn               =   6,              /*!< 6  DMACH2                                                                 */
  DMACH3_IRQn               =   7,              /*!< 7  DMACH3                                                                 */
  DMACH4_IRQn               =   8,              /*!< 8  DMACH4                                                                 */
  DMACH5_IRQn               =   9,              /*!< 9  DMACH5                                                                 */
  DMACH6_IRQn               =  10,              /*!< 10 DMACH6                                                                 */
  DMACH7_IRQn               =  11,              /*!< 11 DMACH7                                                                 */
  DMACH8_IRQn               =  12,              /*!< 12 DMACH8                                                                 */
  DMACH9_IRQn               =  13,              /*!< 13 DMACH9                                                                 */
  DMACH10_IRQn              =  14,              /*!< 14 DMACH10                                                                */
  DMACH11_IRQn              =  15,              /*!< 15 DMACH11                                                                */
  DMACH12_IRQn              =  16,              /*!< 16 DMACH12                                                                */
  DMACH13_IRQn              =  17,              /*!< 17 DMACH13                                                                */
  DMACH14_IRQn              =  18,              /*!< 18 DMACH14                                                                */
  DMACH15_IRQn              =  19,              /*!< 19 DMACH15                                                                */
  TIMER0L_IRQn              =  20,              /*!< 20 TIMER0L                                                                */
  TIMER0H_IRQn              =  21,              /*!< 21 TIMER0H                                                                */
  TIMER1L_IRQn              =  22,              /*!< 22 TIMER1L                                                                */
  TIMER1H_IRQn              =  23,              /*!< 23 TIMER1H                                                                */
  EPCA0_IRQn                =  24,              /*!< 24 EPCA0                                                                  */
  PCA0_IRQn                 =  25,              /*!< 25 PCA0                                                                   */
  PCA1_IRQn                 =  26,              /*!< 26 PCA1                                                                   */
  USART0_IRQn               =  27,              /*!< 27 USART0                                                                 */
  USART1_IRQn               =  28,              /*!< 28 USART1                                                                 */
  SPI0_IRQn                 =  29,              /*!< 29 SPI0                                                                   */
  SPI1_IRQn                 =  30,              /*!< 30 SPI1                                                                   */
  SPI2_IRQn                 =  31,              /*!< 31 SPI2                                                                   */
  I2C0_IRQn                 =  32,              /*!< 32 I2C0                                                                   */
  I2C1_IRQn                 =  33,              /*!< 33 I2C1                                                                   */
  USB0_IRQn                 =  34,              /*!< 34 USB0                                                                   */
  SARADC0_IRQn              =  35,              /*!< 35 SARADC0                                                                */
  SARADC1_IRQn              =  36,              /*!< 36 SARADC1                                                                */
  CMP0_IRQn                 =  37,              /*!< 37 CMP0                                                                   */
  CMP1_IRQn                 =  38,              /*!< 38 CMP1                                                                   */
  CAPSENSE0_IRQn            =  39,              /*!< 39 CAPSENSE0                                                              */
  I2S0RX_IRQn               =  40,              /*!< 40 I2S0RX                                                                 */
  I2S0TX_IRQn               =  41,              /*!< 41 I2S0TX                                                                 */
  AES0_IRQn                 =  42,              /*!< 42 AES0                                                                   */
  VDDLOW_IRQn               =  43,              /*!< 43 VDDLOW                                                                 */
  RTCFAIL_IRQn              =  44,              /*!< 44 RTCFAIL                                                                */
  PMATCH0_IRQn              =  45,              /*!< 45 PMATCH0                                                                */
  UART0_IRQn                =  46,              /*!< 46 UART0                                                                  */
  UART1_IRQn                =  47,              /*!< 47 UART1                                                                  */
  IDAC0_IRQn                =  48,              /*!< 48 IDAC0                                                                  */
  IDAC1_IRQn                =  49,              /*!< 49 IDAC1                                                                  */
  LPTIMER0_IRQn             =  50,              /*!< 50 LPTIMER0                                                               */
  PLL_IRQn                  =  51,              /*!< 51 PLL                                                                    */
  VREGDROPOUT_IRQn          =  52,              /*!< 52 VREGDROPOUT                                                            */
  VREGLOW_IRQn              =  53               /*!< 53 VREGLOW                                                                */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0200U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               4        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  0        /*!< MPU present or not                                                        */
#define __FPU_PRESENT                  0        /*!< FPU present or not                                                        */


/** @} */ /* End of group Configuration_of_CMSIS */

#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */
#include "system_sim3u.h"                       /*!< SIM3U167_B System                                                         */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
  #pragma clang diagnostic ignored "-Wgnu-anonymous-struct"
  #pragma clang diagnostic ignored "-Wnested-anon-types"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif


/* =========================================================================================================================== */
/* ================                              Device Specific Cluster Section                              ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_clusters
  * @{
  */


/**
  * @brief UART_DATA [DATA] (FIFO Input/Output Data)
  */
typedef struct {
  union {
    __IOM uint32_t U32;                         /*!< (@ 0x00000000) FIFO Data U32.                                             */
    __IOM uint16_t U16;                         /*!< (@ 0x00000000) FIFO Data U16.                                             */
    __IOM uint8_t U8;                           /*!< (@ 0x00000000) FIFO Data U8.                                              */
  };
} UART_DATA_Type;                               /*!< Size = 4 (0x4)                                                            */


/** @} */ /* End of group Device_Peripheral_clusters */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         SARADC_0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (SARADC_0)
  */

typedef struct {                                /*!< (@ 0x4001A000) SARADC_0 Structure                                         */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Configuration                                       */
    
    struct {
      __IOM uint32_t SPSEL      : 4;            /*!< [3..0] Sampling Phase Select.                                             */
      __IOM uint32_t SPEN       : 1;            /*!< [4..4] Sampling Phase Enable.                                             */
      __IOM uint32_t SSGEN      : 1;            /*!< [5..5] Synchronous Sample Generator Enable.                               */
      __IOM uint32_t PACKMD     : 2;            /*!< [7..6] Output Packing Mode.                                               */
      __IOM uint32_t SIMCEN     : 1;            /*!< [8..8] Simultaneous Conversion Packing Enable.                            */
      __IOM uint32_t INTLVEN    : 1;            /*!< [9..9] Interleaved Conversion Packing Enable.                             */
      __IOM uint32_t SCANEN     : 1;            /*!< [10..10] Scan Mode Enable.                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t SCANMD     : 1;            /*!< [12..12] Scan Mode Select.                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t DMAEN      : 1;            /*!< [14..14] DMA Interface Enable .                                           */
      __IOM uint32_t BCLKSEL    : 1;            /*!< [15..15] Burst Mode Clock Select.                                         */
      __IOM uint32_t CLKDIV     : 11;           /*!< [26..16] SAR Clock Divider.                                               */
      __IOM uint32_t SCCIEN     : 1;            /*!< [27..27] Single Conversion Complete Interrupt Enable.                     */
      __IOM uint32_t SDIEN      : 1;            /*!< [28..28] Scan Done Interrupt Enable.                                      */
      __IOM uint32_t FORIEN     : 1;            /*!< [29..29] FIFO Overrun Interrupt Enable.                                   */
      __IOM uint32_t FURIEN     : 1;            /*!< [30..30] FIFO Underrun Interrupt Enable.                                  */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Measurement Control                                        */
    
    struct {
      __IOM uint32_t REFGNDSEL  : 1;            /*!< [0..0] Reference Ground Select.                                           */
      __IOM uint32_t CLKESEL    : 1;            /*!< [1..1] Sampling Clock Edge Select.                                        */
      __IOM uint32_t BMTK       : 6;            /*!< [7..2] Burst Mode Tracking Time.                                          */
      __IOM uint32_t SCSEL      : 4;            /*!< [11..8] Start-Of-Conversion Source Select.                                */
      __IOM uint32_t PWRTIME    : 4;            /*!< [15..12] Burst Mode Power Up Time.                                        */
      __IOM uint32_t BURSTEN    : 1;            /*!< [16..16] Burst Mode Enable.                                               */
      __IOM uint32_t ADCEN      : 1;            /*!< [17..17] ADC Enable.                                                      */
      __IOM uint32_t AD12BSSEL  : 1;            /*!< [18..18] 12-Bit Mode Sample Select.                                       */
      __IOM uint32_t VCMEN      : 1;            /*!< [19..19] Common Mode Buffer Enable.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t ACCMD      : 1;            /*!< [21..21] Accumulation Mode.                                               */
      __IOM uint32_t TRKMD      : 1;            /*!< [22..22] ADC Tracking Mode.                                               */
      __IOM uint32_t ADBUSY     : 1;            /*!< [23..23] ADC Busy.                                                        */
      __IOM uint32_t BIASSEL    : 2;            /*!< [25..24] Bias Power Select.                                               */
      __IOM uint32_t LPMDEN     : 1;            /*!< [26..26] Low Power Mode Enable.                                           */
      __IOM uint32_t MREFLPEN   : 1;            /*!< [27..27] MUX and VREF Low Power Enable.                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t VREFSEL    : 2;            /*!< [31..30] Voltage Reference Select.                                        */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Channel Sequencer Time Slots 4-7 Setup                     */
    
    struct {
      __IOM uint32_t TS4CHR     : 2;            /*!< [1..0] Time Slot 4 Conversion Characteristic.                             */
      __IOM uint32_t TS4MUX     : 5;            /*!< [6..2] Time Slot 4 Input Channel.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS5CHR     : 2;            /*!< [9..8] Time Slot 5 Conversion Characteristic.                             */
      __IOM uint32_t TS5MUX     : 5;            /*!< [14..10] Time Slot 5 Input Channel.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS6CHR     : 2;            /*!< [17..16] Time Slot 6 Conversion Characteristic.                           */
      __IOM uint32_t TS6MUX     : 5;            /*!< [22..18] Time Slot 6 Input Channel.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS7CHR     : 2;            /*!< [25..24] Time Slot 7 Conversion Characteristic.                           */
      __IOM uint32_t TS7MUX     : 5;            /*!< [30..26] Time Slot 7 Input Channel.                                       */
    } bit;
  } SQ7654;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Channel Sequencer Time Slots 0-3 Setup                     */
    
    struct {
      __IOM uint32_t TS0CHR     : 2;            /*!< [1..0] Time Slot 0 Conversion Characteristic.                             */
      __IOM uint32_t TS0MUX     : 5;            /*!< [6..2] Time Slot 0 Input Channel.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS1CHR     : 2;            /*!< [9..8] Time Slot 1 Conversion Characteristic.                             */
      __IOM uint32_t TS1MUX     : 5;            /*!< [14..10] Time Slot 1 Input Channel.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS2CHR     : 2;            /*!< [17..16] Time Slot 2 Conversion Characteristic.                           */
      __IOM uint32_t TS2MUX     : 5;            /*!< [22..18] Time Slot 2 Input Channel.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS3CHR     : 2;            /*!< [25..24] Time Slot 3 Conversion Characteristic.                           */
      __IOM uint32_t TS3MUX     : 5;            /*!< [30..26] Time Slot 3 Input Channel.                                       */
    } bit;
  } SQ3210;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Conversion Characteristic 2 and 3 Setup                    */
    
    struct {
      __IOM uint32_t CHR2GN     : 1;            /*!< [0..0] Conversion Characteristic 2 Gain.                                  */
      __IOM uint32_t CHR2RPT    : 3;            /*!< [3..1] Conversion Characteristic 2 Repeat Counter.                        */
      __IOM uint32_t CHR2LS     : 3;            /*!< [6..4] Conversion Characteristic 2 Left-Shift Bits.                       */
      __IOM uint32_t CHR2RSEL   : 1;            /*!< [7..7] Conversion Characteristic 2 Resolution Selection.                  */
      __IOM uint32_t CHR2WCIEN  : 1;            /*!< [8..8] Conversion Characteristic 2 Window Comparator Interrupt
                                                     Enable.                                                                   */
      __IM  uint32_t            : 7;
      __IOM uint32_t CHR3GN     : 1;            /*!< [16..16] Conversion Characteristic 3 Gain.                                */
      __IOM uint32_t CHR3RPT    : 3;            /*!< [19..17] Conversion Characteristic 3 Repeat Counter.                      */
      __IOM uint32_t CHR3LS     : 3;            /*!< [22..20] Conversion Characteristic 3 Left-Shift Bits.                     */
      __IOM uint32_t CHR3RSEL   : 1;            /*!< [23..23] Conversion Characteristic 3 Resolution Selection.                */
      __IOM uint32_t CHR3WCIEN  : 1;            /*!< [24..24] Conversion Characteristic 3 Window Comparator Interrupt
                                                     Enable.                                                                   */
    } bit;
  } CHAR32;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Conversion Characteristic 0 and 1 Setup                    */
    
    struct {
      __IOM uint32_t CHR0GN     : 1;            /*!< [0..0] Conversion Characteristic 0 Gain.                                  */
      __IOM uint32_t CHR0RPT    : 3;            /*!< [3..1] Conversion Characteristic 0 Repeat Counter.                        */
      __IOM uint32_t CHR0LS     : 3;            /*!< [6..4] Conversion Characteristic 0 Left-Shift Bits.                       */
      __IOM uint32_t CHR0RSEL   : 1;            /*!< [7..7] Conversion Characteristic 0 Resolution Selection.                  */
      __IOM uint32_t CHR0WCIEN  : 1;            /*!< [8..8] Conversion Characteristic 0 Window Comparator Interrupt
                                                     Enable.                                                                   */
      __IM  uint32_t            : 7;
      __IOM uint32_t CHR1GN     : 1;            /*!< [16..16] Conversion Characteristic 1 Gain.                                */
      __IOM uint32_t CHR1RPT    : 3;            /*!< [19..17] Conversion Characteristic 1 Repeat Counter.                      */
      __IOM uint32_t CHR1LS     : 3;            /*!< [22..20] Conversion Characteristic 1 Left-Shift Bits.                     */
      __IOM uint32_t CHR1RSEL   : 1;            /*!< [23..23] Conversion Characteristic 1 Resolution Selection.                */
      __IOM uint32_t CHR1WCIEN  : 1;            /*!< [24..24] Conversion Characteristic 1 Window Comparator Interrupt
                                                     Enable.                                                                   */
    } bit;
  } CHAR10;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Output Data Word                                           */
    
    struct {
      __IM  uint32_t DATA       : 32;           /*!< [31..0] Output Data Word.                                                 */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Window Comparator Limits                                   */
    
    struct {
      __IOM uint32_t WCLT       : 16;           /*!< [15..0] Less-Than Window Comparator Limit.                                */
      __IOM uint32_t WCGT       : 16;           /*!< [31..16] Greater-Than Window Comparator Limit.                            */
    } bit;
  } WCLIMITS;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Accumulator Initial Value                                  */
    
    struct {
      __OM  uint32_t ACC        : 16;           /*!< [15..0] Accumulator Initial Value.                                        */
    } bit;
  } ACC;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Module Status                                              */
    
    struct {
      __IOM uint32_t WCI        : 1;            /*!< [0..0] Window Compare Interrupt.                                          */
      __IOM uint32_t SCCI       : 1;            /*!< [1..1] Single Conversion Complete Interrupt.                              */
      __IOM uint32_t SDI        : 1;            /*!< [2..2] Scan Done Interrupt.                                               */
      __IOM uint32_t FORI       : 1;            /*!< [3..3] FIFO Overrun Interrupt.                                            */
      __IOM uint32_t FURI       : 1;            /*!< [4..4] FIFO Underrun Interrupt.                                           */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) FIFO Status                                                */
    
    struct {
      __IM  uint32_t FIFOLVL    : 4;            /*!< [3..0] FIFO Level.                                                        */
      __IM  uint32_t DPSTS      : 1;            /*!< [4..4] Data Packing Status.                                               */
      __IM  uint32_t DRDYF      : 1;            /*!< [5..5] Data Ready Flag.                                                   */
    } bit;
  } FIFOSTATUS;
} SARADC_0_Type;                                /*!< Size = 164 (0xa4)                                                         */



/* =========================================================================================================================== */
/* ================                                         SARADC_1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (SARADC_1)
  */

typedef struct {                                /*!< (@ 0x4001B000) SARADC_1 Structure                                         */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Configuration                                       */
    
    struct {
      __IOM uint32_t SPSEL      : 4;            /*!< [3..0] Sampling Phase Select.                                             */
      __IOM uint32_t SPEN       : 1;            /*!< [4..4] Sampling Phase Enable.                                             */
      __IOM uint32_t SSGEN      : 1;            /*!< [5..5] Synchronous Sample Generator Enable.                               */
      __IOM uint32_t PACKMD     : 2;            /*!< [7..6] Output Packing Mode.                                               */
      __IOM uint32_t SIMCEN     : 1;            /*!< [8..8] Simultaneous Conversion Packing Enable.                            */
      __IOM uint32_t INTLVEN    : 1;            /*!< [9..9] Interleaved Conversion Packing Enable.                             */
      __IOM uint32_t SCANEN     : 1;            /*!< [10..10] Scan Mode Enable.                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t SCANMD     : 1;            /*!< [12..12] Scan Mode Select.                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t DMAEN      : 1;            /*!< [14..14] DMA Interface Enable .                                           */
      __IOM uint32_t BCLKSEL    : 1;            /*!< [15..15] Burst Mode Clock Select.                                         */
      __IOM uint32_t CLKDIV     : 11;           /*!< [26..16] SAR Clock Divider.                                               */
      __IOM uint32_t SCCIEN     : 1;            /*!< [27..27] Single Conversion Complete Interrupt Enable.                     */
      __IOM uint32_t SDIEN      : 1;            /*!< [28..28] Scan Done Interrupt Enable.                                      */
      __IOM uint32_t FORIEN     : 1;            /*!< [29..29] FIFO Overrun Interrupt Enable.                                   */
      __IOM uint32_t FURIEN     : 1;            /*!< [30..30] FIFO Underrun Interrupt Enable.                                  */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Measurement Control                                        */
    
    struct {
      __IOM uint32_t REFGNDSEL  : 1;            /*!< [0..0] Reference Ground Select.                                           */
      __IOM uint32_t CLKESEL    : 1;            /*!< [1..1] Sampling Clock Edge Select.                                        */
      __IOM uint32_t BMTK       : 6;            /*!< [7..2] Burst Mode Tracking Time.                                          */
      __IOM uint32_t SCSEL      : 4;            /*!< [11..8] Start-Of-Conversion Source Select.                                */
      __IOM uint32_t PWRTIME    : 4;            /*!< [15..12] Burst Mode Power Up Time.                                        */
      __IOM uint32_t BURSTEN    : 1;            /*!< [16..16] Burst Mode Enable.                                               */
      __IOM uint32_t ADCEN      : 1;            /*!< [17..17] ADC Enable.                                                      */
      __IOM uint32_t AD12BSSEL  : 1;            /*!< [18..18] 12-Bit Mode Sample Select.                                       */
      __IOM uint32_t VCMEN      : 1;            /*!< [19..19] Common Mode Buffer Enable.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t ACCMD      : 1;            /*!< [21..21] Accumulation Mode.                                               */
      __IOM uint32_t TRKMD      : 1;            /*!< [22..22] ADC Tracking Mode.                                               */
      __IOM uint32_t ADBUSY     : 1;            /*!< [23..23] ADC Busy.                                                        */
      __IOM uint32_t BIASSEL    : 2;            /*!< [25..24] Bias Power Select.                                               */
      __IOM uint32_t LPMDEN     : 1;            /*!< [26..26] Low Power Mode Enable.                                           */
      __IOM uint32_t MREFLPEN   : 1;            /*!< [27..27] MUX and VREF Low Power Enable.                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t VREFSEL    : 2;            /*!< [31..30] Voltage Reference Select.                                        */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Channel Sequencer Time Slots 4-7 Setup                     */
    
    struct {
      __IOM uint32_t TS4CHR     : 2;            /*!< [1..0] Time Slot 4 Conversion Characteristic.                             */
      __IOM uint32_t TS4MUX     : 5;            /*!< [6..2] Time Slot 4 Input Channel.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS5CHR     : 2;            /*!< [9..8] Time Slot 5 Conversion Characteristic.                             */
      __IOM uint32_t TS5MUX     : 5;            /*!< [14..10] Time Slot 5 Input Channel.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS6CHR     : 2;            /*!< [17..16] Time Slot 6 Conversion Characteristic.                           */
      __IOM uint32_t TS6MUX     : 5;            /*!< [22..18] Time Slot 6 Input Channel.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS7CHR     : 2;            /*!< [25..24] Time Slot 7 Conversion Characteristic.                           */
      __IOM uint32_t TS7MUX     : 5;            /*!< [30..26] Time Slot 7 Input Channel.                                       */
    } bit;
  } SQ7654;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Channel Sequencer Time Slots 0-3 Setup                     */
    
    struct {
      __IOM uint32_t TS0CHR     : 2;            /*!< [1..0] Time Slot 0 Conversion Characteristic.                             */
      __IOM uint32_t TS0MUX     : 5;            /*!< [6..2] Time Slot 0 Input Channel.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS1CHR     : 2;            /*!< [9..8] Time Slot 1 Conversion Characteristic.                             */
      __IOM uint32_t TS1MUX     : 5;            /*!< [14..10] Time Slot 1 Input Channel.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS2CHR     : 2;            /*!< [17..16] Time Slot 2 Conversion Characteristic.                           */
      __IOM uint32_t TS2MUX     : 5;            /*!< [22..18] Time Slot 2 Input Channel.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS3CHR     : 2;            /*!< [25..24] Time Slot 3 Conversion Characteristic.                           */
      __IOM uint32_t TS3MUX     : 5;            /*!< [30..26] Time Slot 3 Input Channel.                                       */
    } bit;
  } SQ3210;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Conversion Characteristic 2 and 3 Setup                    */
    
    struct {
      __IOM uint32_t CHR2GN     : 1;            /*!< [0..0] Conversion Characteristic 2 Gain.                                  */
      __IOM uint32_t CHR2RPT    : 3;            /*!< [3..1] Conversion Characteristic 2 Repeat Counter.                        */
      __IOM uint32_t CHR2LS     : 3;            /*!< [6..4] Conversion Characteristic 2 Left-Shift Bits.                       */
      __IOM uint32_t CHR2RSEL   : 1;            /*!< [7..7] Conversion Characteristic 2 Resolution Selection.                  */
      __IOM uint32_t CHR2WCIEN  : 1;            /*!< [8..8] Conversion Characteristic 2 Window Comparator Interrupt
                                                     Enable.                                                                   */
      __IM  uint32_t            : 7;
      __IOM uint32_t CHR3GN     : 1;            /*!< [16..16] Conversion Characteristic 3 Gain.                                */
      __IOM uint32_t CHR3RPT    : 3;            /*!< [19..17] Conversion Characteristic 3 Repeat Counter.                      */
      __IOM uint32_t CHR3LS     : 3;            /*!< [22..20] Conversion Characteristic 3 Left-Shift Bits.                     */
      __IOM uint32_t CHR3RSEL   : 1;            /*!< [23..23] Conversion Characteristic 3 Resolution Selection.                */
      __IOM uint32_t CHR3WCIEN  : 1;            /*!< [24..24] Conversion Characteristic 3 Window Comparator Interrupt
                                                     Enable.                                                                   */
    } bit;
  } CHAR32;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Conversion Characteristic 0 and 1 Setup                    */
    
    struct {
      __IOM uint32_t CHR0GN     : 1;            /*!< [0..0] Conversion Characteristic 0 Gain.                                  */
      __IOM uint32_t CHR0RPT    : 3;            /*!< [3..1] Conversion Characteristic 0 Repeat Counter.                        */
      __IOM uint32_t CHR0LS     : 3;            /*!< [6..4] Conversion Characteristic 0 Left-Shift Bits.                       */
      __IOM uint32_t CHR0RSEL   : 1;            /*!< [7..7] Conversion Characteristic 0 Resolution Selection.                  */
      __IOM uint32_t CHR0WCIEN  : 1;            /*!< [8..8] Conversion Characteristic 0 Window Comparator Interrupt
                                                     Enable.                                                                   */
      __IM  uint32_t            : 7;
      __IOM uint32_t CHR1GN     : 1;            /*!< [16..16] Conversion Characteristic 1 Gain.                                */
      __IOM uint32_t CHR1RPT    : 3;            /*!< [19..17] Conversion Characteristic 1 Repeat Counter.                      */
      __IOM uint32_t CHR1LS     : 3;            /*!< [22..20] Conversion Characteristic 1 Left-Shift Bits.                     */
      __IOM uint32_t CHR1RSEL   : 1;            /*!< [23..23] Conversion Characteristic 1 Resolution Selection.                */
      __IOM uint32_t CHR1WCIEN  : 1;            /*!< [24..24] Conversion Characteristic 1 Window Comparator Interrupt
                                                     Enable.                                                                   */
    } bit;
  } CHAR10;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Output Data Word                                           */
    
    struct {
      __IM  uint32_t DATA       : 32;           /*!< [31..0] Output Data Word.                                                 */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Window Comparator Limits                                   */
    
    struct {
      __IOM uint32_t WCLT       : 16;           /*!< [15..0] Less-Than Window Comparator Limit.                                */
      __IOM uint32_t WCGT       : 16;           /*!< [31..16] Greater-Than Window Comparator Limit.                            */
    } bit;
  } WCLIMITS;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Accumulator Initial Value                                  */
    
    struct {
      __OM  uint32_t ACC        : 16;           /*!< [15..0] Accumulator Initial Value.                                        */
    } bit;
  } ACC;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Module Status                                              */
    
    struct {
      __IOM uint32_t WCI        : 1;            /*!< [0..0] Window Compare Interrupt.                                          */
      __IOM uint32_t SCCI       : 1;            /*!< [1..1] Single Conversion Complete Interrupt.                              */
      __IOM uint32_t SDI        : 1;            /*!< [2..2] Scan Done Interrupt.                                               */
      __IOM uint32_t FORI       : 1;            /*!< [3..3] FIFO Overrun Interrupt.                                            */
      __IOM uint32_t FURI       : 1;            /*!< [4..4] FIFO Underrun Interrupt.                                           */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) FIFO Status                                                */
    
    struct {
      __IM  uint32_t FIFOLVL    : 4;            /*!< [3..0] FIFO Level.                                                        */
      __IM  uint32_t DPSTS      : 1;            /*!< [4..4] Data Packing Status.                                               */
      __IM  uint32_t DRDYF      : 1;            /*!< [5..5] Data Ready Flag.                                                   */
    } bit;
  } FIFOSTATUS;
} SARADC_1_Type;                                /*!< Size = 164 (0xa4)                                                         */



/* =========================================================================================================================== */
/* ================                                           AES_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (AES_0)
  */

typedef struct {                                /*!< (@ 0x40027000) AES_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t XFRSTA     : 1;            /*!< [0..0] AES Transfer Start.                                                */
      __IOM uint32_t KEYCPEN    : 1;            /*!< [1..1] Key Capture Enable.                                                */
      __IOM uint32_t EDMD       : 1;            /*!< [2..2] Encryption/Decryption Mode.                                        */
      __IM  uint32_t            : 5;
      __IOM uint32_t SWMDEN     : 1;            /*!< [8..8] Software Mode Enable.                                              */
      __IOM uint32_t BEN        : 1;            /*!< [9..9] Bypass AES Operation Enable.                                       */
      __IOM uint32_t XOREN      : 2;            /*!< [11..10] XOR Enable.                                                      */
      __IOM uint32_t HCTREN     : 1;            /*!< [12..12] Hardware Counter Mode Enable.                                    */
      __IOM uint32_t HCBCEN     : 1;            /*!< [13..13] Hardware Cipher-Block Chaining Mode Enable.                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t KEYSIZE    : 2;            /*!< [17..16] Keystore Size Select.                                            */
      __IM  uint32_t            : 6;
      __IOM uint32_t ERRIEN     : 1;            /*!< [24..24] Error Interrupt Enable.                                          */
      __IOM uint32_t OCIEN      : 1;            /*!< [25..25] Operation Complete Interrupt Enable.                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t DBGMD      : 1;            /*!< [30..30] AES Debug Mode.                                                  */
      __IOM uint32_t RESET      : 1;            /*!< [31..31] Module Soft Reset.                                               */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Number of Blocks                                           */
    
    struct {
      __IOM uint32_t XFRSIZE    : 11;           /*!< [10..0] Transfer Size.                                                    */
    } bit;
  } XFRSIZE;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Input/Output Data FIFO Access                              */
    
    struct {
      __IOM uint32_t DATAFIFO   : 32;           /*!< [31..0] Input/Output Data FIFO Access.                                    */
    } bit;
  } DATAFIFO;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) XOR Data FIFO Access                                       */
    
    struct {
      __IOM uint32_t XORFIFO    : 32;           /*!< [31..0] XOR Data FIFO Access.                                             */
    } bit;
  } XORFIFO;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Hardware Key Word 0                                        */
    
    struct {
      __IOM uint32_t HWKEY0     : 32;           /*!< [31..0] Hardware Key Word 0.                                              */
    } bit;
  } HWKEY0;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Hardware Key Word 1                                        */
    
    struct {
      __IOM uint32_t HWKEY1     : 32;           /*!< [31..0] Hardware Key Word 1.                                              */
    } bit;
  } HWKEY1;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Hardware Key Word 2                                        */
    
    struct {
      __IOM uint32_t HWKEY2     : 32;           /*!< [31..0] Hardware Key Word 2.                                              */
    } bit;
  } HWKEY2;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Hardware Key Word 3                                        */
    
    struct {
      __IOM uint32_t HWKEY3     : 32;           /*!< [31..0] Hardware Key Word 3.                                              */
    } bit;
  } HWKEY3;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Hardware Key Word 4                                        */
    
    struct {
      __IOM uint32_t HWKEY4     : 32;           /*!< [31..0] Hardware Key Word 4.                                              */
    } bit;
  } HWKEY4;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Hardware Key Word 5                                        */
    
    struct {
      __IOM uint32_t HWKEY5     : 32;           /*!< [31..0] Hardware Key Word 5.                                              */
    } bit;
  } HWKEY5;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Hardware Key Word 6                                        */
    
    struct {
      __IOM uint32_t HWKEY6     : 32;           /*!< [31..0] Hardware Key Word 6.                                              */
    } bit;
  } HWKEY6;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Hardware Key Word 7                                        */
    
    struct {
      __IOM uint32_t HWKEY7     : 32;           /*!< [31..0] Hardware Key Word 7.                                              */
    } bit;
  } HWKEY7;
  __IM  uint32_t  RESERVED11[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C0) Hardware Counter Word 0                                    */
    
    struct {
      __IOM uint32_t HWCTR0     : 32;           /*!< [31..0] Hardware Counter Word 0.                                          */
    } bit;
  } HWCTR0;
  __IM  uint32_t  RESERVED12[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D0) Hardware Counter Word 1                                    */
    
    struct {
      __IOM uint32_t HWCTR1     : 32;           /*!< [31..0] Hardware Counter Word 1.                                          */
    } bit;
  } HWCTR1;
  __IM  uint32_t  RESERVED13[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E0) Hardware Counter Word 2                                    */
    
    struct {
      __IOM uint32_t HWCTR2     : 32;           /*!< [31..0] Hardware Counter Word 2.                                          */
    } bit;
  } HWCTR2;
  __IM  uint32_t  RESERVED14[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F0) Hardware Counter Word 3                                    */
    
    struct {
      __IOM uint32_t HWCTR3     : 32;           /*!< [31..0] Hardware Counter Word 3.                                          */
    } bit;
  } HWCTR3;
  __IM  uint32_t  RESERVED15[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000100) Module Status                                              */
    
    struct {
      __IM  uint32_t DURF       : 1;            /*!< [0..0] Input/Output Data FIFO Underrun Flag.                              */
      __IM  uint32_t DORF       : 1;            /*!< [1..1] Input/Output Data FIFO Overrun Flag.                               */
      __IM  uint32_t XORF       : 1;            /*!< [2..2] XOR Data FIFO Overrun Flag.                                        */
      __IM  uint32_t            : 1;
      __IM  uint32_t DFIFOLVL   : 3;            /*!< [6..4] Input/Output Data FIFO Level.                                      */
      __IM  uint32_t            : 1;
      __IM  uint32_t XFIFOLVL   : 3;            /*!< [10..8] XOR Data FIFO Level.                                              */
      __IM  uint32_t            : 5;
      __IM  uint32_t BUSYF      : 1;            /*!< [16..16] Module Busy Flag.                                                */
      __IM  uint32_t            : 13;
      __IOM uint32_t ERRI       : 1;            /*!< [30..30] Error Interrupt Flag.                                            */
      __IOM uint32_t OCI        : 1;            /*!< [31..31] Operation Complete Interrupt Flag.                               */
    } bit;
  } STATUS;
} AES_0_Type;                                   /*!< Size = 260 (0x104)                                                        */



/* =========================================================================================================================== */
/* ================                                           CRC_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CRC_0)
  */

typedef struct {                                /*!< (@ 0x40028000) CRC_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __OM  uint32_t SINITEN    : 1;            /*!< [0..0] Seed Initialization Enable.                                        */
      __OM  uint32_t SEED       : 1;            /*!< [1..1] Seed Setting.                                                      */
      __IOM uint32_t CRCEN      : 1;            /*!< [2..2] CRC Enable.                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t POLYSEL    : 2;            /*!< [5..4] Polynomial Selection.                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t BMDEN      : 1;            /*!< [8..8] Byte Mode Enable.                                                  */
      __IOM uint32_t BBREN      : 1;            /*!< [9..9] Byte-Level Bit Reversal Enable.                                    */
      __IOM uint32_t ORDER      : 2;            /*!< [11..10] Input Processing Order.                                          */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Input/Result Data                                          */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Input/Result Data.                                                */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Bit-Reversed Output Data                                   */
    
    struct {
      __IM  uint32_t RDATA      : 32;           /*!< [31..0] Bit-Reversed Output Data.                                         */
    } bit;
  } RDATA;
} CRC_0_Type;                                   /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                        CAPSENSE_0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CAPSENSE_0)
  */

typedef struct {                                /*!< (@ 0x40023000) CAPSENSE_0 Structure                                       */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t BUSYF      : 1;            /*!< [0..0] Start and Busy Flag.                                               */
      __IOM uint32_t CSEN       : 1;            /*!< [1..1] Module Enable.                                                     */
      __IOM uint32_t BIASEN     : 1;            /*!< [2..2] Bias Enable.                                                       */
      __IOM uint32_t CMPPOL     : 1;            /*!< [3..3] Digital Comparator Polarity Select.                                */
      __IOM uint32_t CMD        : 2;            /*!< [5..4] Conversion Mode Select.                                            */
      __IOM uint32_t CNVR       : 2;            /*!< [7..6] Conversion Rate.                                                   */
      __IOM uint32_t ACCMD      : 3;            /*!< [10..8] Accumulator Mode Select.                                          */
      __IOM uint32_t MCEN       : 1;            /*!< [11..11] Multiple Channel Enable.                                         */
      __IOM uint32_t CSCM       : 4;            /*!< [15..12] Start of Conversion Mode Select.                                 */
      __IOM uint32_t PMMD       : 2;            /*!< [17..16] Pin Monitor Mode.                                                */
      __IOM uint32_t PMEF       : 1;            /*!< [18..18] Pin Monitor Event Flag.                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMPEN      : 1;            /*!< [20..20] Threshold Comparator Enable.                                     */
      __IOM uint32_t CDIEN      : 1;            /*!< [21..21] Conversion Done Interrupt Enable.                                */
      __IOM uint32_t EOSIEN     : 1;            /*!< [22..22] End-of-Scan Interrupt Enable.                                    */
      __IM  uint32_t            : 1;
      __IM  uint32_t CMPI       : 1;            /*!< [24..24] Threshold Comparator Interrupt Flag.                             */
      __IOM uint32_t CDI        : 1;            /*!< [25..25] Conversion Done Interrupt Flag.                                  */
      __IM  uint32_t EOSI       : 1;            /*!< [26..26] End-of-Scan Interrupt Flag.                                      */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Measurement Mode                                           */
    
    struct {
      __IOM uint32_t CGSEL      : 3;            /*!< [2..0] Capacitance Gain Select.                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t DRSEL      : 2;            /*!< [5..4] Double Reset Select.                                               */
      __IOM uint32_t RAMPSEL    : 2;            /*!< [7..6] Ramp Selection.                                                    */
      __IOM uint32_t IASEL      : 3;            /*!< [10..8] Output Current Select.                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t DTSEL      : 3;            /*!< [14..12] Discharge Time Select.                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t LPFSEL     : 3;            /*!< [18..16] Low Pass Filter Select.                                          */
    } bit;
  } MODE;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Measurement Data                                           */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] Capacitive Sensing Data.                                          */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Channel Scan Enable                                        */
    
    struct {
      __IOM uint32_t SCANEN     : 16;           /*!< [15..0] Channel Scan Enable.                                              */
    } bit;
  } SCAN;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Compare Threshold                                          */
    
    struct {
      __IOM uint32_t CSTH       : 16;           /*!< [15..0] Compare Threshold.                                                */
    } bit;
  } CSTH;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Mux Channel Select                                         */
    
    struct {
      __IOM uint32_t CSMX       : 4;            /*!< [3..0] Mux Channel Select.                                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t CSDISC     : 1;            /*!< [7..7] Channel Disconnect.                                                */
    } bit;
  } MUX;
} CAPSENSE_0_Type;                              /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                         CLKCTRL_0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CLKCTRL_0)
  */

typedef struct {                                /*!< (@ 0x4002D000) CLKCTRL_0 Structure                                        */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t AHBSEL     : 3;            /*!< [2..0] AHB Clock Source Select.                                           */
      __IM  uint32_t            : 5;
      __IOM uint32_t AHBDIV     : 3;            /*!< [10..8] AHB Clock Divider.                                                */
      __IM  uint32_t            : 5;
      __IOM uint32_t APBDIV     : 1;            /*!< [16..16] APB Clock Divider.                                               */
      __IM  uint32_t            : 11;
      __IOM uint32_t EXTESEL    : 1;            /*!< [28..28] External Clock Edge Select.                                      */
      __IM  uint32_t OBUSYF     : 1;            /*!< [29..29] Oscillators Busy Flag.                                           */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) AHB Clock Gate                                             */
    
    struct {
      __IOM uint32_t RAMCEN     : 1;            /*!< [0..0] RAM Clock Enable.                                                  */
      __IOM uint32_t DMACEN     : 1;            /*!< [1..1] DMA Controller Clock Enable.                                       */
      __IOM uint32_t FLASHCEN   : 1;            /*!< [2..2] Flash Clock Enable.                                                */
      __IOM uint32_t EMIF0CEN   : 1;            /*!< [3..3] EMIF Clock Enable.                                                 */
      __IOM uint32_t USB0BCEN   : 1;            /*!< [4..4] USB0 Buffer Clock Enable.                                          */
    } bit;
  } AHBCLKG;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) APB Clock Gate 0                                           */
    
    struct {
      __IOM uint32_t PLL0CEN    : 1;            /*!< [0..0] PLL Module Clock Enable.                                           */
      __IOM uint32_t PB0CEN     : 1;            /*!< [1..1] Port Bank Module Clock Enable.                                     */
      __IOM uint32_t USART0CEN  : 1;            /*!< [2..2] USART0 Module Clock Enable.                                        */
      __IOM uint32_t USART1CEN  : 1;            /*!< [3..3] USART1 Module Clock Enable.                                        */
      __IOM uint32_t UART0CEN   : 1;            /*!< [4..4] UART0 Module Clock Enable.                                         */
      __IOM uint32_t UART1CEN   : 1;            /*!< [5..5] UART1 Module Clock Enable.                                         */
      __IOM uint32_t SPI0CEN    : 1;            /*!< [6..6] SPI0 Module Clock Enable.                                          */
      __IOM uint32_t SPI1CEN    : 1;            /*!< [7..7] SPI1 Module Clock Enable.                                          */
      __IOM uint32_t SPI2CEN    : 1;            /*!< [8..8] SPI2 Module Clock Enable.                                          */
      __IOM uint32_t I2C0CEN    : 1;            /*!< [9..9] I2C0 Module Clock Enable.                                          */
      __IOM uint32_t I2C1CEN    : 1;            /*!< [10..10] I2C1 Module Clock Enable.                                        */
      __IOM uint32_t EPCA0CEN   : 1;            /*!< [11..11] EPCA0 Module Clock Enable.                                       */
      __IOM uint32_t PCA0CEN    : 1;            /*!< [12..12] PCA0 Module Clock Enable.                                        */
      __IOM uint32_t PCA1CEN    : 1;            /*!< [13..13] PCA1 Module Clock Enable.                                        */
      __IOM uint32_t SSG0CEN    : 1;            /*!< [14..14] SSG0 Module Clock Enable.                                        */
      __IOM uint32_t TIMER0CEN  : 1;            /*!< [15..15] TIMER0 Module Clock Enable.                                      */
      __IOM uint32_t TIMER1CEN  : 1;            /*!< [16..16] TIMER1 Module Clock Enable.                                      */
      __IOM uint32_t ADC0CEN    : 1;            /*!< [17..17] SARADC0 Module Clock Enable.                                     */
      __IOM uint32_t ADC1CEN    : 1;            /*!< [18..18] SARADC1 Module Clock Enable.                                     */
      __IOM uint32_t CMP0CEN    : 1;            /*!< [19..19] Comparator 0 Module Clock Enable.                                */
      __IOM uint32_t CMP1CEN    : 1;            /*!< [20..20] Comparator 1 Module Clock Enable.                                */
      __IOM uint32_t CS0CEN     : 1;            /*!< [21..21] Capacitive Sensing (CAPSENSE0) Module Clock Enable.              */
      __IOM uint32_t AES0CEN    : 1;            /*!< [22..22] AES0 Module Clock Enable.                                        */
      __IOM uint32_t CRC0CEN    : 1;            /*!< [23..23] CRC0 Module Clock Enable.                                        */
      __IOM uint32_t IDAC0CEN   : 1;            /*!< [24..24] IDAC0 Module Clock Enable.                                       */
      __IOM uint32_t IDAC1CEN   : 1;            /*!< [25..25] IDAC1 Module Clock Enable.                                       */
      __IOM uint32_t LPT0CEN    : 1;            /*!< [26..26] Low Power Timer (LPTIMER0) Module Clock Enable.                  */
      __IOM uint32_t I2S0CEN    : 1;            /*!< [27..27] I2S0 Module Clock Enable.                                        */
      __IOM uint32_t USB0CEN    : 1;            /*!< [28..28] USB0 Module Clock Enable.                                        */
      __IOM uint32_t EVREGCEN   : 1;            /*!< [29..29] External Regulator Clock Enable.                                 */
      __IOM uint32_t FLCTRLCEN  : 1;            /*!< [30..30] Flash Controller Clock Enable.                                   */
    } bit;
  } APBCLKG0;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) APB Clock Gate 1                                           */
    
    struct {
      __IOM uint32_t MISC0CEN   : 1;            /*!< [0..0] Miscellaneous 0 Clock Enable.                                      */
      __IOM uint32_t MISC1CEN   : 1;            /*!< [1..1] Miscellaneous 1 Clock Enable.                                      */
      __IOM uint32_t MISC2CEN   : 1;            /*!< [2..2] Miscellaneous 2 Clock Enable.                                      */
    } bit;
  } APBCLKG1;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Power Mode 3 Clock Control                                 */
    
    struct {
      __IOM uint32_t PM3CSEL    : 3;            /*!< [2..0] Power Mode 3 Fast-Wake Clock Source.                               */
      __IM  uint32_t            : 13;
      __IOM uint32_t PM3CEN     : 1;            /*!< [16..16] Power Mode 3 Fast-Wake Clock Enable.                             */
    } bit;
  } PM3CN;
} CLKCTRL_0_Type;                               /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                           CMP_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CMP_0)
  */

typedef struct {                                /*!< (@ 0x4001F000) CMP_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IM  uint32_t            : 13;
      __IOM uint32_t CMPFI      : 1;            /*!< [13..13] Falling Edge Interrupt Flag.                                     */
      __IOM uint32_t CMPRI      : 1;            /*!< [14..14] Rising Edge Interrupt Flag.                                      */
      __IM  uint32_t            : 15;
      __IM  uint32_t CMPOUT     : 1;            /*!< [30..30] Output State.                                                    */
      __IOM uint32_t CMPEN      : 1;            /*!< [31..31] Comparator Enable.                                               */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Input and Module Mode                                      */
    
    struct {
      __IOM uint32_t NMUX       : 4;            /*!< [3..0] Negative Input Select.                                             */
      __IOM uint32_t PMUX       : 4;            /*!< [7..4] Positive Input Select.                                             */
      __IOM uint32_t INMUX      : 2;            /*!< [9..8] Input MUX Select.                                                  */
      __IOM uint32_t CMPMD      : 2;            /*!< [11..10] Comparator Mode.                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t FIEN       : 1;            /*!< [13..13] Falling Edge Interrupt Enable.                                   */
      __IOM uint32_t RIEN       : 1;            /*!< [14..14] Rising Edge Interrupt Enable.                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t DACLVL     : 6;            /*!< [21..16] Comparator DAC Output Level.                                     */
      __IOM uint32_t NWPUEN     : 1;            /*!< [22..22] Negative Input Weak Pullup Enable.                               */
      __IOM uint32_t PWPUEN     : 1;            /*!< [23..23] Positive Input Weak Pullup Enable.                               */
      __IOM uint32_t CMPHYN     : 2;            /*!< [25..24] Negative Hysteresis Control.                                     */
      __IOM uint32_t CMPHYP     : 2;            /*!< [27..26] Positive Hysteresis Control.                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t INVEN      : 1;            /*!< [30..30] Invert Comparator Output Enable.                                 */
    } bit;
  } MODE;
} CMP_0_Type;                                   /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                           CMP_1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (CMP_1)
  */

typedef struct {                                /*!< (@ 0x40020000) CMP_1 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IM  uint32_t            : 13;
      __IOM uint32_t CMPFI      : 1;            /*!< [13..13] Falling Edge Interrupt Flag.                                     */
      __IOM uint32_t CMPRI      : 1;            /*!< [14..14] Rising Edge Interrupt Flag.                                      */
      __IM  uint32_t            : 15;
      __IM  uint32_t CMPOUT     : 1;            /*!< [30..30] Output State.                                                    */
      __IOM uint32_t CMPEN      : 1;            /*!< [31..31] Comparator Enable.                                               */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Input and Module Mode                                      */
    
    struct {
      __IOM uint32_t NMUX       : 4;            /*!< [3..0] Negative Input Select.                                             */
      __IOM uint32_t PMUX       : 4;            /*!< [7..4] Positive Input Select.                                             */
      __IOM uint32_t INMUX      : 2;            /*!< [9..8] Input MUX Select.                                                  */
      __IOM uint32_t CMPMD      : 2;            /*!< [11..10] Comparator Mode.                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t FIEN       : 1;            /*!< [13..13] Falling Edge Interrupt Enable.                                   */
      __IOM uint32_t RIEN       : 1;            /*!< [14..14] Rising Edge Interrupt Enable.                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t DACLVL     : 6;            /*!< [21..16] Comparator DAC Output Level.                                     */
      __IOM uint32_t NWPUEN     : 1;            /*!< [22..22] Negative Input Weak Pullup Enable.                               */
      __IOM uint32_t PWPUEN     : 1;            /*!< [23..23] Positive Input Weak Pullup Enable.                               */
      __IOM uint32_t CMPHYN     : 2;            /*!< [25..24] Negative Hysteresis Control.                                     */
      __IOM uint32_t CMPHYP     : 2;            /*!< [27..26] Positive Hysteresis Control.                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t INVEN      : 1;            /*!< [30..30] Invert Comparator Output Enable.                                 */
    } bit;
  } MODE;
} CMP_1_Type;                                   /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                         DMACTRL_0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (DMACTRL_0)
  */

typedef struct {                                /*!< (@ 0x40036000) DMACTRL_0 Structure                                        */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Controller Status                                          */
    
    struct {
      __IM  uint32_t DMAENSTS   : 1;            /*!< [0..0] DMA Enable Status.                                                 */
      __IM  uint32_t            : 3;
      __IM  uint32_t STATE      : 4;            /*!< [7..4] State Machine State.                                               */
      __IM  uint32_t            : 8;
      __IM  uint32_t NUMCHAN    : 5;            /*!< [20..16] Number of Supported DMA Channels.                                */
    } bit;
  } STATUS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Controller Configuration                                   */
    
    struct {
      __OM  uint32_t DMAEN      : 1;            /*!< [0..0] DMA Enable.                                                        */
    } bit;
  } CONFIG;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Base Pointer                                               */
    
    struct {
      __IM  uint32_t            : 5;
      __IOM uint32_t BASEPTR    : 27;           /*!< [31..5] Control Base Pointer.                                             */
    } bit;
  } BASEPTR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Alternate Base Pointer                                     */
    
    struct {
      __IM  uint32_t ABASEPTR   : 32;           /*!< [31..0] Alternate Control Base Pointer.                                   */
    } bit;
  } ABASEPTR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Channel Status                                             */
    
    struct {
      __IM  uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Status.                                                  */
      __IM  uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Status.                                                  */
      __IM  uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Status.                                                  */
      __IM  uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Status.                                                  */
      __IM  uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Status.                                                  */
      __IM  uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Status.                                                  */
      __IM  uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Status.                                                  */
      __IM  uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Status.                                                  */
      __IM  uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Status.                                                  */
      __IM  uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Status.                                                  */
      __IM  uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Status.                                               */
      __IM  uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Status.                                               */
      __IM  uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Status.                                               */
      __IM  uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Status.                                               */
      __IM  uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Status.                                               */
      __IM  uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Status.                                               */
    } bit;
  } CHSTATUS;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Channel Software Request Control                           */
    
    struct {
      __OM  uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Software Request.                                        */
      __OM  uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Software Request.                                        */
      __OM  uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Software Request.                                        */
      __OM  uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Software Request.                                        */
      __OM  uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Software Request.                                        */
      __OM  uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Software Request.                                        */
      __OM  uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Software Request.                                        */
      __OM  uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Software Request.                                        */
      __OM  uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Software Request.                                        */
      __OM  uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Software Request.                                        */
      __OM  uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Software Request.                                     */
      __OM  uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Software Request.                                     */
      __OM  uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Software Request.                                     */
      __OM  uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Software Request.                                     */
      __OM  uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Software Request.                                     */
      __OM  uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Software Request.                                     */
    } bit;
  } CHSWRCN;
  __IM  uint32_t  RESERVED[2];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Channel Request Mask Set                                   */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Request Mask Enable.                                     */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Request Mask Enable.                                     */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Request Mask Enable.                                     */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Request Mask Enable.                                     */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Request Mask Enable.                                     */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Request Mask Enable.                                     */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Request Mask Enable.                                     */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Request Mask Enable.                                     */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Request Mask Enable.                                     */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Request Mask Enable.                                     */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Request Mask Enable.                                  */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Request Mask Enable.                                  */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Request Mask Enable.                                  */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Request Mask Enable.                                  */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Request Mask Enable.                                  */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Request Mask Enable.                                  */
    } bit;
  } CHREQMSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Channel Request Mask Clear                                 */
    
    struct {
      __OM  uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Request Mask Disable.                                    */
      __OM  uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Request Mask Disable.                                    */
      __OM  uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Request Mask Disable.                                    */
      __OM  uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Request Mask Disable.                                    */
      __OM  uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Request Mask Disable.                                    */
      __OM  uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Request Mask Disable.                                    */
      __OM  uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Request Mask Disable.                                    */
      __OM  uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Request Mask Disable.                                    */
      __OM  uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Request Mask Disable.                                    */
      __OM  uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Request Mask Disable.                                    */
      __OM  uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Request Mask Disable.                                 */
      __OM  uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Request Mask Disable.                                 */
      __OM  uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Request Mask Disable.                                 */
      __OM  uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Request Mask Disable.                                 */
      __OM  uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Request Mask Disable.                                 */
      __OM  uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Request Mask Disable.                                 */
    } bit;
  } CHREQMCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Channel Enable Set                                         */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Enable.                                                  */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Enable.                                                  */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Enable.                                                  */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Enable.                                                  */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Enable.                                                  */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Enable.                                                  */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Enable.                                                  */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Enable.                                                  */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Enable.                                                  */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Enable.                                                  */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Enable.                                               */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Enable.                                               */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Enable.                                               */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Enable.                                               */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Enable.                                               */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Enable.                                               */
    } bit;
  } CHENSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) Channel Enable Clear                                       */
    
    struct {
      __OM  uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Disable.                                                 */
      __OM  uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Disable.                                                 */
      __OM  uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Disable.                                                 */
      __OM  uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Disable.                                                 */
      __OM  uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Disable.                                                 */
      __OM  uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Disable.                                                 */
      __OM  uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Disable.                                                 */
      __OM  uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Disable.                                                 */
      __OM  uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Disable.                                                 */
      __OM  uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Disable.                                                 */
      __OM  uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Disable.                                              */
      __OM  uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Disable.                                              */
      __OM  uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Disable.                                              */
      __OM  uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Disable.                                              */
      __OM  uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Disable.                                              */
      __OM  uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Disable.                                              */
    } bit;
  } CHENCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Channel Alternate Select Set                               */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Alternate Enable.                                        */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Alternate Enable.                                        */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Alternate Enable.                                        */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Alternate Enable.                                        */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Alternate Enable.                                        */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Alternate Enable.                                        */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Alternate Enable.                                        */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Alternate Enable.                                        */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Alternate Enable.                                        */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Alternate Enable.                                        */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Alternate Enable.                                     */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Alternate Enable.                                     */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Alternate Enable.                                     */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Alternate Enable.                                     */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Alternate Enable.                                     */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Alternate Enable.                                     */
    } bit;
  } CHALTSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) Channel Alternate Select Clear                             */
    
    struct {
      __OM  uint32_t CH0        : 1;            /*!< [0..0] Channel 0 Alternate Disable.                                       */
      __OM  uint32_t CH1        : 1;            /*!< [1..1] Channel 1 Alternate Disable.                                       */
      __OM  uint32_t CH2        : 1;            /*!< [2..2] Channel 2 Alternate Disable.                                       */
      __OM  uint32_t CH3        : 1;            /*!< [3..3] Channel 3 Alternate Disable.                                       */
      __OM  uint32_t CH4        : 1;            /*!< [4..4] Channel 4 Alternate Disable.                                       */
      __OM  uint32_t CH5        : 1;            /*!< [5..5] Channel 5 Alternate Disable.                                       */
      __OM  uint32_t CH6        : 1;            /*!< [6..6] Channel 6 Alternate Disable.                                       */
      __OM  uint32_t CH7        : 1;            /*!< [7..7] Channel 7 Alternate Disable.                                       */
      __OM  uint32_t CH8        : 1;            /*!< [8..8] Channel 8 Alternate Disable.                                       */
      __OM  uint32_t CH9        : 1;            /*!< [9..9] Channel 9 Alternate Disable.                                       */
      __OM  uint32_t CH10       : 1;            /*!< [10..10] Channel 10 Alternate Disable.                                    */
      __OM  uint32_t CH11       : 1;            /*!< [11..11] Channel 11 Alternate Disable.                                    */
      __OM  uint32_t CH12       : 1;            /*!< [12..12] Channel 12 Alternate Disable.                                    */
      __OM  uint32_t CH13       : 1;            /*!< [13..13] Channel 13 Alternate Disable.                                    */
      __OM  uint32_t CH14       : 1;            /*!< [14..14] Channel 14 Alternate Disable.                                    */
      __OM  uint32_t CH15       : 1;            /*!< [15..15] Channel 15 Alternate Disable.                                    */
    } bit;
  } CHALTCLR;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) Channel High Priority Set                                  */
    
    struct {
      __IOM uint32_t CH0        : 1;            /*!< [0..0] Channel 0 High Priority Enable.                                    */
      __IOM uint32_t CH1        : 1;            /*!< [1..1] Channel 1 High Priority Enable.                                    */
      __IOM uint32_t CH2        : 1;            /*!< [2..2] Channel 2 High Priority Enable.                                    */
      __IOM uint32_t CH3        : 1;            /*!< [3..3] Channel 3 High Priority Enable.                                    */
      __IOM uint32_t CH4        : 1;            /*!< [4..4] Channel 4 High Priority Enable.                                    */
      __IOM uint32_t CH5        : 1;            /*!< [5..5] Channel 5 High Priority Enable.                                    */
      __IOM uint32_t CH6        : 1;            /*!< [6..6] Channel 6 High Priority Enable.                                    */
      __IOM uint32_t CH7        : 1;            /*!< [7..7] Channel 7 High Priority Enable.                                    */
      __IOM uint32_t CH8        : 1;            /*!< [8..8] Channel 8 High Priority Enable.                                    */
      __IOM uint32_t CH9        : 1;            /*!< [9..9] Channel 9 High Priority Enable.                                    */
      __IOM uint32_t CH10       : 1;            /*!< [10..10] Channel 10 High Priority Enable.                                 */
      __IOM uint32_t CH11       : 1;            /*!< [11..11] Channel 11 High Priority Enable.                                 */
      __IOM uint32_t CH12       : 1;            /*!< [12..12] Channel 12 High Priority Enable.                                 */
      __IOM uint32_t CH13       : 1;            /*!< [13..13] Channel 13 High Priority Enable.                                 */
      __IOM uint32_t CH14       : 1;            /*!< [14..14] Channel 14 High Priority Enable.                                 */
      __IOM uint32_t CH15       : 1;            /*!< [15..15] Channel 15 High Priority Enable.                                 */
    } bit;
  } CHHPSET;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Channel High Priority Clear                                */
    
    struct {
      __OM  uint32_t CH0        : 1;            /*!< [0..0] Channel 0 High Priority Disable.                                   */
      __OM  uint32_t CH1        : 1;            /*!< [1..1] Channel 1 High Priority Disable.                                   */
      __OM  uint32_t CH2        : 1;            /*!< [2..2] Channel 2 High Priority Disable.                                   */
      __OM  uint32_t CH3        : 1;            /*!< [3..3] Channel 3 High Priority Disable.                                   */
      __OM  uint32_t CH4        : 1;            /*!< [4..4] Channel 4 High Priority Disable.                                   */
      __OM  uint32_t CH5        : 1;            /*!< [5..5] Channel 5 High Priority Disable.                                   */
      __OM  uint32_t CH6        : 1;            /*!< [6..6] Channel 6 High Priority Disable.                                   */
      __OM  uint32_t CH7        : 1;            /*!< [7..7] Channel 7 High Priority Disable.                                   */
      __OM  uint32_t CH8        : 1;            /*!< [8..8] Channel 8 High Priority Disable.                                   */
      __OM  uint32_t CH9        : 1;            /*!< [9..9] Channel 9 High Priority Disable.                                   */
      __OM  uint32_t CH10       : 1;            /*!< [10..10] Channel 10 High Priority Disable.                                */
      __OM  uint32_t CH11       : 1;            /*!< [11..11] Channel 11 High Priority Disable.                                */
      __OM  uint32_t CH12       : 1;            /*!< [12..12] Channel 12 High Priority Disable.                                */
      __OM  uint32_t CH13       : 1;            /*!< [13..13] Channel 13 High Priority Disable.                                */
      __OM  uint32_t CH14       : 1;            /*!< [14..14] Channel 14 High Priority Disable.                                */
      __OM  uint32_t CH15       : 1;            /*!< [15..15] Channel 15 High Priority Disable.                                */
    } bit;
  } CHHPCLR;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) Bus Error Clear                                            */
    
    struct {
      __IOM uint32_t ERROR      : 1;            /*!< [0..0] DMA Bus Error Clear.                                               */
    } bit;
  } BERRCLR;
} DMACTRL_0_Type;                               /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                         DMAXBAR_0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (DMAXBAR_0)
  */

typedef struct {                                /*!< (@ 0x40037000) DMAXBAR_0 Structure                                        */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Channel 0-7 Trigger Select                                 */
    
    struct {
      __IOM uint32_t CH0SEL     : 4;            /*!< [3..0] DMA Channel 0 Peripheral Select.                                   */
      __IOM uint32_t CH1SEL     : 4;            /*!< [7..4] DMA Channel 1 Peripheral Select.                                   */
      __IOM uint32_t CH2SEL     : 4;            /*!< [11..8] DMA Channel 2 Peripheral Select.                                  */
      __IOM uint32_t CH3SEL     : 4;            /*!< [15..12] DMA Channel 3 Peripheral Select.                                 */
      __IOM uint32_t CH4SEL     : 4;            /*!< [19..16] DMA Channel 4 Peripheral Select.                                 */
      __IOM uint32_t CH5SEL     : 4;            /*!< [23..20] DMA Channel 5 Peripheral Select.                                 */
      __IOM uint32_t CH6SEL     : 4;            /*!< [27..24] DMA Channel 6 Peripheral Select.                                 */
      __IOM uint32_t CH7SEL     : 4;            /*!< [31..28] DMA Channel 7 Peripheral Select.                                 */
    } bit;
  } DMAXBAR0;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Channel 8-15 Trigger Select                                */
    
    struct {
      __IOM uint32_t CH8SEL     : 4;            /*!< [3..0] DMA Channel 8 Peripheral Select.                                   */
      __IOM uint32_t CH9SEL     : 4;            /*!< [7..4] DMA Channel 9 Peripheral Select.                                   */
      __IOM uint32_t CH10SEL    : 4;            /*!< [11..8] DMA Channel 10 Peripheral Select.                                 */
      __IOM uint32_t CH11SEL    : 4;            /*!< [15..12] DMA Channel 11 Peripheral Select.                                */
      __IOM uint32_t CH12SEL    : 4;            /*!< [19..16] DMA Channel 12 Peripheral Select.                                */
      __IOM uint32_t CH13SEL    : 4;            /*!< [23..20] DMA Channel 13 Peripheral Select.                                */
      __IOM uint32_t CH14SEL    : 4;            /*!< [27..24] DMA Channel 14 Peripheral Select.                                */
      __IOM uint32_t CH15SEL    : 4;            /*!< [31..28] DMA Channel 15 Peripheral Select.                                */
    } bit;
  } DMAXBAR1;
} DMAXBAR_0_Type;                               /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                        DEVICEID_0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (DEVICEID_0)
  */

typedef struct {                                /*!< (@ 0x400490C0) DEVICEID_0 Structure                                       */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Device ID Word 0                                           */
    
    struct {
      __IOM uint32_t REVID      : 4;            /*!< [3..0] Revision ID.                                                       */
      __IOM uint32_t DEVICEID0  : 28;           /*!< [31..4] Device ID 0.                                                      */
    } bit;
  } DEVICEID0;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Device ID Word 1                                           */
    
    struct {
      __IOM uint32_t DEVICEID1  : 32;           /*!< [31..0] Device ID 1.                                                      */
    } bit;
  } DEVICEID1;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Device ID Word 2                                           */
    
    struct {
      __IOM uint32_t DEVICEID2  : 32;           /*!< [31..0] Device ID 2.                                                      */
    } bit;
  } DEVICEID2;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Device ID Word 3                                           */
    
    struct {
      __IOM uint32_t DEVICEID3  : 32;           /*!< [31..0] Device ID 3.                                                      */
    } bit;
  } DEVICEID3;
} DEVICEID_0_Type;                              /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          EMIF_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (EMIF_0)
  */

typedef struct {                                /*!< (@ 0x40026000) EMIF_0 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t IF0EN      : 1;            /*!< [0..0] Interface 0 Enable.                                                */
      __IOM uint32_t IF1EN      : 1;            /*!< [1..1] Interface 1 Enable.                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t OFFSTEN    : 1;            /*!< [4..4] OFF Output State Enable.                                           */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[7];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Module Status                                              */
    
    struct {
      __IM  uint32_t OFFSTS     : 1;            /*!< [0..0] EMIF OFF Status.                                                   */
      __IM  uint32_t IDLESTS    : 1;            /*!< [1..1] EMIF IDLE Status.                                                  */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED1[23];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Interface Configuration                                    */
    
    struct {
      __IOM uint32_t BUSWIDTH   : 1;            /*!< [0..0] Interface Bus Data Width.                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t MUXMD      : 1;            /*!< [2..2] Interface Mux Mode.                                                */
      __IOM uint32_t ASEN       : 1;            /*!< [3..3] Interface Automatic Address Shift Enable.                          */
      __IOM uint32_t ROEN       : 1;            /*!< [4..4] Interface Read Only Enable.                                        */
      __IM  uint32_t            : 3;
      __IOM uint32_t WDHINH     : 1;            /*!< [8..8] Write Data Hold State Inhibit.                                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t DELAYOE    : 1;            /*!< [12..12] Output Enable Delay.                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t KLREN      : 1;            /*!< [16..16] Keep Last Read Enable.                                           */
    } bit;
  } CONFIG_0;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Interface Read Timing                                      */
    
    struct {
      __IOM uint32_t RASET      : 4;            /*!< [3..0] Interface Read Address Setup Delay .                               */
      __IOM uint32_t RAHOLD     : 4;            /*!< [7..4] Interface Read Address Hold Delay.                                 */
      __IOM uint32_t RDHOLD     : 4;            /*!< [11..8] Interface Read Data Hold Delay.                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t RDWAIT     : 6;            /*!< [21..16] Interface Read Data Wait Delay.                                  */
    } bit;
  } IFRT_0;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Interface Write Timing                                     */
    
    struct {
      __IOM uint32_t WASET      : 4;            /*!< [3..0] Interface Write Address Setup Delay .                              */
      __IOM uint32_t WAHOLD     : 4;            /*!< [7..4] Interface Write Address Hold Delay.                                */
      __IOM uint32_t WDHOLD     : 4;            /*!< [11..8] Interface Write Data Hold Delay.                                  */
      __IM  uint32_t            : 4;
      __IOM uint32_t WDWAIT     : 6;            /*!< [21..16] Interface Write Data Wait Delay.                                 */
    } bit;
  } IFWT_0;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Interface Read Control States                              */
    
    struct {
      __IOM uint32_t CSRAS      : 1;            /*!< [0..0] Chip Select Read Address Setup State.                              */
      __IOM uint32_t CSRAH      : 1;            /*!< [1..1] Chip Select Read Address Hold State.                               */
      __IOM uint32_t CSRDW      : 1;            /*!< [2..2] Chip Select Read Data Wait State.                                  */
      __IOM uint32_t CSRDH      : 1;            /*!< [3..3] Chip Select Read Data Hold State.                                  */
      __IOM uint32_t OERAS      : 1;            /*!< [4..4] Output Enable Read Address Setup State.                            */
      __IOM uint32_t OERAH      : 1;            /*!< [5..5] Output Enable Read Address Hold State.                             */
      __IOM uint32_t OERDW      : 1;            /*!< [6..6] Output Enable Read Data Wait State.                                */
      __IOM uint32_t OERDH      : 1;            /*!< [7..7] Output Enable Read Data Hold State.                                */
      __IOM uint32_t WRRAS      : 1;            /*!< [8..8] Write Signal Read Address Setup State.                             */
      __IOM uint32_t WRRAH      : 1;            /*!< [9..9] Write Signal Read Address Hold State.                              */
      __IOM uint32_t WRRDW      : 1;            /*!< [10..10] Write Signal Read Data Wait State.                               */
      __IOM uint32_t WRRDH      : 1;            /*!< [11..11] Write Signal Read Data Hold State.                               */
      __IOM uint32_t ALERAS     : 1;            /*!< [12..12] Address Latch Enable Read Address Setup State.                   */
      __IOM uint32_t ALERAH     : 1;            /*!< [13..13] Address Latch Enable Read Address Hold State.                    */
      __IOM uint32_t ALERDW     : 1;            /*!< [14..14] Address Latch Enable Read Data Wait State.                       */
      __IOM uint32_t ALERDH     : 1;            /*!< [15..15] Address Latch Enable Read Data Hold State.                       */
    } bit;
  } IFRCST_0;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C0) Interface Write Control States                             */
    
    struct {
      __IOM uint32_t CSWAS      : 1;            /*!< [0..0] Chip Select Write Address Setup State.                             */
      __IOM uint32_t CSWAH      : 1;            /*!< [1..1] Chip Select Write Address Hold State.                              */
      __IOM uint32_t CSWDW      : 1;            /*!< [2..2] Chip Select Write Data Wait State.                                 */
      __IOM uint32_t CSWDH      : 1;            /*!< [3..3] Chip Select Write Data Hold State.                                 */
      __IOM uint32_t OEWAS      : 1;            /*!< [4..4] Output Enable Write Address Setup State.                           */
      __IOM uint32_t OEWAH      : 1;            /*!< [5..5] Output Enable Write Address Hold State.                            */
      __IOM uint32_t OEWDW      : 1;            /*!< [6..6] Output Enable Write Data Wait State.                               */
      __IOM uint32_t OEWDH      : 1;            /*!< [7..7] Output Enable Write Data Hold State.                               */
      __IOM uint32_t WRWAS      : 1;            /*!< [8..8] Write Signal Write Address Setup State.                            */
      __IOM uint32_t WRWAH      : 1;            /*!< [9..9] Write Signal Write Address Hold State.                             */
      __IOM uint32_t WRWDW      : 1;            /*!< [10..10] Write Signal Write Data Wait State.                              */
      __IOM uint32_t WRWDH      : 1;            /*!< [11..11] Write Signal Write Data Hold State.                              */
      __IOM uint32_t ALEWAS     : 1;            /*!< [12..12] Address Latch Enable Write Address Setup State.                  */
      __IOM uint32_t ALEWAH     : 1;            /*!< [13..13] Address Latch Enable Write Address Hold State.                   */
      __IOM uint32_t ALEWDW     : 1;            /*!< [14..14] Address Latch Enable Write Data Wait State.                      */
      __IOM uint32_t ALEWDH     : 1;            /*!< [15..15] Address Latch Enable Write Data Hold State.                      */
    } bit;
  } IFWCST_0;
  __IM  uint32_t  RESERVED6[15];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000100) Interface Configuration                                    */
    
    struct {
      __IOM uint32_t BUSWIDTH   : 1;            /*!< [0..0] Interface Bus Data Width.                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t MUXMD      : 1;            /*!< [2..2] Interface Mux Mode.                                                */
      __IOM uint32_t ASEN       : 1;            /*!< [3..3] Interface Automatic Address Shift Enable.                          */
      __IOM uint32_t ROEN       : 1;            /*!< [4..4] Interface Read Only Enable.                                        */
      __IM  uint32_t            : 3;
      __IOM uint32_t WDHINH     : 1;            /*!< [8..8] Write Data Hold State Inhibit.                                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t DELAYOE    : 1;            /*!< [12..12] Output Enable Delay.                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t KLREN      : 1;            /*!< [16..16] Keep Last Read Enable.                                           */
    } bit;
  } CONFIG_1;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000110) Interface Read Timing                                      */
    
    struct {
      __IOM uint32_t RASET      : 4;            /*!< [3..0] Interface Read Address Setup Delay .                               */
      __IOM uint32_t RAHOLD     : 4;            /*!< [7..4] Interface Read Address Hold Delay.                                 */
      __IOM uint32_t RDHOLD     : 4;            /*!< [11..8] Interface Read Data Hold Delay.                                   */
      __IM  uint32_t            : 4;
      __IOM uint32_t RDWAIT     : 6;            /*!< [21..16] Interface Read Data Wait Delay.                                  */
    } bit;
  } IFRT_1;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000120) Interface Write Timing                                     */
    
    struct {
      __IOM uint32_t WASET      : 4;            /*!< [3..0] Interface Write Address Setup Delay .                              */
      __IOM uint32_t WAHOLD     : 4;            /*!< [7..4] Interface Write Address Hold Delay.                                */
      __IOM uint32_t WDHOLD     : 4;            /*!< [11..8] Interface Write Data Hold Delay.                                  */
      __IM  uint32_t            : 4;
      __IOM uint32_t WDWAIT     : 6;            /*!< [21..16] Interface Write Data Wait Delay.                                 */
    } bit;
  } IFWT_1;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000130) Interface Read Control States                              */
    
    struct {
      __IOM uint32_t CSRAS      : 1;            /*!< [0..0] Chip Select Read Address Setup State.                              */
      __IOM uint32_t CSRAH      : 1;            /*!< [1..1] Chip Select Read Address Hold State.                               */
      __IOM uint32_t CSRDW      : 1;            /*!< [2..2] Chip Select Read Data Wait State.                                  */
      __IOM uint32_t CSRDH      : 1;            /*!< [3..3] Chip Select Read Data Hold State.                                  */
      __IOM uint32_t OERAS      : 1;            /*!< [4..4] Output Enable Read Address Setup State.                            */
      __IOM uint32_t OERAH      : 1;            /*!< [5..5] Output Enable Read Address Hold State.                             */
      __IOM uint32_t OERDW      : 1;            /*!< [6..6] Output Enable Read Data Wait State.                                */
      __IOM uint32_t OERDH      : 1;            /*!< [7..7] Output Enable Read Data Hold State.                                */
      __IOM uint32_t WRRAS      : 1;            /*!< [8..8] Write Signal Read Address Setup State.                             */
      __IOM uint32_t WRRAH      : 1;            /*!< [9..9] Write Signal Read Address Hold State.                              */
      __IOM uint32_t WRRDW      : 1;            /*!< [10..10] Write Signal Read Data Wait State.                               */
      __IOM uint32_t WRRDH      : 1;            /*!< [11..11] Write Signal Read Data Hold State.                               */
      __IOM uint32_t ALERAS     : 1;            /*!< [12..12] Address Latch Enable Read Address Setup State.                   */
      __IOM uint32_t ALERAH     : 1;            /*!< [13..13] Address Latch Enable Read Address Hold State.                    */
      __IOM uint32_t ALERDW     : 1;            /*!< [14..14] Address Latch Enable Read Data Wait State.                       */
      __IOM uint32_t ALERDH     : 1;            /*!< [15..15] Address Latch Enable Read Data Hold State.                       */
    } bit;
  } IFRCST_1;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000140) Interface Write Control States                             */
    
    struct {
      __IOM uint32_t CSWAS      : 1;            /*!< [0..0] Chip Select Write Address Setup State.                             */
      __IOM uint32_t CSWAH      : 1;            /*!< [1..1] Chip Select Write Address Hold State.                              */
      __IOM uint32_t CSWDW      : 1;            /*!< [2..2] Chip Select Write Data Wait State.                                 */
      __IOM uint32_t CSWDH      : 1;            /*!< [3..3] Chip Select Write Data Hold State.                                 */
      __IOM uint32_t OEWAS      : 1;            /*!< [4..4] Output Enable Write Address Setup State.                           */
      __IOM uint32_t OEWAH      : 1;            /*!< [5..5] Output Enable Write Address Hold State.                            */
      __IOM uint32_t OEWDW      : 1;            /*!< [6..6] Output Enable Write Data Wait State.                               */
      __IOM uint32_t OEWDH      : 1;            /*!< [7..7] Output Enable Write Data Hold State.                               */
      __IOM uint32_t WRWAS      : 1;            /*!< [8..8] Write Signal Write Address Setup State.                            */
      __IOM uint32_t WRWAH      : 1;            /*!< [9..9] Write Signal Write Address Hold State.                             */
      __IOM uint32_t WRWDW      : 1;            /*!< [10..10] Write Signal Write Data Wait State.                              */
      __IOM uint32_t WRWDH      : 1;            /*!< [11..11] Write Signal Write Data Hold State.                              */
      __IOM uint32_t ALEWAS     : 1;            /*!< [12..12] Address Latch Enable Write Address Setup State.                  */
      __IOM uint32_t ALEWAH     : 1;            /*!< [13..13] Address Latch Enable Write Address Hold State.                   */
      __IOM uint32_t ALEWDW     : 1;            /*!< [14..14] Address Latch Enable Write Data Wait State.                      */
      __IOM uint32_t ALEWDH     : 1;            /*!< [15..15] Address Latch Enable Write Data Hold State.                      */
    } bit;
  } IFWCST_1;
} EMIF_0_Type;                                  /*!< Size = 324 (0x144)                                                        */



/* =========================================================================================================================== */
/* ================                                          EPCA_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (EPCA_0)
  */

typedef struct {                                /*!< (@ 0x4000E000) EPCA_0 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IOM uint32_t DIFGEN     : 1;            /*!< [6..6] Differential Signal Generator Enable.                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_0;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t YPHST      : 1;            /*!< [5..5] Differential Y Phase State.                                        */
      __IOM uint32_t ACTIVEPH   : 1;            /*!< [6..6] Active Channel Select.                                             */
      __IOM uint32_t XPHST      : 1;            /*!< [7..7] Differential X Phase State.                                        */
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IOM uint32_t CCDEN      : 1;            /*!< [9..9] Capture/Compare DMA Request Enable.                                */
      __IOM uint32_t CCSEN      : 1;            /*!< [10..10] Capture/Compare Synchronization Signal Enable.                   */
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
      __IOM uint32_t CIOVFDEN   : 1;            /*!< [12..12] Intermediate Overflow DMA Request Enable.                        */
      __IOM uint32_t CIOVFSEN   : 1;            /*!< [13..13] Intermediate Overflow Synchronization Signal Enable.             */
    } bit;
  } CONTROL_0;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_0;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_0;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IOM uint32_t DIFGEN     : 1;            /*!< [6..6] Differential Signal Generator Enable.                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_1;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t YPHST      : 1;            /*!< [5..5] Differential Y Phase State.                                        */
      __IOM uint32_t ACTIVEPH   : 1;            /*!< [6..6] Active Channel Select.                                             */
      __IOM uint32_t XPHST      : 1;            /*!< [7..7] Differential X Phase State.                                        */
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IOM uint32_t CCDEN      : 1;            /*!< [9..9] Capture/Compare DMA Request Enable.                                */
      __IOM uint32_t CCSEN      : 1;            /*!< [10..10] Capture/Compare Synchronization Signal Enable.                   */
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
      __IOM uint32_t CIOVFDEN   : 1;            /*!< [12..12] Intermediate Overflow DMA Request Enable.                        */
      __IOM uint32_t CIOVFSEN   : 1;            /*!< [13..13] Intermediate Overflow Synchronization Signal Enable.             */
    } bit;
  } CONTROL_1;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_1;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_1;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IOM uint32_t DIFGEN     : 1;            /*!< [6..6] Differential Signal Generator Enable.                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_2;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t YPHST      : 1;            /*!< [5..5] Differential Y Phase State.                                        */
      __IOM uint32_t ACTIVEPH   : 1;            /*!< [6..6] Active Channel Select.                                             */
      __IOM uint32_t XPHST      : 1;            /*!< [7..7] Differential X Phase State.                                        */
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IOM uint32_t CCDEN      : 1;            /*!< [9..9] Capture/Compare DMA Request Enable.                                */
      __IOM uint32_t CCSEN      : 1;            /*!< [10..10] Capture/Compare Synchronization Signal Enable.                   */
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
      __IOM uint32_t CIOVFDEN   : 1;            /*!< [12..12] Intermediate Overflow DMA Request Enable.                        */
      __IOM uint32_t CIOVFSEN   : 1;            /*!< [13..13] Intermediate Overflow Synchronization Signal Enable.             */
    } bit;
  } CONTROL_2;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_2;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_2;
  __IM  uint32_t  RESERVED11[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C0) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IOM uint32_t DIFGEN     : 1;            /*!< [6..6] Differential Signal Generator Enable.                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_3;
  __IM  uint32_t  RESERVED12[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D0) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t YPHST      : 1;            /*!< [5..5] Differential Y Phase State.                                        */
      __IOM uint32_t ACTIVEPH   : 1;            /*!< [6..6] Active Channel Select.                                             */
      __IOM uint32_t XPHST      : 1;            /*!< [7..7] Differential X Phase State.                                        */
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IOM uint32_t CCDEN      : 1;            /*!< [9..9] Capture/Compare DMA Request Enable.                                */
      __IOM uint32_t CCSEN      : 1;            /*!< [10..10] Capture/Compare Synchronization Signal Enable.                   */
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
      __IOM uint32_t CIOVFDEN   : 1;            /*!< [12..12] Intermediate Overflow DMA Request Enable.                        */
      __IOM uint32_t CIOVFSEN   : 1;            /*!< [13..13] Intermediate Overflow Synchronization Signal Enable.             */
    } bit;
  } CONTROL_3;
  __IM  uint32_t  RESERVED13[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000E0) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_3;
  __IM  uint32_t  RESERVED14[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000F0) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_3;
  __IM  uint32_t  RESERVED15[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000100) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IOM uint32_t DIFGEN     : 1;            /*!< [6..6] Differential Signal Generator Enable.                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_4;
  __IM  uint32_t  RESERVED16[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000110) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t YPHST      : 1;            /*!< [5..5] Differential Y Phase State.                                        */
      __IOM uint32_t ACTIVEPH   : 1;            /*!< [6..6] Active Channel Select.                                             */
      __IOM uint32_t XPHST      : 1;            /*!< [7..7] Differential X Phase State.                                        */
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IOM uint32_t CCDEN      : 1;            /*!< [9..9] Capture/Compare DMA Request Enable.                                */
      __IOM uint32_t CCSEN      : 1;            /*!< [10..10] Capture/Compare Synchronization Signal Enable.                   */
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
      __IOM uint32_t CIOVFDEN   : 1;            /*!< [12..12] Intermediate Overflow DMA Request Enable.                        */
      __IOM uint32_t CIOVFSEN   : 1;            /*!< [13..13] Intermediate Overflow Synchronization Signal Enable.             */
    } bit;
  } CONTROL_4;
  __IM  uint32_t  RESERVED17[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000120) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_4;
  __IM  uint32_t  RESERVED18[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000130) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_4;
  __IM  uint32_t  RESERVED19[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000140) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IOM uint32_t DIFGEN     : 1;            /*!< [6..6] Differential Signal Generator Enable.                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_5;
  __IM  uint32_t  RESERVED20[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000150) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t YPHST      : 1;            /*!< [5..5] Differential Y Phase State.                                        */
      __IOM uint32_t ACTIVEPH   : 1;            /*!< [6..6] Active Channel Select.                                             */
      __IOM uint32_t XPHST      : 1;            /*!< [7..7] Differential X Phase State.                                        */
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IOM uint32_t CCDEN      : 1;            /*!< [9..9] Capture/Compare DMA Request Enable.                                */
      __IOM uint32_t CCSEN      : 1;            /*!< [10..10] Capture/Compare Synchronization Signal Enable.                   */
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
      __IOM uint32_t CIOVFDEN   : 1;            /*!< [12..12] Intermediate Overflow DMA Request Enable.                        */
      __IOM uint32_t CIOVFSEN   : 1;            /*!< [13..13] Intermediate Overflow Synchronization Signal Enable.             */
    } bit;
  } CONTROL_5;
  __IM  uint32_t  RESERVED21[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000160) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_5;
  __IM  uint32_t  RESERVED22[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000170) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_5;
  __IM  uint32_t  RESERVED23[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000180) Module Operating Mode                                      */
    
    struct {
      __IOM uint32_t CLKDIV     : 10;           /*!< [9..0] Input Clock Divider.                                               */
      __IOM uint32_t CLKSEL     : 3;            /*!< [12..10] Input Clock (F<subscript>CLKIN</subscript>) Select.              */
      __IM  uint32_t            : 1;
      __IOM uint32_t HDOSEL     : 2;            /*!< [15..14] High Drive Port Bank Output Select.                              */
      __IOM uint32_t DEND       : 3;            /*!< [18..16] DMA Write End Index.                                             */
      __IOM uint32_t DPTR       : 3;            /*!< [21..19] DMA Write Transfer Pointer.                                      */
      __IOM uint32_t DSTART     : 3;            /*!< [24..22] DMA Target Start Index.                                          */
      __IOM uint32_t DBUSYF     : 1;            /*!< [25..25] DMA Busy Flag.                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t STDOSEL    : 2;            /*!< [28..27] Standard Port Bank Output Select.                                */
    } bit;
  } MODE;
  __IM  uint32_t  RESERVED24[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000190) Module Control                                             */
    
    struct {
      __IOM uint32_t OVFIEN     : 1;            /*!< [0..0] EPCA Counter Overflow/Limit Interrupt Enable.                      */
      __IOM uint32_t OVFDEN     : 1;            /*!< [1..1] EPCA Counter Overflow/Limit DMA Request Enable.                    */
      __IOM uint32_t OVFSEN     : 1;            /*!< [2..2] EPCA Counter Overflow/Limit Synchronization Signal Enable.         */
      __IOM uint32_t HALTIEN    : 1;            /*!< [3..3] EPCA Halt Input Interrupt Enable.                                  */
      __IOM uint32_t NOUPD      : 1;            /*!< [4..4] Internal Register Update Inhibit.                                  */
      __IOM uint32_t IDLEBEN    : 1;            /*!< [5..5] Idle Bypass Enable.                                                */
      __IOM uint32_t DBGMD      : 1;            /*!< [6..6] EPCA Debug Mode.                                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t HALTEN     : 1;            /*!< [9..9] Halt Input Enable.                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t STSEL      : 2;            /*!< [12..11] Synchronous Input Trigger Select.                                */
      __IOM uint32_t STESEL     : 1;            /*!< [13..13] Synchronous Input Trigger Edge Select.                           */
      __IOM uint32_t STEN       : 1;            /*!< [14..14] Synchronous Input Trigger Enable.                                */
      __IM  uint32_t            : 6;
      __IOM uint32_t DIVST      : 1;            /*!< [21..21] Clock Divider Output State.                                      */
      __IOM uint32_t DIV        : 10;           /*!< [31..22] Current Clock Divider Count.                                     */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED25[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A0) Module Status                                              */
    
    struct {
      __IOM uint32_t C0CCI      : 1;            /*!< [0..0] Channel 0 Capture/Compare Interrupt Flag.                          */
      __IOM uint32_t C1CCI      : 1;            /*!< [1..1] Channel 1 Capture/Compare Interrupt Flag.                          */
      __IOM uint32_t C2CCI      : 1;            /*!< [2..2] Channel 2 Capture/Compare Interrupt Flag.                          */
      __IOM uint32_t C3CCI      : 1;            /*!< [3..3] Channel 3 Capture/Compare Interrupt Flag.                          */
      __IOM uint32_t C4CCI      : 1;            /*!< [4..4] Channel 4 Capture/Compare Interrupt Flag.                          */
      __IOM uint32_t C5CCI      : 1;            /*!< [5..5] Channel 5 Capture/Compare Interrupt Flag.                          */
      __IOM uint32_t RUN        : 1;            /*!< [6..6] Counter/Timer Run.                                                 */
      __IOM uint32_t OVFI       : 1;            /*!< [7..7] Counter/Timer Overflow/Limit Interrupt Flag.                       */
      __IOM uint32_t UPDCF      : 1;            /*!< [8..8] Register Update Complete Flag.                                     */
      __IOM uint32_t HALTI      : 1;            /*!< [9..9] Halt Input Interrupt Flag.                                         */
      __IOM uint32_t C0IOVFI    : 1;            /*!< [10..10] Channel 0 Intermediate Overflow Interrupt Flag.                  */
      __IOM uint32_t C1IOVFI    : 1;            /*!< [11..11] Channel 1 Intermediate Overflow Interrupt Flag.                  */
      __IOM uint32_t C2IOVFI    : 1;            /*!< [12..12] Channel 2 Intermediate Overflow Interrupt Flag.                  */
      __IOM uint32_t C3IOVFI    : 1;            /*!< [13..13] Channel 3 Intermediate Overflow Interrupt Flag.                  */
      __IOM uint32_t C4IOVFI    : 1;            /*!< [14..14] Channel 4 Intermediate Overflow Interrupt Flag.                  */
      __IOM uint32_t C5IOVFI    : 1;            /*!< [15..15] Channel 5 Intermediate Overflow Interrupt Flag.                  */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED26[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001B0) Module Counter/Timer                                       */
    
    struct {
      __IOM uint32_t COUNTER    : 16;           /*!< [15..0] Counter/Timer.                                                    */
    } bit;
  } COUNTER;
  __IM  uint32_t  RESERVED27[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001C0) Module Upper Limit                                         */
    
    struct {
      __IOM uint32_t LIMIT      : 16;           /*!< [15..0] Upper Limit.                                                      */
    } bit;
  } LIMIT;
  __IM  uint32_t  RESERVED28[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001D0) Module Upper Limit Update Value                            */
    
    struct {
      __IOM uint32_t LIMITUPD   : 16;           /*!< [15..0] Module Upper Limit Update Value.                                  */
    } bit;
  } LIMITUPD;
  __IM  uint32_t  RESERVED29[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001E0) Phase Delay Time                                           */
    
    struct {
      __IOM uint32_t DTIMEX     : 8;            /*!< [7..0] X Phase Delay Time.                                                */
      __IOM uint32_t DTIMEY     : 8;            /*!< [15..8] Y Phase Delay Time.                                               */
    } bit;
  } DTIME;
  __IM  uint32_t  RESERVED30[7];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000200) DMA Transfer Target                                        */
    
    struct {
      __OM  uint32_t DTARGET    : 32;           /*!< [31..0] DMA Transfer Target.                                              */
    } bit;
  } DTARGET;
} EPCA_0_Type;                                  /*!< Size = 516 (0x204)                                                        */



/* =========================================================================================================================== */
/* ================                                        FLASHCTRL_0                                        ================ */
/* =========================================================================================================================== */


/**
  * @brief None (FLASHCTRL_0)
  */

typedef struct {                                /*!< (@ 0x4002E000) FLASHCTRL_0 Structure                                      */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Controller Configuration                                   */
    
    struct {
      __IOM uint32_t SPMD       : 2;            /*!< [1..0] Flash Speed Mode.                                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t RDSEN      : 1;            /*!< [4..4] Read Store Mode Enable.                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t DPFEN      : 1;            /*!< [6..6] Data Prefetch Enable.                                              */
      __IOM uint32_t PFINH      : 1;            /*!< [7..7] Prefetch Inhibit.                                                  */
      __IM  uint32_t            : 8;
      __IOM uint32_t SQWEN      : 1;            /*!< [16..16] Flash Write Sequence Enable.                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t ERASEEN    : 1;            /*!< [18..18] Flash Page Erase Enable.                                         */
      __IM  uint32_t BUFSTS     : 1;            /*!< [19..19] Flash Buffer Status.                                             */
      __IM  uint32_t BUSYF      : 1;            /*!< [20..20] Flash Operation Busy Flag.                                       */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED[39];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Flash Write Address                                        */
    
    struct {
      __IOM uint32_t WRADDR     : 32;           /*!< [31..0] Flash Write Address.                                              */
    } bit;
  } WRADDR;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Flash Write Data                                           */
    
    struct {
      __OM  uint32_t WRDATA     : 32;           /*!< [31..0] Flash Write Data.                                                 */
    } bit;
  } WRDATA;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C0) Flash Modification Key                                     */
    
    struct {
      __IOM uint32_t KEY        : 8;            /*!< [7..0] Flash Key.                                                         */
    } bit;
  } KEY;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D0) Flash Timing Control                                       */
    
    struct {
      __IM  uint32_t            : 6;
      __IOM uint32_t FLRTMD     : 1;            /*!< [6..6] Flash Read Timing Mode.                                            */
    } bit;
  } TCONTROL;
} FLASHCTRL_0_Type;                             /*!< Size = 212 (0xd4)                                                         */



/* =========================================================================================================================== */
/* ================                                           I2C_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (I2C_0)
  */

typedef struct {                                /*!< (@ 0x40009000) I2C_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IM  uint32_t BUSYF      : 1;            /*!< [0..0] Busy Flag.                                                         */
      __IOM uint32_t ACK        : 1;            /*!< [1..1] Acknowledge.                                                       */
      __IM  uint32_t ARBLF      : 1;            /*!< [2..2] Arbitration Lost Flag.                                             */
      __IM  uint32_t ACKRQF     : 1;            /*!< [3..3] Acknowledge Request Flag.                                          */
      __IOM uint32_t STO        : 1;            /*!< [4..4] Stop.                                                              */
      __IOM uint32_t STA        : 1;            /*!< [5..5] Start.                                                             */
      __IM  uint32_t TXMDF      : 1;            /*!< [6..6] Transmit Mode Flag.                                                */
      __IM  uint32_t MSMDF      : 1;            /*!< [7..7] Master/Slave Mode Flag.                                            */
      __IOM uint32_t STOI       : 1;            /*!< [8..8] Stop Interrupt Flag.                                               */
      __IOM uint32_t ACKI       : 1;            /*!< [9..9] Acknowledge Interrupt Flag.                                        */
      __IOM uint32_t RXI        : 1;            /*!< [10..10] Receive Done Interrupt Flag.                                     */
      __IOM uint32_t TXI        : 1;            /*!< [11..11] Transmit Done Interrupt Flag.                                    */
      __IOM uint32_t STAI       : 1;            /*!< [12..12] Start Interrupt Flag.                                            */
      __IOM uint32_t ARBLI      : 1;            /*!< [13..13] Arbitration Lost Interrupt Flag.                                 */
      __IOM uint32_t T0I        : 1;            /*!< [14..14] I2C Timer Byte 0 Interrupt Flag.                                 */
      __IOM uint32_t T1I        : 1;            /*!< [15..15] I2C Timer Byte 1 Interrupt Flag.                                 */
      __IOM uint32_t T2I        : 1;            /*!< [16..16] I2C Timer Byte 2 Interrupt Flag.                                 */
      __IOM uint32_t T3I        : 1;            /*!< [17..17] I2C Timer Byte 3 Interrupt Flag.                                 */
      __IOM uint32_t RXARM      : 1;            /*!< [18..18] Receive Arm.                                                     */
      __IOM uint32_t TXARM      : 1;            /*!< [19..19] Transmit Arm.                                                    */
      __IM  uint32_t SLVAF      : 1;            /*!< [20..20] Slave Address Type Flag.                                         */
      __IOM uint32_t ATXRXEN    : 1;            /*!< [21..21] Auto Transmit or Receive Enable.                                 */
      __IOM uint32_t FMD        : 1;            /*!< [22..22] Filter Mode.                                                     */
      __IOM uint32_t DBGMD      : 1;            /*!< [23..23] I2C Debug Mode.                                                  */
      __IOM uint32_t SMINH      : 1;            /*!< [24..24] Slave Mode Inhibit.                                              */
      __IOM uint32_t HACKEN     : 1;            /*!< [25..25] Auto Acknowledge Enable .                                        */
      __IOM uint32_t SLVAMD     : 1;            /*!< [26..26] Slave Address Mode.                                              */
      __IOM uint32_t LBACKEN    : 1;            /*!< [27..27] Last Byte Acknowledge Enable.                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t GCEN       : 1;            /*!< [29..29] General Call Address Enable.                                     */
      __IOM uint32_t RESET      : 1;            /*!< [30..30] Module Soft Reset.                                               */
      __IOM uint32_t I2CEN      : 1;            /*!< [31..31] I2C Enable.                                                      */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Configuration                                       */
    
    struct {
      __IOM uint32_t SCALER     : 6;            /*!< [5..0] I2C Clock Scaler.                                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t STOIEN     : 1;            /*!< [8..8] Stop Interrupt Enable.                                             */
      __IOM uint32_t ACKIEN     : 1;            /*!< [9..9] Acknowledge Interrupt Enable.                                      */
      __IOM uint32_t RXIEN      : 1;            /*!< [10..10] Receive Done Interrupt Enable.                                   */
      __IOM uint32_t TXIEN      : 1;            /*!< [11..11] Transmit Done Interrupt Enable.                                  */
      __IOM uint32_t STAIEN     : 1;            /*!< [12..12] Start Interrupt Enable.                                          */
      __IOM uint32_t ARBLIEN    : 1;            /*!< [13..13] Arbitration Lost Interrupt Enable.                               */
      __IOM uint32_t T0IEN      : 1;            /*!< [14..14] I2C Timer Byte 0 Interrupt Enable.                               */
      __IOM uint32_t T1IEN      : 1;            /*!< [15..15] I2C Timer Byte 1 Interrupt Enable.                               */
      __IOM uint32_t T2IEN      : 1;            /*!< [16..16] I2C Timer Byte 2 Interrupt Enable.                               */
      __IOM uint32_t T3IEN      : 1;            /*!< [17..17] I2C Timer Byte 3 Interrupt Enable.                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t BC         : 2;            /*!< [21..20] Transfer Byte Count.                                             */
      __IM  uint32_t BP         : 2;            /*!< [23..22] Transfer Byte Pointer.                                           */
      __IOM uint32_t T0RUN      : 1;            /*!< [24..24] I2C Timer Byte 0 Run.                                            */
      __IOM uint32_t T1RUN      : 1;            /*!< [25..25] I2C Timer Byte 1 Run.                                            */
      __IOM uint32_t T2RUN      : 1;            /*!< [26..26] I2C Timer Byte 2 Run.                                            */
      __IOM uint32_t T3RUN      : 1;            /*!< [27..27] I2C Timer Byte 3 Run.                                            */
      __IOM uint32_t TMD        : 2;            /*!< [29..28] I2C Timer Mode.                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIMEREN    : 1;            /*!< [31..31] I2C Timer Enable.                                                */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Slave Address                                              */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t ADDRESS    : 10;           /*!< [10..1] Slave Address.                                                    */
    } bit;
  } SADDRESS;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Slave Address Mask                                         */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t MASK       : 10;           /*!< [10..1] Slave Address Mask.                                               */
    } bit;
  } SMASK;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Data Buffer Access                                         */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Data.                                                             */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Timer Data                                                 */
    
    struct {
      __IOM uint32_t T0         : 8;            /*!< [7..0] Timer Byte 0.                                                      */
      __IOM uint32_t T1         : 8;            /*!< [15..8] Timer Byte 1.                                                     */
      __IOM uint32_t T2         : 8;            /*!< [23..16] Timer Byte 2.                                                    */
      __IOM uint32_t T3         : 8;            /*!< [31..24] Timer Byte 3.                                                    */
    } bit;
  } TIMER;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Timer Reload Values                                        */
    
    struct {
      __IOM uint32_t T0RL       : 8;            /*!< [7..0] Timer Byte 0 Reload Value.                                         */
      __IOM uint32_t T1RL       : 8;            /*!< [15..8] Timer Byte 1 Reload Value.                                        */
      __IOM uint32_t T2RL       : 8;            /*!< [23..16] Timer Byte 2 Reload Value.                                       */
      __IOM uint32_t T3RL       : 8;            /*!< [31..24] Timer Byte 3 Reload Value.                                       */
    } bit;
  } TIMERRL;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) SCL Signal Configuration                                   */
    
    struct {
      __IOM uint32_t SETUP      : 4;            /*!< [3..0] Data Setup Time Extension.                                         */
      __IOM uint32_t HOLD       : 4;            /*!< [7..4] Data Hold Time Extension.                                          */
      __IOM uint32_t SCLL       : 8;            /*!< [15..8] SCL Low Time Extension.                                           */
      __IM  uint32_t SCLLTIMER  : 4;            /*!< [19..16] SCL Low Timer Bits [3:0].                                        */
    } bit;
  } SCONFIG;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) DMA Configuration                                          */
    
    struct {
      __IOM uint32_t DMALEN     : 8;            /*!< [7..0] DMA Transfer Length.                                               */
      __IM  uint32_t            : 23;
      __IOM uint32_t DMAEN      : 1;            /*!< [31..31] DMA Mode Enable.                                                 */
    } bit;
  } I2CDMA;
} I2C_Type;                                     /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                           I2S_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (I2S_0)
  */

typedef struct {                                /*!< (@ 0x4003A000) I2S_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Transmit Control                                           */
    
    struct {
      __IOM uint32_t FSGEN      : 1;            /*!< [0..0] DFS Generator Enable.                                              */
      __IOM uint32_t FSSEN      : 1;            /*!< [1..1] DFS Synchronize Enable.                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t DDIS       : 1;            /*!< [5..5] Transmit Delay Disable.                                            */
      __IOM uint32_t FSDEL      : 8;            /*!< [13..6] Transmit Initial Phase Delay.                                     */
      __IOM uint32_t FSSRCSEL   : 1;            /*!< [14..14] Transmit Frame Sync Source Select.                               */
      __IOM uint32_t FILLSEL    : 2;            /*!< [16..15] Transmit Data Fill Select.                                       */
      __IOM uint32_t JSEL       : 1;            /*!< [17..17] Transmit Data Justification Select.                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t FSINVEN    : 1;            /*!< [20..20] Transmit WS Inversion Enable.                                    */
      __IOM uint32_t SCLKINVEN  : 1;            /*!< [21..21] Transmit SCK Inversion Enable.                                   */
      __IOM uint32_t ORDER      : 1;            /*!< [22..22] Transmit Order.                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t MBSEL      : 3;            /*!< [26..24] Transmit Mono Bit-Width Select.                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t TXEN       : 1;            /*!< [29..29] Transmitter Enable.                                              */
    } bit;
  } TXCONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Transmit Mode                                              */
    
    struct {
      __IOM uint32_t CYCLE      : 12;           /*!< [11..0] Transmit Clock Cycle Select.                                      */
      __IOM uint32_t START      : 8;            /*!< [19..12] Transmit Start Control.                                          */
      __IOM uint32_t SLOTS      : 5;            /*!< [24..20] Transmit Drive Select.                                           */
      __IOM uint32_t DEDIS      : 1;            /*!< [25..25] Transmit Drive Early Disable.                                    */
      __IOM uint32_t DIMD       : 1;            /*!< [26..26] Transmit Drive Inactive Mode.                                    */
      __IOM uint32_t TDMEN      : 1;            /*!< [27..27] Transmit Time Division Multiplexing Enable.                      */
    } bit;
  } TXMODE;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Frame Sync Duty Cycle                                      */
    
    struct {
      __IOM uint32_t FSLOW      : 16;           /*!< [15..0] Frame Sync Low Time.                                              */
      __IOM uint32_t FSHIGH     : 16;           /*!< [31..16] Frame Sync High Time.                                            */
    } bit;
  } FSDUTY;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Receive Control                                            */
    
    struct {
      __IOM uint32_t FSDEL      : 8;            /*!< [7..0] Receive Initial Phase Delay.                                       */
      __IOM uint32_t JSEL       : 1;            /*!< [8..8] Receive Data Justification.                                        */
      __IOM uint32_t DDIS       : 1;            /*!< [9..9] Receive Delay Disable.                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t FSINVEN    : 1;            /*!< [11..11] Receive WS Inversion Enable.                                     */
      __IOM uint32_t SCLKINVEN  : 1;            /*!< [12..12] Receive SCK Inversion Enable.                                    */
      __IOM uint32_t ORDER      : 1;            /*!< [13..13] Receive Order.                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t MBSEL      : 3;            /*!< [17..15] Receive Mono Bit-Width Select.                                   */
      __IM  uint32_t            : 2;
      __IOM uint32_t FSSRCSEL   : 1;            /*!< [20..20] Receive Frame Sync Source Select.                                */
      __IOM uint32_t RXEN       : 1;            /*!< [21..21] Receive Enable.                                                  */
    } bit;
  } RXCONTROL;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Receive Mode                                               */
    
    struct {
      __IOM uint32_t CYCLE      : 12;           /*!< [11..0] Receive Clock Cycle Select.                                       */
      __IOM uint32_t START      : 8;            /*!< [19..12] Receive Start Control.                                           */
      __IOM uint32_t SLOTS      : 6;            /*!< [25..20] Receive Drive Select.                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDMEN      : 1;            /*!< [27..27] Receive Time Division Multiplexing Enable.                       */
    } bit;
  } RXMODE;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Clock Control                                              */
    
    struct {
      __IOM uint32_t INTDIV     : 10;           /*!< [9..0] Clock Divider Integer Value.                                       */
      __IOM uint32_t FRACDIV    : 8;            /*!< [17..10] Clock Divider Fractional Value.                                  */
      __IOM uint32_t DUTYMD     : 1;            /*!< [18..18] Duty Cycle Adjustment Mode.                                      */
      __OM  uint32_t CLKUPD     : 1;            /*!< [19..19] Clock Divider Update.                                            */
      __IOM uint32_t DIVEN      : 1;            /*!< [20..20] Clock Divider Enable.                                            */
      __IOM uint32_t TXCLKSEL   : 1;            /*!< [21..21] Transmit Clock Select.                                           */
      __IOM uint32_t RXCLKSEL   : 1;            /*!< [22..22] Receive Clock Select.                                            */
      __OM  uint32_t RESET      : 1;            /*!< [23..23] I2S Module Reset.                                                */
      __IOM uint32_t RXCLKEN    : 1;            /*!< [24..24] Receive Clock Enable.                                            */
      __IOM uint32_t TXCLKEN    : 1;            /*!< [25..25] Transmit Clock Enable.                                           */
      __IOM uint32_t RXSCLKMD   : 1;            /*!< [26..26] Receive SCK Mode.                                                */
      __IOM uint32_t TXSCLKMD   : 1;            /*!< [27..27] Transmit SCK Mode.                                               */
    } bit;
  } CLKCONTROL;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Transmit Data FIFO                                         */
    
    struct {
      __OM  uint32_t TXFIFO     : 32;           /*!< [31..0] Transmit Data FIFO.                                               */
    } bit;
  } TXFIFO;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Receive Data FIFO                                          */
    
    struct {
      __IM  uint32_t RXFIFO     : 32;           /*!< [31..0] Receive Data FIFO.                                                */
    } bit;
  } RXFIFO;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) FIFO Status                                                */
    
    struct {
      __IM  uint32_t TXFIFONUM  : 4;            /*!< [3..0] Transmit FIFO Status.                                              */
      __IM  uint32_t            : 12;
      __IM  uint32_t RXFIFONUM  : 4;            /*!< [19..16] Receive FIFO Status.                                             */
    } bit;
  } FIFOSTATUS;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) FIFO Control                                               */
    
    struct {
      __IOM uint32_t TXFIFOWM   : 4;            /*!< [3..0] Transmit FIFO Low Watermark.                                       */
      __IM  uint32_t            : 12;
      __IOM uint32_t RXFIFOWM   : 4;            /*!< [19..16] Receive FIFO High Watermark.                                     */
      __IM  uint32_t            : 1;
      __OM  uint32_t TXFIFOFL   : 1;            /*!< [21..21] Transmit FIFO Flush.                                             */
      __OM  uint32_t RXFIFOFL   : 1;            /*!< [22..22] Receive FIFO Flush.                                              */
    } bit;
  } FIFOCONTROL;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Interrupt Control                                          */
    
    struct {
      __IOM uint32_t TXUFIEN    : 1;            /*!< [0..0] Transmit Underflow Interrupt Enable.                               */
      __IOM uint32_t RXOFIEN    : 1;            /*!< [1..1] Receive Overflow Interrupt Enable.                                 */
      __IOM uint32_t TXLWMIEN   : 1;            /*!< [2..2] Transmit FIFO Low Watermark Interrupt Enable.                      */
      __IOM uint32_t RXHWMIEN   : 1;            /*!< [3..3] Receive FIFO High Watermark Interrupt Enable.                      */
    } bit;
  } INTCONTROL;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Module Status                                              */
    
    struct {
      __IOM uint32_t TXUFI      : 1;            /*!< [0..0] Transmit Underflow Interrupt Flag.                                 */
      __IOM uint32_t RXOFI      : 1;            /*!< [1..1] Receive Overflow Interrupt Flag.                                   */
      __IM  uint32_t TXLWMI     : 1;            /*!< [2..2] Transmit FIFO Low Watermark Interrupt Flag.                        */
      __IM  uint32_t RXHWMI     : 1;            /*!< [3..3] Receive FIFO High Watermark Interrupt Flag.                        */
      __IM  uint32_t CDBUSYF    : 1;            /*!< [4..4] Clock Divider Busy Flag.                                           */
      __IM  uint32_t CDSTS      : 1;            /*!< [5..5] Clock Divider Counter Status.                                      */
      __IM  uint32_t TXCLKSELRF : 1;            /*!< [6..6] Transmit Clock Select Ready Flag.                                  */
      __IM  uint32_t RXCLKSELRF : 1;            /*!< [7..7] Receive Clock Select Ready Flag.                                   */
      __IM  uint32_t TXCLKENRF  : 1;            /*!< [8..8] Transmit Clock Enable Ready Flag.                                  */
      __IM  uint32_t RXCLKENRF  : 1;            /*!< [9..9] Receive Clock Enable Ready Flag.                                   */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED11[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000C0) DMA Control                                                */
    
    struct {
      __IOM uint32_t TXDMAEN    : 1;            /*!< [0..0] Transmit DMA Enable.                                               */
      __IOM uint32_t RXDMAEN    : 1;            /*!< [1..1] Receive DMA Enable.                                                */
      __IOM uint32_t TXDMABMD   : 1;            /*!< [2..2] Transmit DMA Burst Mode.                                           */
      __IOM uint32_t RXDMABMD   : 1;            /*!< [3..3] Receive DMA Burst Mode.                                            */
    } bit;
  } DMACONTROL;
  __IM  uint32_t  RESERVED12[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000D0) Debug Control                                              */
    
    struct {
      __IOM uint32_t TXDBGHEN   : 1;            /*!< [0..0] I2S Transmit DMA Debug Halt Enable.                                */
      __IOM uint32_t RXDBGHEN   : 1;            /*!< [1..1] I2S Receive DMA Debug Halt Enable.                                 */
      __IOM uint32_t TXDBGMD    : 1;            /*!< [2..2] I2S Transmit Debug Mode.                                           */
      __IOM uint32_t RXDBGMD    : 1;            /*!< [3..3] I2S Receive Debug Mode.                                            */
    } bit;
  } DBGCONTROL;
} I2S_0_Type;                                   /*!< Size = 212 (0xd4)                                                         */



/* =========================================================================================================================== */
/* ================                                          IDAC_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (IDAC_0)
  */

typedef struct {                                /*!< (@ 0x40031000) IDAC_0 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t OUPDT      : 3;            /*!< [2..0] Output Update Trigger.                                             */
      __IOM uint32_t ETRIG      : 3;            /*!< [5..3] Edge Trigger Source Select.                                        */
      __IOM uint32_t OUTMD      : 2;            /*!< [7..6] Output Mode.                                                       */
      __IOM uint32_t INFMT      : 2;            /*!< [9..8] Data Input Format.                                                 */
      __IOM uint32_t DMARUN     : 1;            /*!< [10..10] DMA Run.                                                         */
      __IOM uint32_t JSEL       : 1;            /*!< [11..11] Data Justification Select.                                       */
      __OM  uint32_t BUFRESET   : 1;            /*!< [12..12] Data Buffer Reset.                                               */
      __IOM uint32_t TRIGINH    : 1;            /*!< [13..13] Trigger Source Inhibit.                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t WRAPEN     : 1;            /*!< [16..16] Wrap Mode Enable.                                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t ORIEN      : 1;            /*!< [20..20] FIFO Overrun Interrupt Enable.                                   */
      __IOM uint32_t URIEN      : 1;            /*!< [21..21] FIFO Underrun Interrupt Enable.                                  */
      __IOM uint32_t WEIEN      : 1;            /*!< [22..22] FIFO Went Empty Interrupt Enable.                                */
      __IM  uint32_t            : 6;
      __IOM uint32_t DBGMD      : 1;            /*!< [29..29] IDAC Debug Mode.                                                 */
      __IOM uint32_t LOADEN     : 1;            /*!< [30..30] Load Resistor Enable.                                            */
      __IOM uint32_t IDACEN     : 1;            /*!< [31..31] IDAC Enable.                                                     */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Output Data                                                */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Output Data.                                                      */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) FIFO Buffer Status                                         */
    
    struct {
      __IM  uint32_t LEVEL      : 3;            /*!< [2..0] FIFO Level.                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t ORI        : 1;            /*!< [4..4] FIFO Overrun Interrupt Flag.                                       */
      __IOM uint32_t URI        : 1;            /*!< [5..5] FIFO Underrun Interrupt Flag.                                      */
      __IOM uint32_t WEI        : 1;            /*!< [6..6] FIFO Went Empty Interrupt Flag.                                    */
    } bit;
  } BUFSTATUS;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) FIFO Buffer Entries 0 and 1                                */
    
    struct {
      __IM  uint32_t BUFFER0    : 16;           /*!< [15..0] FIFO Buffer Entry 0.                                              */
      __IM  uint32_t BUFFER1    : 16;           /*!< [31..16] FIFO Buffer Entry 1.                                             */
    } bit;
  } BUFFER10;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) FIFO Buffer Entries 2 and 3                                */
    
    struct {
      __IM  uint32_t BUFFER2    : 16;           /*!< [15..0] FIFO Buffer Entry 2.                                              */
      __IM  uint32_t BUFFER3    : 16;           /*!< [31..16] FIFO Buffer Entry 3.                                             */
    } bit;
  } BUFFER32;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Output Current Gain Adjust                                 */
    
    struct {
      __IOM uint32_t GAINADJ    : 5;            /*!< [4..0] Output Current Gain Adjust.                                        */
    } bit;
  } GAINADJ;
} IDAC_0_Type;                                  /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                          IDAC_1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (IDAC_1)
  */

typedef struct {                                /*!< (@ 0x40032000) IDAC_1 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t OUPDT      : 3;            /*!< [2..0] Output Update Trigger.                                             */
      __IOM uint32_t ETRIG      : 3;            /*!< [5..3] Edge Trigger Source Select.                                        */
      __IOM uint32_t OUTMD      : 2;            /*!< [7..6] Output Mode.                                                       */
      __IOM uint32_t INFMT      : 2;            /*!< [9..8] Data Input Format.                                                 */
      __IOM uint32_t DMARUN     : 1;            /*!< [10..10] DMA Run.                                                         */
      __IOM uint32_t JSEL       : 1;            /*!< [11..11] Data Justification Select.                                       */
      __OM  uint32_t BUFRESET   : 1;            /*!< [12..12] Data Buffer Reset.                                               */
      __IOM uint32_t TRIGINH    : 1;            /*!< [13..13] Trigger Source Inhibit.                                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t WRAPEN     : 1;            /*!< [16..16] Wrap Mode Enable.                                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t ORIEN      : 1;            /*!< [20..20] FIFO Overrun Interrupt Enable.                                   */
      __IOM uint32_t URIEN      : 1;            /*!< [21..21] FIFO Underrun Interrupt Enable.                                  */
      __IOM uint32_t WEIEN      : 1;            /*!< [22..22] FIFO Went Empty Interrupt Enable.                                */
      __IM  uint32_t            : 6;
      __IOM uint32_t DBGMD      : 1;            /*!< [29..29] IDAC Debug Mode.                                                 */
      __IOM uint32_t LOADEN     : 1;            /*!< [30..30] Load Resistor Enable.                                            */
      __IOM uint32_t IDACEN     : 1;            /*!< [31..31] IDAC Enable.                                                     */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Output Data                                                */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Output Data.                                                      */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) FIFO Buffer Status                                         */
    
    struct {
      __IM  uint32_t LEVEL      : 3;            /*!< [2..0] FIFO Level.                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t ORI        : 1;            /*!< [4..4] FIFO Overrun Interrupt Flag.                                       */
      __IOM uint32_t URI        : 1;            /*!< [5..5] FIFO Underrun Interrupt Flag.                                      */
      __IOM uint32_t WEI        : 1;            /*!< [6..6] FIFO Went Empty Interrupt Flag.                                    */
    } bit;
  } BUFSTATUS;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) FIFO Buffer Entries 0 and 1                                */
    
    struct {
      __IM  uint32_t BUFFER0    : 16;           /*!< [15..0] FIFO Buffer Entry 0.                                              */
      __IM  uint32_t BUFFER1    : 16;           /*!< [31..16] FIFO Buffer Entry 1.                                             */
    } bit;
  } BUFFER10;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) FIFO Buffer Entries 2 and 3                                */
    
    struct {
      __IM  uint32_t BUFFER2    : 16;           /*!< [15..0] FIFO Buffer Entry 2.                                              */
      __IM  uint32_t BUFFER3    : 16;           /*!< [31..16] FIFO Buffer Entry 3.                                             */
    } bit;
  } BUFFER32;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Output Current Gain Adjust                                 */
    
    struct {
      __IOM uint32_t GAINADJ    : 5;            /*!< [4..0] Output Current Gain Adjust.                                        */
    } bit;
  } GAINADJ;
} IDAC_1_Type;                                  /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                           IVC_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (IVC_0)
  */

typedef struct {                                /*!< (@ 0x40044000) IVC_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t IN0RANGE   : 3;            /*!< [2..0] Input 0 Range.                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t IN1RANGE   : 3;            /*!< [6..4] Input 1 Range.                                                     */
      __IM  uint32_t            : 23;
      __IOM uint32_t C0EN       : 1;            /*!< [30..30] Converter 0 Enable.                                              */
      __IOM uint32_t C1EN       : 1;            /*!< [31..31] Converter 1 Enable.                                              */
    } bit;
  } CONTROL;
} IVC_0_Type;                                   /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                          LOCK_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (LOCK_0)
  */

typedef struct {                                /*!< (@ 0x40049000) LOCK_0 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Security Key                                               */
    
    struct {
      __IOM uint32_t KEY        : 8;            /*!< [7..0] Peripheral Lock Mask Key.                                          */
    } bit;
  } KEY;
  __IM  uint32_t  RESERVED[7];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Peripheral Lock Control 0                                  */
    
    struct {
      __IOM uint32_t USARTL     : 1;            /*!< [0..0] USART/UART Module Lock Enable.                                     */
      __IOM uint32_t SPIL       : 1;            /*!< [1..1] SPI Module Lock Enable.                                            */
      __IOM uint32_t I2CL       : 1;            /*!< [2..2] I2C Module Lock Enable.                                            */
      __IOM uint32_t PCAL       : 1;            /*!< [3..3] PCA Module Lock Enable.                                            */
      __IOM uint32_t TIMERL     : 1;            /*!< [4..4] Timer Module Lock Enable.                                          */
      __IOM uint32_t USBL       : 1;            /*!< [5..5] USB Module Lock Enable.                                            */
      __IOM uint32_t SARADCL    : 1;            /*!< [6..6] SARADC Module Lock Enable.                                         */
      __IOM uint32_t SSGL       : 1;            /*!< [7..7] SSG Module Lock Enable.                                            */
      __IOM uint32_t CMPL       : 1;            /*!< [8..8] Comparator Module Lock Enable.                                     */
      __IOM uint32_t CSL        : 1;            /*!< [9..9] Capacitive Sensing Module Lock Enable.                             */
      __IOM uint32_t EMIFL      : 1;            /*!< [10..10] EMIF Module Lock Enable.                                         */
      __IOM uint32_t AESL       : 1;            /*!< [11..11] AES Module Lock Enable.                                          */
      __IOM uint32_t CRCL       : 1;            /*!< [12..12] CRC Module Lock Enable.                                          */
      __IOM uint32_t RTCL       : 1;            /*!< [13..13] RTC Module Lock Enable.                                          */
      __IOM uint32_t CLKRSTL    : 1;            /*!< [14..14] Clock Control and Reset Sources Lock Enable.                     */
      __IOM uint32_t VMONL      : 1;            /*!< [15..15] Voltage Supply Monitor Module Lock Enable.                       */
      __IOM uint32_t IDACL      : 1;            /*!< [16..16] IDAC Module Lock Enable.                                         */
      __IOM uint32_t DMACTRLL   : 1;            /*!< [17..17] DMA Controller Module Lock Enable.                               */
      __IOM uint32_t DMAXBARL   : 1;            /*!< [18..18] DMA Crossbar Module Lock Enable.                                 */
      __IOM uint32_t LPTL       : 1;            /*!< [19..19] Low Power Timer Module Lock Enable.                              */
      __IOM uint32_t VREFL      : 1;            /*!< [20..20] Voltage Reference Module Lock Enable.                            */
      __IOM uint32_t I2SL       : 1;            /*!< [21..21] I2S Module Lock Enable.                                          */
      __IOM uint32_t PLLL       : 1;            /*!< [22..22] PLL Module Lock Enable.                                          */
      __IOM uint32_t EXTOSCL    : 1;            /*!< [23..23] External Oscillator Module Lock Enable.                          */
      __IOM uint32_t VREGL      : 1;            /*!< [24..24] Voltage Regulator Module Lock Enable.                            */
      __IOM uint32_t LPOSCL     : 1;            /*!< [25..25] Low Power Oscillator Lock Enable.                                */
      __IOM uint32_t EVREGL     : 1;            /*!< [26..26] External Regulator Module Lock Enable.                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t IVCL       : 1;            /*!< [28..28] IVC Module Lock Enable.                                          */
    } bit;
  } PERIPHLOCK0;
  __IM  uint32_t  RESERVED1[7];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Peripheral Lock Control 1                                  */
    
    struct {
      __IOM uint32_t PMUL       : 1;            /*!< [0..0] PMU Module Lock Enable.                                            */
    } bit;
  } PERIPHLOCK1;
} LOCK_0_Type;                                  /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                         LPTIMER_0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (LPTIMER_0)
  */

typedef struct {                                /*!< (@ 0x40038000) LPTIMER_0 Structure                                        */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t CMD        : 2;            /*!< [1..0] Count Mode.                                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t EXTSEL     : 4;            /*!< [7..4] External Trigger Source Select.                                    */
      __IOM uint32_t TMRSET     : 1;            /*!< [8..8] Timer Set.                                                         */
      __IOM uint32_t TMRCAP     : 1;            /*!< [9..9] Timer Capture.                                                     */
      __IOM uint32_t CMPSET     : 1;            /*!< [10..10] Timer Comparator Set.                                            */
      __IOM uint32_t CMPCAP     : 1;            /*!< [11..11] Timer Comparator Capture.                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t OVFIEN     : 1;            /*!< [16..16] Timer Overflow Interrupt Enable.                                 */
      __IOM uint32_t CMPIEN     : 1;            /*!< [17..17] Timer Compare Event Interrupt Enable.                            */
      __IOM uint32_t OVFTMD     : 1;            /*!< [18..18] Timer Overflow Toggle Mode.                                      */
      __IOM uint32_t CMPTMD     : 1;            /*!< [19..19] Timer Compare Event Toggle Mode .                                */
      __IM  uint32_t            : 4;
      __IOM uint32_t CMPRSTEN   : 1;            /*!< [24..24] Timer Compare Event Reset Enable.                                */
      __IM  uint32_t            : 5;
      __IOM uint32_t DBGMD      : 1;            /*!< [30..30] Low Power Timer Debug Mode.                                      */
      __IOM uint32_t RUN        : 1;            /*!< [31..31] Timer Run Control and Compare Threshold Enable.                  */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Timer and Comparator Data                                  */
    
    struct {
      __IOM uint32_t DATA       : 16;           /*!< [15..0] Timer and Comparator Data.                                        */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Module Status                                              */
    
    struct {
      __IOM uint32_t OVFI       : 1;            /*!< [0..0] Timer Overflow Interrupt Flag.                                     */
      __IOM uint32_t CMPI       : 1;            /*!< [1..1] Timer Compare Event Interrupt Flag.                                */
    } bit;
  } STATUS;
} LPTIMER_0_Type;                               /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           PLL_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PLL_0)
  */

typedef struct {                                /*!< (@ 0x4003B000) PLL_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Reference Divider Setting                                  */
    
    struct {
      __IOM uint32_t M          : 12;           /*!< [11..0] M Divider Value.                                                  */
      __IM  uint32_t            : 4;
      __IOM uint32_t N          : 12;           /*!< [27..16] N Divider Value.                                                 */
    } bit;
  } DIVIDER;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Control                                             */
    
    struct {
      __IM  uint32_t LLMTF      : 1;            /*!< [0..0] CAL Saturation (Low) Flag.                                         */
      __IM  uint32_t HLMTF      : 1;            /*!< [1..1] CAL Saturation (High) Flag.                                        */
      __IM  uint32_t LCKI       : 1;            /*!< [2..2] Phase-Lock and Frequency-Lock Locked Interrupt Flag.               */
      __IM  uint32_t            : 6;
      __IOM uint32_t LMTIEN     : 1;            /*!< [9..9] Limit Interrupt Enable.                                            */
      __IOM uint32_t LCKIEN     : 1;            /*!< [10..10] Locked Interrupt Enable.                                         */
      __IOM uint32_t LCKPOL     : 1;            /*!< [11..11] Lock Interrupt Polarity.                                         */
      __IM  uint32_t            : 4;
      __IOM uint32_t REFSEL     : 2;            /*!< [17..16] Reference Clock Selection Control.                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t LOCKTH     : 2;            /*!< [21..20] Lock Threshold Control.                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t STALL      : 1;            /*!< [26..26] DCO Output Updates Stall.                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t DITHEN     : 1;            /*!< [28..28] Dithering Enable.                                                */
      __IOM uint32_t EDGSEL     : 1;            /*!< [29..29] Edge Lock Select.                                                */
      __IOM uint32_t OUTMD      : 2;            /*!< [31..30] PLL Output Mode.                                                 */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Spectrum Spreading Control                                 */
    
    struct {
      __IOM uint32_t SSAMP      : 3;            /*!< [2..0] Spectrum Spreading Amplitude.                                      */
      __IM  uint32_t            : 5;
      __IOM uint32_t SSUINV     : 5;            /*!< [12..8] Spectrum Spreading Update Interval.                               */
    } bit;
  } SSPR;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Calibration Configuration                                  */
    
    struct {
      __IOM uint32_t DITHER     : 4;            /*!< [3..0] DCO Dither Setting.                                                */
      __IOM uint32_t CAL        : 12;           /*!< [15..4] DCO Calibration Value.                                            */
      __IOM uint32_t RANGE      : 3;            /*!< [18..16] DCO Range.                                                       */
    } bit;
  } CALCONFIG;
} PLL_0_Type;                                   /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                         EXTOSC_0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (EXTOSC_0)
  */

typedef struct {                                /*!< (@ 0x4003C000) EXTOSC_0 Structure                                         */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Oscillator Control                                         */
    
    struct {
      __IOM uint32_t FREQCN     : 3;            /*!< [2..0] Frequency Control.                                                 */
      __IM  uint32_t OSCVLDF    : 1;            /*!< [3..3] Oscillator Valid Flag.                                             */
      __IOM uint32_t OSCMD      : 3;            /*!< [6..4] Oscillator Mode.                                                   */
    } bit;
  } CONTROL;
} EXTOSC_0_Type;                                /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                          LPOSC_0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (LPOSC_0)
  */

typedef struct {                                /*!< (@ 0x40041000) LPOSC_0 Structure                                          */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Low Power Oscillator Output Value                          */
    
    struct {
      __IM  uint32_t OSCVAL     : 4;            /*!< [3..0] Low Power Oscillator Output Value.                                 */
    } bit;
  } OSCVAL;
} LPOSC_0_Type;                                 /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           PCA_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PCA_0)
  */

typedef struct {                                /*!< (@ 0x4000F000) PCA_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_0;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
    } bit;
  } CONTROL_0;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_0;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_0;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_1;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
    } bit;
  } CONTROL_1;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_1;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_1;
  __IM  uint32_t  RESERVED7[67];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000180) Module Operating Mode                                      */
    
    struct {
      __IOM uint32_t CLKDIV     : 10;           /*!< [9..0] Input Clock Divisor.                                               */
      __IOM uint32_t CLKSEL     : 3;            /*!< [12..10] Input Clock (F<subscript>CLKIN</subscript>) Select.              */
    } bit;
  } MODE;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000190) Module Control                                             */
    
    struct {
      __IOM uint32_t OVFIEN     : 1;            /*!< [0..0] PCA Counter Overflow/Limit Interrupt Enable.                       */
      __IM  uint32_t            : 5;
      __IOM uint32_t DBGMD      : 1;            /*!< [6..6] PCA Debug Mode.                                                    */
      __IM  uint32_t            : 14;
      __IOM uint32_t DIVST      : 1;            /*!< [21..21] Clock Divider Output State.                                      */
      __IOM uint32_t DIV        : 10;           /*!< [31..22] Current Clock Divider Count.                                     */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A0) Module Status                                              */
    
    struct {
      __IOM uint32_t C0CCI      : 1;            /*!< [0..0] Channel 0 Capture/Compare Interrupt Flag.                          */
      __IOM uint32_t C1CCI      : 1;            /*!< [1..1] Channel 1 Capture/Compare Interrupt Flag.                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t RUN        : 1;            /*!< [6..6] Counter/Timer Run.                                                 */
      __IOM uint32_t OVFI       : 1;            /*!< [7..7] Counter/Timer Overflow/Limit Interrupt Flag.                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t C0IOVFI    : 1;            /*!< [10..10] Channel 0 Intermediate Overflow Interrupt Flag.                  */
      __IOM uint32_t C1IOVFI    : 1;            /*!< [11..11] Channel 1 Intermediate Overflow Interrupt Flag.                  */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001B0) Module Counter/Timer                                       */
    
    struct {
      __IOM uint32_t COUNTER    : 16;           /*!< [15..0] Counter/Timer.                                                    */
    } bit;
  } COUNTER;
  __IM  uint32_t  RESERVED11[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001C0) Module Counter/Timer Upper Limit                           */
    
    struct {
      __IOM uint32_t LIMIT      : 16;           /*!< [15..0] Upper Limit.                                                      */
    } bit;
  } LIMIT;
} PCA_0_Type;                                   /*!< Size = 452 (0x1c4)                                                        */



/* =========================================================================================================================== */
/* ================                                           PCA_1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PCA_1)
  */

typedef struct {                                /*!< (@ 0x40010000) PCA_1 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_0;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
    } bit;
  } CONTROL_0;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_0;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_0;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Channel Capture/Compare Mode                               */
    
    struct {
      __IOM uint32_t COSEL      : 2;            /*!< [1..0] Channel Output Function Select.                                    */
      __IOM uint32_t PWMMD      : 4;            /*!< [5..2] PWM N-Bit Mode.                                                    */
      __IM  uint32_t            : 2;
      __IOM uint32_t CMD        : 3;            /*!< [10..8] Channel Operating Mode.                                           */
    } bit;
  } MODE_1;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Channel Capture/Compare Control                            */
    
    struct {
      __IOM uint32_t COUTST     : 1;            /*!< [0..0] Channel Output State.                                              */
      __IOM uint32_t CPCAPEN    : 1;            /*!< [1..1] Positive Edge Input Capture Enable.                                */
      __IOM uint32_t CNCAPEN    : 1;            /*!< [2..2] Negative Edge Input Capture Enable.                                */
      __IOM uint32_t CUPDCF     : 1;            /*!< [3..3] Channel Register Update Complete Flag.                             */
      __IM  uint32_t            : 4;
      __IOM uint32_t CCIEN      : 1;            /*!< [8..8] Capture/Compare Interrupt Enable.                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t CIOVFIEN   : 1;            /*!< [11..11] Intermediate Overflow Interrupt Enable.                          */
    } bit;
  } CONTROL_1;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Channel Compare Value                                      */
    
    struct {
      __IOM uint32_t CCAPV      : 18;           /*!< [17..0] Channel Compare Value.                                            */
    } bit;
  } CCAPV_1;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Channel Compare Update Value                               */
    
    struct {
      __IOM uint32_t CCAPVUPD   : 18;           /*!< [17..0] Channel Compare Update Value.                                     */
    } bit;
  } CCAPVUPD_1;
  __IM  uint32_t  RESERVED7[67];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000180) Module Operating Mode                                      */
    
    struct {
      __IOM uint32_t CLKDIV     : 10;           /*!< [9..0] Input Clock Divisor.                                               */
      __IOM uint32_t CLKSEL     : 3;            /*!< [12..10] Input Clock (F<subscript>CLKIN</subscript>) Select.              */
    } bit;
  } MODE;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000190) Module Control                                             */
    
    struct {
      __IOM uint32_t OVFIEN     : 1;            /*!< [0..0] PCA Counter Overflow/Limit Interrupt Enable.                       */
      __IM  uint32_t            : 5;
      __IOM uint32_t DBGMD      : 1;            /*!< [6..6] PCA Debug Mode.                                                    */
      __IM  uint32_t            : 14;
      __IOM uint32_t DIVST      : 1;            /*!< [21..21] Clock Divider Output State.                                      */
      __IOM uint32_t DIV        : 10;           /*!< [31..22] Current Clock Divider Count.                                     */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A0) Module Status                                              */
    
    struct {
      __IOM uint32_t C0CCI      : 1;            /*!< [0..0] Channel 0 Capture/Compare Interrupt Flag.                          */
      __IOM uint32_t C1CCI      : 1;            /*!< [1..1] Channel 1 Capture/Compare Interrupt Flag.                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t RUN        : 1;            /*!< [6..6] Counter/Timer Run.                                                 */
      __IOM uint32_t OVFI       : 1;            /*!< [7..7] Counter/Timer Overflow/Limit Interrupt Flag.                       */
      __IM  uint32_t            : 2;
      __IOM uint32_t C0IOVFI    : 1;            /*!< [10..10] Channel 0 Intermediate Overflow Interrupt Flag.                  */
      __IOM uint32_t C1IOVFI    : 1;            /*!< [11..11] Channel 1 Intermediate Overflow Interrupt Flag.                  */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001B0) Module Counter/Timer                                       */
    
    struct {
      __IOM uint32_t COUNTER    : 16;           /*!< [15..0] Counter/Timer.                                                    */
    } bit;
  } COUNTER;
  __IM  uint32_t  RESERVED11[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001C0) Module Counter/Timer Upper Limit                           */
    
    struct {
      __IOM uint32_t LIMIT      : 16;           /*!< [15..0] Upper Limit.                                                      */
    } bit;
  } LIMIT;
} PCA_1_Type;                                   /*!< Size = 452 (0x1c4)                                                        */



/* =========================================================================================================================== */
/* ================                                           PMU_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PMU_0)
  */

typedef struct {                                /*!< (@ 0x40048000) PMU_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __OM  uint32_t WAKECLR    : 1;            /*!< [0..0] Wakeup Source Clear.                                               */
      __IOM uint32_t PERILPEN   : 1;            /*!< [1..1] Peripheral Low Power Enable.                                       */
      __IOM uint32_t PINLPEN    : 1;            /*!< [2..2] Pin Low Power Enable.                                              */
      __IOM uint32_t PWAKEEN    : 1;            /*!< [3..3] Pin Wake Match Enable.                                             */
      __IOM uint32_t PMUASLPEN  : 1;            /*!< [4..4] PMU Asleep Pin Enable.                                             */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Configuration                                       */
    
    struct {
      __IM  uint32_t            : 8;
      __IOM uint32_t RTC0FREN   : 1;            /*!< [8..8] RTC0 Fail RTC0/LPTIMER0 Reset Enable.                              */
      __IOM uint32_t RTC0AREN   : 1;            /*!< [9..9] RTC0 Alarm RTC0/LPTIMER0 Reset Enable.                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t CMP0REN    : 1;            /*!< [13..13] Comparator 0 RTC0/LPTIMER0 Reset Enable.                         */
      __IOM uint32_t PWAKEREN   : 1;            /*!< [14..14] Pin Wake RTC0/LPTIMER0 Reset Enable.                             */
      __IOM uint32_t LPT0REN    : 1;            /*!< [15..15] Low Power Timer RTC0/LPTIMER0 Reset Enable.                      */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Module Status                                              */
    
    struct {
      __IOM uint32_t PM9EF      : 1;            /*!< [0..0] Power Mode 9 Exited Flag.                                          */
      __IM  uint32_t PWAKEF     : 1;            /*!< [1..1] Pin Wake Status Flag.                                              */
      __IOM uint32_t PORF       : 1;            /*!< [2..2] Power-On Reset Flag.                                               */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Wake Source Enable                                         */
    
    struct {
      __IOM uint32_t RTC0FWEN   : 1;            /*!< [0..0] RTC0 Fail Wake Enable.                                             */
      __IOM uint32_t RTC0AWEN   : 1;            /*!< [1..1] RTC0 Alarm Wake Enable.                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t CMP0WEN    : 1;            /*!< [5..5] Comparator 0 Wake Enable.                                          */
      __IOM uint32_t PWAKEWEN   : 1;            /*!< [6..6] Pin Wake Wake Enable.                                              */
      __IOM uint32_t LPT0WEN    : 1;            /*!< [7..7] Low Power Timer Wake Enable.                                       */
      __IOM uint32_t RSTWEN     : 1;            /*!< [8..8] Reset Pin Wake Enable.                                             */
    } bit;
  } WAKEEN;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Wake Source Status                                         */
    
    struct {
      __IM  uint32_t RTC0FWF    : 1;            /*!< [0..0] RTC0 Fail Wake Flag.                                               */
      __IM  uint32_t RTC0AWF    : 1;            /*!< [1..1] RTC0 Alarm Wake Flag.                                              */
      __IM  uint32_t            : 3;
      __IM  uint32_t CMP0WF     : 1;            /*!< [5..5] Comparator 0 Wake Flag.                                            */
      __IM  uint32_t PWAKEWF    : 1;            /*!< [6..6] Pin Wake Wake Flag.                                                */
      __IM  uint32_t LPT0WF     : 1;            /*!< [7..7] Low Power Timer Wake Flag.                                         */
      __IM  uint32_t RSTWF      : 1;            /*!< [8..8] Reset Pin Wake Flag.                                               */
    } bit;
  } WAKESTATUS;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Pin Wake Pin Enable                                        */
    
    struct {
      __IOM uint32_t PW0EN      : 1;            /*!< [0..0] WAKE.0 Enable.                                                     */
      __IOM uint32_t PW1EN      : 1;            /*!< [1..1] WAKE.1 Enable.                                                     */
      __IOM uint32_t PW2EN      : 1;            /*!< [2..2] WAKE.2 Enable.                                                     */
      __IOM uint32_t PW3EN      : 1;            /*!< [3..3] WAKE.3 Enable.                                                     */
      __IOM uint32_t PW4EN      : 1;            /*!< [4..4] WAKE.4 Enable.                                                     */
      __IOM uint32_t PW5EN      : 1;            /*!< [5..5] WAKE.5 Enable.                                                     */
      __IOM uint32_t PW6EN      : 1;            /*!< [6..6] WAKE.6 Enable.                                                     */
      __IOM uint32_t PW7EN      : 1;            /*!< [7..7] WAKE.7 Enable.                                                     */
      __IOM uint32_t PW8EN      : 1;            /*!< [8..8] WAKE.8 Enable.                                                     */
      __IOM uint32_t PW9EN      : 1;            /*!< [9..9] WAKE.9 Enable.                                                     */
      __IOM uint32_t PW10EN     : 1;            /*!< [10..10] WAKE.10 Enable.                                                  */
      __IOM uint32_t PW11EN     : 1;            /*!< [11..11] WAKE.11 Enable.                                                  */
      __IOM uint32_t PW12EN     : 1;            /*!< [12..12] WAKE.12 Enable.                                                  */
      __IOM uint32_t PW13EN     : 1;            /*!< [13..13] WAKE.13 Enable.                                                  */
      __IOM uint32_t PW14EN     : 1;            /*!< [14..14] WAKE.14 Enable.                                                  */
      __IOM uint32_t PW15EN     : 1;            /*!< [15..15] WAKE.15 Enable.                                                  */
    } bit;
  } PWEN;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Pin Wake Pin Polarity Select                               */
    
    struct {
      __IOM uint32_t PW0POL     : 1;            /*!< [0..0] WAKE.0 Polarity Select.                                            */
      __IOM uint32_t PW1POL     : 1;            /*!< [1..1] WAKE.1 Polarity Select.                                            */
      __IOM uint32_t PW2POL     : 1;            /*!< [2..2] WAKE.2 Polarity Select.                                            */
      __IOM uint32_t PW3POL     : 1;            /*!< [3..3] WAKE.3 Polarity Select.                                            */
      __IOM uint32_t PW4POL     : 1;            /*!< [4..4] WAKE.4 Polarity Select.                                            */
      __IOM uint32_t PW5POL     : 1;            /*!< [5..5] WAKE.5 Polarity Select.                                            */
      __IOM uint32_t PW6POL     : 1;            /*!< [6..6] WAKE.6 Polarity Select.                                            */
      __IOM uint32_t PW7POL     : 1;            /*!< [7..7] WAKE.7 Polarity Select.                                            */
      __IOM uint32_t PW8POL     : 1;            /*!< [8..8] WAKE.8 Polarity Select.                                            */
      __IOM uint32_t PW9POL     : 1;            /*!< [9..9] WAKE.9 Polarity Select.                                            */
      __IOM uint32_t PW10POL    : 1;            /*!< [10..10] WAKE.10 Polarity Select.                                         */
      __IOM uint32_t PW11POL    : 1;            /*!< [11..11] WAKE.11 Polarity Select.                                         */
      __IOM uint32_t PW12POL    : 1;            /*!< [12..12] WAKE.12 Polarity Select.                                         */
      __IOM uint32_t PW13POL    : 1;            /*!< [13..13] WAKE.13 Polarity Select.                                         */
      __IOM uint32_t PW14POL    : 1;            /*!< [14..14] WAKE.14 Polarity Select.                                         */
      __IOM uint32_t PW15POL    : 1;            /*!< [15..15] WAKE.15 Polarity Select.                                         */
    } bit;
  } PWPOL;
} PMU_0_Type;                                   /*!< Size = 100 (0x64)                                                         */



/* =========================================================================================================================== */
/* ================                                          PBCFG_0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PBCFG_0)
  */

typedef struct {                                /*!< (@ 0x4002A000) PBCFG_0 Structure                                          */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Global Port Control 0                                      */
    
    struct {
      __IOM uint32_t INT0SEL    : 4;            /*!< [3..0] External Interrupt 0 Pin Selection.                                */
      __IOM uint32_t INT0POL    : 1;            /*!< [4..4] External Interrupt 0 Polarity.                                     */
      __IOM uint32_t INT0MD     : 1;            /*!< [5..5] External Interrupt 0 Mode.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t INT0EN     : 1;            /*!< [7..7] External Interrupt 0 Enable.                                       */
      __IOM uint32_t INT1SEL    : 4;            /*!< [11..8] External Interrupt 1 Pin Selection.                               */
      __IOM uint32_t INT1POL    : 1;            /*!< [12..12] External Interrupt 1 Polarity.                                   */
      __IOM uint32_t INT1MD     : 1;            /*!< [13..13] External Interrupt 1 Mode.                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t INT1EN     : 1;            /*!< [15..15] External Interrupt 1 Enable.                                     */
      __IM  uint32_t            : 8;
      __IOM uint32_t PGTIMER    : 5;            /*!< [28..24] Pulse Generator Timer.                                           */
      __IM  uint32_t            : 2;
      __IM  uint32_t PGDONEF    : 1;            /*!< [31..31] Pulse Generator Timer Done Flag.                                 */
    } bit;
  } CONTROL0;
  __IOM uint32_t  CONTROL0_SET;                 /*!< (@ 0x00000004) CONTROL0_SET                                               */
  __IOM uint32_t  CONTROL0_CLR;                 /*!< (@ 0x00000008) CONTROL0_CLR                                               */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Global Port Control 1                                      */
    
    struct {
      __IOM uint32_t JTAGEN     : 1;            /*!< [0..0] JTAG Enable.                                                       */
      __IOM uint32_t ETMEN      : 1;            /*!< [1..1] ETM Enable.                                                        */
      __IM  uint32_t            : 5;
      __IOM uint32_t EMIFBE0BEN : 1;            /*!< [7..7] EMIF <overline>BE0</overline> Pin Enable.                          */
      __IOM uint32_t EMIFCS1EN  : 1;            /*!< [8..8] EMIF CS1 Pin Enable.                                               */
      __IOM uint32_t EMIFEN     : 1;            /*!< [9..9] EMIF Enable.                                                       */
      __IOM uint32_t EMIFWIDTH  : 6;            /*!< [15..10] EMIF Width.                                                      */
      __IOM uint32_t MATMD      : 2;            /*!< [17..16] Match Mode.                                                      */
      __IM  uint32_t            : 5;
      __IOM uint32_t EVREGRMD   : 1;            /*!< [23..23] External Regulator Reset Mode.                                   */
      __IM  uint32_t            : 7;
      __IOM uint32_t LOCK       : 1;            /*!< [31..31] Port Bank Configuration Lock.                                    */
    } bit;
  } CONTROL1;
  __IOM uint32_t  CONTROL1_SET;                 /*!< (@ 0x00000014) CONTROL1_SET                                               */
  __IOM uint32_t  CONTROL1_CLR;                 /*!< (@ 0x00000018) CONTROL1_CLR                                               */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Crossbar 0 Control (Low)                                   */
    
    struct {
      __IOM uint32_t USART0EN   : 1;            /*!< [0..0] USART0 Enable.                                                     */
      __IOM uint32_t USART0FCEN : 1;            /*!< [1..1] USART0 Flow Control Enable.                                        */
      __IOM uint32_t USART0CEN  : 1;            /*!< [2..2] USART0 Clock Signal Enable.                                        */
      __IOM uint32_t SPI0EN     : 1;            /*!< [3..3] SPI0 Enable.                                                       */
      __IOM uint32_t SPI0NSSEN  : 1;            /*!< [4..4] SPI0 NSS Pin Enable.                                               */
      __IOM uint32_t USART1EN   : 1;            /*!< [5..5] USART1 Enable.                                                     */
      __IOM uint32_t USART1FCEN : 1;            /*!< [6..6] USART1 Flow Control Enable.                                        */
      __IOM uint32_t USART1CEN  : 1;            /*!< [7..7] USART1 Clock Signal Enable.                                        */
      __IOM uint32_t EPCA0EN    : 3;            /*!< [10..8] EPCA0 Channel Enable.                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t PCA0EN     : 2;            /*!< [15..14] PCA0 Channel Enable.                                             */
      __IOM uint32_t PCA1EN     : 2;            /*!< [17..16] PCA1 Channel Enable.                                             */
      __IOM uint32_t EECI0EN    : 1;            /*!< [18..18] EPCA0 ECI Enable.                                                */
      __IOM uint32_t ECI0EN     : 1;            /*!< [19..19] PCA0 ECI Enable.                                                 */
      __IOM uint32_t ECI1EN     : 1;            /*!< [20..20] PCA1 ECI Enable.                                                 */
      __IOM uint32_t I2S0TXEN   : 1;            /*!< [21..21] I2S0 TX Enable.                                                  */
      __IOM uint32_t I2C0EN     : 1;            /*!< [22..22] I2C0 Enable.                                                     */
      __IOM uint32_t CMP0SEN    : 1;            /*!< [23..23] Comparator 0 Synchronous Output (CMP0S) Enable.                  */
      __IOM uint32_t CMP0AEN    : 1;            /*!< [24..24] Comparator 0 Asynchronous Output (CMP0A) Enable.                 */
      __IOM uint32_t CMP1SEN    : 1;            /*!< [25..25] Comparator 1 Synchronous Output (CMP1S) Enable.                  */
      __IOM uint32_t CMP1AEN    : 1;            /*!< [26..26] Comparator 1 Asynchronous Output (CMP1A) Enable.                 */
      __IOM uint32_t TMR0CTEN   : 1;            /*!< [27..27] TIMER0 T0CT Enable.                                              */
      __IOM uint32_t TMR0EXEN   : 1;            /*!< [28..28] TIMER0 T0EX Enable.                                              */
      __IOM uint32_t TMR1CTEN   : 1;            /*!< [29..29] TIMER1 T1CT Enable.                                              */
      __IOM uint32_t TMR1EXEN   : 1;            /*!< [30..30] TIMER1 T1EX Enable.                                              */
    } bit;
  } XBAR0L;
  __IOM uint32_t  XBAR0L_SET;                   /*!< (@ 0x00000024) XBAR0L_SET                                                 */
  __IOM uint32_t  XBAR0L_CLR;                   /*!< (@ 0x00000028) XBAR0L_CLR                                                 */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Crossbar 0 Control (High)                                  */
    
    struct {
      __IOM uint32_t UART0EN    : 1;            /*!< [0..0] UART0 Enable.                                                      */
      __IOM uint32_t UART0FCEN  : 1;            /*!< [1..1] UART0 Flow Control Enable.                                         */
      __IOM uint32_t UART1EN    : 1;            /*!< [2..2] UART1 Enable.                                                      */
      __IOM uint32_t SPI1EN     : 1;            /*!< [3..3] SPI1 Enable.                                                       */
      __IOM uint32_t SPI1NSSEN  : 1;            /*!< [4..4] SPI1 NSS Pin Enable.                                               */
      __IOM uint32_t SPI2EN     : 1;            /*!< [5..5] SPI2 Enable.                                                       */
      __IOM uint32_t SPI2NSSEN  : 1;            /*!< [6..6] SPI2 NSS Pin Enable.                                               */
      __IOM uint32_t AHBEN      : 1;            /*!< [7..7] AHB Clock Output Enable.                                           */
      __IM  uint32_t            : 23;
      __IOM uint32_t XBAR0EN    : 1;            /*!< [31..31] Crossbar 0 Enable.                                               */
    } bit;
  } XBAR0H;
  __IOM uint32_t  XBAR0H_SET;                   /*!< (@ 0x00000034) XBAR0H_SET                                                 */
  __IOM uint32_t  XBAR0H_CLR;                   /*!< (@ 0x00000038) XBAR0H_CLR                                                 */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Crossbar 1 Control                                         */
    
    struct {
      __IOM uint32_t SSG0EN     : 2;            /*!< [1..0] SSG0 Enable.                                                       */
      __IOM uint32_t CMP0SEN    : 1;            /*!< [2..2] Comparator 0 Synchronous Output (CMP0S) Enable.                    */
      __IOM uint32_t CMP1SEN    : 1;            /*!< [3..3] Comparator 1 Synchronous Output (CMP1S) Enable.                    */
      __IOM uint32_t SPI1EN     : 1;            /*!< [4..4] SPI1 Enable.                                                       */
      __IOM uint32_t SPI1NSSEN  : 1;            /*!< [5..5] SPI1 NSS Pin Enable.                                               */
      __IOM uint32_t RTC0EN     : 1;            /*!< [6..6] RTC0 Output Enable.                                                */
      __IOM uint32_t SPI2EN     : 1;            /*!< [7..7] SPI2 Enable.                                                       */
      __IOM uint32_t SPI2NSSEN  : 1;            /*!< [8..8] SPI2 NSS Pin Enable.                                               */
      __IOM uint32_t USART1EN   : 1;            /*!< [9..9] USART1 Enable.                                                     */
      __IOM uint32_t USART1FCEN : 1;            /*!< [10..10] USART1 Flow Control Enable.                                      */
      __IOM uint32_t USART1CEN  : 1;            /*!< [11..11] USART1 Clock Signal Enable.                                      */
      __IOM uint32_t UART0EN    : 1;            /*!< [12..12] UART0 Enable.                                                    */
      __IOM uint32_t UART0FCEN  : 1;            /*!< [13..13] UART0 Flow Control Enable.                                       */
      __IOM uint32_t I2S0TXEN   : 1;            /*!< [14..14] I2S0 TX Enable.                                                  */
      __IOM uint32_t I2C0EN     : 1;            /*!< [15..15] I2C0 Enable.                                                     */
      __IOM uint32_t UART1EN    : 1;            /*!< [16..16] UART1 Enable.                                                    */
      __IOM uint32_t I2S0RXEN   : 1;            /*!< [17..17] I2S0 RX Enable.                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t LPT0OEN    : 1;            /*!< [19..19] LPTIMER0 Output Enable.                                          */
      __IOM uint32_t I2C1EN     : 1;            /*!< [20..20] I2C1 Enable.                                                     */
      __IOM uint32_t KILLHDEN   : 1;            /*!< [21..21] High Drive Kill Pin Enable.                                      */
      __IM  uint32_t            : 9;
      __IOM uint32_t XBAR1EN    : 1;            /*!< [31..31] Crossbar 1 Enable.                                               */
    } bit;
  } XBAR1;
  __IOM uint32_t  XBAR1_SET;                    /*!< (@ 0x00000044) XBAR1_SET                                                  */
  __IOM uint32_t  XBAR1_CLR;                    /*!< (@ 0x00000048) XBAR1_CLR                                                  */
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Global Port Key                                            */
    
    struct {
      __IOM uint32_t KEY        : 8;            /*!< [7..0] Port Bank 2, 3, and 4 Key.                                         */
    } bit;
  } PBKEY;
} PBCFG_0_Type;                                 /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                          PBHD_4                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PBHD_4)
  */

typedef struct {                                /*!< (@ 0x4002A3C0) PBHD_4 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Output Latch                                               */
    
    struct {
      __IOM uint32_t PB         : 6;            /*!< [5..0] Output Latch.                                                      */
    } bit;
  } PB;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Pin Value                                                  */
    
    struct {
      __IM  uint32_t PBPIN      : 6;            /*!< [5..0] Pin Value.                                                         */
    } bit;
  } PBPIN;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Mode Select                                                */
    
    struct {
      __IOM uint32_t PBMDSEL    : 6;            /*!< [5..0] Mode Select.                                                       */
    } bit;
  } PBMDSEL;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Driver Enable                                              */
    
    struct {
      __IOM uint32_t PBNDEN     : 6;            /*!< [5..0] Port Bank N-Channel Driver Enable.                                 */
      __IM  uint32_t            : 10;
      __IOM uint32_t PBPDEN     : 6;            /*!< [21..16] Port Bank P-Channel Driver Enable.                               */
    } bit;
  } PBDEN;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Drive Strength                                             */
    
    struct {
      __IOM uint32_t PBDRV      : 6;            /*!< [5..0] Drive Strength.                                                    */
      __IM  uint32_t            : 10;
      __IOM uint32_t PBPUEN     : 1;            /*!< [16..16] Port Bank Weak Pull-up Enable.                                   */
      __IOM uint32_t PBLVMD     : 1;            /*!< [17..17] Port Low Voltage Mode.                                           */
      __IOM uint32_t PBSLEW     : 2;            /*!< [19..18] Port Slew Control.                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t PBBIASEN   : 1;            /*!< [21..21] Port Bias Enable.                                                */
      __IOM uint32_t PBDRVEN    : 1;            /*!< [22..22] Port Drive Enable.                                               */
      __IOM uint32_t PBVTRKEN   : 1;            /*!< [23..23] Port Voltage Supply Tracking Enable.                             */
    } bit;
  } PBDRV;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Current Limit                                              */
    
    struct {
      __IOM uint32_t PBILEN     : 6;            /*!< [5..0] Current Limit Enable.                                              */
      __IM  uint32_t            : 10;
      __IOM uint32_t NILIMIT    : 4;            /*!< [19..16] N-Channel Current Limit.                                         */
      __IOM uint32_t PILIMIT    : 4;            /*!< [23..20] P-Channel Current Limit.                                         */
    } bit;
  } PBILIMIT;
  __IM  uint32_t  RESERVED5[7];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Function Select                                            */
    
    struct {
      __IOM uint32_t PB0SEL     : 2;            /*!< [1..0] Port Bank n.0 Function Select.                                     */
      __IOM uint32_t PB1SEL     : 2;            /*!< [3..2] Port Bank n.1 Function Select.                                     */
      __IOM uint32_t PB2SEL     : 2;            /*!< [5..4] Port Bank n.2 Function Select.                                     */
      __IOM uint32_t PB3SEL     : 2;            /*!< [7..6] Port Bank n.3 Function Select.                                     */
      __IOM uint32_t PB4SEL     : 2;            /*!< [9..8] Port Bank n.4 Function Select.                                     */
      __IOM uint32_t PB5SEL     : 3;            /*!< [12..10] Port Bank n.5 Function Select.                                   */
    } bit;
  } PBFSEL;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Safe State Control                                         */
    
    struct {
      __IOM uint32_t PB0SSSEL   : 2;            /*!< [1..0] Port Bank n.0 Safe State Select.                                   */
      __IOM uint32_t PB1SSSEL   : 2;            /*!< [3..2] Port Bank n.1 Safe State Select.                                   */
      __IOM uint32_t PB2SSSEL   : 2;            /*!< [5..4] Port Bank n.2 Safe State Select.                                   */
      __IOM uint32_t PB3SSSEL   : 2;            /*!< [7..6] Port Bank n.3 Safe State Select.                                   */
      __IOM uint32_t PB4SSSEL   : 2;            /*!< [9..8] Port Bank n.4 Safe State Select.                                   */
      __IOM uint32_t PB5SSSEL   : 2;            /*!< [11..10] Port Bank n.5 Safe State Select.                                 */
      __IM  uint32_t            : 4;
      __IOM uint32_t SSMDEN     : 1;            /*!< [16..16] Enter Safe State Mode.                                           */
      __IOM uint32_t PBSSSMD    : 1;            /*!< [17..17] Safe State Signal Mode.                                          */
    } bit;
  } PBSS;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Lock Control                                               */
    
    struct {
      __IOM uint32_t PBLOCK     : 6;            /*!< [5..0] Port Bank Lock.                                                    */
    } bit;
  } PBLOCK;
} PBHD_4_Type;                                  /*!< Size = 148 (0x94)                                                         */



/* =========================================================================================================================== */
/* ================                                          PBSTD_0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (PBSTD_0)
  */

typedef struct {                                /*!< (@ 0x4002A0A0) PBSTD_0 Structure                                          */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Output Latch                                               */
    
    struct {
      __IOM uint32_t PB         : 16;           /*!< [15..0] Output Latch.                                                     */
    } bit;
  } PB;
  __IOM uint32_t  PB_SET;                       /*!< (@ 0x00000004) PB_SET                                                     */
  __IOM uint32_t  PB_CLR;                       /*!< (@ 0x00000008) PB_CLR                                                     */
  __IOM uint32_t  PB_MSK;                       /*!< (@ 0x0000000C) PB_MSK                                                     */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Pin Value                                                  */
    
    struct {
      __IM  uint32_t PBPIN      : 16;           /*!< [15..0] Pin Value.                                                        */
    } bit;
  } PBPIN;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Mode Select                                                */
    
    struct {
      __IOM uint32_t PBMDSEL    : 16;           /*!< [15..0] Mode Select.                                                      */
    } bit;
  } PBMDSEL;
  __IOM uint32_t  PBMDSEL_SET;                  /*!< (@ 0x00000024) PBMDSEL_SET                                                */
  __IOM uint32_t  PBMDSEL_CLR;                  /*!< (@ 0x00000028) PBMDSEL_CLR                                                */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Crossbar Pin Skip Enable                                   */
    
    struct {
      __IOM uint32_t PBSKIPEN   : 16;           /*!< [15..0] Crossbar Pin Skip Enable.                                         */
    } bit;
  } PBSKIPEN;
  __IOM uint32_t  PBSKIPEN_SET;                 /*!< (@ 0x00000034) PBSKIPEN_SET                                               */
  __IOM uint32_t  PBSKIPEN_CLR;                 /*!< (@ 0x00000038) PBSKIPEN_CLR                                               */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Output Mode                                                */
    
    struct {
      __IOM uint32_t PBOUTMD    : 16;           /*!< [15..0] Output Mode.                                                      */
    } bit;
  } PBOUTMD;
  __IOM uint32_t  PBOUTMD_SET;                  /*!< (@ 0x00000044) PBOUTMD_SET                                                */
  __IOM uint32_t  PBOUTMD_CLR;                  /*!< (@ 0x00000048) PBOUTMD_CLR                                                */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Drive Strength                                             */
    
    struct {
      __IOM uint32_t PBDRV      : 16;           /*!< [15..0] Drive Strength.                                                   */
      __IOM uint32_t PBPUEN     : 1;            /*!< [16..16] Port Bank Weak Pull-up Enable.                                   */
    } bit;
  } PBDRV;
  __IOM uint32_t  PBDRV_SET;                    /*!< (@ 0x00000054) PBDRV_SET                                                  */
  __IOM uint32_t  PBDRV_CLR;                    /*!< (@ 0x00000058) PBDRV_CLR                                                  */
  __IM  uint32_t  RESERVED4;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Port Match Value                                           */
    
    struct {
      __IOM uint32_t PM         : 16;           /*!< [15..0] Port Match Value.                                                 */
    } bit;
  } PM;
  __IOM uint32_t  PM_SET;                       /*!< (@ 0x00000064) PM_SET                                                     */
  __IOM uint32_t  PM_CLR;                       /*!< (@ 0x00000068) PM_CLR                                                     */
  __IM  uint32_t  RESERVED5;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Port Match Enable                                          */
    
    struct {
      __IOM uint32_t PMEN       : 16;           /*!< [15..0] Port Match Enable.                                                */
    } bit;
  } PMEN;
  __IOM uint32_t  PMEN_SET;                     /*!< (@ 0x00000074) PMEN_SET                                                   */
  __IOM uint32_t  PMEN_CLR;                     /*!< (@ 0x00000078) PMEN_CLR                                                   */
  __IM  uint32_t  RESERVED6;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Lock Control                                               */
    
    struct {
      __IOM uint32_t PBLOCK     : 16;           /*!< [15..0] Port Bank Lock.                                                   */
    } bit;
  } PBLOCK;
  __IM  uint32_t  RESERVED7[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Pulse Generator Pin Enable                                 */
    
    struct {
      __IOM uint32_t PBPGEN     : 16;           /*!< [15..0] Pulse Generator Pin Enable.                                       */
    } bit;
  } PBPGEN;
  __IM  uint32_t  RESERVED8[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Pulse Generator Phase                                      */
    
    struct {
      __IOM uint32_t PBPGPH0    : 16;           /*!< [15..0] Pulse Generator Phase 0.                                          */
      __IOM uint32_t PBPGPH1    : 16;           /*!< [31..16] Pulse Generator Phase 1.                                         */
    } bit;
  } PBPGPHASE;
} PBSTD_Type;                                   /*!< Size = 164 (0xa4)                                                         */



/* =========================================================================================================================== */
/* ================                                           RTC_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (RTC_0)
  */

typedef struct {                                /*!< (@ 0x40029000) RTC_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) RTC Configuration                                          */
    
    struct {
      __IOM uint32_t ALM0AREN   : 1;            /*!< [0..0] Alarm 0 Automatic Reset Enable.                                    */
      __IOM uint32_t RUN        : 1;            /*!< [1..1] RTC Timer Enable.                                                  */
      __IOM uint32_t MCLKEN     : 1;            /*!< [2..2] Missing Clock Detector Enable.                                     */
      __IOM uint32_t ASEN       : 1;            /*!< [3..3] Automatic Crystal Load Capacitance Stepping Enable.                */
      __IOM uint32_t RTCLC      : 4;            /*!< [7..4] Load Capacitance Value.                                            */
      __IM  uint32_t            : 8;
      __IOM uint32_t BDEN       : 1;            /*!< [16..16] Bias Doubler Enable.                                             */
      __IOM uint32_t CRYSEN     : 1;            /*!< [17..17] Crystal Oscillator Enable.                                       */
      __IOM uint32_t AGCEN      : 1;            /*!< [18..18] Automatic Gain Control Enable.                                   */
      __IM  uint32_t            : 5;
      __IOM uint32_t ALM0EN     : 1;            /*!< [24..24] Alarm 0 Enable.                                                  */
      __IOM uint32_t ALM1EN     : 1;            /*!< [25..25] Alarm 1 Enable.                                                  */
      __IOM uint32_t ALM2EN     : 1;            /*!< [26..26] Alarm 2 Enable.                                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t RTCOEN     : 1;            /*!< [29..29] RTC0 External Output Enable.                                     */
      __IOM uint32_t CLKSEL     : 1;            /*!< [30..30] RTC Timer Clock Select.                                          */
      __IOM uint32_t RTCEN      : 1;            /*!< [31..31] RTC Oscillator and Timer Enable.                                 */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) RTC Control                                                */
    
    struct {
      __IOM uint32_t ALM0I      : 1;            /*!< [0..0] Alarm 0 Interrupt Flag.                                            */
      __IOM uint32_t ALM1I      : 1;            /*!< [1..1] Alarm 1 Interrupt Flag.                                            */
      __IOM uint32_t ALM2I      : 1;            /*!< [2..2] Alarm 2 Interrupt Flag.                                            */
      __IOM uint32_t TMRCAP     : 1;            /*!< [3..3] RTC Timer Capture.                                                 */
      __IOM uint32_t TMRSET     : 1;            /*!< [4..4] RTC Timer Set.                                                     */
      __IM  uint32_t CLKVF      : 1;            /*!< [5..5] RTC External Oscillator Valid Flag.                                */
      __IOM uint32_t OSCFI      : 1;            /*!< [6..6] RTC Oscillator Fail Interrupt Flag.                                */
      __IOM uint32_t HSMDEN     : 1;            /*!< [7..7] RTC High Speed Mode Enable.                                        */
      __IM  uint32_t LRDYF      : 1;            /*!< [8..8] RTC Load Capacitance Ready Flag.                                   */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) RTC Alarm 0                                                */
    
    struct {
      __IOM uint32_t ALARM0     : 32;           /*!< [31..0] RTC Alarm 0.                                                      */
    } bit;
  } ALARM0;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) RTC Alarm 1                                                */
    
    struct {
      __IOM uint32_t ALARM1     : 32;           /*!< [31..0] RTC Alarm 1.                                                      */
    } bit;
  } ALARM1;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) RTC Alarm 2                                                */
    
    struct {
      __IOM uint32_t ALARM2     : 32;           /*!< [31..0] RTC Alarm 2.                                                      */
    } bit;
  } ALARM2;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) RTC Timer Set/Capture Value                                */
    
    struct {
      __IOM uint32_t SETCAP     : 32;           /*!< [31..0] RTC Timer Set/Capture Value.                                      */
    } bit;
  } SETCAP;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) LFOSC Control                                              */
    
    struct {
      __IM  uint32_t            : 31;
      __IOM uint32_t LFOSCEN    : 1;            /*!< [31..31] Low Frequency Oscillator Enable.                                 */
    } bit;
  } LFOCONTROL;
  __IM  uint32_t  RESERVED6[7];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) LFOSC Output Frequency Adjust                              */
    
    struct {
      __IOM uint32_t LFOSCADJ   : 4;            /*!< [3..0] LFOSC Output Frequency Adjust.                                     */
    } bit;
  } LFOSCADJ;
} RTC_0_Type;                                   /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                         RSTSRC_0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (RSTSRC_0)
  */

typedef struct {                                /*!< (@ 0x4002D060) RSTSRC_0 Structure                                         */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) System Reset Source Enable                                 */
    
    struct {
      __IM  uint32_t            : 2;
      __IOM uint32_t VMONREN    : 1;            /*!< [2..2] Voltage Supply Monitor VDD Reset Enable.                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t MCDREN     : 1;            /*!< [4..4] Missing Clock Detector Reset Enable.                               */
      __IOM uint32_t WDTREN     : 1;            /*!< [5..5] Watchdog Timer Reset Enable.                                       */
      __IOM uint32_t SWREN      : 1;            /*!< [6..6] Software Reset.                                                    */
      __IOM uint32_t CMP0REN    : 1;            /*!< [7..7] Comparator 0 Reset Enable.                                         */
      __IOM uint32_t CMP1REN    : 1;            /*!< [8..8] Comparator 1 Reset Enable.                                         */
      __IOM uint32_t USB0REN    : 1;            /*!< [9..9] USB0 Reset Enable.                                                 */
      __IOM uint32_t RTC0REN    : 1;            /*!< [10..10] RTC0 Reset Enable.                                               */
      __IOM uint32_t WAKEREN    : 1;            /*!< [11..11] PMU Wakeup Reset Enable.                                         */
    } bit;
  } RESETEN;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) System Reset Flags                                         */
    
    struct {
      __IM  uint32_t PINRF      : 1;            /*!< [0..0] Pin Reset Flag.                                                    */
      __IM  uint32_t PORRF      : 1;            /*!< [1..1] Power-On Reset Flag.                                               */
      __IM  uint32_t VMONRF     : 1;            /*!< [2..2] Voltage Supply Monitor VDD Reset Flag.                             */
      __IM  uint32_t CORERF     : 1;            /*!< [3..3] Core Reset Flag.                                                   */
      __IM  uint32_t MCDRF      : 1;            /*!< [4..4] Missing Clock Detector Reset Flag.                                 */
      __IM  uint32_t WDTRF      : 1;            /*!< [5..5] Watchdog Timer Reset Flag.                                         */
      __IM  uint32_t SWRF       : 1;            /*!< [6..6] Software Reset Flag.                                               */
      __IM  uint32_t CMP0RF     : 1;            /*!< [7..7] Comparator 0 Reset Flag.                                           */
      __IM  uint32_t CMP1RF     : 1;            /*!< [8..8] Comparator 1 Reset Flag.                                           */
      __IM  uint32_t USB0RF     : 1;            /*!< [9..9] USB0 Reset Flag.                                                   */
      __IM  uint32_t RTC0RF     : 1;            /*!< [10..10] RTC0 Reset Flag.                                                 */
      __IM  uint32_t WAKERF     : 1;            /*!< [11..11] PMU Wakeup Reset Flag.                                           */
    } bit;
  } RESETFLAG;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Configuration Options                                      */
    
    struct {
      __IOM uint32_t PMSEL      : 1;            /*!< [0..0] Power Mode Select.                                                 */
    } bit;
  } CONFIG;
} RSTSRC_0_Type;                                /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (SPI_0)
  */

typedef struct {                                /*!< (@ 0x40004000) SPI_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Input/Output Data                                          */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] Input/Output Data.                                                */
    } bit;
  } DATA;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Control                                             */
    
    struct {
      __IM  uint32_t RFRQI      : 1;            /*!< [0..0] Receive FIFO Read Request Interrupt Flag.                          */
      __IOM uint32_t RFORI      : 1;            /*!< [1..1] Receive FIFO Overrun Interrupt Flag.                               */
      __IM  uint32_t TFRQI      : 1;            /*!< [2..2] Transmit FIFO Write Request Interrupt Flag.                        */
      __IOM uint32_t TFORI      : 1;            /*!< [3..3] Transmit FIFO Overrun Interrupt Flag.                              */
      __IM  uint32_t SLVSELI    : 1;            /*!< [4..4] Slave Selected Interrupt Flag.                                     */
      __IOM uint32_t MDFI       : 1;            /*!< [5..5] Mode Fault Interrupt Flag.                                         */
      __IOM uint32_t URI        : 1;            /*!< [6..6] Underrun Interrupt Flag.                                           */
      __IM  uint32_t SREI       : 1;            /*!< [7..7] Shift Register Empty Interrupt Flag.                               */
      __IOM uint32_t RFILI      : 1;            /*!< [8..8] Illegal Receive FIFO Access Interrupt Flag.                        */
      __IOM uint32_t TFILI      : 1;            /*!< [9..9] Illegal Transmit FIFO Access Interrupt Flag.                       */
      __IM  uint32_t            : 4;
      __IM  uint32_t NSSSTS     : 1;            /*!< [14..14] NSS Instantaneous Pin Status.                                    */
      __IM  uint32_t BUSYF      : 1;            /*!< [15..15] SPI Busy.                                                        */
      __IM  uint32_t RFCNT      : 4;            /*!< [19..16] Receive FIFO Counter.                                            */
      __IM  uint32_t TFCNT      : 4;            /*!< [23..20] Transmit FIFO Counter.                                           */
      __IOM uint32_t DBGMD      : 1;            /*!< [24..24] SPI Debug Mode.                                                  */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Module Configuration                                       */
    
    struct {
      __IOM uint32_t RFRQIEN    : 1;            /*!< [0..0] Receive FIFO Read Request Interrupt Enable.                        */
      __IOM uint32_t RFORIEN    : 1;            /*!< [1..1] Receive FIFO Overrun Interrupt Enable.                             */
      __IOM uint32_t TFRQIEN    : 1;            /*!< [2..2] Transmit FIFO Write Request Interrupt Enable.                      */
      __IOM uint32_t TFORIEN    : 1;            /*!< [3..3] Transmit FIFO Overrun Interrupt Enable.                            */
      __IOM uint32_t SLVSELIEN  : 1;            /*!< [4..4] Slave Selected Interrupt Enable.                                   */
      __IOM uint32_t MDFIEN     : 1;            /*!< [5..5] Mode Fault Interrupt Enable.                                       */
      __IOM uint32_t URIEN      : 1;            /*!< [6..6] Underrun Interrupt Enable.                                         */
      __IOM uint32_t SREIEN     : 1;            /*!< [7..7] Shift Register Empty Interrupt Enable.                             */
      __IOM uint32_t SPIEN      : 1;            /*!< [8..8] SPI Enable.                                                        */
      __IOM uint32_t MSTEN      : 1;            /*!< [9..9] Master Mode Enable.                                                */
      __IOM uint32_t CLKPOL     : 1;            /*!< [10..10] SPI Clock Polarity.                                              */
      __IOM uint32_t CLKPHA     : 1;            /*!< [11..11] SPI Clock Phase.                                                 */
      __IOM uint32_t NSSPOL     : 1;            /*!< [12..12] Slave Select Polarity Select.                                    */
      __IOM uint32_t DDIRSEL    : 1;            /*!< [13..13] Data Direction Select.                                           */
      __IOM uint32_t NSSMD      : 2;            /*!< [15..14] Slave Select Mode.                                               */
      __IOM uint32_t RFTH       : 2;            /*!< [17..16] Receive FIFO Threshold.                                          */
      __IOM uint32_t TFTH       : 2;            /*!< [19..18] Transmit FIFO Threshold.                                         */
      __IOM uint32_t DSIZE      : 4;            /*!< [23..20] Data Size.                                                       */
      __IOM uint32_t DMAEN      : 1;            /*!< [24..24] DMA Enable.                                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t RFIFOFL    : 1;            /*!< [29..29] Receive FIFO Flush.                                              */
      __IOM uint32_t TFIFOFL    : 1;            /*!< [30..30] Transmit FIFO Flush.                                             */
      __IOM uint32_t RESET      : 1;            /*!< [31..31] Module Soft Reset.                                               */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Module Clock Rate Control                                  */
    
    struct {
      __IOM uint32_t CLKDIV     : 16;           /*!< [15..0] Clock Divider.                                                    */
    } bit;
  } CLKRATE;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) FIFO Status                                                */
    
    struct {
      __IM  uint32_t RFRPTR     : 4;            /*!< [3..0] Receive FIFO Read Pointer.                                         */
      __IM  uint32_t RFWPTR     : 4;            /*!< [7..4] Receive FIFO Write Pointer.                                        */
      __IM  uint32_t TFRPTR     : 4;            /*!< [11..8] Transmit FIFO Read Pointer.                                       */
      __IM  uint32_t TFWPTR     : 4;            /*!< [15..12] Transmit FIFO Write Pointer.                                     */
    } bit;
  } FSTATUS;
} SPI_Type;                                     /*!< Size = 68 (0x44)                                                          */



/* =========================================================================================================================== */
/* ================                                           SSG_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (SSG_0)
  */

typedef struct {                                /*!< (@ 0x4001E000) SSG_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Configuration                                       */
    
    struct {
      __IOM uint32_t COUNT      : 12;           /*!< [11..0] Pulse Generator Counter.                                          */
      __IOM uint32_t SSEL       : 1;            /*!< [12..12] Speed Select.                                                    */
      __IOM uint32_t PHGFREN    : 1;            /*!< [13..13] Phase Generator Free-Run Enable.                                 */
      __IOM uint32_t PUGFREN    : 1;            /*!< [14..14] Pulse Generator Free-Run Enable.                                 */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Control                                             */
    
    struct {
      __IOM uint32_t EX0INVEN   : 1;            /*!< [0..0] Output 0 Invert Enable.                                            */
      __IOM uint32_t EX1INVEN   : 1;            /*!< [1..1] Output 1 Invert Enable.                                            */
      __IOM uint32_t EX2INVEN   : 1;            /*!< [2..2] Output 2 Invert Enable.                                            */
      __IOM uint32_t EX3INVEN   : 1;            /*!< [3..3] Output 3 Invert Enable.                                            */
      __IOM uint32_t EX0EN      : 1;            /*!< [4..4] Output 0 Enable.                                                   */
      __IOM uint32_t EX1EN      : 1;            /*!< [5..5] Output 1 Enable.                                                   */
      __IOM uint32_t EX2EN      : 1;            /*!< [6..6] Output 2 Enable.                                                   */
      __IOM uint32_t EX3EN      : 1;            /*!< [7..7] Output 3 Enable.                                                   */
      __IM  uint32_t STATUS     : 1;            /*!< [8..8] SSG Module Status.                                                 */
    } bit;
  } CONTROL;
} SSG_0_Type;                                   /*!< Size = 20 (0x14)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER_0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (TIMER_0)
  */

typedef struct {                                /*!< (@ 0x40014000) TIMER_0 Structure                                          */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) High and Low Timer Configuration                           */
    
    struct {
      __IOM uint32_t LCLK       : 2;            /*!< [1..0] Low Clock Source.                                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t LMSTREN    : 1;            /*!< [4..4] Low Run Master Enable.                                             */
      __IOM uint32_t SPLITEN    : 1;            /*!< [5..5] Split Mode Enable.                                                 */
      __IOM uint32_t LEXIEN     : 1;            /*!< [6..6] Low Timer Extra Interrupt Enable.                                  */
      __IOM uint32_t LOVFIEN    : 1;            /*!< [7..7] Low Timer Overflow Interrupt Enable.                               */
      __IOM uint32_t LMD        : 3;            /*!< [10..8] Low Timer Mode.                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSTATE     : 1;            /*!< [12..12] Low Multi Purpose State Indicator.                               */
      __IOM uint32_t LRUN       : 1;            /*!< [13..13] Run Control Low.                                                 */
      __IOM uint32_t LEXI       : 1;            /*!< [14..14] Low Timer Extra Interrupt Flag.                                  */
      __IOM uint32_t LOVFI      : 1;            /*!< [15..15] Low Timer Overflow Interrupt.                                    */
      __IOM uint32_t HCLK       : 2;            /*!< [17..16] High Clock Source.                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t MSTRUN     : 1;            /*!< [19..19] Master Run Control.                                              */
      __IOM uint32_t HMSTREN    : 1;            /*!< [20..20] High Master Enable.                                              */
      __IOM uint32_t DBGMD      : 1;            /*!< [21..21] Timer Debug Mode.                                                */
      __IOM uint32_t HEXIEN     : 1;            /*!< [22..22] High Timer Extra Interrupt Enable.                               */
      __IOM uint32_t HOVFIEN    : 1;            /*!< [23..23] High Timer Overflow Interrupt Enable.                            */
      __IOM uint32_t HMD        : 4;            /*!< [27..24] High Timer Mode.                                                 */
      __IOM uint32_t HSTATE     : 1;            /*!< [28..28] High Multi Purpose State Indicator.                              */
      __IOM uint32_t HRUN       : 1;            /*!< [29..29] High Run Control.                                                */
      __IOM uint32_t HEXI       : 1;            /*!< [30..30] High Timer Extra Interrupt Flag.                                 */
      __IOM uint32_t HOVFI      : 1;            /*!< [31..31] High Timer Overflow Interrupt Flag.                              */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Clock Divider Control                               */
    
    struct {
      __IOM uint32_t CLKDIVRL   : 8;            /*!< [7..0] Clock Divider Reload Value.                                        */
      __IM  uint32_t            : 8;
      __IOM uint32_t CLKDIVCT   : 8;            /*!< [23..16] Clock Divider Counter.                                           */
    } bit;
  } CLKDIV;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Timer Value                                                */
    
    struct {
      __IOM uint32_t LCOUNT     : 16;           /*!< [15..0] Low Timer Count.                                                  */
      __IOM uint32_t HCOUNT     : 16;           /*!< [31..16] High Timer Count.                                                */
    } bit;
  } COUNT;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Timer Capture/Reload Value                                 */
    
    struct {
      __IOM uint32_t LCCR       : 16;           /*!< [15..0] Low Timer Capture/Reload.                                         */
      __IOM uint32_t HCCR       : 16;           /*!< [31..16] High Timer Capture/Reload.                                       */
    } bit;
  } CAPTURE;
} TIMER_0_Type;                                 /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          TIMER_1                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (TIMER_1)
  */

typedef struct {                                /*!< (@ 0x40015000) TIMER_1 Structure                                          */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) High and Low Timer Configuration                           */
    
    struct {
      __IOM uint32_t LCLK       : 2;            /*!< [1..0] Low Clock Source.                                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t LMSTREN    : 1;            /*!< [4..4] Low Run Master Enable.                                             */
      __IOM uint32_t SPLITEN    : 1;            /*!< [5..5] Split Mode Enable.                                                 */
      __IOM uint32_t LEXIEN     : 1;            /*!< [6..6] Low Timer Extra Interrupt Enable.                                  */
      __IOM uint32_t LOVFIEN    : 1;            /*!< [7..7] Low Timer Overflow Interrupt Enable.                               */
      __IOM uint32_t LMD        : 3;            /*!< [10..8] Low Timer Mode.                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t LSTATE     : 1;            /*!< [12..12] Low Multi Purpose State Indicator.                               */
      __IOM uint32_t LRUN       : 1;            /*!< [13..13] Run Control Low.                                                 */
      __IOM uint32_t LEXI       : 1;            /*!< [14..14] Low Timer Extra Interrupt Flag.                                  */
      __IOM uint32_t LOVFI      : 1;            /*!< [15..15] Low Timer Overflow Interrupt.                                    */
      __IOM uint32_t HCLK       : 2;            /*!< [17..16] High Clock Source.                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t MSTRUN     : 1;            /*!< [19..19] Master Run Control.                                              */
      __IOM uint32_t HMSTREN    : 1;            /*!< [20..20] High Master Enable.                                              */
      __IOM uint32_t DBGMD      : 1;            /*!< [21..21] Timer Debug Mode.                                                */
      __IOM uint32_t HEXIEN     : 1;            /*!< [22..22] High Timer Extra Interrupt Enable.                               */
      __IOM uint32_t HOVFIEN    : 1;            /*!< [23..23] High Timer Overflow Interrupt Enable.                            */
      __IOM uint32_t HMD        : 4;            /*!< [27..24] High Timer Mode.                                                 */
      __IOM uint32_t HSTATE     : 1;            /*!< [28..28] High Multi Purpose State Indicator.                              */
      __IOM uint32_t HRUN       : 1;            /*!< [29..29] High Run Control.                                                */
      __IOM uint32_t HEXI       : 1;            /*!< [30..30] High Timer Extra Interrupt Flag.                                 */
      __IOM uint32_t HOVFI      : 1;            /*!< [31..31] High Timer Overflow Interrupt Flag.                              */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Clock Divider Control                               */
    
    struct {
      __IOM uint32_t CLKDIVRL   : 8;            /*!< [7..0] Clock Divider Reload Value.                                        */
      __IM  uint32_t            : 8;
      __IOM uint32_t CLKDIVCT   : 8;            /*!< [23..16] Clock Divider Counter.                                           */
    } bit;
  } CLKDIV;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Timer Value                                                */
    
    struct {
      __IOM uint32_t LCOUNT     : 16;           /*!< [15..0] Low Timer Count.                                                  */
      __IOM uint32_t HCOUNT     : 16;           /*!< [31..16] High Timer Count.                                                */
    } bit;
  } COUNT;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Timer Capture/Reload Value                                 */
    
    struct {
      __IOM uint32_t LCCR       : 16;           /*!< [15..0] Low Timer Capture/Reload.                                         */
      __IOM uint32_t HCCR       : 16;           /*!< [31..16] High Timer Capture/Reload.                                       */
    } bit;
  } CAPTURE;
} TIMER_1_Type;                                 /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                          UART_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (UART_0)
  */

typedef struct {                                /*!< (@ 0x40002000) UART_0 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Configuration                                       */
    
    struct {
      __IOM uint32_t RSTRTEN    : 1;            /*!< [0..0] Receiver Start Enable.                                             */
      __IOM uint32_t RPAREN     : 1;            /*!< [1..1] Receiver Parity Enable.                                            */
      __IOM uint32_t RSTPEN     : 1;            /*!< [2..2] Receiver Stop Enable.                                              */
      __IOM uint32_t RSTPMD     : 2;            /*!< [4..3] Receiver Stop Mode.                                                */
      __IOM uint32_t RPARMD     : 2;            /*!< [6..5] Receiver Parity Mode.                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t RDATLN     : 3;            /*!< [10..8] Receiver Data Length.                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t RSCEN      : 1;            /*!< [12..12] Receiver Smartcard Parity Response Enable.                       */
      __IOM uint32_t RIRDAEN    : 1;            /*!< [13..13] Receiver IrDA Enable.                                            */
      __IOM uint32_t RINVEN     : 1;            /*!< [14..14] Receiver Invert Enable.                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t TSTRTEN    : 1;            /*!< [16..16] Transmitter Start Enable.                                        */
      __IOM uint32_t TPAREN     : 1;            /*!< [17..17] Transmitter Parity Enable.                                       */
      __IOM uint32_t TSTPEN     : 1;            /*!< [18..18] Transmitter Stop Enable.                                         */
      __IOM uint32_t TSTPMD     : 2;            /*!< [20..19] Transmitter Stop Mode.                                           */
      __IOM uint32_t TPARMD     : 2;            /*!< [22..21] Transmitter Parity Mode.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDATLN     : 3;            /*!< [26..24] Transmitter Data Length.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TSCEN      : 1;            /*!< [28..28] Transmitter Smartcard Parity Response Enable.                    */
      __IOM uint32_t TIRDAEN    : 1;            /*!< [29..29] Transmitter IrDA Enable.                                         */
      __IOM uint32_t TINVEN     : 1;            /*!< [30..30] Transmitter Invert Enable.                                       */
    } bit;
  } CONFIG;
  __IOM uint32_t  CONFIG_SET;                   /*!< (@ 0x00000004) CONFIG_SET                                                 */
  __IOM uint32_t  CONFIG_CLR;                   /*!< (@ 0x00000008) CONFIG_CLR                                                 */
  __IM  uint32_t  RESERVED;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Mode Select                                         */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t DBGMD      : 1;            /*!< [16..16] UART Debug Mode.                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBMD       : 2;            /*!< [19..18] Loop Back Mode.                                                  */
      __IM  uint32_t            : 7;
      __IOM uint32_t DUPLEXMD   : 1;            /*!< [27..27] Duplex Mode.                                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t ITSEN      : 1;            /*!< [30..30] Idle TX Tristate Enable.                                         */
    } bit;
  } MODE;
  __IOM uint32_t  MODE_SET;                     /*!< (@ 0x00000014) MODE_SET                                                   */
  __IOM uint32_t  MODE_CLR;                     /*!< (@ 0x00000018) MODE_CLR                                                   */
  __IM  uint32_t  RESERVED1;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Flow Control                                               */
    
    struct {
      __IOM uint32_t RTS        : 1;            /*!< [0..0] RTS State.                                                         */
      __IM  uint32_t RX         : 1;            /*!< [1..1] RX Pin Status.                                                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTSINVEN   : 1;            /*!< [5..5] RTS Invert Enable.                                                 */
      __IOM uint32_t RTSTH      : 1;            /*!< [6..6] RTS Threshold Control.                                             */
      __IOM uint32_t RTSEN      : 1;            /*!< [7..7] RTS Enable.                                                        */
      __IM  uint32_t            : 8;
      __IM  uint32_t CTS        : 1;            /*!< [16..16] CTS State.                                                       */
      __IOM uint32_t TX         : 1;            /*!< [17..17] TX State.                                                        */
      __IM  uint32_t            : 3;
      __IOM uint32_t CTSINVEN   : 1;            /*!< [21..21] CTS Invert Enable.                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t CTSEN      : 1;            /*!< [23..23] CTS Enable.                                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t TIRDAPW    : 2;            /*!< [29..28] Transmit IrDA Pulse Width.                                       */
    } bit;
  } FLOWCN;
  __IOM uint32_t  FLOWCN_SET;                   /*!< (@ 0x00000024) FLOWCN_SET                                                 */
  __IOM uint32_t  FLOWCN_CLR;                   /*!< (@ 0x00000028) FLOWCN_CLR                                                 */
  __IM  uint32_t  RESERVED2;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Module Control                                             */
    
    struct {
      __IOM uint32_t RFRMERI    : 1;            /*!< [0..0] Receive Frame Error Interrupt Flag.                                */
      __IOM uint32_t RPARERI    : 1;            /*!< [1..1] Receive Parity Error Interrupt Flag.                               */
      __IOM uint32_t ROREI      : 1;            /*!< [2..2] Receive Overrun Error Interrupt Flag.                              */
      __IM  uint32_t RDREQI     : 1;            /*!< [3..3] Receive Data Request Interrupt Flag.                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t RERIEN     : 1;            /*!< [5..5] Receive Error Interrupt Enable.                                    */
      __IOM uint32_t RDREQIEN   : 1;            /*!< [6..6] Receive Data Request Interrupt Enable.                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t MATMD      : 2;            /*!< [9..8] Match Mode.                                                        */
      __IOM uint32_t RABDEN     : 1;            /*!< [10..10] Receiver Auto-Baud Enable.                                       */
      __IM  uint32_t RBUSYF     : 1;            /*!< [11..11] Receiver Busy Flag.                                              */
      __IOM uint32_t RBIT       : 1;            /*!< [12..12] Last Receive Bit.                                                */
      __IOM uint32_t ROSEN      : 1;            /*!< [13..13] Receiver One-Shot Enable.                                        */
      __IOM uint32_t RINH       : 1;            /*!< [14..14] Receiver Inhibit.                                                */
      __IOM uint32_t REN        : 1;            /*!< [15..15] Receiver Enable.                                                 */
      __IOM uint32_t TSCERI     : 1;            /*!< [16..16] Smartcard Parity Error Interrupt Flag.                           */
      __IM  uint32_t            : 1;
      __IM  uint32_t TDREQI     : 1;            /*!< [18..18] Transmit Data Request Interrupt Flag.                            */
      __IOM uint32_t TCPTI      : 1;            /*!< [19..19] Transmit Complete Interrupt Flag.                                */
      __IOM uint32_t TCPTTH     : 1;            /*!< [20..20] Transmit Complete Threshold.                                     */
      __IOM uint32_t TERIEN     : 1;            /*!< [21..21] Transmit Error Interrupt Enable.                                 */
      __IOM uint32_t TDREQIEN   : 1;            /*!< [22..22] Transmit Data Request Interrupt Enable.                          */
      __IOM uint32_t TCPTIEN    : 1;            /*!< [23..23] Transmit Complete Interrupt Enable.                              */
      __IM  uint32_t            : 3;
      __IM  uint32_t TBUSYF     : 1;            /*!< [27..27] Transmitter Busy Flag.                                           */
      __IOM uint32_t TBIT       : 1;            /*!< [28..28] Last Transmit Bit.                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t TINH       : 1;            /*!< [30..30] Transmit Inhibit.                                                */
      __IOM uint32_t TEN        : 1;            /*!< [31..31] Transmitter Enable.                                              */
    } bit;
  } CONTROL;
  __IOM uint32_t  CONTROL_SET;                  /*!< (@ 0x00000034) CONTROL_SET                                                */
  __IOM uint32_t  CONTROL_CLR;                  /*!< (@ 0x00000038) CONTROL_CLR                                                */
  __IM  uint32_t  RESERVED3;
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Inter-Packet Delay                                         */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t IPDELAY    : 8;            /*!< [23..16] Inter-Packet Delay.                                              */
    } bit;
  } IPDELAY;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Transmit and Receive Baud Rate                             */
    
    struct {
      __IOM uint32_t RBAUD      : 16;           /*!< [15..0] Receiver Baud Rate Control.                                       */
      __IOM uint32_t TBAUD      : 16;           /*!< [31..16] Transmitter Baud Rate Control.                                   */
    } bit;
  } BAUDRATE;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) FIFO Control                                               */
    
    struct {
      __IM  uint32_t RCNT       : 3;            /*!< [2..0] Receive FIFO Count.                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFTH       : 2;            /*!< [5..4] Receive FIFO Threshold.                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t RFIFOFL    : 1;            /*!< [8..8] Receive FIFO Flush.                                                */
      __IOM uint32_t RFERI      : 1;            /*!< [9..9] Receive FIFO Error Interrupt Flag.                                 */
      __IM  uint32_t RSRFULLF   : 1;            /*!< [10..10] Receive Shift Register Full .                                    */
      __IM  uint32_t            : 5;
      __IM  uint32_t TCNT       : 3;            /*!< [18..16] Transmit FIFO Count.                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TFTH       : 2;            /*!< [21..20] Transmit FIFO Threshold.                                         */
      __IM  uint32_t            : 2;
      __IOM uint32_t TFIFOFL    : 1;            /*!< [24..24] Transmit FIFO Flush.                                             */
      __IOM uint32_t TFERI      : 1;            /*!< [25..25] Transmit FIFO Error Interrupt Flag.                              */
      __IM  uint32_t TSRFULLF   : 1;            /*!< [26..26] Transmit Shift Register Full Flag.                               */
    } bit;
  } FIFOCN;
  __IOM uint32_t  FIFOCN_SET;                   /*!< (@ 0x00000064) FIFOCN_SET                                                 */
  __IOM uint32_t  FIFOCN_CLR;                   /*!< (@ 0x00000068) FIFOCN_CLR                                                 */
  __IM  uint32_t  RESERVED6;
  __IOM UART_DATA_Type DATA;                    /*!< (@ 0x00000070) FIFO Input/Output Data                                     */
} UART_Type;                                    /*!< Size = 116 (0x74)                                                         */



/* =========================================================================================================================== */
/* ================                                          USART_0                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief None (USART_0)
  */

typedef struct {                                /*!< (@ 0x40000000) USART_0 Structure                                          */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Configuration                                       */
    
    struct {
      __IOM uint32_t RSTRTEN    : 1;            /*!< [0..0] Receiver Start Enable.                                             */
      __IOM uint32_t RPAREN     : 1;            /*!< [1..1] Receiver Parity Enable.                                            */
      __IOM uint32_t RSTPEN     : 1;            /*!< [2..2] Receiver Stop Enable.                                              */
      __IOM uint32_t RSTPMD     : 2;            /*!< [4..3] Receiver Stop Mode.                                                */
      __IOM uint32_t RPARMD     : 2;            /*!< [6..5] Receiver Parity Mode.                                              */
      __IM  uint32_t            : 1;
      __IOM uint32_t RDATLN     : 3;            /*!< [10..8] Receiver Data Length.                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t RSCEN      : 1;            /*!< [12..12] Receiver Smartcard Parity Response Enable.                       */
      __IOM uint32_t RIRDAEN    : 1;            /*!< [13..13] Receiver IrDA Enable.                                            */
      __IOM uint32_t RINVEN     : 1;            /*!< [14..14] Receiver Invert Enable.                                          */
      __IOM uint32_t RSYNCEN    : 1;            /*!< [15..15] Receiver Synchronous Mode Enable.                                */
      __IOM uint32_t TSTRTEN    : 1;            /*!< [16..16] Transmitter Start Enable.                                        */
      __IOM uint32_t TPAREN     : 1;            /*!< [17..17] Transmitter Parity Enable.                                       */
      __IOM uint32_t TSTPEN     : 1;            /*!< [18..18] Transmitter Stop Enable.                                         */
      __IOM uint32_t TSTPMD     : 2;            /*!< [20..19] Transmitter Stop Mode.                                           */
      __IOM uint32_t TPARMD     : 2;            /*!< [22..21] Transmitter Parity Mode.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDATLN     : 3;            /*!< [26..24] Transmitter Data Length.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TSCEN      : 1;            /*!< [28..28] Transmitter Smartcard Parity Response Enable.                    */
      __IOM uint32_t TIRDAEN    : 1;            /*!< [29..29] Transmitter IrDA Enable.                                         */
      __IOM uint32_t TINVEN     : 1;            /*!< [30..30] Transmitter Invert Enable.                                       */
      __IOM uint32_t TSYNCEN    : 1;            /*!< [31..31] Transmitter Synchronous Mode Enable.                             */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Mode Select                                         */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t DBGMD      : 1;            /*!< [16..16] USART Debug Mode.                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBMD       : 2;            /*!< [19..18] Loop Back Mode.                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t STPSTCLK   : 1;            /*!< [21..21] Stop State Clock Control.                                        */
      __IOM uint32_t STRTSTCLK  : 1;            /*!< [22..22] Start State Clock Control.                                       */
      __IOM uint32_t ISTCLK     : 1;            /*!< [23..23] Idle Clock Control.                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t DUPLEXMD   : 1;            /*!< [27..27] Duplex Mode.                                                     */
      __IOM uint32_t CLKIDLE    : 1;            /*!< [28..28] Clock Idle State.                                                */
      __IOM uint32_t CLKESEL    : 1;            /*!< [29..29] Clock Edge Select.                                               */
      __IOM uint32_t ITSEN      : 1;            /*!< [30..30] Idle TX/UCLK Tristate Enable.                                    */
      __IOM uint32_t OPMD       : 1;            /*!< [31..31] Operational Mode.                                                */
    } bit;
  } MODE;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Flow Control                                               */
    
    struct {
      __IOM uint32_t RTS        : 1;            /*!< [0..0] RTS State.                                                         */
      __IM  uint32_t RX         : 1;            /*!< [1..1] RX Pin Status.                                                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t RTSINVEN   : 1;            /*!< [5..5] RTS Invert Enable.                                                 */
      __IOM uint32_t RTSTH      : 1;            /*!< [6..6] RTS Threshold Control.                                             */
      __IOM uint32_t RTSEN      : 1;            /*!< [7..7] RTS Enable.                                                        */
      __IM  uint32_t            : 8;
      __IM  uint32_t CTS        : 1;            /*!< [16..16] CTS State.                                                       */
      __IOM uint32_t TX         : 1;            /*!< [17..17] TX State.                                                        */
      __IOM uint32_t UCLK       : 1;            /*!< [18..18] UCLK State.                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t CTSINVEN   : 1;            /*!< [21..21] CTS Invert Enable.                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t CTSEN      : 1;            /*!< [23..23] CTS Enable.                                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t TIRDAPW    : 2;            /*!< [29..28] Transmit IrDA Pulse Width.                                       */
    } bit;
  } FLOWCN;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Module Control                                             */
    
    struct {
      __IOM uint32_t RFRMERI    : 1;            /*!< [0..0] Receive Frame Error Interrupt Flag.                                */
      __IOM uint32_t RPARERI    : 1;            /*!< [1..1] Receive Parity Error Interrupt Flag.                               */
      __IOM uint32_t ROREI      : 1;            /*!< [2..2] Receive Overrun Error Interrupt Flag.                              */
      __IM  uint32_t RDREQI     : 1;            /*!< [3..3] Receive Data Request Interrupt Flag.                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t RERIEN     : 1;            /*!< [5..5] Receive Error Interrupt Enable.                                    */
      __IOM uint32_t RDREQIEN   : 1;            /*!< [6..6] Receive Data Request Interrupt Enable.                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t MATMD      : 2;            /*!< [9..8] Match Mode.                                                        */
      __IOM uint32_t RABDEN     : 1;            /*!< [10..10] Receiver Auto-Baud Enable.                                       */
      __IM  uint32_t RBUSYF     : 1;            /*!< [11..11] Receiver Busy Flag.                                              */
      __IOM uint32_t RBIT       : 1;            /*!< [12..12] Last Receive Bit.                                                */
      __IOM uint32_t ROSEN      : 1;            /*!< [13..13] Receiver One-Shot Enable.                                        */
      __IOM uint32_t RINH       : 1;            /*!< [14..14] Receiver Inhibit.                                                */
      __IOM uint32_t REN        : 1;            /*!< [15..15] Receiver Enable.                                                 */
      __IOM uint32_t TSCERI     : 1;            /*!< [16..16] Smartcard Parity Error Interrupt Flag.                           */
      __IOM uint32_t TUREI      : 1;            /*!< [17..17] Transmit Underrun Error Interrupt Flag.                          */
      __IM  uint32_t TDREQI     : 1;            /*!< [18..18] Transmit Data Request Interrupt Flag.                            */
      __IOM uint32_t TCPTI      : 1;            /*!< [19..19] Transmit Complete Interrupt Flag.                                */
      __IOM uint32_t TCPTTH     : 1;            /*!< [20..20] Transmit Complete Threshold.                                     */
      __IOM uint32_t TERIEN     : 1;            /*!< [21..21] Transmit Error Interrupt Enable.                                 */
      __IOM uint32_t TDREQIEN   : 1;            /*!< [22..22] Transmit Data Request Interrupt Enable.                          */
      __IOM uint32_t TCPTIEN    : 1;            /*!< [23..23] Transmit Complete Interrupt Enable.                              */
      __IM  uint32_t            : 3;
      __IM  uint32_t TBUSYF     : 1;            /*!< [27..27] Transmitter Busy Flag.                                           */
      __IOM uint32_t TBIT       : 1;            /*!< [28..28] Last Transmit Bit.                                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t TINH       : 1;            /*!< [30..30] Transmit Inhibit.                                                */
      __IOM uint32_t TEN        : 1;            /*!< [31..31] Transmitter Enable.                                              */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Inter-Packet Delay                                         */
    
    struct {
      __IM  uint32_t            : 16;
      __IOM uint32_t IPDELAY    : 8;            /*!< [23..16] Inter-Packet Delay.                                              */
    } bit;
  } IPDELAY;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Transmit and Receive Baud Rate                             */
    
    struct {
      __IOM uint32_t RBAUD      : 16;           /*!< [15..0] Receiver Baud Rate Control.                                       */
      __IOM uint32_t TBAUD      : 16;           /*!< [31..16] Transmitter Baud Rate Control.                                   */
    } bit;
  } BAUDRATE;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) FIFO Control                                               */
    
    struct {
      __IM  uint32_t RCNT       : 3;            /*!< [2..0] Receive FIFO Count.                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t RFTH       : 2;            /*!< [5..4] Receive FIFO Threshold.                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t RDMAEN     : 1;            /*!< [7..7] Receiver DMA Enable.                                               */
      __IOM uint32_t RFIFOFL    : 1;            /*!< [8..8] Receive FIFO Flush.                                                */
      __IOM uint32_t RFERI      : 1;            /*!< [9..9] Receive FIFO Error Interrupt Flag.                                 */
      __IM  uint32_t RSRFULLF   : 1;            /*!< [10..10] Receive Shift Register Full Flag.                                */
      __IM  uint32_t            : 5;
      __IM  uint32_t TCNT       : 3;            /*!< [18..16] Transmit FIFO Count.                                             */
      __IM  uint32_t            : 1;
      __IOM uint32_t TFTH       : 2;            /*!< [21..20] Transmit FIFO Threshold.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDMAEN     : 1;            /*!< [23..23] Transmitter DMA Enable.                                          */
      __IOM uint32_t TFIFOFL    : 1;            /*!< [24..24] Transmit FIFO Flush.                                             */
      __IOM uint32_t TFERI      : 1;            /*!< [25..25] Transmit FIFO Error Interrupt Flag.                              */
      __IM  uint32_t TSRFULLF   : 1;            /*!< [26..26] Transmit Shift Register Full Flag.                               */
    } bit;
  } FIFOCN;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) FIFO Input/Output Data                                     */
    
    struct {
      __IOM uint32_t DATA       : 32;           /*!< [31..0] FIFO Data.                                                        */
    } bit;
  } DATA;
} USART_Type;                                   /*!< Size = 116 (0x74)                                                         */



/* =========================================================================================================================== */
/* ================                                           USB_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (USB_0)
  */

typedef struct {                                /*!< (@ 0x40018000) USB_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Function Address                                           */
    
    struct {
      __IOM uint32_t FADDR      : 7;            /*!< [6..0] Function Address.                                                  */
      __IM  uint32_t FADDRUPD   : 1;            /*!< [7..7] Function Address Update.                                           */
    } bit;
  } FADDR;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Power Control                                              */
    
    struct {
      __IOM uint32_t SUSDEN     : 1;            /*!< [0..0] Suspend Detection Enable.                                          */
      __IM  uint32_t SUSMDF     : 1;            /*!< [1..1] Suspend Mode Flag.                                                 */
      __IOM uint32_t RESUME     : 1;            /*!< [2..2] Force Resume.                                                      */
      __IM  uint32_t RSTDETF    : 1;            /*!< [3..3] Reset Detect Flag.                                                 */
      __IOM uint32_t USBINH     : 1;            /*!< [4..4] USB Inhibit.                                                       */
      __IOM uint32_t DITHEN     : 1;            /*!< [5..5] USB Dither Enable.                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t ISOUPDMD   : 1;            /*!< [7..7] ISO Update Mode.                                                   */
    } bit;
  } POWER;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) IN/OUT Endpoint Interrupt Flags                            */
    
    struct {
      __IOM uint32_t EP0I       : 1;            /*!< [0..0] Endpoint 0 Interrupt Flag.                                         */
      __IOM uint32_t IN1I       : 1;            /*!< [1..1] IN Endpoint 1 Interrupt Flag.                                      */
      __IOM uint32_t IN2I       : 1;            /*!< [2..2] IN Endpoint 2 Interrupt Flag.                                      */
      __IOM uint32_t IN3I       : 1;            /*!< [3..3] IN Endpoint 3 Interrupt Flag.                                      */
      __IOM uint32_t IN4I       : 1;            /*!< [4..4] IN Endpoint 4 Interrupt Flag.                                      */
      __IM  uint32_t            : 12;
      __IOM uint32_t OUT1I      : 1;            /*!< [17..17] OUT Endpoint 1 Interrupt Flag.                                   */
      __IOM uint32_t OUT2I      : 1;            /*!< [18..18] OUT Endpoint 2 Interrupt Flag.                                   */
      __IOM uint32_t OUT3I      : 1;            /*!< [19..19] OUT Endpoint 3 Interrupt Flag.                                   */
      __IOM uint32_t OUT4I      : 1;            /*!< [20..20] OUT Endpoint 4 Interrupt Flag.                                   */
    } bit;
  } IOINT;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Common Interrupt Flags                                     */
    
    struct {
      __IOM uint32_t SUSI       : 1;            /*!< [0..0] Suspend Interrupt Flag.                                            */
      __IOM uint32_t RESI       : 1;            /*!< [1..1] Resume Interrupt Flag.                                             */
      __IOM uint32_t RSTI       : 1;            /*!< [2..2] Reset Interrupt Flag.                                              */
      __IOM uint32_t SOFI       : 1;            /*!< [3..3] Start of Frame Interrupt Flag.                                     */
    } bit;
  } CMINT;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) IN/OUT Endpoint Interrupt Control                          */
    
    struct {
      __IOM uint32_t EP0IEN     : 1;            /*!< [0..0] Endpoint 0 Interrupt Enable.                                       */
      __IOM uint32_t IN1IEN     : 1;            /*!< [1..1] IN Endpoint 1 Interrupt Enable.                                    */
      __IOM uint32_t IN2IEN     : 1;            /*!< [2..2] IN Endpoint 2 Interrupt Enable.                                    */
      __IOM uint32_t IN3IEN     : 1;            /*!< [3..3] IN Endpoint 3 Interrupt Enable.                                    */
      __IOM uint32_t IN4IEN     : 1;            /*!< [4..4] IN Endpoint 4 Interrupt Enable.                                    */
      __IM  uint32_t            : 12;
      __IOM uint32_t OUT1IEN    : 1;            /*!< [17..17] OUT Endpoint 1 Interrupt Enable.                                 */
      __IOM uint32_t OUT2IEN    : 1;            /*!< [18..18] OUT Endpoint 2 Interrupt Enable.                                 */
      __IOM uint32_t OUT3IEN    : 1;            /*!< [19..19] OUT Endpoint 3 Interrupt Enable.                                 */
      __IOM uint32_t OUT4IEN    : 1;            /*!< [20..20] OUT Endpoint 4 Interrupt Enable.                                 */
    } bit;
  } IOINTE;
  __IM  uint32_t  RESERVED4[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Common Interrupt and Endpoint Control                      */
    
    struct {
      __IOM uint32_t SUSIEN     : 1;            /*!< [0..0] Suspend Interrupt Enable.                                          */
      __IOM uint32_t RESIEN     : 1;            /*!< [1..1] Resume Interrupt Enable.                                           */
      __IOM uint32_t RSTIEN     : 1;            /*!< [2..2] Reset Interrupt Enable.                                            */
      __IOM uint32_t SOFIEN     : 1;            /*!< [3..3] Start of Frame Interrupt Enable.                                   */
      __IM  uint32_t            : 12;
      __IOM uint32_t EP0EN      : 1;            /*!< [16..16] Endpoint 0 Enable.                                               */
      __IOM uint32_t EP1EN      : 1;            /*!< [17..17] Endpoint 1 Enable.                                               */
      __IOM uint32_t EP2EN      : 1;            /*!< [18..18] Endpoint 2 Enable.                                               */
      __IOM uint32_t EP3EN      : 1;            /*!< [19..19] Endpoint 3 Enable.                                               */
      __IOM uint32_t EP4EN      : 1;            /*!< [20..20] Endpoint 4 Enable.                                               */
    } bit;
  } CMINTEPE;
  __IM  uint32_t  RESERVED5[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Clock Recovery Control                                     */
    
    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t OLEN       : 1;            /*!< [4..4] Oscillator Open-Loop Mode Enable.                                  */
      __IOM uint32_t LSCRMD     : 1;            /*!< [5..5] Low Speed Clock Recovery Mode.                                     */
      __IOM uint32_t CRSSEN     : 1;            /*!< [6..6] Clock Recovery Single Step Enable.                                 */
      __IOM uint32_t CREN       : 1;            /*!< [7..7] Clock Recovery Enable.                                             */
    } bit;
  } CRCONTROL;
  __IM  uint32_t  RESERVED6[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Frame Number                                               */
    
    struct {
      __IM  uint32_t FRAMENUM   : 11;           /*!< [10..0] Frame Number.                                                     */
    } bit;
  } FRAME;
  __IM  uint32_t  RESERVED7[99];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000200) Transceiver Control                                        */
    
    struct {
      __IM  uint32_t DN         : 1;            /*!< [0..0] D- Signal State.                                                   */
      __IM  uint32_t DP         : 1;            /*!< [1..1] D+ Signal State.                                                   */
      __IM  uint32_t DFREC      : 1;            /*!< [2..2] Differential Receiver State.                                       */
      __IOM uint32_t PHYTST     : 2;            /*!< [4..3] Physical Layer Test.                                               */
      __IOM uint32_t SSEL       : 1;            /*!< [5..5] USB Speed Select.                                                  */
      __IOM uint32_t PHYEN      : 1;            /*!< [6..6] Physical Layer Enable.                                             */
      __IOM uint32_t PUEN       : 1;            /*!< [7..7] Internal Pull-up Resistor Enable.                                  */
    } bit;
  } TCONTROL;
  __IM  uint32_t  RESERVED8[63];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000300) Module Clock Select                                        */
    
    struct {
      __IOM uint32_t CLKSEL     : 2;            /*!< [1..0] USB Clock Select.                                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t CLKDIV     : 2;            /*!< [5..4] USB Clock Divider.                                                 */
      __OM  uint32_t RESET      : 1;            /*!< [6..6] USB Reset.                                                         */
    } bit;
  } CLKSEL;
  __IM  uint32_t  RESERVED9[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000310) Oscillator Control                                         */
    
    struct {
      __IM  uint32_t            : 5;
      __IOM uint32_t SUSPEND    : 1;            /*!< [5..5] USB Oscillator Suspend.                                            */
      __IM  uint32_t            : 1;
      __IOM uint32_t OSCEN      : 1;            /*!< [7..7] USB Oscillator Enable.                                             */
    } bit;
  } OSCCONTROL;
  __IM  uint32_t  RESERVED10[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000320) Oscillator Additional Frequency Adjust                     */
    
    struct {
      __IOM uint32_t FINEFADJ   : 6;            /*!< [5..0] USB Oscillator Fine Output Frequency Adjust.                       */
      __IOM uint32_t DITHEN     : 1;            /*!< [6..6] USB Oscillator Dithering Enable.                                   */
    } bit;
  } AFADJUST;
  __IM  uint32_t  RESERVED11[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000330) Oscillator Frequency Adjust                                */
    
    struct {
      __IOM uint32_t FADJ       : 7;            /*!< [6..0] Oscillator Output Frequency Adjust.                                */
    } bit;
  } FADJUST;
  __IM  uint32_t  RESERVED12[51];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000400) DMA Data FIFO Access                                       */
    
    struct {
      __IOM uint32_t DMAFIFO    : 32;           /*!< [31..0] DMA Data FIFO Access.                                             */
    } bit;
  } DMAFIFO;
  __IM  uint32_t  RESERVED13[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000410) DMA Control                                                */
    
    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t DBGMD      : 1;            /*!< [4..4] USB DMA Debug Mode.                                                */
      __IOM uint32_t TERRF      : 1;            /*!< [5..5] Timeout Error Flag.                                                */
      __IM  uint32_t DBUSYF     : 1;            /*!< [6..6] USB DMA Busy Flag.                                                 */
      __IOM uint32_t DFIFOFL    : 1;            /*!< [7..7] USB DMA Buffer Flush Control.                                      */
    } bit;
  } DMACONTROL;
  __IM  uint32_t  RESERVED14[255];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000810) Endpoint 0 Control                                         */
    
    struct {
      __IM  uint32_t OPRDYI     : 1;            /*!< [0..0] OUT Packet Ready Interrupt Flag.                                   */
      __IOM uint32_t IPRDYI     : 1;            /*!< [1..1] IN Packet Ready Indicator.                                         */
      __IOM uint32_t STSTLI     : 1;            /*!< [2..2] Sent Stall Interrupt Flag.                                         */
      __IOM uint32_t DEND       : 1;            /*!< [3..3] Data End.                                                          */
      __IM  uint32_t SUENDI     : 1;            /*!< [4..4] Setup End Interrupt Flag.                                          */
      __IOM uint32_t SDSTL      : 1;            /*!< [5..5] Send Stall.                                                        */
      __IOM uint32_t OPRDYIS    : 1;            /*!< [6..6] Serviced Out Packet Ready Interrupt Flag.                          */
      __IOM uint32_t SUENDIS    : 1;            /*!< [7..7] Serviced Setup End Interrupt Flag.                                 */
    } bit;
  } EP0CONTROL;
  __IM  uint32_t  RESERVED15[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000820) Endpoint 0 Data Count                                      */
    
    struct {
      __IM  uint32_t COUNT      : 7;            /*!< [6..0] Endpoint 0 OUT Data Count.                                         */
    } bit;
  } EP0COUNT;
  __IM  uint32_t  RESERVED16[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000830) Endpoint 0 Data FIFO Access                                */
    
    struct {
      __IOM uint32_t FIFO       : 32;           /*!< [31..0] Endpoint 0 Data FIFO.                                             */
    } bit;
  } EP0FIFO;
  __IM  uint32_t  RESERVED17[19];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000880) Endpoint Maximum Packet Size                               */
    
    struct {
      __IOM uint32_t IMAXP      : 8;            /*!< [7..0] IN Maximum Packet Size.                                            */
      __IM  uint32_t            : 8;
      __IOM uint32_t OMAXP      : 8;            /*!< [23..16] OUT Maximum Packet Size.                                         */
    } bit;
  } EPMPSIZE_1;
  __IM  uint32_t  RESERVED18[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000890) Endpoint Control                                           */
    
    struct {
      __IOM uint32_t IPRDYI     : 1;            /*!< [0..0] IN Packet Ready Indicator.                                         */
      __IOM uint32_t IFIFONEF   : 1;            /*!< [1..1] IN FIFO Not Empty Flag.                                            */
      __IOM uint32_t IURF       : 1;            /*!< [2..2] IN FIFO Underrun Flag.                                             */
      __IOM uint32_t IFIFOFL    : 1;            /*!< [3..3] IN FIFO Flush.                                                     */
      __IOM uint32_t ISDSTL     : 1;            /*!< [4..4] IN Send Stall.                                                     */
      __IOM uint32_t ISTSTLI    : 1;            /*!< [5..5] IN Sent Stall Interrupt Flag.                                      */
      __IOM uint32_t ICLRDT     : 1;            /*!< [6..6] IN Clear Data Toggle.                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t SPLITEN    : 1;            /*!< [10..10] FIFO Split Enable.                                               */
      __IOM uint32_t FDTEN      : 1;            /*!< [11..11] Force Data Toggle Enable.                                        */
      __IOM uint32_t IDMAEN     : 1;            /*!< [12..12] IN Endpoint DMA Enable.                                          */
      __IOM uint32_t DIRSEL     : 1;            /*!< [13..13] Endpoint Direction Select.                                       */
      __IOM uint32_t IISOEN     : 1;            /*!< [14..14] IN Isochronous Transfer Enable.                                  */
      __IOM uint32_t AUTOSETEN  : 1;            /*!< [15..15] IN Endpoint IPRDYI Automatic Set Enable.                         */
      __IOM uint32_t OPRDYI     : 1;            /*!< [16..16] OUT Packet Ready.                                                */
      __IOM uint32_t OFIFOFF    : 1;            /*!< [17..17] OUT FIFO Full.                                                   */
      __IOM uint32_t OORF       : 1;            /*!< [18..18] OUT FIFO Overrun Flag.                                           */
      __IOM uint32_t ODERRF     : 1;            /*!< [19..19] OUT Data Error Flag.                                             */
      __IOM uint32_t OFIFOFL    : 1;            /*!< [20..20] OUT FIFO Flush.                                                  */
      __IOM uint32_t OSDSTL     : 1;            /*!< [21..21] OUT Send Stall.                                                  */
      __IOM uint32_t OSTSTLI    : 1;            /*!< [22..22] OUT Sent Stall Interrupt Flag.                                   */
      __IOM uint32_t OCLRDT     : 1;            /*!< [23..23] OUT Clear Data Toggle.                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t ODMAMD     : 1;            /*!< [28..28] OUT Endpoint DMA Mode.                                           */
      __IOM uint32_t ODMAEN     : 1;            /*!< [29..29] OUT Endpoint DMA Enable.                                         */
      __IOM uint32_t OISOEN     : 1;            /*!< [30..30] OUT Isochronous Transfer Enable.                                 */
      __IOM uint32_t AUTOCLREN  : 1;            /*!< [31..31] OUT Endpoint OPRDYI Auto-Clear Enable.                           */
    } bit;
  } EPCONTROL_1;
  __IM  uint32_t  RESERVED19[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008A0) Endpoint Data Count                                        */
    
    struct {
      __IM  uint32_t COUNT      : 10;           /*!< [9..0] Endpoint OUT Data Count.                                           */
    } bit;
  } EPCOUNT_1;
  __IM  uint32_t  RESERVED20[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000008B0) Endpoint Data FIFO Access                                  */
    
    struct {
      __IOM uint32_t FIFO       : 32;           /*!< [31..0] Endpoint Data FIFO.                                               */
    } bit;
  } EPFIFO_1;
  __IM  uint32_t  RESERVED21[19];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000900) Endpoint Maximum Packet Size                               */
    
    struct {
      __IOM uint32_t IMAXP      : 8;            /*!< [7..0] IN Maximum Packet Size.                                            */
      __IM  uint32_t            : 8;
      __IOM uint32_t OMAXP      : 8;            /*!< [23..16] OUT Maximum Packet Size.                                         */
    } bit;
  } EPMPSIZE_2;
  __IM  uint32_t  RESERVED22[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000910) Endpoint Control                                           */
    
    struct {
      __IOM uint32_t IPRDYI     : 1;            /*!< [0..0] IN Packet Ready Indicator.                                         */
      __IOM uint32_t IFIFONEF   : 1;            /*!< [1..1] IN FIFO Not Empty Flag.                                            */
      __IOM uint32_t IURF       : 1;            /*!< [2..2] IN FIFO Underrun Flag.                                             */
      __IOM uint32_t IFIFOFL    : 1;            /*!< [3..3] IN FIFO Flush.                                                     */
      __IOM uint32_t ISDSTL     : 1;            /*!< [4..4] IN Send Stall.                                                     */
      __IOM uint32_t ISTSTLI    : 1;            /*!< [5..5] IN Sent Stall Interrupt Flag.                                      */
      __IOM uint32_t ICLRDT     : 1;            /*!< [6..6] IN Clear Data Toggle.                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t SPLITEN    : 1;            /*!< [10..10] FIFO Split Enable.                                               */
      __IOM uint32_t FDTEN      : 1;            /*!< [11..11] Force Data Toggle Enable.                                        */
      __IOM uint32_t IDMAEN     : 1;            /*!< [12..12] IN Endpoint DMA Enable.                                          */
      __IOM uint32_t DIRSEL     : 1;            /*!< [13..13] Endpoint Direction Select.                                       */
      __IOM uint32_t IISOEN     : 1;            /*!< [14..14] IN Isochronous Transfer Enable.                                  */
      __IOM uint32_t AUTOSETEN  : 1;            /*!< [15..15] IN Endpoint IPRDYI Automatic Set Enable.                         */
      __IOM uint32_t OPRDYI     : 1;            /*!< [16..16] OUT Packet Ready.                                                */
      __IOM uint32_t OFIFOFF    : 1;            /*!< [17..17] OUT FIFO Full.                                                   */
      __IOM uint32_t OORF       : 1;            /*!< [18..18] OUT FIFO Overrun Flag.                                           */
      __IOM uint32_t ODERRF     : 1;            /*!< [19..19] OUT Data Error Flag.                                             */
      __IOM uint32_t OFIFOFL    : 1;            /*!< [20..20] OUT FIFO Flush.                                                  */
      __IOM uint32_t OSDSTL     : 1;            /*!< [21..21] OUT Send Stall.                                                  */
      __IOM uint32_t OSTSTLI    : 1;            /*!< [22..22] OUT Sent Stall Interrupt Flag.                                   */
      __IOM uint32_t OCLRDT     : 1;            /*!< [23..23] OUT Clear Data Toggle.                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t ODMAMD     : 1;            /*!< [28..28] OUT Endpoint DMA Mode.                                           */
      __IOM uint32_t ODMAEN     : 1;            /*!< [29..29] OUT Endpoint DMA Enable.                                         */
      __IOM uint32_t OISOEN     : 1;            /*!< [30..30] OUT Isochronous Transfer Enable.                                 */
      __IOM uint32_t AUTOCLREN  : 1;            /*!< [31..31] OUT Endpoint OPRDYI Auto-Clear Enable.                           */
    } bit;
  } EPCONTROL_2;
  __IM  uint32_t  RESERVED23[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000920) Endpoint Data Count                                        */
    
    struct {
      __IM  uint32_t COUNT      : 10;           /*!< [9..0] Endpoint OUT Data Count.                                           */
    } bit;
  } EPCOUNT_2;
  __IM  uint32_t  RESERVED24[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000930) Endpoint Data FIFO Access                                  */
    
    struct {
      __IOM uint32_t FIFO       : 32;           /*!< [31..0] Endpoint Data FIFO.                                               */
    } bit;
  } EPFIFO_2;
  __IM  uint32_t  RESERVED25[19];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000980) Endpoint Maximum Packet Size                               */
    
    struct {
      __IOM uint32_t IMAXP      : 8;            /*!< [7..0] IN Maximum Packet Size.                                            */
      __IM  uint32_t            : 8;
      __IOM uint32_t OMAXP      : 8;            /*!< [23..16] OUT Maximum Packet Size.                                         */
    } bit;
  } EPMPSIZE_3;
  __IM  uint32_t  RESERVED26[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000990) Endpoint Control                                           */
    
    struct {
      __IOM uint32_t IPRDYI     : 1;            /*!< [0..0] IN Packet Ready Indicator.                                         */
      __IOM uint32_t IFIFONEF   : 1;            /*!< [1..1] IN FIFO Not Empty Flag.                                            */
      __IOM uint32_t IURF       : 1;            /*!< [2..2] IN FIFO Underrun Flag.                                             */
      __IOM uint32_t IFIFOFL    : 1;            /*!< [3..3] IN FIFO Flush.                                                     */
      __IOM uint32_t ISDSTL     : 1;            /*!< [4..4] IN Send Stall.                                                     */
      __IOM uint32_t ISTSTLI    : 1;            /*!< [5..5] IN Sent Stall Interrupt Flag.                                      */
      __IOM uint32_t ICLRDT     : 1;            /*!< [6..6] IN Clear Data Toggle.                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t SPLITEN    : 1;            /*!< [10..10] FIFO Split Enable.                                               */
      __IOM uint32_t FDTEN      : 1;            /*!< [11..11] Force Data Toggle Enable.                                        */
      __IOM uint32_t IDMAEN     : 1;            /*!< [12..12] IN Endpoint DMA Enable.                                          */
      __IOM uint32_t DIRSEL     : 1;            /*!< [13..13] Endpoint Direction Select.                                       */
      __IOM uint32_t IISOEN     : 1;            /*!< [14..14] IN Isochronous Transfer Enable.                                  */
      __IOM uint32_t AUTOSETEN  : 1;            /*!< [15..15] IN Endpoint IPRDYI Automatic Set Enable.                         */
      __IOM uint32_t OPRDYI     : 1;            /*!< [16..16] OUT Packet Ready.                                                */
      __IOM uint32_t OFIFOFF    : 1;            /*!< [17..17] OUT FIFO Full.                                                   */
      __IOM uint32_t OORF       : 1;            /*!< [18..18] OUT FIFO Overrun Flag.                                           */
      __IOM uint32_t ODERRF     : 1;            /*!< [19..19] OUT Data Error Flag.                                             */
      __IOM uint32_t OFIFOFL    : 1;            /*!< [20..20] OUT FIFO Flush.                                                  */
      __IOM uint32_t OSDSTL     : 1;            /*!< [21..21] OUT Send Stall.                                                  */
      __IOM uint32_t OSTSTLI    : 1;            /*!< [22..22] OUT Sent Stall Interrupt Flag.                                   */
      __IOM uint32_t OCLRDT     : 1;            /*!< [23..23] OUT Clear Data Toggle.                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t ODMAMD     : 1;            /*!< [28..28] OUT Endpoint DMA Mode.                                           */
      __IOM uint32_t ODMAEN     : 1;            /*!< [29..29] OUT Endpoint DMA Enable.                                         */
      __IOM uint32_t OISOEN     : 1;            /*!< [30..30] OUT Isochronous Transfer Enable.                                 */
      __IOM uint32_t AUTOCLREN  : 1;            /*!< [31..31] OUT Endpoint OPRDYI Auto-Clear Enable.                           */
    } bit;
  } EPCONTROL_3;
  __IM  uint32_t  RESERVED27[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009A0) Endpoint Data Count                                        */
    
    struct {
      __IM  uint32_t COUNT      : 10;           /*!< [9..0] Endpoint OUT Data Count.                                           */
    } bit;
  } EPCOUNT_3;
  __IM  uint32_t  RESERVED28[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000009B0) Endpoint Data FIFO Access                                  */
    
    struct {
      __IOM uint32_t FIFO       : 32;           /*!< [31..0] Endpoint Data FIFO.                                               */
    } bit;
  } EPFIFO_3;
  __IM  uint32_t  RESERVED29[19];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A00) Endpoint Maximum Packet Size                               */
    
    struct {
      __IOM uint32_t IMAXP      : 8;            /*!< [7..0] IN Maximum Packet Size.                                            */
      __IM  uint32_t            : 8;
      __IOM uint32_t OMAXP      : 8;            /*!< [23..16] OUT Maximum Packet Size.                                         */
    } bit;
  } EPMPSIZE_4;
  __IM  uint32_t  RESERVED30[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A10) Endpoint Control                                           */
    
    struct {
      __IOM uint32_t IPRDYI     : 1;            /*!< [0..0] IN Packet Ready Indicator.                                         */
      __IOM uint32_t IFIFONEF   : 1;            /*!< [1..1] IN FIFO Not Empty Flag.                                            */
      __IOM uint32_t IURF       : 1;            /*!< [2..2] IN FIFO Underrun Flag.                                             */
      __IOM uint32_t IFIFOFL    : 1;            /*!< [3..3] IN FIFO Flush.                                                     */
      __IOM uint32_t ISDSTL     : 1;            /*!< [4..4] IN Send Stall.                                                     */
      __IOM uint32_t ISTSTLI    : 1;            /*!< [5..5] IN Sent Stall Interrupt Flag.                                      */
      __IOM uint32_t ICLRDT     : 1;            /*!< [6..6] IN Clear Data Toggle.                                              */
      __IM  uint32_t            : 3;
      __IOM uint32_t SPLITEN    : 1;            /*!< [10..10] FIFO Split Enable.                                               */
      __IOM uint32_t FDTEN      : 1;            /*!< [11..11] Force Data Toggle Enable.                                        */
      __IOM uint32_t IDMAEN     : 1;            /*!< [12..12] IN Endpoint DMA Enable.                                          */
      __IOM uint32_t DIRSEL     : 1;            /*!< [13..13] Endpoint Direction Select.                                       */
      __IOM uint32_t IISOEN     : 1;            /*!< [14..14] IN Isochronous Transfer Enable.                                  */
      __IOM uint32_t AUTOSETEN  : 1;            /*!< [15..15] IN Endpoint IPRDYI Automatic Set Enable.                         */
      __IOM uint32_t OPRDYI     : 1;            /*!< [16..16] OUT Packet Ready.                                                */
      __IOM uint32_t OFIFOFF    : 1;            /*!< [17..17] OUT FIFO Full.                                                   */
      __IOM uint32_t OORF       : 1;            /*!< [18..18] OUT FIFO Overrun Flag.                                           */
      __IOM uint32_t ODERRF     : 1;            /*!< [19..19] OUT Data Error Flag.                                             */
      __IOM uint32_t OFIFOFL    : 1;            /*!< [20..20] OUT FIFO Flush.                                                  */
      __IOM uint32_t OSDSTL     : 1;            /*!< [21..21] OUT Send Stall.                                                  */
      __IOM uint32_t OSTSTLI    : 1;            /*!< [22..22] OUT Sent Stall Interrupt Flag.                                   */
      __IOM uint32_t OCLRDT     : 1;            /*!< [23..23] OUT Clear Data Toggle.                                           */
      __IM  uint32_t            : 4;
      __IOM uint32_t ODMAMD     : 1;            /*!< [28..28] OUT Endpoint DMA Mode.                                           */
      __IOM uint32_t ODMAEN     : 1;            /*!< [29..29] OUT Endpoint DMA Enable.                                         */
      __IOM uint32_t OISOEN     : 1;            /*!< [30..30] OUT Isochronous Transfer Enable.                                 */
      __IOM uint32_t AUTOCLREN  : 1;            /*!< [31..31] OUT Endpoint OPRDYI Auto-Clear Enable.                           */
    } bit;
  } EPCONTROL_4;
  __IM  uint32_t  RESERVED31[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A20) Endpoint Data Count                                        */
    
    struct {
      __IM  uint32_t COUNT      : 10;           /*!< [9..0] Endpoint OUT Data Count.                                           */
    } bit;
  } EPCOUNT_4;
  __IM  uint32_t  RESERVED32[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000A30) Endpoint Data FIFO Access                                  */
    
    struct {
      __IOM uint32_t FIFO       : 32;           /*!< [31..0] Endpoint Data FIFO.                                               */
    } bit;
  } EPFIFO_4;
} USB_0_Type;                                   /*!< Size = 2612 (0xa34)                                                       */



/* =========================================================================================================================== */
/* ================                                          VMON_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (VMON_0)
  */

typedef struct {                                /*!< (@ 0x4002F000) VMON_0 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t VREGINSEN  : 1;            /*!< [0..0] VREGIN Supply Monitor Enable.                                      */
      __IM  uint32_t VREGINLI   : 1;            /*!< [1..1] VREGIN Low Interrupt Flag.                                         */
      __IM  uint32_t VDDRSTF    : 1;            /*!< [2..2] VDD Reset Threshold Status Flag.                                   */
      __IM  uint32_t VDDLI      : 1;            /*!< [3..3] VDD Low Interrupt Flag.                                            */
      __IOM uint32_t VDDHITHEN  : 1;            /*!< [4..4] VDD High Threshold Enable.                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t VDDLIEN    : 1;            /*!< [6..6] VDD Low Interrupt Enable.                                          */
      __IOM uint32_t VREGINLIEN : 1;            /*!< [7..7] VREGIN Low Interrupt Enable.                                       */
      __IM  uint32_t            : 23;
      __IOM uint32_t VMONEN     : 1;            /*!< [31..31] VDD Supply Monitor Enable.                                       */
    } bit;
  } CONTROL;
} VMON_0_Type;                                  /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                          VREF_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (VREF_0)
  */

typedef struct {                                /*!< (@ 0x40039010) VREF_0 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Voltage Reference Control                                  */
    
    struct {
      __IOM uint32_t VREF2X     : 1;            /*!< [0..0] Voltage Reference Doubler.                                         */
      __IOM uint32_t TEMPEN     : 1;            /*!< [1..1] Temperature Sensor Enable.                                         */
      __IM  uint32_t            : 29;
      __IOM uint32_t VREFEN     : 1;            /*!< [31..31] Voltage Reference Enable.                                        */
    } bit;
  } CONTROL;
} VREF_0_Type;                                  /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         EXTVREG_0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (EXTVREG_0)
  */

typedef struct {                                /*!< (@ 0x40042000) EXTVREG_0 Structure                                        */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t SAEN       : 1;            /*!< [0..0] Stand-Alone Mode Enable.                                           */
      __IM  uint32_t            : 23;
      __IOM uint32_t WPULLEN    : 1;            /*!< [24..24] Weak Pull Up/Down Enable.                                        */
      __IOM uint32_t FBLEN      : 1;            /*!< [25..25] Foldback Limiting Enable.                                        */
      __IOM uint32_t PNSEL      : 1;            /*!< [26..26] NPN/PNP Type Select.                                             */
      __IOM uint32_t FBPINSEL   : 1;            /*!< [27..27] Foldback Sensing Pin Select.                                     */
      __IM  uint32_t            : 3;
      __IOM uint32_t EVREGEN    : 1;            /*!< [31..31] External Regulator Enable.                                       */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Configuration                                       */
    
    struct {
      __IOM uint32_t IMINFINE   : 2;            /*!< [1..0] Minimum Current Fine Select.                                       */
      __IOM uint32_t IMIN       : 3;            /*!< [4..2] Minimum Current Select.                                            */
      __IM  uint32_t            : 3;
      __IOM uint32_t FBVOSEL    : 3;            /*!< [10..8] Foldback Voltage Offset Select.                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t FBRATE     : 3;            /*!< [14..12] Voltage Sense Gain Multiplier.                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t IMAX       : 3;            /*!< [18..16] Maximum Current Select.                                          */
      __IM  uint32_t            : 5;
      __IOM uint32_t VOUTSEL    : 6;            /*!< [29..24] Regulator Output Voltage Select.                                 */
    } bit;
  } CONFIG;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Module Status                                              */
    
    struct {
      __IM  uint32_t FBMAXF     : 1;            /*!< [0..0] Maximum Foldback Flag.                                             */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED2[7];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Current Sense Control                                      */
    
    struct {
      __IM  uint32_t            : 30;
      __IOM uint32_t ISNSEN     : 1;            /*!< [30..30] External Regulator Current Sense Enable.                         */
      __IOM uint32_t ADCISNSEN  : 1;            /*!< [31..31] ADC Current Sense Enable.                                        */
    } bit;
  } CSCONTROL;
  __IM  uint32_t  RESERVED3[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Current Sense Configuration                                */
    
    struct {
      __IOM uint32_t ISADCGAIN  : 3;            /*!< [2..0] ADC Current Sense Gain.                                            */
      __IOM uint32_t ISOGAIN    : 3;            /*!< [5..3] External Regulator Current Sense Gain.                             */
      __IOM uint32_t ISINSEL    : 2;            /*!< [7..6] External Regulator Current Sense Input Select.                     */
    } bit;
  } CSCONFIG;
} EXTVREG_0_Type;                               /*!< Size = 84 (0x54)                                                          */



/* =========================================================================================================================== */
/* ================                                          VREG_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (VREG_0)
  */

typedef struct {                                /*!< (@ 0x40040000) VREG_0 Structure                                           */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IM  uint32_t VBUSVLDF   : 1;            /*!< [0..0] VBUS Valid Flag.                                                   */
      __IOM uint32_t SUSEN      : 1;            /*!< [1..1] Voltage Regulator Suspend Enable.                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t BGDIS      : 1;            /*!< [5..5] Band Gap Disable.                                                  */
      __IOM uint32_t SENSEEN    : 1;            /*!< [6..6] VREGIN Sense Enable.                                               */
      __IOM uint32_t VBUSIVLDI  : 1;            /*!< [7..7] VBUS Invalid Interrupt Flag.                                       */
      __IOM uint32_t VBUSIVLDIEN : 1;           /*!< [8..8] VBUS Invalid Interrupt Enable.                                     */
      __IM  uint32_t            : 22;
      __IOM uint32_t VREGDIS    : 1;            /*!< [31..31] Voltage Regulator Disable.                                       */
    } bit;
  } CONTROL;
} VREG_0_Type;                                  /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                           LDO_0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief None (LDO_0)
  */

typedef struct {                                /*!< (@ 0x40039000) LDO_0 Structure                                            */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Control                                                    */
    
    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t LDOIBIAS   : 1;            /*!< [1..1] LDO Bias Current Selection.                                        */
      __IM  uint32_t            : 29;
      __IOM uint32_t LDOAEN     : 1;            /*!< [31..31] LDO Analog Enable.                                               */
    } bit;
  } CONTROL;
} LDO_0_Type;                                   /*!< Size = 4 (0x4)                                                            */



/* =========================================================================================================================== */
/* ================                                         WDTIMER_0                                         ================ */
/* =========================================================================================================================== */


/**
  * @brief None (WDTIMER_0)
  */

typedef struct {                                /*!< (@ 0x40030000) WDTIMER_0 Structure                                        */
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Module Control                                             */
    
    struct {
      __IOM uint32_t EWIEN      : 1;            /*!< [0..0] Early Warning Interrupt Enable.                                    */
      __IOM uint32_t DBGMD      : 1;            /*!< [1..1] Watchdog Timer Debug Mode.                                         */
    } bit;
  } CONTROL;
  __IM  uint32_t  RESERVED[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Module Status                                              */
    
    struct {
      __IM  uint32_t KEYSTS     : 1;            /*!< [0..0] Key Status.                                                        */
      __IM  uint32_t PRIVSTS    : 1;            /*!< [1..1] Register Access Status.                                            */
      __IOM uint32_t EWI        : 1;            /*!< [2..2] Early Warning Interrupt Flag.                                      */
      __IM  uint32_t RTHF       : 1;            /*!< [3..3] Reset Threshold Flag.                                              */
      __IM  uint32_t UPDSTS     : 1;            /*!< [4..4] Watchdog Timer Threshold Update Status.                            */
    } bit;
  } STATUS;
  __IM  uint32_t  RESERVED1[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Threshold Values                                           */
    
    struct {
      __IOM uint32_t EWTH       : 16;           /*!< [15..0] Early Warning Threshold.                                          */
      __IOM uint32_t RTH        : 16;           /*!< [31..16] Reset Threshold.                                                 */
    } bit;
  } THRESHOLD;
  __IM  uint32_t  RESERVED2[3];
  
  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) Module Key                                                 */
    
    struct {
      __OM  uint32_t KEY        : 8;            /*!< [7..0] Watchdog Timer Key.                                                */
    } bit;
  } WDTKEY;
} WDTIMER_0_Type;                               /*!< Size = 52 (0x34)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define SARADC_0_BASE               0x4001A000UL
#define SARADC_1_BASE               0x4001B000UL
#define AES_0_BASE                  0x40027000UL
#define CRC_0_BASE                  0x40028000UL
#define CAPSENSE_0_BASE             0x40023000UL
#define CLKCTRL_0_BASE              0x4002D000UL
#define CMP_0_BASE                  0x4001F000UL
#define CMP_1_BASE                  0x40020000UL
#define DMACTRL_0_BASE              0x40036000UL
#define DMAXBAR_0_BASE              0x40037000UL
#define DEVICEID_0_BASE             0x400490C0UL
#define EMIF_0_BASE                 0x40026000UL
#define EPCA_0_BASE                 0x4000E000UL
#define FLASHCTRL_0_BASE            0x4002E000UL
#define I2C_0_BASE                  0x40009000UL
#define I2C_1_BASE                  0x4000A000UL
#define I2S_0_BASE                  0x4003A000UL
#define IDAC_0_BASE                 0x40031000UL
#define IDAC_1_BASE                 0x40032000UL
#define IVC_0_BASE                  0x40044000UL
#define LOCK_0_BASE                 0x40049000UL
#define LPTIMER_0_BASE              0x40038000UL
#define PLL_0_BASE                  0x4003B000UL
#define EXTOSC_0_BASE               0x4003C000UL
#define LPOSC_0_BASE                0x40041000UL
#define PCA_0_BASE                  0x4000F000UL
#define PCA_1_BASE                  0x40010000UL
#define PMU_0_BASE                  0x40048000UL
#define PBCFG_0_BASE                0x4002A000UL
#define PBHD_4_BASE                 0x4002A3C0UL
#define PBSTD_0_BASE                0x4002A0A0UL
#define PBSTD_1_BASE                0x4002A140UL
#define PBSTD_2_BASE                0x4002A1E0UL
#define PBSTD_3_BASE                0x4002A320UL
#define RTC_0_BASE                  0x40029000UL
#define RSTSRC_0_BASE               0x4002D060UL
#define SPI_0_BASE                  0x40004000UL
#define SPI_1_BASE                  0x40005000UL
#define SPI_2_BASE                  0x40006000UL
#define SSG_0_BASE                  0x4001E000UL
#define TIMER_0_BASE                0x40014000UL
#define TIMER_1_BASE                0x40015000UL
#define UART_0_BASE                 0x40002000UL
#define UART_1_BASE                 0x40003000UL
#define USART_0_BASE                0x40000000UL
#define USART_1_BASE                0x40001000UL
#define USB_0_BASE                  0x40018000UL
#define VMON_0_BASE                 0x4002F000UL
#define VREF_0_BASE                 0x40039010UL
#define EXTVREG_0_BASE              0x40042000UL
#define VREG_0_BASE                 0x40040000UL
#define LDO_0_BASE                  0x40039000UL
#define WDTIMER_0_BASE              0x40030000UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define SARADC_0                    ((SARADC_0_Type*)          SARADC_0_BASE)
#define SARADC_1                    ((SARADC_1_Type*)          SARADC_1_BASE)
#define AES_0                       ((AES_0_Type*)             AES_0_BASE)
#define CRC_0                       ((CRC_0_Type*)             CRC_0_BASE)
#define CAPSENSE_0                  ((CAPSENSE_0_Type*)        CAPSENSE_0_BASE)
#define CLKCTRL_0                   ((CLKCTRL_0_Type*)         CLKCTRL_0_BASE)
#define CMP_0                       ((CMP_0_Type*)             CMP_0_BASE)
#define CMP_1                       ((CMP_1_Type*)             CMP_1_BASE)
#define DMACTRL_0                   ((DMACTRL_0_Type*)         DMACTRL_0_BASE)
#define DMAXBAR_0                   ((DMAXBAR_0_Type*)         DMAXBAR_0_BASE)
#define DEVICEID_0                  ((DEVICEID_0_Type*)        DEVICEID_0_BASE)
#define EMIF_0                      ((EMIF_0_Type*)            EMIF_0_BASE)
#define EPCA_0                      ((EPCA_0_Type*)            EPCA_0_BASE)
#define FLASHCTRL_0                 ((FLASHCTRL_0_Type*)       FLASHCTRL_0_BASE)
#define I2C_0                       ((I2C_Type*)               I2C_0_BASE)
#define I2C_1                       ((I2C_Type*)               I2C_1_BASE)
#define I2S_0                       ((I2S_0_Type*)             I2S_0_BASE)
#define IDAC_0                      ((IDAC_0_Type*)            IDAC_0_BASE)
#define IDAC_1                      ((IDAC_1_Type*)            IDAC_1_BASE)
#define IVC_0                       ((IVC_0_Type*)             IVC_0_BASE)
#define LOCK_0                      ((LOCK_0_Type*)            LOCK_0_BASE)
#define LPTIMER_0                   ((LPTIMER_0_Type*)         LPTIMER_0_BASE)
#define PLL_0                       ((PLL_0_Type*)             PLL_0_BASE)
#define EXTOSC_0                    ((EXTOSC_0_Type*)          EXTOSC_0_BASE)
#define LPOSC_0                     ((LPOSC_0_Type*)           LPOSC_0_BASE)
#define PCA_0                       ((PCA_0_Type*)             PCA_0_BASE)
#define PCA_1                       ((PCA_1_Type*)             PCA_1_BASE)
#define PMU_0                       ((PMU_0_Type*)             PMU_0_BASE)
#define PBCFG_0                     ((PBCFG_0_Type*)           PBCFG_0_BASE)
#define PBHD_4                      ((PBHD_4_Type*)            PBHD_4_BASE)
#define PBSTD_0                     ((PBSTD_Type*)             PBSTD_0_BASE)
#define PBSTD_1                     ((PBSTD_Type*)             PBSTD_1_BASE)
#define PBSTD_2                     ((PBSTD_Type*)             PBSTD_2_BASE)
#define PBSTD_3                     ((PBSTD_Type*)             PBSTD_3_BASE)
#define RTC_0                       ((RTC_0_Type*)             RTC_0_BASE)
#define RSTSRC_0                    ((RSTSRC_0_Type*)          RSTSRC_0_BASE)
#define SPI_0                       ((SPI_Type*)               SPI_0_BASE)
#define SPI_1                       ((SPI_Type*)               SPI_1_BASE)
#define SPI_2                       ((SPI_Type*)               SPI_2_BASE)
#define SSG_0                       ((SSG_0_Type*)             SSG_0_BASE)
#define TIMER_0                     ((TIMER_0_Type*)           TIMER_0_BASE)
#define TIMER_1                     ((TIMER_1_Type*)           TIMER_1_BASE)
#define UART_0                      ((UART_Type*)              UART_0_BASE)
#define UART_1                      ((UART_Type*)              UART_1_BASE)
#define USART_0                     ((USART_Type*)             USART_0_BASE)
#define USART_1                     ((USART_Type*)             USART_1_BASE)
#define USB_0                       ((USB_0_Type*)             USB_0_BASE)
#define VMON_0                      ((VMON_0_Type*)            VMON_0_BASE)
#define VREF_0                      ((VREF_0_Type*)            VREF_0_BASE)
#define EXTVREG_0                   ((EXTVREG_0_Type*)         EXTVREG_0_BASE)
#define VREG_0                      ((VREG_0_Type*)            VREG_0_BASE)
#define LDO_0                       ((LDO_0_Type*)             LDO_0_BASE)
#define WDTIMER_0                   ((WDTIMER_0_Type*)         WDTIMER_0_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                                 Pos/Mask Cluster Section                                  ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           DATA                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  U32  ========================================================== */
/* ==========================================================  U16  ========================================================== */
/* ==========================================================  U8  =========================================================== */

/** @} */ /* End of group PosMask_clusters */


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         SARADC_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define SARADC_0_CONFIG_SPSEL_Pos         (0UL)                     /*!< SARADC_0 CONFIG: SPSEL (Bit 0)                        */
#define SARADC_0_CONFIG_SPSEL_Msk         (0xfUL)                   /*!< SARADC_0 CONFIG: SPSEL (Bitfield-Mask: 0x0f)          */
#define SARADC_0_CONFIG_SPEN_Pos          (4UL)                     /*!< SARADC_0 CONFIG: SPEN (Bit 4)                         */
#define SARADC_0_CONFIG_SPEN_Msk          (0x10UL)                  /*!< SARADC_0 CONFIG: SPEN (Bitfield-Mask: 0x01)           */
#define SARADC_0_CONFIG_SSGEN_Pos         (5UL)                     /*!< SARADC_0 CONFIG: SSGEN (Bit 5)                        */
#define SARADC_0_CONFIG_SSGEN_Msk         (0x20UL)                  /*!< SARADC_0 CONFIG: SSGEN (Bitfield-Mask: 0x01)          */
#define SARADC_0_CONFIG_PACKMD_Pos        (6UL)                     /*!< SARADC_0 CONFIG: PACKMD (Bit 6)                       */
#define SARADC_0_CONFIG_PACKMD_Msk        (0xc0UL)                  /*!< SARADC_0 CONFIG: PACKMD (Bitfield-Mask: 0x03)         */
#define SARADC_0_CONFIG_SIMCEN_Pos        (8UL)                     /*!< SARADC_0 CONFIG: SIMCEN (Bit 8)                       */
#define SARADC_0_CONFIG_SIMCEN_Msk        (0x100UL)                 /*!< SARADC_0 CONFIG: SIMCEN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONFIG_INTLVEN_Pos       (9UL)                     /*!< SARADC_0 CONFIG: INTLVEN (Bit 9)                      */
#define SARADC_0_CONFIG_INTLVEN_Msk       (0x200UL)                 /*!< SARADC_0 CONFIG: INTLVEN (Bitfield-Mask: 0x01)        */
#define SARADC_0_CONFIG_SCANEN_Pos        (10UL)                    /*!< SARADC_0 CONFIG: SCANEN (Bit 10)                      */
#define SARADC_0_CONFIG_SCANEN_Msk        (0x400UL)                 /*!< SARADC_0 CONFIG: SCANEN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONFIG_SCANMD_Pos        (12UL)                    /*!< SARADC_0 CONFIG: SCANMD (Bit 12)                      */
#define SARADC_0_CONFIG_SCANMD_Msk        (0x1000UL)                /*!< SARADC_0 CONFIG: SCANMD (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONFIG_DMAEN_Pos         (14UL)                    /*!< SARADC_0 CONFIG: DMAEN (Bit 14)                       */
#define SARADC_0_CONFIG_DMAEN_Msk         (0x4000UL)                /*!< SARADC_0 CONFIG: DMAEN (Bitfield-Mask: 0x01)          */
#define SARADC_0_CONFIG_BCLKSEL_Pos       (15UL)                    /*!< SARADC_0 CONFIG: BCLKSEL (Bit 15)                     */
#define SARADC_0_CONFIG_BCLKSEL_Msk       (0x8000UL)                /*!< SARADC_0 CONFIG: BCLKSEL (Bitfield-Mask: 0x01)        */
#define SARADC_0_CONFIG_CLKDIV_Pos        (16UL)                    /*!< SARADC_0 CONFIG: CLKDIV (Bit 16)                      */
#define SARADC_0_CONFIG_CLKDIV_Msk        (0x7ff0000UL)             /*!< SARADC_0 CONFIG: CLKDIV (Bitfield-Mask: 0x7ff)        */
#define SARADC_0_CONFIG_SCCIEN_Pos        (27UL)                    /*!< SARADC_0 CONFIG: SCCIEN (Bit 27)                      */
#define SARADC_0_CONFIG_SCCIEN_Msk        (0x8000000UL)             /*!< SARADC_0 CONFIG: SCCIEN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONFIG_SDIEN_Pos         (28UL)                    /*!< SARADC_0 CONFIG: SDIEN (Bit 28)                       */
#define SARADC_0_CONFIG_SDIEN_Msk         (0x10000000UL)            /*!< SARADC_0 CONFIG: SDIEN (Bitfield-Mask: 0x01)          */
#define SARADC_0_CONFIG_FORIEN_Pos        (29UL)                    /*!< SARADC_0 CONFIG: FORIEN (Bit 29)                      */
#define SARADC_0_CONFIG_FORIEN_Msk        (0x20000000UL)            /*!< SARADC_0 CONFIG: FORIEN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONFIG_FURIEN_Pos        (30UL)                    /*!< SARADC_0 CONFIG: FURIEN (Bit 30)                      */
#define SARADC_0_CONFIG_FURIEN_Msk        (0x40000000UL)            /*!< SARADC_0 CONFIG: FURIEN (Bitfield-Mask: 0x01)         */
/* ========================================================  CONTROL  ======================================================== */
#define SARADC_0_CONTROL_REFGNDSEL_Pos    (0UL)                     /*!< SARADC_0 CONTROL: REFGNDSEL (Bit 0)                   */
#define SARADC_0_CONTROL_REFGNDSEL_Msk    (0x1UL)                   /*!< SARADC_0 CONTROL: REFGNDSEL (Bitfield-Mask: 0x01)     */
#define SARADC_0_CONTROL_CLKESEL_Pos      (1UL)                     /*!< SARADC_0 CONTROL: CLKESEL (Bit 1)                     */
#define SARADC_0_CONTROL_CLKESEL_Msk      (0x2UL)                   /*!< SARADC_0 CONTROL: CLKESEL (Bitfield-Mask: 0x01)       */
#define SARADC_0_CONTROL_BMTK_Pos         (2UL)                     /*!< SARADC_0 CONTROL: BMTK (Bit 2)                        */
#define SARADC_0_CONTROL_BMTK_Msk         (0xfcUL)                  /*!< SARADC_0 CONTROL: BMTK (Bitfield-Mask: 0x3f)          */
#define SARADC_0_CONTROL_SCSEL_Pos        (8UL)                     /*!< SARADC_0 CONTROL: SCSEL (Bit 8)                       */
#define SARADC_0_CONTROL_SCSEL_Msk        (0xf00UL)                 /*!< SARADC_0 CONTROL: SCSEL (Bitfield-Mask: 0x0f)         */
#define SARADC_0_CONTROL_PWRTIME_Pos      (12UL)                    /*!< SARADC_0 CONTROL: PWRTIME (Bit 12)                    */
#define SARADC_0_CONTROL_PWRTIME_Msk      (0xf000UL)                /*!< SARADC_0 CONTROL: PWRTIME (Bitfield-Mask: 0x0f)       */
#define SARADC_0_CONTROL_BURSTEN_Pos      (16UL)                    /*!< SARADC_0 CONTROL: BURSTEN (Bit 16)                    */
#define SARADC_0_CONTROL_BURSTEN_Msk      (0x10000UL)               /*!< SARADC_0 CONTROL: BURSTEN (Bitfield-Mask: 0x01)       */
#define SARADC_0_CONTROL_ADCEN_Pos        (17UL)                    /*!< SARADC_0 CONTROL: ADCEN (Bit 17)                      */
#define SARADC_0_CONTROL_ADCEN_Msk        (0x20000UL)               /*!< SARADC_0 CONTROL: ADCEN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONTROL_AD12BSSEL_Pos    (18UL)                    /*!< SARADC_0 CONTROL: AD12BSSEL (Bit 18)                  */
#define SARADC_0_CONTROL_AD12BSSEL_Msk    (0x40000UL)               /*!< SARADC_0 CONTROL: AD12BSSEL (Bitfield-Mask: 0x01)     */
#define SARADC_0_CONTROL_VCMEN_Pos        (19UL)                    /*!< SARADC_0 CONTROL: VCMEN (Bit 19)                      */
#define SARADC_0_CONTROL_VCMEN_Msk        (0x80000UL)               /*!< SARADC_0 CONTROL: VCMEN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONTROL_ACCMD_Pos        (21UL)                    /*!< SARADC_0 CONTROL: ACCMD (Bit 21)                      */
#define SARADC_0_CONTROL_ACCMD_Msk        (0x200000UL)              /*!< SARADC_0 CONTROL: ACCMD (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONTROL_TRKMD_Pos        (22UL)                    /*!< SARADC_0 CONTROL: TRKMD (Bit 22)                      */
#define SARADC_0_CONTROL_TRKMD_Msk        (0x400000UL)              /*!< SARADC_0 CONTROL: TRKMD (Bitfield-Mask: 0x01)         */
#define SARADC_0_CONTROL_ADBUSY_Pos       (23UL)                    /*!< SARADC_0 CONTROL: ADBUSY (Bit 23)                     */
#define SARADC_0_CONTROL_ADBUSY_Msk       (0x800000UL)              /*!< SARADC_0 CONTROL: ADBUSY (Bitfield-Mask: 0x01)        */
#define SARADC_0_CONTROL_BIASSEL_Pos      (24UL)                    /*!< SARADC_0 CONTROL: BIASSEL (Bit 24)                    */
#define SARADC_0_CONTROL_BIASSEL_Msk      (0x3000000UL)             /*!< SARADC_0 CONTROL: BIASSEL (Bitfield-Mask: 0x03)       */
#define SARADC_0_CONTROL_LPMDEN_Pos       (26UL)                    /*!< SARADC_0 CONTROL: LPMDEN (Bit 26)                     */
#define SARADC_0_CONTROL_LPMDEN_Msk       (0x4000000UL)             /*!< SARADC_0 CONTROL: LPMDEN (Bitfield-Mask: 0x01)        */
#define SARADC_0_CONTROL_MREFLPEN_Pos     (27UL)                    /*!< SARADC_0 CONTROL: MREFLPEN (Bit 27)                   */
#define SARADC_0_CONTROL_MREFLPEN_Msk     (0x8000000UL)             /*!< SARADC_0 CONTROL: MREFLPEN (Bitfield-Mask: 0x01)      */
#define SARADC_0_CONTROL_VREFSEL_Pos      (30UL)                    /*!< SARADC_0 CONTROL: VREFSEL (Bit 30)                    */
#define SARADC_0_CONTROL_VREFSEL_Msk      (0xc0000000UL)            /*!< SARADC_0 CONTROL: VREFSEL (Bitfield-Mask: 0x03)       */
/* ========================================================  SQ7654  ========================================================= */
#define SARADC_0_SQ7654_TS4CHR_Pos        (0UL)                     /*!< SARADC_0 SQ7654: TS4CHR (Bit 0)                       */
#define SARADC_0_SQ7654_TS4CHR_Msk        (0x3UL)                   /*!< SARADC_0 SQ7654: TS4CHR (Bitfield-Mask: 0x03)         */
#define SARADC_0_SQ7654_TS4MUX_Pos        (2UL)                     /*!< SARADC_0 SQ7654: TS4MUX (Bit 2)                       */
#define SARADC_0_SQ7654_TS4MUX_Msk        (0x7cUL)                  /*!< SARADC_0 SQ7654: TS4MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_0_SQ7654_TS5CHR_Pos        (8UL)                     /*!< SARADC_0 SQ7654: TS5CHR (Bit 8)                       */
#define SARADC_0_SQ7654_TS5CHR_Msk        (0x300UL)                 /*!< SARADC_0 SQ7654: TS5CHR (Bitfield-Mask: 0x03)         */
#define SARADC_0_SQ7654_TS5MUX_Pos        (10UL)                    /*!< SARADC_0 SQ7654: TS5MUX (Bit 10)                      */
#define SARADC_0_SQ7654_TS5MUX_Msk        (0x7c00UL)                /*!< SARADC_0 SQ7654: TS5MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_0_SQ7654_TS6CHR_Pos        (16UL)                    /*!< SARADC_0 SQ7654: TS6CHR (Bit 16)                      */
#define SARADC_0_SQ7654_TS6CHR_Msk        (0x30000UL)               /*!< SARADC_0 SQ7654: TS6CHR (Bitfield-Mask: 0x03)         */
#define SARADC_0_SQ7654_TS6MUX_Pos        (18UL)                    /*!< SARADC_0 SQ7654: TS6MUX (Bit 18)                      */
#define SARADC_0_SQ7654_TS6MUX_Msk        (0x7c0000UL)              /*!< SARADC_0 SQ7654: TS6MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_0_SQ7654_TS7CHR_Pos        (24UL)                    /*!< SARADC_0 SQ7654: TS7CHR (Bit 24)                      */
#define SARADC_0_SQ7654_TS7CHR_Msk        (0x3000000UL)             /*!< SARADC_0 SQ7654: TS7CHR (Bitfield-Mask: 0x03)         */
#define SARADC_0_SQ7654_TS7MUX_Pos        (26UL)                    /*!< SARADC_0 SQ7654: TS7MUX (Bit 26)                      */
#define SARADC_0_SQ7654_TS7MUX_Msk        (0x7c000000UL)            /*!< SARADC_0 SQ7654: TS7MUX (Bitfield-Mask: 0x1f)         */
/* ========================================================  SQ3210  ========================================================= */
#define SARADC_0_SQ3210_TS0CHR_Pos        (0UL)                     /*!< SARADC_0 SQ3210: TS0CHR (Bit 0)                       */
#define SARADC_0_SQ3210_TS0CHR_Msk        (0x3UL)                   /*!< SARADC_0 SQ3210: TS0CHR (Bitfield-Mask: 0x03)         */
#define SARADC_0_SQ3210_TS0MUX_Pos        (2UL)                     /*!< SARADC_0 SQ3210: TS0MUX (Bit 2)                       */
#define SARADC_0_SQ3210_TS0MUX_Msk        (0x7cUL)                  /*!< SARADC_0 SQ3210: TS0MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_0_SQ3210_TS1CHR_Pos        (8UL)                     /*!< SARADC_0 SQ3210: TS1CHR (Bit 8)                       */
#define SARADC_0_SQ3210_TS1CHR_Msk        (0x300UL)                 /*!< SARADC_0 SQ3210: TS1CHR (Bitfield-Mask: 0x03)         */
#define SARADC_0_SQ3210_TS1MUX_Pos        (10UL)                    /*!< SARADC_0 SQ3210: TS1MUX (Bit 10)                      */
#define SARADC_0_SQ3210_TS1MUX_Msk        (0x7c00UL)                /*!< SARADC_0 SQ3210: TS1MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_0_SQ3210_TS2CHR_Pos        (16UL)                    /*!< SARADC_0 SQ3210: TS2CHR (Bit 16)                      */
#define SARADC_0_SQ3210_TS2CHR_Msk        (0x30000UL)               /*!< SARADC_0 SQ3210: TS2CHR (Bitfield-Mask: 0x03)         */
#define SARADC_0_SQ3210_TS2MUX_Pos        (18UL)                    /*!< SARADC_0 SQ3210: TS2MUX (Bit 18)                      */
#define SARADC_0_SQ3210_TS2MUX_Msk        (0x7c0000UL)              /*!< SARADC_0 SQ3210: TS2MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_0_SQ3210_TS3CHR_Pos        (24UL)                    /*!< SARADC_0 SQ3210: TS3CHR (Bit 24)                      */
#define SARADC_0_SQ3210_TS3CHR_Msk        (0x3000000UL)             /*!< SARADC_0 SQ3210: TS3CHR (Bitfield-Mask: 0x03)         */
#define SARADC_0_SQ3210_TS3MUX_Pos        (26UL)                    /*!< SARADC_0 SQ3210: TS3MUX (Bit 26)                      */
#define SARADC_0_SQ3210_TS3MUX_Msk        (0x7c000000UL)            /*!< SARADC_0 SQ3210: TS3MUX (Bitfield-Mask: 0x1f)         */
/* ========================================================  CHAR32  ========================================================= */
#define SARADC_0_CHAR32_CHR2GN_Pos        (0UL)                     /*!< SARADC_0 CHAR32: CHR2GN (Bit 0)                       */
#define SARADC_0_CHAR32_CHR2GN_Msk        (0x1UL)                   /*!< SARADC_0 CHAR32: CHR2GN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CHAR32_CHR2RPT_Pos       (1UL)                     /*!< SARADC_0 CHAR32: CHR2RPT (Bit 1)                      */
#define SARADC_0_CHAR32_CHR2RPT_Msk       (0xeUL)                   /*!< SARADC_0 CHAR32: CHR2RPT (Bitfield-Mask: 0x07)        */
#define SARADC_0_CHAR32_CHR2LS_Pos        (4UL)                     /*!< SARADC_0 CHAR32: CHR2LS (Bit 4)                       */
#define SARADC_0_CHAR32_CHR2LS_Msk        (0x70UL)                  /*!< SARADC_0 CHAR32: CHR2LS (Bitfield-Mask: 0x07)         */
#define SARADC_0_CHAR32_CHR2RSEL_Pos      (7UL)                     /*!< SARADC_0 CHAR32: CHR2RSEL (Bit 7)                     */
#define SARADC_0_CHAR32_CHR2RSEL_Msk      (0x80UL)                  /*!< SARADC_0 CHAR32: CHR2RSEL (Bitfield-Mask: 0x01)       */
#define SARADC_0_CHAR32_CHR2WCIEN_Pos     (8UL)                     /*!< SARADC_0 CHAR32: CHR2WCIEN (Bit 8)                    */
#define SARADC_0_CHAR32_CHR2WCIEN_Msk     (0x100UL)                 /*!< SARADC_0 CHAR32: CHR2WCIEN (Bitfield-Mask: 0x01)      */
#define SARADC_0_CHAR32_CHR3GN_Pos        (16UL)                    /*!< SARADC_0 CHAR32: CHR3GN (Bit 16)                      */
#define SARADC_0_CHAR32_CHR3GN_Msk        (0x10000UL)               /*!< SARADC_0 CHAR32: CHR3GN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CHAR32_CHR3RPT_Pos       (17UL)                    /*!< SARADC_0 CHAR32: CHR3RPT (Bit 17)                     */
#define SARADC_0_CHAR32_CHR3RPT_Msk       (0xe0000UL)               /*!< SARADC_0 CHAR32: CHR3RPT (Bitfield-Mask: 0x07)        */
#define SARADC_0_CHAR32_CHR3LS_Pos        (20UL)                    /*!< SARADC_0 CHAR32: CHR3LS (Bit 20)                      */
#define SARADC_0_CHAR32_CHR3LS_Msk        (0x700000UL)              /*!< SARADC_0 CHAR32: CHR3LS (Bitfield-Mask: 0x07)         */
#define SARADC_0_CHAR32_CHR3RSEL_Pos      (23UL)                    /*!< SARADC_0 CHAR32: CHR3RSEL (Bit 23)                    */
#define SARADC_0_CHAR32_CHR3RSEL_Msk      (0x800000UL)              /*!< SARADC_0 CHAR32: CHR3RSEL (Bitfield-Mask: 0x01)       */
#define SARADC_0_CHAR32_CHR3WCIEN_Pos     (24UL)                    /*!< SARADC_0 CHAR32: CHR3WCIEN (Bit 24)                   */
#define SARADC_0_CHAR32_CHR3WCIEN_Msk     (0x1000000UL)             /*!< SARADC_0 CHAR32: CHR3WCIEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CHAR10  ========================================================= */
#define SARADC_0_CHAR10_CHR0GN_Pos        (0UL)                     /*!< SARADC_0 CHAR10: CHR0GN (Bit 0)                       */
#define SARADC_0_CHAR10_CHR0GN_Msk        (0x1UL)                   /*!< SARADC_0 CHAR10: CHR0GN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CHAR10_CHR0RPT_Pos       (1UL)                     /*!< SARADC_0 CHAR10: CHR0RPT (Bit 1)                      */
#define SARADC_0_CHAR10_CHR0RPT_Msk       (0xeUL)                   /*!< SARADC_0 CHAR10: CHR0RPT (Bitfield-Mask: 0x07)        */
#define SARADC_0_CHAR10_CHR0LS_Pos        (4UL)                     /*!< SARADC_0 CHAR10: CHR0LS (Bit 4)                       */
#define SARADC_0_CHAR10_CHR0LS_Msk        (0x70UL)                  /*!< SARADC_0 CHAR10: CHR0LS (Bitfield-Mask: 0x07)         */
#define SARADC_0_CHAR10_CHR0RSEL_Pos      (7UL)                     /*!< SARADC_0 CHAR10: CHR0RSEL (Bit 7)                     */
#define SARADC_0_CHAR10_CHR0RSEL_Msk      (0x80UL)                  /*!< SARADC_0 CHAR10: CHR0RSEL (Bitfield-Mask: 0x01)       */
#define SARADC_0_CHAR10_CHR0WCIEN_Pos     (8UL)                     /*!< SARADC_0 CHAR10: CHR0WCIEN (Bit 8)                    */
#define SARADC_0_CHAR10_CHR0WCIEN_Msk     (0x100UL)                 /*!< SARADC_0 CHAR10: CHR0WCIEN (Bitfield-Mask: 0x01)      */
#define SARADC_0_CHAR10_CHR1GN_Pos        (16UL)                    /*!< SARADC_0 CHAR10: CHR1GN (Bit 16)                      */
#define SARADC_0_CHAR10_CHR1GN_Msk        (0x10000UL)               /*!< SARADC_0 CHAR10: CHR1GN (Bitfield-Mask: 0x01)         */
#define SARADC_0_CHAR10_CHR1RPT_Pos       (17UL)                    /*!< SARADC_0 CHAR10: CHR1RPT (Bit 17)                     */
#define SARADC_0_CHAR10_CHR1RPT_Msk       (0xe0000UL)               /*!< SARADC_0 CHAR10: CHR1RPT (Bitfield-Mask: 0x07)        */
#define SARADC_0_CHAR10_CHR1LS_Pos        (20UL)                    /*!< SARADC_0 CHAR10: CHR1LS (Bit 20)                      */
#define SARADC_0_CHAR10_CHR1LS_Msk        (0x700000UL)              /*!< SARADC_0 CHAR10: CHR1LS (Bitfield-Mask: 0x07)         */
#define SARADC_0_CHAR10_CHR1RSEL_Pos      (23UL)                    /*!< SARADC_0 CHAR10: CHR1RSEL (Bit 23)                    */
#define SARADC_0_CHAR10_CHR1RSEL_Msk      (0x800000UL)              /*!< SARADC_0 CHAR10: CHR1RSEL (Bitfield-Mask: 0x01)       */
#define SARADC_0_CHAR10_CHR1WCIEN_Pos     (24UL)                    /*!< SARADC_0 CHAR10: CHR1WCIEN (Bit 24)                   */
#define SARADC_0_CHAR10_CHR1WCIEN_Msk     (0x1000000UL)             /*!< SARADC_0 CHAR10: CHR1WCIEN (Bitfield-Mask: 0x01)      */
/* =========================================================  DATA  ========================================================== */
#define SARADC_0_DATA_DATA_Pos            (0UL)                     /*!< SARADC_0 DATA: DATA (Bit 0)                           */
#define SARADC_0_DATA_DATA_Msk            (0xffffffffUL)            /*!< SARADC_0 DATA: DATA (Bitfield-Mask: 0xffffffff)       */
/* =======================================================  WCLIMITS  ======================================================== */
#define SARADC_0_WCLIMITS_WCLT_Pos        (0UL)                     /*!< SARADC_0 WCLIMITS: WCLT (Bit 0)                       */
#define SARADC_0_WCLIMITS_WCLT_Msk        (0xffffUL)                /*!< SARADC_0 WCLIMITS: WCLT (Bitfield-Mask: 0xffff)       */
#define SARADC_0_WCLIMITS_WCGT_Pos        (16UL)                    /*!< SARADC_0 WCLIMITS: WCGT (Bit 16)                      */
#define SARADC_0_WCLIMITS_WCGT_Msk        (0xffff0000UL)            /*!< SARADC_0 WCLIMITS: WCGT (Bitfield-Mask: 0xffff)       */
/* ==========================================================  ACC  ========================================================== */
#define SARADC_0_ACC_ACC_Pos              (0UL)                     /*!< SARADC_0 ACC: ACC (Bit 0)                             */
#define SARADC_0_ACC_ACC_Msk              (0xffffUL)                /*!< SARADC_0 ACC: ACC (Bitfield-Mask: 0xffff)             */
/* ========================================================  STATUS  ========================================================= */
#define SARADC_0_STATUS_WCI_Pos           (0UL)                     /*!< SARADC_0 STATUS: WCI (Bit 0)                          */
#define SARADC_0_STATUS_WCI_Msk           (0x1UL)                   /*!< SARADC_0 STATUS: WCI (Bitfield-Mask: 0x01)            */
#define SARADC_0_STATUS_SCCI_Pos          (1UL)                     /*!< SARADC_0 STATUS: SCCI (Bit 1)                         */
#define SARADC_0_STATUS_SCCI_Msk          (0x2UL)                   /*!< SARADC_0 STATUS: SCCI (Bitfield-Mask: 0x01)           */
#define SARADC_0_STATUS_SDI_Pos           (2UL)                     /*!< SARADC_0 STATUS: SDI (Bit 2)                          */
#define SARADC_0_STATUS_SDI_Msk           (0x4UL)                   /*!< SARADC_0 STATUS: SDI (Bitfield-Mask: 0x01)            */
#define SARADC_0_STATUS_FORI_Pos          (3UL)                     /*!< SARADC_0 STATUS: FORI (Bit 3)                         */
#define SARADC_0_STATUS_FORI_Msk          (0x8UL)                   /*!< SARADC_0 STATUS: FORI (Bitfield-Mask: 0x01)           */
#define SARADC_0_STATUS_FURI_Pos          (4UL)                     /*!< SARADC_0 STATUS: FURI (Bit 4)                         */
#define SARADC_0_STATUS_FURI_Msk          (0x10UL)                  /*!< SARADC_0 STATUS: FURI (Bitfield-Mask: 0x01)           */
/* ======================================================  FIFOSTATUS  ======================================================= */
#define SARADC_0_FIFOSTATUS_FIFOLVL_Pos   (0UL)                     /*!< SARADC_0 FIFOSTATUS: FIFOLVL (Bit 0)                  */
#define SARADC_0_FIFOSTATUS_FIFOLVL_Msk   (0xfUL)                   /*!< SARADC_0 FIFOSTATUS: FIFOLVL (Bitfield-Mask: 0x0f)    */
#define SARADC_0_FIFOSTATUS_DPSTS_Pos     (4UL)                     /*!< SARADC_0 FIFOSTATUS: DPSTS (Bit 4)                    */
#define SARADC_0_FIFOSTATUS_DPSTS_Msk     (0x10UL)                  /*!< SARADC_0 FIFOSTATUS: DPSTS (Bitfield-Mask: 0x01)      */
#define SARADC_0_FIFOSTATUS_DRDYF_Pos     (5UL)                     /*!< SARADC_0 FIFOSTATUS: DRDYF (Bit 5)                    */
#define SARADC_0_FIFOSTATUS_DRDYF_Msk     (0x20UL)                  /*!< SARADC_0 FIFOSTATUS: DRDYF (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                         SARADC_1                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define SARADC_1_CONFIG_SPSEL_Pos         (0UL)                     /*!< SARADC_1 CONFIG: SPSEL (Bit 0)                        */
#define SARADC_1_CONFIG_SPSEL_Msk         (0xfUL)                   /*!< SARADC_1 CONFIG: SPSEL (Bitfield-Mask: 0x0f)          */
#define SARADC_1_CONFIG_SPEN_Pos          (4UL)                     /*!< SARADC_1 CONFIG: SPEN (Bit 4)                         */
#define SARADC_1_CONFIG_SPEN_Msk          (0x10UL)                  /*!< SARADC_1 CONFIG: SPEN (Bitfield-Mask: 0x01)           */
#define SARADC_1_CONFIG_SSGEN_Pos         (5UL)                     /*!< SARADC_1 CONFIG: SSGEN (Bit 5)                        */
#define SARADC_1_CONFIG_SSGEN_Msk         (0x20UL)                  /*!< SARADC_1 CONFIG: SSGEN (Bitfield-Mask: 0x01)          */
#define SARADC_1_CONFIG_PACKMD_Pos        (6UL)                     /*!< SARADC_1 CONFIG: PACKMD (Bit 6)                       */
#define SARADC_1_CONFIG_PACKMD_Msk        (0xc0UL)                  /*!< SARADC_1 CONFIG: PACKMD (Bitfield-Mask: 0x03)         */
#define SARADC_1_CONFIG_SIMCEN_Pos        (8UL)                     /*!< SARADC_1 CONFIG: SIMCEN (Bit 8)                       */
#define SARADC_1_CONFIG_SIMCEN_Msk        (0x100UL)                 /*!< SARADC_1 CONFIG: SIMCEN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONFIG_INTLVEN_Pos       (9UL)                     /*!< SARADC_1 CONFIG: INTLVEN (Bit 9)                      */
#define SARADC_1_CONFIG_INTLVEN_Msk       (0x200UL)                 /*!< SARADC_1 CONFIG: INTLVEN (Bitfield-Mask: 0x01)        */
#define SARADC_1_CONFIG_SCANEN_Pos        (10UL)                    /*!< SARADC_1 CONFIG: SCANEN (Bit 10)                      */
#define SARADC_1_CONFIG_SCANEN_Msk        (0x400UL)                 /*!< SARADC_1 CONFIG: SCANEN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONFIG_SCANMD_Pos        (12UL)                    /*!< SARADC_1 CONFIG: SCANMD (Bit 12)                      */
#define SARADC_1_CONFIG_SCANMD_Msk        (0x1000UL)                /*!< SARADC_1 CONFIG: SCANMD (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONFIG_DMAEN_Pos         (14UL)                    /*!< SARADC_1 CONFIG: DMAEN (Bit 14)                       */
#define SARADC_1_CONFIG_DMAEN_Msk         (0x4000UL)                /*!< SARADC_1 CONFIG: DMAEN (Bitfield-Mask: 0x01)          */
#define SARADC_1_CONFIG_BCLKSEL_Pos       (15UL)                    /*!< SARADC_1 CONFIG: BCLKSEL (Bit 15)                     */
#define SARADC_1_CONFIG_BCLKSEL_Msk       (0x8000UL)                /*!< SARADC_1 CONFIG: BCLKSEL (Bitfield-Mask: 0x01)        */
#define SARADC_1_CONFIG_CLKDIV_Pos        (16UL)                    /*!< SARADC_1 CONFIG: CLKDIV (Bit 16)                      */
#define SARADC_1_CONFIG_CLKDIV_Msk        (0x7ff0000UL)             /*!< SARADC_1 CONFIG: CLKDIV (Bitfield-Mask: 0x7ff)        */
#define SARADC_1_CONFIG_SCCIEN_Pos        (27UL)                    /*!< SARADC_1 CONFIG: SCCIEN (Bit 27)                      */
#define SARADC_1_CONFIG_SCCIEN_Msk        (0x8000000UL)             /*!< SARADC_1 CONFIG: SCCIEN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONFIG_SDIEN_Pos         (28UL)                    /*!< SARADC_1 CONFIG: SDIEN (Bit 28)                       */
#define SARADC_1_CONFIG_SDIEN_Msk         (0x10000000UL)            /*!< SARADC_1 CONFIG: SDIEN (Bitfield-Mask: 0x01)          */
#define SARADC_1_CONFIG_FORIEN_Pos        (29UL)                    /*!< SARADC_1 CONFIG: FORIEN (Bit 29)                      */
#define SARADC_1_CONFIG_FORIEN_Msk        (0x20000000UL)            /*!< SARADC_1 CONFIG: FORIEN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONFIG_FURIEN_Pos        (30UL)                    /*!< SARADC_1 CONFIG: FURIEN (Bit 30)                      */
#define SARADC_1_CONFIG_FURIEN_Msk        (0x40000000UL)            /*!< SARADC_1 CONFIG: FURIEN (Bitfield-Mask: 0x01)         */
/* ========================================================  CONTROL  ======================================================== */
#define SARADC_1_CONTROL_REFGNDSEL_Pos    (0UL)                     /*!< SARADC_1 CONTROL: REFGNDSEL (Bit 0)                   */
#define SARADC_1_CONTROL_REFGNDSEL_Msk    (0x1UL)                   /*!< SARADC_1 CONTROL: REFGNDSEL (Bitfield-Mask: 0x01)     */
#define SARADC_1_CONTROL_CLKESEL_Pos      (1UL)                     /*!< SARADC_1 CONTROL: CLKESEL (Bit 1)                     */
#define SARADC_1_CONTROL_CLKESEL_Msk      (0x2UL)                   /*!< SARADC_1 CONTROL: CLKESEL (Bitfield-Mask: 0x01)       */
#define SARADC_1_CONTROL_BMTK_Pos         (2UL)                     /*!< SARADC_1 CONTROL: BMTK (Bit 2)                        */
#define SARADC_1_CONTROL_BMTK_Msk         (0xfcUL)                  /*!< SARADC_1 CONTROL: BMTK (Bitfield-Mask: 0x3f)          */
#define SARADC_1_CONTROL_SCSEL_Pos        (8UL)                     /*!< SARADC_1 CONTROL: SCSEL (Bit 8)                       */
#define SARADC_1_CONTROL_SCSEL_Msk        (0xf00UL)                 /*!< SARADC_1 CONTROL: SCSEL (Bitfield-Mask: 0x0f)         */
#define SARADC_1_CONTROL_PWRTIME_Pos      (12UL)                    /*!< SARADC_1 CONTROL: PWRTIME (Bit 12)                    */
#define SARADC_1_CONTROL_PWRTIME_Msk      (0xf000UL)                /*!< SARADC_1 CONTROL: PWRTIME (Bitfield-Mask: 0x0f)       */
#define SARADC_1_CONTROL_BURSTEN_Pos      (16UL)                    /*!< SARADC_1 CONTROL: BURSTEN (Bit 16)                    */
#define SARADC_1_CONTROL_BURSTEN_Msk      (0x10000UL)               /*!< SARADC_1 CONTROL: BURSTEN (Bitfield-Mask: 0x01)       */
#define SARADC_1_CONTROL_ADCEN_Pos        (17UL)                    /*!< SARADC_1 CONTROL: ADCEN (Bit 17)                      */
#define SARADC_1_CONTROL_ADCEN_Msk        (0x20000UL)               /*!< SARADC_1 CONTROL: ADCEN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONTROL_AD12BSSEL_Pos    (18UL)                    /*!< SARADC_1 CONTROL: AD12BSSEL (Bit 18)                  */
#define SARADC_1_CONTROL_AD12BSSEL_Msk    (0x40000UL)               /*!< SARADC_1 CONTROL: AD12BSSEL (Bitfield-Mask: 0x01)     */
#define SARADC_1_CONTROL_VCMEN_Pos        (19UL)                    /*!< SARADC_1 CONTROL: VCMEN (Bit 19)                      */
#define SARADC_1_CONTROL_VCMEN_Msk        (0x80000UL)               /*!< SARADC_1 CONTROL: VCMEN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONTROL_ACCMD_Pos        (21UL)                    /*!< SARADC_1 CONTROL: ACCMD (Bit 21)                      */
#define SARADC_1_CONTROL_ACCMD_Msk        (0x200000UL)              /*!< SARADC_1 CONTROL: ACCMD (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONTROL_TRKMD_Pos        (22UL)                    /*!< SARADC_1 CONTROL: TRKMD (Bit 22)                      */
#define SARADC_1_CONTROL_TRKMD_Msk        (0x400000UL)              /*!< SARADC_1 CONTROL: TRKMD (Bitfield-Mask: 0x01)         */
#define SARADC_1_CONTROL_ADBUSY_Pos       (23UL)                    /*!< SARADC_1 CONTROL: ADBUSY (Bit 23)                     */
#define SARADC_1_CONTROL_ADBUSY_Msk       (0x800000UL)              /*!< SARADC_1 CONTROL: ADBUSY (Bitfield-Mask: 0x01)        */
#define SARADC_1_CONTROL_BIASSEL_Pos      (24UL)                    /*!< SARADC_1 CONTROL: BIASSEL (Bit 24)                    */
#define SARADC_1_CONTROL_BIASSEL_Msk      (0x3000000UL)             /*!< SARADC_1 CONTROL: BIASSEL (Bitfield-Mask: 0x03)       */
#define SARADC_1_CONTROL_LPMDEN_Pos       (26UL)                    /*!< SARADC_1 CONTROL: LPMDEN (Bit 26)                     */
#define SARADC_1_CONTROL_LPMDEN_Msk       (0x4000000UL)             /*!< SARADC_1 CONTROL: LPMDEN (Bitfield-Mask: 0x01)        */
#define SARADC_1_CONTROL_MREFLPEN_Pos     (27UL)                    /*!< SARADC_1 CONTROL: MREFLPEN (Bit 27)                   */
#define SARADC_1_CONTROL_MREFLPEN_Msk     (0x8000000UL)             /*!< SARADC_1 CONTROL: MREFLPEN (Bitfield-Mask: 0x01)      */
#define SARADC_1_CONTROL_VREFSEL_Pos      (30UL)                    /*!< SARADC_1 CONTROL: VREFSEL (Bit 30)                    */
#define SARADC_1_CONTROL_VREFSEL_Msk      (0xc0000000UL)            /*!< SARADC_1 CONTROL: VREFSEL (Bitfield-Mask: 0x03)       */
/* ========================================================  SQ7654  ========================================================= */
#define SARADC_1_SQ7654_TS4CHR_Pos        (0UL)                     /*!< SARADC_1 SQ7654: TS4CHR (Bit 0)                       */
#define SARADC_1_SQ7654_TS4CHR_Msk        (0x3UL)                   /*!< SARADC_1 SQ7654: TS4CHR (Bitfield-Mask: 0x03)         */
#define SARADC_1_SQ7654_TS4MUX_Pos        (2UL)                     /*!< SARADC_1 SQ7654: TS4MUX (Bit 2)                       */
#define SARADC_1_SQ7654_TS4MUX_Msk        (0x7cUL)                  /*!< SARADC_1 SQ7654: TS4MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_1_SQ7654_TS5CHR_Pos        (8UL)                     /*!< SARADC_1 SQ7654: TS5CHR (Bit 8)                       */
#define SARADC_1_SQ7654_TS5CHR_Msk        (0x300UL)                 /*!< SARADC_1 SQ7654: TS5CHR (Bitfield-Mask: 0x03)         */
#define SARADC_1_SQ7654_TS5MUX_Pos        (10UL)                    /*!< SARADC_1 SQ7654: TS5MUX (Bit 10)                      */
#define SARADC_1_SQ7654_TS5MUX_Msk        (0x7c00UL)                /*!< SARADC_1 SQ7654: TS5MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_1_SQ7654_TS6CHR_Pos        (16UL)                    /*!< SARADC_1 SQ7654: TS6CHR (Bit 16)                      */
#define SARADC_1_SQ7654_TS6CHR_Msk        (0x30000UL)               /*!< SARADC_1 SQ7654: TS6CHR (Bitfield-Mask: 0x03)         */
#define SARADC_1_SQ7654_TS6MUX_Pos        (18UL)                    /*!< SARADC_1 SQ7654: TS6MUX (Bit 18)                      */
#define SARADC_1_SQ7654_TS6MUX_Msk        (0x7c0000UL)              /*!< SARADC_1 SQ7654: TS6MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_1_SQ7654_TS7CHR_Pos        (24UL)                    /*!< SARADC_1 SQ7654: TS7CHR (Bit 24)                      */
#define SARADC_1_SQ7654_TS7CHR_Msk        (0x3000000UL)             /*!< SARADC_1 SQ7654: TS7CHR (Bitfield-Mask: 0x03)         */
#define SARADC_1_SQ7654_TS7MUX_Pos        (26UL)                    /*!< SARADC_1 SQ7654: TS7MUX (Bit 26)                      */
#define SARADC_1_SQ7654_TS7MUX_Msk        (0x7c000000UL)            /*!< SARADC_1 SQ7654: TS7MUX (Bitfield-Mask: 0x1f)         */
/* ========================================================  SQ3210  ========================================================= */
#define SARADC_1_SQ3210_TS0CHR_Pos        (0UL)                     /*!< SARADC_1 SQ3210: TS0CHR (Bit 0)                       */
#define SARADC_1_SQ3210_TS0CHR_Msk        (0x3UL)                   /*!< SARADC_1 SQ3210: TS0CHR (Bitfield-Mask: 0x03)         */
#define SARADC_1_SQ3210_TS0MUX_Pos        (2UL)                     /*!< SARADC_1 SQ3210: TS0MUX (Bit 2)                       */
#define SARADC_1_SQ3210_TS0MUX_Msk        (0x7cUL)                  /*!< SARADC_1 SQ3210: TS0MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_1_SQ3210_TS1CHR_Pos        (8UL)                     /*!< SARADC_1 SQ3210: TS1CHR (Bit 8)                       */
#define SARADC_1_SQ3210_TS1CHR_Msk        (0x300UL)                 /*!< SARADC_1 SQ3210: TS1CHR (Bitfield-Mask: 0x03)         */
#define SARADC_1_SQ3210_TS1MUX_Pos        (10UL)                    /*!< SARADC_1 SQ3210: TS1MUX (Bit 10)                      */
#define SARADC_1_SQ3210_TS1MUX_Msk        (0x7c00UL)                /*!< SARADC_1 SQ3210: TS1MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_1_SQ3210_TS2CHR_Pos        (16UL)                    /*!< SARADC_1 SQ3210: TS2CHR (Bit 16)                      */
#define SARADC_1_SQ3210_TS2CHR_Msk        (0x30000UL)               /*!< SARADC_1 SQ3210: TS2CHR (Bitfield-Mask: 0x03)         */
#define SARADC_1_SQ3210_TS2MUX_Pos        (18UL)                    /*!< SARADC_1 SQ3210: TS2MUX (Bit 18)                      */
#define SARADC_1_SQ3210_TS2MUX_Msk        (0x7c0000UL)              /*!< SARADC_1 SQ3210: TS2MUX (Bitfield-Mask: 0x1f)         */
#define SARADC_1_SQ3210_TS3CHR_Pos        (24UL)                    /*!< SARADC_1 SQ3210: TS3CHR (Bit 24)                      */
#define SARADC_1_SQ3210_TS3CHR_Msk        (0x3000000UL)             /*!< SARADC_1 SQ3210: TS3CHR (Bitfield-Mask: 0x03)         */
#define SARADC_1_SQ3210_TS3MUX_Pos        (26UL)                    /*!< SARADC_1 SQ3210: TS3MUX (Bit 26)                      */
#define SARADC_1_SQ3210_TS3MUX_Msk        (0x7c000000UL)            /*!< SARADC_1 SQ3210: TS3MUX (Bitfield-Mask: 0x1f)         */
/* ========================================================  CHAR32  ========================================================= */
#define SARADC_1_CHAR32_CHR2GN_Pos        (0UL)                     /*!< SARADC_1 CHAR32: CHR2GN (Bit 0)                       */
#define SARADC_1_CHAR32_CHR2GN_Msk        (0x1UL)                   /*!< SARADC_1 CHAR32: CHR2GN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CHAR32_CHR2RPT_Pos       (1UL)                     /*!< SARADC_1 CHAR32: CHR2RPT (Bit 1)                      */
#define SARADC_1_CHAR32_CHR2RPT_Msk       (0xeUL)                   /*!< SARADC_1 CHAR32: CHR2RPT (Bitfield-Mask: 0x07)        */
#define SARADC_1_CHAR32_CHR2LS_Pos        (4UL)                     /*!< SARADC_1 CHAR32: CHR2LS (Bit 4)                       */
#define SARADC_1_CHAR32_CHR2LS_Msk        (0x70UL)                  /*!< SARADC_1 CHAR32: CHR2LS (Bitfield-Mask: 0x07)         */
#define SARADC_1_CHAR32_CHR2RSEL_Pos      (7UL)                     /*!< SARADC_1 CHAR32: CHR2RSEL (Bit 7)                     */
#define SARADC_1_CHAR32_CHR2RSEL_Msk      (0x80UL)                  /*!< SARADC_1 CHAR32: CHR2RSEL (Bitfield-Mask: 0x01)       */
#define SARADC_1_CHAR32_CHR2WCIEN_Pos     (8UL)                     /*!< SARADC_1 CHAR32: CHR2WCIEN (Bit 8)                    */
#define SARADC_1_CHAR32_CHR2WCIEN_Msk     (0x100UL)                 /*!< SARADC_1 CHAR32: CHR2WCIEN (Bitfield-Mask: 0x01)      */
#define SARADC_1_CHAR32_CHR3GN_Pos        (16UL)                    /*!< SARADC_1 CHAR32: CHR3GN (Bit 16)                      */
#define SARADC_1_CHAR32_CHR3GN_Msk        (0x10000UL)               /*!< SARADC_1 CHAR32: CHR3GN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CHAR32_CHR3RPT_Pos       (17UL)                    /*!< SARADC_1 CHAR32: CHR3RPT (Bit 17)                     */
#define SARADC_1_CHAR32_CHR3RPT_Msk       (0xe0000UL)               /*!< SARADC_1 CHAR32: CHR3RPT (Bitfield-Mask: 0x07)        */
#define SARADC_1_CHAR32_CHR3LS_Pos        (20UL)                    /*!< SARADC_1 CHAR32: CHR3LS (Bit 20)                      */
#define SARADC_1_CHAR32_CHR3LS_Msk        (0x700000UL)              /*!< SARADC_1 CHAR32: CHR3LS (Bitfield-Mask: 0x07)         */
#define SARADC_1_CHAR32_CHR3RSEL_Pos      (23UL)                    /*!< SARADC_1 CHAR32: CHR3RSEL (Bit 23)                    */
#define SARADC_1_CHAR32_CHR3RSEL_Msk      (0x800000UL)              /*!< SARADC_1 CHAR32: CHR3RSEL (Bitfield-Mask: 0x01)       */
#define SARADC_1_CHAR32_CHR3WCIEN_Pos     (24UL)                    /*!< SARADC_1 CHAR32: CHR3WCIEN (Bit 24)                   */
#define SARADC_1_CHAR32_CHR3WCIEN_Msk     (0x1000000UL)             /*!< SARADC_1 CHAR32: CHR3WCIEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CHAR10  ========================================================= */
#define SARADC_1_CHAR10_CHR0GN_Pos        (0UL)                     /*!< SARADC_1 CHAR10: CHR0GN (Bit 0)                       */
#define SARADC_1_CHAR10_CHR0GN_Msk        (0x1UL)                   /*!< SARADC_1 CHAR10: CHR0GN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CHAR10_CHR0RPT_Pos       (1UL)                     /*!< SARADC_1 CHAR10: CHR0RPT (Bit 1)                      */
#define SARADC_1_CHAR10_CHR0RPT_Msk       (0xeUL)                   /*!< SARADC_1 CHAR10: CHR0RPT (Bitfield-Mask: 0x07)        */
#define SARADC_1_CHAR10_CHR0LS_Pos        (4UL)                     /*!< SARADC_1 CHAR10: CHR0LS (Bit 4)                       */
#define SARADC_1_CHAR10_CHR0LS_Msk        (0x70UL)                  /*!< SARADC_1 CHAR10: CHR0LS (Bitfield-Mask: 0x07)         */
#define SARADC_1_CHAR10_CHR0RSEL_Pos      (7UL)                     /*!< SARADC_1 CHAR10: CHR0RSEL (Bit 7)                     */
#define SARADC_1_CHAR10_CHR0RSEL_Msk      (0x80UL)                  /*!< SARADC_1 CHAR10: CHR0RSEL (Bitfield-Mask: 0x01)       */
#define SARADC_1_CHAR10_CHR0WCIEN_Pos     (8UL)                     /*!< SARADC_1 CHAR10: CHR0WCIEN (Bit 8)                    */
#define SARADC_1_CHAR10_CHR0WCIEN_Msk     (0x100UL)                 /*!< SARADC_1 CHAR10: CHR0WCIEN (Bitfield-Mask: 0x01)      */
#define SARADC_1_CHAR10_CHR1GN_Pos        (16UL)                    /*!< SARADC_1 CHAR10: CHR1GN (Bit 16)                      */
#define SARADC_1_CHAR10_CHR1GN_Msk        (0x10000UL)               /*!< SARADC_1 CHAR10: CHR1GN (Bitfield-Mask: 0x01)         */
#define SARADC_1_CHAR10_CHR1RPT_Pos       (17UL)                    /*!< SARADC_1 CHAR10: CHR1RPT (Bit 17)                     */
#define SARADC_1_CHAR10_CHR1RPT_Msk       (0xe0000UL)               /*!< SARADC_1 CHAR10: CHR1RPT (Bitfield-Mask: 0x07)        */
#define SARADC_1_CHAR10_CHR1LS_Pos        (20UL)                    /*!< SARADC_1 CHAR10: CHR1LS (Bit 20)                      */
#define SARADC_1_CHAR10_CHR1LS_Msk        (0x700000UL)              /*!< SARADC_1 CHAR10: CHR1LS (Bitfield-Mask: 0x07)         */
#define SARADC_1_CHAR10_CHR1RSEL_Pos      (23UL)                    /*!< SARADC_1 CHAR10: CHR1RSEL (Bit 23)                    */
#define SARADC_1_CHAR10_CHR1RSEL_Msk      (0x800000UL)              /*!< SARADC_1 CHAR10: CHR1RSEL (Bitfield-Mask: 0x01)       */
#define SARADC_1_CHAR10_CHR1WCIEN_Pos     (24UL)                    /*!< SARADC_1 CHAR10: CHR1WCIEN (Bit 24)                   */
#define SARADC_1_CHAR10_CHR1WCIEN_Msk     (0x1000000UL)             /*!< SARADC_1 CHAR10: CHR1WCIEN (Bitfield-Mask: 0x01)      */
/* =========================================================  DATA  ========================================================== */
#define SARADC_1_DATA_DATA_Pos            (0UL)                     /*!< SARADC_1 DATA: DATA (Bit 0)                           */
#define SARADC_1_DATA_DATA_Msk            (0xffffffffUL)            /*!< SARADC_1 DATA: DATA (Bitfield-Mask: 0xffffffff)       */
/* =======================================================  WCLIMITS  ======================================================== */
#define SARADC_1_WCLIMITS_WCLT_Pos        (0UL)                     /*!< SARADC_1 WCLIMITS: WCLT (Bit 0)                       */
#define SARADC_1_WCLIMITS_WCLT_Msk        (0xffffUL)                /*!< SARADC_1 WCLIMITS: WCLT (Bitfield-Mask: 0xffff)       */
#define SARADC_1_WCLIMITS_WCGT_Pos        (16UL)                    /*!< SARADC_1 WCLIMITS: WCGT (Bit 16)                      */
#define SARADC_1_WCLIMITS_WCGT_Msk        (0xffff0000UL)            /*!< SARADC_1 WCLIMITS: WCGT (Bitfield-Mask: 0xffff)       */
/* ==========================================================  ACC  ========================================================== */
#define SARADC_1_ACC_ACC_Pos              (0UL)                     /*!< SARADC_1 ACC: ACC (Bit 0)                             */
#define SARADC_1_ACC_ACC_Msk              (0xffffUL)                /*!< SARADC_1 ACC: ACC (Bitfield-Mask: 0xffff)             */
/* ========================================================  STATUS  ========================================================= */
#define SARADC_1_STATUS_WCI_Pos           (0UL)                     /*!< SARADC_1 STATUS: WCI (Bit 0)                          */
#define SARADC_1_STATUS_WCI_Msk           (0x1UL)                   /*!< SARADC_1 STATUS: WCI (Bitfield-Mask: 0x01)            */
#define SARADC_1_STATUS_SCCI_Pos          (1UL)                     /*!< SARADC_1 STATUS: SCCI (Bit 1)                         */
#define SARADC_1_STATUS_SCCI_Msk          (0x2UL)                   /*!< SARADC_1 STATUS: SCCI (Bitfield-Mask: 0x01)           */
#define SARADC_1_STATUS_SDI_Pos           (2UL)                     /*!< SARADC_1 STATUS: SDI (Bit 2)                          */
#define SARADC_1_STATUS_SDI_Msk           (0x4UL)                   /*!< SARADC_1 STATUS: SDI (Bitfield-Mask: 0x01)            */
#define SARADC_1_STATUS_FORI_Pos          (3UL)                     /*!< SARADC_1 STATUS: FORI (Bit 3)                         */
#define SARADC_1_STATUS_FORI_Msk          (0x8UL)                   /*!< SARADC_1 STATUS: FORI (Bitfield-Mask: 0x01)           */
#define SARADC_1_STATUS_FURI_Pos          (4UL)                     /*!< SARADC_1 STATUS: FURI (Bit 4)                         */
#define SARADC_1_STATUS_FURI_Msk          (0x10UL)                  /*!< SARADC_1 STATUS: FURI (Bitfield-Mask: 0x01)           */
/* ======================================================  FIFOSTATUS  ======================================================= */
#define SARADC_1_FIFOSTATUS_FIFOLVL_Pos   (0UL)                     /*!< SARADC_1 FIFOSTATUS: FIFOLVL (Bit 0)                  */
#define SARADC_1_FIFOSTATUS_FIFOLVL_Msk   (0xfUL)                   /*!< SARADC_1 FIFOSTATUS: FIFOLVL (Bitfield-Mask: 0x0f)    */
#define SARADC_1_FIFOSTATUS_DPSTS_Pos     (4UL)                     /*!< SARADC_1 FIFOSTATUS: DPSTS (Bit 4)                    */
#define SARADC_1_FIFOSTATUS_DPSTS_Msk     (0x10UL)                  /*!< SARADC_1 FIFOSTATUS: DPSTS (Bitfield-Mask: 0x01)      */
#define SARADC_1_FIFOSTATUS_DRDYF_Pos     (5UL)                     /*!< SARADC_1 FIFOSTATUS: DRDYF (Bit 5)                    */
#define SARADC_1_FIFOSTATUS_DRDYF_Msk     (0x20UL)                  /*!< SARADC_1 FIFOSTATUS: DRDYF (Bitfield-Mask: 0x01)      */


/* =========================================================================================================================== */
/* ================                                           AES_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define AES_0_CONTROL_XFRSTA_Pos          (0UL)                     /*!< AES_0 CONTROL: XFRSTA (Bit 0)                         */
#define AES_0_CONTROL_XFRSTA_Msk          (0x1UL)                   /*!< AES_0 CONTROL: XFRSTA (Bitfield-Mask: 0x01)           */
#define AES_0_CONTROL_KEYCPEN_Pos         (1UL)                     /*!< AES_0 CONTROL: KEYCPEN (Bit 1)                        */
#define AES_0_CONTROL_KEYCPEN_Msk         (0x2UL)                   /*!< AES_0 CONTROL: KEYCPEN (Bitfield-Mask: 0x01)          */
#define AES_0_CONTROL_EDMD_Pos            (2UL)                     /*!< AES_0 CONTROL: EDMD (Bit 2)                           */
#define AES_0_CONTROL_EDMD_Msk            (0x4UL)                   /*!< AES_0 CONTROL: EDMD (Bitfield-Mask: 0x01)             */
#define AES_0_CONTROL_SWMDEN_Pos          (8UL)                     /*!< AES_0 CONTROL: SWMDEN (Bit 8)                         */
#define AES_0_CONTROL_SWMDEN_Msk          (0x100UL)                 /*!< AES_0 CONTROL: SWMDEN (Bitfield-Mask: 0x01)           */
#define AES_0_CONTROL_BEN_Pos             (9UL)                     /*!< AES_0 CONTROL: BEN (Bit 9)                            */
#define AES_0_CONTROL_BEN_Msk             (0x200UL)                 /*!< AES_0 CONTROL: BEN (Bitfield-Mask: 0x01)              */
#define AES_0_CONTROL_XOREN_Pos           (10UL)                    /*!< AES_0 CONTROL: XOREN (Bit 10)                         */
#define AES_0_CONTROL_XOREN_Msk           (0xc00UL)                 /*!< AES_0 CONTROL: XOREN (Bitfield-Mask: 0x03)            */
#define AES_0_CONTROL_HCTREN_Pos          (12UL)                    /*!< AES_0 CONTROL: HCTREN (Bit 12)                        */
#define AES_0_CONTROL_HCTREN_Msk          (0x1000UL)                /*!< AES_0 CONTROL: HCTREN (Bitfield-Mask: 0x01)           */
#define AES_0_CONTROL_HCBCEN_Pos          (13UL)                    /*!< AES_0 CONTROL: HCBCEN (Bit 13)                        */
#define AES_0_CONTROL_HCBCEN_Msk          (0x2000UL)                /*!< AES_0 CONTROL: HCBCEN (Bitfield-Mask: 0x01)           */
#define AES_0_CONTROL_KEYSIZE_Pos         (16UL)                    /*!< AES_0 CONTROL: KEYSIZE (Bit 16)                       */
#define AES_0_CONTROL_KEYSIZE_Msk         (0x30000UL)               /*!< AES_0 CONTROL: KEYSIZE (Bitfield-Mask: 0x03)          */
#define AES_0_CONTROL_ERRIEN_Pos          (24UL)                    /*!< AES_0 CONTROL: ERRIEN (Bit 24)                        */
#define AES_0_CONTROL_ERRIEN_Msk          (0x1000000UL)             /*!< AES_0 CONTROL: ERRIEN (Bitfield-Mask: 0x01)           */
#define AES_0_CONTROL_OCIEN_Pos           (25UL)                    /*!< AES_0 CONTROL: OCIEN (Bit 25)                         */
#define AES_0_CONTROL_OCIEN_Msk           (0x2000000UL)             /*!< AES_0 CONTROL: OCIEN (Bitfield-Mask: 0x01)            */
#define AES_0_CONTROL_DBGMD_Pos           (30UL)                    /*!< AES_0 CONTROL: DBGMD (Bit 30)                         */
#define AES_0_CONTROL_DBGMD_Msk           (0x40000000UL)            /*!< AES_0 CONTROL: DBGMD (Bitfield-Mask: 0x01)            */
#define AES_0_CONTROL_RESET_Pos           (31UL)                    /*!< AES_0 CONTROL: RESET (Bit 31)                         */
#define AES_0_CONTROL_RESET_Msk           (0x80000000UL)            /*!< AES_0 CONTROL: RESET (Bitfield-Mask: 0x01)            */
/* ========================================================  XFRSIZE  ======================================================== */
#define AES_0_XFRSIZE_XFRSIZE_Pos         (0UL)                     /*!< AES_0 XFRSIZE: XFRSIZE (Bit 0)                        */
#define AES_0_XFRSIZE_XFRSIZE_Msk         (0x7ffUL)                 /*!< AES_0 XFRSIZE: XFRSIZE (Bitfield-Mask: 0x7ff)         */
/* =======================================================  DATAFIFO  ======================================================== */
#define AES_0_DATAFIFO_DATAFIFO_Pos       (0UL)                     /*!< AES_0 DATAFIFO: DATAFIFO (Bit 0)                      */
#define AES_0_DATAFIFO_DATAFIFO_Msk       (0xffffffffUL)            /*!< AES_0 DATAFIFO: DATAFIFO (Bitfield-Mask: 0xffffffff)  */
/* ========================================================  XORFIFO  ======================================================== */
#define AES_0_XORFIFO_XORFIFO_Pos         (0UL)                     /*!< AES_0 XORFIFO: XORFIFO (Bit 0)                        */
#define AES_0_XORFIFO_XORFIFO_Msk         (0xffffffffUL)            /*!< AES_0 XORFIFO: XORFIFO (Bitfield-Mask: 0xffffffff)    */
/* ========================================================  HWKEY0  ========================================================= */
#define AES_0_HWKEY0_HWKEY0_Pos           (0UL)                     /*!< AES_0 HWKEY0: HWKEY0 (Bit 0)                          */
#define AES_0_HWKEY0_HWKEY0_Msk           (0xffffffffUL)            /*!< AES_0 HWKEY0: HWKEY0 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWKEY1  ========================================================= */
#define AES_0_HWKEY1_HWKEY1_Pos           (0UL)                     /*!< AES_0 HWKEY1: HWKEY1 (Bit 0)                          */
#define AES_0_HWKEY1_HWKEY1_Msk           (0xffffffffUL)            /*!< AES_0 HWKEY1: HWKEY1 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWKEY2  ========================================================= */
#define AES_0_HWKEY2_HWKEY2_Pos           (0UL)                     /*!< AES_0 HWKEY2: HWKEY2 (Bit 0)                          */
#define AES_0_HWKEY2_HWKEY2_Msk           (0xffffffffUL)            /*!< AES_0 HWKEY2: HWKEY2 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWKEY3  ========================================================= */
#define AES_0_HWKEY3_HWKEY3_Pos           (0UL)                     /*!< AES_0 HWKEY3: HWKEY3 (Bit 0)                          */
#define AES_0_HWKEY3_HWKEY3_Msk           (0xffffffffUL)            /*!< AES_0 HWKEY3: HWKEY3 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWKEY4  ========================================================= */
#define AES_0_HWKEY4_HWKEY4_Pos           (0UL)                     /*!< AES_0 HWKEY4: HWKEY4 (Bit 0)                          */
#define AES_0_HWKEY4_HWKEY4_Msk           (0xffffffffUL)            /*!< AES_0 HWKEY4: HWKEY4 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWKEY5  ========================================================= */
#define AES_0_HWKEY5_HWKEY5_Pos           (0UL)                     /*!< AES_0 HWKEY5: HWKEY5 (Bit 0)                          */
#define AES_0_HWKEY5_HWKEY5_Msk           (0xffffffffUL)            /*!< AES_0 HWKEY5: HWKEY5 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWKEY6  ========================================================= */
#define AES_0_HWKEY6_HWKEY6_Pos           (0UL)                     /*!< AES_0 HWKEY6: HWKEY6 (Bit 0)                          */
#define AES_0_HWKEY6_HWKEY6_Msk           (0xffffffffUL)            /*!< AES_0 HWKEY6: HWKEY6 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWKEY7  ========================================================= */
#define AES_0_HWKEY7_HWKEY7_Pos           (0UL)                     /*!< AES_0 HWKEY7: HWKEY7 (Bit 0)                          */
#define AES_0_HWKEY7_HWKEY7_Msk           (0xffffffffUL)            /*!< AES_0 HWKEY7: HWKEY7 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWCTR0  ========================================================= */
#define AES_0_HWCTR0_HWCTR0_Pos           (0UL)                     /*!< AES_0 HWCTR0: HWCTR0 (Bit 0)                          */
#define AES_0_HWCTR0_HWCTR0_Msk           (0xffffffffUL)            /*!< AES_0 HWCTR0: HWCTR0 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWCTR1  ========================================================= */
#define AES_0_HWCTR1_HWCTR1_Pos           (0UL)                     /*!< AES_0 HWCTR1: HWCTR1 (Bit 0)                          */
#define AES_0_HWCTR1_HWCTR1_Msk           (0xffffffffUL)            /*!< AES_0 HWCTR1: HWCTR1 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWCTR2  ========================================================= */
#define AES_0_HWCTR2_HWCTR2_Pos           (0UL)                     /*!< AES_0 HWCTR2: HWCTR2 (Bit 0)                          */
#define AES_0_HWCTR2_HWCTR2_Msk           (0xffffffffUL)            /*!< AES_0 HWCTR2: HWCTR2 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  HWCTR3  ========================================================= */
#define AES_0_HWCTR3_HWCTR3_Pos           (0UL)                     /*!< AES_0 HWCTR3: HWCTR3 (Bit 0)                          */
#define AES_0_HWCTR3_HWCTR3_Msk           (0xffffffffUL)            /*!< AES_0 HWCTR3: HWCTR3 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  STATUS  ========================================================= */
#define AES_0_STATUS_DURF_Pos             (0UL)                     /*!< AES_0 STATUS: DURF (Bit 0)                            */
#define AES_0_STATUS_DURF_Msk             (0x1UL)                   /*!< AES_0 STATUS: DURF (Bitfield-Mask: 0x01)              */
#define AES_0_STATUS_DORF_Pos             (1UL)                     /*!< AES_0 STATUS: DORF (Bit 1)                            */
#define AES_0_STATUS_DORF_Msk             (0x2UL)                   /*!< AES_0 STATUS: DORF (Bitfield-Mask: 0x01)              */
#define AES_0_STATUS_XORF_Pos             (2UL)                     /*!< AES_0 STATUS: XORF (Bit 2)                            */
#define AES_0_STATUS_XORF_Msk             (0x4UL)                   /*!< AES_0 STATUS: XORF (Bitfield-Mask: 0x01)              */
#define AES_0_STATUS_DFIFOLVL_Pos         (4UL)                     /*!< AES_0 STATUS: DFIFOLVL (Bit 4)                        */
#define AES_0_STATUS_DFIFOLVL_Msk         (0x70UL)                  /*!< AES_0 STATUS: DFIFOLVL (Bitfield-Mask: 0x07)          */
#define AES_0_STATUS_XFIFOLVL_Pos         (8UL)                     /*!< AES_0 STATUS: XFIFOLVL (Bit 8)                        */
#define AES_0_STATUS_XFIFOLVL_Msk         (0x700UL)                 /*!< AES_0 STATUS: XFIFOLVL (Bitfield-Mask: 0x07)          */
#define AES_0_STATUS_BUSYF_Pos            (16UL)                    /*!< AES_0 STATUS: BUSYF (Bit 16)                          */
#define AES_0_STATUS_BUSYF_Msk            (0x10000UL)               /*!< AES_0 STATUS: BUSYF (Bitfield-Mask: 0x01)             */
#define AES_0_STATUS_ERRI_Pos             (30UL)                    /*!< AES_0 STATUS: ERRI (Bit 30)                           */
#define AES_0_STATUS_ERRI_Msk             (0x40000000UL)            /*!< AES_0 STATUS: ERRI (Bitfield-Mask: 0x01)              */
#define AES_0_STATUS_OCI_Pos              (31UL)                    /*!< AES_0 STATUS: OCI (Bit 31)                            */
#define AES_0_STATUS_OCI_Msk              (0x80000000UL)            /*!< AES_0 STATUS: OCI (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                           CRC_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CRC_0_CONTROL_SINITEN_Pos         (0UL)                     /*!< CRC_0 CONTROL: SINITEN (Bit 0)                        */
#define CRC_0_CONTROL_SINITEN_Msk         (0x1UL)                   /*!< CRC_0 CONTROL: SINITEN (Bitfield-Mask: 0x01)          */
#define CRC_0_CONTROL_SEED_Pos            (1UL)                     /*!< CRC_0 CONTROL: SEED (Bit 1)                           */
#define CRC_0_CONTROL_SEED_Msk            (0x2UL)                   /*!< CRC_0 CONTROL: SEED (Bitfield-Mask: 0x01)             */
#define CRC_0_CONTROL_CRCEN_Pos           (2UL)                     /*!< CRC_0 CONTROL: CRCEN (Bit 2)                          */
#define CRC_0_CONTROL_CRCEN_Msk           (0x4UL)                   /*!< CRC_0 CONTROL: CRCEN (Bitfield-Mask: 0x01)            */
#define CRC_0_CONTROL_POLYSEL_Pos         (4UL)                     /*!< CRC_0 CONTROL: POLYSEL (Bit 4)                        */
#define CRC_0_CONTROL_POLYSEL_Msk         (0x30UL)                  /*!< CRC_0 CONTROL: POLYSEL (Bitfield-Mask: 0x03)          */
#define CRC_0_CONTROL_BMDEN_Pos           (8UL)                     /*!< CRC_0 CONTROL: BMDEN (Bit 8)                          */
#define CRC_0_CONTROL_BMDEN_Msk           (0x100UL)                 /*!< CRC_0 CONTROL: BMDEN (Bitfield-Mask: 0x01)            */
#define CRC_0_CONTROL_BBREN_Pos           (9UL)                     /*!< CRC_0 CONTROL: BBREN (Bit 9)                          */
#define CRC_0_CONTROL_BBREN_Msk           (0x200UL)                 /*!< CRC_0 CONTROL: BBREN (Bitfield-Mask: 0x01)            */
#define CRC_0_CONTROL_ORDER_Pos           (10UL)                    /*!< CRC_0 CONTROL: ORDER (Bit 10)                         */
#define CRC_0_CONTROL_ORDER_Msk           (0xc00UL)                 /*!< CRC_0 CONTROL: ORDER (Bitfield-Mask: 0x03)            */
/* =========================================================  DATA  ========================================================== */
#define CRC_0_DATA_DATA_Pos               (0UL)                     /*!< CRC_0 DATA: DATA (Bit 0)                              */
#define CRC_0_DATA_DATA_Msk               (0xffffffffUL)            /*!< CRC_0 DATA: DATA (Bitfield-Mask: 0xffffffff)          */
/* =========================================================  RDATA  ========================================================= */
#define CRC_0_RDATA_RDATA_Pos             (0UL)                     /*!< CRC_0 RDATA: RDATA (Bit 0)                            */
#define CRC_0_RDATA_RDATA_Msk             (0xffffffffUL)            /*!< CRC_0 RDATA: RDATA (Bitfield-Mask: 0xffffffff)        */


/* =========================================================================================================================== */
/* ================                                        CAPSENSE_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CAPSENSE_0_CONTROL_BUSYF_Pos      (0UL)                     /*!< CAPSENSE_0 CONTROL: BUSYF (Bit 0)                     */
#define CAPSENSE_0_CONTROL_BUSYF_Msk      (0x1UL)                   /*!< CAPSENSE_0 CONTROL: BUSYF (Bitfield-Mask: 0x01)       */
#define CAPSENSE_0_CONTROL_CSEN_Pos       (1UL)                     /*!< CAPSENSE_0 CONTROL: CSEN (Bit 1)                      */
#define CAPSENSE_0_CONTROL_CSEN_Msk       (0x2UL)                   /*!< CAPSENSE_0 CONTROL: CSEN (Bitfield-Mask: 0x01)        */
#define CAPSENSE_0_CONTROL_BIASEN_Pos     (2UL)                     /*!< CAPSENSE_0 CONTROL: BIASEN (Bit 2)                    */
#define CAPSENSE_0_CONTROL_BIASEN_Msk     (0x4UL)                   /*!< CAPSENSE_0 CONTROL: BIASEN (Bitfield-Mask: 0x01)      */
#define CAPSENSE_0_CONTROL_CMPPOL_Pos     (3UL)                     /*!< CAPSENSE_0 CONTROL: CMPPOL (Bit 3)                    */
#define CAPSENSE_0_CONTROL_CMPPOL_Msk     (0x8UL)                   /*!< CAPSENSE_0 CONTROL: CMPPOL (Bitfield-Mask: 0x01)      */
#define CAPSENSE_0_CONTROL_CMD_Pos        (4UL)                     /*!< CAPSENSE_0 CONTROL: CMD (Bit 4)                       */
#define CAPSENSE_0_CONTROL_CMD_Msk        (0x30UL)                  /*!< CAPSENSE_0 CONTROL: CMD (Bitfield-Mask: 0x03)         */
#define CAPSENSE_0_CONTROL_CNVR_Pos       (6UL)                     /*!< CAPSENSE_0 CONTROL: CNVR (Bit 6)                      */
#define CAPSENSE_0_CONTROL_CNVR_Msk       (0xc0UL)                  /*!< CAPSENSE_0 CONTROL: CNVR (Bitfield-Mask: 0x03)        */
#define CAPSENSE_0_CONTROL_ACCMD_Pos      (8UL)                     /*!< CAPSENSE_0 CONTROL: ACCMD (Bit 8)                     */
#define CAPSENSE_0_CONTROL_ACCMD_Msk      (0x700UL)                 /*!< CAPSENSE_0 CONTROL: ACCMD (Bitfield-Mask: 0x07)       */
#define CAPSENSE_0_CONTROL_MCEN_Pos       (11UL)                    /*!< CAPSENSE_0 CONTROL: MCEN (Bit 11)                     */
#define CAPSENSE_0_CONTROL_MCEN_Msk       (0x800UL)                 /*!< CAPSENSE_0 CONTROL: MCEN (Bitfield-Mask: 0x01)        */
#define CAPSENSE_0_CONTROL_CSCM_Pos       (12UL)                    /*!< CAPSENSE_0 CONTROL: CSCM (Bit 12)                     */
#define CAPSENSE_0_CONTROL_CSCM_Msk       (0xf000UL)                /*!< CAPSENSE_0 CONTROL: CSCM (Bitfield-Mask: 0x0f)        */
#define CAPSENSE_0_CONTROL_PMMD_Pos       (16UL)                    /*!< CAPSENSE_0 CONTROL: PMMD (Bit 16)                     */
#define CAPSENSE_0_CONTROL_PMMD_Msk       (0x30000UL)               /*!< CAPSENSE_0 CONTROL: PMMD (Bitfield-Mask: 0x03)        */
#define CAPSENSE_0_CONTROL_PMEF_Pos       (18UL)                    /*!< CAPSENSE_0 CONTROL: PMEF (Bit 18)                     */
#define CAPSENSE_0_CONTROL_PMEF_Msk       (0x40000UL)               /*!< CAPSENSE_0 CONTROL: PMEF (Bitfield-Mask: 0x01)        */
#define CAPSENSE_0_CONTROL_CMPEN_Pos      (20UL)                    /*!< CAPSENSE_0 CONTROL: CMPEN (Bit 20)                    */
#define CAPSENSE_0_CONTROL_CMPEN_Msk      (0x100000UL)              /*!< CAPSENSE_0 CONTROL: CMPEN (Bitfield-Mask: 0x01)       */
#define CAPSENSE_0_CONTROL_CDIEN_Pos      (21UL)                    /*!< CAPSENSE_0 CONTROL: CDIEN (Bit 21)                    */
#define CAPSENSE_0_CONTROL_CDIEN_Msk      (0x200000UL)              /*!< CAPSENSE_0 CONTROL: CDIEN (Bitfield-Mask: 0x01)       */
#define CAPSENSE_0_CONTROL_EOSIEN_Pos     (22UL)                    /*!< CAPSENSE_0 CONTROL: EOSIEN (Bit 22)                   */
#define CAPSENSE_0_CONTROL_EOSIEN_Msk     (0x400000UL)              /*!< CAPSENSE_0 CONTROL: EOSIEN (Bitfield-Mask: 0x01)      */
#define CAPSENSE_0_CONTROL_CMPI_Pos       (24UL)                    /*!< CAPSENSE_0 CONTROL: CMPI (Bit 24)                     */
#define CAPSENSE_0_CONTROL_CMPI_Msk       (0x1000000UL)             /*!< CAPSENSE_0 CONTROL: CMPI (Bitfield-Mask: 0x01)        */
#define CAPSENSE_0_CONTROL_CDI_Pos        (25UL)                    /*!< CAPSENSE_0 CONTROL: CDI (Bit 25)                      */
#define CAPSENSE_0_CONTROL_CDI_Msk        (0x2000000UL)             /*!< CAPSENSE_0 CONTROL: CDI (Bitfield-Mask: 0x01)         */
#define CAPSENSE_0_CONTROL_EOSI_Pos       (26UL)                    /*!< CAPSENSE_0 CONTROL: EOSI (Bit 26)                     */
#define CAPSENSE_0_CONTROL_EOSI_Msk       (0x4000000UL)             /*!< CAPSENSE_0 CONTROL: EOSI (Bitfield-Mask: 0x01)        */
/* =========================================================  MODE  ========================================================== */
#define CAPSENSE_0_MODE_CGSEL_Pos         (0UL)                     /*!< CAPSENSE_0 MODE: CGSEL (Bit 0)                        */
#define CAPSENSE_0_MODE_CGSEL_Msk         (0x7UL)                   /*!< CAPSENSE_0 MODE: CGSEL (Bitfield-Mask: 0x07)          */
#define CAPSENSE_0_MODE_DRSEL_Pos         (4UL)                     /*!< CAPSENSE_0 MODE: DRSEL (Bit 4)                        */
#define CAPSENSE_0_MODE_DRSEL_Msk         (0x30UL)                  /*!< CAPSENSE_0 MODE: DRSEL (Bitfield-Mask: 0x03)          */
#define CAPSENSE_0_MODE_RAMPSEL_Pos       (6UL)                     /*!< CAPSENSE_0 MODE: RAMPSEL (Bit 6)                      */
#define CAPSENSE_0_MODE_RAMPSEL_Msk       (0xc0UL)                  /*!< CAPSENSE_0 MODE: RAMPSEL (Bitfield-Mask: 0x03)        */
#define CAPSENSE_0_MODE_IASEL_Pos         (8UL)                     /*!< CAPSENSE_0 MODE: IASEL (Bit 8)                        */
#define CAPSENSE_0_MODE_IASEL_Msk         (0x700UL)                 /*!< CAPSENSE_0 MODE: IASEL (Bitfield-Mask: 0x07)          */
#define CAPSENSE_0_MODE_DTSEL_Pos         (12UL)                    /*!< CAPSENSE_0 MODE: DTSEL (Bit 12)                       */
#define CAPSENSE_0_MODE_DTSEL_Msk         (0x7000UL)                /*!< CAPSENSE_0 MODE: DTSEL (Bitfield-Mask: 0x07)          */
#define CAPSENSE_0_MODE_LPFSEL_Pos        (16UL)                    /*!< CAPSENSE_0 MODE: LPFSEL (Bit 16)                      */
#define CAPSENSE_0_MODE_LPFSEL_Msk        (0x70000UL)               /*!< CAPSENSE_0 MODE: LPFSEL (Bitfield-Mask: 0x07)         */
/* =========================================================  DATA  ========================================================== */
#define CAPSENSE_0_DATA_DATA_Pos          (0UL)                     /*!< CAPSENSE_0 DATA: DATA (Bit 0)                         */
#define CAPSENSE_0_DATA_DATA_Msk          (0xffffUL)                /*!< CAPSENSE_0 DATA: DATA (Bitfield-Mask: 0xffff)         */
/* =========================================================  SCAN  ========================================================== */
#define CAPSENSE_0_SCAN_SCANEN_Pos        (0UL)                     /*!< CAPSENSE_0 SCAN: SCANEN (Bit 0)                       */
#define CAPSENSE_0_SCAN_SCANEN_Msk        (0xffffUL)                /*!< CAPSENSE_0 SCAN: SCANEN (Bitfield-Mask: 0xffff)       */
/* =========================================================  CSTH  ========================================================== */
#define CAPSENSE_0_CSTH_CSTH_Pos          (0UL)                     /*!< CAPSENSE_0 CSTH: CSTH (Bit 0)                         */
#define CAPSENSE_0_CSTH_CSTH_Msk          (0xffffUL)                /*!< CAPSENSE_0 CSTH: CSTH (Bitfield-Mask: 0xffff)         */
/* ==========================================================  MUX  ========================================================== */
#define CAPSENSE_0_MUX_CSMX_Pos           (0UL)                     /*!< CAPSENSE_0 MUX: CSMX (Bit 0)                          */
#define CAPSENSE_0_MUX_CSMX_Msk           (0xfUL)                   /*!< CAPSENSE_0 MUX: CSMX (Bitfield-Mask: 0x0f)            */
#define CAPSENSE_0_MUX_CSDISC_Pos         (7UL)                     /*!< CAPSENSE_0 MUX: CSDISC (Bit 7)                        */
#define CAPSENSE_0_MUX_CSDISC_Msk         (0x80UL)                  /*!< CAPSENSE_0 MUX: CSDISC (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                         CLKCTRL_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CLKCTRL_0_CONTROL_AHBSEL_Pos      (0UL)                     /*!< CLKCTRL_0 CONTROL: AHBSEL (Bit 0)                     */
#define CLKCTRL_0_CONTROL_AHBSEL_Msk      (0x7UL)                   /*!< CLKCTRL_0 CONTROL: AHBSEL (Bitfield-Mask: 0x07)       */
#define CLKCTRL_0_CONTROL_AHBDIV_Pos      (8UL)                     /*!< CLKCTRL_0 CONTROL: AHBDIV (Bit 8)                     */
#define CLKCTRL_0_CONTROL_AHBDIV_Msk      (0x700UL)                 /*!< CLKCTRL_0 CONTROL: AHBDIV (Bitfield-Mask: 0x07)       */
#define CLKCTRL_0_CONTROL_APBDIV_Pos      (16UL)                    /*!< CLKCTRL_0 CONTROL: APBDIV (Bit 16)                    */
#define CLKCTRL_0_CONTROL_APBDIV_Msk      (0x10000UL)               /*!< CLKCTRL_0 CONTROL: APBDIV (Bitfield-Mask: 0x01)       */
#define CLKCTRL_0_CONTROL_EXTESEL_Pos     (28UL)                    /*!< CLKCTRL_0 CONTROL: EXTESEL (Bit 28)                   */
#define CLKCTRL_0_CONTROL_EXTESEL_Msk     (0x10000000UL)            /*!< CLKCTRL_0 CONTROL: EXTESEL (Bitfield-Mask: 0x01)      */
#define CLKCTRL_0_CONTROL_OBUSYF_Pos      (29UL)                    /*!< CLKCTRL_0 CONTROL: OBUSYF (Bit 29)                    */
#define CLKCTRL_0_CONTROL_OBUSYF_Msk      (0x20000000UL)            /*!< CLKCTRL_0 CONTROL: OBUSYF (Bitfield-Mask: 0x01)       */
/* ========================================================  AHBCLKG  ======================================================== */
#define CLKCTRL_0_AHBCLKG_RAMCEN_Pos      (0UL)                     /*!< CLKCTRL_0 AHBCLKG: RAMCEN (Bit 0)                     */
#define CLKCTRL_0_AHBCLKG_RAMCEN_Msk      (0x1UL)                   /*!< CLKCTRL_0 AHBCLKG: RAMCEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_0_AHBCLKG_DMACEN_Pos      (1UL)                     /*!< CLKCTRL_0 AHBCLKG: DMACEN (Bit 1)                     */
#define CLKCTRL_0_AHBCLKG_DMACEN_Msk      (0x2UL)                   /*!< CLKCTRL_0 AHBCLKG: DMACEN (Bitfield-Mask: 0x01)       */
#define CLKCTRL_0_AHBCLKG_FLASHCEN_Pos    (2UL)                     /*!< CLKCTRL_0 AHBCLKG: FLASHCEN (Bit 2)                   */
#define CLKCTRL_0_AHBCLKG_FLASHCEN_Msk    (0x4UL)                   /*!< CLKCTRL_0 AHBCLKG: FLASHCEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_AHBCLKG_EMIF0CEN_Pos    (3UL)                     /*!< CLKCTRL_0 AHBCLKG: EMIF0CEN (Bit 3)                   */
#define CLKCTRL_0_AHBCLKG_EMIF0CEN_Msk    (0x8UL)                   /*!< CLKCTRL_0 AHBCLKG: EMIF0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_AHBCLKG_USB0BCEN_Pos    (4UL)                     /*!< CLKCTRL_0 AHBCLKG: USB0BCEN (Bit 4)                   */
#define CLKCTRL_0_AHBCLKG_USB0BCEN_Msk    (0x10UL)                  /*!< CLKCTRL_0 AHBCLKG: USB0BCEN (Bitfield-Mask: 0x01)     */
/* =======================================================  APBCLKG0  ======================================================== */
#define CLKCTRL_0_APBCLKG0_PLL0CEN_Pos    (0UL)                     /*!< CLKCTRL_0 APBCLKG0: PLL0CEN (Bit 0)                   */
#define CLKCTRL_0_APBCLKG0_PLL0CEN_Msk    (0x1UL)                   /*!< CLKCTRL_0 APBCLKG0: PLL0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_PB0CEN_Pos     (1UL)                     /*!< CLKCTRL_0 APBCLKG0: PB0CEN (Bit 1)                    */
#define CLKCTRL_0_APBCLKG0_PB0CEN_Msk     (0x2UL)                   /*!< CLKCTRL_0 APBCLKG0: PB0CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_0_APBCLKG0_USART0CEN_Pos  (2UL)                     /*!< CLKCTRL_0 APBCLKG0: USART0CEN (Bit 2)                 */
#define CLKCTRL_0_APBCLKG0_USART0CEN_Msk  (0x4UL)                   /*!< CLKCTRL_0 APBCLKG0: USART0CEN (Bitfield-Mask: 0x01)   */
#define CLKCTRL_0_APBCLKG0_USART1CEN_Pos  (3UL)                     /*!< CLKCTRL_0 APBCLKG0: USART1CEN (Bit 3)                 */
#define CLKCTRL_0_APBCLKG0_USART1CEN_Msk  (0x8UL)                   /*!< CLKCTRL_0 APBCLKG0: USART1CEN (Bitfield-Mask: 0x01)   */
#define CLKCTRL_0_APBCLKG0_UART0CEN_Pos   (4UL)                     /*!< CLKCTRL_0 APBCLKG0: UART0CEN (Bit 4)                  */
#define CLKCTRL_0_APBCLKG0_UART0CEN_Msk   (0x10UL)                  /*!< CLKCTRL_0 APBCLKG0: UART0CEN (Bitfield-Mask: 0x01)    */
#define CLKCTRL_0_APBCLKG0_UART1CEN_Pos   (5UL)                     /*!< CLKCTRL_0 APBCLKG0: UART1CEN (Bit 5)                  */
#define CLKCTRL_0_APBCLKG0_UART1CEN_Msk   (0x20UL)                  /*!< CLKCTRL_0 APBCLKG0: UART1CEN (Bitfield-Mask: 0x01)    */
#define CLKCTRL_0_APBCLKG0_SPI0CEN_Pos    (6UL)                     /*!< CLKCTRL_0 APBCLKG0: SPI0CEN (Bit 6)                   */
#define CLKCTRL_0_APBCLKG0_SPI0CEN_Msk    (0x40UL)                  /*!< CLKCTRL_0 APBCLKG0: SPI0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_SPI1CEN_Pos    (7UL)                     /*!< CLKCTRL_0 APBCLKG0: SPI1CEN (Bit 7)                   */
#define CLKCTRL_0_APBCLKG0_SPI1CEN_Msk    (0x80UL)                  /*!< CLKCTRL_0 APBCLKG0: SPI1CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_SPI2CEN_Pos    (8UL)                     /*!< CLKCTRL_0 APBCLKG0: SPI2CEN (Bit 8)                   */
#define CLKCTRL_0_APBCLKG0_SPI2CEN_Msk    (0x100UL)                 /*!< CLKCTRL_0 APBCLKG0: SPI2CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_I2C0CEN_Pos    (9UL)                     /*!< CLKCTRL_0 APBCLKG0: I2C0CEN (Bit 9)                   */
#define CLKCTRL_0_APBCLKG0_I2C0CEN_Msk    (0x200UL)                 /*!< CLKCTRL_0 APBCLKG0: I2C0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_I2C1CEN_Pos    (10UL)                    /*!< CLKCTRL_0 APBCLKG0: I2C1CEN (Bit 10)                  */
#define CLKCTRL_0_APBCLKG0_I2C1CEN_Msk    (0x400UL)                 /*!< CLKCTRL_0 APBCLKG0: I2C1CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_EPCA0CEN_Pos   (11UL)                    /*!< CLKCTRL_0 APBCLKG0: EPCA0CEN (Bit 11)                 */
#define CLKCTRL_0_APBCLKG0_EPCA0CEN_Msk   (0x800UL)                 /*!< CLKCTRL_0 APBCLKG0: EPCA0CEN (Bitfield-Mask: 0x01)    */
#define CLKCTRL_0_APBCLKG0_PCA0CEN_Pos    (12UL)                    /*!< CLKCTRL_0 APBCLKG0: PCA0CEN (Bit 12)                  */
#define CLKCTRL_0_APBCLKG0_PCA0CEN_Msk    (0x1000UL)                /*!< CLKCTRL_0 APBCLKG0: PCA0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_PCA1CEN_Pos    (13UL)                    /*!< CLKCTRL_0 APBCLKG0: PCA1CEN (Bit 13)                  */
#define CLKCTRL_0_APBCLKG0_PCA1CEN_Msk    (0x2000UL)                /*!< CLKCTRL_0 APBCLKG0: PCA1CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_SSG0CEN_Pos    (14UL)                    /*!< CLKCTRL_0 APBCLKG0: SSG0CEN (Bit 14)                  */
#define CLKCTRL_0_APBCLKG0_SSG0CEN_Msk    (0x4000UL)                /*!< CLKCTRL_0 APBCLKG0: SSG0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_TIMER0CEN_Pos  (15UL)                    /*!< CLKCTRL_0 APBCLKG0: TIMER0CEN (Bit 15)                */
#define CLKCTRL_0_APBCLKG0_TIMER0CEN_Msk  (0x8000UL)                /*!< CLKCTRL_0 APBCLKG0: TIMER0CEN (Bitfield-Mask: 0x01)   */
#define CLKCTRL_0_APBCLKG0_TIMER1CEN_Pos  (16UL)                    /*!< CLKCTRL_0 APBCLKG0: TIMER1CEN (Bit 16)                */
#define CLKCTRL_0_APBCLKG0_TIMER1CEN_Msk  (0x10000UL)               /*!< CLKCTRL_0 APBCLKG0: TIMER1CEN (Bitfield-Mask: 0x01)   */
#define CLKCTRL_0_APBCLKG0_ADC0CEN_Pos    (17UL)                    /*!< CLKCTRL_0 APBCLKG0: ADC0CEN (Bit 17)                  */
#define CLKCTRL_0_APBCLKG0_ADC0CEN_Msk    (0x20000UL)               /*!< CLKCTRL_0 APBCLKG0: ADC0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_ADC1CEN_Pos    (18UL)                    /*!< CLKCTRL_0 APBCLKG0: ADC1CEN (Bit 18)                  */
#define CLKCTRL_0_APBCLKG0_ADC1CEN_Msk    (0x40000UL)               /*!< CLKCTRL_0 APBCLKG0: ADC1CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_CMP0CEN_Pos    (19UL)                    /*!< CLKCTRL_0 APBCLKG0: CMP0CEN (Bit 19)                  */
#define CLKCTRL_0_APBCLKG0_CMP0CEN_Msk    (0x80000UL)               /*!< CLKCTRL_0 APBCLKG0: CMP0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_CMP1CEN_Pos    (20UL)                    /*!< CLKCTRL_0 APBCLKG0: CMP1CEN (Bit 20)                  */
#define CLKCTRL_0_APBCLKG0_CMP1CEN_Msk    (0x100000UL)              /*!< CLKCTRL_0 APBCLKG0: CMP1CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_CS0CEN_Pos     (21UL)                    /*!< CLKCTRL_0 APBCLKG0: CS0CEN (Bit 21)                   */
#define CLKCTRL_0_APBCLKG0_CS0CEN_Msk     (0x200000UL)              /*!< CLKCTRL_0 APBCLKG0: CS0CEN (Bitfield-Mask: 0x01)      */
#define CLKCTRL_0_APBCLKG0_AES0CEN_Pos    (22UL)                    /*!< CLKCTRL_0 APBCLKG0: AES0CEN (Bit 22)                  */
#define CLKCTRL_0_APBCLKG0_AES0CEN_Msk    (0x400000UL)              /*!< CLKCTRL_0 APBCLKG0: AES0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_CRC0CEN_Pos    (23UL)                    /*!< CLKCTRL_0 APBCLKG0: CRC0CEN (Bit 23)                  */
#define CLKCTRL_0_APBCLKG0_CRC0CEN_Msk    (0x800000UL)              /*!< CLKCTRL_0 APBCLKG0: CRC0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_IDAC0CEN_Pos   (24UL)                    /*!< CLKCTRL_0 APBCLKG0: IDAC0CEN (Bit 24)                 */
#define CLKCTRL_0_APBCLKG0_IDAC0CEN_Msk   (0x1000000UL)             /*!< CLKCTRL_0 APBCLKG0: IDAC0CEN (Bitfield-Mask: 0x01)    */
#define CLKCTRL_0_APBCLKG0_IDAC1CEN_Pos   (25UL)                    /*!< CLKCTRL_0 APBCLKG0: IDAC1CEN (Bit 25)                 */
#define CLKCTRL_0_APBCLKG0_IDAC1CEN_Msk   (0x2000000UL)             /*!< CLKCTRL_0 APBCLKG0: IDAC1CEN (Bitfield-Mask: 0x01)    */
#define CLKCTRL_0_APBCLKG0_LPT0CEN_Pos    (26UL)                    /*!< CLKCTRL_0 APBCLKG0: LPT0CEN (Bit 26)                  */
#define CLKCTRL_0_APBCLKG0_LPT0CEN_Msk    (0x4000000UL)             /*!< CLKCTRL_0 APBCLKG0: LPT0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_I2S0CEN_Pos    (27UL)                    /*!< CLKCTRL_0 APBCLKG0: I2S0CEN (Bit 27)                  */
#define CLKCTRL_0_APBCLKG0_I2S0CEN_Msk    (0x8000000UL)             /*!< CLKCTRL_0 APBCLKG0: I2S0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_USB0CEN_Pos    (28UL)                    /*!< CLKCTRL_0 APBCLKG0: USB0CEN (Bit 28)                  */
#define CLKCTRL_0_APBCLKG0_USB0CEN_Msk    (0x10000000UL)            /*!< CLKCTRL_0 APBCLKG0: USB0CEN (Bitfield-Mask: 0x01)     */
#define CLKCTRL_0_APBCLKG0_EVREGCEN_Pos   (29UL)                    /*!< CLKCTRL_0 APBCLKG0: EVREGCEN (Bit 29)                 */
#define CLKCTRL_0_APBCLKG0_EVREGCEN_Msk   (0x20000000UL)            /*!< CLKCTRL_0 APBCLKG0: EVREGCEN (Bitfield-Mask: 0x01)    */
#define CLKCTRL_0_APBCLKG0_FLCTRLCEN_Pos  (30UL)                    /*!< CLKCTRL_0 APBCLKG0: FLCTRLCEN (Bit 30)                */
#define CLKCTRL_0_APBCLKG0_FLCTRLCEN_Msk  (0x40000000UL)            /*!< CLKCTRL_0 APBCLKG0: FLCTRLCEN (Bitfield-Mask: 0x01)   */
/* =======================================================  APBCLKG1  ======================================================== */
#define CLKCTRL_0_APBCLKG1_MISC0CEN_Pos   (0UL)                     /*!< CLKCTRL_0 APBCLKG1: MISC0CEN (Bit 0)                  */
#define CLKCTRL_0_APBCLKG1_MISC0CEN_Msk   (0x1UL)                   /*!< CLKCTRL_0 APBCLKG1: MISC0CEN (Bitfield-Mask: 0x01)    */
#define CLKCTRL_0_APBCLKG1_MISC1CEN_Pos   (1UL)                     /*!< CLKCTRL_0 APBCLKG1: MISC1CEN (Bit 1)                  */
#define CLKCTRL_0_APBCLKG1_MISC1CEN_Msk   (0x2UL)                   /*!< CLKCTRL_0 APBCLKG1: MISC1CEN (Bitfield-Mask: 0x01)    */
#define CLKCTRL_0_APBCLKG1_MISC2CEN_Pos   (2UL)                     /*!< CLKCTRL_0 APBCLKG1: MISC2CEN (Bit 2)                  */
#define CLKCTRL_0_APBCLKG1_MISC2CEN_Msk   (0x4UL)                   /*!< CLKCTRL_0 APBCLKG1: MISC2CEN (Bitfield-Mask: 0x01)    */
/* =========================================================  PM3CN  ========================================================= */
#define CLKCTRL_0_PM3CN_PM3CSEL_Pos       (0UL)                     /*!< CLKCTRL_0 PM3CN: PM3CSEL (Bit 0)                      */
#define CLKCTRL_0_PM3CN_PM3CSEL_Msk       (0x7UL)                   /*!< CLKCTRL_0 PM3CN: PM3CSEL (Bitfield-Mask: 0x07)        */
#define CLKCTRL_0_PM3CN_PM3CEN_Pos        (16UL)                    /*!< CLKCTRL_0 PM3CN: PM3CEN (Bit 16)                      */
#define CLKCTRL_0_PM3CN_PM3CEN_Msk        (0x10000UL)               /*!< CLKCTRL_0 PM3CN: PM3CEN (Bitfield-Mask: 0x01)         */


/* =========================================================================================================================== */
/* ================                                           CMP_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CMP_0_CONTROL_CMPFI_Pos           (13UL)                    /*!< CMP_0 CONTROL: CMPFI (Bit 13)                         */
#define CMP_0_CONTROL_CMPFI_Msk           (0x2000UL)                /*!< CMP_0 CONTROL: CMPFI (Bitfield-Mask: 0x01)            */
#define CMP_0_CONTROL_CMPRI_Pos           (14UL)                    /*!< CMP_0 CONTROL: CMPRI (Bit 14)                         */
#define CMP_0_CONTROL_CMPRI_Msk           (0x4000UL)                /*!< CMP_0 CONTROL: CMPRI (Bitfield-Mask: 0x01)            */
#define CMP_0_CONTROL_CMPOUT_Pos          (30UL)                    /*!< CMP_0 CONTROL: CMPOUT (Bit 30)                        */
#define CMP_0_CONTROL_CMPOUT_Msk          (0x40000000UL)            /*!< CMP_0 CONTROL: CMPOUT (Bitfield-Mask: 0x01)           */
#define CMP_0_CONTROL_CMPEN_Pos           (31UL)                    /*!< CMP_0 CONTROL: CMPEN (Bit 31)                         */
#define CMP_0_CONTROL_CMPEN_Msk           (0x80000000UL)            /*!< CMP_0 CONTROL: CMPEN (Bitfield-Mask: 0x01)            */
/* =========================================================  MODE  ========================================================== */
#define CMP_0_MODE_NMUX_Pos               (0UL)                     /*!< CMP_0 MODE: NMUX (Bit 0)                              */
#define CMP_0_MODE_NMUX_Msk               (0xfUL)                   /*!< CMP_0 MODE: NMUX (Bitfield-Mask: 0x0f)                */
#define CMP_0_MODE_PMUX_Pos               (4UL)                     /*!< CMP_0 MODE: PMUX (Bit 4)                              */
#define CMP_0_MODE_PMUX_Msk               (0xf0UL)                  /*!< CMP_0 MODE: PMUX (Bitfield-Mask: 0x0f)                */
#define CMP_0_MODE_INMUX_Pos              (8UL)                     /*!< CMP_0 MODE: INMUX (Bit 8)                             */
#define CMP_0_MODE_INMUX_Msk              (0x300UL)                 /*!< CMP_0 MODE: INMUX (Bitfield-Mask: 0x03)               */
#define CMP_0_MODE_CMPMD_Pos              (10UL)                    /*!< CMP_0 MODE: CMPMD (Bit 10)                            */
#define CMP_0_MODE_CMPMD_Msk              (0xc00UL)                 /*!< CMP_0 MODE: CMPMD (Bitfield-Mask: 0x03)               */
#define CMP_0_MODE_FIEN_Pos               (13UL)                    /*!< CMP_0 MODE: FIEN (Bit 13)                             */
#define CMP_0_MODE_FIEN_Msk               (0x2000UL)                /*!< CMP_0 MODE: FIEN (Bitfield-Mask: 0x01)                */
#define CMP_0_MODE_RIEN_Pos               (14UL)                    /*!< CMP_0 MODE: RIEN (Bit 14)                             */
#define CMP_0_MODE_RIEN_Msk               (0x4000UL)                /*!< CMP_0 MODE: RIEN (Bitfield-Mask: 0x01)                */
#define CMP_0_MODE_DACLVL_Pos             (16UL)                    /*!< CMP_0 MODE: DACLVL (Bit 16)                           */
#define CMP_0_MODE_DACLVL_Msk             (0x3f0000UL)              /*!< CMP_0 MODE: DACLVL (Bitfield-Mask: 0x3f)              */
#define CMP_0_MODE_NWPUEN_Pos             (22UL)                    /*!< CMP_0 MODE: NWPUEN (Bit 22)                           */
#define CMP_0_MODE_NWPUEN_Msk             (0x400000UL)              /*!< CMP_0 MODE: NWPUEN (Bitfield-Mask: 0x01)              */
#define CMP_0_MODE_PWPUEN_Pos             (23UL)                    /*!< CMP_0 MODE: PWPUEN (Bit 23)                           */
#define CMP_0_MODE_PWPUEN_Msk             (0x800000UL)              /*!< CMP_0 MODE: PWPUEN (Bitfield-Mask: 0x01)              */
#define CMP_0_MODE_CMPHYN_Pos             (24UL)                    /*!< CMP_0 MODE: CMPHYN (Bit 24)                           */
#define CMP_0_MODE_CMPHYN_Msk             (0x3000000UL)             /*!< CMP_0 MODE: CMPHYN (Bitfield-Mask: 0x03)              */
#define CMP_0_MODE_CMPHYP_Pos             (26UL)                    /*!< CMP_0 MODE: CMPHYP (Bit 26)                           */
#define CMP_0_MODE_CMPHYP_Msk             (0xc000000UL)             /*!< CMP_0 MODE: CMPHYP (Bitfield-Mask: 0x03)              */
#define CMP_0_MODE_INVEN_Pos              (30UL)                    /*!< CMP_0 MODE: INVEN (Bit 30)                            */
#define CMP_0_MODE_INVEN_Msk              (0x40000000UL)            /*!< CMP_0 MODE: INVEN (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                           CMP_1                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define CMP_1_CONTROL_CMPFI_Pos           (13UL)                    /*!< CMP_1 CONTROL: CMPFI (Bit 13)                         */
#define CMP_1_CONTROL_CMPFI_Msk           (0x2000UL)                /*!< CMP_1 CONTROL: CMPFI (Bitfield-Mask: 0x01)            */
#define CMP_1_CONTROL_CMPRI_Pos           (14UL)                    /*!< CMP_1 CONTROL: CMPRI (Bit 14)                         */
#define CMP_1_CONTROL_CMPRI_Msk           (0x4000UL)                /*!< CMP_1 CONTROL: CMPRI (Bitfield-Mask: 0x01)            */
#define CMP_1_CONTROL_CMPOUT_Pos          (30UL)                    /*!< CMP_1 CONTROL: CMPOUT (Bit 30)                        */
#define CMP_1_CONTROL_CMPOUT_Msk          (0x40000000UL)            /*!< CMP_1 CONTROL: CMPOUT (Bitfield-Mask: 0x01)           */
#define CMP_1_CONTROL_CMPEN_Pos           (31UL)                    /*!< CMP_1 CONTROL: CMPEN (Bit 31)                         */
#define CMP_1_CONTROL_CMPEN_Msk           (0x80000000UL)            /*!< CMP_1 CONTROL: CMPEN (Bitfield-Mask: 0x01)            */
/* =========================================================  MODE  ========================================================== */
#define CMP_1_MODE_NMUX_Pos               (0UL)                     /*!< CMP_1 MODE: NMUX (Bit 0)                              */
#define CMP_1_MODE_NMUX_Msk               (0xfUL)                   /*!< CMP_1 MODE: NMUX (Bitfield-Mask: 0x0f)                */
#define CMP_1_MODE_PMUX_Pos               (4UL)                     /*!< CMP_1 MODE: PMUX (Bit 4)                              */
#define CMP_1_MODE_PMUX_Msk               (0xf0UL)                  /*!< CMP_1 MODE: PMUX (Bitfield-Mask: 0x0f)                */
#define CMP_1_MODE_INMUX_Pos              (8UL)                     /*!< CMP_1 MODE: INMUX (Bit 8)                             */
#define CMP_1_MODE_INMUX_Msk              (0x300UL)                 /*!< CMP_1 MODE: INMUX (Bitfield-Mask: 0x03)               */
#define CMP_1_MODE_CMPMD_Pos              (10UL)                    /*!< CMP_1 MODE: CMPMD (Bit 10)                            */
#define CMP_1_MODE_CMPMD_Msk              (0xc00UL)                 /*!< CMP_1 MODE: CMPMD (Bitfield-Mask: 0x03)               */
#define CMP_1_MODE_FIEN_Pos               (13UL)                    /*!< CMP_1 MODE: FIEN (Bit 13)                             */
#define CMP_1_MODE_FIEN_Msk               (0x2000UL)                /*!< CMP_1 MODE: FIEN (Bitfield-Mask: 0x01)                */
#define CMP_1_MODE_RIEN_Pos               (14UL)                    /*!< CMP_1 MODE: RIEN (Bit 14)                             */
#define CMP_1_MODE_RIEN_Msk               (0x4000UL)                /*!< CMP_1 MODE: RIEN (Bitfield-Mask: 0x01)                */
#define CMP_1_MODE_DACLVL_Pos             (16UL)                    /*!< CMP_1 MODE: DACLVL (Bit 16)                           */
#define CMP_1_MODE_DACLVL_Msk             (0x3f0000UL)              /*!< CMP_1 MODE: DACLVL (Bitfield-Mask: 0x3f)              */
#define CMP_1_MODE_NWPUEN_Pos             (22UL)                    /*!< CMP_1 MODE: NWPUEN (Bit 22)                           */
#define CMP_1_MODE_NWPUEN_Msk             (0x400000UL)              /*!< CMP_1 MODE: NWPUEN (Bitfield-Mask: 0x01)              */
#define CMP_1_MODE_PWPUEN_Pos             (23UL)                    /*!< CMP_1 MODE: PWPUEN (Bit 23)                           */
#define CMP_1_MODE_PWPUEN_Msk             (0x800000UL)              /*!< CMP_1 MODE: PWPUEN (Bitfield-Mask: 0x01)              */
#define CMP_1_MODE_CMPHYN_Pos             (24UL)                    /*!< CMP_1 MODE: CMPHYN (Bit 24)                           */
#define CMP_1_MODE_CMPHYN_Msk             (0x3000000UL)             /*!< CMP_1 MODE: CMPHYN (Bitfield-Mask: 0x03)              */
#define CMP_1_MODE_CMPHYP_Pos             (26UL)                    /*!< CMP_1 MODE: CMPHYP (Bit 26)                           */
#define CMP_1_MODE_CMPHYP_Msk             (0xc000000UL)             /*!< CMP_1 MODE: CMPHYP (Bitfield-Mask: 0x03)              */
#define CMP_1_MODE_INVEN_Pos              (30UL)                    /*!< CMP_1 MODE: INVEN (Bit 30)                            */
#define CMP_1_MODE_INVEN_Msk              (0x40000000UL)            /*!< CMP_1 MODE: INVEN (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                         DMACTRL_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
#define DMACTRL_0_STATUS_DMAENSTS_Pos     (0UL)                     /*!< DMACTRL_0 STATUS: DMAENSTS (Bit 0)                    */
#define DMACTRL_0_STATUS_DMAENSTS_Msk     (0x1UL)                   /*!< DMACTRL_0 STATUS: DMAENSTS (Bitfield-Mask: 0x01)      */
#define DMACTRL_0_STATUS_STATE_Pos        (4UL)                     /*!< DMACTRL_0 STATUS: STATE (Bit 4)                       */
#define DMACTRL_0_STATUS_STATE_Msk        (0xf0UL)                  /*!< DMACTRL_0 STATUS: STATE (Bitfield-Mask: 0x0f)         */
#define DMACTRL_0_STATUS_NUMCHAN_Pos      (16UL)                    /*!< DMACTRL_0 STATUS: NUMCHAN (Bit 16)                    */
#define DMACTRL_0_STATUS_NUMCHAN_Msk      (0x1f0000UL)              /*!< DMACTRL_0 STATUS: NUMCHAN (Bitfield-Mask: 0x1f)       */
/* ========================================================  CONFIG  ========================================================= */
#define DMACTRL_0_CONFIG_DMAEN_Pos        (0UL)                     /*!< DMACTRL_0 CONFIG: DMAEN (Bit 0)                       */
#define DMACTRL_0_CONFIG_DMAEN_Msk        (0x1UL)                   /*!< DMACTRL_0 CONFIG: DMAEN (Bitfield-Mask: 0x01)         */
/* ========================================================  BASEPTR  ======================================================== */
#define DMACTRL_0_BASEPTR_BASEPTR_Pos     (5UL)                     /*!< DMACTRL_0 BASEPTR: BASEPTR (Bit 5)                    */
#define DMACTRL_0_BASEPTR_BASEPTR_Msk     (0xffffffe0UL)            /*!< DMACTRL_0 BASEPTR: BASEPTR (Bitfield-Mask: 0x7ffffff) */
/* =======================================================  ABASEPTR  ======================================================== */
#define DMACTRL_0_ABASEPTR_ABASEPTR_Pos   (0UL)                     /*!< DMACTRL_0 ABASEPTR: ABASEPTR (Bit 0)                  */
#define DMACTRL_0_ABASEPTR_ABASEPTR_Msk   (0xffffffffUL)            /*!< DMACTRL_0 ABASEPTR: ABASEPTR (Bitfield-Mask: 0xffffffff) */
/* =======================================================  CHSTATUS  ======================================================== */
#define DMACTRL_0_CHSTATUS_CH0_Pos        (0UL)                     /*!< DMACTRL_0 CHSTATUS: CH0 (Bit 0)                       */
#define DMACTRL_0_CHSTATUS_CH0_Msk        (0x1UL)                   /*!< DMACTRL_0 CHSTATUS: CH0 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH1_Pos        (1UL)                     /*!< DMACTRL_0 CHSTATUS: CH1 (Bit 1)                       */
#define DMACTRL_0_CHSTATUS_CH1_Msk        (0x2UL)                   /*!< DMACTRL_0 CHSTATUS: CH1 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH2_Pos        (2UL)                     /*!< DMACTRL_0 CHSTATUS: CH2 (Bit 2)                       */
#define DMACTRL_0_CHSTATUS_CH2_Msk        (0x4UL)                   /*!< DMACTRL_0 CHSTATUS: CH2 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH3_Pos        (3UL)                     /*!< DMACTRL_0 CHSTATUS: CH3 (Bit 3)                       */
#define DMACTRL_0_CHSTATUS_CH3_Msk        (0x8UL)                   /*!< DMACTRL_0 CHSTATUS: CH3 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH4_Pos        (4UL)                     /*!< DMACTRL_0 CHSTATUS: CH4 (Bit 4)                       */
#define DMACTRL_0_CHSTATUS_CH4_Msk        (0x10UL)                  /*!< DMACTRL_0 CHSTATUS: CH4 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH5_Pos        (5UL)                     /*!< DMACTRL_0 CHSTATUS: CH5 (Bit 5)                       */
#define DMACTRL_0_CHSTATUS_CH5_Msk        (0x20UL)                  /*!< DMACTRL_0 CHSTATUS: CH5 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH6_Pos        (6UL)                     /*!< DMACTRL_0 CHSTATUS: CH6 (Bit 6)                       */
#define DMACTRL_0_CHSTATUS_CH6_Msk        (0x40UL)                  /*!< DMACTRL_0 CHSTATUS: CH6 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH7_Pos        (7UL)                     /*!< DMACTRL_0 CHSTATUS: CH7 (Bit 7)                       */
#define DMACTRL_0_CHSTATUS_CH7_Msk        (0x80UL)                  /*!< DMACTRL_0 CHSTATUS: CH7 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH8_Pos        (8UL)                     /*!< DMACTRL_0 CHSTATUS: CH8 (Bit 8)                       */
#define DMACTRL_0_CHSTATUS_CH8_Msk        (0x100UL)                 /*!< DMACTRL_0 CHSTATUS: CH8 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH9_Pos        (9UL)                     /*!< DMACTRL_0 CHSTATUS: CH9 (Bit 9)                       */
#define DMACTRL_0_CHSTATUS_CH9_Msk        (0x200UL)                 /*!< DMACTRL_0 CHSTATUS: CH9 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSTATUS_CH10_Pos       (10UL)                    /*!< DMACTRL_0 CHSTATUS: CH10 (Bit 10)                     */
#define DMACTRL_0_CHSTATUS_CH10_Msk       (0x400UL)                 /*!< DMACTRL_0 CHSTATUS: CH10 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHSTATUS_CH11_Pos       (11UL)                    /*!< DMACTRL_0 CHSTATUS: CH11 (Bit 11)                     */
#define DMACTRL_0_CHSTATUS_CH11_Msk       (0x800UL)                 /*!< DMACTRL_0 CHSTATUS: CH11 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHSTATUS_CH12_Pos       (12UL)                    /*!< DMACTRL_0 CHSTATUS: CH12 (Bit 12)                     */
#define DMACTRL_0_CHSTATUS_CH12_Msk       (0x1000UL)                /*!< DMACTRL_0 CHSTATUS: CH12 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHSTATUS_CH13_Pos       (13UL)                    /*!< DMACTRL_0 CHSTATUS: CH13 (Bit 13)                     */
#define DMACTRL_0_CHSTATUS_CH13_Msk       (0x2000UL)                /*!< DMACTRL_0 CHSTATUS: CH13 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHSTATUS_CH14_Pos       (14UL)                    /*!< DMACTRL_0 CHSTATUS: CH14 (Bit 14)                     */
#define DMACTRL_0_CHSTATUS_CH14_Msk       (0x4000UL)                /*!< DMACTRL_0 CHSTATUS: CH14 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHSTATUS_CH15_Pos       (15UL)                    /*!< DMACTRL_0 CHSTATUS: CH15 (Bit 15)                     */
#define DMACTRL_0_CHSTATUS_CH15_Msk       (0x8000UL)                /*!< DMACTRL_0 CHSTATUS: CH15 (Bitfield-Mask: 0x01)        */
/* ========================================================  CHSWRCN  ======================================================== */
#define DMACTRL_0_CHSWRCN_CH0_Pos         (0UL)                     /*!< DMACTRL_0 CHSWRCN: CH0 (Bit 0)                        */
#define DMACTRL_0_CHSWRCN_CH0_Msk         (0x1UL)                   /*!< DMACTRL_0 CHSWRCN: CH0 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH1_Pos         (1UL)                     /*!< DMACTRL_0 CHSWRCN: CH1 (Bit 1)                        */
#define DMACTRL_0_CHSWRCN_CH1_Msk         (0x2UL)                   /*!< DMACTRL_0 CHSWRCN: CH1 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH2_Pos         (2UL)                     /*!< DMACTRL_0 CHSWRCN: CH2 (Bit 2)                        */
#define DMACTRL_0_CHSWRCN_CH2_Msk         (0x4UL)                   /*!< DMACTRL_0 CHSWRCN: CH2 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH3_Pos         (3UL)                     /*!< DMACTRL_0 CHSWRCN: CH3 (Bit 3)                        */
#define DMACTRL_0_CHSWRCN_CH3_Msk         (0x8UL)                   /*!< DMACTRL_0 CHSWRCN: CH3 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH4_Pos         (4UL)                     /*!< DMACTRL_0 CHSWRCN: CH4 (Bit 4)                        */
#define DMACTRL_0_CHSWRCN_CH4_Msk         (0x10UL)                  /*!< DMACTRL_0 CHSWRCN: CH4 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH5_Pos         (5UL)                     /*!< DMACTRL_0 CHSWRCN: CH5 (Bit 5)                        */
#define DMACTRL_0_CHSWRCN_CH5_Msk         (0x20UL)                  /*!< DMACTRL_0 CHSWRCN: CH5 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH6_Pos         (6UL)                     /*!< DMACTRL_0 CHSWRCN: CH6 (Bit 6)                        */
#define DMACTRL_0_CHSWRCN_CH6_Msk         (0x40UL)                  /*!< DMACTRL_0 CHSWRCN: CH6 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH7_Pos         (7UL)                     /*!< DMACTRL_0 CHSWRCN: CH7 (Bit 7)                        */
#define DMACTRL_0_CHSWRCN_CH7_Msk         (0x80UL)                  /*!< DMACTRL_0 CHSWRCN: CH7 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH8_Pos         (8UL)                     /*!< DMACTRL_0 CHSWRCN: CH8 (Bit 8)                        */
#define DMACTRL_0_CHSWRCN_CH8_Msk         (0x100UL)                 /*!< DMACTRL_0 CHSWRCN: CH8 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH9_Pos         (9UL)                     /*!< DMACTRL_0 CHSWRCN: CH9 (Bit 9)                        */
#define DMACTRL_0_CHSWRCN_CH9_Msk         (0x200UL)                 /*!< DMACTRL_0 CHSWRCN: CH9 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHSWRCN_CH10_Pos        (10UL)                    /*!< DMACTRL_0 CHSWRCN: CH10 (Bit 10)                      */
#define DMACTRL_0_CHSWRCN_CH10_Msk        (0x400UL)                 /*!< DMACTRL_0 CHSWRCN: CH10 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSWRCN_CH11_Pos        (11UL)                    /*!< DMACTRL_0 CHSWRCN: CH11 (Bit 11)                      */
#define DMACTRL_0_CHSWRCN_CH11_Msk        (0x800UL)                 /*!< DMACTRL_0 CHSWRCN: CH11 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSWRCN_CH12_Pos        (12UL)                    /*!< DMACTRL_0 CHSWRCN: CH12 (Bit 12)                      */
#define DMACTRL_0_CHSWRCN_CH12_Msk        (0x1000UL)                /*!< DMACTRL_0 CHSWRCN: CH12 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSWRCN_CH13_Pos        (13UL)                    /*!< DMACTRL_0 CHSWRCN: CH13 (Bit 13)                      */
#define DMACTRL_0_CHSWRCN_CH13_Msk        (0x2000UL)                /*!< DMACTRL_0 CHSWRCN: CH13 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSWRCN_CH14_Pos        (14UL)                    /*!< DMACTRL_0 CHSWRCN: CH14 (Bit 14)                      */
#define DMACTRL_0_CHSWRCN_CH14_Msk        (0x4000UL)                /*!< DMACTRL_0 CHSWRCN: CH14 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHSWRCN_CH15_Pos        (15UL)                    /*!< DMACTRL_0 CHSWRCN: CH15 (Bit 15)                      */
#define DMACTRL_0_CHSWRCN_CH15_Msk        (0x8000UL)                /*!< DMACTRL_0 CHSWRCN: CH15 (Bitfield-Mask: 0x01)         */
/* =======================================================  CHREQMSET  ======================================================= */
#define DMACTRL_0_CHREQMSET_CH0_Pos       (0UL)                     /*!< DMACTRL_0 CHREQMSET: CH0 (Bit 0)                      */
#define DMACTRL_0_CHREQMSET_CH0_Msk       (0x1UL)                   /*!< DMACTRL_0 CHREQMSET: CH0 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH1_Pos       (1UL)                     /*!< DMACTRL_0 CHREQMSET: CH1 (Bit 1)                      */
#define DMACTRL_0_CHREQMSET_CH1_Msk       (0x2UL)                   /*!< DMACTRL_0 CHREQMSET: CH1 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH2_Pos       (2UL)                     /*!< DMACTRL_0 CHREQMSET: CH2 (Bit 2)                      */
#define DMACTRL_0_CHREQMSET_CH2_Msk       (0x4UL)                   /*!< DMACTRL_0 CHREQMSET: CH2 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH3_Pos       (3UL)                     /*!< DMACTRL_0 CHREQMSET: CH3 (Bit 3)                      */
#define DMACTRL_0_CHREQMSET_CH3_Msk       (0x8UL)                   /*!< DMACTRL_0 CHREQMSET: CH3 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH4_Pos       (4UL)                     /*!< DMACTRL_0 CHREQMSET: CH4 (Bit 4)                      */
#define DMACTRL_0_CHREQMSET_CH4_Msk       (0x10UL)                  /*!< DMACTRL_0 CHREQMSET: CH4 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH5_Pos       (5UL)                     /*!< DMACTRL_0 CHREQMSET: CH5 (Bit 5)                      */
#define DMACTRL_0_CHREQMSET_CH5_Msk       (0x20UL)                  /*!< DMACTRL_0 CHREQMSET: CH5 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH6_Pos       (6UL)                     /*!< DMACTRL_0 CHREQMSET: CH6 (Bit 6)                      */
#define DMACTRL_0_CHREQMSET_CH6_Msk       (0x40UL)                  /*!< DMACTRL_0 CHREQMSET: CH6 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH7_Pos       (7UL)                     /*!< DMACTRL_0 CHREQMSET: CH7 (Bit 7)                      */
#define DMACTRL_0_CHREQMSET_CH7_Msk       (0x80UL)                  /*!< DMACTRL_0 CHREQMSET: CH7 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH8_Pos       (8UL)                     /*!< DMACTRL_0 CHREQMSET: CH8 (Bit 8)                      */
#define DMACTRL_0_CHREQMSET_CH8_Msk       (0x100UL)                 /*!< DMACTRL_0 CHREQMSET: CH8 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH9_Pos       (9UL)                     /*!< DMACTRL_0 CHREQMSET: CH9 (Bit 9)                      */
#define DMACTRL_0_CHREQMSET_CH9_Msk       (0x200UL)                 /*!< DMACTRL_0 CHREQMSET: CH9 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMSET_CH10_Pos      (10UL)                    /*!< DMACTRL_0 CHREQMSET: CH10 (Bit 10)                    */
#define DMACTRL_0_CHREQMSET_CH10_Msk      (0x400UL)                 /*!< DMACTRL_0 CHREQMSET: CH10 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMSET_CH11_Pos      (11UL)                    /*!< DMACTRL_0 CHREQMSET: CH11 (Bit 11)                    */
#define DMACTRL_0_CHREQMSET_CH11_Msk      (0x800UL)                 /*!< DMACTRL_0 CHREQMSET: CH11 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMSET_CH12_Pos      (12UL)                    /*!< DMACTRL_0 CHREQMSET: CH12 (Bit 12)                    */
#define DMACTRL_0_CHREQMSET_CH12_Msk      (0x1000UL)                /*!< DMACTRL_0 CHREQMSET: CH12 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMSET_CH13_Pos      (13UL)                    /*!< DMACTRL_0 CHREQMSET: CH13 (Bit 13)                    */
#define DMACTRL_0_CHREQMSET_CH13_Msk      (0x2000UL)                /*!< DMACTRL_0 CHREQMSET: CH13 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMSET_CH14_Pos      (14UL)                    /*!< DMACTRL_0 CHREQMSET: CH14 (Bit 14)                    */
#define DMACTRL_0_CHREQMSET_CH14_Msk      (0x4000UL)                /*!< DMACTRL_0 CHREQMSET: CH14 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMSET_CH15_Pos      (15UL)                    /*!< DMACTRL_0 CHREQMSET: CH15 (Bit 15)                    */
#define DMACTRL_0_CHREQMSET_CH15_Msk      (0x8000UL)                /*!< DMACTRL_0 CHREQMSET: CH15 (Bitfield-Mask: 0x01)       */
/* =======================================================  CHREQMCLR  ======================================================= */
#define DMACTRL_0_CHREQMCLR_CH0_Pos       (0UL)                     /*!< DMACTRL_0 CHREQMCLR: CH0 (Bit 0)                      */
#define DMACTRL_0_CHREQMCLR_CH0_Msk       (0x1UL)                   /*!< DMACTRL_0 CHREQMCLR: CH0 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH1_Pos       (1UL)                     /*!< DMACTRL_0 CHREQMCLR: CH1 (Bit 1)                      */
#define DMACTRL_0_CHREQMCLR_CH1_Msk       (0x2UL)                   /*!< DMACTRL_0 CHREQMCLR: CH1 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH2_Pos       (2UL)                     /*!< DMACTRL_0 CHREQMCLR: CH2 (Bit 2)                      */
#define DMACTRL_0_CHREQMCLR_CH2_Msk       (0x4UL)                   /*!< DMACTRL_0 CHREQMCLR: CH2 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH3_Pos       (3UL)                     /*!< DMACTRL_0 CHREQMCLR: CH3 (Bit 3)                      */
#define DMACTRL_0_CHREQMCLR_CH3_Msk       (0x8UL)                   /*!< DMACTRL_0 CHREQMCLR: CH3 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH4_Pos       (4UL)                     /*!< DMACTRL_0 CHREQMCLR: CH4 (Bit 4)                      */
#define DMACTRL_0_CHREQMCLR_CH4_Msk       (0x10UL)                  /*!< DMACTRL_0 CHREQMCLR: CH4 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH5_Pos       (5UL)                     /*!< DMACTRL_0 CHREQMCLR: CH5 (Bit 5)                      */
#define DMACTRL_0_CHREQMCLR_CH5_Msk       (0x20UL)                  /*!< DMACTRL_0 CHREQMCLR: CH5 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH6_Pos       (6UL)                     /*!< DMACTRL_0 CHREQMCLR: CH6 (Bit 6)                      */
#define DMACTRL_0_CHREQMCLR_CH6_Msk       (0x40UL)                  /*!< DMACTRL_0 CHREQMCLR: CH6 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH7_Pos       (7UL)                     /*!< DMACTRL_0 CHREQMCLR: CH7 (Bit 7)                      */
#define DMACTRL_0_CHREQMCLR_CH7_Msk       (0x80UL)                  /*!< DMACTRL_0 CHREQMCLR: CH7 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH8_Pos       (8UL)                     /*!< DMACTRL_0 CHREQMCLR: CH8 (Bit 8)                      */
#define DMACTRL_0_CHREQMCLR_CH8_Msk       (0x100UL)                 /*!< DMACTRL_0 CHREQMCLR: CH8 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH9_Pos       (9UL)                     /*!< DMACTRL_0 CHREQMCLR: CH9 (Bit 9)                      */
#define DMACTRL_0_CHREQMCLR_CH9_Msk       (0x200UL)                 /*!< DMACTRL_0 CHREQMCLR: CH9 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHREQMCLR_CH10_Pos      (10UL)                    /*!< DMACTRL_0 CHREQMCLR: CH10 (Bit 10)                    */
#define DMACTRL_0_CHREQMCLR_CH10_Msk      (0x400UL)                 /*!< DMACTRL_0 CHREQMCLR: CH10 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMCLR_CH11_Pos      (11UL)                    /*!< DMACTRL_0 CHREQMCLR: CH11 (Bit 11)                    */
#define DMACTRL_0_CHREQMCLR_CH11_Msk      (0x800UL)                 /*!< DMACTRL_0 CHREQMCLR: CH11 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMCLR_CH12_Pos      (12UL)                    /*!< DMACTRL_0 CHREQMCLR: CH12 (Bit 12)                    */
#define DMACTRL_0_CHREQMCLR_CH12_Msk      (0x1000UL)                /*!< DMACTRL_0 CHREQMCLR: CH12 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMCLR_CH13_Pos      (13UL)                    /*!< DMACTRL_0 CHREQMCLR: CH13 (Bit 13)                    */
#define DMACTRL_0_CHREQMCLR_CH13_Msk      (0x2000UL)                /*!< DMACTRL_0 CHREQMCLR: CH13 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMCLR_CH14_Pos      (14UL)                    /*!< DMACTRL_0 CHREQMCLR: CH14 (Bit 14)                    */
#define DMACTRL_0_CHREQMCLR_CH14_Msk      (0x4000UL)                /*!< DMACTRL_0 CHREQMCLR: CH14 (Bitfield-Mask: 0x01)       */
#define DMACTRL_0_CHREQMCLR_CH15_Pos      (15UL)                    /*!< DMACTRL_0 CHREQMCLR: CH15 (Bit 15)                    */
#define DMACTRL_0_CHREQMCLR_CH15_Msk      (0x8000UL)                /*!< DMACTRL_0 CHREQMCLR: CH15 (Bitfield-Mask: 0x01)       */
/* ========================================================  CHENSET  ======================================================== */
#define DMACTRL_0_CHENSET_CH0_Pos         (0UL)                     /*!< DMACTRL_0 CHENSET: CH0 (Bit 0)                        */
#define DMACTRL_0_CHENSET_CH0_Msk         (0x1UL)                   /*!< DMACTRL_0 CHENSET: CH0 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH1_Pos         (1UL)                     /*!< DMACTRL_0 CHENSET: CH1 (Bit 1)                        */
#define DMACTRL_0_CHENSET_CH1_Msk         (0x2UL)                   /*!< DMACTRL_0 CHENSET: CH1 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH2_Pos         (2UL)                     /*!< DMACTRL_0 CHENSET: CH2 (Bit 2)                        */
#define DMACTRL_0_CHENSET_CH2_Msk         (0x4UL)                   /*!< DMACTRL_0 CHENSET: CH2 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH3_Pos         (3UL)                     /*!< DMACTRL_0 CHENSET: CH3 (Bit 3)                        */
#define DMACTRL_0_CHENSET_CH3_Msk         (0x8UL)                   /*!< DMACTRL_0 CHENSET: CH3 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH4_Pos         (4UL)                     /*!< DMACTRL_0 CHENSET: CH4 (Bit 4)                        */
#define DMACTRL_0_CHENSET_CH4_Msk         (0x10UL)                  /*!< DMACTRL_0 CHENSET: CH4 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH5_Pos         (5UL)                     /*!< DMACTRL_0 CHENSET: CH5 (Bit 5)                        */
#define DMACTRL_0_CHENSET_CH5_Msk         (0x20UL)                  /*!< DMACTRL_0 CHENSET: CH5 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH6_Pos         (6UL)                     /*!< DMACTRL_0 CHENSET: CH6 (Bit 6)                        */
#define DMACTRL_0_CHENSET_CH6_Msk         (0x40UL)                  /*!< DMACTRL_0 CHENSET: CH6 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH7_Pos         (7UL)                     /*!< DMACTRL_0 CHENSET: CH7 (Bit 7)                        */
#define DMACTRL_0_CHENSET_CH7_Msk         (0x80UL)                  /*!< DMACTRL_0 CHENSET: CH7 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH8_Pos         (8UL)                     /*!< DMACTRL_0 CHENSET: CH8 (Bit 8)                        */
#define DMACTRL_0_CHENSET_CH8_Msk         (0x100UL)                 /*!< DMACTRL_0 CHENSET: CH8 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH9_Pos         (9UL)                     /*!< DMACTRL_0 CHENSET: CH9 (Bit 9)                        */
#define DMACTRL_0_CHENSET_CH9_Msk         (0x200UL)                 /*!< DMACTRL_0 CHENSET: CH9 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENSET_CH10_Pos        (10UL)                    /*!< DMACTRL_0 CHENSET: CH10 (Bit 10)                      */
#define DMACTRL_0_CHENSET_CH10_Msk        (0x400UL)                 /*!< DMACTRL_0 CHENSET: CH10 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENSET_CH11_Pos        (11UL)                    /*!< DMACTRL_0 CHENSET: CH11 (Bit 11)                      */
#define DMACTRL_0_CHENSET_CH11_Msk        (0x800UL)                 /*!< DMACTRL_0 CHENSET: CH11 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENSET_CH12_Pos        (12UL)                    /*!< DMACTRL_0 CHENSET: CH12 (Bit 12)                      */
#define DMACTRL_0_CHENSET_CH12_Msk        (0x1000UL)                /*!< DMACTRL_0 CHENSET: CH12 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENSET_CH13_Pos        (13UL)                    /*!< DMACTRL_0 CHENSET: CH13 (Bit 13)                      */
#define DMACTRL_0_CHENSET_CH13_Msk        (0x2000UL)                /*!< DMACTRL_0 CHENSET: CH13 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENSET_CH14_Pos        (14UL)                    /*!< DMACTRL_0 CHENSET: CH14 (Bit 14)                      */
#define DMACTRL_0_CHENSET_CH14_Msk        (0x4000UL)                /*!< DMACTRL_0 CHENSET: CH14 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENSET_CH15_Pos        (15UL)                    /*!< DMACTRL_0 CHENSET: CH15 (Bit 15)                      */
#define DMACTRL_0_CHENSET_CH15_Msk        (0x8000UL)                /*!< DMACTRL_0 CHENSET: CH15 (Bitfield-Mask: 0x01)         */
/* ========================================================  CHENCLR  ======================================================== */
#define DMACTRL_0_CHENCLR_CH0_Pos         (0UL)                     /*!< DMACTRL_0 CHENCLR: CH0 (Bit 0)                        */
#define DMACTRL_0_CHENCLR_CH0_Msk         (0x1UL)                   /*!< DMACTRL_0 CHENCLR: CH0 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH1_Pos         (1UL)                     /*!< DMACTRL_0 CHENCLR: CH1 (Bit 1)                        */
#define DMACTRL_0_CHENCLR_CH1_Msk         (0x2UL)                   /*!< DMACTRL_0 CHENCLR: CH1 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH2_Pos         (2UL)                     /*!< DMACTRL_0 CHENCLR: CH2 (Bit 2)                        */
#define DMACTRL_0_CHENCLR_CH2_Msk         (0x4UL)                   /*!< DMACTRL_0 CHENCLR: CH2 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH3_Pos         (3UL)                     /*!< DMACTRL_0 CHENCLR: CH3 (Bit 3)                        */
#define DMACTRL_0_CHENCLR_CH3_Msk         (0x8UL)                   /*!< DMACTRL_0 CHENCLR: CH3 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH4_Pos         (4UL)                     /*!< DMACTRL_0 CHENCLR: CH4 (Bit 4)                        */
#define DMACTRL_0_CHENCLR_CH4_Msk         (0x10UL)                  /*!< DMACTRL_0 CHENCLR: CH4 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH5_Pos         (5UL)                     /*!< DMACTRL_0 CHENCLR: CH5 (Bit 5)                        */
#define DMACTRL_0_CHENCLR_CH5_Msk         (0x20UL)                  /*!< DMACTRL_0 CHENCLR: CH5 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH6_Pos         (6UL)                     /*!< DMACTRL_0 CHENCLR: CH6 (Bit 6)                        */
#define DMACTRL_0_CHENCLR_CH6_Msk         (0x40UL)                  /*!< DMACTRL_0 CHENCLR: CH6 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH7_Pos         (7UL)                     /*!< DMACTRL_0 CHENCLR: CH7 (Bit 7)                        */
#define DMACTRL_0_CHENCLR_CH7_Msk         (0x80UL)                  /*!< DMACTRL_0 CHENCLR: CH7 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH8_Pos         (8UL)                     /*!< DMACTRL_0 CHENCLR: CH8 (Bit 8)                        */
#define DMACTRL_0_CHENCLR_CH8_Msk         (0x100UL)                 /*!< DMACTRL_0 CHENCLR: CH8 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH9_Pos         (9UL)                     /*!< DMACTRL_0 CHENCLR: CH9 (Bit 9)                        */
#define DMACTRL_0_CHENCLR_CH9_Msk         (0x200UL)                 /*!< DMACTRL_0 CHENCLR: CH9 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHENCLR_CH10_Pos        (10UL)                    /*!< DMACTRL_0 CHENCLR: CH10 (Bit 10)                      */
#define DMACTRL_0_CHENCLR_CH10_Msk        (0x400UL)                 /*!< DMACTRL_0 CHENCLR: CH10 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENCLR_CH11_Pos        (11UL)                    /*!< DMACTRL_0 CHENCLR: CH11 (Bit 11)                      */
#define DMACTRL_0_CHENCLR_CH11_Msk        (0x800UL)                 /*!< DMACTRL_0 CHENCLR: CH11 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENCLR_CH12_Pos        (12UL)                    /*!< DMACTRL_0 CHENCLR: CH12 (Bit 12)                      */
#define DMACTRL_0_CHENCLR_CH12_Msk        (0x1000UL)                /*!< DMACTRL_0 CHENCLR: CH12 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENCLR_CH13_Pos        (13UL)                    /*!< DMACTRL_0 CHENCLR: CH13 (Bit 13)                      */
#define DMACTRL_0_CHENCLR_CH13_Msk        (0x2000UL)                /*!< DMACTRL_0 CHENCLR: CH13 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENCLR_CH14_Pos        (14UL)                    /*!< DMACTRL_0 CHENCLR: CH14 (Bit 14)                      */
#define DMACTRL_0_CHENCLR_CH14_Msk        (0x4000UL)                /*!< DMACTRL_0 CHENCLR: CH14 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHENCLR_CH15_Pos        (15UL)                    /*!< DMACTRL_0 CHENCLR: CH15 (Bit 15)                      */
#define DMACTRL_0_CHENCLR_CH15_Msk        (0x8000UL)                /*!< DMACTRL_0 CHENCLR: CH15 (Bitfield-Mask: 0x01)         */
/* =======================================================  CHALTSET  ======================================================== */
#define DMACTRL_0_CHALTSET_CH0_Pos        (0UL)                     /*!< DMACTRL_0 CHALTSET: CH0 (Bit 0)                       */
#define DMACTRL_0_CHALTSET_CH0_Msk        (0x1UL)                   /*!< DMACTRL_0 CHALTSET: CH0 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH1_Pos        (1UL)                     /*!< DMACTRL_0 CHALTSET: CH1 (Bit 1)                       */
#define DMACTRL_0_CHALTSET_CH1_Msk        (0x2UL)                   /*!< DMACTRL_0 CHALTSET: CH1 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH2_Pos        (2UL)                     /*!< DMACTRL_0 CHALTSET: CH2 (Bit 2)                       */
#define DMACTRL_0_CHALTSET_CH2_Msk        (0x4UL)                   /*!< DMACTRL_0 CHALTSET: CH2 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH3_Pos        (3UL)                     /*!< DMACTRL_0 CHALTSET: CH3 (Bit 3)                       */
#define DMACTRL_0_CHALTSET_CH3_Msk        (0x8UL)                   /*!< DMACTRL_0 CHALTSET: CH3 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH4_Pos        (4UL)                     /*!< DMACTRL_0 CHALTSET: CH4 (Bit 4)                       */
#define DMACTRL_0_CHALTSET_CH4_Msk        (0x10UL)                  /*!< DMACTRL_0 CHALTSET: CH4 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH5_Pos        (5UL)                     /*!< DMACTRL_0 CHALTSET: CH5 (Bit 5)                       */
#define DMACTRL_0_CHALTSET_CH5_Msk        (0x20UL)                  /*!< DMACTRL_0 CHALTSET: CH5 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH6_Pos        (6UL)                     /*!< DMACTRL_0 CHALTSET: CH6 (Bit 6)                       */
#define DMACTRL_0_CHALTSET_CH6_Msk        (0x40UL)                  /*!< DMACTRL_0 CHALTSET: CH6 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH7_Pos        (7UL)                     /*!< DMACTRL_0 CHALTSET: CH7 (Bit 7)                       */
#define DMACTRL_0_CHALTSET_CH7_Msk        (0x80UL)                  /*!< DMACTRL_0 CHALTSET: CH7 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH8_Pos        (8UL)                     /*!< DMACTRL_0 CHALTSET: CH8 (Bit 8)                       */
#define DMACTRL_0_CHALTSET_CH8_Msk        (0x100UL)                 /*!< DMACTRL_0 CHALTSET: CH8 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH9_Pos        (9UL)                     /*!< DMACTRL_0 CHALTSET: CH9 (Bit 9)                       */
#define DMACTRL_0_CHALTSET_CH9_Msk        (0x200UL)                 /*!< DMACTRL_0 CHALTSET: CH9 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTSET_CH10_Pos       (10UL)                    /*!< DMACTRL_0 CHALTSET: CH10 (Bit 10)                     */
#define DMACTRL_0_CHALTSET_CH10_Msk       (0x400UL)                 /*!< DMACTRL_0 CHALTSET: CH10 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTSET_CH11_Pos       (11UL)                    /*!< DMACTRL_0 CHALTSET: CH11 (Bit 11)                     */
#define DMACTRL_0_CHALTSET_CH11_Msk       (0x800UL)                 /*!< DMACTRL_0 CHALTSET: CH11 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTSET_CH12_Pos       (12UL)                    /*!< DMACTRL_0 CHALTSET: CH12 (Bit 12)                     */
#define DMACTRL_0_CHALTSET_CH12_Msk       (0x1000UL)                /*!< DMACTRL_0 CHALTSET: CH12 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTSET_CH13_Pos       (13UL)                    /*!< DMACTRL_0 CHALTSET: CH13 (Bit 13)                     */
#define DMACTRL_0_CHALTSET_CH13_Msk       (0x2000UL)                /*!< DMACTRL_0 CHALTSET: CH13 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTSET_CH14_Pos       (14UL)                    /*!< DMACTRL_0 CHALTSET: CH14 (Bit 14)                     */
#define DMACTRL_0_CHALTSET_CH14_Msk       (0x4000UL)                /*!< DMACTRL_0 CHALTSET: CH14 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTSET_CH15_Pos       (15UL)                    /*!< DMACTRL_0 CHALTSET: CH15 (Bit 15)                     */
#define DMACTRL_0_CHALTSET_CH15_Msk       (0x8000UL)                /*!< DMACTRL_0 CHALTSET: CH15 (Bitfield-Mask: 0x01)        */
/* =======================================================  CHALTCLR  ======================================================== */
#define DMACTRL_0_CHALTCLR_CH0_Pos        (0UL)                     /*!< DMACTRL_0 CHALTCLR: CH0 (Bit 0)                       */
#define DMACTRL_0_CHALTCLR_CH0_Msk        (0x1UL)                   /*!< DMACTRL_0 CHALTCLR: CH0 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH1_Pos        (1UL)                     /*!< DMACTRL_0 CHALTCLR: CH1 (Bit 1)                       */
#define DMACTRL_0_CHALTCLR_CH1_Msk        (0x2UL)                   /*!< DMACTRL_0 CHALTCLR: CH1 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH2_Pos        (2UL)                     /*!< DMACTRL_0 CHALTCLR: CH2 (Bit 2)                       */
#define DMACTRL_0_CHALTCLR_CH2_Msk        (0x4UL)                   /*!< DMACTRL_0 CHALTCLR: CH2 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH3_Pos        (3UL)                     /*!< DMACTRL_0 CHALTCLR: CH3 (Bit 3)                       */
#define DMACTRL_0_CHALTCLR_CH3_Msk        (0x8UL)                   /*!< DMACTRL_0 CHALTCLR: CH3 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH4_Pos        (4UL)                     /*!< DMACTRL_0 CHALTCLR: CH4 (Bit 4)                       */
#define DMACTRL_0_CHALTCLR_CH4_Msk        (0x10UL)                  /*!< DMACTRL_0 CHALTCLR: CH4 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH5_Pos        (5UL)                     /*!< DMACTRL_0 CHALTCLR: CH5 (Bit 5)                       */
#define DMACTRL_0_CHALTCLR_CH5_Msk        (0x20UL)                  /*!< DMACTRL_0 CHALTCLR: CH5 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH6_Pos        (6UL)                     /*!< DMACTRL_0 CHALTCLR: CH6 (Bit 6)                       */
#define DMACTRL_0_CHALTCLR_CH6_Msk        (0x40UL)                  /*!< DMACTRL_0 CHALTCLR: CH6 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH7_Pos        (7UL)                     /*!< DMACTRL_0 CHALTCLR: CH7 (Bit 7)                       */
#define DMACTRL_0_CHALTCLR_CH7_Msk        (0x80UL)                  /*!< DMACTRL_0 CHALTCLR: CH7 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH8_Pos        (8UL)                     /*!< DMACTRL_0 CHALTCLR: CH8 (Bit 8)                       */
#define DMACTRL_0_CHALTCLR_CH8_Msk        (0x100UL)                 /*!< DMACTRL_0 CHALTCLR: CH8 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH9_Pos        (9UL)                     /*!< DMACTRL_0 CHALTCLR: CH9 (Bit 9)                       */
#define DMACTRL_0_CHALTCLR_CH9_Msk        (0x200UL)                 /*!< DMACTRL_0 CHALTCLR: CH9 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHALTCLR_CH10_Pos       (10UL)                    /*!< DMACTRL_0 CHALTCLR: CH10 (Bit 10)                     */
#define DMACTRL_0_CHALTCLR_CH10_Msk       (0x400UL)                 /*!< DMACTRL_0 CHALTCLR: CH10 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTCLR_CH11_Pos       (11UL)                    /*!< DMACTRL_0 CHALTCLR: CH11 (Bit 11)                     */
#define DMACTRL_0_CHALTCLR_CH11_Msk       (0x800UL)                 /*!< DMACTRL_0 CHALTCLR: CH11 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTCLR_CH12_Pos       (12UL)                    /*!< DMACTRL_0 CHALTCLR: CH12 (Bit 12)                     */
#define DMACTRL_0_CHALTCLR_CH12_Msk       (0x1000UL)                /*!< DMACTRL_0 CHALTCLR: CH12 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTCLR_CH13_Pos       (13UL)                    /*!< DMACTRL_0 CHALTCLR: CH13 (Bit 13)                     */
#define DMACTRL_0_CHALTCLR_CH13_Msk       (0x2000UL)                /*!< DMACTRL_0 CHALTCLR: CH13 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTCLR_CH14_Pos       (14UL)                    /*!< DMACTRL_0 CHALTCLR: CH14 (Bit 14)                     */
#define DMACTRL_0_CHALTCLR_CH14_Msk       (0x4000UL)                /*!< DMACTRL_0 CHALTCLR: CH14 (Bitfield-Mask: 0x01)        */
#define DMACTRL_0_CHALTCLR_CH15_Pos       (15UL)                    /*!< DMACTRL_0 CHALTCLR: CH15 (Bit 15)                     */
#define DMACTRL_0_CHALTCLR_CH15_Msk       (0x8000UL)                /*!< DMACTRL_0 CHALTCLR: CH15 (Bitfield-Mask: 0x01)        */
/* ========================================================  CHHPSET  ======================================================== */
#define DMACTRL_0_CHHPSET_CH0_Pos         (0UL)                     /*!< DMACTRL_0 CHHPSET: CH0 (Bit 0)                        */
#define DMACTRL_0_CHHPSET_CH0_Msk         (0x1UL)                   /*!< DMACTRL_0 CHHPSET: CH0 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH1_Pos         (1UL)                     /*!< DMACTRL_0 CHHPSET: CH1 (Bit 1)                        */
#define DMACTRL_0_CHHPSET_CH1_Msk         (0x2UL)                   /*!< DMACTRL_0 CHHPSET: CH1 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH2_Pos         (2UL)                     /*!< DMACTRL_0 CHHPSET: CH2 (Bit 2)                        */
#define DMACTRL_0_CHHPSET_CH2_Msk         (0x4UL)                   /*!< DMACTRL_0 CHHPSET: CH2 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH3_Pos         (3UL)                     /*!< DMACTRL_0 CHHPSET: CH3 (Bit 3)                        */
#define DMACTRL_0_CHHPSET_CH3_Msk         (0x8UL)                   /*!< DMACTRL_0 CHHPSET: CH3 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH4_Pos         (4UL)                     /*!< DMACTRL_0 CHHPSET: CH4 (Bit 4)                        */
#define DMACTRL_0_CHHPSET_CH4_Msk         (0x10UL)                  /*!< DMACTRL_0 CHHPSET: CH4 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH5_Pos         (5UL)                     /*!< DMACTRL_0 CHHPSET: CH5 (Bit 5)                        */
#define DMACTRL_0_CHHPSET_CH5_Msk         (0x20UL)                  /*!< DMACTRL_0 CHHPSET: CH5 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH6_Pos         (6UL)                     /*!< DMACTRL_0 CHHPSET: CH6 (Bit 6)                        */
#define DMACTRL_0_CHHPSET_CH6_Msk         (0x40UL)                  /*!< DMACTRL_0 CHHPSET: CH6 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH7_Pos         (7UL)                     /*!< DMACTRL_0 CHHPSET: CH7 (Bit 7)                        */
#define DMACTRL_0_CHHPSET_CH7_Msk         (0x80UL)                  /*!< DMACTRL_0 CHHPSET: CH7 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH8_Pos         (8UL)                     /*!< DMACTRL_0 CHHPSET: CH8 (Bit 8)                        */
#define DMACTRL_0_CHHPSET_CH8_Msk         (0x100UL)                 /*!< DMACTRL_0 CHHPSET: CH8 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH9_Pos         (9UL)                     /*!< DMACTRL_0 CHHPSET: CH9 (Bit 9)                        */
#define DMACTRL_0_CHHPSET_CH9_Msk         (0x200UL)                 /*!< DMACTRL_0 CHHPSET: CH9 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPSET_CH10_Pos        (10UL)                    /*!< DMACTRL_0 CHHPSET: CH10 (Bit 10)                      */
#define DMACTRL_0_CHHPSET_CH10_Msk        (0x400UL)                 /*!< DMACTRL_0 CHHPSET: CH10 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPSET_CH11_Pos        (11UL)                    /*!< DMACTRL_0 CHHPSET: CH11 (Bit 11)                      */
#define DMACTRL_0_CHHPSET_CH11_Msk        (0x800UL)                 /*!< DMACTRL_0 CHHPSET: CH11 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPSET_CH12_Pos        (12UL)                    /*!< DMACTRL_0 CHHPSET: CH12 (Bit 12)                      */
#define DMACTRL_0_CHHPSET_CH12_Msk        (0x1000UL)                /*!< DMACTRL_0 CHHPSET: CH12 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPSET_CH13_Pos        (13UL)                    /*!< DMACTRL_0 CHHPSET: CH13 (Bit 13)                      */
#define DMACTRL_0_CHHPSET_CH13_Msk        (0x2000UL)                /*!< DMACTRL_0 CHHPSET: CH13 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPSET_CH14_Pos        (14UL)                    /*!< DMACTRL_0 CHHPSET: CH14 (Bit 14)                      */
#define DMACTRL_0_CHHPSET_CH14_Msk        (0x4000UL)                /*!< DMACTRL_0 CHHPSET: CH14 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPSET_CH15_Pos        (15UL)                    /*!< DMACTRL_0 CHHPSET: CH15 (Bit 15)                      */
#define DMACTRL_0_CHHPSET_CH15_Msk        (0x8000UL)                /*!< DMACTRL_0 CHHPSET: CH15 (Bitfield-Mask: 0x01)         */
/* ========================================================  CHHPCLR  ======================================================== */
#define DMACTRL_0_CHHPCLR_CH0_Pos         (0UL)                     /*!< DMACTRL_0 CHHPCLR: CH0 (Bit 0)                        */
#define DMACTRL_0_CHHPCLR_CH0_Msk         (0x1UL)                   /*!< DMACTRL_0 CHHPCLR: CH0 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH1_Pos         (1UL)                     /*!< DMACTRL_0 CHHPCLR: CH1 (Bit 1)                        */
#define DMACTRL_0_CHHPCLR_CH1_Msk         (0x2UL)                   /*!< DMACTRL_0 CHHPCLR: CH1 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH2_Pos         (2UL)                     /*!< DMACTRL_0 CHHPCLR: CH2 (Bit 2)                        */
#define DMACTRL_0_CHHPCLR_CH2_Msk         (0x4UL)                   /*!< DMACTRL_0 CHHPCLR: CH2 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH3_Pos         (3UL)                     /*!< DMACTRL_0 CHHPCLR: CH3 (Bit 3)                        */
#define DMACTRL_0_CHHPCLR_CH3_Msk         (0x8UL)                   /*!< DMACTRL_0 CHHPCLR: CH3 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH4_Pos         (4UL)                     /*!< DMACTRL_0 CHHPCLR: CH4 (Bit 4)                        */
#define DMACTRL_0_CHHPCLR_CH4_Msk         (0x10UL)                  /*!< DMACTRL_0 CHHPCLR: CH4 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH5_Pos         (5UL)                     /*!< DMACTRL_0 CHHPCLR: CH5 (Bit 5)                        */
#define DMACTRL_0_CHHPCLR_CH5_Msk         (0x20UL)                  /*!< DMACTRL_0 CHHPCLR: CH5 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH6_Pos         (6UL)                     /*!< DMACTRL_0 CHHPCLR: CH6 (Bit 6)                        */
#define DMACTRL_0_CHHPCLR_CH6_Msk         (0x40UL)                  /*!< DMACTRL_0 CHHPCLR: CH6 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH7_Pos         (7UL)                     /*!< DMACTRL_0 CHHPCLR: CH7 (Bit 7)                        */
#define DMACTRL_0_CHHPCLR_CH7_Msk         (0x80UL)                  /*!< DMACTRL_0 CHHPCLR: CH7 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH8_Pos         (8UL)                     /*!< DMACTRL_0 CHHPCLR: CH8 (Bit 8)                        */
#define DMACTRL_0_CHHPCLR_CH8_Msk         (0x100UL)                 /*!< DMACTRL_0 CHHPCLR: CH8 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH9_Pos         (9UL)                     /*!< DMACTRL_0 CHHPCLR: CH9 (Bit 9)                        */
#define DMACTRL_0_CHHPCLR_CH9_Msk         (0x200UL)                 /*!< DMACTRL_0 CHHPCLR: CH9 (Bitfield-Mask: 0x01)          */
#define DMACTRL_0_CHHPCLR_CH10_Pos        (10UL)                    /*!< DMACTRL_0 CHHPCLR: CH10 (Bit 10)                      */
#define DMACTRL_0_CHHPCLR_CH10_Msk        (0x400UL)                 /*!< DMACTRL_0 CHHPCLR: CH10 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPCLR_CH11_Pos        (11UL)                    /*!< DMACTRL_0 CHHPCLR: CH11 (Bit 11)                      */
#define DMACTRL_0_CHHPCLR_CH11_Msk        (0x800UL)                 /*!< DMACTRL_0 CHHPCLR: CH11 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPCLR_CH12_Pos        (12UL)                    /*!< DMACTRL_0 CHHPCLR: CH12 (Bit 12)                      */
#define DMACTRL_0_CHHPCLR_CH12_Msk        (0x1000UL)                /*!< DMACTRL_0 CHHPCLR: CH12 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPCLR_CH13_Pos        (13UL)                    /*!< DMACTRL_0 CHHPCLR: CH13 (Bit 13)                      */
#define DMACTRL_0_CHHPCLR_CH13_Msk        (0x2000UL)                /*!< DMACTRL_0 CHHPCLR: CH13 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPCLR_CH14_Pos        (14UL)                    /*!< DMACTRL_0 CHHPCLR: CH14 (Bit 14)                      */
#define DMACTRL_0_CHHPCLR_CH14_Msk        (0x4000UL)                /*!< DMACTRL_0 CHHPCLR: CH14 (Bitfield-Mask: 0x01)         */
#define DMACTRL_0_CHHPCLR_CH15_Pos        (15UL)                    /*!< DMACTRL_0 CHHPCLR: CH15 (Bit 15)                      */
#define DMACTRL_0_CHHPCLR_CH15_Msk        (0x8000UL)                /*!< DMACTRL_0 CHHPCLR: CH15 (Bitfield-Mask: 0x01)         */
/* ========================================================  BERRCLR  ======================================================== */
#define DMACTRL_0_BERRCLR_ERROR_Pos       (0UL)                     /*!< DMACTRL_0 BERRCLR: ERROR (Bit 0)                      */
#define DMACTRL_0_BERRCLR_ERROR_Msk       (0x1UL)                   /*!< DMACTRL_0 BERRCLR: ERROR (Bitfield-Mask: 0x01)        */


/* =========================================================================================================================== */
/* ================                                         DMAXBAR_0                                         ================ */
/* =========================================================================================================================== */

/* =======================================================  DMAXBAR0  ======================================================== */
#define DMAXBAR_0_DMAXBAR0_CH0SEL_Pos     (0UL)                     /*!< DMAXBAR_0 DMAXBAR0: CH0SEL (Bit 0)                    */
#define DMAXBAR_0_DMAXBAR0_CH0SEL_Msk     (0xfUL)                   /*!< DMAXBAR_0 DMAXBAR0: CH0SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR0_CH1SEL_Pos     (4UL)                     /*!< DMAXBAR_0 DMAXBAR0: CH1SEL (Bit 4)                    */
#define DMAXBAR_0_DMAXBAR0_CH1SEL_Msk     (0xf0UL)                  /*!< DMAXBAR_0 DMAXBAR0: CH1SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR0_CH2SEL_Pos     (8UL)                     /*!< DMAXBAR_0 DMAXBAR0: CH2SEL (Bit 8)                    */
#define DMAXBAR_0_DMAXBAR0_CH2SEL_Msk     (0xf00UL)                 /*!< DMAXBAR_0 DMAXBAR0: CH2SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR0_CH3SEL_Pos     (12UL)                    /*!< DMAXBAR_0 DMAXBAR0: CH3SEL (Bit 12)                   */
#define DMAXBAR_0_DMAXBAR0_CH3SEL_Msk     (0xf000UL)                /*!< DMAXBAR_0 DMAXBAR0: CH3SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR0_CH4SEL_Pos     (16UL)                    /*!< DMAXBAR_0 DMAXBAR0: CH4SEL (Bit 16)                   */
#define DMAXBAR_0_DMAXBAR0_CH4SEL_Msk     (0xf0000UL)               /*!< DMAXBAR_0 DMAXBAR0: CH4SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR0_CH5SEL_Pos     (20UL)                    /*!< DMAXBAR_0 DMAXBAR0: CH5SEL (Bit 20)                   */
#define DMAXBAR_0_DMAXBAR0_CH5SEL_Msk     (0xf00000UL)              /*!< DMAXBAR_0 DMAXBAR0: CH5SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR0_CH6SEL_Pos     (24UL)                    /*!< DMAXBAR_0 DMAXBAR0: CH6SEL (Bit 24)                   */
#define DMAXBAR_0_DMAXBAR0_CH6SEL_Msk     (0xf000000UL)             /*!< DMAXBAR_0 DMAXBAR0: CH6SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR0_CH7SEL_Pos     (28UL)                    /*!< DMAXBAR_0 DMAXBAR0: CH7SEL (Bit 28)                   */
#define DMAXBAR_0_DMAXBAR0_CH7SEL_Msk     (0xf0000000UL)            /*!< DMAXBAR_0 DMAXBAR0: CH7SEL (Bitfield-Mask: 0x0f)      */
/* =======================================================  DMAXBAR1  ======================================================== */
#define DMAXBAR_0_DMAXBAR1_CH8SEL_Pos     (0UL)                     /*!< DMAXBAR_0 DMAXBAR1: CH8SEL (Bit 0)                    */
#define DMAXBAR_0_DMAXBAR1_CH8SEL_Msk     (0xfUL)                   /*!< DMAXBAR_0 DMAXBAR1: CH8SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR1_CH9SEL_Pos     (4UL)                     /*!< DMAXBAR_0 DMAXBAR1: CH9SEL (Bit 4)                    */
#define DMAXBAR_0_DMAXBAR1_CH9SEL_Msk     (0xf0UL)                  /*!< DMAXBAR_0 DMAXBAR1: CH9SEL (Bitfield-Mask: 0x0f)      */
#define DMAXBAR_0_DMAXBAR1_CH10SEL_Pos    (8UL)                     /*!< DMAXBAR_0 DMAXBAR1: CH10SEL (Bit 8)                   */
#define DMAXBAR_0_DMAXBAR1_CH10SEL_Msk    (0xf00UL)                 /*!< DMAXBAR_0 DMAXBAR1: CH10SEL (Bitfield-Mask: 0x0f)     */
#define DMAXBAR_0_DMAXBAR1_CH11SEL_Pos    (12UL)                    /*!< DMAXBAR_0 DMAXBAR1: CH11SEL (Bit 12)                  */
#define DMAXBAR_0_DMAXBAR1_CH11SEL_Msk    (0xf000UL)                /*!< DMAXBAR_0 DMAXBAR1: CH11SEL (Bitfield-Mask: 0x0f)     */
#define DMAXBAR_0_DMAXBAR1_CH12SEL_Pos    (16UL)                    /*!< DMAXBAR_0 DMAXBAR1: CH12SEL (Bit 16)                  */
#define DMAXBAR_0_DMAXBAR1_CH12SEL_Msk    (0xf0000UL)               /*!< DMAXBAR_0 DMAXBAR1: CH12SEL (Bitfield-Mask: 0x0f)     */
#define DMAXBAR_0_DMAXBAR1_CH13SEL_Pos    (20UL)                    /*!< DMAXBAR_0 DMAXBAR1: CH13SEL (Bit 20)                  */
#define DMAXBAR_0_DMAXBAR1_CH13SEL_Msk    (0xf00000UL)              /*!< DMAXBAR_0 DMAXBAR1: CH13SEL (Bitfield-Mask: 0x0f)     */
#define DMAXBAR_0_DMAXBAR1_CH14SEL_Pos    (24UL)                    /*!< DMAXBAR_0 DMAXBAR1: CH14SEL (Bit 24)                  */
#define DMAXBAR_0_DMAXBAR1_CH14SEL_Msk    (0xf000000UL)             /*!< DMAXBAR_0 DMAXBAR1: CH14SEL (Bitfield-Mask: 0x0f)     */
#define DMAXBAR_0_DMAXBAR1_CH15SEL_Pos    (28UL)                    /*!< DMAXBAR_0 DMAXBAR1: CH15SEL (Bit 28)                  */
#define DMAXBAR_0_DMAXBAR1_CH15SEL_Msk    (0xf0000000UL)            /*!< DMAXBAR_0 DMAXBAR1: CH15SEL (Bitfield-Mask: 0x0f)     */


/* =========================================================================================================================== */
/* ================                                        DEVICEID_0                                         ================ */
/* =========================================================================================================================== */

/* =======================================================  DEVICEID0  ======================================================= */
#define DEVICEID_0_DEVICEID0_REVID_Pos    (0UL)                     /*!< DEVICEID_0 DEVICEID0: REVID (Bit 0)                   */
#define DEVICEID_0_DEVICEID0_REVID_Msk    (0xfUL)                   /*!< DEVICEID_0 DEVICEID0: REVID (Bitfield-Mask: 0x0f)     */
#define DEVICEID_0_DEVICEID0_DEVICEID0_Pos (4UL)                    /*!< DEVICEID_0 DEVICEID0: DEVICEID0 (Bit 4)               */
#define DEVICEID_0_DEVICEID0_DEVICEID0_Msk (0xfffffff0UL)           /*!< DEVICEID_0 DEVICEID0: DEVICEID0 (Bitfield-Mask: 0xfffffff) */
/* =======================================================  DEVICEID1  ======================================================= */
#define DEVICEID_0_DEVICEID1_DEVICEID1_Pos (0UL)                    /*!< DEVICEID_0 DEVICEID1: DEVICEID1 (Bit 0)               */
#define DEVICEID_0_DEVICEID1_DEVICEID1_Msk (0xffffffffUL)           /*!< DEVICEID_0 DEVICEID1: DEVICEID1 (Bitfield-Mask: 0xffffffff) */
/* =======================================================  DEVICEID2  ======================================================= */
#define DEVICEID_0_DEVICEID2_DEVICEID2_Pos (0UL)                    /*!< DEVICEID_0 DEVICEID2: DEVICEID2 (Bit 0)               */
#define DEVICEID_0_DEVICEID2_DEVICEID2_Msk (0xffffffffUL)           /*!< DEVICEID_0 DEVICEID2: DEVICEID2 (Bitfield-Mask: 0xffffffff) */
/* =======================================================  DEVICEID3  ======================================================= */
#define DEVICEID_0_DEVICEID3_DEVICEID3_Pos (0UL)                    /*!< DEVICEID_0 DEVICEID3: DEVICEID3 (Bit 0)               */
#define DEVICEID_0_DEVICEID3_DEVICEID3_Msk (0xffffffffUL)           /*!< DEVICEID_0 DEVICEID3: DEVICEID3 (Bitfield-Mask: 0xffffffff) */


/* =========================================================================================================================== */
/* ================                                          EMIF_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define EMIF_0_CONTROL_IF0EN_Pos          (0UL)                     /*!< EMIF_0 CONTROL: IF0EN (Bit 0)                         */
#define EMIF_0_CONTROL_IF0EN_Msk          (0x1UL)                   /*!< EMIF_0 CONTROL: IF0EN (Bitfield-Mask: 0x01)           */
#define EMIF_0_CONTROL_IF1EN_Pos          (1UL)                     /*!< EMIF_0 CONTROL: IF1EN (Bit 1)                         */
#define EMIF_0_CONTROL_IF1EN_Msk          (0x2UL)                   /*!< EMIF_0 CONTROL: IF1EN (Bitfield-Mask: 0x01)           */
#define EMIF_0_CONTROL_OFFSTEN_Pos        (4UL)                     /*!< EMIF_0 CONTROL: OFFSTEN (Bit 4)                       */
#define EMIF_0_CONTROL_OFFSTEN_Msk        (0x10UL)                  /*!< EMIF_0 CONTROL: OFFSTEN (Bitfield-Mask: 0x01)         */
/* ========================================================  STATUS  ========================================================= */
#define EMIF_0_STATUS_OFFSTS_Pos          (0UL)                     /*!< EMIF_0 STATUS: OFFSTS (Bit 0)                         */
#define EMIF_0_STATUS_OFFSTS_Msk          (0x1UL)                   /*!< EMIF_0 STATUS: OFFSTS (Bitfield-Mask: 0x01)           */
#define EMIF_0_STATUS_IDLESTS_Pos         (1UL)                     /*!< EMIF_0 STATUS: IDLESTS (Bit 1)                        */
#define EMIF_0_STATUS_IDLESTS_Msk         (0x2UL)                   /*!< EMIF_0 STATUS: IDLESTS (Bitfield-Mask: 0x01)          */
/* =======================================================  CONFIG_0  ======================================================== */
#define EMIF_0_CONFIG_0_BUSWIDTH_Pos      (0UL)                     /*!< EMIF_0 CONFIG_0: BUSWIDTH (Bit 0)                     */
#define EMIF_0_CONFIG_0_BUSWIDTH_Msk      (0x1UL)                   /*!< EMIF_0 CONFIG_0: BUSWIDTH (Bitfield-Mask: 0x01)       */
#define EMIF_0_CONFIG_0_MUXMD_Pos         (2UL)                     /*!< EMIF_0 CONFIG_0: MUXMD (Bit 2)                        */
#define EMIF_0_CONFIG_0_MUXMD_Msk         (0x4UL)                   /*!< EMIF_0 CONFIG_0: MUXMD (Bitfield-Mask: 0x01)          */
#define EMIF_0_CONFIG_0_ASEN_Pos          (3UL)                     /*!< EMIF_0 CONFIG_0: ASEN (Bit 3)                         */
#define EMIF_0_CONFIG_0_ASEN_Msk          (0x8UL)                   /*!< EMIF_0 CONFIG_0: ASEN (Bitfield-Mask: 0x01)           */
#define EMIF_0_CONFIG_0_ROEN_Pos          (4UL)                     /*!< EMIF_0 CONFIG_0: ROEN (Bit 4)                         */
#define EMIF_0_CONFIG_0_ROEN_Msk          (0x10UL)                  /*!< EMIF_0 CONFIG_0: ROEN (Bitfield-Mask: 0x01)           */
#define EMIF_0_CONFIG_0_WDHINH_Pos        (8UL)                     /*!< EMIF_0 CONFIG_0: WDHINH (Bit 8)                       */
#define EMIF_0_CONFIG_0_WDHINH_Msk        (0x100UL)                 /*!< EMIF_0 CONFIG_0: WDHINH (Bitfield-Mask: 0x01)         */
#define EMIF_0_CONFIG_0_DELAYOE_Pos       (12UL)                    /*!< EMIF_0 CONFIG_0: DELAYOE (Bit 12)                     */
#define EMIF_0_CONFIG_0_DELAYOE_Msk       (0x1000UL)                /*!< EMIF_0 CONFIG_0: DELAYOE (Bitfield-Mask: 0x01)        */
#define EMIF_0_CONFIG_0_KLREN_Pos         (16UL)                    /*!< EMIF_0 CONFIG_0: KLREN (Bit 16)                       */
#define EMIF_0_CONFIG_0_KLREN_Msk         (0x10000UL)               /*!< EMIF_0 CONFIG_0: KLREN (Bitfield-Mask: 0x01)          */
/* ========================================================  IFRT_0  ========================================================= */
#define EMIF_0_IFRT_0_RASET_Pos           (0UL)                     /*!< EMIF_0 IFRT_0: RASET (Bit 0)                          */
#define EMIF_0_IFRT_0_RASET_Msk           (0xfUL)                   /*!< EMIF_0 IFRT_0: RASET (Bitfield-Mask: 0x0f)            */
#define EMIF_0_IFRT_0_RAHOLD_Pos          (4UL)                     /*!< EMIF_0 IFRT_0: RAHOLD (Bit 4)                         */
#define EMIF_0_IFRT_0_RAHOLD_Msk          (0xf0UL)                  /*!< EMIF_0 IFRT_0: RAHOLD (Bitfield-Mask: 0x0f)           */
#define EMIF_0_IFRT_0_RDHOLD_Pos          (8UL)                     /*!< EMIF_0 IFRT_0: RDHOLD (Bit 8)                         */
#define EMIF_0_IFRT_0_RDHOLD_Msk          (0xf00UL)                 /*!< EMIF_0 IFRT_0: RDHOLD (Bitfield-Mask: 0x0f)           */
#define EMIF_0_IFRT_0_RDWAIT_Pos          (16UL)                    /*!< EMIF_0 IFRT_0: RDWAIT (Bit 16)                        */
#define EMIF_0_IFRT_0_RDWAIT_Msk          (0x3f0000UL)              /*!< EMIF_0 IFRT_0: RDWAIT (Bitfield-Mask: 0x3f)           */
/* ========================================================  IFWT_0  ========================================================= */
#define EMIF_0_IFWT_0_WASET_Pos           (0UL)                     /*!< EMIF_0 IFWT_0: WASET (Bit 0)                          */
#define EMIF_0_IFWT_0_WASET_Msk           (0xfUL)                   /*!< EMIF_0 IFWT_0: WASET (Bitfield-Mask: 0x0f)            */
#define EMIF_0_IFWT_0_WAHOLD_Pos          (4UL)                     /*!< EMIF_0 IFWT_0: WAHOLD (Bit 4)                         */
#define EMIF_0_IFWT_0_WAHOLD_Msk          (0xf0UL)                  /*!< EMIF_0 IFWT_0: WAHOLD (Bitfield-Mask: 0x0f)           */
#define EMIF_0_IFWT_0_WDHOLD_Pos          (8UL)                     /*!< EMIF_0 IFWT_0: WDHOLD (Bit 8)                         */
#define EMIF_0_IFWT_0_WDHOLD_Msk          (0xf00UL)                 /*!< EMIF_0 IFWT_0: WDHOLD (Bitfield-Mask: 0x0f)           */
#define EMIF_0_IFWT_0_WDWAIT_Pos          (16UL)                    /*!< EMIF_0 IFWT_0: WDWAIT (Bit 16)                        */
#define EMIF_0_IFWT_0_WDWAIT_Msk          (0x3f0000UL)              /*!< EMIF_0 IFWT_0: WDWAIT (Bitfield-Mask: 0x3f)           */
/* =======================================================  IFRCST_0  ======================================================== */
#define EMIF_0_IFRCST_0_CSRAS_Pos         (0UL)                     /*!< EMIF_0 IFRCST_0: CSRAS (Bit 0)                        */
#define EMIF_0_IFRCST_0_CSRAS_Msk         (0x1UL)                   /*!< EMIF_0 IFRCST_0: CSRAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_CSRAH_Pos         (1UL)                     /*!< EMIF_0 IFRCST_0: CSRAH (Bit 1)                        */
#define EMIF_0_IFRCST_0_CSRAH_Msk         (0x2UL)                   /*!< EMIF_0 IFRCST_0: CSRAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_CSRDW_Pos         (2UL)                     /*!< EMIF_0 IFRCST_0: CSRDW (Bit 2)                        */
#define EMIF_0_IFRCST_0_CSRDW_Msk         (0x4UL)                   /*!< EMIF_0 IFRCST_0: CSRDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_CSRDH_Pos         (3UL)                     /*!< EMIF_0 IFRCST_0: CSRDH (Bit 3)                        */
#define EMIF_0_IFRCST_0_CSRDH_Msk         (0x8UL)                   /*!< EMIF_0 IFRCST_0: CSRDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_OERAS_Pos         (4UL)                     /*!< EMIF_0 IFRCST_0: OERAS (Bit 4)                        */
#define EMIF_0_IFRCST_0_OERAS_Msk         (0x10UL)                  /*!< EMIF_0 IFRCST_0: OERAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_OERAH_Pos         (5UL)                     /*!< EMIF_0 IFRCST_0: OERAH (Bit 5)                        */
#define EMIF_0_IFRCST_0_OERAH_Msk         (0x20UL)                  /*!< EMIF_0 IFRCST_0: OERAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_OERDW_Pos         (6UL)                     /*!< EMIF_0 IFRCST_0: OERDW (Bit 6)                        */
#define EMIF_0_IFRCST_0_OERDW_Msk         (0x40UL)                  /*!< EMIF_0 IFRCST_0: OERDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_OERDH_Pos         (7UL)                     /*!< EMIF_0 IFRCST_0: OERDH (Bit 7)                        */
#define EMIF_0_IFRCST_0_OERDH_Msk         (0x80UL)                  /*!< EMIF_0 IFRCST_0: OERDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_WRRAS_Pos         (8UL)                     /*!< EMIF_0 IFRCST_0: WRRAS (Bit 8)                        */
#define EMIF_0_IFRCST_0_WRRAS_Msk         (0x100UL)                 /*!< EMIF_0 IFRCST_0: WRRAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_WRRAH_Pos         (9UL)                     /*!< EMIF_0 IFRCST_0: WRRAH (Bit 9)                        */
#define EMIF_0_IFRCST_0_WRRAH_Msk         (0x200UL)                 /*!< EMIF_0 IFRCST_0: WRRAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_WRRDW_Pos         (10UL)                    /*!< EMIF_0 IFRCST_0: WRRDW (Bit 10)                       */
#define EMIF_0_IFRCST_0_WRRDW_Msk         (0x400UL)                 /*!< EMIF_0 IFRCST_0: WRRDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_WRRDH_Pos         (11UL)                    /*!< EMIF_0 IFRCST_0: WRRDH (Bit 11)                       */
#define EMIF_0_IFRCST_0_WRRDH_Msk         (0x800UL)                 /*!< EMIF_0 IFRCST_0: WRRDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_0_ALERAS_Pos        (12UL)                    /*!< EMIF_0 IFRCST_0: ALERAS (Bit 12)                      */
#define EMIF_0_IFRCST_0_ALERAS_Msk        (0x1000UL)                /*!< EMIF_0 IFRCST_0: ALERAS (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFRCST_0_ALERAH_Pos        (13UL)                    /*!< EMIF_0 IFRCST_0: ALERAH (Bit 13)                      */
#define EMIF_0_IFRCST_0_ALERAH_Msk        (0x2000UL)                /*!< EMIF_0 IFRCST_0: ALERAH (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFRCST_0_ALERDW_Pos        (14UL)                    /*!< EMIF_0 IFRCST_0: ALERDW (Bit 14)                      */
#define EMIF_0_IFRCST_0_ALERDW_Msk        (0x4000UL)                /*!< EMIF_0 IFRCST_0: ALERDW (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFRCST_0_ALERDH_Pos        (15UL)                    /*!< EMIF_0 IFRCST_0: ALERDH (Bit 15)                      */
#define EMIF_0_IFRCST_0_ALERDH_Msk        (0x8000UL)                /*!< EMIF_0 IFRCST_0: ALERDH (Bitfield-Mask: 0x01)         */
/* =======================================================  IFWCST_0  ======================================================== */
#define EMIF_0_IFWCST_0_CSWAS_Pos         (0UL)                     /*!< EMIF_0 IFWCST_0: CSWAS (Bit 0)                        */
#define EMIF_0_IFWCST_0_CSWAS_Msk         (0x1UL)                   /*!< EMIF_0 IFWCST_0: CSWAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_CSWAH_Pos         (1UL)                     /*!< EMIF_0 IFWCST_0: CSWAH (Bit 1)                        */
#define EMIF_0_IFWCST_0_CSWAH_Msk         (0x2UL)                   /*!< EMIF_0 IFWCST_0: CSWAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_CSWDW_Pos         (2UL)                     /*!< EMIF_0 IFWCST_0: CSWDW (Bit 2)                        */
#define EMIF_0_IFWCST_0_CSWDW_Msk         (0x4UL)                   /*!< EMIF_0 IFWCST_0: CSWDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_CSWDH_Pos         (3UL)                     /*!< EMIF_0 IFWCST_0: CSWDH (Bit 3)                        */
#define EMIF_0_IFWCST_0_CSWDH_Msk         (0x8UL)                   /*!< EMIF_0 IFWCST_0: CSWDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_OEWAS_Pos         (4UL)                     /*!< EMIF_0 IFWCST_0: OEWAS (Bit 4)                        */
#define EMIF_0_IFWCST_0_OEWAS_Msk         (0x10UL)                  /*!< EMIF_0 IFWCST_0: OEWAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_OEWAH_Pos         (5UL)                     /*!< EMIF_0 IFWCST_0: OEWAH (Bit 5)                        */
#define EMIF_0_IFWCST_0_OEWAH_Msk         (0x20UL)                  /*!< EMIF_0 IFWCST_0: OEWAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_OEWDW_Pos         (6UL)                     /*!< EMIF_0 IFWCST_0: OEWDW (Bit 6)                        */
#define EMIF_0_IFWCST_0_OEWDW_Msk         (0x40UL)                  /*!< EMIF_0 IFWCST_0: OEWDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_OEWDH_Pos         (7UL)                     /*!< EMIF_0 IFWCST_0: OEWDH (Bit 7)                        */
#define EMIF_0_IFWCST_0_OEWDH_Msk         (0x80UL)                  /*!< EMIF_0 IFWCST_0: OEWDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_WRWAS_Pos         (8UL)                     /*!< EMIF_0 IFWCST_0: WRWAS (Bit 8)                        */
#define EMIF_0_IFWCST_0_WRWAS_Msk         (0x100UL)                 /*!< EMIF_0 IFWCST_0: WRWAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_WRWAH_Pos         (9UL)                     /*!< EMIF_0 IFWCST_0: WRWAH (Bit 9)                        */
#define EMIF_0_IFWCST_0_WRWAH_Msk         (0x200UL)                 /*!< EMIF_0 IFWCST_0: WRWAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_WRWDW_Pos         (10UL)                    /*!< EMIF_0 IFWCST_0: WRWDW (Bit 10)                       */
#define EMIF_0_IFWCST_0_WRWDW_Msk         (0x400UL)                 /*!< EMIF_0 IFWCST_0: WRWDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_WRWDH_Pos         (11UL)                    /*!< EMIF_0 IFWCST_0: WRWDH (Bit 11)                       */
#define EMIF_0_IFWCST_0_WRWDH_Msk         (0x800UL)                 /*!< EMIF_0 IFWCST_0: WRWDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_0_ALEWAS_Pos        (12UL)                    /*!< EMIF_0 IFWCST_0: ALEWAS (Bit 12)                      */
#define EMIF_0_IFWCST_0_ALEWAS_Msk        (0x1000UL)                /*!< EMIF_0 IFWCST_0: ALEWAS (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFWCST_0_ALEWAH_Pos        (13UL)                    /*!< EMIF_0 IFWCST_0: ALEWAH (Bit 13)                      */
#define EMIF_0_IFWCST_0_ALEWAH_Msk        (0x2000UL)                /*!< EMIF_0 IFWCST_0: ALEWAH (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFWCST_0_ALEWDW_Pos        (14UL)                    /*!< EMIF_0 IFWCST_0: ALEWDW (Bit 14)                      */
#define EMIF_0_IFWCST_0_ALEWDW_Msk        (0x4000UL)                /*!< EMIF_0 IFWCST_0: ALEWDW (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFWCST_0_ALEWDH_Pos        (15UL)                    /*!< EMIF_0 IFWCST_0: ALEWDH (Bit 15)                      */
#define EMIF_0_IFWCST_0_ALEWDH_Msk        (0x8000UL)                /*!< EMIF_0 IFWCST_0: ALEWDH (Bitfield-Mask: 0x01)         */
/* =======================================================  CONFIG_1  ======================================================== */
#define EMIF_0_CONFIG_1_BUSWIDTH_Pos      (0UL)                     /*!< EMIF_0 CONFIG_1: BUSWIDTH (Bit 0)                     */
#define EMIF_0_CONFIG_1_BUSWIDTH_Msk      (0x1UL)                   /*!< EMIF_0 CONFIG_1: BUSWIDTH (Bitfield-Mask: 0x01)       */
#define EMIF_0_CONFIG_1_MUXMD_Pos         (2UL)                     /*!< EMIF_0 CONFIG_1: MUXMD (Bit 2)                        */
#define EMIF_0_CONFIG_1_MUXMD_Msk         (0x4UL)                   /*!< EMIF_0 CONFIG_1: MUXMD (Bitfield-Mask: 0x01)          */
#define EMIF_0_CONFIG_1_ASEN_Pos          (3UL)                     /*!< EMIF_0 CONFIG_1: ASEN (Bit 3)                         */
#define EMIF_0_CONFIG_1_ASEN_Msk          (0x8UL)                   /*!< EMIF_0 CONFIG_1: ASEN (Bitfield-Mask: 0x01)           */
#define EMIF_0_CONFIG_1_ROEN_Pos          (4UL)                     /*!< EMIF_0 CONFIG_1: ROEN (Bit 4)                         */
#define EMIF_0_CONFIG_1_ROEN_Msk          (0x10UL)                  /*!< EMIF_0 CONFIG_1: ROEN (Bitfield-Mask: 0x01)           */
#define EMIF_0_CONFIG_1_WDHINH_Pos        (8UL)                     /*!< EMIF_0 CONFIG_1: WDHINH (Bit 8)                       */
#define EMIF_0_CONFIG_1_WDHINH_Msk        (0x100UL)                 /*!< EMIF_0 CONFIG_1: WDHINH (Bitfield-Mask: 0x01)         */
#define EMIF_0_CONFIG_1_DELAYOE_Pos       (12UL)                    /*!< EMIF_0 CONFIG_1: DELAYOE (Bit 12)                     */
#define EMIF_0_CONFIG_1_DELAYOE_Msk       (0x1000UL)                /*!< EMIF_0 CONFIG_1: DELAYOE (Bitfield-Mask: 0x01)        */
#define EMIF_0_CONFIG_1_KLREN_Pos         (16UL)                    /*!< EMIF_0 CONFIG_1: KLREN (Bit 16)                       */
#define EMIF_0_CONFIG_1_KLREN_Msk         (0x10000UL)               /*!< EMIF_0 CONFIG_1: KLREN (Bitfield-Mask: 0x01)          */
/* ========================================================  IFRT_1  ========================================================= */
#define EMIF_0_IFRT_1_RASET_Pos           (0UL)                     /*!< EMIF_0 IFRT_1: RASET (Bit 0)                          */
#define EMIF_0_IFRT_1_RASET_Msk           (0xfUL)                   /*!< EMIF_0 IFRT_1: RASET (Bitfield-Mask: 0x0f)            */
#define EMIF_0_IFRT_1_RAHOLD_Pos          (4UL)                     /*!< EMIF_0 IFRT_1: RAHOLD (Bit 4)                         */
#define EMIF_0_IFRT_1_RAHOLD_Msk          (0xf0UL)                  /*!< EMIF_0 IFRT_1: RAHOLD (Bitfield-Mask: 0x0f)           */
#define EMIF_0_IFRT_1_RDHOLD_Pos          (8UL)                     /*!< EMIF_0 IFRT_1: RDHOLD (Bit 8)                         */
#define EMIF_0_IFRT_1_RDHOLD_Msk          (0xf00UL)                 /*!< EMIF_0 IFRT_1: RDHOLD (Bitfield-Mask: 0x0f)           */
#define EMIF_0_IFRT_1_RDWAIT_Pos          (16UL)                    /*!< EMIF_0 IFRT_1: RDWAIT (Bit 16)                        */
#define EMIF_0_IFRT_1_RDWAIT_Msk          (0x3f0000UL)              /*!< EMIF_0 IFRT_1: RDWAIT (Bitfield-Mask: 0x3f)           */
/* ========================================================  IFWT_1  ========================================================= */
#define EMIF_0_IFWT_1_WASET_Pos           (0UL)                     /*!< EMIF_0 IFWT_1: WASET (Bit 0)                          */
#define EMIF_0_IFWT_1_WASET_Msk           (0xfUL)                   /*!< EMIF_0 IFWT_1: WASET (Bitfield-Mask: 0x0f)            */
#define EMIF_0_IFWT_1_WAHOLD_Pos          (4UL)                     /*!< EMIF_0 IFWT_1: WAHOLD (Bit 4)                         */
#define EMIF_0_IFWT_1_WAHOLD_Msk          (0xf0UL)                  /*!< EMIF_0 IFWT_1: WAHOLD (Bitfield-Mask: 0x0f)           */
#define EMIF_0_IFWT_1_WDHOLD_Pos          (8UL)                     /*!< EMIF_0 IFWT_1: WDHOLD (Bit 8)                         */
#define EMIF_0_IFWT_1_WDHOLD_Msk          (0xf00UL)                 /*!< EMIF_0 IFWT_1: WDHOLD (Bitfield-Mask: 0x0f)           */
#define EMIF_0_IFWT_1_WDWAIT_Pos          (16UL)                    /*!< EMIF_0 IFWT_1: WDWAIT (Bit 16)                        */
#define EMIF_0_IFWT_1_WDWAIT_Msk          (0x3f0000UL)              /*!< EMIF_0 IFWT_1: WDWAIT (Bitfield-Mask: 0x3f)           */
/* =======================================================  IFRCST_1  ======================================================== */
#define EMIF_0_IFRCST_1_CSRAS_Pos         (0UL)                     /*!< EMIF_0 IFRCST_1: CSRAS (Bit 0)                        */
#define EMIF_0_IFRCST_1_CSRAS_Msk         (0x1UL)                   /*!< EMIF_0 IFRCST_1: CSRAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_CSRAH_Pos         (1UL)                     /*!< EMIF_0 IFRCST_1: CSRAH (Bit 1)                        */
#define EMIF_0_IFRCST_1_CSRAH_Msk         (0x2UL)                   /*!< EMIF_0 IFRCST_1: CSRAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_CSRDW_Pos         (2UL)                     /*!< EMIF_0 IFRCST_1: CSRDW (Bit 2)                        */
#define EMIF_0_IFRCST_1_CSRDW_Msk         (0x4UL)                   /*!< EMIF_0 IFRCST_1: CSRDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_CSRDH_Pos         (3UL)                     /*!< EMIF_0 IFRCST_1: CSRDH (Bit 3)                        */
#define EMIF_0_IFRCST_1_CSRDH_Msk         (0x8UL)                   /*!< EMIF_0 IFRCST_1: CSRDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_OERAS_Pos         (4UL)                     /*!< EMIF_0 IFRCST_1: OERAS (Bit 4)                        */
#define EMIF_0_IFRCST_1_OERAS_Msk         (0x10UL)                  /*!< EMIF_0 IFRCST_1: OERAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_OERAH_Pos         (5UL)                     /*!< EMIF_0 IFRCST_1: OERAH (Bit 5)                        */
#define EMIF_0_IFRCST_1_OERAH_Msk         (0x20UL)                  /*!< EMIF_0 IFRCST_1: OERAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_OERDW_Pos         (6UL)                     /*!< EMIF_0 IFRCST_1: OERDW (Bit 6)                        */
#define EMIF_0_IFRCST_1_OERDW_Msk         (0x40UL)                  /*!< EMIF_0 IFRCST_1: OERDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_OERDH_Pos         (7UL)                     /*!< EMIF_0 IFRCST_1: OERDH (Bit 7)                        */
#define EMIF_0_IFRCST_1_OERDH_Msk         (0x80UL)                  /*!< EMIF_0 IFRCST_1: OERDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_WRRAS_Pos         (8UL)                     /*!< EMIF_0 IFRCST_1: WRRAS (Bit 8)                        */
#define EMIF_0_IFRCST_1_WRRAS_Msk         (0x100UL)                 /*!< EMIF_0 IFRCST_1: WRRAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_WRRAH_Pos         (9UL)                     /*!< EMIF_0 IFRCST_1: WRRAH (Bit 9)                        */
#define EMIF_0_IFRCST_1_WRRAH_Msk         (0x200UL)                 /*!< EMIF_0 IFRCST_1: WRRAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_WRRDW_Pos         (10UL)                    /*!< EMIF_0 IFRCST_1: WRRDW (Bit 10)                       */
#define EMIF_0_IFRCST_1_WRRDW_Msk         (0x400UL)                 /*!< EMIF_0 IFRCST_1: WRRDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_WRRDH_Pos         (11UL)                    /*!< EMIF_0 IFRCST_1: WRRDH (Bit 11)                       */
#define EMIF_0_IFRCST_1_WRRDH_Msk         (0x800UL)                 /*!< EMIF_0 IFRCST_1: WRRDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFRCST_1_ALERAS_Pos        (12UL)                    /*!< EMIF_0 IFRCST_1: ALERAS (Bit 12)                      */
#define EMIF_0_IFRCST_1_ALERAS_Msk        (0x1000UL)                /*!< EMIF_0 IFRCST_1: ALERAS (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFRCST_1_ALERAH_Pos        (13UL)                    /*!< EMIF_0 IFRCST_1: ALERAH (Bit 13)                      */
#define EMIF_0_IFRCST_1_ALERAH_Msk        (0x2000UL)                /*!< EMIF_0 IFRCST_1: ALERAH (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFRCST_1_ALERDW_Pos        (14UL)                    /*!< EMIF_0 IFRCST_1: ALERDW (Bit 14)                      */
#define EMIF_0_IFRCST_1_ALERDW_Msk        (0x4000UL)                /*!< EMIF_0 IFRCST_1: ALERDW (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFRCST_1_ALERDH_Pos        (15UL)                    /*!< EMIF_0 IFRCST_1: ALERDH (Bit 15)                      */
#define EMIF_0_IFRCST_1_ALERDH_Msk        (0x8000UL)                /*!< EMIF_0 IFRCST_1: ALERDH (Bitfield-Mask: 0x01)         */
/* =======================================================  IFWCST_1  ======================================================== */
#define EMIF_0_IFWCST_1_CSWAS_Pos         (0UL)                     /*!< EMIF_0 IFWCST_1: CSWAS (Bit 0)                        */
#define EMIF_0_IFWCST_1_CSWAS_Msk         (0x1UL)                   /*!< EMIF_0 IFWCST_1: CSWAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_CSWAH_Pos         (1UL)                     /*!< EMIF_0 IFWCST_1: CSWAH (Bit 1)                        */
#define EMIF_0_IFWCST_1_CSWAH_Msk         (0x2UL)                   /*!< EMIF_0 IFWCST_1: CSWAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_CSWDW_Pos         (2UL)                     /*!< EMIF_0 IFWCST_1: CSWDW (Bit 2)                        */
#define EMIF_0_IFWCST_1_CSWDW_Msk         (0x4UL)                   /*!< EMIF_0 IFWCST_1: CSWDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_CSWDH_Pos         (3UL)                     /*!< EMIF_0 IFWCST_1: CSWDH (Bit 3)                        */
#define EMIF_0_IFWCST_1_CSWDH_Msk         (0x8UL)                   /*!< EMIF_0 IFWCST_1: CSWDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_OEWAS_Pos         (4UL)                     /*!< EMIF_0 IFWCST_1: OEWAS (Bit 4)                        */
#define EMIF_0_IFWCST_1_OEWAS_Msk         (0x10UL)                  /*!< EMIF_0 IFWCST_1: OEWAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_OEWAH_Pos         (5UL)                     /*!< EMIF_0 IFWCST_1: OEWAH (Bit 5)                        */
#define EMIF_0_IFWCST_1_OEWAH_Msk         (0x20UL)                  /*!< EMIF_0 IFWCST_1: OEWAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_OEWDW_Pos         (6UL)                     /*!< EMIF_0 IFWCST_1: OEWDW (Bit 6)                        */
#define EMIF_0_IFWCST_1_OEWDW_Msk         (0x40UL)                  /*!< EMIF_0 IFWCST_1: OEWDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_OEWDH_Pos         (7UL)                     /*!< EMIF_0 IFWCST_1: OEWDH (Bit 7)                        */
#define EMIF_0_IFWCST_1_OEWDH_Msk         (0x80UL)                  /*!< EMIF_0 IFWCST_1: OEWDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_WRWAS_Pos         (8UL)                     /*!< EMIF_0 IFWCST_1: WRWAS (Bit 8)                        */
#define EMIF_0_IFWCST_1_WRWAS_Msk         (0x100UL)                 /*!< EMIF_0 IFWCST_1: WRWAS (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_WRWAH_Pos         (9UL)                     /*!< EMIF_0 IFWCST_1: WRWAH (Bit 9)                        */
#define EMIF_0_IFWCST_1_WRWAH_Msk         (0x200UL)                 /*!< EMIF_0 IFWCST_1: WRWAH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_WRWDW_Pos         (10UL)                    /*!< EMIF_0 IFWCST_1: WRWDW (Bit 10)                       */
#define EMIF_0_IFWCST_1_WRWDW_Msk         (0x400UL)                 /*!< EMIF_0 IFWCST_1: WRWDW (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_WRWDH_Pos         (11UL)                    /*!< EMIF_0 IFWCST_1: WRWDH (Bit 11)                       */
#define EMIF_0_IFWCST_1_WRWDH_Msk         (0x800UL)                 /*!< EMIF_0 IFWCST_1: WRWDH (Bitfield-Mask: 0x01)          */
#define EMIF_0_IFWCST_1_ALEWAS_Pos        (12UL)                    /*!< EMIF_0 IFWCST_1: ALEWAS (Bit 12)                      */
#define EMIF_0_IFWCST_1_ALEWAS_Msk        (0x1000UL)                /*!< EMIF_0 IFWCST_1: ALEWAS (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFWCST_1_ALEWAH_Pos        (13UL)                    /*!< EMIF_0 IFWCST_1: ALEWAH (Bit 13)                      */
#define EMIF_0_IFWCST_1_ALEWAH_Msk        (0x2000UL)                /*!< EMIF_0 IFWCST_1: ALEWAH (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFWCST_1_ALEWDW_Pos        (14UL)                    /*!< EMIF_0 IFWCST_1: ALEWDW (Bit 14)                      */
#define EMIF_0_IFWCST_1_ALEWDW_Msk        (0x4000UL)                /*!< EMIF_0 IFWCST_1: ALEWDW (Bitfield-Mask: 0x01)         */
#define EMIF_0_IFWCST_1_ALEWDH_Pos        (15UL)                    /*!< EMIF_0 IFWCST_1: ALEWDH (Bit 15)                      */
#define EMIF_0_IFWCST_1_ALEWDH_Msk        (0x8000UL)                /*!< EMIF_0 IFWCST_1: ALEWDH (Bitfield-Mask: 0x01)         */


/* =========================================================================================================================== */
/* ================                                          EPCA_0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MODE  ========================================================== */
#define EPCA_0_MODE_CLKDIV_Pos            (0UL)                     /*!< EPCA_0 MODE: CLKDIV (Bit 0)                           */
#define EPCA_0_MODE_CLKDIV_Msk            (0x3ffUL)                 /*!< EPCA_0 MODE: CLKDIV (Bitfield-Mask: 0x3ff)            */
#define EPCA_0_MODE_CLKSEL_Pos            (10UL)                    /*!< EPCA_0 MODE: CLKSEL (Bit 10)                          */
#define EPCA_0_MODE_CLKSEL_Msk            (0x1c00UL)                /*!< EPCA_0 MODE: CLKSEL (Bitfield-Mask: 0x07)             */
#define EPCA_0_MODE_HDOSEL_Pos            (14UL)                    /*!< EPCA_0 MODE: HDOSEL (Bit 14)                          */
#define EPCA_0_MODE_HDOSEL_Msk            (0xc000UL)                /*!< EPCA_0 MODE: HDOSEL (Bitfield-Mask: 0x03)             */
#define EPCA_0_MODE_DEND_Pos              (16UL)                    /*!< EPCA_0 MODE: DEND (Bit 16)                            */
#define EPCA_0_MODE_DEND_Msk              (0x70000UL)               /*!< EPCA_0 MODE: DEND (Bitfield-Mask: 0x07)               */
#define EPCA_0_MODE_DPTR_Pos              (19UL)                    /*!< EPCA_0 MODE: DPTR (Bit 19)                            */
#define EPCA_0_MODE_DPTR_Msk              (0x380000UL)              /*!< EPCA_0 MODE: DPTR (Bitfield-Mask: 0x07)               */
#define EPCA_0_MODE_DSTART_Pos            (22UL)                    /*!< EPCA_0 MODE: DSTART (Bit 22)                          */
#define EPCA_0_MODE_DSTART_Msk            (0x1c00000UL)             /*!< EPCA_0 MODE: DSTART (Bitfield-Mask: 0x07)             */
#define EPCA_0_MODE_DBUSYF_Pos            (25UL)                    /*!< EPCA_0 MODE: DBUSYF (Bit 25)                          */
#define EPCA_0_MODE_DBUSYF_Msk            (0x2000000UL)             /*!< EPCA_0 MODE: DBUSYF (Bitfield-Mask: 0x01)             */
#define EPCA_0_MODE_STDOSEL_Pos           (27UL)                    /*!< EPCA_0 MODE: STDOSEL (Bit 27)                         */
#define EPCA_0_MODE_STDOSEL_Msk           (0x18000000UL)            /*!< EPCA_0 MODE: STDOSEL (Bitfield-Mask: 0x03)            */
/* ========================================================  CONTROL  ======================================================== */
#define EPCA_0_CONTROL_OVFIEN_Pos         (0UL)                     /*!< EPCA_0 CONTROL: OVFIEN (Bit 0)                        */
#define EPCA_0_CONTROL_OVFIEN_Msk         (0x1UL)                   /*!< EPCA_0 CONTROL: OVFIEN (Bitfield-Mask: 0x01)          */
#define EPCA_0_CONTROL_OVFDEN_Pos         (1UL)                     /*!< EPCA_0 CONTROL: OVFDEN (Bit 1)                        */
#define EPCA_0_CONTROL_OVFDEN_Msk         (0x2UL)                   /*!< EPCA_0 CONTROL: OVFDEN (Bitfield-Mask: 0x01)          */
#define EPCA_0_CONTROL_OVFSEN_Pos         (2UL)                     /*!< EPCA_0 CONTROL: OVFSEN (Bit 2)                        */
#define EPCA_0_CONTROL_OVFSEN_Msk         (0x4UL)                   /*!< EPCA_0 CONTROL: OVFSEN (Bitfield-Mask: 0x01)          */
#define EPCA_0_CONTROL_HALTIEN_Pos        (3UL)                     /*!< EPCA_0 CONTROL: HALTIEN (Bit 3)                       */
#define EPCA_0_CONTROL_HALTIEN_Msk        (0x8UL)                   /*!< EPCA_0 CONTROL: HALTIEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_NOUPD_Pos          (4UL)                     /*!< EPCA_0 CONTROL: NOUPD (Bit 4)                         */
#define EPCA_0_CONTROL_NOUPD_Msk          (0x10UL)                  /*!< EPCA_0 CONTROL: NOUPD (Bitfield-Mask: 0x01)           */
#define EPCA_0_CONTROL_IDLEBEN_Pos        (5UL)                     /*!< EPCA_0 CONTROL: IDLEBEN (Bit 5)                       */
#define EPCA_0_CONTROL_IDLEBEN_Msk        (0x20UL)                  /*!< EPCA_0 CONTROL: IDLEBEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_DBGMD_Pos          (6UL)                     /*!< EPCA_0 CONTROL: DBGMD (Bit 6)                         */
#define EPCA_0_CONTROL_DBGMD_Msk          (0x40UL)                  /*!< EPCA_0 CONTROL: DBGMD (Bitfield-Mask: 0x01)           */
#define EPCA_0_CONTROL_HALTEN_Pos         (9UL)                     /*!< EPCA_0 CONTROL: HALTEN (Bit 9)                        */
#define EPCA_0_CONTROL_HALTEN_Msk         (0x200UL)                 /*!< EPCA_0 CONTROL: HALTEN (Bitfield-Mask: 0x01)          */
#define EPCA_0_CONTROL_STSEL_Pos          (11UL)                    /*!< EPCA_0 CONTROL: STSEL (Bit 11)                        */
#define EPCA_0_CONTROL_STSEL_Msk          (0x1800UL)                /*!< EPCA_0 CONTROL: STSEL (Bitfield-Mask: 0x03)           */
#define EPCA_0_CONTROL_STESEL_Pos         (13UL)                    /*!< EPCA_0 CONTROL: STESEL (Bit 13)                       */
#define EPCA_0_CONTROL_STESEL_Msk         (0x2000UL)                /*!< EPCA_0 CONTROL: STESEL (Bitfield-Mask: 0x01)          */
#define EPCA_0_CONTROL_STEN_Pos           (14UL)                    /*!< EPCA_0 CONTROL: STEN (Bit 14)                         */
#define EPCA_0_CONTROL_STEN_Msk           (0x4000UL)                /*!< EPCA_0 CONTROL: STEN (Bitfield-Mask: 0x01)            */
#define EPCA_0_CONTROL_DIVST_Pos          (21UL)                    /*!< EPCA_0 CONTROL: DIVST (Bit 21)                        */
#define EPCA_0_CONTROL_DIVST_Msk          (0x200000UL)              /*!< EPCA_0 CONTROL: DIVST (Bitfield-Mask: 0x01)           */
#define EPCA_0_CONTROL_DIV_Pos            (22UL)                    /*!< EPCA_0 CONTROL: DIV (Bit 22)                          */
#define EPCA_0_CONTROL_DIV_Msk            (0xffc00000UL)            /*!< EPCA_0 CONTROL: DIV (Bitfield-Mask: 0x3ff)            */
/* ========================================================  STATUS  ========================================================= */
#define EPCA_0_STATUS_C0CCI_Pos           (0UL)                     /*!< EPCA_0 STATUS: C0CCI (Bit 0)                          */
#define EPCA_0_STATUS_C0CCI_Msk           (0x1UL)                   /*!< EPCA_0 STATUS: C0CCI (Bitfield-Mask: 0x01)            */
#define EPCA_0_STATUS_C1CCI_Pos           (1UL)                     /*!< EPCA_0 STATUS: C1CCI (Bit 1)                          */
#define EPCA_0_STATUS_C1CCI_Msk           (0x2UL)                   /*!< EPCA_0 STATUS: C1CCI (Bitfield-Mask: 0x01)            */
#define EPCA_0_STATUS_C2CCI_Pos           (2UL)                     /*!< EPCA_0 STATUS: C2CCI (Bit 2)                          */
#define EPCA_0_STATUS_C2CCI_Msk           (0x4UL)                   /*!< EPCA_0 STATUS: C2CCI (Bitfield-Mask: 0x01)            */
#define EPCA_0_STATUS_C3CCI_Pos           (3UL)                     /*!< EPCA_0 STATUS: C3CCI (Bit 3)                          */
#define EPCA_0_STATUS_C3CCI_Msk           (0x8UL)                   /*!< EPCA_0 STATUS: C3CCI (Bitfield-Mask: 0x01)            */
#define EPCA_0_STATUS_C4CCI_Pos           (4UL)                     /*!< EPCA_0 STATUS: C4CCI (Bit 4)                          */
#define EPCA_0_STATUS_C4CCI_Msk           (0x10UL)                  /*!< EPCA_0 STATUS: C4CCI (Bitfield-Mask: 0x01)            */
#define EPCA_0_STATUS_C5CCI_Pos           (5UL)                     /*!< EPCA_0 STATUS: C5CCI (Bit 5)                          */
#define EPCA_0_STATUS_C5CCI_Msk           (0x20UL)                  /*!< EPCA_0 STATUS: C5CCI (Bitfield-Mask: 0x01)            */
#define EPCA_0_STATUS_RUN_Pos             (6UL)                     /*!< EPCA_0 STATUS: RUN (Bit 6)                            */
#define EPCA_0_STATUS_RUN_Msk             (0x40UL)                  /*!< EPCA_0 STATUS: RUN (Bitfield-Mask: 0x01)              */
#define EPCA_0_STATUS_OVFI_Pos            (7UL)                     /*!< EPCA_0 STATUS: OVFI (Bit 7)                           */
#define EPCA_0_STATUS_OVFI_Msk            (0x80UL)                  /*!< EPCA_0 STATUS: OVFI (Bitfield-Mask: 0x01)             */
#define EPCA_0_STATUS_UPDCF_Pos           (8UL)                     /*!< EPCA_0 STATUS: UPDCF (Bit 8)                          */
#define EPCA_0_STATUS_UPDCF_Msk           (0x100UL)                 /*!< EPCA_0 STATUS: UPDCF (Bitfield-Mask: 0x01)            */
#define EPCA_0_STATUS_HALTI_Pos           (9UL)                     /*!< EPCA_0 STATUS: HALTI (Bit 9)                          */
#define EPCA_0_STATUS_HALTI_Msk           (0x200UL)                 /*!< EPCA_0 STATUS: HALTI (Bitfield-Mask: 0x01)            */
#define EPCA_0_STATUS_C0IOVFI_Pos         (10UL)                    /*!< EPCA_0 STATUS: C0IOVFI (Bit 10)                       */
#define EPCA_0_STATUS_C0IOVFI_Msk         (0x400UL)                 /*!< EPCA_0 STATUS: C0IOVFI (Bitfield-Mask: 0x01)          */
#define EPCA_0_STATUS_C1IOVFI_Pos         (11UL)                    /*!< EPCA_0 STATUS: C1IOVFI (Bit 11)                       */
#define EPCA_0_STATUS_C1IOVFI_Msk         (0x800UL)                 /*!< EPCA_0 STATUS: C1IOVFI (Bitfield-Mask: 0x01)          */
#define EPCA_0_STATUS_C2IOVFI_Pos         (12UL)                    /*!< EPCA_0 STATUS: C2IOVFI (Bit 12)                       */
#define EPCA_0_STATUS_C2IOVFI_Msk         (0x1000UL)                /*!< EPCA_0 STATUS: C2IOVFI (Bitfield-Mask: 0x01)          */
#define EPCA_0_STATUS_C3IOVFI_Pos         (13UL)                    /*!< EPCA_0 STATUS: C3IOVFI (Bit 13)                       */
#define EPCA_0_STATUS_C3IOVFI_Msk         (0x2000UL)                /*!< EPCA_0 STATUS: C3IOVFI (Bitfield-Mask: 0x01)          */
#define EPCA_0_STATUS_C4IOVFI_Pos         (14UL)                    /*!< EPCA_0 STATUS: C4IOVFI (Bit 14)                       */
#define EPCA_0_STATUS_C4IOVFI_Msk         (0x4000UL)                /*!< EPCA_0 STATUS: C4IOVFI (Bitfield-Mask: 0x01)          */
#define EPCA_0_STATUS_C5IOVFI_Pos         (15UL)                    /*!< EPCA_0 STATUS: C5IOVFI (Bit 15)                       */
#define EPCA_0_STATUS_C5IOVFI_Msk         (0x8000UL)                /*!< EPCA_0 STATUS: C5IOVFI (Bitfield-Mask: 0x01)          */
/* ========================================================  COUNTER  ======================================================== */
#define EPCA_0_COUNTER_COUNTER_Pos        (0UL)                     /*!< EPCA_0 COUNTER: COUNTER (Bit 0)                       */
#define EPCA_0_COUNTER_COUNTER_Msk        (0xffffUL)                /*!< EPCA_0 COUNTER: COUNTER (Bitfield-Mask: 0xffff)       */
/* =========================================================  LIMIT  ========================================================= */
#define EPCA_0_LIMIT_LIMIT_Pos            (0UL)                     /*!< EPCA_0 LIMIT: LIMIT (Bit 0)                           */
#define EPCA_0_LIMIT_LIMIT_Msk            (0xffffUL)                /*!< EPCA_0 LIMIT: LIMIT (Bitfield-Mask: 0xffff)           */
/* =======================================================  LIMITUPD  ======================================================== */
#define EPCA_0_LIMITUPD_LIMITUPD_Pos      (0UL)                     /*!< EPCA_0 LIMITUPD: LIMITUPD (Bit 0)                     */
#define EPCA_0_LIMITUPD_LIMITUPD_Msk      (0xffffUL)                /*!< EPCA_0 LIMITUPD: LIMITUPD (Bitfield-Mask: 0xffff)     */
/* =========================================================  DTIME  ========================================================= */
#define EPCA_0_DTIME_DTIMEX_Pos           (0UL)                     /*!< EPCA_0 DTIME: DTIMEX (Bit 0)                          */
#define EPCA_0_DTIME_DTIMEX_Msk           (0xffUL)                  /*!< EPCA_0 DTIME: DTIMEX (Bitfield-Mask: 0xff)            */
#define EPCA_0_DTIME_DTIMEY_Pos           (8UL)                     /*!< EPCA_0 DTIME: DTIMEY (Bit 8)                          */
#define EPCA_0_DTIME_DTIMEY_Msk           (0xff00UL)                /*!< EPCA_0 DTIME: DTIMEY (Bitfield-Mask: 0xff)            */
/* ========================================================  DTARGET  ======================================================== */
#define EPCA_0_DTARGET_DTARGET_Pos        (0UL)                     /*!< EPCA_0 DTARGET: DTARGET (Bit 0)                       */
#define EPCA_0_DTARGET_DTARGET_Msk        (0xffffffffUL)            /*!< EPCA_0 DTARGET: DTARGET (Bitfield-Mask: 0xffffffff)   */
/* ========================================================  MODE_0  ========================================================= */
#define EPCA_0_MODE_0_COSEL_Pos           (0UL)                     /*!< EPCA_0 MODE_0: COSEL (Bit 0)                          */
#define EPCA_0_MODE_0_COSEL_Msk           (0x3UL)                   /*!< EPCA_0 MODE_0: COSEL (Bitfield-Mask: 0x03)            */
#define EPCA_0_MODE_0_PWMMD_Pos           (2UL)                     /*!< EPCA_0 MODE_0: PWMMD (Bit 2)                          */
#define EPCA_0_MODE_0_PWMMD_Msk           (0x3cUL)                  /*!< EPCA_0 MODE_0: PWMMD (Bitfield-Mask: 0x0f)            */
#define EPCA_0_MODE_0_DIFGEN_Pos          (6UL)                     /*!< EPCA_0 MODE_0: DIFGEN (Bit 6)                         */
#define EPCA_0_MODE_0_DIFGEN_Msk          (0x40UL)                  /*!< EPCA_0 MODE_0: DIFGEN (Bitfield-Mask: 0x01)           */
#define EPCA_0_MODE_0_CMD_Pos             (8UL)                     /*!< EPCA_0 MODE_0: CMD (Bit 8)                            */
#define EPCA_0_MODE_0_CMD_Msk             (0x700UL)                 /*!< EPCA_0 MODE_0: CMD (Bitfield-Mask: 0x07)              */
/* =======================================================  CONTROL_0  ======================================================= */
#define EPCA_0_CONTROL_0_COUTST_Pos       (0UL)                     /*!< EPCA_0 CONTROL_0: COUTST (Bit 0)                      */
#define EPCA_0_CONTROL_0_COUTST_Msk       (0x1UL)                   /*!< EPCA_0 CONTROL_0: COUTST (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_0_CPCAPEN_Pos      (1UL)                     /*!< EPCA_0 CONTROL_0: CPCAPEN (Bit 1)                     */
#define EPCA_0_CONTROL_0_CPCAPEN_Msk      (0x2UL)                   /*!< EPCA_0 CONTROL_0: CPCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_0_CNCAPEN_Pos      (2UL)                     /*!< EPCA_0 CONTROL_0: CNCAPEN (Bit 2)                     */
#define EPCA_0_CONTROL_0_CNCAPEN_Msk      (0x4UL)                   /*!< EPCA_0 CONTROL_0: CNCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_0_CUPDCF_Pos       (3UL)                     /*!< EPCA_0 CONTROL_0: CUPDCF (Bit 3)                      */
#define EPCA_0_CONTROL_0_CUPDCF_Msk       (0x8UL)                   /*!< EPCA_0 CONTROL_0: CUPDCF (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_0_YPHST_Pos        (5UL)                     /*!< EPCA_0 CONTROL_0: YPHST (Bit 5)                       */
#define EPCA_0_CONTROL_0_YPHST_Msk        (0x20UL)                  /*!< EPCA_0 CONTROL_0: YPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_0_ACTIVEPH_Pos     (6UL)                     /*!< EPCA_0 CONTROL_0: ACTIVEPH (Bit 6)                    */
#define EPCA_0_CONTROL_0_ACTIVEPH_Msk     (0x40UL)                  /*!< EPCA_0 CONTROL_0: ACTIVEPH (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_0_XPHST_Pos        (7UL)                     /*!< EPCA_0 CONTROL_0: XPHST (Bit 7)                       */
#define EPCA_0_CONTROL_0_XPHST_Msk        (0x80UL)                  /*!< EPCA_0 CONTROL_0: XPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_0_CCIEN_Pos        (8UL)                     /*!< EPCA_0 CONTROL_0: CCIEN (Bit 8)                       */
#define EPCA_0_CONTROL_0_CCIEN_Msk        (0x100UL)                 /*!< EPCA_0 CONTROL_0: CCIEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_0_CCDEN_Pos        (9UL)                     /*!< EPCA_0 CONTROL_0: CCDEN (Bit 9)                       */
#define EPCA_0_CONTROL_0_CCDEN_Msk        (0x200UL)                 /*!< EPCA_0 CONTROL_0: CCDEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_0_CCSEN_Pos        (10UL)                    /*!< EPCA_0 CONTROL_0: CCSEN (Bit 10)                      */
#define EPCA_0_CONTROL_0_CCSEN_Msk        (0x400UL)                 /*!< EPCA_0 CONTROL_0: CCSEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_0_CIOVFIEN_Pos     (11UL)                    /*!< EPCA_0 CONTROL_0: CIOVFIEN (Bit 11)                   */
#define EPCA_0_CONTROL_0_CIOVFIEN_Msk     (0x800UL)                 /*!< EPCA_0 CONTROL_0: CIOVFIEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_0_CIOVFDEN_Pos     (12UL)                    /*!< EPCA_0 CONTROL_0: CIOVFDEN (Bit 12)                   */
#define EPCA_0_CONTROL_0_CIOVFDEN_Msk     (0x1000UL)                /*!< EPCA_0 CONTROL_0: CIOVFDEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_0_CIOVFSEN_Pos     (13UL)                    /*!< EPCA_0 CONTROL_0: CIOVFSEN (Bit 13)                   */
#define EPCA_0_CONTROL_0_CIOVFSEN_Msk     (0x2000UL)                /*!< EPCA_0 CONTROL_0: CIOVFSEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CCAPV_0  ======================================================== */
#define EPCA_0_CCAPV_0_CCAPV_Pos          (0UL)                     /*!< EPCA_0 CCAPV_0: CCAPV (Bit 0)                         */
#define EPCA_0_CCAPV_0_CCAPV_Msk          (0x3ffffUL)               /*!< EPCA_0 CCAPV_0: CCAPV (Bitfield-Mask: 0x3ffff)        */
/* ======================================================  CCAPVUPD_0  ======================================================= */
#define EPCA_0_CCAPVUPD_0_CCAPVUPD_Pos    (0UL)                     /*!< EPCA_0 CCAPVUPD_0: CCAPVUPD (Bit 0)                   */
#define EPCA_0_CCAPVUPD_0_CCAPVUPD_Msk    (0x3ffffUL)               /*!< EPCA_0 CCAPVUPD_0: CCAPVUPD (Bitfield-Mask: 0x3ffff)  */
/* ========================================================  MODE_1  ========================================================= */
#define EPCA_0_MODE_1_COSEL_Pos           (0UL)                     /*!< EPCA_0 MODE_1: COSEL (Bit 0)                          */
#define EPCA_0_MODE_1_COSEL_Msk           (0x3UL)                   /*!< EPCA_0 MODE_1: COSEL (Bitfield-Mask: 0x03)            */
#define EPCA_0_MODE_1_PWMMD_Pos           (2UL)                     /*!< EPCA_0 MODE_1: PWMMD (Bit 2)                          */
#define EPCA_0_MODE_1_PWMMD_Msk           (0x3cUL)                  /*!< EPCA_0 MODE_1: PWMMD (Bitfield-Mask: 0x0f)            */
#define EPCA_0_MODE_1_DIFGEN_Pos          (6UL)                     /*!< EPCA_0 MODE_1: DIFGEN (Bit 6)                         */
#define EPCA_0_MODE_1_DIFGEN_Msk          (0x40UL)                  /*!< EPCA_0 MODE_1: DIFGEN (Bitfield-Mask: 0x01)           */
#define EPCA_0_MODE_1_CMD_Pos             (8UL)                     /*!< EPCA_0 MODE_1: CMD (Bit 8)                            */
#define EPCA_0_MODE_1_CMD_Msk             (0x700UL)                 /*!< EPCA_0 MODE_1: CMD (Bitfield-Mask: 0x07)              */
/* =======================================================  CONTROL_1  ======================================================= */
#define EPCA_0_CONTROL_1_COUTST_Pos       (0UL)                     /*!< EPCA_0 CONTROL_1: COUTST (Bit 0)                      */
#define EPCA_0_CONTROL_1_COUTST_Msk       (0x1UL)                   /*!< EPCA_0 CONTROL_1: COUTST (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_1_CPCAPEN_Pos      (1UL)                     /*!< EPCA_0 CONTROL_1: CPCAPEN (Bit 1)                     */
#define EPCA_0_CONTROL_1_CPCAPEN_Msk      (0x2UL)                   /*!< EPCA_0 CONTROL_1: CPCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_1_CNCAPEN_Pos      (2UL)                     /*!< EPCA_0 CONTROL_1: CNCAPEN (Bit 2)                     */
#define EPCA_0_CONTROL_1_CNCAPEN_Msk      (0x4UL)                   /*!< EPCA_0 CONTROL_1: CNCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_1_CUPDCF_Pos       (3UL)                     /*!< EPCA_0 CONTROL_1: CUPDCF (Bit 3)                      */
#define EPCA_0_CONTROL_1_CUPDCF_Msk       (0x8UL)                   /*!< EPCA_0 CONTROL_1: CUPDCF (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_1_YPHST_Pos        (5UL)                     /*!< EPCA_0 CONTROL_1: YPHST (Bit 5)                       */
#define EPCA_0_CONTROL_1_YPHST_Msk        (0x20UL)                  /*!< EPCA_0 CONTROL_1: YPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_1_ACTIVEPH_Pos     (6UL)                     /*!< EPCA_0 CONTROL_1: ACTIVEPH (Bit 6)                    */
#define EPCA_0_CONTROL_1_ACTIVEPH_Msk     (0x40UL)                  /*!< EPCA_0 CONTROL_1: ACTIVEPH (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_1_XPHST_Pos        (7UL)                     /*!< EPCA_0 CONTROL_1: XPHST (Bit 7)                       */
#define EPCA_0_CONTROL_1_XPHST_Msk        (0x80UL)                  /*!< EPCA_0 CONTROL_1: XPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_1_CCIEN_Pos        (8UL)                     /*!< EPCA_0 CONTROL_1: CCIEN (Bit 8)                       */
#define EPCA_0_CONTROL_1_CCIEN_Msk        (0x100UL)                 /*!< EPCA_0 CONTROL_1: CCIEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_1_CCDEN_Pos        (9UL)                     /*!< EPCA_0 CONTROL_1: CCDEN (Bit 9)                       */
#define EPCA_0_CONTROL_1_CCDEN_Msk        (0x200UL)                 /*!< EPCA_0 CONTROL_1: CCDEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_1_CCSEN_Pos        (10UL)                    /*!< EPCA_0 CONTROL_1: CCSEN (Bit 10)                      */
#define EPCA_0_CONTROL_1_CCSEN_Msk        (0x400UL)                 /*!< EPCA_0 CONTROL_1: CCSEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_1_CIOVFIEN_Pos     (11UL)                    /*!< EPCA_0 CONTROL_1: CIOVFIEN (Bit 11)                   */
#define EPCA_0_CONTROL_1_CIOVFIEN_Msk     (0x800UL)                 /*!< EPCA_0 CONTROL_1: CIOVFIEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_1_CIOVFDEN_Pos     (12UL)                    /*!< EPCA_0 CONTROL_1: CIOVFDEN (Bit 12)                   */
#define EPCA_0_CONTROL_1_CIOVFDEN_Msk     (0x1000UL)                /*!< EPCA_0 CONTROL_1: CIOVFDEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_1_CIOVFSEN_Pos     (13UL)                    /*!< EPCA_0 CONTROL_1: CIOVFSEN (Bit 13)                   */
#define EPCA_0_CONTROL_1_CIOVFSEN_Msk     (0x2000UL)                /*!< EPCA_0 CONTROL_1: CIOVFSEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CCAPV_1  ======================================================== */
#define EPCA_0_CCAPV_1_CCAPV_Pos          (0UL)                     /*!< EPCA_0 CCAPV_1: CCAPV (Bit 0)                         */
#define EPCA_0_CCAPV_1_CCAPV_Msk          (0x3ffffUL)               /*!< EPCA_0 CCAPV_1: CCAPV (Bitfield-Mask: 0x3ffff)        */
/* ======================================================  CCAPVUPD_1  ======================================================= */
#define EPCA_0_CCAPVUPD_1_CCAPVUPD_Pos    (0UL)                     /*!< EPCA_0 CCAPVUPD_1: CCAPVUPD (Bit 0)                   */
#define EPCA_0_CCAPVUPD_1_CCAPVUPD_Msk    (0x3ffffUL)               /*!< EPCA_0 CCAPVUPD_1: CCAPVUPD (Bitfield-Mask: 0x3ffff)  */
/* ========================================================  MODE_2  ========================================================= */
#define EPCA_0_MODE_2_COSEL_Pos           (0UL)                     /*!< EPCA_0 MODE_2: COSEL (Bit 0)                          */
#define EPCA_0_MODE_2_COSEL_Msk           (0x3UL)                   /*!< EPCA_0 MODE_2: COSEL (Bitfield-Mask: 0x03)            */
#define EPCA_0_MODE_2_PWMMD_Pos           (2UL)                     /*!< EPCA_0 MODE_2: PWMMD (Bit 2)                          */
#define EPCA_0_MODE_2_PWMMD_Msk           (0x3cUL)                  /*!< EPCA_0 MODE_2: PWMMD (Bitfield-Mask: 0x0f)            */
#define EPCA_0_MODE_2_DIFGEN_Pos          (6UL)                     /*!< EPCA_0 MODE_2: DIFGEN (Bit 6)                         */
#define EPCA_0_MODE_2_DIFGEN_Msk          (0x40UL)                  /*!< EPCA_0 MODE_2: DIFGEN (Bitfield-Mask: 0x01)           */
#define EPCA_0_MODE_2_CMD_Pos             (8UL)                     /*!< EPCA_0 MODE_2: CMD (Bit 8)                            */
#define EPCA_0_MODE_2_CMD_Msk             (0x700UL)                 /*!< EPCA_0 MODE_2: CMD (Bitfield-Mask: 0x07)              */
/* =======================================================  CONTROL_2  ======================================================= */
#define EPCA_0_CONTROL_2_COUTST_Pos       (0UL)                     /*!< EPCA_0 CONTROL_2: COUTST (Bit 0)                      */
#define EPCA_0_CONTROL_2_COUTST_Msk       (0x1UL)                   /*!< EPCA_0 CONTROL_2: COUTST (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_2_CPCAPEN_Pos      (1UL)                     /*!< EPCA_0 CONTROL_2: CPCAPEN (Bit 1)                     */
#define EPCA_0_CONTROL_2_CPCAPEN_Msk      (0x2UL)                   /*!< EPCA_0 CONTROL_2: CPCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_2_CNCAPEN_Pos      (2UL)                     /*!< EPCA_0 CONTROL_2: CNCAPEN (Bit 2)                     */
#define EPCA_0_CONTROL_2_CNCAPEN_Msk      (0x4UL)                   /*!< EPCA_0 CONTROL_2: CNCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_2_CUPDCF_Pos       (3UL)                     /*!< EPCA_0 CONTROL_2: CUPDCF (Bit 3)                      */
#define EPCA_0_CONTROL_2_CUPDCF_Msk       (0x8UL)                   /*!< EPCA_0 CONTROL_2: CUPDCF (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_2_YPHST_Pos        (5UL)                     /*!< EPCA_0 CONTROL_2: YPHST (Bit 5)                       */
#define EPCA_0_CONTROL_2_YPHST_Msk        (0x20UL)                  /*!< EPCA_0 CONTROL_2: YPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_2_ACTIVEPH_Pos     (6UL)                     /*!< EPCA_0 CONTROL_2: ACTIVEPH (Bit 6)                    */
#define EPCA_0_CONTROL_2_ACTIVEPH_Msk     (0x40UL)                  /*!< EPCA_0 CONTROL_2: ACTIVEPH (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_2_XPHST_Pos        (7UL)                     /*!< EPCA_0 CONTROL_2: XPHST (Bit 7)                       */
#define EPCA_0_CONTROL_2_XPHST_Msk        (0x80UL)                  /*!< EPCA_0 CONTROL_2: XPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_2_CCIEN_Pos        (8UL)                     /*!< EPCA_0 CONTROL_2: CCIEN (Bit 8)                       */
#define EPCA_0_CONTROL_2_CCIEN_Msk        (0x100UL)                 /*!< EPCA_0 CONTROL_2: CCIEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_2_CCDEN_Pos        (9UL)                     /*!< EPCA_0 CONTROL_2: CCDEN (Bit 9)                       */
#define EPCA_0_CONTROL_2_CCDEN_Msk        (0x200UL)                 /*!< EPCA_0 CONTROL_2: CCDEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_2_CCSEN_Pos        (10UL)                    /*!< EPCA_0 CONTROL_2: CCSEN (Bit 10)                      */
#define EPCA_0_CONTROL_2_CCSEN_Msk        (0x400UL)                 /*!< EPCA_0 CONTROL_2: CCSEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_2_CIOVFIEN_Pos     (11UL)                    /*!< EPCA_0 CONTROL_2: CIOVFIEN (Bit 11)                   */
#define EPCA_0_CONTROL_2_CIOVFIEN_Msk     (0x800UL)                 /*!< EPCA_0 CONTROL_2: CIOVFIEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_2_CIOVFDEN_Pos     (12UL)                    /*!< EPCA_0 CONTROL_2: CIOVFDEN (Bit 12)                   */
#define EPCA_0_CONTROL_2_CIOVFDEN_Msk     (0x1000UL)                /*!< EPCA_0 CONTROL_2: CIOVFDEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_2_CIOVFSEN_Pos     (13UL)                    /*!< EPCA_0 CONTROL_2: CIOVFSEN (Bit 13)                   */
#define EPCA_0_CONTROL_2_CIOVFSEN_Msk     (0x2000UL)                /*!< EPCA_0 CONTROL_2: CIOVFSEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CCAPV_2  ======================================================== */
#define EPCA_0_CCAPV_2_CCAPV_Pos          (0UL)                     /*!< EPCA_0 CCAPV_2: CCAPV (Bit 0)                         */
#define EPCA_0_CCAPV_2_CCAPV_Msk          (0x3ffffUL)               /*!< EPCA_0 CCAPV_2: CCAPV (Bitfield-Mask: 0x3ffff)        */
/* ======================================================  CCAPVUPD_2  ======================================================= */
#define EPCA_0_CCAPVUPD_2_CCAPVUPD_Pos    (0UL)                     /*!< EPCA_0 CCAPVUPD_2: CCAPVUPD (Bit 0)                   */
#define EPCA_0_CCAPVUPD_2_CCAPVUPD_Msk    (0x3ffffUL)               /*!< EPCA_0 CCAPVUPD_2: CCAPVUPD (Bitfield-Mask: 0x3ffff)  */
/* ========================================================  MODE_3  ========================================================= */
#define EPCA_0_MODE_3_COSEL_Pos           (0UL)                     /*!< EPCA_0 MODE_3: COSEL (Bit 0)                          */
#define EPCA_0_MODE_3_COSEL_Msk           (0x3UL)                   /*!< EPCA_0 MODE_3: COSEL (Bitfield-Mask: 0x03)            */
#define EPCA_0_MODE_3_PWMMD_Pos           (2UL)                     /*!< EPCA_0 MODE_3: PWMMD (Bit 2)                          */
#define EPCA_0_MODE_3_PWMMD_Msk           (0x3cUL)                  /*!< EPCA_0 MODE_3: PWMMD (Bitfield-Mask: 0x0f)            */
#define EPCA_0_MODE_3_DIFGEN_Pos          (6UL)                     /*!< EPCA_0 MODE_3: DIFGEN (Bit 6)                         */
#define EPCA_0_MODE_3_DIFGEN_Msk          (0x40UL)                  /*!< EPCA_0 MODE_3: DIFGEN (Bitfield-Mask: 0x01)           */
#define EPCA_0_MODE_3_CMD_Pos             (8UL)                     /*!< EPCA_0 MODE_3: CMD (Bit 8)                            */
#define EPCA_0_MODE_3_CMD_Msk             (0x700UL)                 /*!< EPCA_0 MODE_3: CMD (Bitfield-Mask: 0x07)              */
/* =======================================================  CONTROL_3  ======================================================= */
#define EPCA_0_CONTROL_3_COUTST_Pos       (0UL)                     /*!< EPCA_0 CONTROL_3: COUTST (Bit 0)                      */
#define EPCA_0_CONTROL_3_COUTST_Msk       (0x1UL)                   /*!< EPCA_0 CONTROL_3: COUTST (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_3_CPCAPEN_Pos      (1UL)                     /*!< EPCA_0 CONTROL_3: CPCAPEN (Bit 1)                     */
#define EPCA_0_CONTROL_3_CPCAPEN_Msk      (0x2UL)                   /*!< EPCA_0 CONTROL_3: CPCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_3_CNCAPEN_Pos      (2UL)                     /*!< EPCA_0 CONTROL_3: CNCAPEN (Bit 2)                     */
#define EPCA_0_CONTROL_3_CNCAPEN_Msk      (0x4UL)                   /*!< EPCA_0 CONTROL_3: CNCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_3_CUPDCF_Pos       (3UL)                     /*!< EPCA_0 CONTROL_3: CUPDCF (Bit 3)                      */
#define EPCA_0_CONTROL_3_CUPDCF_Msk       (0x8UL)                   /*!< EPCA_0 CONTROL_3: CUPDCF (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_3_YPHST_Pos        (5UL)                     /*!< EPCA_0 CONTROL_3: YPHST (Bit 5)                       */
#define EPCA_0_CONTROL_3_YPHST_Msk        (0x20UL)                  /*!< EPCA_0 CONTROL_3: YPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_3_ACTIVEPH_Pos     (6UL)                     /*!< EPCA_0 CONTROL_3: ACTIVEPH (Bit 6)                    */
#define EPCA_0_CONTROL_3_ACTIVEPH_Msk     (0x40UL)                  /*!< EPCA_0 CONTROL_3: ACTIVEPH (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_3_XPHST_Pos        (7UL)                     /*!< EPCA_0 CONTROL_3: XPHST (Bit 7)                       */
#define EPCA_0_CONTROL_3_XPHST_Msk        (0x80UL)                  /*!< EPCA_0 CONTROL_3: XPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_3_CCIEN_Pos        (8UL)                     /*!< EPCA_0 CONTROL_3: CCIEN (Bit 8)                       */
#define EPCA_0_CONTROL_3_CCIEN_Msk        (0x100UL)                 /*!< EPCA_0 CONTROL_3: CCIEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_3_CCDEN_Pos        (9UL)                     /*!< EPCA_0 CONTROL_3: CCDEN (Bit 9)                       */
#define EPCA_0_CONTROL_3_CCDEN_Msk        (0x200UL)                 /*!< EPCA_0 CONTROL_3: CCDEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_3_CCSEN_Pos        (10UL)                    /*!< EPCA_0 CONTROL_3: CCSEN (Bit 10)                      */
#define EPCA_0_CONTROL_3_CCSEN_Msk        (0x400UL)                 /*!< EPCA_0 CONTROL_3: CCSEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_3_CIOVFIEN_Pos     (11UL)                    /*!< EPCA_0 CONTROL_3: CIOVFIEN (Bit 11)                   */
#define EPCA_0_CONTROL_3_CIOVFIEN_Msk     (0x800UL)                 /*!< EPCA_0 CONTROL_3: CIOVFIEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_3_CIOVFDEN_Pos     (12UL)                    /*!< EPCA_0 CONTROL_3: CIOVFDEN (Bit 12)                   */
#define EPCA_0_CONTROL_3_CIOVFDEN_Msk     (0x1000UL)                /*!< EPCA_0 CONTROL_3: CIOVFDEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_3_CIOVFSEN_Pos     (13UL)                    /*!< EPCA_0 CONTROL_3: CIOVFSEN (Bit 13)                   */
#define EPCA_0_CONTROL_3_CIOVFSEN_Msk     (0x2000UL)                /*!< EPCA_0 CONTROL_3: CIOVFSEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CCAPV_3  ======================================================== */
#define EPCA_0_CCAPV_3_CCAPV_Pos          (0UL)                     /*!< EPCA_0 CCAPV_3: CCAPV (Bit 0)                         */
#define EPCA_0_CCAPV_3_CCAPV_Msk          (0x3ffffUL)               /*!< EPCA_0 CCAPV_3: CCAPV (Bitfield-Mask: 0x3ffff)        */
/* ======================================================  CCAPVUPD_3  ======================================================= */
#define EPCA_0_CCAPVUPD_3_CCAPVUPD_Pos    (0UL)                     /*!< EPCA_0 CCAPVUPD_3: CCAPVUPD (Bit 0)                   */
#define EPCA_0_CCAPVUPD_3_CCAPVUPD_Msk    (0x3ffffUL)               /*!< EPCA_0 CCAPVUPD_3: CCAPVUPD (Bitfield-Mask: 0x3ffff)  */
/* ========================================================  MODE_4  ========================================================= */
#define EPCA_0_MODE_4_COSEL_Pos           (0UL)                     /*!< EPCA_0 MODE_4: COSEL (Bit 0)                          */
#define EPCA_0_MODE_4_COSEL_Msk           (0x3UL)                   /*!< EPCA_0 MODE_4: COSEL (Bitfield-Mask: 0x03)            */
#define EPCA_0_MODE_4_PWMMD_Pos           (2UL)                     /*!< EPCA_0 MODE_4: PWMMD (Bit 2)                          */
#define EPCA_0_MODE_4_PWMMD_Msk           (0x3cUL)                  /*!< EPCA_0 MODE_4: PWMMD (Bitfield-Mask: 0x0f)            */
#define EPCA_0_MODE_4_DIFGEN_Pos          (6UL)                     /*!< EPCA_0 MODE_4: DIFGEN (Bit 6)                         */
#define EPCA_0_MODE_4_DIFGEN_Msk          (0x40UL)                  /*!< EPCA_0 MODE_4: DIFGEN (Bitfield-Mask: 0x01)           */
#define EPCA_0_MODE_4_CMD_Pos             (8UL)                     /*!< EPCA_0 MODE_4: CMD (Bit 8)                            */
#define EPCA_0_MODE_4_CMD_Msk             (0x700UL)                 /*!< EPCA_0 MODE_4: CMD (Bitfield-Mask: 0x07)              */
/* =======================================================  CONTROL_4  ======================================================= */
#define EPCA_0_CONTROL_4_COUTST_Pos       (0UL)                     /*!< EPCA_0 CONTROL_4: COUTST (Bit 0)                      */
#define EPCA_0_CONTROL_4_COUTST_Msk       (0x1UL)                   /*!< EPCA_0 CONTROL_4: COUTST (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_4_CPCAPEN_Pos      (1UL)                     /*!< EPCA_0 CONTROL_4: CPCAPEN (Bit 1)                     */
#define EPCA_0_CONTROL_4_CPCAPEN_Msk      (0x2UL)                   /*!< EPCA_0 CONTROL_4: CPCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_4_CNCAPEN_Pos      (2UL)                     /*!< EPCA_0 CONTROL_4: CNCAPEN (Bit 2)                     */
#define EPCA_0_CONTROL_4_CNCAPEN_Msk      (0x4UL)                   /*!< EPCA_0 CONTROL_4: CNCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_4_CUPDCF_Pos       (3UL)                     /*!< EPCA_0 CONTROL_4: CUPDCF (Bit 3)                      */
#define EPCA_0_CONTROL_4_CUPDCF_Msk       (0x8UL)                   /*!< EPCA_0 CONTROL_4: CUPDCF (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_4_YPHST_Pos        (5UL)                     /*!< EPCA_0 CONTROL_4: YPHST (Bit 5)                       */
#define EPCA_0_CONTROL_4_YPHST_Msk        (0x20UL)                  /*!< EPCA_0 CONTROL_4: YPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_4_ACTIVEPH_Pos     (6UL)                     /*!< EPCA_0 CONTROL_4: ACTIVEPH (Bit 6)                    */
#define EPCA_0_CONTROL_4_ACTIVEPH_Msk     (0x40UL)                  /*!< EPCA_0 CONTROL_4: ACTIVEPH (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_4_XPHST_Pos        (7UL)                     /*!< EPCA_0 CONTROL_4: XPHST (Bit 7)                       */
#define EPCA_0_CONTROL_4_XPHST_Msk        (0x80UL)                  /*!< EPCA_0 CONTROL_4: XPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_4_CCIEN_Pos        (8UL)                     /*!< EPCA_0 CONTROL_4: CCIEN (Bit 8)                       */
#define EPCA_0_CONTROL_4_CCIEN_Msk        (0x100UL)                 /*!< EPCA_0 CONTROL_4: CCIEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_4_CCDEN_Pos        (9UL)                     /*!< EPCA_0 CONTROL_4: CCDEN (Bit 9)                       */
#define EPCA_0_CONTROL_4_CCDEN_Msk        (0x200UL)                 /*!< EPCA_0 CONTROL_4: CCDEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_4_CCSEN_Pos        (10UL)                    /*!< EPCA_0 CONTROL_4: CCSEN (Bit 10)                      */
#define EPCA_0_CONTROL_4_CCSEN_Msk        (0x400UL)                 /*!< EPCA_0 CONTROL_4: CCSEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_4_CIOVFIEN_Pos     (11UL)                    /*!< EPCA_0 CONTROL_4: CIOVFIEN (Bit 11)                   */
#define EPCA_0_CONTROL_4_CIOVFIEN_Msk     (0x800UL)                 /*!< EPCA_0 CONTROL_4: CIOVFIEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_4_CIOVFDEN_Pos     (12UL)                    /*!< EPCA_0 CONTROL_4: CIOVFDEN (Bit 12)                   */
#define EPCA_0_CONTROL_4_CIOVFDEN_Msk     (0x1000UL)                /*!< EPCA_0 CONTROL_4: CIOVFDEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_4_CIOVFSEN_Pos     (13UL)                    /*!< EPCA_0 CONTROL_4: CIOVFSEN (Bit 13)                   */
#define EPCA_0_CONTROL_4_CIOVFSEN_Msk     (0x2000UL)                /*!< EPCA_0 CONTROL_4: CIOVFSEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CCAPV_4  ======================================================== */
#define EPCA_0_CCAPV_4_CCAPV_Pos          (0UL)                     /*!< EPCA_0 CCAPV_4: CCAPV (Bit 0)                         */
#define EPCA_0_CCAPV_4_CCAPV_Msk          (0x3ffffUL)               /*!< EPCA_0 CCAPV_4: CCAPV (Bitfield-Mask: 0x3ffff)        */
/* ======================================================  CCAPVUPD_4  ======================================================= */
#define EPCA_0_CCAPVUPD_4_CCAPVUPD_Pos    (0UL)                     /*!< EPCA_0 CCAPVUPD_4: CCAPVUPD (Bit 0)                   */
#define EPCA_0_CCAPVUPD_4_CCAPVUPD_Msk    (0x3ffffUL)               /*!< EPCA_0 CCAPVUPD_4: CCAPVUPD (Bitfield-Mask: 0x3ffff)  */
/* ========================================================  MODE_5  ========================================================= */
#define EPCA_0_MODE_5_COSEL_Pos           (0UL)                     /*!< EPCA_0 MODE_5: COSEL (Bit 0)                          */
#define EPCA_0_MODE_5_COSEL_Msk           (0x3UL)                   /*!< EPCA_0 MODE_5: COSEL (Bitfield-Mask: 0x03)            */
#define EPCA_0_MODE_5_PWMMD_Pos           (2UL)                     /*!< EPCA_0 MODE_5: PWMMD (Bit 2)                          */
#define EPCA_0_MODE_5_PWMMD_Msk           (0x3cUL)                  /*!< EPCA_0 MODE_5: PWMMD (Bitfield-Mask: 0x0f)            */
#define EPCA_0_MODE_5_DIFGEN_Pos          (6UL)                     /*!< EPCA_0 MODE_5: DIFGEN (Bit 6)                         */
#define EPCA_0_MODE_5_DIFGEN_Msk          (0x40UL)                  /*!< EPCA_0 MODE_5: DIFGEN (Bitfield-Mask: 0x01)           */
#define EPCA_0_MODE_5_CMD_Pos             (8UL)                     /*!< EPCA_0 MODE_5: CMD (Bit 8)                            */
#define EPCA_0_MODE_5_CMD_Msk             (0x700UL)                 /*!< EPCA_0 MODE_5: CMD (Bitfield-Mask: 0x07)              */
/* =======================================================  CONTROL_5  ======================================================= */
#define EPCA_0_CONTROL_5_COUTST_Pos       (0UL)                     /*!< EPCA_0 CONTROL_5: COUTST (Bit 0)                      */
#define EPCA_0_CONTROL_5_COUTST_Msk       (0x1UL)                   /*!< EPCA_0 CONTROL_5: COUTST (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_5_CPCAPEN_Pos      (1UL)                     /*!< EPCA_0 CONTROL_5: CPCAPEN (Bit 1)                     */
#define EPCA_0_CONTROL_5_CPCAPEN_Msk      (0x2UL)                   /*!< EPCA_0 CONTROL_5: CPCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_5_CNCAPEN_Pos      (2UL)                     /*!< EPCA_0 CONTROL_5: CNCAPEN (Bit 2)                     */
#define EPCA_0_CONTROL_5_CNCAPEN_Msk      (0x4UL)                   /*!< EPCA_0 CONTROL_5: CNCAPEN (Bitfield-Mask: 0x01)       */
#define EPCA_0_CONTROL_5_CUPDCF_Pos       (3UL)                     /*!< EPCA_0 CONTROL_5: CUPDCF (Bit 3)                      */
#define EPCA_0_CONTROL_5_CUPDCF_Msk       (0x8UL)                   /*!< EPCA_0 CONTROL_5: CUPDCF (Bitfield-Mask: 0x01)        */
#define EPCA_0_CONTROL_5_YPHST_Pos        (5UL)                     /*!< EPCA_0 CONTROL_5: YPHST (Bit 5)                       */
#define EPCA_0_CONTROL_5_YPHST_Msk        (0x20UL)                  /*!< EPCA_0 CONTROL_5: YPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_5_ACTIVEPH_Pos     (6UL)                     /*!< EPCA_0 CONTROL_5: ACTIVEPH (Bit 6)                    */
#define EPCA_0_CONTROL_5_ACTIVEPH_Msk     (0x40UL)                  /*!< EPCA_0 CONTROL_5: ACTIVEPH (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_5_XPHST_Pos        (7UL)                     /*!< EPCA_0 CONTROL_5: XPHST (Bit 7)                       */
#define EPCA_0_CONTROL_5_XPHST_Msk        (0x80UL)                  /*!< EPCA_0 CONTROL_5: XPHST (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_5_CCIEN_Pos        (8UL)                     /*!< EPCA_0 CONTROL_5: CCIEN (Bit 8)                       */
#define EPCA_0_CONTROL_5_CCIEN_Msk        (0x100UL)                 /*!< EPCA_0 CONTROL_5: CCIEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_5_CCDEN_Pos        (9UL)                     /*!< EPCA_0 CONTROL_5: CCDEN (Bit 9)                       */
#define EPCA_0_CONTROL_5_CCDEN_Msk        (0x200UL)                 /*!< EPCA_0 CONTROL_5: CCDEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_5_CCSEN_Pos        (10UL)                    /*!< EPCA_0 CONTROL_5: CCSEN (Bit 10)                      */
#define EPCA_0_CONTROL_5_CCSEN_Msk        (0x400UL)                 /*!< EPCA_0 CONTROL_5: CCSEN (Bitfield-Mask: 0x01)         */
#define EPCA_0_CONTROL_5_CIOVFIEN_Pos     (11UL)                    /*!< EPCA_0 CONTROL_5: CIOVFIEN (Bit 11)                   */
#define EPCA_0_CONTROL_5_CIOVFIEN_Msk     (0x800UL)                 /*!< EPCA_0 CONTROL_5: CIOVFIEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_5_CIOVFDEN_Pos     (12UL)                    /*!< EPCA_0 CONTROL_5: CIOVFDEN (Bit 12)                   */
#define EPCA_0_CONTROL_5_CIOVFDEN_Msk     (0x1000UL)                /*!< EPCA_0 CONTROL_5: CIOVFDEN (Bitfield-Mask: 0x01)      */
#define EPCA_0_CONTROL_5_CIOVFSEN_Pos     (13UL)                    /*!< EPCA_0 CONTROL_5: CIOVFSEN (Bit 13)                   */
#define EPCA_0_CONTROL_5_CIOVFSEN_Msk     (0x2000UL)                /*!< EPCA_0 CONTROL_5: CIOVFSEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CCAPV_5  ======================================================== */
#define EPCA_0_CCAPV_5_CCAPV_Pos          (0UL)                     /*!< EPCA_0 CCAPV_5: CCAPV (Bit 0)                         */
#define EPCA_0_CCAPV_5_CCAPV_Msk          (0x3ffffUL)               /*!< EPCA_0 CCAPV_5: CCAPV (Bitfield-Mask: 0x3ffff)        */
/* ======================================================  CCAPVUPD_5  ======================================================= */
#define EPCA_0_CCAPVUPD_5_CCAPVUPD_Pos    (0UL)                     /*!< EPCA_0 CCAPVUPD_5: CCAPVUPD (Bit 0)                   */
#define EPCA_0_CCAPVUPD_5_CCAPVUPD_Msk    (0x3ffffUL)               /*!< EPCA_0 CCAPVUPD_5: CCAPVUPD (Bitfield-Mask: 0x3ffff)  */


/* =========================================================================================================================== */
/* ================                                        FLASHCTRL_0                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define FLASHCTRL_0_CONFIG_SPMD_Pos       (0UL)                     /*!< FLASHCTRL_0 CONFIG: SPMD (Bit 0)                      */
#define FLASHCTRL_0_CONFIG_SPMD_Msk       (0x3UL)                   /*!< FLASHCTRL_0 CONFIG: SPMD (Bitfield-Mask: 0x03)        */
#define FLASHCTRL_0_CONFIG_RDSEN_Pos      (4UL)                     /*!< FLASHCTRL_0 CONFIG: RDSEN (Bit 4)                     */
#define FLASHCTRL_0_CONFIG_RDSEN_Msk      (0x10UL)                  /*!< FLASHCTRL_0 CONFIG: RDSEN (Bitfield-Mask: 0x01)       */
#define FLASHCTRL_0_CONFIG_DPFEN_Pos      (6UL)                     /*!< FLASHCTRL_0 CONFIG: DPFEN (Bit 6)                     */
#define FLASHCTRL_0_CONFIG_DPFEN_Msk      (0x40UL)                  /*!< FLASHCTRL_0 CONFIG: DPFEN (Bitfield-Mask: 0x01)       */
#define FLASHCTRL_0_CONFIG_PFINH_Pos      (7UL)                     /*!< FLASHCTRL_0 CONFIG: PFINH (Bit 7)                     */
#define FLASHCTRL_0_CONFIG_PFINH_Msk      (0x80UL)                  /*!< FLASHCTRL_0 CONFIG: PFINH (Bitfield-Mask: 0x01)       */
#define FLASHCTRL_0_CONFIG_SQWEN_Pos      (16UL)                    /*!< FLASHCTRL_0 CONFIG: SQWEN (Bit 16)                    */
#define FLASHCTRL_0_CONFIG_SQWEN_Msk      (0x10000UL)               /*!< FLASHCTRL_0 CONFIG: SQWEN (Bitfield-Mask: 0x01)       */
#define FLASHCTRL_0_CONFIG_ERASEEN_Pos    (18UL)                    /*!< FLASHCTRL_0 CONFIG: ERASEEN (Bit 18)                  */
#define FLASHCTRL_0_CONFIG_ERASEEN_Msk    (0x40000UL)               /*!< FLASHCTRL_0 CONFIG: ERASEEN (Bitfield-Mask: 0x01)     */
#define FLASHCTRL_0_CONFIG_BUFSTS_Pos     (19UL)                    /*!< FLASHCTRL_0 CONFIG: BUFSTS (Bit 19)                   */
#define FLASHCTRL_0_CONFIG_BUFSTS_Msk     (0x80000UL)               /*!< FLASHCTRL_0 CONFIG: BUFSTS (Bitfield-Mask: 0x01)      */
#define FLASHCTRL_0_CONFIG_BUSYF_Pos      (20UL)                    /*!< FLASHCTRL_0 CONFIG: BUSYF (Bit 20)                    */
#define FLASHCTRL_0_CONFIG_BUSYF_Msk      (0x100000UL)              /*!< FLASHCTRL_0 CONFIG: BUSYF (Bitfield-Mask: 0x01)       */
/* ========================================================  WRADDR  ========================================================= */
#define FLASHCTRL_0_WRADDR_WRADDR_Pos     (0UL)                     /*!< FLASHCTRL_0 WRADDR: WRADDR (Bit 0)                    */
#define FLASHCTRL_0_WRADDR_WRADDR_Msk     (0xffffffffUL)            /*!< FLASHCTRL_0 WRADDR: WRADDR (Bitfield-Mask: 0xffffffff) */
/* ========================================================  WRDATA  ========================================================= */
#define FLASHCTRL_0_WRDATA_WRDATA_Pos     (0UL)                     /*!< FLASHCTRL_0 WRDATA: WRDATA (Bit 0)                    */
#define FLASHCTRL_0_WRDATA_WRDATA_Msk     (0xffffffffUL)            /*!< FLASHCTRL_0 WRDATA: WRDATA (Bitfield-Mask: 0xffffffff) */
/* ==========================================================  KEY  ========================================================== */
#define FLASHCTRL_0_KEY_KEY_Pos           (0UL)                     /*!< FLASHCTRL_0 KEY: KEY (Bit 0)                          */
#define FLASHCTRL_0_KEY_KEY_Msk           (0xffUL)                  /*!< FLASHCTRL_0 KEY: KEY (Bitfield-Mask: 0xff)            */
/* =======================================================  TCONTROL  ======================================================== */
#define FLASHCTRL_0_TCONTROL_FLRTMD_Pos   (6UL)                     /*!< FLASHCTRL_0 TCONTROL: FLRTMD (Bit 6)                  */
#define FLASHCTRL_0_TCONTROL_FLRTMD_Msk   (0x40UL)                  /*!< FLASHCTRL_0 TCONTROL: FLRTMD (Bitfield-Mask: 0x01)    */


/* =========================================================================================================================== */
/* ================                                            I2C                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define I2C_CONTROL_BUSYF_Pos             (0UL)                     /*!< I2C CONTROL: BUSYF (Bit 0)                            */
#define I2C_CONTROL_BUSYF_Msk             (0x1UL)                   /*!< I2C CONTROL: BUSYF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_ACK_Pos               (1UL)                     /*!< I2C CONTROL: ACK (Bit 1)                              */
#define I2C_CONTROL_ACK_Msk               (0x2UL)                   /*!< I2C CONTROL: ACK (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_ARBLF_Pos             (2UL)                     /*!< I2C CONTROL: ARBLF (Bit 2)                            */
#define I2C_CONTROL_ARBLF_Msk             (0x4UL)                   /*!< I2C CONTROL: ARBLF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_ACKRQF_Pos            (3UL)                     /*!< I2C CONTROL: ACKRQF (Bit 3)                           */
#define I2C_CONTROL_ACKRQF_Msk            (0x8UL)                   /*!< I2C CONTROL: ACKRQF (Bitfield-Mask: 0x01)             */
#define I2C_CONTROL_STO_Pos               (4UL)                     /*!< I2C CONTROL: STO (Bit 4)                              */
#define I2C_CONTROL_STO_Msk               (0x10UL)                  /*!< I2C CONTROL: STO (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_STA_Pos               (5UL)                     /*!< I2C CONTROL: STA (Bit 5)                              */
#define I2C_CONTROL_STA_Msk               (0x20UL)                  /*!< I2C CONTROL: STA (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_TXMDF_Pos             (6UL)                     /*!< I2C CONTROL: TXMDF (Bit 6)                            */
#define I2C_CONTROL_TXMDF_Msk             (0x40UL)                  /*!< I2C CONTROL: TXMDF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_MSMDF_Pos             (7UL)                     /*!< I2C CONTROL: MSMDF (Bit 7)                            */
#define I2C_CONTROL_MSMDF_Msk             (0x80UL)                  /*!< I2C CONTROL: MSMDF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_STOI_Pos              (8UL)                     /*!< I2C CONTROL: STOI (Bit 8)                             */
#define I2C_CONTROL_STOI_Msk              (0x100UL)                 /*!< I2C CONTROL: STOI (Bitfield-Mask: 0x01)               */
#define I2C_CONTROL_ACKI_Pos              (9UL)                     /*!< I2C CONTROL: ACKI (Bit 9)                             */
#define I2C_CONTROL_ACKI_Msk              (0x200UL)                 /*!< I2C CONTROL: ACKI (Bitfield-Mask: 0x01)               */
#define I2C_CONTROL_RXI_Pos               (10UL)                    /*!< I2C CONTROL: RXI (Bit 10)                             */
#define I2C_CONTROL_RXI_Msk               (0x400UL)                 /*!< I2C CONTROL: RXI (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_TXI_Pos               (11UL)                    /*!< I2C CONTROL: TXI (Bit 11)                             */
#define I2C_CONTROL_TXI_Msk               (0x800UL)                 /*!< I2C CONTROL: TXI (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_STAI_Pos              (12UL)                    /*!< I2C CONTROL: STAI (Bit 12)                            */
#define I2C_CONTROL_STAI_Msk              (0x1000UL)                /*!< I2C CONTROL: STAI (Bitfield-Mask: 0x01)               */
#define I2C_CONTROL_ARBLI_Pos             (13UL)                    /*!< I2C CONTROL: ARBLI (Bit 13)                           */
#define I2C_CONTROL_ARBLI_Msk             (0x2000UL)                /*!< I2C CONTROL: ARBLI (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_T0I_Pos               (14UL)                    /*!< I2C CONTROL: T0I (Bit 14)                             */
#define I2C_CONTROL_T0I_Msk               (0x4000UL)                /*!< I2C CONTROL: T0I (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_T1I_Pos               (15UL)                    /*!< I2C CONTROL: T1I (Bit 15)                             */
#define I2C_CONTROL_T1I_Msk               (0x8000UL)                /*!< I2C CONTROL: T1I (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_T2I_Pos               (16UL)                    /*!< I2C CONTROL: T2I (Bit 16)                             */
#define I2C_CONTROL_T2I_Msk               (0x10000UL)               /*!< I2C CONTROL: T2I (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_T3I_Pos               (17UL)                    /*!< I2C CONTROL: T3I (Bit 17)                             */
#define I2C_CONTROL_T3I_Msk               (0x20000UL)               /*!< I2C CONTROL: T3I (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_RXARM_Pos             (18UL)                    /*!< I2C CONTROL: RXARM (Bit 18)                           */
#define I2C_CONTROL_RXARM_Msk             (0x40000UL)               /*!< I2C CONTROL: RXARM (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_TXARM_Pos             (19UL)                    /*!< I2C CONTROL: TXARM (Bit 19)                           */
#define I2C_CONTROL_TXARM_Msk             (0x80000UL)               /*!< I2C CONTROL: TXARM (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_SLVAF_Pos             (20UL)                    /*!< I2C CONTROL: SLVAF (Bit 20)                           */
#define I2C_CONTROL_SLVAF_Msk             (0x100000UL)              /*!< I2C CONTROL: SLVAF (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_ATXRXEN_Pos           (21UL)                    /*!< I2C CONTROL: ATXRXEN (Bit 21)                         */
#define I2C_CONTROL_ATXRXEN_Msk           (0x200000UL)              /*!< I2C CONTROL: ATXRXEN (Bitfield-Mask: 0x01)            */
#define I2C_CONTROL_FMD_Pos               (22UL)                    /*!< I2C CONTROL: FMD (Bit 22)                             */
#define I2C_CONTROL_FMD_Msk               (0x400000UL)              /*!< I2C CONTROL: FMD (Bitfield-Mask: 0x01)                */
#define I2C_CONTROL_DBGMD_Pos             (23UL)                    /*!< I2C CONTROL: DBGMD (Bit 23)                           */
#define I2C_CONTROL_DBGMD_Msk             (0x800000UL)              /*!< I2C CONTROL: DBGMD (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_SMINH_Pos             (24UL)                    /*!< I2C CONTROL: SMINH (Bit 24)                           */
#define I2C_CONTROL_SMINH_Msk             (0x1000000UL)             /*!< I2C CONTROL: SMINH (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_HACKEN_Pos            (25UL)                    /*!< I2C CONTROL: HACKEN (Bit 25)                          */
#define I2C_CONTROL_HACKEN_Msk            (0x2000000UL)             /*!< I2C CONTROL: HACKEN (Bitfield-Mask: 0x01)             */
#define I2C_CONTROL_SLVAMD_Pos            (26UL)                    /*!< I2C CONTROL: SLVAMD (Bit 26)                          */
#define I2C_CONTROL_SLVAMD_Msk            (0x4000000UL)             /*!< I2C CONTROL: SLVAMD (Bitfield-Mask: 0x01)             */
#define I2C_CONTROL_LBACKEN_Pos           (27UL)                    /*!< I2C CONTROL: LBACKEN (Bit 27)                         */
#define I2C_CONTROL_LBACKEN_Msk           (0x8000000UL)             /*!< I2C CONTROL: LBACKEN (Bitfield-Mask: 0x01)            */
#define I2C_CONTROL_GCEN_Pos              (29UL)                    /*!< I2C CONTROL: GCEN (Bit 29)                            */
#define I2C_CONTROL_GCEN_Msk              (0x20000000UL)            /*!< I2C CONTROL: GCEN (Bitfield-Mask: 0x01)               */
#define I2C_CONTROL_RESET_Pos             (30UL)                    /*!< I2C CONTROL: RESET (Bit 30)                           */
#define I2C_CONTROL_RESET_Msk             (0x40000000UL)            /*!< I2C CONTROL: RESET (Bitfield-Mask: 0x01)              */
#define I2C_CONTROL_I2CEN_Pos             (31UL)                    /*!< I2C CONTROL: I2CEN (Bit 31)                           */
#define I2C_CONTROL_I2CEN_Msk             (0x80000000UL)            /*!< I2C CONTROL: I2CEN (Bitfield-Mask: 0x01)              */
/* ========================================================  CONFIG  ========================================================= */
#define I2C_CONFIG_SCALER_Pos             (0UL)                     /*!< I2C CONFIG: SCALER (Bit 0)                            */
#define I2C_CONFIG_SCALER_Msk             (0x3fUL)                  /*!< I2C CONFIG: SCALER (Bitfield-Mask: 0x3f)              */
#define I2C_CONFIG_STOIEN_Pos             (8UL)                     /*!< I2C CONFIG: STOIEN (Bit 8)                            */
#define I2C_CONFIG_STOIEN_Msk             (0x100UL)                 /*!< I2C CONFIG: STOIEN (Bitfield-Mask: 0x01)              */
#define I2C_CONFIG_ACKIEN_Pos             (9UL)                     /*!< I2C CONFIG: ACKIEN (Bit 9)                            */
#define I2C_CONFIG_ACKIEN_Msk             (0x200UL)                 /*!< I2C CONFIG: ACKIEN (Bitfield-Mask: 0x01)              */
#define I2C_CONFIG_RXIEN_Pos              (10UL)                    /*!< I2C CONFIG: RXIEN (Bit 10)                            */
#define I2C_CONFIG_RXIEN_Msk              (0x400UL)                 /*!< I2C CONFIG: RXIEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_TXIEN_Pos              (11UL)                    /*!< I2C CONFIG: TXIEN (Bit 11)                            */
#define I2C_CONFIG_TXIEN_Msk              (0x800UL)                 /*!< I2C CONFIG: TXIEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_STAIEN_Pos             (12UL)                    /*!< I2C CONFIG: STAIEN (Bit 12)                           */
#define I2C_CONFIG_STAIEN_Msk             (0x1000UL)                /*!< I2C CONFIG: STAIEN (Bitfield-Mask: 0x01)              */
#define I2C_CONFIG_ARBLIEN_Pos            (13UL)                    /*!< I2C CONFIG: ARBLIEN (Bit 13)                          */
#define I2C_CONFIG_ARBLIEN_Msk            (0x2000UL)                /*!< I2C CONFIG: ARBLIEN (Bitfield-Mask: 0x01)             */
#define I2C_CONFIG_T0IEN_Pos              (14UL)                    /*!< I2C CONFIG: T0IEN (Bit 14)                            */
#define I2C_CONFIG_T0IEN_Msk              (0x4000UL)                /*!< I2C CONFIG: T0IEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T1IEN_Pos              (15UL)                    /*!< I2C CONFIG: T1IEN (Bit 15)                            */
#define I2C_CONFIG_T1IEN_Msk              (0x8000UL)                /*!< I2C CONFIG: T1IEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T2IEN_Pos              (16UL)                    /*!< I2C CONFIG: T2IEN (Bit 16)                            */
#define I2C_CONFIG_T2IEN_Msk              (0x10000UL)               /*!< I2C CONFIG: T2IEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T3IEN_Pos              (17UL)                    /*!< I2C CONFIG: T3IEN (Bit 17)                            */
#define I2C_CONFIG_T3IEN_Msk              (0x20000UL)               /*!< I2C CONFIG: T3IEN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_BC_Pos                 (20UL)                    /*!< I2C CONFIG: BC (Bit 20)                               */
#define I2C_CONFIG_BC_Msk                 (0x300000UL)              /*!< I2C CONFIG: BC (Bitfield-Mask: 0x03)                  */
#define I2C_CONFIG_BP_Pos                 (22UL)                    /*!< I2C CONFIG: BP (Bit 22)                               */
#define I2C_CONFIG_BP_Msk                 (0xc00000UL)              /*!< I2C CONFIG: BP (Bitfield-Mask: 0x03)                  */
#define I2C_CONFIG_T0RUN_Pos              (24UL)                    /*!< I2C CONFIG: T0RUN (Bit 24)                            */
#define I2C_CONFIG_T0RUN_Msk              (0x1000000UL)             /*!< I2C CONFIG: T0RUN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T1RUN_Pos              (25UL)                    /*!< I2C CONFIG: T1RUN (Bit 25)                            */
#define I2C_CONFIG_T1RUN_Msk              (0x2000000UL)             /*!< I2C CONFIG: T1RUN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T2RUN_Pos              (26UL)                    /*!< I2C CONFIG: T2RUN (Bit 26)                            */
#define I2C_CONFIG_T2RUN_Msk              (0x4000000UL)             /*!< I2C CONFIG: T2RUN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_T3RUN_Pos              (27UL)                    /*!< I2C CONFIG: T3RUN (Bit 27)                            */
#define I2C_CONFIG_T3RUN_Msk              (0x8000000UL)             /*!< I2C CONFIG: T3RUN (Bitfield-Mask: 0x01)               */
#define I2C_CONFIG_TMD_Pos                (28UL)                    /*!< I2C CONFIG: TMD (Bit 28)                              */
#define I2C_CONFIG_TMD_Msk                (0x30000000UL)            /*!< I2C CONFIG: TMD (Bitfield-Mask: 0x03)                 */
#define I2C_CONFIG_TIMEREN_Pos            (31UL)                    /*!< I2C CONFIG: TIMEREN (Bit 31)                          */
#define I2C_CONFIG_TIMEREN_Msk            (0x80000000UL)            /*!< I2C CONFIG: TIMEREN (Bitfield-Mask: 0x01)             */
/* =======================================================  SADDRESS  ======================================================== */
#define I2C_SADDRESS_ADDRESS_Pos          (1UL)                     /*!< I2C SADDRESS: ADDRESS (Bit 1)                         */
#define I2C_SADDRESS_ADDRESS_Msk          (0x7feUL)                 /*!< I2C SADDRESS: ADDRESS (Bitfield-Mask: 0x3ff)          */
/* =========================================================  SMASK  ========================================================= */
#define I2C_SMASK_MASK_Pos                (1UL)                     /*!< I2C SMASK: MASK (Bit 1)                               */
#define I2C_SMASK_MASK_Msk                (0x7feUL)                 /*!< I2C SMASK: MASK (Bitfield-Mask: 0x3ff)                */
/* =========================================================  DATA  ========================================================== */
#define I2C_DATA_DATA_Pos                 (0UL)                     /*!< I2C DATA: DATA (Bit 0)                                */
#define I2C_DATA_DATA_Msk                 (0xffffffffUL)            /*!< I2C DATA: DATA (Bitfield-Mask: 0xffffffff)            */
/* =========================================================  TIMER  ========================================================= */
#define I2C_TIMER_T0_Pos                  (0UL)                     /*!< I2C TIMER: T0 (Bit 0)                                 */
#define I2C_TIMER_T0_Msk                  (0xffUL)                  /*!< I2C TIMER: T0 (Bitfield-Mask: 0xff)                   */
#define I2C_TIMER_T1_Pos                  (8UL)                     /*!< I2C TIMER: T1 (Bit 8)                                 */
#define I2C_TIMER_T1_Msk                  (0xff00UL)                /*!< I2C TIMER: T1 (Bitfield-Mask: 0xff)                   */
#define I2C_TIMER_T2_Pos                  (16UL)                    /*!< I2C TIMER: T2 (Bit 16)                                */
#define I2C_TIMER_T2_Msk                  (0xff0000UL)              /*!< I2C TIMER: T2 (Bitfield-Mask: 0xff)                   */
#define I2C_TIMER_T3_Pos                  (24UL)                    /*!< I2C TIMER: T3 (Bit 24)                                */
#define I2C_TIMER_T3_Msk                  (0xff000000UL)            /*!< I2C TIMER: T3 (Bitfield-Mask: 0xff)                   */
/* ========================================================  TIMERRL  ======================================================== */
#define I2C_TIMERRL_T0RL_Pos              (0UL)                     /*!< I2C TIMERRL: T0RL (Bit 0)                             */
#define I2C_TIMERRL_T0RL_Msk              (0xffUL)                  /*!< I2C TIMERRL: T0RL (Bitfield-Mask: 0xff)               */
#define I2C_TIMERRL_T1RL_Pos              (8UL)                     /*!< I2C TIMERRL: T1RL (Bit 8)                             */
#define I2C_TIMERRL_T1RL_Msk              (0xff00UL)                /*!< I2C TIMERRL: T1RL (Bitfield-Mask: 0xff)               */
#define I2C_TIMERRL_T2RL_Pos              (16UL)                    /*!< I2C TIMERRL: T2RL (Bit 16)                            */
#define I2C_TIMERRL_T2RL_Msk              (0xff0000UL)              /*!< I2C TIMERRL: T2RL (Bitfield-Mask: 0xff)               */
#define I2C_TIMERRL_T3RL_Pos              (24UL)                    /*!< I2C TIMERRL: T3RL (Bit 24)                            */
#define I2C_TIMERRL_T3RL_Msk              (0xff000000UL)            /*!< I2C TIMERRL: T3RL (Bitfield-Mask: 0xff)               */
/* ========================================================  SCONFIG  ======================================================== */
#define I2C_SCONFIG_SETUP_Pos             (0UL)                     /*!< I2C SCONFIG: SETUP (Bit 0)                            */
#define I2C_SCONFIG_SETUP_Msk             (0xfUL)                   /*!< I2C SCONFIG: SETUP (Bitfield-Mask: 0x0f)              */
#define I2C_SCONFIG_HOLD_Pos              (4UL)                     /*!< I2C SCONFIG: HOLD (Bit 4)                             */
#define I2C_SCONFIG_HOLD_Msk              (0xf0UL)                  /*!< I2C SCONFIG: HOLD (Bitfield-Mask: 0x0f)               */
#define I2C_SCONFIG_SCLL_Pos              (8UL)                     /*!< I2C SCONFIG: SCLL (Bit 8)                             */
#define I2C_SCONFIG_SCLL_Msk              (0xff00UL)                /*!< I2C SCONFIG: SCLL (Bitfield-Mask: 0xff)               */
#define I2C_SCONFIG_SCLLTIMER_Pos         (16UL)                    /*!< I2C SCONFIG: SCLLTIMER (Bit 16)                       */
#define I2C_SCONFIG_SCLLTIMER_Msk         (0xf0000UL)               /*!< I2C SCONFIG: SCLLTIMER (Bitfield-Mask: 0x0f)          */
/* ========================================================  I2CDMA  ========================================================= */
#define I2C_I2CDMA_DMALEN_Pos             (0UL)                     /*!< I2C I2CDMA: DMALEN (Bit 0)                            */
#define I2C_I2CDMA_DMALEN_Msk             (0xffUL)                  /*!< I2C I2CDMA: DMALEN (Bitfield-Mask: 0xff)              */
#define I2C_I2CDMA_DMAEN_Pos              (31UL)                    /*!< I2C I2CDMA: DMAEN (Bit 31)                            */
#define I2C_I2CDMA_DMAEN_Msk              (0x80000000UL)            /*!< I2C I2CDMA: DMAEN (Bitfield-Mask: 0x01)               */


/* =========================================================================================================================== */
/* ================                                           I2S_0                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  TXCONTROL  ======================================================= */
#define I2S_0_TXCONTROL_FSGEN_Pos         (0UL)                     /*!< I2S_0 TXCONTROL: FSGEN (Bit 0)                        */
#define I2S_0_TXCONTROL_FSGEN_Msk         (0x1UL)                   /*!< I2S_0 TXCONTROL: FSGEN (Bitfield-Mask: 0x01)          */
#define I2S_0_TXCONTROL_FSSEN_Pos         (1UL)                     /*!< I2S_0 TXCONTROL: FSSEN (Bit 1)                        */
#define I2S_0_TXCONTROL_FSSEN_Msk         (0x2UL)                   /*!< I2S_0 TXCONTROL: FSSEN (Bitfield-Mask: 0x01)          */
#define I2S_0_TXCONTROL_DDIS_Pos          (5UL)                     /*!< I2S_0 TXCONTROL: DDIS (Bit 5)                         */
#define I2S_0_TXCONTROL_DDIS_Msk          (0x20UL)                  /*!< I2S_0 TXCONTROL: DDIS (Bitfield-Mask: 0x01)           */
#define I2S_0_TXCONTROL_FSDEL_Pos         (6UL)                     /*!< I2S_0 TXCONTROL: FSDEL (Bit 6)                        */
#define I2S_0_TXCONTROL_FSDEL_Msk         (0x3fc0UL)                /*!< I2S_0 TXCONTROL: FSDEL (Bitfield-Mask: 0xff)          */
#define I2S_0_TXCONTROL_FSSRCSEL_Pos      (14UL)                    /*!< I2S_0 TXCONTROL: FSSRCSEL (Bit 14)                    */
#define I2S_0_TXCONTROL_FSSRCSEL_Msk      (0x4000UL)                /*!< I2S_0 TXCONTROL: FSSRCSEL (Bitfield-Mask: 0x01)       */
#define I2S_0_TXCONTROL_FILLSEL_Pos       (15UL)                    /*!< I2S_0 TXCONTROL: FILLSEL (Bit 15)                     */
#define I2S_0_TXCONTROL_FILLSEL_Msk       (0x18000UL)               /*!< I2S_0 TXCONTROL: FILLSEL (Bitfield-Mask: 0x03)        */
#define I2S_0_TXCONTROL_JSEL_Pos          (17UL)                    /*!< I2S_0 TXCONTROL: JSEL (Bit 17)                        */
#define I2S_0_TXCONTROL_JSEL_Msk          (0x20000UL)               /*!< I2S_0 TXCONTROL: JSEL (Bitfield-Mask: 0x01)           */
#define I2S_0_TXCONTROL_FSINVEN_Pos       (20UL)                    /*!< I2S_0 TXCONTROL: FSINVEN (Bit 20)                     */
#define I2S_0_TXCONTROL_FSINVEN_Msk       (0x100000UL)              /*!< I2S_0 TXCONTROL: FSINVEN (Bitfield-Mask: 0x01)        */
#define I2S_0_TXCONTROL_SCLKINVEN_Pos     (21UL)                    /*!< I2S_0 TXCONTROL: SCLKINVEN (Bit 21)                   */
#define I2S_0_TXCONTROL_SCLKINVEN_Msk     (0x200000UL)              /*!< I2S_0 TXCONTROL: SCLKINVEN (Bitfield-Mask: 0x01)      */
#define I2S_0_TXCONTROL_ORDER_Pos         (22UL)                    /*!< I2S_0 TXCONTROL: ORDER (Bit 22)                       */
#define I2S_0_TXCONTROL_ORDER_Msk         (0x400000UL)              /*!< I2S_0 TXCONTROL: ORDER (Bitfield-Mask: 0x01)          */
#define I2S_0_TXCONTROL_MBSEL_Pos         (24UL)                    /*!< I2S_0 TXCONTROL: MBSEL (Bit 24)                       */
#define I2S_0_TXCONTROL_MBSEL_Msk         (0x7000000UL)             /*!< I2S_0 TXCONTROL: MBSEL (Bitfield-Mask: 0x07)          */
#define I2S_0_TXCONTROL_TXEN_Pos          (29UL)                    /*!< I2S_0 TXCONTROL: TXEN (Bit 29)                        */
#define I2S_0_TXCONTROL_TXEN_Msk          (0x20000000UL)            /*!< I2S_0 TXCONTROL: TXEN (Bitfield-Mask: 0x01)           */
/* ========================================================  TXMODE  ========================================================= */
#define I2S_0_TXMODE_CYCLE_Pos            (0UL)                     /*!< I2S_0 TXMODE: CYCLE (Bit 0)                           */
#define I2S_0_TXMODE_CYCLE_Msk            (0xfffUL)                 /*!< I2S_0 TXMODE: CYCLE (Bitfield-Mask: 0xfff)            */
#define I2S_0_TXMODE_START_Pos            (12UL)                    /*!< I2S_0 TXMODE: START (Bit 12)                          */
#define I2S_0_TXMODE_START_Msk            (0xff000UL)               /*!< I2S_0 TXMODE: START (Bitfield-Mask: 0xff)             */
#define I2S_0_TXMODE_SLOTS_Pos            (20UL)                    /*!< I2S_0 TXMODE: SLOTS (Bit 20)                          */
#define I2S_0_TXMODE_SLOTS_Msk            (0x1f00000UL)             /*!< I2S_0 TXMODE: SLOTS (Bitfield-Mask: 0x1f)             */
#define I2S_0_TXMODE_DEDIS_Pos            (25UL)                    /*!< I2S_0 TXMODE: DEDIS (Bit 25)                          */
#define I2S_0_TXMODE_DEDIS_Msk            (0x2000000UL)             /*!< I2S_0 TXMODE: DEDIS (Bitfield-Mask: 0x01)             */
#define I2S_0_TXMODE_DIMD_Pos             (26UL)                    /*!< I2S_0 TXMODE: DIMD (Bit 26)                           */
#define I2S_0_TXMODE_DIMD_Msk             (0x4000000UL)             /*!< I2S_0 TXMODE: DIMD (Bitfield-Mask: 0x01)              */
#define I2S_0_TXMODE_TDMEN_Pos            (27UL)                    /*!< I2S_0 TXMODE: TDMEN (Bit 27)                          */
#define I2S_0_TXMODE_TDMEN_Msk            (0x8000000UL)             /*!< I2S_0 TXMODE: TDMEN (Bitfield-Mask: 0x01)             */
/* ========================================================  FSDUTY  ========================================================= */
#define I2S_0_FSDUTY_FSLOW_Pos            (0UL)                     /*!< I2S_0 FSDUTY: FSLOW (Bit 0)                           */
#define I2S_0_FSDUTY_FSLOW_Msk            (0xffffUL)                /*!< I2S_0 FSDUTY: FSLOW (Bitfield-Mask: 0xffff)           */
#define I2S_0_FSDUTY_FSHIGH_Pos           (16UL)                    /*!< I2S_0 FSDUTY: FSHIGH (Bit 16)                         */
#define I2S_0_FSDUTY_FSHIGH_Msk           (0xffff0000UL)            /*!< I2S_0 FSDUTY: FSHIGH (Bitfield-Mask: 0xffff)          */
/* =======================================================  RXCONTROL  ======================================================= */
#define I2S_0_RXCONTROL_FSDEL_Pos         (0UL)                     /*!< I2S_0 RXCONTROL: FSDEL (Bit 0)                        */
#define I2S_0_RXCONTROL_FSDEL_Msk         (0xffUL)                  /*!< I2S_0 RXCONTROL: FSDEL (Bitfield-Mask: 0xff)          */
#define I2S_0_RXCONTROL_JSEL_Pos          (8UL)                     /*!< I2S_0 RXCONTROL: JSEL (Bit 8)                         */
#define I2S_0_RXCONTROL_JSEL_Msk          (0x100UL)                 /*!< I2S_0 RXCONTROL: JSEL (Bitfield-Mask: 0x01)           */
#define I2S_0_RXCONTROL_DDIS_Pos          (9UL)                     /*!< I2S_0 RXCONTROL: DDIS (Bit 9)                         */
#define I2S_0_RXCONTROL_DDIS_Msk          (0x200UL)                 /*!< I2S_0 RXCONTROL: DDIS (Bitfield-Mask: 0x01)           */
#define I2S_0_RXCONTROL_FSINVEN_Pos       (11UL)                    /*!< I2S_0 RXCONTROL: FSINVEN (Bit 11)                     */
#define I2S_0_RXCONTROL_FSINVEN_Msk       (0x800UL)                 /*!< I2S_0 RXCONTROL: FSINVEN (Bitfield-Mask: 0x01)        */
#define I2S_0_RXCONTROL_SCLKINVEN_Pos     (12UL)                    /*!< I2S_0 RXCONTROL: SCLKINVEN (Bit 12)                   */
#define I2S_0_RXCONTROL_SCLKINVEN_Msk     (0x1000UL)                /*!< I2S_0 RXCONTROL: SCLKINVEN (Bitfield-Mask: 0x01)      */
#define I2S_0_RXCONTROL_ORDER_Pos         (13UL)                    /*!< I2S_0 RXCONTROL: ORDER (Bit 13)                       */
#define I2S_0_RXCONTROL_ORDER_Msk         (0x2000UL)                /*!< I2S_0 RXCONTROL: ORDER (Bitfield-Mask: 0x01)          */
#define I2S_0_RXCONTROL_MBSEL_Pos         (15UL)                    /*!< I2S_0 RXCONTROL: MBSEL (Bit 15)                       */
#define I2S_0_RXCONTROL_MBSEL_Msk         (0x38000UL)               /*!< I2S_0 RXCONTROL: MBSEL (Bitfield-Mask: 0x07)          */
#define I2S_0_RXCONTROL_FSSRCSEL_Pos      (20UL)                    /*!< I2S_0 RXCONTROL: FSSRCSEL (Bit 20)                    */
#define I2S_0_RXCONTROL_FSSRCSEL_Msk      (0x100000UL)              /*!< I2S_0 RXCONTROL: FSSRCSEL (Bitfield-Mask: 0x01)       */
#define I2S_0_RXCONTROL_RXEN_Pos          (21UL)                    /*!< I2S_0 RXCONTROL: RXEN (Bit 21)                        */
#define I2S_0_RXCONTROL_RXEN_Msk          (0x200000UL)              /*!< I2S_0 RXCONTROL: RXEN (Bitfield-Mask: 0x01)           */
/* ========================================================  RXMODE  ========================================================= */
#define I2S_0_RXMODE_CYCLE_Pos            (0UL)                     /*!< I2S_0 RXMODE: CYCLE (Bit 0)                           */
#define I2S_0_RXMODE_CYCLE_Msk            (0xfffUL)                 /*!< I2S_0 RXMODE: CYCLE (Bitfield-Mask: 0xfff)            */
#define I2S_0_RXMODE_START_Pos            (12UL)                    /*!< I2S_0 RXMODE: START (Bit 12)                          */
#define I2S_0_RXMODE_START_Msk            (0xff000UL)               /*!< I2S_0 RXMODE: START (Bitfield-Mask: 0xff)             */
#define I2S_0_RXMODE_SLOTS_Pos            (20UL)                    /*!< I2S_0 RXMODE: SLOTS (Bit 20)                          */
#define I2S_0_RXMODE_SLOTS_Msk            (0x3f00000UL)             /*!< I2S_0 RXMODE: SLOTS (Bitfield-Mask: 0x3f)             */
#define I2S_0_RXMODE_TDMEN_Pos            (27UL)                    /*!< I2S_0 RXMODE: TDMEN (Bit 27)                          */
#define I2S_0_RXMODE_TDMEN_Msk            (0x8000000UL)             /*!< I2S_0 RXMODE: TDMEN (Bitfield-Mask: 0x01)             */
/* ======================================================  CLKCONTROL  ======================================================= */
#define I2S_0_CLKCONTROL_INTDIV_Pos       (0UL)                     /*!< I2S_0 CLKCONTROL: INTDIV (Bit 0)                      */
#define I2S_0_CLKCONTROL_INTDIV_Msk       (0x3ffUL)                 /*!< I2S_0 CLKCONTROL: INTDIV (Bitfield-Mask: 0x3ff)       */
#define I2S_0_CLKCONTROL_FRACDIV_Pos      (10UL)                    /*!< I2S_0 CLKCONTROL: FRACDIV (Bit 10)                    */
#define I2S_0_CLKCONTROL_FRACDIV_Msk      (0x3fc00UL)               /*!< I2S_0 CLKCONTROL: FRACDIV (Bitfield-Mask: 0xff)       */
#define I2S_0_CLKCONTROL_DUTYMD_Pos       (18UL)                    /*!< I2S_0 CLKCONTROL: DUTYMD (Bit 18)                     */
#define I2S_0_CLKCONTROL_DUTYMD_Msk       (0x40000UL)               /*!< I2S_0 CLKCONTROL: DUTYMD (Bitfield-Mask: 0x01)        */
#define I2S_0_CLKCONTROL_CLKUPD_Pos       (19UL)                    /*!< I2S_0 CLKCONTROL: CLKUPD (Bit 19)                     */
#define I2S_0_CLKCONTROL_CLKUPD_Msk       (0x80000UL)               /*!< I2S_0 CLKCONTROL: CLKUPD (Bitfield-Mask: 0x01)        */
#define I2S_0_CLKCONTROL_DIVEN_Pos        (20UL)                    /*!< I2S_0 CLKCONTROL: DIVEN (Bit 20)                      */
#define I2S_0_CLKCONTROL_DIVEN_Msk        (0x100000UL)              /*!< I2S_0 CLKCONTROL: DIVEN (Bitfield-Mask: 0x01)         */
#define I2S_0_CLKCONTROL_TXCLKSEL_Pos     (21UL)                    /*!< I2S_0 CLKCONTROL: TXCLKSEL (Bit 21)                   */
#define I2S_0_CLKCONTROL_TXCLKSEL_Msk     (0x200000UL)              /*!< I2S_0 CLKCONTROL: TXCLKSEL (Bitfield-Mask: 0x01)      */
#define I2S_0_CLKCONTROL_RXCLKSEL_Pos     (22UL)                    /*!< I2S_0 CLKCONTROL: RXCLKSEL (Bit 22)                   */
#define I2S_0_CLKCONTROL_RXCLKSEL_Msk     (0x400000UL)              /*!< I2S_0 CLKCONTROL: RXCLKSEL (Bitfield-Mask: 0x01)      */
#define I2S_0_CLKCONTROL_RESET_Pos        (23UL)                    /*!< I2S_0 CLKCONTROL: RESET (Bit 23)                      */
#define I2S_0_CLKCONTROL_RESET_Msk        (0x800000UL)              /*!< I2S_0 CLKCONTROL: RESET (Bitfield-Mask: 0x01)         */
#define I2S_0_CLKCONTROL_RXCLKEN_Pos      (24UL)                    /*!< I2S_0 CLKCONTROL: RXCLKEN (Bit 24)                    */
#define I2S_0_CLKCONTROL_RXCLKEN_Msk      (0x1000000UL)             /*!< I2S_0 CLKCONTROL: RXCLKEN (Bitfield-Mask: 0x01)       */
#define I2S_0_CLKCONTROL_TXCLKEN_Pos      (25UL)                    /*!< I2S_0 CLKCONTROL: TXCLKEN (Bit 25)                    */
#define I2S_0_CLKCONTROL_TXCLKEN_Msk      (0x2000000UL)             /*!< I2S_0 CLKCONTROL: TXCLKEN (Bitfield-Mask: 0x01)       */
#define I2S_0_CLKCONTROL_RXSCLKMD_Pos     (26UL)                    /*!< I2S_0 CLKCONTROL: RXSCLKMD (Bit 26)                   */
#define I2S_0_CLKCONTROL_RXSCLKMD_Msk     (0x4000000UL)             /*!< I2S_0 CLKCONTROL: RXSCLKMD (Bitfield-Mask: 0x01)      */
#define I2S_0_CLKCONTROL_TXSCLKMD_Pos     (27UL)                    /*!< I2S_0 CLKCONTROL: TXSCLKMD (Bit 27)                   */
#define I2S_0_CLKCONTROL_TXSCLKMD_Msk     (0x8000000UL)             /*!< I2S_0 CLKCONTROL: TXSCLKMD (Bitfield-Mask: 0x01)      */
/* ========================================================  TXFIFO  ========================================================= */
#define I2S_0_TXFIFO_TXFIFO_Pos           (0UL)                     /*!< I2S_0 TXFIFO: TXFIFO (Bit 0)                          */
#define I2S_0_TXFIFO_TXFIFO_Msk           (0xffffffffUL)            /*!< I2S_0 TXFIFO: TXFIFO (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  RXFIFO  ========================================================= */
#define I2S_0_RXFIFO_RXFIFO_Pos           (0UL)                     /*!< I2S_0 RXFIFO: RXFIFO (Bit 0)                          */
#define I2S_0_RXFIFO_RXFIFO_Msk           (0xffffffffUL)            /*!< I2S_0 RXFIFO: RXFIFO (Bitfield-Mask: 0xffffffff)      */
/* ======================================================  FIFOSTATUS  ======================================================= */
#define I2S_0_FIFOSTATUS_TXFIFONUM_Pos    (0UL)                     /*!< I2S_0 FIFOSTATUS: TXFIFONUM (Bit 0)                   */
#define I2S_0_FIFOSTATUS_TXFIFONUM_Msk    (0xfUL)                   /*!< I2S_0 FIFOSTATUS: TXFIFONUM (Bitfield-Mask: 0x0f)     */
#define I2S_0_FIFOSTATUS_RXFIFONUM_Pos    (16UL)                    /*!< I2S_0 FIFOSTATUS: RXFIFONUM (Bit 16)                  */
#define I2S_0_FIFOSTATUS_RXFIFONUM_Msk    (0xf0000UL)               /*!< I2S_0 FIFOSTATUS: RXFIFONUM (Bitfield-Mask: 0x0f)     */
/* ======================================================  FIFOCONTROL  ====================================================== */
#define I2S_0_FIFOCONTROL_TXFIFOWM_Pos    (0UL)                     /*!< I2S_0 FIFOCONTROL: TXFIFOWM (Bit 0)                   */
#define I2S_0_FIFOCONTROL_TXFIFOWM_Msk    (0xfUL)                   /*!< I2S_0 FIFOCONTROL: TXFIFOWM (Bitfield-Mask: 0x0f)     */
#define I2S_0_FIFOCONTROL_RXFIFOWM_Pos    (16UL)                    /*!< I2S_0 FIFOCONTROL: RXFIFOWM (Bit 16)                  */
#define I2S_0_FIFOCONTROL_RXFIFOWM_Msk    (0xf0000UL)               /*!< I2S_0 FIFOCONTROL: RXFIFOWM (Bitfield-Mask: 0x0f)     */
#define I2S_0_FIFOCONTROL_TXFIFOFL_Pos    (21UL)                    /*!< I2S_0 FIFOCONTROL: TXFIFOFL (Bit 21)                  */
#define I2S_0_FIFOCONTROL_TXFIFOFL_Msk    (0x200000UL)              /*!< I2S_0 FIFOCONTROL: TXFIFOFL (Bitfield-Mask: 0x01)     */
#define I2S_0_FIFOCONTROL_RXFIFOFL_Pos    (22UL)                    /*!< I2S_0 FIFOCONTROL: RXFIFOFL (Bit 22)                  */
#define I2S_0_FIFOCONTROL_RXFIFOFL_Msk    (0x400000UL)              /*!< I2S_0 FIFOCONTROL: RXFIFOFL (Bitfield-Mask: 0x01)     */
/* ======================================================  INTCONTROL  ======================================================= */
#define I2S_0_INTCONTROL_TXUFIEN_Pos      (0UL)                     /*!< I2S_0 INTCONTROL: TXUFIEN (Bit 0)                     */
#define I2S_0_INTCONTROL_TXUFIEN_Msk      (0x1UL)                   /*!< I2S_0 INTCONTROL: TXUFIEN (Bitfield-Mask: 0x01)       */
#define I2S_0_INTCONTROL_RXOFIEN_Pos      (1UL)                     /*!< I2S_0 INTCONTROL: RXOFIEN (Bit 1)                     */
#define I2S_0_INTCONTROL_RXOFIEN_Msk      (0x2UL)                   /*!< I2S_0 INTCONTROL: RXOFIEN (Bitfield-Mask: 0x01)       */
#define I2S_0_INTCONTROL_TXLWMIEN_Pos     (2UL)                     /*!< I2S_0 INTCONTROL: TXLWMIEN (Bit 2)                    */
#define I2S_0_INTCONTROL_TXLWMIEN_Msk     (0x4UL)                   /*!< I2S_0 INTCONTROL: TXLWMIEN (Bitfield-Mask: 0x01)      */
#define I2S_0_INTCONTROL_RXHWMIEN_Pos     (3UL)                     /*!< I2S_0 INTCONTROL: RXHWMIEN (Bit 3)                    */
#define I2S_0_INTCONTROL_RXHWMIEN_Msk     (0x8UL)                   /*!< I2S_0 INTCONTROL: RXHWMIEN (Bitfield-Mask: 0x01)      */
/* ========================================================  STATUS  ========================================================= */
#define I2S_0_STATUS_TXUFI_Pos            (0UL)                     /*!< I2S_0 STATUS: TXUFI (Bit 0)                           */
#define I2S_0_STATUS_TXUFI_Msk            (0x1UL)                   /*!< I2S_0 STATUS: TXUFI (Bitfield-Mask: 0x01)             */
#define I2S_0_STATUS_RXOFI_Pos            (1UL)                     /*!< I2S_0 STATUS: RXOFI (Bit 1)                           */
#define I2S_0_STATUS_RXOFI_Msk            (0x2UL)                   /*!< I2S_0 STATUS: RXOFI (Bitfield-Mask: 0x01)             */
#define I2S_0_STATUS_TXLWMI_Pos           (2UL)                     /*!< I2S_0 STATUS: TXLWMI (Bit 2)                          */
#define I2S_0_STATUS_TXLWMI_Msk           (0x4UL)                   /*!< I2S_0 STATUS: TXLWMI (Bitfield-Mask: 0x01)            */
#define I2S_0_STATUS_RXHWMI_Pos           (3UL)                     /*!< I2S_0 STATUS: RXHWMI (Bit 3)                          */
#define I2S_0_STATUS_RXHWMI_Msk           (0x8UL)                   /*!< I2S_0 STATUS: RXHWMI (Bitfield-Mask: 0x01)            */
#define I2S_0_STATUS_CDBUSYF_Pos          (4UL)                     /*!< I2S_0 STATUS: CDBUSYF (Bit 4)                         */
#define I2S_0_STATUS_CDBUSYF_Msk          (0x10UL)                  /*!< I2S_0 STATUS: CDBUSYF (Bitfield-Mask: 0x01)           */
#define I2S_0_STATUS_CDSTS_Pos            (5UL)                     /*!< I2S_0 STATUS: CDSTS (Bit 5)                           */
#define I2S_0_STATUS_CDSTS_Msk            (0x20UL)                  /*!< I2S_0 STATUS: CDSTS (Bitfield-Mask: 0x01)             */
#define I2S_0_STATUS_TXCLKSELRF_Pos       (6UL)                     /*!< I2S_0 STATUS: TXCLKSELRF (Bit 6)                      */
#define I2S_0_STATUS_TXCLKSELRF_Msk       (0x40UL)                  /*!< I2S_0 STATUS: TXCLKSELRF (Bitfield-Mask: 0x01)        */
#define I2S_0_STATUS_RXCLKSELRF_Pos       (7UL)                     /*!< I2S_0 STATUS: RXCLKSELRF (Bit 7)                      */
#define I2S_0_STATUS_RXCLKSELRF_Msk       (0x80UL)                  /*!< I2S_0 STATUS: RXCLKSELRF (Bitfield-Mask: 0x01)        */
#define I2S_0_STATUS_TXCLKENRF_Pos        (8UL)                     /*!< I2S_0 STATUS: TXCLKENRF (Bit 8)                       */
#define I2S_0_STATUS_TXCLKENRF_Msk        (0x100UL)                 /*!< I2S_0 STATUS: TXCLKENRF (Bitfield-Mask: 0x01)         */
#define I2S_0_STATUS_RXCLKENRF_Pos        (9UL)                     /*!< I2S_0 STATUS: RXCLKENRF (Bit 9)                       */
#define I2S_0_STATUS_RXCLKENRF_Msk        (0x200UL)                 /*!< I2S_0 STATUS: RXCLKENRF (Bitfield-Mask: 0x01)         */
/* ======================================================  DMACONTROL  ======================================================= */
#define I2S_0_DMACONTROL_TXDMAEN_Pos      (0UL)                     /*!< I2S_0 DMACONTROL: TXDMAEN (Bit 0)                     */
#define I2S_0_DMACONTROL_TXDMAEN_Msk      (0x1UL)                   /*!< I2S_0 DMACONTROL: TXDMAEN (Bitfield-Mask: 0x01)       */
#define I2S_0_DMACONTROL_RXDMAEN_Pos      (1UL)                     /*!< I2S_0 DMACONTROL: RXDMAEN (Bit 1)                     */
#define I2S_0_DMACONTROL_RXDMAEN_Msk      (0x2UL)                   /*!< I2S_0 DMACONTROL: RXDMAEN (Bitfield-Mask: 0x01)       */
#define I2S_0_DMACONTROL_TXDMABMD_Pos     (2UL)                     /*!< I2S_0 DMACONTROL: TXDMABMD (Bit 2)                    */
#define I2S_0_DMACONTROL_TXDMABMD_Msk     (0x4UL)                   /*!< I2S_0 DMACONTROL: TXDMABMD (Bitfield-Mask: 0x01)      */
#define I2S_0_DMACONTROL_RXDMABMD_Pos     (3UL)                     /*!< I2S_0 DMACONTROL: RXDMABMD (Bit 3)                    */
#define I2S_0_DMACONTROL_RXDMABMD_Msk     (0x8UL)                   /*!< I2S_0 DMACONTROL: RXDMABMD (Bitfield-Mask: 0x01)      */
/* ======================================================  DBGCONTROL  ======================================================= */
#define I2S_0_DBGCONTROL_TXDBGHEN_Pos     (0UL)                     /*!< I2S_0 DBGCONTROL: TXDBGHEN (Bit 0)                    */
#define I2S_0_DBGCONTROL_TXDBGHEN_Msk     (0x1UL)                   /*!< I2S_0 DBGCONTROL: TXDBGHEN (Bitfield-Mask: 0x01)      */
#define I2S_0_DBGCONTROL_RXDBGHEN_Pos     (1UL)                     /*!< I2S_0 DBGCONTROL: RXDBGHEN (Bit 1)                    */
#define I2S_0_DBGCONTROL_RXDBGHEN_Msk     (0x2UL)                   /*!< I2S_0 DBGCONTROL: RXDBGHEN (Bitfield-Mask: 0x01)      */
#define I2S_0_DBGCONTROL_TXDBGMD_Pos      (2UL)                     /*!< I2S_0 DBGCONTROL: TXDBGMD (Bit 2)                     */
#define I2S_0_DBGCONTROL_TXDBGMD_Msk      (0x4UL)                   /*!< I2S_0 DBGCONTROL: TXDBGMD (Bitfield-Mask: 0x01)       */
#define I2S_0_DBGCONTROL_RXDBGMD_Pos      (3UL)                     /*!< I2S_0 DBGCONTROL: RXDBGMD (Bit 3)                     */
#define I2S_0_DBGCONTROL_RXDBGMD_Msk      (0x8UL)                   /*!< I2S_0 DBGCONTROL: RXDBGMD (Bitfield-Mask: 0x01)       */


/* =========================================================================================================================== */
/* ================                                          IDAC_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define IDAC_0_CONTROL_OUPDT_Pos          (0UL)                     /*!< IDAC_0 CONTROL: OUPDT (Bit 0)                         */
#define IDAC_0_CONTROL_OUPDT_Msk          (0x7UL)                   /*!< IDAC_0 CONTROL: OUPDT (Bitfield-Mask: 0x07)           */
#define IDAC_0_CONTROL_ETRIG_Pos          (3UL)                     /*!< IDAC_0 CONTROL: ETRIG (Bit 3)                         */
#define IDAC_0_CONTROL_ETRIG_Msk          (0x38UL)                  /*!< IDAC_0 CONTROL: ETRIG (Bitfield-Mask: 0x07)           */
#define IDAC_0_CONTROL_OUTMD_Pos          (6UL)                     /*!< IDAC_0 CONTROL: OUTMD (Bit 6)                         */
#define IDAC_0_CONTROL_OUTMD_Msk          (0xc0UL)                  /*!< IDAC_0 CONTROL: OUTMD (Bitfield-Mask: 0x03)           */
#define IDAC_0_CONTROL_INFMT_Pos          (8UL)                     /*!< IDAC_0 CONTROL: INFMT (Bit 8)                         */
#define IDAC_0_CONTROL_INFMT_Msk          (0x300UL)                 /*!< IDAC_0 CONTROL: INFMT (Bitfield-Mask: 0x03)           */
#define IDAC_0_CONTROL_DMARUN_Pos         (10UL)                    /*!< IDAC_0 CONTROL: DMARUN (Bit 10)                       */
#define IDAC_0_CONTROL_DMARUN_Msk         (0x400UL)                 /*!< IDAC_0 CONTROL: DMARUN (Bitfield-Mask: 0x01)          */
#define IDAC_0_CONTROL_JSEL_Pos           (11UL)                    /*!< IDAC_0 CONTROL: JSEL (Bit 11)                         */
#define IDAC_0_CONTROL_JSEL_Msk           (0x800UL)                 /*!< IDAC_0 CONTROL: JSEL (Bitfield-Mask: 0x01)            */
#define IDAC_0_CONTROL_BUFRESET_Pos       (12UL)                    /*!< IDAC_0 CONTROL: BUFRESET (Bit 12)                     */
#define IDAC_0_CONTROL_BUFRESET_Msk       (0x1000UL)                /*!< IDAC_0 CONTROL: BUFRESET (Bitfield-Mask: 0x01)        */
#define IDAC_0_CONTROL_TRIGINH_Pos        (13UL)                    /*!< IDAC_0 CONTROL: TRIGINH (Bit 13)                      */
#define IDAC_0_CONTROL_TRIGINH_Msk        (0x2000UL)                /*!< IDAC_0 CONTROL: TRIGINH (Bitfield-Mask: 0x01)         */
#define IDAC_0_CONTROL_WRAPEN_Pos         (16UL)                    /*!< IDAC_0 CONTROL: WRAPEN (Bit 16)                       */
#define IDAC_0_CONTROL_WRAPEN_Msk         (0x10000UL)               /*!< IDAC_0 CONTROL: WRAPEN (Bitfield-Mask: 0x01)          */
#define IDAC_0_CONTROL_ORIEN_Pos          (20UL)                    /*!< IDAC_0 CONTROL: ORIEN (Bit 20)                        */
#define IDAC_0_CONTROL_ORIEN_Msk          (0x100000UL)              /*!< IDAC_0 CONTROL: ORIEN (Bitfield-Mask: 0x01)           */
#define IDAC_0_CONTROL_URIEN_Pos          (21UL)                    /*!< IDAC_0 CONTROL: URIEN (Bit 21)                        */
#define IDAC_0_CONTROL_URIEN_Msk          (0x200000UL)              /*!< IDAC_0 CONTROL: URIEN (Bitfield-Mask: 0x01)           */
#define IDAC_0_CONTROL_WEIEN_Pos          (22UL)                    /*!< IDAC_0 CONTROL: WEIEN (Bit 22)                        */
#define IDAC_0_CONTROL_WEIEN_Msk          (0x400000UL)              /*!< IDAC_0 CONTROL: WEIEN (Bitfield-Mask: 0x01)           */
#define IDAC_0_CONTROL_DBGMD_Pos          (29UL)                    /*!< IDAC_0 CONTROL: DBGMD (Bit 29)                        */
#define IDAC_0_CONTROL_DBGMD_Msk          (0x20000000UL)            /*!< IDAC_0 CONTROL: DBGMD (Bitfield-Mask: 0x01)           */
#define IDAC_0_CONTROL_LOADEN_Pos         (30UL)                    /*!< IDAC_0 CONTROL: LOADEN (Bit 30)                       */
#define IDAC_0_CONTROL_LOADEN_Msk         (0x40000000UL)            /*!< IDAC_0 CONTROL: LOADEN (Bitfield-Mask: 0x01)          */
#define IDAC_0_CONTROL_IDACEN_Pos         (31UL)                    /*!< IDAC_0 CONTROL: IDACEN (Bit 31)                       */
#define IDAC_0_CONTROL_IDACEN_Msk         (0x80000000UL)            /*!< IDAC_0 CONTROL: IDACEN (Bitfield-Mask: 0x01)          */
/* =========================================================  DATA  ========================================================== */
#define IDAC_0_DATA_DATA_Pos              (0UL)                     /*!< IDAC_0 DATA: DATA (Bit 0)                             */
#define IDAC_0_DATA_DATA_Msk              (0xffffffffUL)            /*!< IDAC_0 DATA: DATA (Bitfield-Mask: 0xffffffff)         */
/* =======================================================  BUFSTATUS  ======================================================= */
#define IDAC_0_BUFSTATUS_LEVEL_Pos        (0UL)                     /*!< IDAC_0 BUFSTATUS: LEVEL (Bit 0)                       */
#define IDAC_0_BUFSTATUS_LEVEL_Msk        (0x7UL)                   /*!< IDAC_0 BUFSTATUS: LEVEL (Bitfield-Mask: 0x07)         */
#define IDAC_0_BUFSTATUS_ORI_Pos          (4UL)                     /*!< IDAC_0 BUFSTATUS: ORI (Bit 4)                         */
#define IDAC_0_BUFSTATUS_ORI_Msk          (0x10UL)                  /*!< IDAC_0 BUFSTATUS: ORI (Bitfield-Mask: 0x01)           */
#define IDAC_0_BUFSTATUS_URI_Pos          (5UL)                     /*!< IDAC_0 BUFSTATUS: URI (Bit 5)                         */
#define IDAC_0_BUFSTATUS_URI_Msk          (0x20UL)                  /*!< IDAC_0 BUFSTATUS: URI (Bitfield-Mask: 0x01)           */
#define IDAC_0_BUFSTATUS_WEI_Pos          (6UL)                     /*!< IDAC_0 BUFSTATUS: WEI (Bit 6)                         */
#define IDAC_0_BUFSTATUS_WEI_Msk          (0x40UL)                  /*!< IDAC_0 BUFSTATUS: WEI (Bitfield-Mask: 0x01)           */
/* =======================================================  BUFFER10  ======================================================== */
#define IDAC_0_BUFFER10_BUFFER0_Pos       (0UL)                     /*!< IDAC_0 BUFFER10: BUFFER0 (Bit 0)                      */
#define IDAC_0_BUFFER10_BUFFER0_Msk       (0xffffUL)                /*!< IDAC_0 BUFFER10: BUFFER0 (Bitfield-Mask: 0xffff)      */
#define IDAC_0_BUFFER10_BUFFER1_Pos       (16UL)                    /*!< IDAC_0 BUFFER10: BUFFER1 (Bit 16)                     */
#define IDAC_0_BUFFER10_BUFFER1_Msk       (0xffff0000UL)            /*!< IDAC_0 BUFFER10: BUFFER1 (Bitfield-Mask: 0xffff)      */
/* =======================================================  BUFFER32  ======================================================== */
#define IDAC_0_BUFFER32_BUFFER2_Pos       (0UL)                     /*!< IDAC_0 BUFFER32: BUFFER2 (Bit 0)                      */
#define IDAC_0_BUFFER32_BUFFER2_Msk       (0xffffUL)                /*!< IDAC_0 BUFFER32: BUFFER2 (Bitfield-Mask: 0xffff)      */
#define IDAC_0_BUFFER32_BUFFER3_Pos       (16UL)                    /*!< IDAC_0 BUFFER32: BUFFER3 (Bit 16)                     */
#define IDAC_0_BUFFER32_BUFFER3_Msk       (0xffff0000UL)            /*!< IDAC_0 BUFFER32: BUFFER3 (Bitfield-Mask: 0xffff)      */
/* ========================================================  GAINADJ  ======================================================== */
#define IDAC_0_GAINADJ_GAINADJ_Pos        (0UL)                     /*!< IDAC_0 GAINADJ: GAINADJ (Bit 0)                       */
#define IDAC_0_GAINADJ_GAINADJ_Msk        (0x1fUL)                  /*!< IDAC_0 GAINADJ: GAINADJ (Bitfield-Mask: 0x1f)         */


/* =========================================================================================================================== */
/* ================                                          IDAC_1                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define IDAC_1_CONTROL_OUPDT_Pos          (0UL)                     /*!< IDAC_1 CONTROL: OUPDT (Bit 0)                         */
#define IDAC_1_CONTROL_OUPDT_Msk          (0x7UL)                   /*!< IDAC_1 CONTROL: OUPDT (Bitfield-Mask: 0x07)           */
#define IDAC_1_CONTROL_ETRIG_Pos          (3UL)                     /*!< IDAC_1 CONTROL: ETRIG (Bit 3)                         */
#define IDAC_1_CONTROL_ETRIG_Msk          (0x38UL)                  /*!< IDAC_1 CONTROL: ETRIG (Bitfield-Mask: 0x07)           */
#define IDAC_1_CONTROL_OUTMD_Pos          (6UL)                     /*!< IDAC_1 CONTROL: OUTMD (Bit 6)                         */
#define IDAC_1_CONTROL_OUTMD_Msk          (0xc0UL)                  /*!< IDAC_1 CONTROL: OUTMD (Bitfield-Mask: 0x03)           */
#define IDAC_1_CONTROL_INFMT_Pos          (8UL)                     /*!< IDAC_1 CONTROL: INFMT (Bit 8)                         */
#define IDAC_1_CONTROL_INFMT_Msk          (0x300UL)                 /*!< IDAC_1 CONTROL: INFMT (Bitfield-Mask: 0x03)           */
#define IDAC_1_CONTROL_DMARUN_Pos         (10UL)                    /*!< IDAC_1 CONTROL: DMARUN (Bit 10)                       */
#define IDAC_1_CONTROL_DMARUN_Msk         (0x400UL)                 /*!< IDAC_1 CONTROL: DMARUN (Bitfield-Mask: 0x01)          */
#define IDAC_1_CONTROL_JSEL_Pos           (11UL)                    /*!< IDAC_1 CONTROL: JSEL (Bit 11)                         */
#define IDAC_1_CONTROL_JSEL_Msk           (0x800UL)                 /*!< IDAC_1 CONTROL: JSEL (Bitfield-Mask: 0x01)            */
#define IDAC_1_CONTROL_BUFRESET_Pos       (12UL)                    /*!< IDAC_1 CONTROL: BUFRESET (Bit 12)                     */
#define IDAC_1_CONTROL_BUFRESET_Msk       (0x1000UL)                /*!< IDAC_1 CONTROL: BUFRESET (Bitfield-Mask: 0x01)        */
#define IDAC_1_CONTROL_TRIGINH_Pos        (13UL)                    /*!< IDAC_1 CONTROL: TRIGINH (Bit 13)                      */
#define IDAC_1_CONTROL_TRIGINH_Msk        (0x2000UL)                /*!< IDAC_1 CONTROL: TRIGINH (Bitfield-Mask: 0x01)         */
#define IDAC_1_CONTROL_WRAPEN_Pos         (16UL)                    /*!< IDAC_1 CONTROL: WRAPEN (Bit 16)                       */
#define IDAC_1_CONTROL_WRAPEN_Msk         (0x10000UL)               /*!< IDAC_1 CONTROL: WRAPEN (Bitfield-Mask: 0x01)          */
#define IDAC_1_CONTROL_ORIEN_Pos          (20UL)                    /*!< IDAC_1 CONTROL: ORIEN (Bit 20)                        */
#define IDAC_1_CONTROL_ORIEN_Msk          (0x100000UL)              /*!< IDAC_1 CONTROL: ORIEN (Bitfield-Mask: 0x01)           */
#define IDAC_1_CONTROL_URIEN_Pos          (21UL)                    /*!< IDAC_1 CONTROL: URIEN (Bit 21)                        */
#define IDAC_1_CONTROL_URIEN_Msk          (0x200000UL)              /*!< IDAC_1 CONTROL: URIEN (Bitfield-Mask: 0x01)           */
#define IDAC_1_CONTROL_WEIEN_Pos          (22UL)                    /*!< IDAC_1 CONTROL: WEIEN (Bit 22)                        */
#define IDAC_1_CONTROL_WEIEN_Msk          (0x400000UL)              /*!< IDAC_1 CONTROL: WEIEN (Bitfield-Mask: 0x01)           */
#define IDAC_1_CONTROL_DBGMD_Pos          (29UL)                    /*!< IDAC_1 CONTROL: DBGMD (Bit 29)                        */
#define IDAC_1_CONTROL_DBGMD_Msk          (0x20000000UL)            /*!< IDAC_1 CONTROL: DBGMD (Bitfield-Mask: 0x01)           */
#define IDAC_1_CONTROL_LOADEN_Pos         (30UL)                    /*!< IDAC_1 CONTROL: LOADEN (Bit 30)                       */
#define IDAC_1_CONTROL_LOADEN_Msk         (0x40000000UL)            /*!< IDAC_1 CONTROL: LOADEN (Bitfield-Mask: 0x01)          */
#define IDAC_1_CONTROL_IDACEN_Pos         (31UL)                    /*!< IDAC_1 CONTROL: IDACEN (Bit 31)                       */
#define IDAC_1_CONTROL_IDACEN_Msk         (0x80000000UL)            /*!< IDAC_1 CONTROL: IDACEN (Bitfield-Mask: 0x01)          */
/* =========================================================  DATA  ========================================================== */
#define IDAC_1_DATA_DATA_Pos              (0UL)                     /*!< IDAC_1 DATA: DATA (Bit 0)                             */
#define IDAC_1_DATA_DATA_Msk              (0xffffffffUL)            /*!< IDAC_1 DATA: DATA (Bitfield-Mask: 0xffffffff)         */
/* =======================================================  BUFSTATUS  ======================================================= */
#define IDAC_1_BUFSTATUS_LEVEL_Pos        (0UL)                     /*!< IDAC_1 BUFSTATUS: LEVEL (Bit 0)                       */
#define IDAC_1_BUFSTATUS_LEVEL_Msk        (0x7UL)                   /*!< IDAC_1 BUFSTATUS: LEVEL (Bitfield-Mask: 0x07)         */
#define IDAC_1_BUFSTATUS_ORI_Pos          (4UL)                     /*!< IDAC_1 BUFSTATUS: ORI (Bit 4)                         */
#define IDAC_1_BUFSTATUS_ORI_Msk          (0x10UL)                  /*!< IDAC_1 BUFSTATUS: ORI (Bitfield-Mask: 0x01)           */
#define IDAC_1_BUFSTATUS_URI_Pos          (5UL)                     /*!< IDAC_1 BUFSTATUS: URI (Bit 5)                         */
#define IDAC_1_BUFSTATUS_URI_Msk          (0x20UL)                  /*!< IDAC_1 BUFSTATUS: URI (Bitfield-Mask: 0x01)           */
#define IDAC_1_BUFSTATUS_WEI_Pos          (6UL)                     /*!< IDAC_1 BUFSTATUS: WEI (Bit 6)                         */
#define IDAC_1_BUFSTATUS_WEI_Msk          (0x40UL)                  /*!< IDAC_1 BUFSTATUS: WEI (Bitfield-Mask: 0x01)           */
/* =======================================================  BUFFER10  ======================================================== */
#define IDAC_1_BUFFER10_BUFFER0_Pos       (0UL)                     /*!< IDAC_1 BUFFER10: BUFFER0 (Bit 0)                      */
#define IDAC_1_BUFFER10_BUFFER0_Msk       (0xffffUL)                /*!< IDAC_1 BUFFER10: BUFFER0 (Bitfield-Mask: 0xffff)      */
#define IDAC_1_BUFFER10_BUFFER1_Pos       (16UL)                    /*!< IDAC_1 BUFFER10: BUFFER1 (Bit 16)                     */
#define IDAC_1_BUFFER10_BUFFER1_Msk       (0xffff0000UL)            /*!< IDAC_1 BUFFER10: BUFFER1 (Bitfield-Mask: 0xffff)      */
/* =======================================================  BUFFER32  ======================================================== */
#define IDAC_1_BUFFER32_BUFFER2_Pos       (0UL)                     /*!< IDAC_1 BUFFER32: BUFFER2 (Bit 0)                      */
#define IDAC_1_BUFFER32_BUFFER2_Msk       (0xffffUL)                /*!< IDAC_1 BUFFER32: BUFFER2 (Bitfield-Mask: 0xffff)      */
#define IDAC_1_BUFFER32_BUFFER3_Pos       (16UL)                    /*!< IDAC_1 BUFFER32: BUFFER3 (Bit 16)                     */
#define IDAC_1_BUFFER32_BUFFER3_Msk       (0xffff0000UL)            /*!< IDAC_1 BUFFER32: BUFFER3 (Bitfield-Mask: 0xffff)      */
/* ========================================================  GAINADJ  ======================================================== */
#define IDAC_1_GAINADJ_GAINADJ_Pos        (0UL)                     /*!< IDAC_1 GAINADJ: GAINADJ (Bit 0)                       */
#define IDAC_1_GAINADJ_GAINADJ_Msk        (0x1fUL)                  /*!< IDAC_1 GAINADJ: GAINADJ (Bitfield-Mask: 0x1f)         */


/* =========================================================================================================================== */
/* ================                                           IVC_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define IVC_0_CONTROL_IN0RANGE_Pos        (0UL)                     /*!< IVC_0 CONTROL: IN0RANGE (Bit 0)                       */
#define IVC_0_CONTROL_IN0RANGE_Msk        (0x7UL)                   /*!< IVC_0 CONTROL: IN0RANGE (Bitfield-Mask: 0x07)         */
#define IVC_0_CONTROL_IN1RANGE_Pos        (4UL)                     /*!< IVC_0 CONTROL: IN1RANGE (Bit 4)                       */
#define IVC_0_CONTROL_IN1RANGE_Msk        (0x70UL)                  /*!< IVC_0 CONTROL: IN1RANGE (Bitfield-Mask: 0x07)         */
#define IVC_0_CONTROL_C0EN_Pos            (30UL)                    /*!< IVC_0 CONTROL: C0EN (Bit 30)                          */
#define IVC_0_CONTROL_C0EN_Msk            (0x40000000UL)            /*!< IVC_0 CONTROL: C0EN (Bitfield-Mask: 0x01)             */
#define IVC_0_CONTROL_C1EN_Pos            (31UL)                    /*!< IVC_0 CONTROL: C1EN (Bit 31)                          */
#define IVC_0_CONTROL_C1EN_Msk            (0x80000000UL)            /*!< IVC_0 CONTROL: C1EN (Bitfield-Mask: 0x01)             */


/* =========================================================================================================================== */
/* ================                                          LOCK_0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
#define LOCK_0_KEY_KEY_Pos                (0UL)                     /*!< LOCK_0 KEY: KEY (Bit 0)                               */
#define LOCK_0_KEY_KEY_Msk                (0xffUL)                  /*!< LOCK_0 KEY: KEY (Bitfield-Mask: 0xff)                 */
/* ======================================================  PERIPHLOCK0  ====================================================== */
#define LOCK_0_PERIPHLOCK0_USARTL_Pos     (0UL)                     /*!< LOCK_0 PERIPHLOCK0: USARTL (Bit 0)                    */
#define LOCK_0_PERIPHLOCK0_USARTL_Msk     (0x1UL)                   /*!< LOCK_0 PERIPHLOCK0: USARTL (Bitfield-Mask: 0x01)      */
#define LOCK_0_PERIPHLOCK0_SPIL_Pos       (1UL)                     /*!< LOCK_0 PERIPHLOCK0: SPIL (Bit 1)                      */
#define LOCK_0_PERIPHLOCK0_SPIL_Msk       (0x2UL)                   /*!< LOCK_0 PERIPHLOCK0: SPIL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_I2CL_Pos       (2UL)                     /*!< LOCK_0 PERIPHLOCK0: I2CL (Bit 2)                      */
#define LOCK_0_PERIPHLOCK0_I2CL_Msk       (0x4UL)                   /*!< LOCK_0 PERIPHLOCK0: I2CL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_PCAL_Pos       (3UL)                     /*!< LOCK_0 PERIPHLOCK0: PCAL (Bit 3)                      */
#define LOCK_0_PERIPHLOCK0_PCAL_Msk       (0x8UL)                   /*!< LOCK_0 PERIPHLOCK0: PCAL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_TIMERL_Pos     (4UL)                     /*!< LOCK_0 PERIPHLOCK0: TIMERL (Bit 4)                    */
#define LOCK_0_PERIPHLOCK0_TIMERL_Msk     (0x10UL)                  /*!< LOCK_0 PERIPHLOCK0: TIMERL (Bitfield-Mask: 0x01)      */
#define LOCK_0_PERIPHLOCK0_USBL_Pos       (5UL)                     /*!< LOCK_0 PERIPHLOCK0: USBL (Bit 5)                      */
#define LOCK_0_PERIPHLOCK0_USBL_Msk       (0x20UL)                  /*!< LOCK_0 PERIPHLOCK0: USBL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_SARADCL_Pos    (6UL)                     /*!< LOCK_0 PERIPHLOCK0: SARADCL (Bit 6)                   */
#define LOCK_0_PERIPHLOCK0_SARADCL_Msk    (0x40UL)                  /*!< LOCK_0 PERIPHLOCK0: SARADCL (Bitfield-Mask: 0x01)     */
#define LOCK_0_PERIPHLOCK0_SSGL_Pos       (7UL)                     /*!< LOCK_0 PERIPHLOCK0: SSGL (Bit 7)                      */
#define LOCK_0_PERIPHLOCK0_SSGL_Msk       (0x80UL)                  /*!< LOCK_0 PERIPHLOCK0: SSGL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_CMPL_Pos       (8UL)                     /*!< LOCK_0 PERIPHLOCK0: CMPL (Bit 8)                      */
#define LOCK_0_PERIPHLOCK0_CMPL_Msk       (0x100UL)                 /*!< LOCK_0 PERIPHLOCK0: CMPL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_CSL_Pos        (9UL)                     /*!< LOCK_0 PERIPHLOCK0: CSL (Bit 9)                       */
#define LOCK_0_PERIPHLOCK0_CSL_Msk        (0x200UL)                 /*!< LOCK_0 PERIPHLOCK0: CSL (Bitfield-Mask: 0x01)         */
#define LOCK_0_PERIPHLOCK0_EMIFL_Pos      (10UL)                    /*!< LOCK_0 PERIPHLOCK0: EMIFL (Bit 10)                    */
#define LOCK_0_PERIPHLOCK0_EMIFL_Msk      (0x400UL)                 /*!< LOCK_0 PERIPHLOCK0: EMIFL (Bitfield-Mask: 0x01)       */
#define LOCK_0_PERIPHLOCK0_AESL_Pos       (11UL)                    /*!< LOCK_0 PERIPHLOCK0: AESL (Bit 11)                     */
#define LOCK_0_PERIPHLOCK0_AESL_Msk       (0x800UL)                 /*!< LOCK_0 PERIPHLOCK0: AESL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_CRCL_Pos       (12UL)                    /*!< LOCK_0 PERIPHLOCK0: CRCL (Bit 12)                     */
#define LOCK_0_PERIPHLOCK0_CRCL_Msk       (0x1000UL)                /*!< LOCK_0 PERIPHLOCK0: CRCL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_RTCL_Pos       (13UL)                    /*!< LOCK_0 PERIPHLOCK0: RTCL (Bit 13)                     */
#define LOCK_0_PERIPHLOCK0_RTCL_Msk       (0x2000UL)                /*!< LOCK_0 PERIPHLOCK0: RTCL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_CLKRSTL_Pos    (14UL)                    /*!< LOCK_0 PERIPHLOCK0: CLKRSTL (Bit 14)                  */
#define LOCK_0_PERIPHLOCK0_CLKRSTL_Msk    (0x4000UL)                /*!< LOCK_0 PERIPHLOCK0: CLKRSTL (Bitfield-Mask: 0x01)     */
#define LOCK_0_PERIPHLOCK0_VMONL_Pos      (15UL)                    /*!< LOCK_0 PERIPHLOCK0: VMONL (Bit 15)                    */
#define LOCK_0_PERIPHLOCK0_VMONL_Msk      (0x8000UL)                /*!< LOCK_0 PERIPHLOCK0: VMONL (Bitfield-Mask: 0x01)       */
#define LOCK_0_PERIPHLOCK0_IDACL_Pos      (16UL)                    /*!< LOCK_0 PERIPHLOCK0: IDACL (Bit 16)                    */
#define LOCK_0_PERIPHLOCK0_IDACL_Msk      (0x10000UL)               /*!< LOCK_0 PERIPHLOCK0: IDACL (Bitfield-Mask: 0x01)       */
#define LOCK_0_PERIPHLOCK0_DMACTRLL_Pos   (17UL)                    /*!< LOCK_0 PERIPHLOCK0: DMACTRLL (Bit 17)                 */
#define LOCK_0_PERIPHLOCK0_DMACTRLL_Msk   (0x20000UL)               /*!< LOCK_0 PERIPHLOCK0: DMACTRLL (Bitfield-Mask: 0x01)    */
#define LOCK_0_PERIPHLOCK0_DMAXBARL_Pos   (18UL)                    /*!< LOCK_0 PERIPHLOCK0: DMAXBARL (Bit 18)                 */
#define LOCK_0_PERIPHLOCK0_DMAXBARL_Msk   (0x40000UL)               /*!< LOCK_0 PERIPHLOCK0: DMAXBARL (Bitfield-Mask: 0x01)    */
#define LOCK_0_PERIPHLOCK0_LPTL_Pos       (19UL)                    /*!< LOCK_0 PERIPHLOCK0: LPTL (Bit 19)                     */
#define LOCK_0_PERIPHLOCK0_LPTL_Msk       (0x80000UL)               /*!< LOCK_0 PERIPHLOCK0: LPTL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_VREFL_Pos      (20UL)                    /*!< LOCK_0 PERIPHLOCK0: VREFL (Bit 20)                    */
#define LOCK_0_PERIPHLOCK0_VREFL_Msk      (0x100000UL)              /*!< LOCK_0 PERIPHLOCK0: VREFL (Bitfield-Mask: 0x01)       */
#define LOCK_0_PERIPHLOCK0_I2SL_Pos       (21UL)                    /*!< LOCK_0 PERIPHLOCK0: I2SL (Bit 21)                     */
#define LOCK_0_PERIPHLOCK0_I2SL_Msk       (0x200000UL)              /*!< LOCK_0 PERIPHLOCK0: I2SL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_PLLL_Pos       (22UL)                    /*!< LOCK_0 PERIPHLOCK0: PLLL (Bit 22)                     */
#define LOCK_0_PERIPHLOCK0_PLLL_Msk       (0x400000UL)              /*!< LOCK_0 PERIPHLOCK0: PLLL (Bitfield-Mask: 0x01)        */
#define LOCK_0_PERIPHLOCK0_EXTOSCL_Pos    (23UL)                    /*!< LOCK_0 PERIPHLOCK0: EXTOSCL (Bit 23)                  */
#define LOCK_0_PERIPHLOCK0_EXTOSCL_Msk    (0x800000UL)              /*!< LOCK_0 PERIPHLOCK0: EXTOSCL (Bitfield-Mask: 0x01)     */
#define LOCK_0_PERIPHLOCK0_VREGL_Pos      (24UL)                    /*!< LOCK_0 PERIPHLOCK0: VREGL (Bit 24)                    */
#define LOCK_0_PERIPHLOCK0_VREGL_Msk      (0x1000000UL)             /*!< LOCK_0 PERIPHLOCK0: VREGL (Bitfield-Mask: 0x01)       */
#define LOCK_0_PERIPHLOCK0_LPOSCL_Pos     (25UL)                    /*!< LOCK_0 PERIPHLOCK0: LPOSCL (Bit 25)                   */
#define LOCK_0_PERIPHLOCK0_LPOSCL_Msk     (0x2000000UL)             /*!< LOCK_0 PERIPHLOCK0: LPOSCL (Bitfield-Mask: 0x01)      */
#define LOCK_0_PERIPHLOCK0_EVREGL_Pos     (26UL)                    /*!< LOCK_0 PERIPHLOCK0: EVREGL (Bit 26)                   */
#define LOCK_0_PERIPHLOCK0_EVREGL_Msk     (0x4000000UL)             /*!< LOCK_0 PERIPHLOCK0: EVREGL (Bitfield-Mask: 0x01)      */
#define LOCK_0_PERIPHLOCK0_IVCL_Pos       (28UL)                    /*!< LOCK_0 PERIPHLOCK0: IVCL (Bit 28)                     */
#define LOCK_0_PERIPHLOCK0_IVCL_Msk       (0x10000000UL)            /*!< LOCK_0 PERIPHLOCK0: IVCL (Bitfield-Mask: 0x01)        */
/* ======================================================  PERIPHLOCK1  ====================================================== */
#define LOCK_0_PERIPHLOCK1_PMUL_Pos       (0UL)                     /*!< LOCK_0 PERIPHLOCK1: PMUL (Bit 0)                      */
#define LOCK_0_PERIPHLOCK1_PMUL_Msk       (0x1UL)                   /*!< LOCK_0 PERIPHLOCK1: PMUL (Bitfield-Mask: 0x01)        */


/* =========================================================================================================================== */
/* ================                                         LPTIMER_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define LPTIMER_0_CONTROL_CMD_Pos         (0UL)                     /*!< LPTIMER_0 CONTROL: CMD (Bit 0)                        */
#define LPTIMER_0_CONTROL_CMD_Msk         (0x3UL)                   /*!< LPTIMER_0 CONTROL: CMD (Bitfield-Mask: 0x03)          */
#define LPTIMER_0_CONTROL_EXTSEL_Pos      (4UL)                     /*!< LPTIMER_0 CONTROL: EXTSEL (Bit 4)                     */
#define LPTIMER_0_CONTROL_EXTSEL_Msk      (0xf0UL)                  /*!< LPTIMER_0 CONTROL: EXTSEL (Bitfield-Mask: 0x0f)       */
#define LPTIMER_0_CONTROL_TMRSET_Pos      (8UL)                     /*!< LPTIMER_0 CONTROL: TMRSET (Bit 8)                     */
#define LPTIMER_0_CONTROL_TMRSET_Msk      (0x100UL)                 /*!< LPTIMER_0 CONTROL: TMRSET (Bitfield-Mask: 0x01)       */
#define LPTIMER_0_CONTROL_TMRCAP_Pos      (9UL)                     /*!< LPTIMER_0 CONTROL: TMRCAP (Bit 9)                     */
#define LPTIMER_0_CONTROL_TMRCAP_Msk      (0x200UL)                 /*!< LPTIMER_0 CONTROL: TMRCAP (Bitfield-Mask: 0x01)       */
#define LPTIMER_0_CONTROL_CMPSET_Pos      (10UL)                    /*!< LPTIMER_0 CONTROL: CMPSET (Bit 10)                    */
#define LPTIMER_0_CONTROL_CMPSET_Msk      (0x400UL)                 /*!< LPTIMER_0 CONTROL: CMPSET (Bitfield-Mask: 0x01)       */
#define LPTIMER_0_CONTROL_CMPCAP_Pos      (11UL)                    /*!< LPTIMER_0 CONTROL: CMPCAP (Bit 11)                    */
#define LPTIMER_0_CONTROL_CMPCAP_Msk      (0x800UL)                 /*!< LPTIMER_0 CONTROL: CMPCAP (Bitfield-Mask: 0x01)       */
#define LPTIMER_0_CONTROL_OVFIEN_Pos      (16UL)                    /*!< LPTIMER_0 CONTROL: OVFIEN (Bit 16)                    */
#define LPTIMER_0_CONTROL_OVFIEN_Msk      (0x10000UL)               /*!< LPTIMER_0 CONTROL: OVFIEN (Bitfield-Mask: 0x01)       */
#define LPTIMER_0_CONTROL_CMPIEN_Pos      (17UL)                    /*!< LPTIMER_0 CONTROL: CMPIEN (Bit 17)                    */
#define LPTIMER_0_CONTROL_CMPIEN_Msk      (0x20000UL)               /*!< LPTIMER_0 CONTROL: CMPIEN (Bitfield-Mask: 0x01)       */
#define LPTIMER_0_CONTROL_OVFTMD_Pos      (18UL)                    /*!< LPTIMER_0 CONTROL: OVFTMD (Bit 18)                    */
#define LPTIMER_0_CONTROL_OVFTMD_Msk      (0x40000UL)               /*!< LPTIMER_0 CONTROL: OVFTMD (Bitfield-Mask: 0x01)       */
#define LPTIMER_0_CONTROL_CMPTMD_Pos      (19UL)                    /*!< LPTIMER_0 CONTROL: CMPTMD (Bit 19)                    */
#define LPTIMER_0_CONTROL_CMPTMD_Msk      (0x80000UL)               /*!< LPTIMER_0 CONTROL: CMPTMD (Bitfield-Mask: 0x01)       */
#define LPTIMER_0_CONTROL_CMPRSTEN_Pos    (24UL)                    /*!< LPTIMER_0 CONTROL: CMPRSTEN (Bit 24)                  */
#define LPTIMER_0_CONTROL_CMPRSTEN_Msk    (0x1000000UL)             /*!< LPTIMER_0 CONTROL: CMPRSTEN (Bitfield-Mask: 0x01)     */
#define LPTIMER_0_CONTROL_DBGMD_Pos       (30UL)                    /*!< LPTIMER_0 CONTROL: DBGMD (Bit 30)                     */
#define LPTIMER_0_CONTROL_DBGMD_Msk       (0x40000000UL)            /*!< LPTIMER_0 CONTROL: DBGMD (Bitfield-Mask: 0x01)        */
#define LPTIMER_0_CONTROL_RUN_Pos         (31UL)                    /*!< LPTIMER_0 CONTROL: RUN (Bit 31)                       */
#define LPTIMER_0_CONTROL_RUN_Msk         (0x80000000UL)            /*!< LPTIMER_0 CONTROL: RUN (Bitfield-Mask: 0x01)          */
/* =========================================================  DATA  ========================================================== */
#define LPTIMER_0_DATA_DATA_Pos           (0UL)                     /*!< LPTIMER_0 DATA: DATA (Bit 0)                          */
#define LPTIMER_0_DATA_DATA_Msk           (0xffffUL)                /*!< LPTIMER_0 DATA: DATA (Bitfield-Mask: 0xffff)          */
/* ========================================================  STATUS  ========================================================= */
#define LPTIMER_0_STATUS_OVFI_Pos         (0UL)                     /*!< LPTIMER_0 STATUS: OVFI (Bit 0)                        */
#define LPTIMER_0_STATUS_OVFI_Msk         (0x1UL)                   /*!< LPTIMER_0 STATUS: OVFI (Bitfield-Mask: 0x01)          */
#define LPTIMER_0_STATUS_CMPI_Pos         (1UL)                     /*!< LPTIMER_0 STATUS: CMPI (Bit 1)                        */
#define LPTIMER_0_STATUS_CMPI_Msk         (0x2UL)                   /*!< LPTIMER_0 STATUS: CMPI (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                           PLL_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  DIVIDER  ======================================================== */
#define PLL_0_DIVIDER_M_Pos               (0UL)                     /*!< PLL_0 DIVIDER: M (Bit 0)                              */
#define PLL_0_DIVIDER_M_Msk               (0xfffUL)                 /*!< PLL_0 DIVIDER: M (Bitfield-Mask: 0xfff)               */
#define PLL_0_DIVIDER_N_Pos               (16UL)                    /*!< PLL_0 DIVIDER: N (Bit 16)                             */
#define PLL_0_DIVIDER_N_Msk               (0xfff0000UL)             /*!< PLL_0 DIVIDER: N (Bitfield-Mask: 0xfff)               */
/* ========================================================  CONTROL  ======================================================== */
#define PLL_0_CONTROL_LLMTF_Pos           (0UL)                     /*!< PLL_0 CONTROL: LLMTF (Bit 0)                          */
#define PLL_0_CONTROL_LLMTF_Msk           (0x1UL)                   /*!< PLL_0 CONTROL: LLMTF (Bitfield-Mask: 0x01)            */
#define PLL_0_CONTROL_HLMTF_Pos           (1UL)                     /*!< PLL_0 CONTROL: HLMTF (Bit 1)                          */
#define PLL_0_CONTROL_HLMTF_Msk           (0x2UL)                   /*!< PLL_0 CONTROL: HLMTF (Bitfield-Mask: 0x01)            */
#define PLL_0_CONTROL_LCKI_Pos            (2UL)                     /*!< PLL_0 CONTROL: LCKI (Bit 2)                           */
#define PLL_0_CONTROL_LCKI_Msk            (0x4UL)                   /*!< PLL_0 CONTROL: LCKI (Bitfield-Mask: 0x01)             */
#define PLL_0_CONTROL_LMTIEN_Pos          (9UL)                     /*!< PLL_0 CONTROL: LMTIEN (Bit 9)                         */
#define PLL_0_CONTROL_LMTIEN_Msk          (0x200UL)                 /*!< PLL_0 CONTROL: LMTIEN (Bitfield-Mask: 0x01)           */
#define PLL_0_CONTROL_LCKIEN_Pos          (10UL)                    /*!< PLL_0 CONTROL: LCKIEN (Bit 10)                        */
#define PLL_0_CONTROL_LCKIEN_Msk          (0x400UL)                 /*!< PLL_0 CONTROL: LCKIEN (Bitfield-Mask: 0x01)           */
#define PLL_0_CONTROL_LCKPOL_Pos          (11UL)                    /*!< PLL_0 CONTROL: LCKPOL (Bit 11)                        */
#define PLL_0_CONTROL_LCKPOL_Msk          (0x800UL)                 /*!< PLL_0 CONTROL: LCKPOL (Bitfield-Mask: 0x01)           */
#define PLL_0_CONTROL_REFSEL_Pos          (16UL)                    /*!< PLL_0 CONTROL: REFSEL (Bit 16)                        */
#define PLL_0_CONTROL_REFSEL_Msk          (0x30000UL)               /*!< PLL_0 CONTROL: REFSEL (Bitfield-Mask: 0x03)           */
#define PLL_0_CONTROL_LOCKTH_Pos          (20UL)                    /*!< PLL_0 CONTROL: LOCKTH (Bit 20)                        */
#define PLL_0_CONTROL_LOCKTH_Msk          (0x300000UL)              /*!< PLL_0 CONTROL: LOCKTH (Bitfield-Mask: 0x03)           */
#define PLL_0_CONTROL_STALL_Pos           (26UL)                    /*!< PLL_0 CONTROL: STALL (Bit 26)                         */
#define PLL_0_CONTROL_STALL_Msk           (0x4000000UL)             /*!< PLL_0 CONTROL: STALL (Bitfield-Mask: 0x01)            */
#define PLL_0_CONTROL_DITHEN_Pos          (28UL)                    /*!< PLL_0 CONTROL: DITHEN (Bit 28)                        */
#define PLL_0_CONTROL_DITHEN_Msk          (0x10000000UL)            /*!< PLL_0 CONTROL: DITHEN (Bitfield-Mask: 0x01)           */
#define PLL_0_CONTROL_EDGSEL_Pos          (29UL)                    /*!< PLL_0 CONTROL: EDGSEL (Bit 29)                        */
#define PLL_0_CONTROL_EDGSEL_Msk          (0x20000000UL)            /*!< PLL_0 CONTROL: EDGSEL (Bitfield-Mask: 0x01)           */
#define PLL_0_CONTROL_OUTMD_Pos           (30UL)                    /*!< PLL_0 CONTROL: OUTMD (Bit 30)                         */
#define PLL_0_CONTROL_OUTMD_Msk           (0xc0000000UL)            /*!< PLL_0 CONTROL: OUTMD (Bitfield-Mask: 0x03)            */
/* =========================================================  SSPR  ========================================================== */
#define PLL_0_SSPR_SSAMP_Pos              (0UL)                     /*!< PLL_0 SSPR: SSAMP (Bit 0)                             */
#define PLL_0_SSPR_SSAMP_Msk              (0x7UL)                   /*!< PLL_0 SSPR: SSAMP (Bitfield-Mask: 0x07)               */
#define PLL_0_SSPR_SSUINV_Pos             (8UL)                     /*!< PLL_0 SSPR: SSUINV (Bit 8)                            */
#define PLL_0_SSPR_SSUINV_Msk             (0x1f00UL)                /*!< PLL_0 SSPR: SSUINV (Bitfield-Mask: 0x1f)              */
/* =======================================================  CALCONFIG  ======================================================= */
#define PLL_0_CALCONFIG_DITHER_Pos        (0UL)                     /*!< PLL_0 CALCONFIG: DITHER (Bit 0)                       */
#define PLL_0_CALCONFIG_DITHER_Msk        (0xfUL)                   /*!< PLL_0 CALCONFIG: DITHER (Bitfield-Mask: 0x0f)         */
#define PLL_0_CALCONFIG_CAL_Pos           (4UL)                     /*!< PLL_0 CALCONFIG: CAL (Bit 4)                          */
#define PLL_0_CALCONFIG_CAL_Msk           (0xfff0UL)                /*!< PLL_0 CALCONFIG: CAL (Bitfield-Mask: 0xfff)           */
#define PLL_0_CALCONFIG_RANGE_Pos         (16UL)                    /*!< PLL_0 CALCONFIG: RANGE (Bit 16)                       */
#define PLL_0_CALCONFIG_RANGE_Msk         (0x70000UL)               /*!< PLL_0 CALCONFIG: RANGE (Bitfield-Mask: 0x07)          */


/* =========================================================================================================================== */
/* ================                                         EXTOSC_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define EXTOSC_0_CONTROL_FREQCN_Pos       (0UL)                     /*!< EXTOSC_0 CONTROL: FREQCN (Bit 0)                      */
#define EXTOSC_0_CONTROL_FREQCN_Msk       (0x7UL)                   /*!< EXTOSC_0 CONTROL: FREQCN (Bitfield-Mask: 0x07)        */
#define EXTOSC_0_CONTROL_OSCVLDF_Pos      (3UL)                     /*!< EXTOSC_0 CONTROL: OSCVLDF (Bit 3)                     */
#define EXTOSC_0_CONTROL_OSCVLDF_Msk      (0x8UL)                   /*!< EXTOSC_0 CONTROL: OSCVLDF (Bitfield-Mask: 0x01)       */
#define EXTOSC_0_CONTROL_OSCMD_Pos        (4UL)                     /*!< EXTOSC_0 CONTROL: OSCMD (Bit 4)                       */
#define EXTOSC_0_CONTROL_OSCMD_Msk        (0x70UL)                  /*!< EXTOSC_0 CONTROL: OSCMD (Bitfield-Mask: 0x07)         */


/* =========================================================================================================================== */
/* ================                                          LPOSC_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  OSCVAL  ========================================================= */
#define LPOSC_0_OSCVAL_OSCVAL_Pos         (0UL)                     /*!< LPOSC_0 OSCVAL: OSCVAL (Bit 0)                        */
#define LPOSC_0_OSCVAL_OSCVAL_Msk         (0xfUL)                   /*!< LPOSC_0 OSCVAL: OSCVAL (Bitfield-Mask: 0x0f)          */


/* =========================================================================================================================== */
/* ================                                           PCA_0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MODE  ========================================================== */
#define PCA_0_MODE_CLKDIV_Pos             (0UL)                     /*!< PCA_0 MODE: CLKDIV (Bit 0)                            */
#define PCA_0_MODE_CLKDIV_Msk             (0x3ffUL)                 /*!< PCA_0 MODE: CLKDIV (Bitfield-Mask: 0x3ff)             */
#define PCA_0_MODE_CLKSEL_Pos             (10UL)                    /*!< PCA_0 MODE: CLKSEL (Bit 10)                           */
#define PCA_0_MODE_CLKSEL_Msk             (0x1c00UL)                /*!< PCA_0 MODE: CLKSEL (Bitfield-Mask: 0x07)              */
/* ========================================================  CONTROL  ======================================================== */
#define PCA_0_CONTROL_OVFIEN_Pos          (0UL)                     /*!< PCA_0 CONTROL: OVFIEN (Bit 0)                         */
#define PCA_0_CONTROL_OVFIEN_Msk          (0x1UL)                   /*!< PCA_0 CONTROL: OVFIEN (Bitfield-Mask: 0x01)           */
#define PCA_0_CONTROL_DBGMD_Pos           (6UL)                     /*!< PCA_0 CONTROL: DBGMD (Bit 6)                          */
#define PCA_0_CONTROL_DBGMD_Msk           (0x40UL)                  /*!< PCA_0 CONTROL: DBGMD (Bitfield-Mask: 0x01)            */
#define PCA_0_CONTROL_DIVST_Pos           (21UL)                    /*!< PCA_0 CONTROL: DIVST (Bit 21)                         */
#define PCA_0_CONTROL_DIVST_Msk           (0x200000UL)              /*!< PCA_0 CONTROL: DIVST (Bitfield-Mask: 0x01)            */
#define PCA_0_CONTROL_DIV_Pos             (22UL)                    /*!< PCA_0 CONTROL: DIV (Bit 22)                           */
#define PCA_0_CONTROL_DIV_Msk             (0xffc00000UL)            /*!< PCA_0 CONTROL: DIV (Bitfield-Mask: 0x3ff)             */
/* ========================================================  STATUS  ========================================================= */
#define PCA_0_STATUS_C0CCI_Pos            (0UL)                     /*!< PCA_0 STATUS: C0CCI (Bit 0)                           */
#define PCA_0_STATUS_C0CCI_Msk            (0x1UL)                   /*!< PCA_0 STATUS: C0CCI (Bitfield-Mask: 0x01)             */
#define PCA_0_STATUS_C1CCI_Pos            (1UL)                     /*!< PCA_0 STATUS: C1CCI (Bit 1)                           */
#define PCA_0_STATUS_C1CCI_Msk            (0x2UL)                   /*!< PCA_0 STATUS: C1CCI (Bitfield-Mask: 0x01)             */
#define PCA_0_STATUS_RUN_Pos              (6UL)                     /*!< PCA_0 STATUS: RUN (Bit 6)                             */
#define PCA_0_STATUS_RUN_Msk              (0x40UL)                  /*!< PCA_0 STATUS: RUN (Bitfield-Mask: 0x01)               */
#define PCA_0_STATUS_OVFI_Pos             (7UL)                     /*!< PCA_0 STATUS: OVFI (Bit 7)                            */
#define PCA_0_STATUS_OVFI_Msk             (0x80UL)                  /*!< PCA_0 STATUS: OVFI (Bitfield-Mask: 0x01)              */
#define PCA_0_STATUS_C0IOVFI_Pos          (10UL)                    /*!< PCA_0 STATUS: C0IOVFI (Bit 10)                        */
#define PCA_0_STATUS_C0IOVFI_Msk          (0x400UL)                 /*!< PCA_0 STATUS: C0IOVFI (Bitfield-Mask: 0x01)           */
#define PCA_0_STATUS_C1IOVFI_Pos          (11UL)                    /*!< PCA_0 STATUS: C1IOVFI (Bit 11)                        */
#define PCA_0_STATUS_C1IOVFI_Msk          (0x800UL)                 /*!< PCA_0 STATUS: C1IOVFI (Bitfield-Mask: 0x01)           */
/* ========================================================  COUNTER  ======================================================== */
#define PCA_0_COUNTER_COUNTER_Pos         (0UL)                     /*!< PCA_0 COUNTER: COUNTER (Bit 0)                        */
#define PCA_0_COUNTER_COUNTER_Msk         (0xffffUL)                /*!< PCA_0 COUNTER: COUNTER (Bitfield-Mask: 0xffff)        */
/* =========================================================  LIMIT  ========================================================= */
#define PCA_0_LIMIT_LIMIT_Pos             (0UL)                     /*!< PCA_0 LIMIT: LIMIT (Bit 0)                            */
#define PCA_0_LIMIT_LIMIT_Msk             (0xffffUL)                /*!< PCA_0 LIMIT: LIMIT (Bitfield-Mask: 0xffff)            */
/* ========================================================  MODE_0  ========================================================= */
#define PCA_0_MODE_0_COSEL_Pos            (0UL)                     /*!< PCA_0 MODE_0: COSEL (Bit 0)                           */
#define PCA_0_MODE_0_COSEL_Msk            (0x3UL)                   /*!< PCA_0 MODE_0: COSEL (Bitfield-Mask: 0x03)             */
#define PCA_0_MODE_0_PWMMD_Pos            (2UL)                     /*!< PCA_0 MODE_0: PWMMD (Bit 2)                           */
#define PCA_0_MODE_0_PWMMD_Msk            (0x3cUL)                  /*!< PCA_0 MODE_0: PWMMD (Bitfield-Mask: 0x0f)             */
#define PCA_0_MODE_0_CMD_Pos              (8UL)                     /*!< PCA_0 MODE_0: CMD (Bit 8)                             */
#define PCA_0_MODE_0_CMD_Msk              (0x700UL)                 /*!< PCA_0 MODE_0: CMD (Bitfield-Mask: 0x07)               */
/* =======================================================  CONTROL_0  ======================================================= */
#define PCA_0_CONTROL_0_COUTST_Pos        (0UL)                     /*!< PCA_0 CONTROL_0: COUTST (Bit 0)                       */
#define PCA_0_CONTROL_0_COUTST_Msk        (0x1UL)                   /*!< PCA_0 CONTROL_0: COUTST (Bitfield-Mask: 0x01)         */
#define PCA_0_CONTROL_0_CPCAPEN_Pos       (1UL)                     /*!< PCA_0 CONTROL_0: CPCAPEN (Bit 1)                      */
#define PCA_0_CONTROL_0_CPCAPEN_Msk       (0x2UL)                   /*!< PCA_0 CONTROL_0: CPCAPEN (Bitfield-Mask: 0x01)        */
#define PCA_0_CONTROL_0_CNCAPEN_Pos       (2UL)                     /*!< PCA_0 CONTROL_0: CNCAPEN (Bit 2)                      */
#define PCA_0_CONTROL_0_CNCAPEN_Msk       (0x4UL)                   /*!< PCA_0 CONTROL_0: CNCAPEN (Bitfield-Mask: 0x01)        */
#define PCA_0_CONTROL_0_CUPDCF_Pos        (3UL)                     /*!< PCA_0 CONTROL_0: CUPDCF (Bit 3)                       */
#define PCA_0_CONTROL_0_CUPDCF_Msk        (0x8UL)                   /*!< PCA_0 CONTROL_0: CUPDCF (Bitfield-Mask: 0x01)         */
#define PCA_0_CONTROL_0_CCIEN_Pos         (8UL)                     /*!< PCA_0 CONTROL_0: CCIEN (Bit 8)                        */
#define PCA_0_CONTROL_0_CCIEN_Msk         (0x100UL)                 /*!< PCA_0 CONTROL_0: CCIEN (Bitfield-Mask: 0x01)          */
#define PCA_0_CONTROL_0_CIOVFIEN_Pos      (11UL)                    /*!< PCA_0 CONTROL_0: CIOVFIEN (Bit 11)                    */
#define PCA_0_CONTROL_0_CIOVFIEN_Msk      (0x800UL)                 /*!< PCA_0 CONTROL_0: CIOVFIEN (Bitfield-Mask: 0x01)       */
/* ========================================================  CCAPV_0  ======================================================== */
#define PCA_0_CCAPV_0_CCAPV_Pos           (0UL)                     /*!< PCA_0 CCAPV_0: CCAPV (Bit 0)                          */
#define PCA_0_CCAPV_0_CCAPV_Msk           (0x3ffffUL)               /*!< PCA_0 CCAPV_0: CCAPV (Bitfield-Mask: 0x3ffff)         */
/* ======================================================  CCAPVUPD_0  ======================================================= */
#define PCA_0_CCAPVUPD_0_CCAPVUPD_Pos     (0UL)                     /*!< PCA_0 CCAPVUPD_0: CCAPVUPD (Bit 0)                    */
#define PCA_0_CCAPVUPD_0_CCAPVUPD_Msk     (0x3ffffUL)               /*!< PCA_0 CCAPVUPD_0: CCAPVUPD (Bitfield-Mask: 0x3ffff)   */
/* ========================================================  MODE_1  ========================================================= */
#define PCA_0_MODE_1_COSEL_Pos            (0UL)                     /*!< PCA_0 MODE_1: COSEL (Bit 0)                           */
#define PCA_0_MODE_1_COSEL_Msk            (0x3UL)                   /*!< PCA_0 MODE_1: COSEL (Bitfield-Mask: 0x03)             */
#define PCA_0_MODE_1_PWMMD_Pos            (2UL)                     /*!< PCA_0 MODE_1: PWMMD (Bit 2)                           */
#define PCA_0_MODE_1_PWMMD_Msk            (0x3cUL)                  /*!< PCA_0 MODE_1: PWMMD (Bitfield-Mask: 0x0f)             */
#define PCA_0_MODE_1_CMD_Pos              (8UL)                     /*!< PCA_0 MODE_1: CMD (Bit 8)                             */
#define PCA_0_MODE_1_CMD_Msk              (0x700UL)                 /*!< PCA_0 MODE_1: CMD (Bitfield-Mask: 0x07)               */
/* =======================================================  CONTROL_1  ======================================================= */
#define PCA_0_CONTROL_1_COUTST_Pos        (0UL)                     /*!< PCA_0 CONTROL_1: COUTST (Bit 0)                       */
#define PCA_0_CONTROL_1_COUTST_Msk        (0x1UL)                   /*!< PCA_0 CONTROL_1: COUTST (Bitfield-Mask: 0x01)         */
#define PCA_0_CONTROL_1_CPCAPEN_Pos       (1UL)                     /*!< PCA_0 CONTROL_1: CPCAPEN (Bit 1)                      */
#define PCA_0_CONTROL_1_CPCAPEN_Msk       (0x2UL)                   /*!< PCA_0 CONTROL_1: CPCAPEN (Bitfield-Mask: 0x01)        */
#define PCA_0_CONTROL_1_CNCAPEN_Pos       (2UL)                     /*!< PCA_0 CONTROL_1: CNCAPEN (Bit 2)                      */
#define PCA_0_CONTROL_1_CNCAPEN_Msk       (0x4UL)                   /*!< PCA_0 CONTROL_1: CNCAPEN (Bitfield-Mask: 0x01)        */
#define PCA_0_CONTROL_1_CUPDCF_Pos        (3UL)                     /*!< PCA_0 CONTROL_1: CUPDCF (Bit 3)                       */
#define PCA_0_CONTROL_1_CUPDCF_Msk        (0x8UL)                   /*!< PCA_0 CONTROL_1: CUPDCF (Bitfield-Mask: 0x01)         */
#define PCA_0_CONTROL_1_CCIEN_Pos         (8UL)                     /*!< PCA_0 CONTROL_1: CCIEN (Bit 8)                        */
#define PCA_0_CONTROL_1_CCIEN_Msk         (0x100UL)                 /*!< PCA_0 CONTROL_1: CCIEN (Bitfield-Mask: 0x01)          */
#define PCA_0_CONTROL_1_CIOVFIEN_Pos      (11UL)                    /*!< PCA_0 CONTROL_1: CIOVFIEN (Bit 11)                    */
#define PCA_0_CONTROL_1_CIOVFIEN_Msk      (0x800UL)                 /*!< PCA_0 CONTROL_1: CIOVFIEN (Bitfield-Mask: 0x01)       */
/* ========================================================  CCAPV_1  ======================================================== */
#define PCA_0_CCAPV_1_CCAPV_Pos           (0UL)                     /*!< PCA_0 CCAPV_1: CCAPV (Bit 0)                          */
#define PCA_0_CCAPV_1_CCAPV_Msk           (0x3ffffUL)               /*!< PCA_0 CCAPV_1: CCAPV (Bitfield-Mask: 0x3ffff)         */
/* ======================================================  CCAPVUPD_1  ======================================================= */
#define PCA_0_CCAPVUPD_1_CCAPVUPD_Pos     (0UL)                     /*!< PCA_0 CCAPVUPD_1: CCAPVUPD (Bit 0)                    */
#define PCA_0_CCAPVUPD_1_CCAPVUPD_Msk     (0x3ffffUL)               /*!< PCA_0 CCAPVUPD_1: CCAPVUPD (Bitfield-Mask: 0x3ffff)   */


/* =========================================================================================================================== */
/* ================                                           PCA_1                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MODE  ========================================================== */
#define PCA_1_MODE_CLKDIV_Pos             (0UL)                     /*!< PCA_1 MODE: CLKDIV (Bit 0)                            */
#define PCA_1_MODE_CLKDIV_Msk             (0x3ffUL)                 /*!< PCA_1 MODE: CLKDIV (Bitfield-Mask: 0x3ff)             */
#define PCA_1_MODE_CLKSEL_Pos             (10UL)                    /*!< PCA_1 MODE: CLKSEL (Bit 10)                           */
#define PCA_1_MODE_CLKSEL_Msk             (0x1c00UL)                /*!< PCA_1 MODE: CLKSEL (Bitfield-Mask: 0x07)              */
/* ========================================================  CONTROL  ======================================================== */
#define PCA_1_CONTROL_OVFIEN_Pos          (0UL)                     /*!< PCA_1 CONTROL: OVFIEN (Bit 0)                         */
#define PCA_1_CONTROL_OVFIEN_Msk          (0x1UL)                   /*!< PCA_1 CONTROL: OVFIEN (Bitfield-Mask: 0x01)           */
#define PCA_1_CONTROL_DBGMD_Pos           (6UL)                     /*!< PCA_1 CONTROL: DBGMD (Bit 6)                          */
#define PCA_1_CONTROL_DBGMD_Msk           (0x40UL)                  /*!< PCA_1 CONTROL: DBGMD (Bitfield-Mask: 0x01)            */
#define PCA_1_CONTROL_DIVST_Pos           (21UL)                    /*!< PCA_1 CONTROL: DIVST (Bit 21)                         */
#define PCA_1_CONTROL_DIVST_Msk           (0x200000UL)              /*!< PCA_1 CONTROL: DIVST (Bitfield-Mask: 0x01)            */
#define PCA_1_CONTROL_DIV_Pos             (22UL)                    /*!< PCA_1 CONTROL: DIV (Bit 22)                           */
#define PCA_1_CONTROL_DIV_Msk             (0xffc00000UL)            /*!< PCA_1 CONTROL: DIV (Bitfield-Mask: 0x3ff)             */
/* ========================================================  STATUS  ========================================================= */
#define PCA_1_STATUS_C0CCI_Pos            (0UL)                     /*!< PCA_1 STATUS: C0CCI (Bit 0)                           */
#define PCA_1_STATUS_C0CCI_Msk            (0x1UL)                   /*!< PCA_1 STATUS: C0CCI (Bitfield-Mask: 0x01)             */
#define PCA_1_STATUS_C1CCI_Pos            (1UL)                     /*!< PCA_1 STATUS: C1CCI (Bit 1)                           */
#define PCA_1_STATUS_C1CCI_Msk            (0x2UL)                   /*!< PCA_1 STATUS: C1CCI (Bitfield-Mask: 0x01)             */
#define PCA_1_STATUS_RUN_Pos              (6UL)                     /*!< PCA_1 STATUS: RUN (Bit 6)                             */
#define PCA_1_STATUS_RUN_Msk              (0x40UL)                  /*!< PCA_1 STATUS: RUN (Bitfield-Mask: 0x01)               */
#define PCA_1_STATUS_OVFI_Pos             (7UL)                     /*!< PCA_1 STATUS: OVFI (Bit 7)                            */
#define PCA_1_STATUS_OVFI_Msk             (0x80UL)                  /*!< PCA_1 STATUS: OVFI (Bitfield-Mask: 0x01)              */
#define PCA_1_STATUS_C0IOVFI_Pos          (10UL)                    /*!< PCA_1 STATUS: C0IOVFI (Bit 10)                        */
#define PCA_1_STATUS_C0IOVFI_Msk          (0x400UL)                 /*!< PCA_1 STATUS: C0IOVFI (Bitfield-Mask: 0x01)           */
#define PCA_1_STATUS_C1IOVFI_Pos          (11UL)                    /*!< PCA_1 STATUS: C1IOVFI (Bit 11)                        */
#define PCA_1_STATUS_C1IOVFI_Msk          (0x800UL)                 /*!< PCA_1 STATUS: C1IOVFI (Bitfield-Mask: 0x01)           */
/* ========================================================  COUNTER  ======================================================== */
#define PCA_1_COUNTER_COUNTER_Pos         (0UL)                     /*!< PCA_1 COUNTER: COUNTER (Bit 0)                        */
#define PCA_1_COUNTER_COUNTER_Msk         (0xffffUL)                /*!< PCA_1 COUNTER: COUNTER (Bitfield-Mask: 0xffff)        */
/* =========================================================  LIMIT  ========================================================= */
#define PCA_1_LIMIT_LIMIT_Pos             (0UL)                     /*!< PCA_1 LIMIT: LIMIT (Bit 0)                            */
#define PCA_1_LIMIT_LIMIT_Msk             (0xffffUL)                /*!< PCA_1 LIMIT: LIMIT (Bitfield-Mask: 0xffff)            */
/* ========================================================  MODE_0  ========================================================= */
#define PCA_1_MODE_0_COSEL_Pos            (0UL)                     /*!< PCA_1 MODE_0: COSEL (Bit 0)                           */
#define PCA_1_MODE_0_COSEL_Msk            (0x3UL)                   /*!< PCA_1 MODE_0: COSEL (Bitfield-Mask: 0x03)             */
#define PCA_1_MODE_0_PWMMD_Pos            (2UL)                     /*!< PCA_1 MODE_0: PWMMD (Bit 2)                           */
#define PCA_1_MODE_0_PWMMD_Msk            (0x3cUL)                  /*!< PCA_1 MODE_0: PWMMD (Bitfield-Mask: 0x0f)             */
#define PCA_1_MODE_0_CMD_Pos              (8UL)                     /*!< PCA_1 MODE_0: CMD (Bit 8)                             */
#define PCA_1_MODE_0_CMD_Msk              (0x700UL)                 /*!< PCA_1 MODE_0: CMD (Bitfield-Mask: 0x07)               */
/* =======================================================  CONTROL_0  ======================================================= */
#define PCA_1_CONTROL_0_COUTST_Pos        (0UL)                     /*!< PCA_1 CONTROL_0: COUTST (Bit 0)                       */
#define PCA_1_CONTROL_0_COUTST_Msk        (0x1UL)                   /*!< PCA_1 CONTROL_0: COUTST (Bitfield-Mask: 0x01)         */
#define PCA_1_CONTROL_0_CPCAPEN_Pos       (1UL)                     /*!< PCA_1 CONTROL_0: CPCAPEN (Bit 1)                      */
#define PCA_1_CONTROL_0_CPCAPEN_Msk       (0x2UL)                   /*!< PCA_1 CONTROL_0: CPCAPEN (Bitfield-Mask: 0x01)        */
#define PCA_1_CONTROL_0_CNCAPEN_Pos       (2UL)                     /*!< PCA_1 CONTROL_0: CNCAPEN (Bit 2)                      */
#define PCA_1_CONTROL_0_CNCAPEN_Msk       (0x4UL)                   /*!< PCA_1 CONTROL_0: CNCAPEN (Bitfield-Mask: 0x01)        */
#define PCA_1_CONTROL_0_CUPDCF_Pos        (3UL)                     /*!< PCA_1 CONTROL_0: CUPDCF (Bit 3)                       */
#define PCA_1_CONTROL_0_CUPDCF_Msk        (0x8UL)                   /*!< PCA_1 CONTROL_0: CUPDCF (Bitfield-Mask: 0x01)         */
#define PCA_1_CONTROL_0_CCIEN_Pos         (8UL)                     /*!< PCA_1 CONTROL_0: CCIEN (Bit 8)                        */
#define PCA_1_CONTROL_0_CCIEN_Msk         (0x100UL)                 /*!< PCA_1 CONTROL_0: CCIEN (Bitfield-Mask: 0x01)          */
#define PCA_1_CONTROL_0_CIOVFIEN_Pos      (11UL)                    /*!< PCA_1 CONTROL_0: CIOVFIEN (Bit 11)                    */
#define PCA_1_CONTROL_0_CIOVFIEN_Msk      (0x800UL)                 /*!< PCA_1 CONTROL_0: CIOVFIEN (Bitfield-Mask: 0x01)       */
/* ========================================================  CCAPV_0  ======================================================== */
#define PCA_1_CCAPV_0_CCAPV_Pos           (0UL)                     /*!< PCA_1 CCAPV_0: CCAPV (Bit 0)                          */
#define PCA_1_CCAPV_0_CCAPV_Msk           (0x3ffffUL)               /*!< PCA_1 CCAPV_0: CCAPV (Bitfield-Mask: 0x3ffff)         */
/* ======================================================  CCAPVUPD_0  ======================================================= */
#define PCA_1_CCAPVUPD_0_CCAPVUPD_Pos     (0UL)                     /*!< PCA_1 CCAPVUPD_0: CCAPVUPD (Bit 0)                    */
#define PCA_1_CCAPVUPD_0_CCAPVUPD_Msk     (0x3ffffUL)               /*!< PCA_1 CCAPVUPD_0: CCAPVUPD (Bitfield-Mask: 0x3ffff)   */
/* ========================================================  MODE_1  ========================================================= */
#define PCA_1_MODE_1_COSEL_Pos            (0UL)                     /*!< PCA_1 MODE_1: COSEL (Bit 0)                           */
#define PCA_1_MODE_1_COSEL_Msk            (0x3UL)                   /*!< PCA_1 MODE_1: COSEL (Bitfield-Mask: 0x03)             */
#define PCA_1_MODE_1_PWMMD_Pos            (2UL)                     /*!< PCA_1 MODE_1: PWMMD (Bit 2)                           */
#define PCA_1_MODE_1_PWMMD_Msk            (0x3cUL)                  /*!< PCA_1 MODE_1: PWMMD (Bitfield-Mask: 0x0f)             */
#define PCA_1_MODE_1_CMD_Pos              (8UL)                     /*!< PCA_1 MODE_1: CMD (Bit 8)                             */
#define PCA_1_MODE_1_CMD_Msk              (0x700UL)                 /*!< PCA_1 MODE_1: CMD (Bitfield-Mask: 0x07)               */
/* =======================================================  CONTROL_1  ======================================================= */
#define PCA_1_CONTROL_1_COUTST_Pos        (0UL)                     /*!< PCA_1 CONTROL_1: COUTST (Bit 0)                       */
#define PCA_1_CONTROL_1_COUTST_Msk        (0x1UL)                   /*!< PCA_1 CONTROL_1: COUTST (Bitfield-Mask: 0x01)         */
#define PCA_1_CONTROL_1_CPCAPEN_Pos       (1UL)                     /*!< PCA_1 CONTROL_1: CPCAPEN (Bit 1)                      */
#define PCA_1_CONTROL_1_CPCAPEN_Msk       (0x2UL)                   /*!< PCA_1 CONTROL_1: CPCAPEN (Bitfield-Mask: 0x01)        */
#define PCA_1_CONTROL_1_CNCAPEN_Pos       (2UL)                     /*!< PCA_1 CONTROL_1: CNCAPEN (Bit 2)                      */
#define PCA_1_CONTROL_1_CNCAPEN_Msk       (0x4UL)                   /*!< PCA_1 CONTROL_1: CNCAPEN (Bitfield-Mask: 0x01)        */
#define PCA_1_CONTROL_1_CUPDCF_Pos        (3UL)                     /*!< PCA_1 CONTROL_1: CUPDCF (Bit 3)                       */
#define PCA_1_CONTROL_1_CUPDCF_Msk        (0x8UL)                   /*!< PCA_1 CONTROL_1: CUPDCF (Bitfield-Mask: 0x01)         */
#define PCA_1_CONTROL_1_CCIEN_Pos         (8UL)                     /*!< PCA_1 CONTROL_1: CCIEN (Bit 8)                        */
#define PCA_1_CONTROL_1_CCIEN_Msk         (0x100UL)                 /*!< PCA_1 CONTROL_1: CCIEN (Bitfield-Mask: 0x01)          */
#define PCA_1_CONTROL_1_CIOVFIEN_Pos      (11UL)                    /*!< PCA_1 CONTROL_1: CIOVFIEN (Bit 11)                    */
#define PCA_1_CONTROL_1_CIOVFIEN_Msk      (0x800UL)                 /*!< PCA_1 CONTROL_1: CIOVFIEN (Bitfield-Mask: 0x01)       */
/* ========================================================  CCAPV_1  ======================================================== */
#define PCA_1_CCAPV_1_CCAPV_Pos           (0UL)                     /*!< PCA_1 CCAPV_1: CCAPV (Bit 0)                          */
#define PCA_1_CCAPV_1_CCAPV_Msk           (0x3ffffUL)               /*!< PCA_1 CCAPV_1: CCAPV (Bitfield-Mask: 0x3ffff)         */
/* ======================================================  CCAPVUPD_1  ======================================================= */
#define PCA_1_CCAPVUPD_1_CCAPVUPD_Pos     (0UL)                     /*!< PCA_1 CCAPVUPD_1: CCAPVUPD (Bit 0)                    */
#define PCA_1_CCAPVUPD_1_CCAPVUPD_Msk     (0x3ffffUL)               /*!< PCA_1 CCAPVUPD_1: CCAPVUPD (Bitfield-Mask: 0x3ffff)   */


/* =========================================================================================================================== */
/* ================                                           PMU_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define PMU_0_CONTROL_WAKECLR_Pos         (0UL)                     /*!< PMU_0 CONTROL: WAKECLR (Bit 0)                        */
#define PMU_0_CONTROL_WAKECLR_Msk         (0x1UL)                   /*!< PMU_0 CONTROL: WAKECLR (Bitfield-Mask: 0x01)          */
#define PMU_0_CONTROL_PERILPEN_Pos        (1UL)                     /*!< PMU_0 CONTROL: PERILPEN (Bit 1)                       */
#define PMU_0_CONTROL_PERILPEN_Msk        (0x2UL)                   /*!< PMU_0 CONTROL: PERILPEN (Bitfield-Mask: 0x01)         */
#define PMU_0_CONTROL_PINLPEN_Pos         (2UL)                     /*!< PMU_0 CONTROL: PINLPEN (Bit 2)                        */
#define PMU_0_CONTROL_PINLPEN_Msk         (0x4UL)                   /*!< PMU_0 CONTROL: PINLPEN (Bitfield-Mask: 0x01)          */
#define PMU_0_CONTROL_PWAKEEN_Pos         (3UL)                     /*!< PMU_0 CONTROL: PWAKEEN (Bit 3)                        */
#define PMU_0_CONTROL_PWAKEEN_Msk         (0x8UL)                   /*!< PMU_0 CONTROL: PWAKEEN (Bitfield-Mask: 0x01)          */
#define PMU_0_CONTROL_PMUASLPEN_Pos       (4UL)                     /*!< PMU_0 CONTROL: PMUASLPEN (Bit 4)                      */
#define PMU_0_CONTROL_PMUASLPEN_Msk       (0x10UL)                  /*!< PMU_0 CONTROL: PMUASLPEN (Bitfield-Mask: 0x01)        */
/* ========================================================  CONFIG  ========================================================= */
#define PMU_0_CONFIG_RTC0FREN_Pos         (8UL)                     /*!< PMU_0 CONFIG: RTC0FREN (Bit 8)                        */
#define PMU_0_CONFIG_RTC0FREN_Msk         (0x100UL)                 /*!< PMU_0 CONFIG: RTC0FREN (Bitfield-Mask: 0x01)          */
#define PMU_0_CONFIG_RTC0AREN_Pos         (9UL)                     /*!< PMU_0 CONFIG: RTC0AREN (Bit 9)                        */
#define PMU_0_CONFIG_RTC0AREN_Msk         (0x200UL)                 /*!< PMU_0 CONFIG: RTC0AREN (Bitfield-Mask: 0x01)          */
#define PMU_0_CONFIG_CMP0REN_Pos          (13UL)                    /*!< PMU_0 CONFIG: CMP0REN (Bit 13)                        */
#define PMU_0_CONFIG_CMP0REN_Msk          (0x2000UL)                /*!< PMU_0 CONFIG: CMP0REN (Bitfield-Mask: 0x01)           */
#define PMU_0_CONFIG_PWAKEREN_Pos         (14UL)                    /*!< PMU_0 CONFIG: PWAKEREN (Bit 14)                       */
#define PMU_0_CONFIG_PWAKEREN_Msk         (0x4000UL)                /*!< PMU_0 CONFIG: PWAKEREN (Bitfield-Mask: 0x01)          */
#define PMU_0_CONFIG_LPT0REN_Pos          (15UL)                    /*!< PMU_0 CONFIG: LPT0REN (Bit 15)                        */
#define PMU_0_CONFIG_LPT0REN_Msk          (0x8000UL)                /*!< PMU_0 CONFIG: LPT0REN (Bitfield-Mask: 0x01)           */
/* ========================================================  STATUS  ========================================================= */
#define PMU_0_STATUS_PM9EF_Pos            (0UL)                     /*!< PMU_0 STATUS: PM9EF (Bit 0)                           */
#define PMU_0_STATUS_PM9EF_Msk            (0x1UL)                   /*!< PMU_0 STATUS: PM9EF (Bitfield-Mask: 0x01)             */
#define PMU_0_STATUS_PWAKEF_Pos           (1UL)                     /*!< PMU_0 STATUS: PWAKEF (Bit 1)                          */
#define PMU_0_STATUS_PWAKEF_Msk           (0x2UL)                   /*!< PMU_0 STATUS: PWAKEF (Bitfield-Mask: 0x01)            */
#define PMU_0_STATUS_PORF_Pos             (2UL)                     /*!< PMU_0 STATUS: PORF (Bit 2)                            */
#define PMU_0_STATUS_PORF_Msk             (0x4UL)                   /*!< PMU_0 STATUS: PORF (Bitfield-Mask: 0x01)              */
/* ========================================================  WAKEEN  ========================================================= */
#define PMU_0_WAKEEN_RTC0FWEN_Pos         (0UL)                     /*!< PMU_0 WAKEEN: RTC0FWEN (Bit 0)                        */
#define PMU_0_WAKEEN_RTC0FWEN_Msk         (0x1UL)                   /*!< PMU_0 WAKEEN: RTC0FWEN (Bitfield-Mask: 0x01)          */
#define PMU_0_WAKEEN_RTC0AWEN_Pos         (1UL)                     /*!< PMU_0 WAKEEN: RTC0AWEN (Bit 1)                        */
#define PMU_0_WAKEEN_RTC0AWEN_Msk         (0x2UL)                   /*!< PMU_0 WAKEEN: RTC0AWEN (Bitfield-Mask: 0x01)          */
#define PMU_0_WAKEEN_CMP0WEN_Pos          (5UL)                     /*!< PMU_0 WAKEEN: CMP0WEN (Bit 5)                         */
#define PMU_0_WAKEEN_CMP0WEN_Msk          (0x20UL)                  /*!< PMU_0 WAKEEN: CMP0WEN (Bitfield-Mask: 0x01)           */
#define PMU_0_WAKEEN_PWAKEWEN_Pos         (6UL)                     /*!< PMU_0 WAKEEN: PWAKEWEN (Bit 6)                        */
#define PMU_0_WAKEEN_PWAKEWEN_Msk         (0x40UL)                  /*!< PMU_0 WAKEEN: PWAKEWEN (Bitfield-Mask: 0x01)          */
#define PMU_0_WAKEEN_LPT0WEN_Pos          (7UL)                     /*!< PMU_0 WAKEEN: LPT0WEN (Bit 7)                         */
#define PMU_0_WAKEEN_LPT0WEN_Msk          (0x80UL)                  /*!< PMU_0 WAKEEN: LPT0WEN (Bitfield-Mask: 0x01)           */
#define PMU_0_WAKEEN_RSTWEN_Pos           (8UL)                     /*!< PMU_0 WAKEEN: RSTWEN (Bit 8)                          */
#define PMU_0_WAKEEN_RSTWEN_Msk           (0x100UL)                 /*!< PMU_0 WAKEEN: RSTWEN (Bitfield-Mask: 0x01)            */
/* ======================================================  WAKESTATUS  ======================================================= */
#define PMU_0_WAKESTATUS_RTC0FWF_Pos      (0UL)                     /*!< PMU_0 WAKESTATUS: RTC0FWF (Bit 0)                     */
#define PMU_0_WAKESTATUS_RTC0FWF_Msk      (0x1UL)                   /*!< PMU_0 WAKESTATUS: RTC0FWF (Bitfield-Mask: 0x01)       */
#define PMU_0_WAKESTATUS_RTC0AWF_Pos      (1UL)                     /*!< PMU_0 WAKESTATUS: RTC0AWF (Bit 1)                     */
#define PMU_0_WAKESTATUS_RTC0AWF_Msk      (0x2UL)                   /*!< PMU_0 WAKESTATUS: RTC0AWF (Bitfield-Mask: 0x01)       */
#define PMU_0_WAKESTATUS_CMP0WF_Pos       (5UL)                     /*!< PMU_0 WAKESTATUS: CMP0WF (Bit 5)                      */
#define PMU_0_WAKESTATUS_CMP0WF_Msk       (0x20UL)                  /*!< PMU_0 WAKESTATUS: CMP0WF (Bitfield-Mask: 0x01)        */
#define PMU_0_WAKESTATUS_PWAKEWF_Pos      (6UL)                     /*!< PMU_0 WAKESTATUS: PWAKEWF (Bit 6)                     */
#define PMU_0_WAKESTATUS_PWAKEWF_Msk      (0x40UL)                  /*!< PMU_0 WAKESTATUS: PWAKEWF (Bitfield-Mask: 0x01)       */
#define PMU_0_WAKESTATUS_LPT0WF_Pos       (7UL)                     /*!< PMU_0 WAKESTATUS: LPT0WF (Bit 7)                      */
#define PMU_0_WAKESTATUS_LPT0WF_Msk       (0x80UL)                  /*!< PMU_0 WAKESTATUS: LPT0WF (Bitfield-Mask: 0x01)        */
#define PMU_0_WAKESTATUS_RSTWF_Pos        (8UL)                     /*!< PMU_0 WAKESTATUS: RSTWF (Bit 8)                       */
#define PMU_0_WAKESTATUS_RSTWF_Msk        (0x100UL)                 /*!< PMU_0 WAKESTATUS: RSTWF (Bitfield-Mask: 0x01)         */
/* =========================================================  PWEN  ========================================================== */
#define PMU_0_PWEN_PW0EN_Pos              (0UL)                     /*!< PMU_0 PWEN: PW0EN (Bit 0)                             */
#define PMU_0_PWEN_PW0EN_Msk              (0x1UL)                   /*!< PMU_0 PWEN: PW0EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW1EN_Pos              (1UL)                     /*!< PMU_0 PWEN: PW1EN (Bit 1)                             */
#define PMU_0_PWEN_PW1EN_Msk              (0x2UL)                   /*!< PMU_0 PWEN: PW1EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW2EN_Pos              (2UL)                     /*!< PMU_0 PWEN: PW2EN (Bit 2)                             */
#define PMU_0_PWEN_PW2EN_Msk              (0x4UL)                   /*!< PMU_0 PWEN: PW2EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW3EN_Pos              (3UL)                     /*!< PMU_0 PWEN: PW3EN (Bit 3)                             */
#define PMU_0_PWEN_PW3EN_Msk              (0x8UL)                   /*!< PMU_0 PWEN: PW3EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW4EN_Pos              (4UL)                     /*!< PMU_0 PWEN: PW4EN (Bit 4)                             */
#define PMU_0_PWEN_PW4EN_Msk              (0x10UL)                  /*!< PMU_0 PWEN: PW4EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW5EN_Pos              (5UL)                     /*!< PMU_0 PWEN: PW5EN (Bit 5)                             */
#define PMU_0_PWEN_PW5EN_Msk              (0x20UL)                  /*!< PMU_0 PWEN: PW5EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW6EN_Pos              (6UL)                     /*!< PMU_0 PWEN: PW6EN (Bit 6)                             */
#define PMU_0_PWEN_PW6EN_Msk              (0x40UL)                  /*!< PMU_0 PWEN: PW6EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW7EN_Pos              (7UL)                     /*!< PMU_0 PWEN: PW7EN (Bit 7)                             */
#define PMU_0_PWEN_PW7EN_Msk              (0x80UL)                  /*!< PMU_0 PWEN: PW7EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW8EN_Pos              (8UL)                     /*!< PMU_0 PWEN: PW8EN (Bit 8)                             */
#define PMU_0_PWEN_PW8EN_Msk              (0x100UL)                 /*!< PMU_0 PWEN: PW8EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW9EN_Pos              (9UL)                     /*!< PMU_0 PWEN: PW9EN (Bit 9)                             */
#define PMU_0_PWEN_PW9EN_Msk              (0x200UL)                 /*!< PMU_0 PWEN: PW9EN (Bitfield-Mask: 0x01)               */
#define PMU_0_PWEN_PW10EN_Pos             (10UL)                    /*!< PMU_0 PWEN: PW10EN (Bit 10)                           */
#define PMU_0_PWEN_PW10EN_Msk             (0x400UL)                 /*!< PMU_0 PWEN: PW10EN (Bitfield-Mask: 0x01)              */
#define PMU_0_PWEN_PW11EN_Pos             (11UL)                    /*!< PMU_0 PWEN: PW11EN (Bit 11)                           */
#define PMU_0_PWEN_PW11EN_Msk             (0x800UL)                 /*!< PMU_0 PWEN: PW11EN (Bitfield-Mask: 0x01)              */
#define PMU_0_PWEN_PW12EN_Pos             (12UL)                    /*!< PMU_0 PWEN: PW12EN (Bit 12)                           */
#define PMU_0_PWEN_PW12EN_Msk             (0x1000UL)                /*!< PMU_0 PWEN: PW12EN (Bitfield-Mask: 0x01)              */
#define PMU_0_PWEN_PW13EN_Pos             (13UL)                    /*!< PMU_0 PWEN: PW13EN (Bit 13)                           */
#define PMU_0_PWEN_PW13EN_Msk             (0x2000UL)                /*!< PMU_0 PWEN: PW13EN (Bitfield-Mask: 0x01)              */
#define PMU_0_PWEN_PW14EN_Pos             (14UL)                    /*!< PMU_0 PWEN: PW14EN (Bit 14)                           */
#define PMU_0_PWEN_PW14EN_Msk             (0x4000UL)                /*!< PMU_0 PWEN: PW14EN (Bitfield-Mask: 0x01)              */
#define PMU_0_PWEN_PW15EN_Pos             (15UL)                    /*!< PMU_0 PWEN: PW15EN (Bit 15)                           */
#define PMU_0_PWEN_PW15EN_Msk             (0x8000UL)                /*!< PMU_0 PWEN: PW15EN (Bitfield-Mask: 0x01)              */
/* =========================================================  PWPOL  ========================================================= */
#define PMU_0_PWPOL_PW0POL_Pos            (0UL)                     /*!< PMU_0 PWPOL: PW0POL (Bit 0)                           */
#define PMU_0_PWPOL_PW0POL_Msk            (0x1UL)                   /*!< PMU_0 PWPOL: PW0POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW1POL_Pos            (1UL)                     /*!< PMU_0 PWPOL: PW1POL (Bit 1)                           */
#define PMU_0_PWPOL_PW1POL_Msk            (0x2UL)                   /*!< PMU_0 PWPOL: PW1POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW2POL_Pos            (2UL)                     /*!< PMU_0 PWPOL: PW2POL (Bit 2)                           */
#define PMU_0_PWPOL_PW2POL_Msk            (0x4UL)                   /*!< PMU_0 PWPOL: PW2POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW3POL_Pos            (3UL)                     /*!< PMU_0 PWPOL: PW3POL (Bit 3)                           */
#define PMU_0_PWPOL_PW3POL_Msk            (0x8UL)                   /*!< PMU_0 PWPOL: PW3POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW4POL_Pos            (4UL)                     /*!< PMU_0 PWPOL: PW4POL (Bit 4)                           */
#define PMU_0_PWPOL_PW4POL_Msk            (0x10UL)                  /*!< PMU_0 PWPOL: PW4POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW5POL_Pos            (5UL)                     /*!< PMU_0 PWPOL: PW5POL (Bit 5)                           */
#define PMU_0_PWPOL_PW5POL_Msk            (0x20UL)                  /*!< PMU_0 PWPOL: PW5POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW6POL_Pos            (6UL)                     /*!< PMU_0 PWPOL: PW6POL (Bit 6)                           */
#define PMU_0_PWPOL_PW6POL_Msk            (0x40UL)                  /*!< PMU_0 PWPOL: PW6POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW7POL_Pos            (7UL)                     /*!< PMU_0 PWPOL: PW7POL (Bit 7)                           */
#define PMU_0_PWPOL_PW7POL_Msk            (0x80UL)                  /*!< PMU_0 PWPOL: PW7POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW8POL_Pos            (8UL)                     /*!< PMU_0 PWPOL: PW8POL (Bit 8)                           */
#define PMU_0_PWPOL_PW8POL_Msk            (0x100UL)                 /*!< PMU_0 PWPOL: PW8POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW9POL_Pos            (9UL)                     /*!< PMU_0 PWPOL: PW9POL (Bit 9)                           */
#define PMU_0_PWPOL_PW9POL_Msk            (0x200UL)                 /*!< PMU_0 PWPOL: PW9POL (Bitfield-Mask: 0x01)             */
#define PMU_0_PWPOL_PW10POL_Pos           (10UL)                    /*!< PMU_0 PWPOL: PW10POL (Bit 10)                         */
#define PMU_0_PWPOL_PW10POL_Msk           (0x400UL)                 /*!< PMU_0 PWPOL: PW10POL (Bitfield-Mask: 0x01)            */
#define PMU_0_PWPOL_PW11POL_Pos           (11UL)                    /*!< PMU_0 PWPOL: PW11POL (Bit 11)                         */
#define PMU_0_PWPOL_PW11POL_Msk           (0x800UL)                 /*!< PMU_0 PWPOL: PW11POL (Bitfield-Mask: 0x01)            */
#define PMU_0_PWPOL_PW12POL_Pos           (12UL)                    /*!< PMU_0 PWPOL: PW12POL (Bit 12)                         */
#define PMU_0_PWPOL_PW12POL_Msk           (0x1000UL)                /*!< PMU_0 PWPOL: PW12POL (Bitfield-Mask: 0x01)            */
#define PMU_0_PWPOL_PW13POL_Pos           (13UL)                    /*!< PMU_0 PWPOL: PW13POL (Bit 13)                         */
#define PMU_0_PWPOL_PW13POL_Msk           (0x2000UL)                /*!< PMU_0 PWPOL: PW13POL (Bitfield-Mask: 0x01)            */
#define PMU_0_PWPOL_PW14POL_Pos           (14UL)                    /*!< PMU_0 PWPOL: PW14POL (Bit 14)                         */
#define PMU_0_PWPOL_PW14POL_Msk           (0x4000UL)                /*!< PMU_0 PWPOL: PW14POL (Bitfield-Mask: 0x01)            */
#define PMU_0_PWPOL_PW15POL_Pos           (15UL)                    /*!< PMU_0 PWPOL: PW15POL (Bit 15)                         */
#define PMU_0_PWPOL_PW15POL_Msk           (0x8000UL)                /*!< PMU_0 PWPOL: PW15POL (Bitfield-Mask: 0x01)            */


/* =========================================================================================================================== */
/* ================                                          PBCFG_0                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  CONTROL0  ======================================================== */
#define PBCFG_0_CONTROL0_INT0SEL_Pos      (0UL)                     /*!< PBCFG_0 CONTROL0: INT0SEL (Bit 0)                     */
#define PBCFG_0_CONTROL0_INT0SEL_Msk      (0xfUL)                   /*!< PBCFG_0 CONTROL0: INT0SEL (Bitfield-Mask: 0x0f)       */
#define PBCFG_0_CONTROL0_INT0POL_Pos      (4UL)                     /*!< PBCFG_0 CONTROL0: INT0POL (Bit 4)                     */
#define PBCFG_0_CONTROL0_INT0POL_Msk      (0x10UL)                  /*!< PBCFG_0 CONTROL0: INT0POL (Bitfield-Mask: 0x01)       */
#define PBCFG_0_CONTROL0_INT0MD_Pos       (5UL)                     /*!< PBCFG_0 CONTROL0: INT0MD (Bit 5)                      */
#define PBCFG_0_CONTROL0_INT0MD_Msk       (0x20UL)                  /*!< PBCFG_0 CONTROL0: INT0MD (Bitfield-Mask: 0x01)        */
#define PBCFG_0_CONTROL0_INT0EN_Pos       (7UL)                     /*!< PBCFG_0 CONTROL0: INT0EN (Bit 7)                      */
#define PBCFG_0_CONTROL0_INT0EN_Msk       (0x80UL)                  /*!< PBCFG_0 CONTROL0: INT0EN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_CONTROL0_INT1SEL_Pos      (8UL)                     /*!< PBCFG_0 CONTROL0: INT1SEL (Bit 8)                     */
#define PBCFG_0_CONTROL0_INT1SEL_Msk      (0xf00UL)                 /*!< PBCFG_0 CONTROL0: INT1SEL (Bitfield-Mask: 0x0f)       */
#define PBCFG_0_CONTROL0_INT1POL_Pos      (12UL)                    /*!< PBCFG_0 CONTROL0: INT1POL (Bit 12)                    */
#define PBCFG_0_CONTROL0_INT1POL_Msk      (0x1000UL)                /*!< PBCFG_0 CONTROL0: INT1POL (Bitfield-Mask: 0x01)       */
#define PBCFG_0_CONTROL0_INT1MD_Pos       (13UL)                    /*!< PBCFG_0 CONTROL0: INT1MD (Bit 13)                     */
#define PBCFG_0_CONTROL0_INT1MD_Msk       (0x2000UL)                /*!< PBCFG_0 CONTROL0: INT1MD (Bitfield-Mask: 0x01)        */
#define PBCFG_0_CONTROL0_INT1EN_Pos       (15UL)                    /*!< PBCFG_0 CONTROL0: INT1EN (Bit 15)                     */
#define PBCFG_0_CONTROL0_INT1EN_Msk       (0x8000UL)                /*!< PBCFG_0 CONTROL0: INT1EN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_CONTROL0_PGTIMER_Pos      (24UL)                    /*!< PBCFG_0 CONTROL0: PGTIMER (Bit 24)                    */
#define PBCFG_0_CONTROL0_PGTIMER_Msk      (0x1f000000UL)            /*!< PBCFG_0 CONTROL0: PGTIMER (Bitfield-Mask: 0x1f)       */
#define PBCFG_0_CONTROL0_PGDONEF_Pos      (31UL)                    /*!< PBCFG_0 CONTROL0: PGDONEF (Bit 31)                    */
#define PBCFG_0_CONTROL0_PGDONEF_Msk      (0x80000000UL)            /*!< PBCFG_0 CONTROL0: PGDONEF (Bitfield-Mask: 0x01)       */
/* =====================================================  CONTROL0_SET  ====================================================== */
/* =====================================================  CONTROL0_CLR  ====================================================== */
/* =======================================================  CONTROL1  ======================================================== */
#define PBCFG_0_CONTROL1_JTAGEN_Pos       (0UL)                     /*!< PBCFG_0 CONTROL1: JTAGEN (Bit 0)                      */
#define PBCFG_0_CONTROL1_JTAGEN_Msk       (0x1UL)                   /*!< PBCFG_0 CONTROL1: JTAGEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_CONTROL1_ETMEN_Pos        (1UL)                     /*!< PBCFG_0 CONTROL1: ETMEN (Bit 1)                       */
#define PBCFG_0_CONTROL1_ETMEN_Msk        (0x2UL)                   /*!< PBCFG_0 CONTROL1: ETMEN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_CONTROL1_EMIFBE0BEN_Pos   (7UL)                     /*!< PBCFG_0 CONTROL1: EMIFBE0BEN (Bit 7)                  */
#define PBCFG_0_CONTROL1_EMIFBE0BEN_Msk   (0x80UL)                  /*!< PBCFG_0 CONTROL1: EMIFBE0BEN (Bitfield-Mask: 0x01)    */
#define PBCFG_0_CONTROL1_EMIFCS1EN_Pos    (8UL)                     /*!< PBCFG_0 CONTROL1: EMIFCS1EN (Bit 8)                   */
#define PBCFG_0_CONTROL1_EMIFCS1EN_Msk    (0x100UL)                 /*!< PBCFG_0 CONTROL1: EMIFCS1EN (Bitfield-Mask: 0x01)     */
#define PBCFG_0_CONTROL1_EMIFEN_Pos       (9UL)                     /*!< PBCFG_0 CONTROL1: EMIFEN (Bit 9)                      */
#define PBCFG_0_CONTROL1_EMIFEN_Msk       (0x200UL)                 /*!< PBCFG_0 CONTROL1: EMIFEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_CONTROL1_EMIFWIDTH_Pos    (10UL)                    /*!< PBCFG_0 CONTROL1: EMIFWIDTH (Bit 10)                  */
#define PBCFG_0_CONTROL1_EMIFWIDTH_Msk    (0xfc00UL)                /*!< PBCFG_0 CONTROL1: EMIFWIDTH (Bitfield-Mask: 0x3f)     */
#define PBCFG_0_CONTROL1_MATMD_Pos        (16UL)                    /*!< PBCFG_0 CONTROL1: MATMD (Bit 16)                      */
#define PBCFG_0_CONTROL1_MATMD_Msk        (0x30000UL)               /*!< PBCFG_0 CONTROL1: MATMD (Bitfield-Mask: 0x03)         */
#define PBCFG_0_CONTROL1_EVREGRMD_Pos     (23UL)                    /*!< PBCFG_0 CONTROL1: EVREGRMD (Bit 23)                   */
#define PBCFG_0_CONTROL1_EVREGRMD_Msk     (0x800000UL)              /*!< PBCFG_0 CONTROL1: EVREGRMD (Bitfield-Mask: 0x01)      */
#define PBCFG_0_CONTROL1_LOCK_Pos         (31UL)                    /*!< PBCFG_0 CONTROL1: LOCK (Bit 31)                       */
#define PBCFG_0_CONTROL1_LOCK_Msk         (0x80000000UL)            /*!< PBCFG_0 CONTROL1: LOCK (Bitfield-Mask: 0x01)          */
/* =====================================================  CONTROL1_SET  ====================================================== */
/* =====================================================  CONTROL1_CLR  ====================================================== */
/* ========================================================  XBAR0L  ========================================================= */
#define PBCFG_0_XBAR0L_USART0EN_Pos       (0UL)                     /*!< PBCFG_0 XBAR0L: USART0EN (Bit 0)                      */
#define PBCFG_0_XBAR0L_USART0EN_Msk       (0x1UL)                   /*!< PBCFG_0 XBAR0L: USART0EN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR0L_USART0FCEN_Pos     (1UL)                     /*!< PBCFG_0 XBAR0L: USART0FCEN (Bit 1)                    */
#define PBCFG_0_XBAR0L_USART0FCEN_Msk     (0x2UL)                   /*!< PBCFG_0 XBAR0L: USART0FCEN (Bitfield-Mask: 0x01)      */
#define PBCFG_0_XBAR0L_USART0CEN_Pos      (2UL)                     /*!< PBCFG_0 XBAR0L: USART0CEN (Bit 2)                     */
#define PBCFG_0_XBAR0L_USART0CEN_Msk      (0x4UL)                   /*!< PBCFG_0 XBAR0L: USART0CEN (Bitfield-Mask: 0x01)       */
#define PBCFG_0_XBAR0L_SPI0EN_Pos         (3UL)                     /*!< PBCFG_0 XBAR0L: SPI0EN (Bit 3)                        */
#define PBCFG_0_XBAR0L_SPI0EN_Msk         (0x8UL)                   /*!< PBCFG_0 XBAR0L: SPI0EN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR0L_SPI0NSSEN_Pos      (4UL)                     /*!< PBCFG_0 XBAR0L: SPI0NSSEN (Bit 4)                     */
#define PBCFG_0_XBAR0L_SPI0NSSEN_Msk      (0x10UL)                  /*!< PBCFG_0 XBAR0L: SPI0NSSEN (Bitfield-Mask: 0x01)       */
#define PBCFG_0_XBAR0L_USART1EN_Pos       (5UL)                     /*!< PBCFG_0 XBAR0L: USART1EN (Bit 5)                      */
#define PBCFG_0_XBAR0L_USART1EN_Msk       (0x20UL)                  /*!< PBCFG_0 XBAR0L: USART1EN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR0L_USART1FCEN_Pos     (6UL)                     /*!< PBCFG_0 XBAR0L: USART1FCEN (Bit 6)                    */
#define PBCFG_0_XBAR0L_USART1FCEN_Msk     (0x40UL)                  /*!< PBCFG_0 XBAR0L: USART1FCEN (Bitfield-Mask: 0x01)      */
#define PBCFG_0_XBAR0L_USART1CEN_Pos      (7UL)                     /*!< PBCFG_0 XBAR0L: USART1CEN (Bit 7)                     */
#define PBCFG_0_XBAR0L_USART1CEN_Msk      (0x80UL)                  /*!< PBCFG_0 XBAR0L: USART1CEN (Bitfield-Mask: 0x01)       */
#define PBCFG_0_XBAR0L_EPCA0EN_Pos        (8UL)                     /*!< PBCFG_0 XBAR0L: EPCA0EN (Bit 8)                       */
#define PBCFG_0_XBAR0L_EPCA0EN_Msk        (0x700UL)                 /*!< PBCFG_0 XBAR0L: EPCA0EN (Bitfield-Mask: 0x07)         */
#define PBCFG_0_XBAR0L_PCA0EN_Pos         (14UL)                    /*!< PBCFG_0 XBAR0L: PCA0EN (Bit 14)                       */
#define PBCFG_0_XBAR0L_PCA0EN_Msk         (0xc000UL)                /*!< PBCFG_0 XBAR0L: PCA0EN (Bitfield-Mask: 0x03)          */
#define PBCFG_0_XBAR0L_PCA1EN_Pos         (16UL)                    /*!< PBCFG_0 XBAR0L: PCA1EN (Bit 16)                       */
#define PBCFG_0_XBAR0L_PCA1EN_Msk         (0x30000UL)               /*!< PBCFG_0 XBAR0L: PCA1EN (Bitfield-Mask: 0x03)          */
#define PBCFG_0_XBAR0L_EECI0EN_Pos        (18UL)                    /*!< PBCFG_0 XBAR0L: EECI0EN (Bit 18)                      */
#define PBCFG_0_XBAR0L_EECI0EN_Msk        (0x40000UL)               /*!< PBCFG_0 XBAR0L: EECI0EN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR0L_ECI0EN_Pos         (19UL)                    /*!< PBCFG_0 XBAR0L: ECI0EN (Bit 19)                       */
#define PBCFG_0_XBAR0L_ECI0EN_Msk         (0x80000UL)               /*!< PBCFG_0 XBAR0L: ECI0EN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR0L_ECI1EN_Pos         (20UL)                    /*!< PBCFG_0 XBAR0L: ECI1EN (Bit 20)                       */
#define PBCFG_0_XBAR0L_ECI1EN_Msk         (0x100000UL)              /*!< PBCFG_0 XBAR0L: ECI1EN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR0L_I2S0TXEN_Pos       (21UL)                    /*!< PBCFG_0 XBAR0L: I2S0TXEN (Bit 21)                     */
#define PBCFG_0_XBAR0L_I2S0TXEN_Msk       (0x200000UL)              /*!< PBCFG_0 XBAR0L: I2S0TXEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR0L_I2C0EN_Pos         (22UL)                    /*!< PBCFG_0 XBAR0L: I2C0EN (Bit 22)                       */
#define PBCFG_0_XBAR0L_I2C0EN_Msk         (0x400000UL)              /*!< PBCFG_0 XBAR0L: I2C0EN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR0L_CMP0SEN_Pos        (23UL)                    /*!< PBCFG_0 XBAR0L: CMP0SEN (Bit 23)                      */
#define PBCFG_0_XBAR0L_CMP0SEN_Msk        (0x800000UL)              /*!< PBCFG_0 XBAR0L: CMP0SEN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR0L_CMP0AEN_Pos        (24UL)                    /*!< PBCFG_0 XBAR0L: CMP0AEN (Bit 24)                      */
#define PBCFG_0_XBAR0L_CMP0AEN_Msk        (0x1000000UL)             /*!< PBCFG_0 XBAR0L: CMP0AEN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR0L_CMP1SEN_Pos        (25UL)                    /*!< PBCFG_0 XBAR0L: CMP1SEN (Bit 25)                      */
#define PBCFG_0_XBAR0L_CMP1SEN_Msk        (0x2000000UL)             /*!< PBCFG_0 XBAR0L: CMP1SEN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR0L_CMP1AEN_Pos        (26UL)                    /*!< PBCFG_0 XBAR0L: CMP1AEN (Bit 26)                      */
#define PBCFG_0_XBAR0L_CMP1AEN_Msk        (0x4000000UL)             /*!< PBCFG_0 XBAR0L: CMP1AEN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR0L_TMR0CTEN_Pos       (27UL)                    /*!< PBCFG_0 XBAR0L: TMR0CTEN (Bit 27)                     */
#define PBCFG_0_XBAR0L_TMR0CTEN_Msk       (0x8000000UL)             /*!< PBCFG_0 XBAR0L: TMR0CTEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR0L_TMR0EXEN_Pos       (28UL)                    /*!< PBCFG_0 XBAR0L: TMR0EXEN (Bit 28)                     */
#define PBCFG_0_XBAR0L_TMR0EXEN_Msk       (0x10000000UL)            /*!< PBCFG_0 XBAR0L: TMR0EXEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR0L_TMR1CTEN_Pos       (29UL)                    /*!< PBCFG_0 XBAR0L: TMR1CTEN (Bit 29)                     */
#define PBCFG_0_XBAR0L_TMR1CTEN_Msk       (0x20000000UL)            /*!< PBCFG_0 XBAR0L: TMR1CTEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR0L_TMR1EXEN_Pos       (30UL)                    /*!< PBCFG_0 XBAR0L: TMR1EXEN (Bit 30)                     */
#define PBCFG_0_XBAR0L_TMR1EXEN_Msk       (0x40000000UL)            /*!< PBCFG_0 XBAR0L: TMR1EXEN (Bitfield-Mask: 0x01)        */
/* ======================================================  XBAR0L_SET  ======================================================= */
/* ======================================================  XBAR0L_CLR  ======================================================= */
/* ========================================================  XBAR0H  ========================================================= */
#define PBCFG_0_XBAR0H_UART0EN_Pos        (0UL)                     /*!< PBCFG_0 XBAR0H: UART0EN (Bit 0)                       */
#define PBCFG_0_XBAR0H_UART0EN_Msk        (0x1UL)                   /*!< PBCFG_0 XBAR0H: UART0EN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR0H_UART0FCEN_Pos      (1UL)                     /*!< PBCFG_0 XBAR0H: UART0FCEN (Bit 1)                     */
#define PBCFG_0_XBAR0H_UART0FCEN_Msk      (0x2UL)                   /*!< PBCFG_0 XBAR0H: UART0FCEN (Bitfield-Mask: 0x01)       */
#define PBCFG_0_XBAR0H_UART1EN_Pos        (2UL)                     /*!< PBCFG_0 XBAR0H: UART1EN (Bit 2)                       */
#define PBCFG_0_XBAR0H_UART1EN_Msk        (0x4UL)                   /*!< PBCFG_0 XBAR0H: UART1EN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR0H_SPI1EN_Pos         (3UL)                     /*!< PBCFG_0 XBAR0H: SPI1EN (Bit 3)                        */
#define PBCFG_0_XBAR0H_SPI1EN_Msk         (0x8UL)                   /*!< PBCFG_0 XBAR0H: SPI1EN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR0H_SPI1NSSEN_Pos      (4UL)                     /*!< PBCFG_0 XBAR0H: SPI1NSSEN (Bit 4)                     */
#define PBCFG_0_XBAR0H_SPI1NSSEN_Msk      (0x10UL)                  /*!< PBCFG_0 XBAR0H: SPI1NSSEN (Bitfield-Mask: 0x01)       */
#define PBCFG_0_XBAR0H_SPI2EN_Pos         (5UL)                     /*!< PBCFG_0 XBAR0H: SPI2EN (Bit 5)                        */
#define PBCFG_0_XBAR0H_SPI2EN_Msk         (0x20UL)                  /*!< PBCFG_0 XBAR0H: SPI2EN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR0H_SPI2NSSEN_Pos      (6UL)                     /*!< PBCFG_0 XBAR0H: SPI2NSSEN (Bit 6)                     */
#define PBCFG_0_XBAR0H_SPI2NSSEN_Msk      (0x40UL)                  /*!< PBCFG_0 XBAR0H: SPI2NSSEN (Bitfield-Mask: 0x01)       */
#define PBCFG_0_XBAR0H_AHBEN_Pos          (7UL)                     /*!< PBCFG_0 XBAR0H: AHBEN (Bit 7)                         */
#define PBCFG_0_XBAR0H_AHBEN_Msk          (0x80UL)                  /*!< PBCFG_0 XBAR0H: AHBEN (Bitfield-Mask: 0x01)           */
#define PBCFG_0_XBAR0H_XBAR0EN_Pos        (31UL)                    /*!< PBCFG_0 XBAR0H: XBAR0EN (Bit 31)                      */
#define PBCFG_0_XBAR0H_XBAR0EN_Msk        (0x80000000UL)            /*!< PBCFG_0 XBAR0H: XBAR0EN (Bitfield-Mask: 0x01)         */
/* ======================================================  XBAR0H_SET  ======================================================= */
/* ======================================================  XBAR0H_CLR  ======================================================= */
/* =========================================================  XBAR1  ========================================================= */
#define PBCFG_0_XBAR1_SSG0EN_Pos          (0UL)                     /*!< PBCFG_0 XBAR1: SSG0EN (Bit 0)                         */
#define PBCFG_0_XBAR1_SSG0EN_Msk          (0x3UL)                   /*!< PBCFG_0 XBAR1: SSG0EN (Bitfield-Mask: 0x03)           */
#define PBCFG_0_XBAR1_CMP0SEN_Pos         (2UL)                     /*!< PBCFG_0 XBAR1: CMP0SEN (Bit 2)                        */
#define PBCFG_0_XBAR1_CMP0SEN_Msk         (0x4UL)                   /*!< PBCFG_0 XBAR1: CMP0SEN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR1_CMP1SEN_Pos         (3UL)                     /*!< PBCFG_0 XBAR1: CMP1SEN (Bit 3)                        */
#define PBCFG_0_XBAR1_CMP1SEN_Msk         (0x8UL)                   /*!< PBCFG_0 XBAR1: CMP1SEN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR1_SPI1EN_Pos          (4UL)                     /*!< PBCFG_0 XBAR1: SPI1EN (Bit 4)                         */
#define PBCFG_0_XBAR1_SPI1EN_Msk          (0x10UL)                  /*!< PBCFG_0 XBAR1: SPI1EN (Bitfield-Mask: 0x01)           */
#define PBCFG_0_XBAR1_SPI1NSSEN_Pos       (5UL)                     /*!< PBCFG_0 XBAR1: SPI1NSSEN (Bit 5)                      */
#define PBCFG_0_XBAR1_SPI1NSSEN_Msk       (0x20UL)                  /*!< PBCFG_0 XBAR1: SPI1NSSEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR1_RTC0EN_Pos          (6UL)                     /*!< PBCFG_0 XBAR1: RTC0EN (Bit 6)                         */
#define PBCFG_0_XBAR1_RTC0EN_Msk          (0x40UL)                  /*!< PBCFG_0 XBAR1: RTC0EN (Bitfield-Mask: 0x01)           */
#define PBCFG_0_XBAR1_SPI2EN_Pos          (7UL)                     /*!< PBCFG_0 XBAR1: SPI2EN (Bit 7)                         */
#define PBCFG_0_XBAR1_SPI2EN_Msk          (0x80UL)                  /*!< PBCFG_0 XBAR1: SPI2EN (Bitfield-Mask: 0x01)           */
#define PBCFG_0_XBAR1_SPI2NSSEN_Pos       (8UL)                     /*!< PBCFG_0 XBAR1: SPI2NSSEN (Bit 8)                      */
#define PBCFG_0_XBAR1_SPI2NSSEN_Msk       (0x100UL)                 /*!< PBCFG_0 XBAR1: SPI2NSSEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR1_USART1EN_Pos        (9UL)                     /*!< PBCFG_0 XBAR1: USART1EN (Bit 9)                       */
#define PBCFG_0_XBAR1_USART1EN_Msk        (0x200UL)                 /*!< PBCFG_0 XBAR1: USART1EN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR1_USART1FCEN_Pos      (10UL)                    /*!< PBCFG_0 XBAR1: USART1FCEN (Bit 10)                    */
#define PBCFG_0_XBAR1_USART1FCEN_Msk      (0x400UL)                 /*!< PBCFG_0 XBAR1: USART1FCEN (Bitfield-Mask: 0x01)       */
#define PBCFG_0_XBAR1_USART1CEN_Pos       (11UL)                    /*!< PBCFG_0 XBAR1: USART1CEN (Bit 11)                     */
#define PBCFG_0_XBAR1_USART1CEN_Msk       (0x800UL)                 /*!< PBCFG_0 XBAR1: USART1CEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR1_UART0EN_Pos         (12UL)                    /*!< PBCFG_0 XBAR1: UART0EN (Bit 12)                       */
#define PBCFG_0_XBAR1_UART0EN_Msk         (0x1000UL)                /*!< PBCFG_0 XBAR1: UART0EN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR1_UART0FCEN_Pos       (13UL)                    /*!< PBCFG_0 XBAR1: UART0FCEN (Bit 13)                     */
#define PBCFG_0_XBAR1_UART0FCEN_Msk       (0x2000UL)                /*!< PBCFG_0 XBAR1: UART0FCEN (Bitfield-Mask: 0x01)        */
#define PBCFG_0_XBAR1_I2S0TXEN_Pos        (14UL)                    /*!< PBCFG_0 XBAR1: I2S0TXEN (Bit 14)                      */
#define PBCFG_0_XBAR1_I2S0TXEN_Msk        (0x4000UL)                /*!< PBCFG_0 XBAR1: I2S0TXEN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR1_I2C0EN_Pos          (15UL)                    /*!< PBCFG_0 XBAR1: I2C0EN (Bit 15)                        */
#define PBCFG_0_XBAR1_I2C0EN_Msk          (0x8000UL)                /*!< PBCFG_0 XBAR1: I2C0EN (Bitfield-Mask: 0x01)           */
#define PBCFG_0_XBAR1_UART1EN_Pos         (16UL)                    /*!< PBCFG_0 XBAR1: UART1EN (Bit 16)                       */
#define PBCFG_0_XBAR1_UART1EN_Msk         (0x10000UL)               /*!< PBCFG_0 XBAR1: UART1EN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR1_I2S0RXEN_Pos        (17UL)                    /*!< PBCFG_0 XBAR1: I2S0RXEN (Bit 17)                      */
#define PBCFG_0_XBAR1_I2S0RXEN_Msk        (0x20000UL)               /*!< PBCFG_0 XBAR1: I2S0RXEN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR1_LPT0OEN_Pos         (19UL)                    /*!< PBCFG_0 XBAR1: LPT0OEN (Bit 19)                       */
#define PBCFG_0_XBAR1_LPT0OEN_Msk         (0x80000UL)               /*!< PBCFG_0 XBAR1: LPT0OEN (Bitfield-Mask: 0x01)          */
#define PBCFG_0_XBAR1_I2C1EN_Pos          (20UL)                    /*!< PBCFG_0 XBAR1: I2C1EN (Bit 20)                        */
#define PBCFG_0_XBAR1_I2C1EN_Msk          (0x100000UL)              /*!< PBCFG_0 XBAR1: I2C1EN (Bitfield-Mask: 0x01)           */
#define PBCFG_0_XBAR1_KILLHDEN_Pos        (21UL)                    /*!< PBCFG_0 XBAR1: KILLHDEN (Bit 21)                      */
#define PBCFG_0_XBAR1_KILLHDEN_Msk        (0x200000UL)              /*!< PBCFG_0 XBAR1: KILLHDEN (Bitfield-Mask: 0x01)         */
#define PBCFG_0_XBAR1_XBAR1EN_Pos         (31UL)                    /*!< PBCFG_0 XBAR1: XBAR1EN (Bit 31)                       */
#define PBCFG_0_XBAR1_XBAR1EN_Msk         (0x80000000UL)            /*!< PBCFG_0 XBAR1: XBAR1EN (Bitfield-Mask: 0x01)          */
/* =======================================================  XBAR1_SET  ======================================================= */
/* =======================================================  XBAR1_CLR  ======================================================= */
/* =========================================================  PBKEY  ========================================================= */
#define PBCFG_0_PBKEY_KEY_Pos             (0UL)                     /*!< PBCFG_0 PBKEY: KEY (Bit 0)                            */
#define PBCFG_0_PBKEY_KEY_Msk             (0xffUL)                  /*!< PBCFG_0 PBKEY: KEY (Bitfield-Mask: 0xff)              */


/* =========================================================================================================================== */
/* ================                                          PBHD_4                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  PB  =========================================================== */
#define PBHD_4_PB_PB_Pos                  (0UL)                     /*!< PBHD_4 PB: PB (Bit 0)                                 */
#define PBHD_4_PB_PB_Msk                  (0x3fUL)                  /*!< PBHD_4 PB: PB (Bitfield-Mask: 0x3f)                   */
/* =========================================================  PBPIN  ========================================================= */
#define PBHD_4_PBPIN_PBPIN_Pos            (0UL)                     /*!< PBHD_4 PBPIN: PBPIN (Bit 0)                           */
#define PBHD_4_PBPIN_PBPIN_Msk            (0x3fUL)                  /*!< PBHD_4 PBPIN: PBPIN (Bitfield-Mask: 0x3f)             */
/* ========================================================  PBMDSEL  ======================================================== */
#define PBHD_4_PBMDSEL_PBMDSEL_Pos        (0UL)                     /*!< PBHD_4 PBMDSEL: PBMDSEL (Bit 0)                       */
#define PBHD_4_PBMDSEL_PBMDSEL_Msk        (0x3fUL)                  /*!< PBHD_4 PBMDSEL: PBMDSEL (Bitfield-Mask: 0x3f)         */
/* =========================================================  PBDEN  ========================================================= */
#define PBHD_4_PBDEN_PBNDEN_Pos           (0UL)                     /*!< PBHD_4 PBDEN: PBNDEN (Bit 0)                          */
#define PBHD_4_PBDEN_PBNDEN_Msk           (0x3fUL)                  /*!< PBHD_4 PBDEN: PBNDEN (Bitfield-Mask: 0x3f)            */
#define PBHD_4_PBDEN_PBPDEN_Pos           (16UL)                    /*!< PBHD_4 PBDEN: PBPDEN (Bit 16)                         */
#define PBHD_4_PBDEN_PBPDEN_Msk           (0x3f0000UL)              /*!< PBHD_4 PBDEN: PBPDEN (Bitfield-Mask: 0x3f)            */
/* =========================================================  PBDRV  ========================================================= */
#define PBHD_4_PBDRV_PBDRV_Pos            (0UL)                     /*!< PBHD_4 PBDRV: PBDRV (Bit 0)                           */
#define PBHD_4_PBDRV_PBDRV_Msk            (0x3fUL)                  /*!< PBHD_4 PBDRV: PBDRV (Bitfield-Mask: 0x3f)             */
#define PBHD_4_PBDRV_PBPUEN_Pos           (16UL)                    /*!< PBHD_4 PBDRV: PBPUEN (Bit 16)                         */
#define PBHD_4_PBDRV_PBPUEN_Msk           (0x10000UL)               /*!< PBHD_4 PBDRV: PBPUEN (Bitfield-Mask: 0x01)            */
#define PBHD_4_PBDRV_PBLVMD_Pos           (17UL)                    /*!< PBHD_4 PBDRV: PBLVMD (Bit 17)                         */
#define PBHD_4_PBDRV_PBLVMD_Msk           (0x20000UL)               /*!< PBHD_4 PBDRV: PBLVMD (Bitfield-Mask: 0x01)            */
#define PBHD_4_PBDRV_PBSLEW_Pos           (18UL)                    /*!< PBHD_4 PBDRV: PBSLEW (Bit 18)                         */
#define PBHD_4_PBDRV_PBSLEW_Msk           (0xc0000UL)               /*!< PBHD_4 PBDRV: PBSLEW (Bitfield-Mask: 0x03)            */
#define PBHD_4_PBDRV_PBBIASEN_Pos         (21UL)                    /*!< PBHD_4 PBDRV: PBBIASEN (Bit 21)                       */
#define PBHD_4_PBDRV_PBBIASEN_Msk         (0x200000UL)              /*!< PBHD_4 PBDRV: PBBIASEN (Bitfield-Mask: 0x01)          */
#define PBHD_4_PBDRV_PBDRVEN_Pos          (22UL)                    /*!< PBHD_4 PBDRV: PBDRVEN (Bit 22)                        */
#define PBHD_4_PBDRV_PBDRVEN_Msk          (0x400000UL)              /*!< PBHD_4 PBDRV: PBDRVEN (Bitfield-Mask: 0x01)           */
#define PBHD_4_PBDRV_PBVTRKEN_Pos         (23UL)                    /*!< PBHD_4 PBDRV: PBVTRKEN (Bit 23)                       */
#define PBHD_4_PBDRV_PBVTRKEN_Msk         (0x800000UL)              /*!< PBHD_4 PBDRV: PBVTRKEN (Bitfield-Mask: 0x01)          */
/* =======================================================  PBILIMIT  ======================================================== */
#define PBHD_4_PBILIMIT_PBILEN_Pos        (0UL)                     /*!< PBHD_4 PBILIMIT: PBILEN (Bit 0)                       */
#define PBHD_4_PBILIMIT_PBILEN_Msk        (0x3fUL)                  /*!< PBHD_4 PBILIMIT: PBILEN (Bitfield-Mask: 0x3f)         */
#define PBHD_4_PBILIMIT_NILIMIT_Pos       (16UL)                    /*!< PBHD_4 PBILIMIT: NILIMIT (Bit 16)                     */
#define PBHD_4_PBILIMIT_NILIMIT_Msk       (0xf0000UL)               /*!< PBHD_4 PBILIMIT: NILIMIT (Bitfield-Mask: 0x0f)        */
#define PBHD_4_PBILIMIT_PILIMIT_Pos       (20UL)                    /*!< PBHD_4 PBILIMIT: PILIMIT (Bit 20)                     */
#define PBHD_4_PBILIMIT_PILIMIT_Msk       (0xf00000UL)              /*!< PBHD_4 PBILIMIT: PILIMIT (Bitfield-Mask: 0x0f)        */
/* ========================================================  PBFSEL  ========================================================= */
#define PBHD_4_PBFSEL_PB0SEL_Pos          (0UL)                     /*!< PBHD_4 PBFSEL: PB0SEL (Bit 0)                         */
#define PBHD_4_PBFSEL_PB0SEL_Msk          (0x3UL)                   /*!< PBHD_4 PBFSEL: PB0SEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBFSEL_PB1SEL_Pos          (2UL)                     /*!< PBHD_4 PBFSEL: PB1SEL (Bit 2)                         */
#define PBHD_4_PBFSEL_PB1SEL_Msk          (0xcUL)                   /*!< PBHD_4 PBFSEL: PB1SEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBFSEL_PB2SEL_Pos          (4UL)                     /*!< PBHD_4 PBFSEL: PB2SEL (Bit 4)                         */
#define PBHD_4_PBFSEL_PB2SEL_Msk          (0x30UL)                  /*!< PBHD_4 PBFSEL: PB2SEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBFSEL_PB3SEL_Pos          (6UL)                     /*!< PBHD_4 PBFSEL: PB3SEL (Bit 6)                         */
#define PBHD_4_PBFSEL_PB3SEL_Msk          (0xc0UL)                  /*!< PBHD_4 PBFSEL: PB3SEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBFSEL_PB4SEL_Pos          (8UL)                     /*!< PBHD_4 PBFSEL: PB4SEL (Bit 8)                         */
#define PBHD_4_PBFSEL_PB4SEL_Msk          (0x300UL)                 /*!< PBHD_4 PBFSEL: PB4SEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBFSEL_PB5SEL_Pos          (10UL)                    /*!< PBHD_4 PBFSEL: PB5SEL (Bit 10)                        */
#define PBHD_4_PBFSEL_PB5SEL_Msk          (0x1c00UL)                /*!< PBHD_4 PBFSEL: PB5SEL (Bitfield-Mask: 0x07)           */
/* =========================================================  PBSS  ========================================================== */
#define PBHD_4_PBSS_PB0SSSEL_Pos          (0UL)                     /*!< PBHD_4 PBSS: PB0SSSEL (Bit 0)                         */
#define PBHD_4_PBSS_PB0SSSEL_Msk          (0x3UL)                   /*!< PBHD_4 PBSS: PB0SSSEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBSS_PB1SSSEL_Pos          (2UL)                     /*!< PBHD_4 PBSS: PB1SSSEL (Bit 2)                         */
#define PBHD_4_PBSS_PB1SSSEL_Msk          (0xcUL)                   /*!< PBHD_4 PBSS: PB1SSSEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBSS_PB2SSSEL_Pos          (4UL)                     /*!< PBHD_4 PBSS: PB2SSSEL (Bit 4)                         */
#define PBHD_4_PBSS_PB2SSSEL_Msk          (0x30UL)                  /*!< PBHD_4 PBSS: PB2SSSEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBSS_PB3SSSEL_Pos          (6UL)                     /*!< PBHD_4 PBSS: PB3SSSEL (Bit 6)                         */
#define PBHD_4_PBSS_PB3SSSEL_Msk          (0xc0UL)                  /*!< PBHD_4 PBSS: PB3SSSEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBSS_PB4SSSEL_Pos          (8UL)                     /*!< PBHD_4 PBSS: PB4SSSEL (Bit 8)                         */
#define PBHD_4_PBSS_PB4SSSEL_Msk          (0x300UL)                 /*!< PBHD_4 PBSS: PB4SSSEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBSS_PB5SSSEL_Pos          (10UL)                    /*!< PBHD_4 PBSS: PB5SSSEL (Bit 10)                        */
#define PBHD_4_PBSS_PB5SSSEL_Msk          (0xc00UL)                 /*!< PBHD_4 PBSS: PB5SSSEL (Bitfield-Mask: 0x03)           */
#define PBHD_4_PBSS_SSMDEN_Pos            (16UL)                    /*!< PBHD_4 PBSS: SSMDEN (Bit 16)                          */
#define PBHD_4_PBSS_SSMDEN_Msk            (0x10000UL)               /*!< PBHD_4 PBSS: SSMDEN (Bitfield-Mask: 0x01)             */
#define PBHD_4_PBSS_PBSSSMD_Pos           (17UL)                    /*!< PBHD_4 PBSS: PBSSSMD (Bit 17)                         */
#define PBHD_4_PBSS_PBSSSMD_Msk           (0x20000UL)               /*!< PBHD_4 PBSS: PBSSSMD (Bitfield-Mask: 0x01)            */
/* ========================================================  PBLOCK  ========================================================= */
#define PBHD_4_PBLOCK_PBLOCK_Pos          (0UL)                     /*!< PBHD_4 PBLOCK: PBLOCK (Bit 0)                         */
#define PBHD_4_PBLOCK_PBLOCK_Msk          (0x3fUL)                  /*!< PBHD_4 PBLOCK: PBLOCK (Bitfield-Mask: 0x3f)           */


/* =========================================================================================================================== */
/* ================                                           PBSTD                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  PB  =========================================================== */
#define PBSTD_PB_PB_Pos                   (0UL)                     /*!< PBSTD PB: PB (Bit 0)                                  */
#define PBSTD_PB_PB_Msk                   (0xffffUL)                /*!< PBSTD PB: PB (Bitfield-Mask: 0xffff)                  */
/* ========================================================  PB_SET  ========================================================= */
/* ========================================================  PB_CLR  ========================================================= */
/* ========================================================  PB_MSK  ========================================================= */
/* =========================================================  PBPIN  ========================================================= */
#define PBSTD_PBPIN_PBPIN_Pos             (0UL)                     /*!< PBSTD PBPIN: PBPIN (Bit 0)                            */
#define PBSTD_PBPIN_PBPIN_Msk             (0xffffUL)                /*!< PBSTD PBPIN: PBPIN (Bitfield-Mask: 0xffff)            */
/* ========================================================  PBMDSEL  ======================================================== */
#define PBSTD_PBMDSEL_PBMDSEL_Pos         (0UL)                     /*!< PBSTD PBMDSEL: PBMDSEL (Bit 0)                        */
#define PBSTD_PBMDSEL_PBMDSEL_Msk         (0xffffUL)                /*!< PBSTD PBMDSEL: PBMDSEL (Bitfield-Mask: 0xffff)        */
/* ======================================================  PBMDSEL_SET  ====================================================== */
/* ======================================================  PBMDSEL_CLR  ====================================================== */
/* =======================================================  PBSKIPEN  ======================================================== */
#define PBSTD_PBSKIPEN_PBSKIPEN_Pos       (0UL)                     /*!< PBSTD PBSKIPEN: PBSKIPEN (Bit 0)                      */
#define PBSTD_PBSKIPEN_PBSKIPEN_Msk       (0xffffUL)                /*!< PBSTD PBSKIPEN: PBSKIPEN (Bitfield-Mask: 0xffff)      */
/* =====================================================  PBSKIPEN_SET  ====================================================== */
/* =====================================================  PBSKIPEN_CLR  ====================================================== */
/* ========================================================  PBOUTMD  ======================================================== */
#define PBSTD_PBOUTMD_PBOUTMD_Pos         (0UL)                     /*!< PBSTD PBOUTMD: PBOUTMD (Bit 0)                        */
#define PBSTD_PBOUTMD_PBOUTMD_Msk         (0xffffUL)                /*!< PBSTD PBOUTMD: PBOUTMD (Bitfield-Mask: 0xffff)        */
/* ======================================================  PBOUTMD_SET  ====================================================== */
/* ======================================================  PBOUTMD_CLR  ====================================================== */
/* =========================================================  PBDRV  ========================================================= */
#define PBSTD_PBDRV_PBDRV_Pos             (0UL)                     /*!< PBSTD PBDRV: PBDRV (Bit 0)                            */
#define PBSTD_PBDRV_PBDRV_Msk             (0xffffUL)                /*!< PBSTD PBDRV: PBDRV (Bitfield-Mask: 0xffff)            */
#define PBSTD_PBDRV_PBPUEN_Pos            (16UL)                    /*!< PBSTD PBDRV: PBPUEN (Bit 16)                          */
#define PBSTD_PBDRV_PBPUEN_Msk            (0x10000UL)               /*!< PBSTD PBDRV: PBPUEN (Bitfield-Mask: 0x01)             */
/* =======================================================  PBDRV_SET  ======================================================= */
/* =======================================================  PBDRV_CLR  ======================================================= */
/* ==========================================================  PM  =========================================================== */
#define PBSTD_PM_PM_Pos                   (0UL)                     /*!< PBSTD PM: PM (Bit 0)                                  */
#define PBSTD_PM_PM_Msk                   (0xffffUL)                /*!< PBSTD PM: PM (Bitfield-Mask: 0xffff)                  */
/* ========================================================  PM_SET  ========================================================= */
/* ========================================================  PM_CLR  ========================================================= */
/* =========================================================  PMEN  ========================================================== */
#define PBSTD_PMEN_PMEN_Pos               (0UL)                     /*!< PBSTD PMEN: PMEN (Bit 0)                              */
#define PBSTD_PMEN_PMEN_Msk               (0xffffUL)                /*!< PBSTD PMEN: PMEN (Bitfield-Mask: 0xffff)              */
/* =======================================================  PMEN_SET  ======================================================== */
/* =======================================================  PMEN_CLR  ======================================================== */
/* ========================================================  PBLOCK  ========================================================= */
#define PBSTD_PBLOCK_PBLOCK_Pos           (0UL)                     /*!< PBSTD PBLOCK: PBLOCK (Bit 0)                          */
#define PBSTD_PBLOCK_PBLOCK_Msk           (0xffffUL)                /*!< PBSTD PBLOCK: PBLOCK (Bitfield-Mask: 0xffff)          */
/* ========================================================  PBPGEN  ========================================================= */
#define PBSTD_PBPGEN_PBPGEN_Pos           (0UL)                     /*!< PBSTD PBPGEN: PBPGEN (Bit 0)                          */
#define PBSTD_PBPGEN_PBPGEN_Msk           (0xffffUL)                /*!< PBSTD PBPGEN: PBPGEN (Bitfield-Mask: 0xffff)          */
/* =======================================================  PBPGPHASE  ======================================================= */
#define PBSTD_PBPGPHASE_PBPGPH0_Pos       (0UL)                     /*!< PBSTD PBPGPHASE: PBPGPH0 (Bit 0)                      */
#define PBSTD_PBPGPHASE_PBPGPH0_Msk       (0xffffUL)                /*!< PBSTD PBPGPHASE: PBPGPH0 (Bitfield-Mask: 0xffff)      */
#define PBSTD_PBPGPHASE_PBPGPH1_Pos       (16UL)                    /*!< PBSTD PBPGPHASE: PBPGPH1 (Bit 16)                     */
#define PBSTD_PBPGPHASE_PBPGPH1_Msk       (0xffff0000UL)            /*!< PBSTD PBPGPHASE: PBPGPH1 (Bitfield-Mask: 0xffff)      */


/* =========================================================================================================================== */
/* ================                                           RTC_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define RTC_0_CONFIG_ALM0AREN_Pos         (0UL)                     /*!< RTC_0 CONFIG: ALM0AREN (Bit 0)                        */
#define RTC_0_CONFIG_ALM0AREN_Msk         (0x1UL)                   /*!< RTC_0 CONFIG: ALM0AREN (Bitfield-Mask: 0x01)          */
#define RTC_0_CONFIG_RUN_Pos              (1UL)                     /*!< RTC_0 CONFIG: RUN (Bit 1)                             */
#define RTC_0_CONFIG_RUN_Msk              (0x2UL)                   /*!< RTC_0 CONFIG: RUN (Bitfield-Mask: 0x01)               */
#define RTC_0_CONFIG_MCLKEN_Pos           (2UL)                     /*!< RTC_0 CONFIG: MCLKEN (Bit 2)                          */
#define RTC_0_CONFIG_MCLKEN_Msk           (0x4UL)                   /*!< RTC_0 CONFIG: MCLKEN (Bitfield-Mask: 0x01)            */
#define RTC_0_CONFIG_ASEN_Pos             (3UL)                     /*!< RTC_0 CONFIG: ASEN (Bit 3)                            */
#define RTC_0_CONFIG_ASEN_Msk             (0x8UL)                   /*!< RTC_0 CONFIG: ASEN (Bitfield-Mask: 0x01)              */
#define RTC_0_CONFIG_RTCLC_Pos            (4UL)                     /*!< RTC_0 CONFIG: RTCLC (Bit 4)                           */
#define RTC_0_CONFIG_RTCLC_Msk            (0xf0UL)                  /*!< RTC_0 CONFIG: RTCLC (Bitfield-Mask: 0x0f)             */
#define RTC_0_CONFIG_BDEN_Pos             (16UL)                    /*!< RTC_0 CONFIG: BDEN (Bit 16)                           */
#define RTC_0_CONFIG_BDEN_Msk             (0x10000UL)               /*!< RTC_0 CONFIG: BDEN (Bitfield-Mask: 0x01)              */
#define RTC_0_CONFIG_CRYSEN_Pos           (17UL)                    /*!< RTC_0 CONFIG: CRYSEN (Bit 17)                         */
#define RTC_0_CONFIG_CRYSEN_Msk           (0x20000UL)               /*!< RTC_0 CONFIG: CRYSEN (Bitfield-Mask: 0x01)            */
#define RTC_0_CONFIG_AGCEN_Pos            (18UL)                    /*!< RTC_0 CONFIG: AGCEN (Bit 18)                          */
#define RTC_0_CONFIG_AGCEN_Msk            (0x40000UL)               /*!< RTC_0 CONFIG: AGCEN (Bitfield-Mask: 0x01)             */
#define RTC_0_CONFIG_ALM0EN_Pos           (24UL)                    /*!< RTC_0 CONFIG: ALM0EN (Bit 24)                         */
#define RTC_0_CONFIG_ALM0EN_Msk           (0x1000000UL)             /*!< RTC_0 CONFIG: ALM0EN (Bitfield-Mask: 0x01)            */
#define RTC_0_CONFIG_ALM1EN_Pos           (25UL)                    /*!< RTC_0 CONFIG: ALM1EN (Bit 25)                         */
#define RTC_0_CONFIG_ALM1EN_Msk           (0x2000000UL)             /*!< RTC_0 CONFIG: ALM1EN (Bitfield-Mask: 0x01)            */
#define RTC_0_CONFIG_ALM2EN_Pos           (26UL)                    /*!< RTC_0 CONFIG: ALM2EN (Bit 26)                         */
#define RTC_0_CONFIG_ALM2EN_Msk           (0x4000000UL)             /*!< RTC_0 CONFIG: ALM2EN (Bitfield-Mask: 0x01)            */
#define RTC_0_CONFIG_RTCOEN_Pos           (29UL)                    /*!< RTC_0 CONFIG: RTCOEN (Bit 29)                         */
#define RTC_0_CONFIG_RTCOEN_Msk           (0x20000000UL)            /*!< RTC_0 CONFIG: RTCOEN (Bitfield-Mask: 0x01)            */
#define RTC_0_CONFIG_CLKSEL_Pos           (30UL)                    /*!< RTC_0 CONFIG: CLKSEL (Bit 30)                         */
#define RTC_0_CONFIG_CLKSEL_Msk           (0x40000000UL)            /*!< RTC_0 CONFIG: CLKSEL (Bitfield-Mask: 0x01)            */
#define RTC_0_CONFIG_RTCEN_Pos            (31UL)                    /*!< RTC_0 CONFIG: RTCEN (Bit 31)                          */
#define RTC_0_CONFIG_RTCEN_Msk            (0x80000000UL)            /*!< RTC_0 CONFIG: RTCEN (Bitfield-Mask: 0x01)             */
/* ========================================================  CONTROL  ======================================================== */
#define RTC_0_CONTROL_ALM0I_Pos           (0UL)                     /*!< RTC_0 CONTROL: ALM0I (Bit 0)                          */
#define RTC_0_CONTROL_ALM0I_Msk           (0x1UL)                   /*!< RTC_0 CONTROL: ALM0I (Bitfield-Mask: 0x01)            */
#define RTC_0_CONTROL_ALM1I_Pos           (1UL)                     /*!< RTC_0 CONTROL: ALM1I (Bit 1)                          */
#define RTC_0_CONTROL_ALM1I_Msk           (0x2UL)                   /*!< RTC_0 CONTROL: ALM1I (Bitfield-Mask: 0x01)            */
#define RTC_0_CONTROL_ALM2I_Pos           (2UL)                     /*!< RTC_0 CONTROL: ALM2I (Bit 2)                          */
#define RTC_0_CONTROL_ALM2I_Msk           (0x4UL)                   /*!< RTC_0 CONTROL: ALM2I (Bitfield-Mask: 0x01)            */
#define RTC_0_CONTROL_TMRCAP_Pos          (3UL)                     /*!< RTC_0 CONTROL: TMRCAP (Bit 3)                         */
#define RTC_0_CONTROL_TMRCAP_Msk          (0x8UL)                   /*!< RTC_0 CONTROL: TMRCAP (Bitfield-Mask: 0x01)           */
#define RTC_0_CONTROL_TMRSET_Pos          (4UL)                     /*!< RTC_0 CONTROL: TMRSET (Bit 4)                         */
#define RTC_0_CONTROL_TMRSET_Msk          (0x10UL)                  /*!< RTC_0 CONTROL: TMRSET (Bitfield-Mask: 0x01)           */
#define RTC_0_CONTROL_CLKVF_Pos           (5UL)                     /*!< RTC_0 CONTROL: CLKVF (Bit 5)                          */
#define RTC_0_CONTROL_CLKVF_Msk           (0x20UL)                  /*!< RTC_0 CONTROL: CLKVF (Bitfield-Mask: 0x01)            */
#define RTC_0_CONTROL_OSCFI_Pos           (6UL)                     /*!< RTC_0 CONTROL: OSCFI (Bit 6)                          */
#define RTC_0_CONTROL_OSCFI_Msk           (0x40UL)                  /*!< RTC_0 CONTROL: OSCFI (Bitfield-Mask: 0x01)            */
#define RTC_0_CONTROL_HSMDEN_Pos          (7UL)                     /*!< RTC_0 CONTROL: HSMDEN (Bit 7)                         */
#define RTC_0_CONTROL_HSMDEN_Msk          (0x80UL)                  /*!< RTC_0 CONTROL: HSMDEN (Bitfield-Mask: 0x01)           */
#define RTC_0_CONTROL_LRDYF_Pos           (8UL)                     /*!< RTC_0 CONTROL: LRDYF (Bit 8)                          */
#define RTC_0_CONTROL_LRDYF_Msk           (0x100UL)                 /*!< RTC_0 CONTROL: LRDYF (Bitfield-Mask: 0x01)            */
/* ========================================================  ALARM0  ========================================================= */
#define RTC_0_ALARM0_ALARM0_Pos           (0UL)                     /*!< RTC_0 ALARM0: ALARM0 (Bit 0)                          */
#define RTC_0_ALARM0_ALARM0_Msk           (0xffffffffUL)            /*!< RTC_0 ALARM0: ALARM0 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  ALARM1  ========================================================= */
#define RTC_0_ALARM1_ALARM1_Pos           (0UL)                     /*!< RTC_0 ALARM1: ALARM1 (Bit 0)                          */
#define RTC_0_ALARM1_ALARM1_Msk           (0xffffffffUL)            /*!< RTC_0 ALARM1: ALARM1 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  ALARM2  ========================================================= */
#define RTC_0_ALARM2_ALARM2_Pos           (0UL)                     /*!< RTC_0 ALARM2: ALARM2 (Bit 0)                          */
#define RTC_0_ALARM2_ALARM2_Msk           (0xffffffffUL)            /*!< RTC_0 ALARM2: ALARM2 (Bitfield-Mask: 0xffffffff)      */
/* ========================================================  SETCAP  ========================================================= */
#define RTC_0_SETCAP_SETCAP_Pos           (0UL)                     /*!< RTC_0 SETCAP: SETCAP (Bit 0)                          */
#define RTC_0_SETCAP_SETCAP_Msk           (0xffffffffUL)            /*!< RTC_0 SETCAP: SETCAP (Bitfield-Mask: 0xffffffff)      */
/* ======================================================  LFOCONTROL  ======================================================= */
#define RTC_0_LFOCONTROL_LFOSCEN_Pos      (31UL)                    /*!< RTC_0 LFOCONTROL: LFOSCEN (Bit 31)                    */
#define RTC_0_LFOCONTROL_LFOSCEN_Msk      (0x80000000UL)            /*!< RTC_0 LFOCONTROL: LFOSCEN (Bitfield-Mask: 0x01)       */
/* =======================================================  LFOSCADJ  ======================================================== */
#define RTC_0_LFOSCADJ_LFOSCADJ_Pos       (0UL)                     /*!< RTC_0 LFOSCADJ: LFOSCADJ (Bit 0)                      */
#define RTC_0_LFOSCADJ_LFOSCADJ_Msk       (0xfUL)                   /*!< RTC_0 LFOSCADJ: LFOSCADJ (Bitfield-Mask: 0x0f)        */


/* =========================================================================================================================== */
/* ================                                         RSTSRC_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  RESETEN  ======================================================== */
#define RSTSRC_0_RESETEN_VMONREN_Pos      (2UL)                     /*!< RSTSRC_0 RESETEN: VMONREN (Bit 2)                     */
#define RSTSRC_0_RESETEN_VMONREN_Msk      (0x4UL)                   /*!< RSTSRC_0 RESETEN: VMONREN (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETEN_MCDREN_Pos       (4UL)                     /*!< RSTSRC_0 RESETEN: MCDREN (Bit 4)                      */
#define RSTSRC_0_RESETEN_MCDREN_Msk       (0x10UL)                  /*!< RSTSRC_0 RESETEN: MCDREN (Bitfield-Mask: 0x01)        */
#define RSTSRC_0_RESETEN_WDTREN_Pos       (5UL)                     /*!< RSTSRC_0 RESETEN: WDTREN (Bit 5)                      */
#define RSTSRC_0_RESETEN_WDTREN_Msk       (0x20UL)                  /*!< RSTSRC_0 RESETEN: WDTREN (Bitfield-Mask: 0x01)        */
#define RSTSRC_0_RESETEN_SWREN_Pos        (6UL)                     /*!< RSTSRC_0 RESETEN: SWREN (Bit 6)                       */
#define RSTSRC_0_RESETEN_SWREN_Msk        (0x40UL)                  /*!< RSTSRC_0 RESETEN: SWREN (Bitfield-Mask: 0x01)         */
#define RSTSRC_0_RESETEN_CMP0REN_Pos      (7UL)                     /*!< RSTSRC_0 RESETEN: CMP0REN (Bit 7)                     */
#define RSTSRC_0_RESETEN_CMP0REN_Msk      (0x80UL)                  /*!< RSTSRC_0 RESETEN: CMP0REN (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETEN_CMP1REN_Pos      (8UL)                     /*!< RSTSRC_0 RESETEN: CMP1REN (Bit 8)                     */
#define RSTSRC_0_RESETEN_CMP1REN_Msk      (0x100UL)                 /*!< RSTSRC_0 RESETEN: CMP1REN (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETEN_USB0REN_Pos      (9UL)                     /*!< RSTSRC_0 RESETEN: USB0REN (Bit 9)                     */
#define RSTSRC_0_RESETEN_USB0REN_Msk      (0x200UL)                 /*!< RSTSRC_0 RESETEN: USB0REN (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETEN_RTC0REN_Pos      (10UL)                    /*!< RSTSRC_0 RESETEN: RTC0REN (Bit 10)                    */
#define RSTSRC_0_RESETEN_RTC0REN_Msk      (0x400UL)                 /*!< RSTSRC_0 RESETEN: RTC0REN (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETEN_WAKEREN_Pos      (11UL)                    /*!< RSTSRC_0 RESETEN: WAKEREN (Bit 11)                    */
#define RSTSRC_0_RESETEN_WAKEREN_Msk      (0x800UL)                 /*!< RSTSRC_0 RESETEN: WAKEREN (Bitfield-Mask: 0x01)       */
/* =======================================================  RESETFLAG  ======================================================= */
#define RSTSRC_0_RESETFLAG_PINRF_Pos      (0UL)                     /*!< RSTSRC_0 RESETFLAG: PINRF (Bit 0)                     */
#define RSTSRC_0_RESETFLAG_PINRF_Msk      (0x1UL)                   /*!< RSTSRC_0 RESETFLAG: PINRF (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETFLAG_PORRF_Pos      (1UL)                     /*!< RSTSRC_0 RESETFLAG: PORRF (Bit 1)                     */
#define RSTSRC_0_RESETFLAG_PORRF_Msk      (0x2UL)                   /*!< RSTSRC_0 RESETFLAG: PORRF (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETFLAG_VMONRF_Pos     (2UL)                     /*!< RSTSRC_0 RESETFLAG: VMONRF (Bit 2)                    */
#define RSTSRC_0_RESETFLAG_VMONRF_Msk     (0x4UL)                   /*!< RSTSRC_0 RESETFLAG: VMONRF (Bitfield-Mask: 0x01)      */
#define RSTSRC_0_RESETFLAG_CORERF_Pos     (3UL)                     /*!< RSTSRC_0 RESETFLAG: CORERF (Bit 3)                    */
#define RSTSRC_0_RESETFLAG_CORERF_Msk     (0x8UL)                   /*!< RSTSRC_0 RESETFLAG: CORERF (Bitfield-Mask: 0x01)      */
#define RSTSRC_0_RESETFLAG_MCDRF_Pos      (4UL)                     /*!< RSTSRC_0 RESETFLAG: MCDRF (Bit 4)                     */
#define RSTSRC_0_RESETFLAG_MCDRF_Msk      (0x10UL)                  /*!< RSTSRC_0 RESETFLAG: MCDRF (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETFLAG_WDTRF_Pos      (5UL)                     /*!< RSTSRC_0 RESETFLAG: WDTRF (Bit 5)                     */
#define RSTSRC_0_RESETFLAG_WDTRF_Msk      (0x20UL)                  /*!< RSTSRC_0 RESETFLAG: WDTRF (Bitfield-Mask: 0x01)       */
#define RSTSRC_0_RESETFLAG_SWRF_Pos       (6UL)                     /*!< RSTSRC_0 RESETFLAG: SWRF (Bit 6)                      */
#define RSTSRC_0_RESETFLAG_SWRF_Msk       (0x40UL)                  /*!< RSTSRC_0 RESETFLAG: SWRF (Bitfield-Mask: 0x01)        */
#define RSTSRC_0_RESETFLAG_CMP0RF_Pos     (7UL)                     /*!< RSTSRC_0 RESETFLAG: CMP0RF (Bit 7)                    */
#define RSTSRC_0_RESETFLAG_CMP0RF_Msk     (0x80UL)                  /*!< RSTSRC_0 RESETFLAG: CMP0RF (Bitfield-Mask: 0x01)      */
#define RSTSRC_0_RESETFLAG_CMP1RF_Pos     (8UL)                     /*!< RSTSRC_0 RESETFLAG: CMP1RF (Bit 8)                    */
#define RSTSRC_0_RESETFLAG_CMP1RF_Msk     (0x100UL)                 /*!< RSTSRC_0 RESETFLAG: CMP1RF (Bitfield-Mask: 0x01)      */
#define RSTSRC_0_RESETFLAG_USB0RF_Pos     (9UL)                     /*!< RSTSRC_0 RESETFLAG: USB0RF (Bit 9)                    */
#define RSTSRC_0_RESETFLAG_USB0RF_Msk     (0x200UL)                 /*!< RSTSRC_0 RESETFLAG: USB0RF (Bitfield-Mask: 0x01)      */
#define RSTSRC_0_RESETFLAG_RTC0RF_Pos     (10UL)                    /*!< RSTSRC_0 RESETFLAG: RTC0RF (Bit 10)                   */
#define RSTSRC_0_RESETFLAG_RTC0RF_Msk     (0x400UL)                 /*!< RSTSRC_0 RESETFLAG: RTC0RF (Bitfield-Mask: 0x01)      */
#define RSTSRC_0_RESETFLAG_WAKERF_Pos     (11UL)                    /*!< RSTSRC_0 RESETFLAG: WAKERF (Bit 11)                   */
#define RSTSRC_0_RESETFLAG_WAKERF_Msk     (0x800UL)                 /*!< RSTSRC_0 RESETFLAG: WAKERF (Bitfield-Mask: 0x01)      */
/* ========================================================  CONFIG  ========================================================= */
#define RSTSRC_0_CONFIG_PMSEL_Pos         (0UL)                     /*!< RSTSRC_0 CONFIG: PMSEL (Bit 0)                        */
#define RSTSRC_0_CONFIG_PMSEL_Msk         (0x1UL)                   /*!< RSTSRC_0 CONFIG: PMSEL (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                            SPI                                            ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
#define SPI_DATA_DATA_Pos                 (0UL)                     /*!< SPI DATA: DATA (Bit 0)                                */
#define SPI_DATA_DATA_Msk                 (0xffffffffUL)            /*!< SPI DATA: DATA (Bitfield-Mask: 0xffffffff)            */
/* ========================================================  CONTROL  ======================================================== */
#define SPI_CONTROL_RFRQI_Pos             (0UL)                     /*!< SPI CONTROL: RFRQI (Bit 0)                            */
#define SPI_CONTROL_RFRQI_Msk             (0x1UL)                   /*!< SPI CONTROL: RFRQI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_RFORI_Pos             (1UL)                     /*!< SPI CONTROL: RFORI (Bit 1)                            */
#define SPI_CONTROL_RFORI_Msk             (0x2UL)                   /*!< SPI CONTROL: RFORI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_TFRQI_Pos             (2UL)                     /*!< SPI CONTROL: TFRQI (Bit 2)                            */
#define SPI_CONTROL_TFRQI_Msk             (0x4UL)                   /*!< SPI CONTROL: TFRQI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_TFORI_Pos             (3UL)                     /*!< SPI CONTROL: TFORI (Bit 3)                            */
#define SPI_CONTROL_TFORI_Msk             (0x8UL)                   /*!< SPI CONTROL: TFORI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_SLVSELI_Pos           (4UL)                     /*!< SPI CONTROL: SLVSELI (Bit 4)                          */
#define SPI_CONTROL_SLVSELI_Msk           (0x10UL)                  /*!< SPI CONTROL: SLVSELI (Bitfield-Mask: 0x01)            */
#define SPI_CONTROL_MDFI_Pos              (5UL)                     /*!< SPI CONTROL: MDFI (Bit 5)                             */
#define SPI_CONTROL_MDFI_Msk              (0x20UL)                  /*!< SPI CONTROL: MDFI (Bitfield-Mask: 0x01)               */
#define SPI_CONTROL_URI_Pos               (6UL)                     /*!< SPI CONTROL: URI (Bit 6)                              */
#define SPI_CONTROL_URI_Msk               (0x40UL)                  /*!< SPI CONTROL: URI (Bitfield-Mask: 0x01)                */
#define SPI_CONTROL_SREI_Pos              (7UL)                     /*!< SPI CONTROL: SREI (Bit 7)                             */
#define SPI_CONTROL_SREI_Msk              (0x80UL)                  /*!< SPI CONTROL: SREI (Bitfield-Mask: 0x01)               */
#define SPI_CONTROL_RFILI_Pos             (8UL)                     /*!< SPI CONTROL: RFILI (Bit 8)                            */
#define SPI_CONTROL_RFILI_Msk             (0x100UL)                 /*!< SPI CONTROL: RFILI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_TFILI_Pos             (9UL)                     /*!< SPI CONTROL: TFILI (Bit 9)                            */
#define SPI_CONTROL_TFILI_Msk             (0x200UL)                 /*!< SPI CONTROL: TFILI (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_NSSSTS_Pos            (14UL)                    /*!< SPI CONTROL: NSSSTS (Bit 14)                          */
#define SPI_CONTROL_NSSSTS_Msk            (0x4000UL)                /*!< SPI CONTROL: NSSSTS (Bitfield-Mask: 0x01)             */
#define SPI_CONTROL_BUSYF_Pos             (15UL)                    /*!< SPI CONTROL: BUSYF (Bit 15)                           */
#define SPI_CONTROL_BUSYF_Msk             (0x8000UL)                /*!< SPI CONTROL: BUSYF (Bitfield-Mask: 0x01)              */
#define SPI_CONTROL_RFCNT_Pos             (16UL)                    /*!< SPI CONTROL: RFCNT (Bit 16)                           */
#define SPI_CONTROL_RFCNT_Msk             (0xf0000UL)               /*!< SPI CONTROL: RFCNT (Bitfield-Mask: 0x0f)              */
#define SPI_CONTROL_TFCNT_Pos             (20UL)                    /*!< SPI CONTROL: TFCNT (Bit 20)                           */
#define SPI_CONTROL_TFCNT_Msk             (0xf00000UL)              /*!< SPI CONTROL: TFCNT (Bitfield-Mask: 0x0f)              */
#define SPI_CONTROL_DBGMD_Pos             (24UL)                    /*!< SPI CONTROL: DBGMD (Bit 24)                           */
#define SPI_CONTROL_DBGMD_Msk             (0x1000000UL)             /*!< SPI CONTROL: DBGMD (Bitfield-Mask: 0x01)              */
/* ========================================================  CONFIG  ========================================================= */
#define SPI_CONFIG_RFRQIEN_Pos            (0UL)                     /*!< SPI CONFIG: RFRQIEN (Bit 0)                           */
#define SPI_CONFIG_RFRQIEN_Msk            (0x1UL)                   /*!< SPI CONFIG: RFRQIEN (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_RFORIEN_Pos            (1UL)                     /*!< SPI CONFIG: RFORIEN (Bit 1)                           */
#define SPI_CONFIG_RFORIEN_Msk            (0x2UL)                   /*!< SPI CONFIG: RFORIEN (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_TFRQIEN_Pos            (2UL)                     /*!< SPI CONFIG: TFRQIEN (Bit 2)                           */
#define SPI_CONFIG_TFRQIEN_Msk            (0x4UL)                   /*!< SPI CONFIG: TFRQIEN (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_TFORIEN_Pos            (3UL)                     /*!< SPI CONFIG: TFORIEN (Bit 3)                           */
#define SPI_CONFIG_TFORIEN_Msk            (0x8UL)                   /*!< SPI CONFIG: TFORIEN (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_SLVSELIEN_Pos          (4UL)                     /*!< SPI CONFIG: SLVSELIEN (Bit 4)                         */
#define SPI_CONFIG_SLVSELIEN_Msk          (0x10UL)                  /*!< SPI CONFIG: SLVSELIEN (Bitfield-Mask: 0x01)           */
#define SPI_CONFIG_MDFIEN_Pos             (5UL)                     /*!< SPI CONFIG: MDFIEN (Bit 5)                            */
#define SPI_CONFIG_MDFIEN_Msk             (0x20UL)                  /*!< SPI CONFIG: MDFIEN (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_URIEN_Pos              (6UL)                     /*!< SPI CONFIG: URIEN (Bit 6)                             */
#define SPI_CONFIG_URIEN_Msk              (0x40UL)                  /*!< SPI CONFIG: URIEN (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_SREIEN_Pos             (7UL)                     /*!< SPI CONFIG: SREIEN (Bit 7)                            */
#define SPI_CONFIG_SREIEN_Msk             (0x80UL)                  /*!< SPI CONFIG: SREIEN (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_SPIEN_Pos              (8UL)                     /*!< SPI CONFIG: SPIEN (Bit 8)                             */
#define SPI_CONFIG_SPIEN_Msk              (0x100UL)                 /*!< SPI CONFIG: SPIEN (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_MSTEN_Pos              (9UL)                     /*!< SPI CONFIG: MSTEN (Bit 9)                             */
#define SPI_CONFIG_MSTEN_Msk              (0x200UL)                 /*!< SPI CONFIG: MSTEN (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_CLKPOL_Pos             (10UL)                    /*!< SPI CONFIG: CLKPOL (Bit 10)                           */
#define SPI_CONFIG_CLKPOL_Msk             (0x400UL)                 /*!< SPI CONFIG: CLKPOL (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_CLKPHA_Pos             (11UL)                    /*!< SPI CONFIG: CLKPHA (Bit 11)                           */
#define SPI_CONFIG_CLKPHA_Msk             (0x800UL)                 /*!< SPI CONFIG: CLKPHA (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_NSSPOL_Pos             (12UL)                    /*!< SPI CONFIG: NSSPOL (Bit 12)                           */
#define SPI_CONFIG_NSSPOL_Msk             (0x1000UL)                /*!< SPI CONFIG: NSSPOL (Bitfield-Mask: 0x01)              */
#define SPI_CONFIG_DDIRSEL_Pos            (13UL)                    /*!< SPI CONFIG: DDIRSEL (Bit 13)                          */
#define SPI_CONFIG_DDIRSEL_Msk            (0x2000UL)                /*!< SPI CONFIG: DDIRSEL (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_NSSMD_Pos              (14UL)                    /*!< SPI CONFIG: NSSMD (Bit 14)                            */
#define SPI_CONFIG_NSSMD_Msk              (0xc000UL)                /*!< SPI CONFIG: NSSMD (Bitfield-Mask: 0x03)               */
#define SPI_CONFIG_RFTH_Pos               (16UL)                    /*!< SPI CONFIG: RFTH (Bit 16)                             */
#define SPI_CONFIG_RFTH_Msk               (0x30000UL)               /*!< SPI CONFIG: RFTH (Bitfield-Mask: 0x03)                */
#define SPI_CONFIG_TFTH_Pos               (18UL)                    /*!< SPI CONFIG: TFTH (Bit 18)                             */
#define SPI_CONFIG_TFTH_Msk               (0xc0000UL)               /*!< SPI CONFIG: TFTH (Bitfield-Mask: 0x03)                */
#define SPI_CONFIG_DSIZE_Pos              (20UL)                    /*!< SPI CONFIG: DSIZE (Bit 20)                            */
#define SPI_CONFIG_DSIZE_Msk              (0xf00000UL)              /*!< SPI CONFIG: DSIZE (Bitfield-Mask: 0x0f)               */
#define SPI_CONFIG_DMAEN_Pos              (24UL)                    /*!< SPI CONFIG: DMAEN (Bit 24)                            */
#define SPI_CONFIG_DMAEN_Msk              (0x1000000UL)             /*!< SPI CONFIG: DMAEN (Bitfield-Mask: 0x01)               */
#define SPI_CONFIG_RFIFOFL_Pos            (29UL)                    /*!< SPI CONFIG: RFIFOFL (Bit 29)                          */
#define SPI_CONFIG_RFIFOFL_Msk            (0x20000000UL)            /*!< SPI CONFIG: RFIFOFL (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_TFIFOFL_Pos            (30UL)                    /*!< SPI CONFIG: TFIFOFL (Bit 30)                          */
#define SPI_CONFIG_TFIFOFL_Msk            (0x40000000UL)            /*!< SPI CONFIG: TFIFOFL (Bitfield-Mask: 0x01)             */
#define SPI_CONFIG_RESET_Pos              (31UL)                    /*!< SPI CONFIG: RESET (Bit 31)                            */
#define SPI_CONFIG_RESET_Msk              (0x80000000UL)            /*!< SPI CONFIG: RESET (Bitfield-Mask: 0x01)               */
/* ========================================================  CLKRATE  ======================================================== */
#define SPI_CLKRATE_CLKDIV_Pos            (0UL)                     /*!< SPI CLKRATE: CLKDIV (Bit 0)                           */
#define SPI_CLKRATE_CLKDIV_Msk            (0xffffUL)                /*!< SPI CLKRATE: CLKDIV (Bitfield-Mask: 0xffff)           */
/* ========================================================  FSTATUS  ======================================================== */
#define SPI_FSTATUS_RFRPTR_Pos            (0UL)                     /*!< SPI FSTATUS: RFRPTR (Bit 0)                           */
#define SPI_FSTATUS_RFRPTR_Msk            (0xfUL)                   /*!< SPI FSTATUS: RFRPTR (Bitfield-Mask: 0x0f)             */
#define SPI_FSTATUS_RFWPTR_Pos            (4UL)                     /*!< SPI FSTATUS: RFWPTR (Bit 4)                           */
#define SPI_FSTATUS_RFWPTR_Msk            (0xf0UL)                  /*!< SPI FSTATUS: RFWPTR (Bitfield-Mask: 0x0f)             */
#define SPI_FSTATUS_TFRPTR_Pos            (8UL)                     /*!< SPI FSTATUS: TFRPTR (Bit 8)                           */
#define SPI_FSTATUS_TFRPTR_Msk            (0xf00UL)                 /*!< SPI FSTATUS: TFRPTR (Bitfield-Mask: 0x0f)             */
#define SPI_FSTATUS_TFWPTR_Pos            (12UL)                    /*!< SPI FSTATUS: TFWPTR (Bit 12)                          */
#define SPI_FSTATUS_TFWPTR_Msk            (0xf000UL)                /*!< SPI FSTATUS: TFWPTR (Bitfield-Mask: 0x0f)             */


/* =========================================================================================================================== */
/* ================                                           SSG_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define SSG_0_CONFIG_COUNT_Pos            (0UL)                     /*!< SSG_0 CONFIG: COUNT (Bit 0)                           */
#define SSG_0_CONFIG_COUNT_Msk            (0xfffUL)                 /*!< SSG_0 CONFIG: COUNT (Bitfield-Mask: 0xfff)            */
#define SSG_0_CONFIG_SSEL_Pos             (12UL)                    /*!< SSG_0 CONFIG: SSEL (Bit 12)                           */
#define SSG_0_CONFIG_SSEL_Msk             (0x1000UL)                /*!< SSG_0 CONFIG: SSEL (Bitfield-Mask: 0x01)              */
#define SSG_0_CONFIG_PHGFREN_Pos          (13UL)                    /*!< SSG_0 CONFIG: PHGFREN (Bit 13)                        */
#define SSG_0_CONFIG_PHGFREN_Msk          (0x2000UL)                /*!< SSG_0 CONFIG: PHGFREN (Bitfield-Mask: 0x01)           */
#define SSG_0_CONFIG_PUGFREN_Pos          (14UL)                    /*!< SSG_0 CONFIG: PUGFREN (Bit 14)                        */
#define SSG_0_CONFIG_PUGFREN_Msk          (0x4000UL)                /*!< SSG_0 CONFIG: PUGFREN (Bitfield-Mask: 0x01)           */
/* ========================================================  CONTROL  ======================================================== */
#define SSG_0_CONTROL_EX0INVEN_Pos        (0UL)                     /*!< SSG_0 CONTROL: EX0INVEN (Bit 0)                       */
#define SSG_0_CONTROL_EX0INVEN_Msk        (0x1UL)                   /*!< SSG_0 CONTROL: EX0INVEN (Bitfield-Mask: 0x01)         */
#define SSG_0_CONTROL_EX1INVEN_Pos        (1UL)                     /*!< SSG_0 CONTROL: EX1INVEN (Bit 1)                       */
#define SSG_0_CONTROL_EX1INVEN_Msk        (0x2UL)                   /*!< SSG_0 CONTROL: EX1INVEN (Bitfield-Mask: 0x01)         */
#define SSG_0_CONTROL_EX2INVEN_Pos        (2UL)                     /*!< SSG_0 CONTROL: EX2INVEN (Bit 2)                       */
#define SSG_0_CONTROL_EX2INVEN_Msk        (0x4UL)                   /*!< SSG_0 CONTROL: EX2INVEN (Bitfield-Mask: 0x01)         */
#define SSG_0_CONTROL_EX3INVEN_Pos        (3UL)                     /*!< SSG_0 CONTROL: EX3INVEN (Bit 3)                       */
#define SSG_0_CONTROL_EX3INVEN_Msk        (0x8UL)                   /*!< SSG_0 CONTROL: EX3INVEN (Bitfield-Mask: 0x01)         */
#define SSG_0_CONTROL_EX0EN_Pos           (4UL)                     /*!< SSG_0 CONTROL: EX0EN (Bit 4)                          */
#define SSG_0_CONTROL_EX0EN_Msk           (0x10UL)                  /*!< SSG_0 CONTROL: EX0EN (Bitfield-Mask: 0x01)            */
#define SSG_0_CONTROL_EX1EN_Pos           (5UL)                     /*!< SSG_0 CONTROL: EX1EN (Bit 5)                          */
#define SSG_0_CONTROL_EX1EN_Msk           (0x20UL)                  /*!< SSG_0 CONTROL: EX1EN (Bitfield-Mask: 0x01)            */
#define SSG_0_CONTROL_EX2EN_Pos           (6UL)                     /*!< SSG_0 CONTROL: EX2EN (Bit 6)                          */
#define SSG_0_CONTROL_EX2EN_Msk           (0x40UL)                  /*!< SSG_0 CONTROL: EX2EN (Bitfield-Mask: 0x01)            */
#define SSG_0_CONTROL_EX3EN_Pos           (7UL)                     /*!< SSG_0 CONTROL: EX3EN (Bit 7)                          */
#define SSG_0_CONTROL_EX3EN_Msk           (0x80UL)                  /*!< SSG_0 CONTROL: EX3EN (Bitfield-Mask: 0x01)            */
#define SSG_0_CONTROL_STATUS_Pos          (8UL)                     /*!< SSG_0 CONTROL: STATUS (Bit 8)                         */
#define SSG_0_CONTROL_STATUS_Msk          (0x100UL)                 /*!< SSG_0 CONTROL: STATUS (Bitfield-Mask: 0x01)           */


/* =========================================================================================================================== */
/* ================                                          TIMER_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define TIMER_0_CONFIG_LCLK_Pos           (0UL)                     /*!< TIMER_0 CONFIG: LCLK (Bit 0)                          */
#define TIMER_0_CONFIG_LCLK_Msk           (0x3UL)                   /*!< TIMER_0 CONFIG: LCLK (Bitfield-Mask: 0x03)            */
#define TIMER_0_CONFIG_LMSTREN_Pos        (4UL)                     /*!< TIMER_0 CONFIG: LMSTREN (Bit 4)                       */
#define TIMER_0_CONFIG_LMSTREN_Msk        (0x10UL)                  /*!< TIMER_0 CONFIG: LMSTREN (Bitfield-Mask: 0x01)         */
#define TIMER_0_CONFIG_SPLITEN_Pos        (5UL)                     /*!< TIMER_0 CONFIG: SPLITEN (Bit 5)                       */
#define TIMER_0_CONFIG_SPLITEN_Msk        (0x20UL)                  /*!< TIMER_0 CONFIG: SPLITEN (Bitfield-Mask: 0x01)         */
#define TIMER_0_CONFIG_LEXIEN_Pos         (6UL)                     /*!< TIMER_0 CONFIG: LEXIEN (Bit 6)                        */
#define TIMER_0_CONFIG_LEXIEN_Msk         (0x40UL)                  /*!< TIMER_0 CONFIG: LEXIEN (Bitfield-Mask: 0x01)          */
#define TIMER_0_CONFIG_LOVFIEN_Pos        (7UL)                     /*!< TIMER_0 CONFIG: LOVFIEN (Bit 7)                       */
#define TIMER_0_CONFIG_LOVFIEN_Msk        (0x80UL)                  /*!< TIMER_0 CONFIG: LOVFIEN (Bitfield-Mask: 0x01)         */
#define TIMER_0_CONFIG_LMD_Pos            (8UL)                     /*!< TIMER_0 CONFIG: LMD (Bit 8)                           */
#define TIMER_0_CONFIG_LMD_Msk            (0x700UL)                 /*!< TIMER_0 CONFIG: LMD (Bitfield-Mask: 0x07)             */
#define TIMER_0_CONFIG_LSTATE_Pos         (12UL)                    /*!< TIMER_0 CONFIG: LSTATE (Bit 12)                       */
#define TIMER_0_CONFIG_LSTATE_Msk         (0x1000UL)                /*!< TIMER_0 CONFIG: LSTATE (Bitfield-Mask: 0x01)          */
#define TIMER_0_CONFIG_LRUN_Pos           (13UL)                    /*!< TIMER_0 CONFIG: LRUN (Bit 13)                         */
#define TIMER_0_CONFIG_LRUN_Msk           (0x2000UL)                /*!< TIMER_0 CONFIG: LRUN (Bitfield-Mask: 0x01)            */
#define TIMER_0_CONFIG_LEXI_Pos           (14UL)                    /*!< TIMER_0 CONFIG: LEXI (Bit 14)                         */
#define TIMER_0_CONFIG_LEXI_Msk           (0x4000UL)                /*!< TIMER_0 CONFIG: LEXI (Bitfield-Mask: 0x01)            */
#define TIMER_0_CONFIG_LOVFI_Pos          (15UL)                    /*!< TIMER_0 CONFIG: LOVFI (Bit 15)                        */
#define TIMER_0_CONFIG_LOVFI_Msk          (0x8000UL)                /*!< TIMER_0 CONFIG: LOVFI (Bitfield-Mask: 0x01)           */
#define TIMER_0_CONFIG_HCLK_Pos           (16UL)                    /*!< TIMER_0 CONFIG: HCLK (Bit 16)                         */
#define TIMER_0_CONFIG_HCLK_Msk           (0x30000UL)               /*!< TIMER_0 CONFIG: HCLK (Bitfield-Mask: 0x03)            */
#define TIMER_0_CONFIG_MSTRUN_Pos         (19UL)                    /*!< TIMER_0 CONFIG: MSTRUN (Bit 19)                       */
#define TIMER_0_CONFIG_MSTRUN_Msk         (0x80000UL)               /*!< TIMER_0 CONFIG: MSTRUN (Bitfield-Mask: 0x01)          */
#define TIMER_0_CONFIG_HMSTREN_Pos        (20UL)                    /*!< TIMER_0 CONFIG: HMSTREN (Bit 20)                      */
#define TIMER_0_CONFIG_HMSTREN_Msk        (0x100000UL)              /*!< TIMER_0 CONFIG: HMSTREN (Bitfield-Mask: 0x01)         */
#define TIMER_0_CONFIG_DBGMD_Pos          (21UL)                    /*!< TIMER_0 CONFIG: DBGMD (Bit 21)                        */
#define TIMER_0_CONFIG_DBGMD_Msk          (0x200000UL)              /*!< TIMER_0 CONFIG: DBGMD (Bitfield-Mask: 0x01)           */
#define TIMER_0_CONFIG_HEXIEN_Pos         (22UL)                    /*!< TIMER_0 CONFIG: HEXIEN (Bit 22)                       */
#define TIMER_0_CONFIG_HEXIEN_Msk         (0x400000UL)              /*!< TIMER_0 CONFIG: HEXIEN (Bitfield-Mask: 0x01)          */
#define TIMER_0_CONFIG_HOVFIEN_Pos        (23UL)                    /*!< TIMER_0 CONFIG: HOVFIEN (Bit 23)                      */
#define TIMER_0_CONFIG_HOVFIEN_Msk        (0x800000UL)              /*!< TIMER_0 CONFIG: HOVFIEN (Bitfield-Mask: 0x01)         */
#define TIMER_0_CONFIG_HMD_Pos            (24UL)                    /*!< TIMER_0 CONFIG: HMD (Bit 24)                          */
#define TIMER_0_CONFIG_HMD_Msk            (0xf000000UL)             /*!< TIMER_0 CONFIG: HMD (Bitfield-Mask: 0x0f)             */
#define TIMER_0_CONFIG_HSTATE_Pos         (28UL)                    /*!< TIMER_0 CONFIG: HSTATE (Bit 28)                       */
#define TIMER_0_CONFIG_HSTATE_Msk         (0x10000000UL)            /*!< TIMER_0 CONFIG: HSTATE (Bitfield-Mask: 0x01)          */
#define TIMER_0_CONFIG_HRUN_Pos           (29UL)                    /*!< TIMER_0 CONFIG: HRUN (Bit 29)                         */
#define TIMER_0_CONFIG_HRUN_Msk           (0x20000000UL)            /*!< TIMER_0 CONFIG: HRUN (Bitfield-Mask: 0x01)            */
#define TIMER_0_CONFIG_HEXI_Pos           (30UL)                    /*!< TIMER_0 CONFIG: HEXI (Bit 30)                         */
#define TIMER_0_CONFIG_HEXI_Msk           (0x40000000UL)            /*!< TIMER_0 CONFIG: HEXI (Bitfield-Mask: 0x01)            */
#define TIMER_0_CONFIG_HOVFI_Pos          (31UL)                    /*!< TIMER_0 CONFIG: HOVFI (Bit 31)                        */
#define TIMER_0_CONFIG_HOVFI_Msk          (0x80000000UL)            /*!< TIMER_0 CONFIG: HOVFI (Bitfield-Mask: 0x01)           */
/* ========================================================  CLKDIV  ========================================================= */
#define TIMER_0_CLKDIV_CLKDIVRL_Pos       (0UL)                     /*!< TIMER_0 CLKDIV: CLKDIVRL (Bit 0)                      */
#define TIMER_0_CLKDIV_CLKDIVRL_Msk       (0xffUL)                  /*!< TIMER_0 CLKDIV: CLKDIVRL (Bitfield-Mask: 0xff)        */
#define TIMER_0_CLKDIV_CLKDIVCT_Pos       (16UL)                    /*!< TIMER_0 CLKDIV: CLKDIVCT (Bit 16)                     */
#define TIMER_0_CLKDIV_CLKDIVCT_Msk       (0xff0000UL)              /*!< TIMER_0 CLKDIV: CLKDIVCT (Bitfield-Mask: 0xff)        */
/* =========================================================  COUNT  ========================================================= */
#define TIMER_0_COUNT_LCOUNT_Pos          (0UL)                     /*!< TIMER_0 COUNT: LCOUNT (Bit 0)                         */
#define TIMER_0_COUNT_LCOUNT_Msk          (0xffffUL)                /*!< TIMER_0 COUNT: LCOUNT (Bitfield-Mask: 0xffff)         */
#define TIMER_0_COUNT_HCOUNT_Pos          (16UL)                    /*!< TIMER_0 COUNT: HCOUNT (Bit 16)                        */
#define TIMER_0_COUNT_HCOUNT_Msk          (0xffff0000UL)            /*!< TIMER_0 COUNT: HCOUNT (Bitfield-Mask: 0xffff)         */
/* ========================================================  CAPTURE  ======================================================== */
#define TIMER_0_CAPTURE_LCCR_Pos          (0UL)                     /*!< TIMER_0 CAPTURE: LCCR (Bit 0)                         */
#define TIMER_0_CAPTURE_LCCR_Msk          (0xffffUL)                /*!< TIMER_0 CAPTURE: LCCR (Bitfield-Mask: 0xffff)         */
#define TIMER_0_CAPTURE_HCCR_Pos          (16UL)                    /*!< TIMER_0 CAPTURE: HCCR (Bit 16)                        */
#define TIMER_0_CAPTURE_HCCR_Msk          (0xffff0000UL)            /*!< TIMER_0 CAPTURE: HCCR (Bitfield-Mask: 0xffff)         */


/* =========================================================================================================================== */
/* ================                                          TIMER_1                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define TIMER_1_CONFIG_LCLK_Pos           (0UL)                     /*!< TIMER_1 CONFIG: LCLK (Bit 0)                          */
#define TIMER_1_CONFIG_LCLK_Msk           (0x3UL)                   /*!< TIMER_1 CONFIG: LCLK (Bitfield-Mask: 0x03)            */
#define TIMER_1_CONFIG_LMSTREN_Pos        (4UL)                     /*!< TIMER_1 CONFIG: LMSTREN (Bit 4)                       */
#define TIMER_1_CONFIG_LMSTREN_Msk        (0x10UL)                  /*!< TIMER_1 CONFIG: LMSTREN (Bitfield-Mask: 0x01)         */
#define TIMER_1_CONFIG_SPLITEN_Pos        (5UL)                     /*!< TIMER_1 CONFIG: SPLITEN (Bit 5)                       */
#define TIMER_1_CONFIG_SPLITEN_Msk        (0x20UL)                  /*!< TIMER_1 CONFIG: SPLITEN (Bitfield-Mask: 0x01)         */
#define TIMER_1_CONFIG_LEXIEN_Pos         (6UL)                     /*!< TIMER_1 CONFIG: LEXIEN (Bit 6)                        */
#define TIMER_1_CONFIG_LEXIEN_Msk         (0x40UL)                  /*!< TIMER_1 CONFIG: LEXIEN (Bitfield-Mask: 0x01)          */
#define TIMER_1_CONFIG_LOVFIEN_Pos        (7UL)                     /*!< TIMER_1 CONFIG: LOVFIEN (Bit 7)                       */
#define TIMER_1_CONFIG_LOVFIEN_Msk        (0x80UL)                  /*!< TIMER_1 CONFIG: LOVFIEN (Bitfield-Mask: 0x01)         */
#define TIMER_1_CONFIG_LMD_Pos            (8UL)                     /*!< TIMER_1 CONFIG: LMD (Bit 8)                           */
#define TIMER_1_CONFIG_LMD_Msk            (0x700UL)                 /*!< TIMER_1 CONFIG: LMD (Bitfield-Mask: 0x07)             */
#define TIMER_1_CONFIG_LSTATE_Pos         (12UL)                    /*!< TIMER_1 CONFIG: LSTATE (Bit 12)                       */
#define TIMER_1_CONFIG_LSTATE_Msk         (0x1000UL)                /*!< TIMER_1 CONFIG: LSTATE (Bitfield-Mask: 0x01)          */
#define TIMER_1_CONFIG_LRUN_Pos           (13UL)                    /*!< TIMER_1 CONFIG: LRUN (Bit 13)                         */
#define TIMER_1_CONFIG_LRUN_Msk           (0x2000UL)                /*!< TIMER_1 CONFIG: LRUN (Bitfield-Mask: 0x01)            */
#define TIMER_1_CONFIG_LEXI_Pos           (14UL)                    /*!< TIMER_1 CONFIG: LEXI (Bit 14)                         */
#define TIMER_1_CONFIG_LEXI_Msk           (0x4000UL)                /*!< TIMER_1 CONFIG: LEXI (Bitfield-Mask: 0x01)            */
#define TIMER_1_CONFIG_LOVFI_Pos          (15UL)                    /*!< TIMER_1 CONFIG: LOVFI (Bit 15)                        */
#define TIMER_1_CONFIG_LOVFI_Msk          (0x8000UL)                /*!< TIMER_1 CONFIG: LOVFI (Bitfield-Mask: 0x01)           */
#define TIMER_1_CONFIG_HCLK_Pos           (16UL)                    /*!< TIMER_1 CONFIG: HCLK (Bit 16)                         */
#define TIMER_1_CONFIG_HCLK_Msk           (0x30000UL)               /*!< TIMER_1 CONFIG: HCLK (Bitfield-Mask: 0x03)            */
#define TIMER_1_CONFIG_MSTRUN_Pos         (19UL)                    /*!< TIMER_1 CONFIG: MSTRUN (Bit 19)                       */
#define TIMER_1_CONFIG_MSTRUN_Msk         (0x80000UL)               /*!< TIMER_1 CONFIG: MSTRUN (Bitfield-Mask: 0x01)          */
#define TIMER_1_CONFIG_HMSTREN_Pos        (20UL)                    /*!< TIMER_1 CONFIG: HMSTREN (Bit 20)                      */
#define TIMER_1_CONFIG_HMSTREN_Msk        (0x100000UL)              /*!< TIMER_1 CONFIG: HMSTREN (Bitfield-Mask: 0x01)         */
#define TIMER_1_CONFIG_DBGMD_Pos          (21UL)                    /*!< TIMER_1 CONFIG: DBGMD (Bit 21)                        */
#define TIMER_1_CONFIG_DBGMD_Msk          (0x200000UL)              /*!< TIMER_1 CONFIG: DBGMD (Bitfield-Mask: 0x01)           */
#define TIMER_1_CONFIG_HEXIEN_Pos         (22UL)                    /*!< TIMER_1 CONFIG: HEXIEN (Bit 22)                       */
#define TIMER_1_CONFIG_HEXIEN_Msk         (0x400000UL)              /*!< TIMER_1 CONFIG: HEXIEN (Bitfield-Mask: 0x01)          */
#define TIMER_1_CONFIG_HOVFIEN_Pos        (23UL)                    /*!< TIMER_1 CONFIG: HOVFIEN (Bit 23)                      */
#define TIMER_1_CONFIG_HOVFIEN_Msk        (0x800000UL)              /*!< TIMER_1 CONFIG: HOVFIEN (Bitfield-Mask: 0x01)         */
#define TIMER_1_CONFIG_HMD_Pos            (24UL)                    /*!< TIMER_1 CONFIG: HMD (Bit 24)                          */
#define TIMER_1_CONFIG_HMD_Msk            (0xf000000UL)             /*!< TIMER_1 CONFIG: HMD (Bitfield-Mask: 0x0f)             */
#define TIMER_1_CONFIG_HSTATE_Pos         (28UL)                    /*!< TIMER_1 CONFIG: HSTATE (Bit 28)                       */
#define TIMER_1_CONFIG_HSTATE_Msk         (0x10000000UL)            /*!< TIMER_1 CONFIG: HSTATE (Bitfield-Mask: 0x01)          */
#define TIMER_1_CONFIG_HRUN_Pos           (29UL)                    /*!< TIMER_1 CONFIG: HRUN (Bit 29)                         */
#define TIMER_1_CONFIG_HRUN_Msk           (0x20000000UL)            /*!< TIMER_1 CONFIG: HRUN (Bitfield-Mask: 0x01)            */
#define TIMER_1_CONFIG_HEXI_Pos           (30UL)                    /*!< TIMER_1 CONFIG: HEXI (Bit 30)                         */
#define TIMER_1_CONFIG_HEXI_Msk           (0x40000000UL)            /*!< TIMER_1 CONFIG: HEXI (Bitfield-Mask: 0x01)            */
#define TIMER_1_CONFIG_HOVFI_Pos          (31UL)                    /*!< TIMER_1 CONFIG: HOVFI (Bit 31)                        */
#define TIMER_1_CONFIG_HOVFI_Msk          (0x80000000UL)            /*!< TIMER_1 CONFIG: HOVFI (Bitfield-Mask: 0x01)           */
/* ========================================================  CLKDIV  ========================================================= */
#define TIMER_1_CLKDIV_CLKDIVRL_Pos       (0UL)                     /*!< TIMER_1 CLKDIV: CLKDIVRL (Bit 0)                      */
#define TIMER_1_CLKDIV_CLKDIVRL_Msk       (0xffUL)                  /*!< TIMER_1 CLKDIV: CLKDIVRL (Bitfield-Mask: 0xff)        */
#define TIMER_1_CLKDIV_CLKDIVCT_Pos       (16UL)                    /*!< TIMER_1 CLKDIV: CLKDIVCT (Bit 16)                     */
#define TIMER_1_CLKDIV_CLKDIVCT_Msk       (0xff0000UL)              /*!< TIMER_1 CLKDIV: CLKDIVCT (Bitfield-Mask: 0xff)        */
/* =========================================================  COUNT  ========================================================= */
#define TIMER_1_COUNT_LCOUNT_Pos          (0UL)                     /*!< TIMER_1 COUNT: LCOUNT (Bit 0)                         */
#define TIMER_1_COUNT_LCOUNT_Msk          (0xffffUL)                /*!< TIMER_1 COUNT: LCOUNT (Bitfield-Mask: 0xffff)         */
#define TIMER_1_COUNT_HCOUNT_Pos          (16UL)                    /*!< TIMER_1 COUNT: HCOUNT (Bit 16)                        */
#define TIMER_1_COUNT_HCOUNT_Msk          (0xffff0000UL)            /*!< TIMER_1 COUNT: HCOUNT (Bitfield-Mask: 0xffff)         */
/* ========================================================  CAPTURE  ======================================================== */
#define TIMER_1_CAPTURE_LCCR_Pos          (0UL)                     /*!< TIMER_1 CAPTURE: LCCR (Bit 0)                         */
#define TIMER_1_CAPTURE_LCCR_Msk          (0xffffUL)                /*!< TIMER_1 CAPTURE: LCCR (Bitfield-Mask: 0xffff)         */
#define TIMER_1_CAPTURE_HCCR_Pos          (16UL)                    /*!< TIMER_1 CAPTURE: HCCR (Bit 16)                        */
#define TIMER_1_CAPTURE_HCCR_Msk          (0xffff0000UL)            /*!< TIMER_1 CAPTURE: HCCR (Bitfield-Mask: 0xffff)         */


/* =========================================================================================================================== */
/* ================                                           UART                                            ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define UART_CONFIG_RSTRTEN_Pos           (0UL)                     /*!< UART CONFIG: RSTRTEN (Bit 0)                          */
#define UART_CONFIG_RSTRTEN_Msk           (0x1UL)                   /*!< UART CONFIG: RSTRTEN (Bitfield-Mask: 0x01)            */
#define UART_CONFIG_RPAREN_Pos            (1UL)                     /*!< UART CONFIG: RPAREN (Bit 1)                           */
#define UART_CONFIG_RPAREN_Msk            (0x2UL)                   /*!< UART CONFIG: RPAREN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_RSTPEN_Pos            (2UL)                     /*!< UART CONFIG: RSTPEN (Bit 2)                           */
#define UART_CONFIG_RSTPEN_Msk            (0x4UL)                   /*!< UART CONFIG: RSTPEN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_RSTPMD_Pos            (3UL)                     /*!< UART CONFIG: RSTPMD (Bit 3)                           */
#define UART_CONFIG_RSTPMD_Msk            (0x18UL)                  /*!< UART CONFIG: RSTPMD (Bitfield-Mask: 0x03)             */
#define UART_CONFIG_RPARMD_Pos            (5UL)                     /*!< UART CONFIG: RPARMD (Bit 5)                           */
#define UART_CONFIG_RPARMD_Msk            (0x60UL)                  /*!< UART CONFIG: RPARMD (Bitfield-Mask: 0x03)             */
#define UART_CONFIG_RDATLN_Pos            (8UL)                     /*!< UART CONFIG: RDATLN (Bit 8)                           */
#define UART_CONFIG_RDATLN_Msk            (0x700UL)                 /*!< UART CONFIG: RDATLN (Bitfield-Mask: 0x07)             */
#define UART_CONFIG_RSCEN_Pos             (12UL)                    /*!< UART CONFIG: RSCEN (Bit 12)                           */
#define UART_CONFIG_RSCEN_Msk             (0x1000UL)                /*!< UART CONFIG: RSCEN (Bitfield-Mask: 0x01)              */
#define UART_CONFIG_RIRDAEN_Pos           (13UL)                    /*!< UART CONFIG: RIRDAEN (Bit 13)                         */
#define UART_CONFIG_RIRDAEN_Msk           (0x2000UL)                /*!< UART CONFIG: RIRDAEN (Bitfield-Mask: 0x01)            */
#define UART_CONFIG_RINVEN_Pos            (14UL)                    /*!< UART CONFIG: RINVEN (Bit 14)                          */
#define UART_CONFIG_RINVEN_Msk            (0x4000UL)                /*!< UART CONFIG: RINVEN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_TSTRTEN_Pos           (16UL)                    /*!< UART CONFIG: TSTRTEN (Bit 16)                         */
#define UART_CONFIG_TSTRTEN_Msk           (0x10000UL)               /*!< UART CONFIG: TSTRTEN (Bitfield-Mask: 0x01)            */
#define UART_CONFIG_TPAREN_Pos            (17UL)                    /*!< UART CONFIG: TPAREN (Bit 17)                          */
#define UART_CONFIG_TPAREN_Msk            (0x20000UL)               /*!< UART CONFIG: TPAREN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_TSTPEN_Pos            (18UL)                    /*!< UART CONFIG: TSTPEN (Bit 18)                          */
#define UART_CONFIG_TSTPEN_Msk            (0x40000UL)               /*!< UART CONFIG: TSTPEN (Bitfield-Mask: 0x01)             */
#define UART_CONFIG_TSTPMD_Pos            (19UL)                    /*!< UART CONFIG: TSTPMD (Bit 19)                          */
#define UART_CONFIG_TSTPMD_Msk            (0x180000UL)              /*!< UART CONFIG: TSTPMD (Bitfield-Mask: 0x03)             */
#define UART_CONFIG_TPARMD_Pos            (21UL)                    /*!< UART CONFIG: TPARMD (Bit 21)                          */
#define UART_CONFIG_TPARMD_Msk            (0x600000UL)              /*!< UART CONFIG: TPARMD (Bitfield-Mask: 0x03)             */
#define UART_CONFIG_TDATLN_Pos            (24UL)                    /*!< UART CONFIG: TDATLN (Bit 24)                          */
#define UART_CONFIG_TDATLN_Msk            (0x7000000UL)             /*!< UART CONFIG: TDATLN (Bitfield-Mask: 0x07)             */
#define UART_CONFIG_TSCEN_Pos             (28UL)                    /*!< UART CONFIG: TSCEN (Bit 28)                           */
#define UART_CONFIG_TSCEN_Msk             (0x10000000UL)            /*!< UART CONFIG: TSCEN (Bitfield-Mask: 0x01)              */
#define UART_CONFIG_TIRDAEN_Pos           (29UL)                    /*!< UART CONFIG: TIRDAEN (Bit 29)                         */
#define UART_CONFIG_TIRDAEN_Msk           (0x20000000UL)            /*!< UART CONFIG: TIRDAEN (Bitfield-Mask: 0x01)            */
#define UART_CONFIG_TINVEN_Pos            (30UL)                    /*!< UART CONFIG: TINVEN (Bit 30)                          */
#define UART_CONFIG_TINVEN_Msk            (0x40000000UL)            /*!< UART CONFIG: TINVEN (Bitfield-Mask: 0x01)             */
/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* =========================================================  MODE  ========================================================== */
#define UART_MODE_DBGMD_Pos               (16UL)                    /*!< UART MODE: DBGMD (Bit 16)                             */
#define UART_MODE_DBGMD_Msk               (0x10000UL)               /*!< UART MODE: DBGMD (Bitfield-Mask: 0x01)                */
#define UART_MODE_LBMD_Pos                (18UL)                    /*!< UART MODE: LBMD (Bit 18)                              */
#define UART_MODE_LBMD_Msk                (0xc0000UL)               /*!< UART MODE: LBMD (Bitfield-Mask: 0x03)                 */
#define UART_MODE_DUPLEXMD_Pos            (27UL)                    /*!< UART MODE: DUPLEXMD (Bit 27)                          */
#define UART_MODE_DUPLEXMD_Msk            (0x8000000UL)             /*!< UART MODE: DUPLEXMD (Bitfield-Mask: 0x01)             */
#define UART_MODE_ITSEN_Pos               (30UL)                    /*!< UART MODE: ITSEN (Bit 30)                             */
#define UART_MODE_ITSEN_Msk               (0x40000000UL)            /*!< UART MODE: ITSEN (Bitfield-Mask: 0x01)                */
/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */
/* ========================================================  FLOWCN  ========================================================= */
#define UART_FLOWCN_RTS_Pos               (0UL)                     /*!< UART FLOWCN: RTS (Bit 0)                              */
#define UART_FLOWCN_RTS_Msk               (0x1UL)                   /*!< UART FLOWCN: RTS (Bitfield-Mask: 0x01)                */
#define UART_FLOWCN_RX_Pos                (1UL)                     /*!< UART FLOWCN: RX (Bit 1)                               */
#define UART_FLOWCN_RX_Msk                (0x2UL)                   /*!< UART FLOWCN: RX (Bitfield-Mask: 0x01)                 */
#define UART_FLOWCN_RTSINVEN_Pos          (5UL)                     /*!< UART FLOWCN: RTSINVEN (Bit 5)                         */
#define UART_FLOWCN_RTSINVEN_Msk          (0x20UL)                  /*!< UART FLOWCN: RTSINVEN (Bitfield-Mask: 0x01)           */
#define UART_FLOWCN_RTSTH_Pos             (6UL)                     /*!< UART FLOWCN: RTSTH (Bit 6)                            */
#define UART_FLOWCN_RTSTH_Msk             (0x40UL)                  /*!< UART FLOWCN: RTSTH (Bitfield-Mask: 0x01)              */
#define UART_FLOWCN_RTSEN_Pos             (7UL)                     /*!< UART FLOWCN: RTSEN (Bit 7)                            */
#define UART_FLOWCN_RTSEN_Msk             (0x80UL)                  /*!< UART FLOWCN: RTSEN (Bitfield-Mask: 0x01)              */
#define UART_FLOWCN_CTS_Pos               (16UL)                    /*!< UART FLOWCN: CTS (Bit 16)                             */
#define UART_FLOWCN_CTS_Msk               (0x10000UL)               /*!< UART FLOWCN: CTS (Bitfield-Mask: 0x01)                */
#define UART_FLOWCN_TX_Pos                (17UL)                    /*!< UART FLOWCN: TX (Bit 17)                              */
#define UART_FLOWCN_TX_Msk                (0x20000UL)               /*!< UART FLOWCN: TX (Bitfield-Mask: 0x01)                 */
#define UART_FLOWCN_CTSINVEN_Pos          (21UL)                    /*!< UART FLOWCN: CTSINVEN (Bit 21)                        */
#define UART_FLOWCN_CTSINVEN_Msk          (0x200000UL)              /*!< UART FLOWCN: CTSINVEN (Bitfield-Mask: 0x01)           */
#define UART_FLOWCN_CTSEN_Pos             (23UL)                    /*!< UART FLOWCN: CTSEN (Bit 23)                           */
#define UART_FLOWCN_CTSEN_Msk             (0x800000UL)              /*!< UART FLOWCN: CTSEN (Bitfield-Mask: 0x01)              */
#define UART_FLOWCN_TIRDAPW_Pos           (28UL)                    /*!< UART FLOWCN: TIRDAPW (Bit 28)                         */
#define UART_FLOWCN_TIRDAPW_Msk           (0x30000000UL)            /*!< UART FLOWCN: TIRDAPW (Bitfield-Mask: 0x03)            */
/* ======================================================  FLOWCN_SET  ======================================================= */
/* ======================================================  FLOWCN_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
#define UART_CONTROL_RFRMERI_Pos          (0UL)                     /*!< UART CONTROL: RFRMERI (Bit 0)                         */
#define UART_CONTROL_RFRMERI_Msk          (0x1UL)                   /*!< UART CONTROL: RFRMERI (Bitfield-Mask: 0x01)           */
#define UART_CONTROL_RPARERI_Pos          (1UL)                     /*!< UART CONTROL: RPARERI (Bit 1)                         */
#define UART_CONTROL_RPARERI_Msk          (0x2UL)                   /*!< UART CONTROL: RPARERI (Bitfield-Mask: 0x01)           */
#define UART_CONTROL_ROREI_Pos            (2UL)                     /*!< UART CONTROL: ROREI (Bit 2)                           */
#define UART_CONTROL_ROREI_Msk            (0x4UL)                   /*!< UART CONTROL: ROREI (Bitfield-Mask: 0x01)             */
#define UART_CONTROL_RDREQI_Pos           (3UL)                     /*!< UART CONTROL: RDREQI (Bit 3)                          */
#define UART_CONTROL_RDREQI_Msk           (0x8UL)                   /*!< UART CONTROL: RDREQI (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_RERIEN_Pos           (5UL)                     /*!< UART CONTROL: RERIEN (Bit 5)                          */
#define UART_CONTROL_RERIEN_Msk           (0x20UL)                  /*!< UART CONTROL: RERIEN (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_RDREQIEN_Pos         (6UL)                     /*!< UART CONTROL: RDREQIEN (Bit 6)                        */
#define UART_CONTROL_RDREQIEN_Msk         (0x40UL)                  /*!< UART CONTROL: RDREQIEN (Bitfield-Mask: 0x01)          */
#define UART_CONTROL_MATMD_Pos            (8UL)                     /*!< UART CONTROL: MATMD (Bit 8)                           */
#define UART_CONTROL_MATMD_Msk            (0x300UL)                 /*!< UART CONTROL: MATMD (Bitfield-Mask: 0x03)             */
#define UART_CONTROL_RABDEN_Pos           (10UL)                    /*!< UART CONTROL: RABDEN (Bit 10)                         */
#define UART_CONTROL_RABDEN_Msk           (0x400UL)                 /*!< UART CONTROL: RABDEN (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_RBUSYF_Pos           (11UL)                    /*!< UART CONTROL: RBUSYF (Bit 11)                         */
#define UART_CONTROL_RBUSYF_Msk           (0x800UL)                 /*!< UART CONTROL: RBUSYF (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_RBIT_Pos             (12UL)                    /*!< UART CONTROL: RBIT (Bit 12)                           */
#define UART_CONTROL_RBIT_Msk             (0x1000UL)                /*!< UART CONTROL: RBIT (Bitfield-Mask: 0x01)              */
#define UART_CONTROL_ROSEN_Pos            (13UL)                    /*!< UART CONTROL: ROSEN (Bit 13)                          */
#define UART_CONTROL_ROSEN_Msk            (0x2000UL)                /*!< UART CONTROL: ROSEN (Bitfield-Mask: 0x01)             */
#define UART_CONTROL_RINH_Pos             (14UL)                    /*!< UART CONTROL: RINH (Bit 14)                           */
#define UART_CONTROL_RINH_Msk             (0x4000UL)                /*!< UART CONTROL: RINH (Bitfield-Mask: 0x01)              */
#define UART_CONTROL_REN_Pos              (15UL)                    /*!< UART CONTROL: REN (Bit 15)                            */
#define UART_CONTROL_REN_Msk              (0x8000UL)                /*!< UART CONTROL: REN (Bitfield-Mask: 0x01)               */
#define UART_CONTROL_TSCERI_Pos           (16UL)                    /*!< UART CONTROL: TSCERI (Bit 16)                         */
#define UART_CONTROL_TSCERI_Msk           (0x10000UL)               /*!< UART CONTROL: TSCERI (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TDREQI_Pos           (18UL)                    /*!< UART CONTROL: TDREQI (Bit 18)                         */
#define UART_CONTROL_TDREQI_Msk           (0x40000UL)               /*!< UART CONTROL: TDREQI (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TCPTI_Pos            (19UL)                    /*!< UART CONTROL: TCPTI (Bit 19)                          */
#define UART_CONTROL_TCPTI_Msk            (0x80000UL)               /*!< UART CONTROL: TCPTI (Bitfield-Mask: 0x01)             */
#define UART_CONTROL_TCPTTH_Pos           (20UL)                    /*!< UART CONTROL: TCPTTH (Bit 20)                         */
#define UART_CONTROL_TCPTTH_Msk           (0x100000UL)              /*!< UART CONTROL: TCPTTH (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TERIEN_Pos           (21UL)                    /*!< UART CONTROL: TERIEN (Bit 21)                         */
#define UART_CONTROL_TERIEN_Msk           (0x200000UL)              /*!< UART CONTROL: TERIEN (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TDREQIEN_Pos         (22UL)                    /*!< UART CONTROL: TDREQIEN (Bit 22)                       */
#define UART_CONTROL_TDREQIEN_Msk         (0x400000UL)              /*!< UART CONTROL: TDREQIEN (Bitfield-Mask: 0x01)          */
#define UART_CONTROL_TCPTIEN_Pos          (23UL)                    /*!< UART CONTROL: TCPTIEN (Bit 23)                        */
#define UART_CONTROL_TCPTIEN_Msk          (0x800000UL)              /*!< UART CONTROL: TCPTIEN (Bitfield-Mask: 0x01)           */
#define UART_CONTROL_TBUSYF_Pos           (27UL)                    /*!< UART CONTROL: TBUSYF (Bit 27)                         */
#define UART_CONTROL_TBUSYF_Msk           (0x8000000UL)             /*!< UART CONTROL: TBUSYF (Bitfield-Mask: 0x01)            */
#define UART_CONTROL_TBIT_Pos             (28UL)                    /*!< UART CONTROL: TBIT (Bit 28)                           */
#define UART_CONTROL_TBIT_Msk             (0x10000000UL)            /*!< UART CONTROL: TBIT (Bitfield-Mask: 0x01)              */
#define UART_CONTROL_TINH_Pos             (30UL)                    /*!< UART CONTROL: TINH (Bit 30)                           */
#define UART_CONTROL_TINH_Msk             (0x40000000UL)            /*!< UART CONTROL: TINH (Bitfield-Mask: 0x01)              */
#define UART_CONTROL_TEN_Pos              (31UL)                    /*!< UART CONTROL: TEN (Bit 31)                            */
#define UART_CONTROL_TEN_Msk              (0x80000000UL)            /*!< UART CONTROL: TEN (Bitfield-Mask: 0x01)               */
/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  IPDELAY  ======================================================== */
#define UART_IPDELAY_IPDELAY_Pos          (16UL)                    /*!< UART IPDELAY: IPDELAY (Bit 16)                        */
#define UART_IPDELAY_IPDELAY_Msk          (0xff0000UL)              /*!< UART IPDELAY: IPDELAY (Bitfield-Mask: 0xff)           */
/* =======================================================  BAUDRATE  ======================================================== */
#define UART_BAUDRATE_RBAUD_Pos           (0UL)                     /*!< UART BAUDRATE: RBAUD (Bit 0)                          */
#define UART_BAUDRATE_RBAUD_Msk           (0xffffUL)                /*!< UART BAUDRATE: RBAUD (Bitfield-Mask: 0xffff)          */
#define UART_BAUDRATE_TBAUD_Pos           (16UL)                    /*!< UART BAUDRATE: TBAUD (Bit 16)                         */
#define UART_BAUDRATE_TBAUD_Msk           (0xffff0000UL)            /*!< UART BAUDRATE: TBAUD (Bitfield-Mask: 0xffff)          */
/* ========================================================  FIFOCN  ========================================================= */
#define UART_FIFOCN_RCNT_Pos              (0UL)                     /*!< UART FIFOCN: RCNT (Bit 0)                             */
#define UART_FIFOCN_RCNT_Msk              (0x7UL)                   /*!< UART FIFOCN: RCNT (Bitfield-Mask: 0x07)               */
#define UART_FIFOCN_RFTH_Pos              (4UL)                     /*!< UART FIFOCN: RFTH (Bit 4)                             */
#define UART_FIFOCN_RFTH_Msk              (0x30UL)                  /*!< UART FIFOCN: RFTH (Bitfield-Mask: 0x03)               */
#define UART_FIFOCN_RFIFOFL_Pos           (8UL)                     /*!< UART FIFOCN: RFIFOFL (Bit 8)                          */
#define UART_FIFOCN_RFIFOFL_Msk           (0x100UL)                 /*!< UART FIFOCN: RFIFOFL (Bitfield-Mask: 0x01)            */
#define UART_FIFOCN_RFERI_Pos             (9UL)                     /*!< UART FIFOCN: RFERI (Bit 9)                            */
#define UART_FIFOCN_RFERI_Msk             (0x200UL)                 /*!< UART FIFOCN: RFERI (Bitfield-Mask: 0x01)              */
#define UART_FIFOCN_RSRFULLF_Pos          (10UL)                    /*!< UART FIFOCN: RSRFULLF (Bit 10)                        */
#define UART_FIFOCN_RSRFULLF_Msk          (0x400UL)                 /*!< UART FIFOCN: RSRFULLF (Bitfield-Mask: 0x01)           */
#define UART_FIFOCN_TCNT_Pos              (16UL)                    /*!< UART FIFOCN: TCNT (Bit 16)                            */
#define UART_FIFOCN_TCNT_Msk              (0x70000UL)               /*!< UART FIFOCN: TCNT (Bitfield-Mask: 0x07)               */
#define UART_FIFOCN_TFTH_Pos              (20UL)                    /*!< UART FIFOCN: TFTH (Bit 20)                            */
#define UART_FIFOCN_TFTH_Msk              (0x300000UL)              /*!< UART FIFOCN: TFTH (Bitfield-Mask: 0x03)               */
#define UART_FIFOCN_TFIFOFL_Pos           (24UL)                    /*!< UART FIFOCN: TFIFOFL (Bit 24)                         */
#define UART_FIFOCN_TFIFOFL_Msk           (0x1000000UL)             /*!< UART FIFOCN: TFIFOFL (Bitfield-Mask: 0x01)            */
#define UART_FIFOCN_TFERI_Pos             (25UL)                    /*!< UART FIFOCN: TFERI (Bit 25)                           */
#define UART_FIFOCN_TFERI_Msk             (0x2000000UL)             /*!< UART FIFOCN: TFERI (Bitfield-Mask: 0x01)              */
#define UART_FIFOCN_TSRFULLF_Pos          (26UL)                    /*!< UART FIFOCN: TSRFULLF (Bit 26)                        */
#define UART_FIFOCN_TSRFULLF_Msk          (0x4000000UL)             /*!< UART FIFOCN: TSRFULLF (Bitfield-Mask: 0x01)           */
/* ======================================================  FIFOCN_SET  ======================================================= */
/* ======================================================  FIFOCN_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           USART                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
#define USART_CONFIG_RSTRTEN_Pos          (0UL)                     /*!< USART CONFIG: RSTRTEN (Bit 0)                         */
#define USART_CONFIG_RSTRTEN_Msk          (0x1UL)                   /*!< USART CONFIG: RSTRTEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_RPAREN_Pos           (1UL)                     /*!< USART CONFIG: RPAREN (Bit 1)                          */
#define USART_CONFIG_RPAREN_Msk           (0x2UL)                   /*!< USART CONFIG: RPAREN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_RSTPEN_Pos           (2UL)                     /*!< USART CONFIG: RSTPEN (Bit 2)                          */
#define USART_CONFIG_RSTPEN_Msk           (0x4UL)                   /*!< USART CONFIG: RSTPEN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_RSTPMD_Pos           (3UL)                     /*!< USART CONFIG: RSTPMD (Bit 3)                          */
#define USART_CONFIG_RSTPMD_Msk           (0x18UL)                  /*!< USART CONFIG: RSTPMD (Bitfield-Mask: 0x03)            */
#define USART_CONFIG_RPARMD_Pos           (5UL)                     /*!< USART CONFIG: RPARMD (Bit 5)                          */
#define USART_CONFIG_RPARMD_Msk           (0x60UL)                  /*!< USART CONFIG: RPARMD (Bitfield-Mask: 0x03)            */
#define USART_CONFIG_RDATLN_Pos           (8UL)                     /*!< USART CONFIG: RDATLN (Bit 8)                          */
#define USART_CONFIG_RDATLN_Msk           (0x700UL)                 /*!< USART CONFIG: RDATLN (Bitfield-Mask: 0x07)            */
#define USART_CONFIG_RSCEN_Pos            (12UL)                    /*!< USART CONFIG: RSCEN (Bit 12)                          */
#define USART_CONFIG_RSCEN_Msk            (0x1000UL)                /*!< USART CONFIG: RSCEN (Bitfield-Mask: 0x01)             */
#define USART_CONFIG_RIRDAEN_Pos          (13UL)                    /*!< USART CONFIG: RIRDAEN (Bit 13)                        */
#define USART_CONFIG_RIRDAEN_Msk          (0x2000UL)                /*!< USART CONFIG: RIRDAEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_RINVEN_Pos           (14UL)                    /*!< USART CONFIG: RINVEN (Bit 14)                         */
#define USART_CONFIG_RINVEN_Msk           (0x4000UL)                /*!< USART CONFIG: RINVEN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_RSYNCEN_Pos          (15UL)                    /*!< USART CONFIG: RSYNCEN (Bit 15)                        */
#define USART_CONFIG_RSYNCEN_Msk          (0x8000UL)                /*!< USART CONFIG: RSYNCEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_TSTRTEN_Pos          (16UL)                    /*!< USART CONFIG: TSTRTEN (Bit 16)                        */
#define USART_CONFIG_TSTRTEN_Msk          (0x10000UL)               /*!< USART CONFIG: TSTRTEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_TPAREN_Pos           (17UL)                    /*!< USART CONFIG: TPAREN (Bit 17)                         */
#define USART_CONFIG_TPAREN_Msk           (0x20000UL)               /*!< USART CONFIG: TPAREN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_TSTPEN_Pos           (18UL)                    /*!< USART CONFIG: TSTPEN (Bit 18)                         */
#define USART_CONFIG_TSTPEN_Msk           (0x40000UL)               /*!< USART CONFIG: TSTPEN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_TSTPMD_Pos           (19UL)                    /*!< USART CONFIG: TSTPMD (Bit 19)                         */
#define USART_CONFIG_TSTPMD_Msk           (0x180000UL)              /*!< USART CONFIG: TSTPMD (Bitfield-Mask: 0x03)            */
#define USART_CONFIG_TPARMD_Pos           (21UL)                    /*!< USART CONFIG: TPARMD (Bit 21)                         */
#define USART_CONFIG_TPARMD_Msk           (0x600000UL)              /*!< USART CONFIG: TPARMD (Bitfield-Mask: 0x03)            */
#define USART_CONFIG_TDATLN_Pos           (24UL)                    /*!< USART CONFIG: TDATLN (Bit 24)                         */
#define USART_CONFIG_TDATLN_Msk           (0x7000000UL)             /*!< USART CONFIG: TDATLN (Bitfield-Mask: 0x07)            */
#define USART_CONFIG_TSCEN_Pos            (28UL)                    /*!< USART CONFIG: TSCEN (Bit 28)                          */
#define USART_CONFIG_TSCEN_Msk            (0x10000000UL)            /*!< USART CONFIG: TSCEN (Bitfield-Mask: 0x01)             */
#define USART_CONFIG_TIRDAEN_Pos          (29UL)                    /*!< USART CONFIG: TIRDAEN (Bit 29)                        */
#define USART_CONFIG_TIRDAEN_Msk          (0x20000000UL)            /*!< USART CONFIG: TIRDAEN (Bitfield-Mask: 0x01)           */
#define USART_CONFIG_TINVEN_Pos           (30UL)                    /*!< USART CONFIG: TINVEN (Bit 30)                         */
#define USART_CONFIG_TINVEN_Msk           (0x40000000UL)            /*!< USART CONFIG: TINVEN (Bitfield-Mask: 0x01)            */
#define USART_CONFIG_TSYNCEN_Pos          (31UL)                    /*!< USART CONFIG: TSYNCEN (Bit 31)                        */
#define USART_CONFIG_TSYNCEN_Msk          (0x80000000UL)            /*!< USART CONFIG: TSYNCEN (Bitfield-Mask: 0x01)           */
/* =========================================================  MODE  ========================================================== */
#define USART_MODE_DBGMD_Pos              (16UL)                    /*!< USART MODE: DBGMD (Bit 16)                            */
#define USART_MODE_DBGMD_Msk              (0x10000UL)               /*!< USART MODE: DBGMD (Bitfield-Mask: 0x01)               */
#define USART_MODE_LBMD_Pos               (18UL)                    /*!< USART MODE: LBMD (Bit 18)                             */
#define USART_MODE_LBMD_Msk               (0xc0000UL)               /*!< USART MODE: LBMD (Bitfield-Mask: 0x03)                */
#define USART_MODE_STPSTCLK_Pos           (21UL)                    /*!< USART MODE: STPSTCLK (Bit 21)                         */
#define USART_MODE_STPSTCLK_Msk           (0x200000UL)              /*!< USART MODE: STPSTCLK (Bitfield-Mask: 0x01)            */
#define USART_MODE_STRTSTCLK_Pos          (22UL)                    /*!< USART MODE: STRTSTCLK (Bit 22)                        */
#define USART_MODE_STRTSTCLK_Msk          (0x400000UL)              /*!< USART MODE: STRTSTCLK (Bitfield-Mask: 0x01)           */
#define USART_MODE_ISTCLK_Pos             (23UL)                    /*!< USART MODE: ISTCLK (Bit 23)                           */
#define USART_MODE_ISTCLK_Msk             (0x800000UL)              /*!< USART MODE: ISTCLK (Bitfield-Mask: 0x01)              */
#define USART_MODE_DUPLEXMD_Pos           (27UL)                    /*!< USART MODE: DUPLEXMD (Bit 27)                         */
#define USART_MODE_DUPLEXMD_Msk           (0x8000000UL)             /*!< USART MODE: DUPLEXMD (Bitfield-Mask: 0x01)            */
#define USART_MODE_CLKIDLE_Pos            (28UL)                    /*!< USART MODE: CLKIDLE (Bit 28)                          */
#define USART_MODE_CLKIDLE_Msk            (0x10000000UL)            /*!< USART MODE: CLKIDLE (Bitfield-Mask: 0x01)             */
#define USART_MODE_CLKESEL_Pos            (29UL)                    /*!< USART MODE: CLKESEL (Bit 29)                          */
#define USART_MODE_CLKESEL_Msk            (0x20000000UL)            /*!< USART MODE: CLKESEL (Bitfield-Mask: 0x01)             */
#define USART_MODE_ITSEN_Pos              (30UL)                    /*!< USART MODE: ITSEN (Bit 30)                            */
#define USART_MODE_ITSEN_Msk              (0x40000000UL)            /*!< USART MODE: ITSEN (Bitfield-Mask: 0x01)               */
#define USART_MODE_OPMD_Pos               (31UL)                    /*!< USART MODE: OPMD (Bit 31)                             */
#define USART_MODE_OPMD_Msk               (0x80000000UL)            /*!< USART MODE: OPMD (Bitfield-Mask: 0x01)                */
/* ========================================================  FLOWCN  ========================================================= */
#define USART_FLOWCN_RTS_Pos              (0UL)                     /*!< USART FLOWCN: RTS (Bit 0)                             */
#define USART_FLOWCN_RTS_Msk              (0x1UL)                   /*!< USART FLOWCN: RTS (Bitfield-Mask: 0x01)               */
#define USART_FLOWCN_RX_Pos               (1UL)                     /*!< USART FLOWCN: RX (Bit 1)                              */
#define USART_FLOWCN_RX_Msk               (0x2UL)                   /*!< USART FLOWCN: RX (Bitfield-Mask: 0x01)                */
#define USART_FLOWCN_RTSINVEN_Pos         (5UL)                     /*!< USART FLOWCN: RTSINVEN (Bit 5)                        */
#define USART_FLOWCN_RTSINVEN_Msk         (0x20UL)                  /*!< USART FLOWCN: RTSINVEN (Bitfield-Mask: 0x01)          */
#define USART_FLOWCN_RTSTH_Pos            (6UL)                     /*!< USART FLOWCN: RTSTH (Bit 6)                           */
#define USART_FLOWCN_RTSTH_Msk            (0x40UL)                  /*!< USART FLOWCN: RTSTH (Bitfield-Mask: 0x01)             */
#define USART_FLOWCN_RTSEN_Pos            (7UL)                     /*!< USART FLOWCN: RTSEN (Bit 7)                           */
#define USART_FLOWCN_RTSEN_Msk            (0x80UL)                  /*!< USART FLOWCN: RTSEN (Bitfield-Mask: 0x01)             */
#define USART_FLOWCN_CTS_Pos              (16UL)                    /*!< USART FLOWCN: CTS (Bit 16)                            */
#define USART_FLOWCN_CTS_Msk              (0x10000UL)               /*!< USART FLOWCN: CTS (Bitfield-Mask: 0x01)               */
#define USART_FLOWCN_TX_Pos               (17UL)                    /*!< USART FLOWCN: TX (Bit 17)                             */
#define USART_FLOWCN_TX_Msk               (0x20000UL)               /*!< USART FLOWCN: TX (Bitfield-Mask: 0x01)                */
#define USART_FLOWCN_UCLK_Pos             (18UL)                    /*!< USART FLOWCN: UCLK (Bit 18)                           */
#define USART_FLOWCN_UCLK_Msk             (0x40000UL)               /*!< USART FLOWCN: UCLK (Bitfield-Mask: 0x01)              */
#define USART_FLOWCN_CTSINVEN_Pos         (21UL)                    /*!< USART FLOWCN: CTSINVEN (Bit 21)                       */
#define USART_FLOWCN_CTSINVEN_Msk         (0x200000UL)              /*!< USART FLOWCN: CTSINVEN (Bitfield-Mask: 0x01)          */
#define USART_FLOWCN_CTSEN_Pos            (23UL)                    /*!< USART FLOWCN: CTSEN (Bit 23)                          */
#define USART_FLOWCN_CTSEN_Msk            (0x800000UL)              /*!< USART FLOWCN: CTSEN (Bitfield-Mask: 0x01)             */
#define USART_FLOWCN_TIRDAPW_Pos          (28UL)                    /*!< USART FLOWCN: TIRDAPW (Bit 28)                        */
#define USART_FLOWCN_TIRDAPW_Msk          (0x30000000UL)            /*!< USART FLOWCN: TIRDAPW (Bitfield-Mask: 0x03)           */
/* ========================================================  CONTROL  ======================================================== */
#define USART_CONTROL_RFRMERI_Pos         (0UL)                     /*!< USART CONTROL: RFRMERI (Bit 0)                        */
#define USART_CONTROL_RFRMERI_Msk         (0x1UL)                   /*!< USART CONTROL: RFRMERI (Bitfield-Mask: 0x01)          */
#define USART_CONTROL_RPARERI_Pos         (1UL)                     /*!< USART CONTROL: RPARERI (Bit 1)                        */
#define USART_CONTROL_RPARERI_Msk         (0x2UL)                   /*!< USART CONTROL: RPARERI (Bitfield-Mask: 0x01)          */
#define USART_CONTROL_ROREI_Pos           (2UL)                     /*!< USART CONTROL: ROREI (Bit 2)                          */
#define USART_CONTROL_ROREI_Msk           (0x4UL)                   /*!< USART CONTROL: ROREI (Bitfield-Mask: 0x01)            */
#define USART_CONTROL_RDREQI_Pos          (3UL)                     /*!< USART CONTROL: RDREQI (Bit 3)                         */
#define USART_CONTROL_RDREQI_Msk          (0x8UL)                   /*!< USART CONTROL: RDREQI (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_RERIEN_Pos          (5UL)                     /*!< USART CONTROL: RERIEN (Bit 5)                         */
#define USART_CONTROL_RERIEN_Msk          (0x20UL)                  /*!< USART CONTROL: RERIEN (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_RDREQIEN_Pos        (6UL)                     /*!< USART CONTROL: RDREQIEN (Bit 6)                       */
#define USART_CONTROL_RDREQIEN_Msk        (0x40UL)                  /*!< USART CONTROL: RDREQIEN (Bitfield-Mask: 0x01)         */
#define USART_CONTROL_MATMD_Pos           (8UL)                     /*!< USART CONTROL: MATMD (Bit 8)                          */
#define USART_CONTROL_MATMD_Msk           (0x300UL)                 /*!< USART CONTROL: MATMD (Bitfield-Mask: 0x03)            */
#define USART_CONTROL_RABDEN_Pos          (10UL)                    /*!< USART CONTROL: RABDEN (Bit 10)                        */
#define USART_CONTROL_RABDEN_Msk          (0x400UL)                 /*!< USART CONTROL: RABDEN (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_RBUSYF_Pos          (11UL)                    /*!< USART CONTROL: RBUSYF (Bit 11)                        */
#define USART_CONTROL_RBUSYF_Msk          (0x800UL)                 /*!< USART CONTROL: RBUSYF (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_RBIT_Pos            (12UL)                    /*!< USART CONTROL: RBIT (Bit 12)                          */
#define USART_CONTROL_RBIT_Msk            (0x1000UL)                /*!< USART CONTROL: RBIT (Bitfield-Mask: 0x01)             */
#define USART_CONTROL_ROSEN_Pos           (13UL)                    /*!< USART CONTROL: ROSEN (Bit 13)                         */
#define USART_CONTROL_ROSEN_Msk           (0x2000UL)                /*!< USART CONTROL: ROSEN (Bitfield-Mask: 0x01)            */
#define USART_CONTROL_RINH_Pos            (14UL)                    /*!< USART CONTROL: RINH (Bit 14)                          */
#define USART_CONTROL_RINH_Msk            (0x4000UL)                /*!< USART CONTROL: RINH (Bitfield-Mask: 0x01)             */
#define USART_CONTROL_REN_Pos             (15UL)                    /*!< USART CONTROL: REN (Bit 15)                           */
#define USART_CONTROL_REN_Msk             (0x8000UL)                /*!< USART CONTROL: REN (Bitfield-Mask: 0x01)              */
#define USART_CONTROL_TSCERI_Pos          (16UL)                    /*!< USART CONTROL: TSCERI (Bit 16)                        */
#define USART_CONTROL_TSCERI_Msk          (0x10000UL)               /*!< USART CONTROL: TSCERI (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TUREI_Pos           (17UL)                    /*!< USART CONTROL: TUREI (Bit 17)                         */
#define USART_CONTROL_TUREI_Msk           (0x20000UL)               /*!< USART CONTROL: TUREI (Bitfield-Mask: 0x01)            */
#define USART_CONTROL_TDREQI_Pos          (18UL)                    /*!< USART CONTROL: TDREQI (Bit 18)                        */
#define USART_CONTROL_TDREQI_Msk          (0x40000UL)               /*!< USART CONTROL: TDREQI (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TCPTI_Pos           (19UL)                    /*!< USART CONTROL: TCPTI (Bit 19)                         */
#define USART_CONTROL_TCPTI_Msk           (0x80000UL)               /*!< USART CONTROL: TCPTI (Bitfield-Mask: 0x01)            */
#define USART_CONTROL_TCPTTH_Pos          (20UL)                    /*!< USART CONTROL: TCPTTH (Bit 20)                        */
#define USART_CONTROL_TCPTTH_Msk          (0x100000UL)              /*!< USART CONTROL: TCPTTH (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TERIEN_Pos          (21UL)                    /*!< USART CONTROL: TERIEN (Bit 21)                        */
#define USART_CONTROL_TERIEN_Msk          (0x200000UL)              /*!< USART CONTROL: TERIEN (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TDREQIEN_Pos        (22UL)                    /*!< USART CONTROL: TDREQIEN (Bit 22)                      */
#define USART_CONTROL_TDREQIEN_Msk        (0x400000UL)              /*!< USART CONTROL: TDREQIEN (Bitfield-Mask: 0x01)         */
#define USART_CONTROL_TCPTIEN_Pos         (23UL)                    /*!< USART CONTROL: TCPTIEN (Bit 23)                       */
#define USART_CONTROL_TCPTIEN_Msk         (0x800000UL)              /*!< USART CONTROL: TCPTIEN (Bitfield-Mask: 0x01)          */
#define USART_CONTROL_TBUSYF_Pos          (27UL)                    /*!< USART CONTROL: TBUSYF (Bit 27)                        */
#define USART_CONTROL_TBUSYF_Msk          (0x8000000UL)             /*!< USART CONTROL: TBUSYF (Bitfield-Mask: 0x01)           */
#define USART_CONTROL_TBIT_Pos            (28UL)                    /*!< USART CONTROL: TBIT (Bit 28)                          */
#define USART_CONTROL_TBIT_Msk            (0x10000000UL)            /*!< USART CONTROL: TBIT (Bitfield-Mask: 0x01)             */
#define USART_CONTROL_TINH_Pos            (30UL)                    /*!< USART CONTROL: TINH (Bit 30)                          */
#define USART_CONTROL_TINH_Msk            (0x40000000UL)            /*!< USART CONTROL: TINH (Bitfield-Mask: 0x01)             */
#define USART_CONTROL_TEN_Pos             (31UL)                    /*!< USART CONTROL: TEN (Bit 31)                           */
#define USART_CONTROL_TEN_Msk             (0x80000000UL)            /*!< USART CONTROL: TEN (Bitfield-Mask: 0x01)              */
/* ========================================================  IPDELAY  ======================================================== */
#define USART_IPDELAY_IPDELAY_Pos         (16UL)                    /*!< USART IPDELAY: IPDELAY (Bit 16)                       */
#define USART_IPDELAY_IPDELAY_Msk         (0xff0000UL)              /*!< USART IPDELAY: IPDELAY (Bitfield-Mask: 0xff)          */
/* =======================================================  BAUDRATE  ======================================================== */
#define USART_BAUDRATE_RBAUD_Pos          (0UL)                     /*!< USART BAUDRATE: RBAUD (Bit 0)                         */
#define USART_BAUDRATE_RBAUD_Msk          (0xffffUL)                /*!< USART BAUDRATE: RBAUD (Bitfield-Mask: 0xffff)         */
#define USART_BAUDRATE_TBAUD_Pos          (16UL)                    /*!< USART BAUDRATE: TBAUD (Bit 16)                        */
#define USART_BAUDRATE_TBAUD_Msk          (0xffff0000UL)            /*!< USART BAUDRATE: TBAUD (Bitfield-Mask: 0xffff)         */
/* ========================================================  FIFOCN  ========================================================= */
#define USART_FIFOCN_RCNT_Pos             (0UL)                     /*!< USART FIFOCN: RCNT (Bit 0)                            */
#define USART_FIFOCN_RCNT_Msk             (0x7UL)                   /*!< USART FIFOCN: RCNT (Bitfield-Mask: 0x07)              */
#define USART_FIFOCN_RFTH_Pos             (4UL)                     /*!< USART FIFOCN: RFTH (Bit 4)                            */
#define USART_FIFOCN_RFTH_Msk             (0x30UL)                  /*!< USART FIFOCN: RFTH (Bitfield-Mask: 0x03)              */
#define USART_FIFOCN_RDMAEN_Pos           (7UL)                     /*!< USART FIFOCN: RDMAEN (Bit 7)                          */
#define USART_FIFOCN_RDMAEN_Msk           (0x80UL)                  /*!< USART FIFOCN: RDMAEN (Bitfield-Mask: 0x01)            */
#define USART_FIFOCN_RFIFOFL_Pos          (8UL)                     /*!< USART FIFOCN: RFIFOFL (Bit 8)                         */
#define USART_FIFOCN_RFIFOFL_Msk          (0x100UL)                 /*!< USART FIFOCN: RFIFOFL (Bitfield-Mask: 0x01)           */
#define USART_FIFOCN_RFERI_Pos            (9UL)                     /*!< USART FIFOCN: RFERI (Bit 9)                           */
#define USART_FIFOCN_RFERI_Msk            (0x200UL)                 /*!< USART FIFOCN: RFERI (Bitfield-Mask: 0x01)             */
#define USART_FIFOCN_RSRFULLF_Pos         (10UL)                    /*!< USART FIFOCN: RSRFULLF (Bit 10)                       */
#define USART_FIFOCN_RSRFULLF_Msk         (0x400UL)                 /*!< USART FIFOCN: RSRFULLF (Bitfield-Mask: 0x01)          */
#define USART_FIFOCN_TCNT_Pos             (16UL)                    /*!< USART FIFOCN: TCNT (Bit 16)                           */
#define USART_FIFOCN_TCNT_Msk             (0x70000UL)               /*!< USART FIFOCN: TCNT (Bitfield-Mask: 0x07)              */
#define USART_FIFOCN_TFTH_Pos             (20UL)                    /*!< USART FIFOCN: TFTH (Bit 20)                           */
#define USART_FIFOCN_TFTH_Msk             (0x300000UL)              /*!< USART FIFOCN: TFTH (Bitfield-Mask: 0x03)              */
#define USART_FIFOCN_TDMAEN_Pos           (23UL)                    /*!< USART FIFOCN: TDMAEN (Bit 23)                         */
#define USART_FIFOCN_TDMAEN_Msk           (0x800000UL)              /*!< USART FIFOCN: TDMAEN (Bitfield-Mask: 0x01)            */
#define USART_FIFOCN_TFIFOFL_Pos          (24UL)                    /*!< USART FIFOCN: TFIFOFL (Bit 24)                        */
#define USART_FIFOCN_TFIFOFL_Msk          (0x1000000UL)             /*!< USART FIFOCN: TFIFOFL (Bitfield-Mask: 0x01)           */
#define USART_FIFOCN_TFERI_Pos            (25UL)                    /*!< USART FIFOCN: TFERI (Bit 25)                          */
#define USART_FIFOCN_TFERI_Msk            (0x2000000UL)             /*!< USART FIFOCN: TFERI (Bitfield-Mask: 0x01)             */
#define USART_FIFOCN_TSRFULLF_Pos         (26UL)                    /*!< USART FIFOCN: TSRFULLF (Bit 26)                       */
#define USART_FIFOCN_TSRFULLF_Msk         (0x4000000UL)             /*!< USART FIFOCN: TSRFULLF (Bitfield-Mask: 0x01)          */
/* =========================================================  DATA  ========================================================== */
#define USART_DATA_DATA_Pos               (0UL)                     /*!< USART DATA: DATA (Bit 0)                              */
#define USART_DATA_DATA_Msk               (0xffffffffUL)            /*!< USART DATA: DATA (Bitfield-Mask: 0xffffffff)          */


/* =========================================================================================================================== */
/* ================                                           USB_0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  FADDR  ========================================================= */
#define USB_0_FADDR_FADDR_Pos             (0UL)                     /*!< USB_0 FADDR: FADDR (Bit 0)                            */
#define USB_0_FADDR_FADDR_Msk             (0x7fUL)                  /*!< USB_0 FADDR: FADDR (Bitfield-Mask: 0x7f)              */
#define USB_0_FADDR_FADDRUPD_Pos          (7UL)                     /*!< USB_0 FADDR: FADDRUPD (Bit 7)                         */
#define USB_0_FADDR_FADDRUPD_Msk          (0x80UL)                  /*!< USB_0 FADDR: FADDRUPD (Bitfield-Mask: 0x01)           */
/* =========================================================  POWER  ========================================================= */
#define USB_0_POWER_SUSDEN_Pos            (0UL)                     /*!< USB_0 POWER: SUSDEN (Bit 0)                           */
#define USB_0_POWER_SUSDEN_Msk            (0x1UL)                   /*!< USB_0 POWER: SUSDEN (Bitfield-Mask: 0x01)             */
#define USB_0_POWER_SUSMDF_Pos            (1UL)                     /*!< USB_0 POWER: SUSMDF (Bit 1)                           */
#define USB_0_POWER_SUSMDF_Msk            (0x2UL)                   /*!< USB_0 POWER: SUSMDF (Bitfield-Mask: 0x01)             */
#define USB_0_POWER_RESUME_Pos            (2UL)                     /*!< USB_0 POWER: RESUME (Bit 2)                           */
#define USB_0_POWER_RESUME_Msk            (0x4UL)                   /*!< USB_0 POWER: RESUME (Bitfield-Mask: 0x01)             */
#define USB_0_POWER_RSTDETF_Pos           (3UL)                     /*!< USB_0 POWER: RSTDETF (Bit 3)                          */
#define USB_0_POWER_RSTDETF_Msk           (0x8UL)                   /*!< USB_0 POWER: RSTDETF (Bitfield-Mask: 0x01)            */
#define USB_0_POWER_USBINH_Pos            (4UL)                     /*!< USB_0 POWER: USBINH (Bit 4)                           */
#define USB_0_POWER_USBINH_Msk            (0x10UL)                  /*!< USB_0 POWER: USBINH (Bitfield-Mask: 0x01)             */
#define USB_0_POWER_DITHEN_Pos            (5UL)                     /*!< USB_0 POWER: DITHEN (Bit 5)                           */
#define USB_0_POWER_DITHEN_Msk            (0x20UL)                  /*!< USB_0 POWER: DITHEN (Bitfield-Mask: 0x01)             */
#define USB_0_POWER_ISOUPDMD_Pos          (7UL)                     /*!< USB_0 POWER: ISOUPDMD (Bit 7)                         */
#define USB_0_POWER_ISOUPDMD_Msk          (0x80UL)                  /*!< USB_0 POWER: ISOUPDMD (Bitfield-Mask: 0x01)           */
/* =========================================================  IOINT  ========================================================= */
#define USB_0_IOINT_EP0I_Pos              (0UL)                     /*!< USB_0 IOINT: EP0I (Bit 0)                             */
#define USB_0_IOINT_EP0I_Msk              (0x1UL)                   /*!< USB_0 IOINT: EP0I (Bitfield-Mask: 0x01)               */
#define USB_0_IOINT_IN1I_Pos              (1UL)                     /*!< USB_0 IOINT: IN1I (Bit 1)                             */
#define USB_0_IOINT_IN1I_Msk              (0x2UL)                   /*!< USB_0 IOINT: IN1I (Bitfield-Mask: 0x01)               */
#define USB_0_IOINT_IN2I_Pos              (2UL)                     /*!< USB_0 IOINT: IN2I (Bit 2)                             */
#define USB_0_IOINT_IN2I_Msk              (0x4UL)                   /*!< USB_0 IOINT: IN2I (Bitfield-Mask: 0x01)               */
#define USB_0_IOINT_IN3I_Pos              (3UL)                     /*!< USB_0 IOINT: IN3I (Bit 3)                             */
#define USB_0_IOINT_IN3I_Msk              (0x8UL)                   /*!< USB_0 IOINT: IN3I (Bitfield-Mask: 0x01)               */
#define USB_0_IOINT_IN4I_Pos              (4UL)                     /*!< USB_0 IOINT: IN4I (Bit 4)                             */
#define USB_0_IOINT_IN4I_Msk              (0x10UL)                  /*!< USB_0 IOINT: IN4I (Bitfield-Mask: 0x01)               */
#define USB_0_IOINT_OUT1I_Pos             (17UL)                    /*!< USB_0 IOINT: OUT1I (Bit 17)                           */
#define USB_0_IOINT_OUT1I_Msk             (0x20000UL)               /*!< USB_0 IOINT: OUT1I (Bitfield-Mask: 0x01)              */
#define USB_0_IOINT_OUT2I_Pos             (18UL)                    /*!< USB_0 IOINT: OUT2I (Bit 18)                           */
#define USB_0_IOINT_OUT2I_Msk             (0x40000UL)               /*!< USB_0 IOINT: OUT2I (Bitfield-Mask: 0x01)              */
#define USB_0_IOINT_OUT3I_Pos             (19UL)                    /*!< USB_0 IOINT: OUT3I (Bit 19)                           */
#define USB_0_IOINT_OUT3I_Msk             (0x80000UL)               /*!< USB_0 IOINT: OUT3I (Bitfield-Mask: 0x01)              */
#define USB_0_IOINT_OUT4I_Pos             (20UL)                    /*!< USB_0 IOINT: OUT4I (Bit 20)                           */
#define USB_0_IOINT_OUT4I_Msk             (0x100000UL)              /*!< USB_0 IOINT: OUT4I (Bitfield-Mask: 0x01)              */
/* =========================================================  CMINT  ========================================================= */
#define USB_0_CMINT_SUSI_Pos              (0UL)                     /*!< USB_0 CMINT: SUSI (Bit 0)                             */
#define USB_0_CMINT_SUSI_Msk              (0x1UL)                   /*!< USB_0 CMINT: SUSI (Bitfield-Mask: 0x01)               */
#define USB_0_CMINT_RESI_Pos              (1UL)                     /*!< USB_0 CMINT: RESI (Bit 1)                             */
#define USB_0_CMINT_RESI_Msk              (0x2UL)                   /*!< USB_0 CMINT: RESI (Bitfield-Mask: 0x01)               */
#define USB_0_CMINT_RSTI_Pos              (2UL)                     /*!< USB_0 CMINT: RSTI (Bit 2)                             */
#define USB_0_CMINT_RSTI_Msk              (0x4UL)                   /*!< USB_0 CMINT: RSTI (Bitfield-Mask: 0x01)               */
#define USB_0_CMINT_SOFI_Pos              (3UL)                     /*!< USB_0 CMINT: SOFI (Bit 3)                             */
#define USB_0_CMINT_SOFI_Msk              (0x8UL)                   /*!< USB_0 CMINT: SOFI (Bitfield-Mask: 0x01)               */
/* ========================================================  IOINTE  ========================================================= */
#define USB_0_IOINTE_EP0IEN_Pos           (0UL)                     /*!< USB_0 IOINTE: EP0IEN (Bit 0)                          */
#define USB_0_IOINTE_EP0IEN_Msk           (0x1UL)                   /*!< USB_0 IOINTE: EP0IEN (Bitfield-Mask: 0x01)            */
#define USB_0_IOINTE_IN1IEN_Pos           (1UL)                     /*!< USB_0 IOINTE: IN1IEN (Bit 1)                          */
#define USB_0_IOINTE_IN1IEN_Msk           (0x2UL)                   /*!< USB_0 IOINTE: IN1IEN (Bitfield-Mask: 0x01)            */
#define USB_0_IOINTE_IN2IEN_Pos           (2UL)                     /*!< USB_0 IOINTE: IN2IEN (Bit 2)                          */
#define USB_0_IOINTE_IN2IEN_Msk           (0x4UL)                   /*!< USB_0 IOINTE: IN2IEN (Bitfield-Mask: 0x01)            */
#define USB_0_IOINTE_IN3IEN_Pos           (3UL)                     /*!< USB_0 IOINTE: IN3IEN (Bit 3)                          */
#define USB_0_IOINTE_IN3IEN_Msk           (0x8UL)                   /*!< USB_0 IOINTE: IN3IEN (Bitfield-Mask: 0x01)            */
#define USB_0_IOINTE_IN4IEN_Pos           (4UL)                     /*!< USB_0 IOINTE: IN4IEN (Bit 4)                          */
#define USB_0_IOINTE_IN4IEN_Msk           (0x10UL)                  /*!< USB_0 IOINTE: IN4IEN (Bitfield-Mask: 0x01)            */
#define USB_0_IOINTE_OUT1IEN_Pos          (17UL)                    /*!< USB_0 IOINTE: OUT1IEN (Bit 17)                        */
#define USB_0_IOINTE_OUT1IEN_Msk          (0x20000UL)               /*!< USB_0 IOINTE: OUT1IEN (Bitfield-Mask: 0x01)           */
#define USB_0_IOINTE_OUT2IEN_Pos          (18UL)                    /*!< USB_0 IOINTE: OUT2IEN (Bit 18)                        */
#define USB_0_IOINTE_OUT2IEN_Msk          (0x40000UL)               /*!< USB_0 IOINTE: OUT2IEN (Bitfield-Mask: 0x01)           */
#define USB_0_IOINTE_OUT3IEN_Pos          (19UL)                    /*!< USB_0 IOINTE: OUT3IEN (Bit 19)                        */
#define USB_0_IOINTE_OUT3IEN_Msk          (0x80000UL)               /*!< USB_0 IOINTE: OUT3IEN (Bitfield-Mask: 0x01)           */
#define USB_0_IOINTE_OUT4IEN_Pos          (20UL)                    /*!< USB_0 IOINTE: OUT4IEN (Bit 20)                        */
#define USB_0_IOINTE_OUT4IEN_Msk          (0x100000UL)              /*!< USB_0 IOINTE: OUT4IEN (Bitfield-Mask: 0x01)           */
/* =======================================================  CMINTEPE  ======================================================== */
#define USB_0_CMINTEPE_SUSIEN_Pos         (0UL)                     /*!< USB_0 CMINTEPE: SUSIEN (Bit 0)                        */
#define USB_0_CMINTEPE_SUSIEN_Msk         (0x1UL)                   /*!< USB_0 CMINTEPE: SUSIEN (Bitfield-Mask: 0x01)          */
#define USB_0_CMINTEPE_RESIEN_Pos         (1UL)                     /*!< USB_0 CMINTEPE: RESIEN (Bit 1)                        */
#define USB_0_CMINTEPE_RESIEN_Msk         (0x2UL)                   /*!< USB_0 CMINTEPE: RESIEN (Bitfield-Mask: 0x01)          */
#define USB_0_CMINTEPE_RSTIEN_Pos         (2UL)                     /*!< USB_0 CMINTEPE: RSTIEN (Bit 2)                        */
#define USB_0_CMINTEPE_RSTIEN_Msk         (0x4UL)                   /*!< USB_0 CMINTEPE: RSTIEN (Bitfield-Mask: 0x01)          */
#define USB_0_CMINTEPE_SOFIEN_Pos         (3UL)                     /*!< USB_0 CMINTEPE: SOFIEN (Bit 3)                        */
#define USB_0_CMINTEPE_SOFIEN_Msk         (0x8UL)                   /*!< USB_0 CMINTEPE: SOFIEN (Bitfield-Mask: 0x01)          */
#define USB_0_CMINTEPE_EP0EN_Pos          (16UL)                    /*!< USB_0 CMINTEPE: EP0EN (Bit 16)                        */
#define USB_0_CMINTEPE_EP0EN_Msk          (0x10000UL)               /*!< USB_0 CMINTEPE: EP0EN (Bitfield-Mask: 0x01)           */
#define USB_0_CMINTEPE_EP1EN_Pos          (17UL)                    /*!< USB_0 CMINTEPE: EP1EN (Bit 17)                        */
#define USB_0_CMINTEPE_EP1EN_Msk          (0x20000UL)               /*!< USB_0 CMINTEPE: EP1EN (Bitfield-Mask: 0x01)           */
#define USB_0_CMINTEPE_EP2EN_Pos          (18UL)                    /*!< USB_0 CMINTEPE: EP2EN (Bit 18)                        */
#define USB_0_CMINTEPE_EP2EN_Msk          (0x40000UL)               /*!< USB_0 CMINTEPE: EP2EN (Bitfield-Mask: 0x01)           */
#define USB_0_CMINTEPE_EP3EN_Pos          (19UL)                    /*!< USB_0 CMINTEPE: EP3EN (Bit 19)                        */
#define USB_0_CMINTEPE_EP3EN_Msk          (0x80000UL)               /*!< USB_0 CMINTEPE: EP3EN (Bitfield-Mask: 0x01)           */
#define USB_0_CMINTEPE_EP4EN_Pos          (20UL)                    /*!< USB_0 CMINTEPE: EP4EN (Bit 20)                        */
#define USB_0_CMINTEPE_EP4EN_Msk          (0x100000UL)              /*!< USB_0 CMINTEPE: EP4EN (Bitfield-Mask: 0x01)           */
/* =======================================================  CRCONTROL  ======================================================= */
#define USB_0_CRCONTROL_OLEN_Pos          (4UL)                     /*!< USB_0 CRCONTROL: OLEN (Bit 4)                         */
#define USB_0_CRCONTROL_OLEN_Msk          (0x10UL)                  /*!< USB_0 CRCONTROL: OLEN (Bitfield-Mask: 0x01)           */
#define USB_0_CRCONTROL_LSCRMD_Pos        (5UL)                     /*!< USB_0 CRCONTROL: LSCRMD (Bit 5)                       */
#define USB_0_CRCONTROL_LSCRMD_Msk        (0x20UL)                  /*!< USB_0 CRCONTROL: LSCRMD (Bitfield-Mask: 0x01)         */
#define USB_0_CRCONTROL_CRSSEN_Pos        (6UL)                     /*!< USB_0 CRCONTROL: CRSSEN (Bit 6)                       */
#define USB_0_CRCONTROL_CRSSEN_Msk        (0x40UL)                  /*!< USB_0 CRCONTROL: CRSSEN (Bitfield-Mask: 0x01)         */
#define USB_0_CRCONTROL_CREN_Pos          (7UL)                     /*!< USB_0 CRCONTROL: CREN (Bit 7)                         */
#define USB_0_CRCONTROL_CREN_Msk          (0x80UL)                  /*!< USB_0 CRCONTROL: CREN (Bitfield-Mask: 0x01)           */
/* =========================================================  FRAME  ========================================================= */
#define USB_0_FRAME_FRAMENUM_Pos          (0UL)                     /*!< USB_0 FRAME: FRAMENUM (Bit 0)                         */
#define USB_0_FRAME_FRAMENUM_Msk          (0x7ffUL)                 /*!< USB_0 FRAME: FRAMENUM (Bitfield-Mask: 0x7ff)          */
/* =======================================================  TCONTROL  ======================================================== */
#define USB_0_TCONTROL_DN_Pos             (0UL)                     /*!< USB_0 TCONTROL: DN (Bit 0)                            */
#define USB_0_TCONTROL_DN_Msk             (0x1UL)                   /*!< USB_0 TCONTROL: DN (Bitfield-Mask: 0x01)              */
#define USB_0_TCONTROL_DP_Pos             (1UL)                     /*!< USB_0 TCONTROL: DP (Bit 1)                            */
#define USB_0_TCONTROL_DP_Msk             (0x2UL)                   /*!< USB_0 TCONTROL: DP (Bitfield-Mask: 0x01)              */
#define USB_0_TCONTROL_DFREC_Pos          (2UL)                     /*!< USB_0 TCONTROL: DFREC (Bit 2)                         */
#define USB_0_TCONTROL_DFREC_Msk          (0x4UL)                   /*!< USB_0 TCONTROL: DFREC (Bitfield-Mask: 0x01)           */
#define USB_0_TCONTROL_PHYTST_Pos         (3UL)                     /*!< USB_0 TCONTROL: PHYTST (Bit 3)                        */
#define USB_0_TCONTROL_PHYTST_Msk         (0x18UL)                  /*!< USB_0 TCONTROL: PHYTST (Bitfield-Mask: 0x03)          */
#define USB_0_TCONTROL_SSEL_Pos           (5UL)                     /*!< USB_0 TCONTROL: SSEL (Bit 5)                          */
#define USB_0_TCONTROL_SSEL_Msk           (0x20UL)                  /*!< USB_0 TCONTROL: SSEL (Bitfield-Mask: 0x01)            */
#define USB_0_TCONTROL_PHYEN_Pos          (6UL)                     /*!< USB_0 TCONTROL: PHYEN (Bit 6)                         */
#define USB_0_TCONTROL_PHYEN_Msk          (0x40UL)                  /*!< USB_0 TCONTROL: PHYEN (Bitfield-Mask: 0x01)           */
#define USB_0_TCONTROL_PUEN_Pos           (7UL)                     /*!< USB_0 TCONTROL: PUEN (Bit 7)                          */
#define USB_0_TCONTROL_PUEN_Msk           (0x80UL)                  /*!< USB_0 TCONTROL: PUEN (Bitfield-Mask: 0x01)            */
/* ========================================================  CLKSEL  ========================================================= */
#define USB_0_CLKSEL_CLKSEL_Pos           (0UL)                     /*!< USB_0 CLKSEL: CLKSEL (Bit 0)                          */
#define USB_0_CLKSEL_CLKSEL_Msk           (0x3UL)                   /*!< USB_0 CLKSEL: CLKSEL (Bitfield-Mask: 0x03)            */
#define USB_0_CLKSEL_CLKDIV_Pos           (4UL)                     /*!< USB_0 CLKSEL: CLKDIV (Bit 4)                          */
#define USB_0_CLKSEL_CLKDIV_Msk           (0x30UL)                  /*!< USB_0 CLKSEL: CLKDIV (Bitfield-Mask: 0x03)            */
#define USB_0_CLKSEL_RESET_Pos            (6UL)                     /*!< USB_0 CLKSEL: RESET (Bit 6)                           */
#define USB_0_CLKSEL_RESET_Msk            (0x40UL)                  /*!< USB_0 CLKSEL: RESET (Bitfield-Mask: 0x01)             */
/* ======================================================  OSCCONTROL  ======================================================= */
#define USB_0_OSCCONTROL_SUSPEND_Pos      (5UL)                     /*!< USB_0 OSCCONTROL: SUSPEND (Bit 5)                     */
#define USB_0_OSCCONTROL_SUSPEND_Msk      (0x20UL)                  /*!< USB_0 OSCCONTROL: SUSPEND (Bitfield-Mask: 0x01)       */
#define USB_0_OSCCONTROL_OSCEN_Pos        (7UL)                     /*!< USB_0 OSCCONTROL: OSCEN (Bit 7)                       */
#define USB_0_OSCCONTROL_OSCEN_Msk        (0x80UL)                  /*!< USB_0 OSCCONTROL: OSCEN (Bitfield-Mask: 0x01)         */
/* =======================================================  AFADJUST  ======================================================== */
#define USB_0_AFADJUST_FINEFADJ_Pos       (0UL)                     /*!< USB_0 AFADJUST: FINEFADJ (Bit 0)                      */
#define USB_0_AFADJUST_FINEFADJ_Msk       (0x3fUL)                  /*!< USB_0 AFADJUST: FINEFADJ (Bitfield-Mask: 0x3f)        */
#define USB_0_AFADJUST_DITHEN_Pos         (6UL)                     /*!< USB_0 AFADJUST: DITHEN (Bit 6)                        */
#define USB_0_AFADJUST_DITHEN_Msk         (0x40UL)                  /*!< USB_0 AFADJUST: DITHEN (Bitfield-Mask: 0x01)          */
/* ========================================================  FADJUST  ======================================================== */
#define USB_0_FADJUST_FADJ_Pos            (0UL)                     /*!< USB_0 FADJUST: FADJ (Bit 0)                           */
#define USB_0_FADJUST_FADJ_Msk            (0x7fUL)                  /*!< USB_0 FADJUST: FADJ (Bitfield-Mask: 0x7f)             */
/* ========================================================  DMAFIFO  ======================================================== */
#define USB_0_DMAFIFO_DMAFIFO_Pos         (0UL)                     /*!< USB_0 DMAFIFO: DMAFIFO (Bit 0)                        */
#define USB_0_DMAFIFO_DMAFIFO_Msk         (0xffffffffUL)            /*!< USB_0 DMAFIFO: DMAFIFO (Bitfield-Mask: 0xffffffff)    */
/* ======================================================  DMACONTROL  ======================================================= */
#define USB_0_DMACONTROL_DBGMD_Pos        (4UL)                     /*!< USB_0 DMACONTROL: DBGMD (Bit 4)                       */
#define USB_0_DMACONTROL_DBGMD_Msk        (0x10UL)                  /*!< USB_0 DMACONTROL: DBGMD (Bitfield-Mask: 0x01)         */
#define USB_0_DMACONTROL_TERRF_Pos        (5UL)                     /*!< USB_0 DMACONTROL: TERRF (Bit 5)                       */
#define USB_0_DMACONTROL_TERRF_Msk        (0x20UL)                  /*!< USB_0 DMACONTROL: TERRF (Bitfield-Mask: 0x01)         */
#define USB_0_DMACONTROL_DBUSYF_Pos       (6UL)                     /*!< USB_0 DMACONTROL: DBUSYF (Bit 6)                      */
#define USB_0_DMACONTROL_DBUSYF_Msk       (0x40UL)                  /*!< USB_0 DMACONTROL: DBUSYF (Bitfield-Mask: 0x01)        */
#define USB_0_DMACONTROL_DFIFOFL_Pos      (7UL)                     /*!< USB_0 DMACONTROL: DFIFOFL (Bit 7)                     */
#define USB_0_DMACONTROL_DFIFOFL_Msk      (0x80UL)                  /*!< USB_0 DMACONTROL: DFIFOFL (Bitfield-Mask: 0x01)       */
/* ======================================================  EP0CONTROL  ======================================================= */
#define USB_0_EP0CONTROL_OPRDYI_Pos       (0UL)                     /*!< USB_0 EP0CONTROL: OPRDYI (Bit 0)                      */
#define USB_0_EP0CONTROL_OPRDYI_Msk       (0x1UL)                   /*!< USB_0 EP0CONTROL: OPRDYI (Bitfield-Mask: 0x01)        */
#define USB_0_EP0CONTROL_IPRDYI_Pos       (1UL)                     /*!< USB_0 EP0CONTROL: IPRDYI (Bit 1)                      */
#define USB_0_EP0CONTROL_IPRDYI_Msk       (0x2UL)                   /*!< USB_0 EP0CONTROL: IPRDYI (Bitfield-Mask: 0x01)        */
#define USB_0_EP0CONTROL_STSTLI_Pos       (2UL)                     /*!< USB_0 EP0CONTROL: STSTLI (Bit 2)                      */
#define USB_0_EP0CONTROL_STSTLI_Msk       (0x4UL)                   /*!< USB_0 EP0CONTROL: STSTLI (Bitfield-Mask: 0x01)        */
#define USB_0_EP0CONTROL_DEND_Pos         (3UL)                     /*!< USB_0 EP0CONTROL: DEND (Bit 3)                        */
#define USB_0_EP0CONTROL_DEND_Msk         (0x8UL)                   /*!< USB_0 EP0CONTROL: DEND (Bitfield-Mask: 0x01)          */
#define USB_0_EP0CONTROL_SUENDI_Pos       (4UL)                     /*!< USB_0 EP0CONTROL: SUENDI (Bit 4)                      */
#define USB_0_EP0CONTROL_SUENDI_Msk       (0x10UL)                  /*!< USB_0 EP0CONTROL: SUENDI (Bitfield-Mask: 0x01)        */
#define USB_0_EP0CONTROL_SDSTL_Pos        (5UL)                     /*!< USB_0 EP0CONTROL: SDSTL (Bit 5)                       */
#define USB_0_EP0CONTROL_SDSTL_Msk        (0x20UL)                  /*!< USB_0 EP0CONTROL: SDSTL (Bitfield-Mask: 0x01)         */
#define USB_0_EP0CONTROL_OPRDYIS_Pos      (6UL)                     /*!< USB_0 EP0CONTROL: OPRDYIS (Bit 6)                     */
#define USB_0_EP0CONTROL_OPRDYIS_Msk      (0x40UL)                  /*!< USB_0 EP0CONTROL: OPRDYIS (Bitfield-Mask: 0x01)       */
#define USB_0_EP0CONTROL_SUENDIS_Pos      (7UL)                     /*!< USB_0 EP0CONTROL: SUENDIS (Bit 7)                     */
#define USB_0_EP0CONTROL_SUENDIS_Msk      (0x80UL)                  /*!< USB_0 EP0CONTROL: SUENDIS (Bitfield-Mask: 0x01)       */
/* =======================================================  EP0COUNT  ======================================================== */
#define USB_0_EP0COUNT_COUNT_Pos          (0UL)                     /*!< USB_0 EP0COUNT: COUNT (Bit 0)                         */
#define USB_0_EP0COUNT_COUNT_Msk          (0x7fUL)                  /*!< USB_0 EP0COUNT: COUNT (Bitfield-Mask: 0x7f)           */
/* ========================================================  EP0FIFO  ======================================================== */
#define USB_0_EP0FIFO_FIFO_Pos            (0UL)                     /*!< USB_0 EP0FIFO: FIFO (Bit 0)                           */
#define USB_0_EP0FIFO_FIFO_Msk            (0xffffffffUL)            /*!< USB_0 EP0FIFO: FIFO (Bitfield-Mask: 0xffffffff)       */
/* ======================================================  EPMPSIZE_1  ======================================================= */
#define USB_0_EPMPSIZE_1_IMAXP_Pos        (0UL)                     /*!< USB_0 EPMPSIZE_1: IMAXP (Bit 0)                       */
#define USB_0_EPMPSIZE_1_IMAXP_Msk        (0xffUL)                  /*!< USB_0 EPMPSIZE_1: IMAXP (Bitfield-Mask: 0xff)         */
#define USB_0_EPMPSIZE_1_OMAXP_Pos        (16UL)                    /*!< USB_0 EPMPSIZE_1: OMAXP (Bit 16)                      */
#define USB_0_EPMPSIZE_1_OMAXP_Msk        (0xff0000UL)              /*!< USB_0 EPMPSIZE_1: OMAXP (Bitfield-Mask: 0xff)         */
/* ======================================================  EPCONTROL_1  ====================================================== */
#define USB_0_EPCONTROL_1_IPRDYI_Pos      (0UL)                     /*!< USB_0 EPCONTROL_1: IPRDYI (Bit 0)                     */
#define USB_0_EPCONTROL_1_IPRDYI_Msk      (0x1UL)                   /*!< USB_0 EPCONTROL_1: IPRDYI (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_IFIFONEF_Pos    (1UL)                     /*!< USB_0 EPCONTROL_1: IFIFONEF (Bit 1)                   */
#define USB_0_EPCONTROL_1_IFIFONEF_Msk    (0x2UL)                   /*!< USB_0 EPCONTROL_1: IFIFONEF (Bitfield-Mask: 0x01)     */
#define USB_0_EPCONTROL_1_IURF_Pos        (2UL)                     /*!< USB_0 EPCONTROL_1: IURF (Bit 2)                       */
#define USB_0_EPCONTROL_1_IURF_Msk        (0x4UL)                   /*!< USB_0 EPCONTROL_1: IURF (Bitfield-Mask: 0x01)         */
#define USB_0_EPCONTROL_1_IFIFOFL_Pos     (3UL)                     /*!< USB_0 EPCONTROL_1: IFIFOFL (Bit 3)                    */
#define USB_0_EPCONTROL_1_IFIFOFL_Msk     (0x8UL)                   /*!< USB_0 EPCONTROL_1: IFIFOFL (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_1_ISDSTL_Pos      (4UL)                     /*!< USB_0 EPCONTROL_1: ISDSTL (Bit 4)                     */
#define USB_0_EPCONTROL_1_ISDSTL_Msk      (0x10UL)                  /*!< USB_0 EPCONTROL_1: ISDSTL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_ISTSTLI_Pos     (5UL)                     /*!< USB_0 EPCONTROL_1: ISTSTLI (Bit 5)                    */
#define USB_0_EPCONTROL_1_ISTSTLI_Msk     (0x20UL)                  /*!< USB_0 EPCONTROL_1: ISTSTLI (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_1_ICLRDT_Pos      (6UL)                     /*!< USB_0 EPCONTROL_1: ICLRDT (Bit 6)                     */
#define USB_0_EPCONTROL_1_ICLRDT_Msk      (0x40UL)                  /*!< USB_0 EPCONTROL_1: ICLRDT (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_SPLITEN_Pos     (10UL)                    /*!< USB_0 EPCONTROL_1: SPLITEN (Bit 10)                   */
#define USB_0_EPCONTROL_1_SPLITEN_Msk     (0x400UL)                 /*!< USB_0 EPCONTROL_1: SPLITEN (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_1_FDTEN_Pos       (11UL)                    /*!< USB_0 EPCONTROL_1: FDTEN (Bit 11)                     */
#define USB_0_EPCONTROL_1_FDTEN_Msk       (0x800UL)                 /*!< USB_0 EPCONTROL_1: FDTEN (Bitfield-Mask: 0x01)        */
#define USB_0_EPCONTROL_1_IDMAEN_Pos      (12UL)                    /*!< USB_0 EPCONTROL_1: IDMAEN (Bit 12)                    */
#define USB_0_EPCONTROL_1_IDMAEN_Msk      (0x1000UL)                /*!< USB_0 EPCONTROL_1: IDMAEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_DIRSEL_Pos      (13UL)                    /*!< USB_0 EPCONTROL_1: DIRSEL (Bit 13)                    */
#define USB_0_EPCONTROL_1_DIRSEL_Msk      (0x2000UL)                /*!< USB_0 EPCONTROL_1: DIRSEL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_IISOEN_Pos      (14UL)                    /*!< USB_0 EPCONTROL_1: IISOEN (Bit 14)                    */
#define USB_0_EPCONTROL_1_IISOEN_Msk      (0x4000UL)                /*!< USB_0 EPCONTROL_1: IISOEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_AUTOSETEN_Pos   (15UL)                    /*!< USB_0 EPCONTROL_1: AUTOSETEN (Bit 15)                 */
#define USB_0_EPCONTROL_1_AUTOSETEN_Msk   (0x8000UL)                /*!< USB_0 EPCONTROL_1: AUTOSETEN (Bitfield-Mask: 0x01)    */
#define USB_0_EPCONTROL_1_OPRDYI_Pos      (16UL)                    /*!< USB_0 EPCONTROL_1: OPRDYI (Bit 16)                    */
#define USB_0_EPCONTROL_1_OPRDYI_Msk      (0x10000UL)               /*!< USB_0 EPCONTROL_1: OPRDYI (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_OFIFOFF_Pos     (17UL)                    /*!< USB_0 EPCONTROL_1: OFIFOFF (Bit 17)                   */
#define USB_0_EPCONTROL_1_OFIFOFF_Msk     (0x20000UL)               /*!< USB_0 EPCONTROL_1: OFIFOFF (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_1_OORF_Pos        (18UL)                    /*!< USB_0 EPCONTROL_1: OORF (Bit 18)                      */
#define USB_0_EPCONTROL_1_OORF_Msk        (0x40000UL)               /*!< USB_0 EPCONTROL_1: OORF (Bitfield-Mask: 0x01)         */
#define USB_0_EPCONTROL_1_ODERRF_Pos      (19UL)                    /*!< USB_0 EPCONTROL_1: ODERRF (Bit 19)                    */
#define USB_0_EPCONTROL_1_ODERRF_Msk      (0x80000UL)               /*!< USB_0 EPCONTROL_1: ODERRF (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_OFIFOFL_Pos     (20UL)                    /*!< USB_0 EPCONTROL_1: OFIFOFL (Bit 20)                   */
#define USB_0_EPCONTROL_1_OFIFOFL_Msk     (0x100000UL)              /*!< USB_0 EPCONTROL_1: OFIFOFL (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_1_OSDSTL_Pos      (21UL)                    /*!< USB_0 EPCONTROL_1: OSDSTL (Bit 21)                    */
#define USB_0_EPCONTROL_1_OSDSTL_Msk      (0x200000UL)              /*!< USB_0 EPCONTROL_1: OSDSTL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_OSTSTLI_Pos     (22UL)                    /*!< USB_0 EPCONTROL_1: OSTSTLI (Bit 22)                   */
#define USB_0_EPCONTROL_1_OSTSTLI_Msk     (0x400000UL)              /*!< USB_0 EPCONTROL_1: OSTSTLI (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_1_OCLRDT_Pos      (23UL)                    /*!< USB_0 EPCONTROL_1: OCLRDT (Bit 23)                    */
#define USB_0_EPCONTROL_1_OCLRDT_Msk      (0x800000UL)              /*!< USB_0 EPCONTROL_1: OCLRDT (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_ODMAMD_Pos      (28UL)                    /*!< USB_0 EPCONTROL_1: ODMAMD (Bit 28)                    */
#define USB_0_EPCONTROL_1_ODMAMD_Msk      (0x10000000UL)            /*!< USB_0 EPCONTROL_1: ODMAMD (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_ODMAEN_Pos      (29UL)                    /*!< USB_0 EPCONTROL_1: ODMAEN (Bit 29)                    */
#define USB_0_EPCONTROL_1_ODMAEN_Msk      (0x20000000UL)            /*!< USB_0 EPCONTROL_1: ODMAEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_OISOEN_Pos      (30UL)                    /*!< USB_0 EPCONTROL_1: OISOEN (Bit 30)                    */
#define USB_0_EPCONTROL_1_OISOEN_Msk      (0x40000000UL)            /*!< USB_0 EPCONTROL_1: OISOEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_1_AUTOCLREN_Pos   (31UL)                    /*!< USB_0 EPCONTROL_1: AUTOCLREN (Bit 31)                 */
#define USB_0_EPCONTROL_1_AUTOCLREN_Msk   (0x80000000UL)            /*!< USB_0 EPCONTROL_1: AUTOCLREN (Bitfield-Mask: 0x01)    */
/* =======================================================  EPCOUNT_1  ======================================================= */
#define USB_0_EPCOUNT_1_COUNT_Pos         (0UL)                     /*!< USB_0 EPCOUNT_1: COUNT (Bit 0)                        */
#define USB_0_EPCOUNT_1_COUNT_Msk         (0x3ffUL)                 /*!< USB_0 EPCOUNT_1: COUNT (Bitfield-Mask: 0x3ff)         */
/* =======================================================  EPFIFO_1  ======================================================== */
#define USB_0_EPFIFO_1_FIFO_Pos           (0UL)                     /*!< USB_0 EPFIFO_1: FIFO (Bit 0)                          */
#define USB_0_EPFIFO_1_FIFO_Msk           (0xffffffffUL)            /*!< USB_0 EPFIFO_1: FIFO (Bitfield-Mask: 0xffffffff)      */
/* ======================================================  EPMPSIZE_2  ======================================================= */
#define USB_0_EPMPSIZE_2_IMAXP_Pos        (0UL)                     /*!< USB_0 EPMPSIZE_2: IMAXP (Bit 0)                       */
#define USB_0_EPMPSIZE_2_IMAXP_Msk        (0xffUL)                  /*!< USB_0 EPMPSIZE_2: IMAXP (Bitfield-Mask: 0xff)         */
#define USB_0_EPMPSIZE_2_OMAXP_Pos        (16UL)                    /*!< USB_0 EPMPSIZE_2: OMAXP (Bit 16)                      */
#define USB_0_EPMPSIZE_2_OMAXP_Msk        (0xff0000UL)              /*!< USB_0 EPMPSIZE_2: OMAXP (Bitfield-Mask: 0xff)         */
/* ======================================================  EPCONTROL_2  ====================================================== */
#define USB_0_EPCONTROL_2_IPRDYI_Pos      (0UL)                     /*!< USB_0 EPCONTROL_2: IPRDYI (Bit 0)                     */
#define USB_0_EPCONTROL_2_IPRDYI_Msk      (0x1UL)                   /*!< USB_0 EPCONTROL_2: IPRDYI (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_IFIFONEF_Pos    (1UL)                     /*!< USB_0 EPCONTROL_2: IFIFONEF (Bit 1)                   */
#define USB_0_EPCONTROL_2_IFIFONEF_Msk    (0x2UL)                   /*!< USB_0 EPCONTROL_2: IFIFONEF (Bitfield-Mask: 0x01)     */
#define USB_0_EPCONTROL_2_IURF_Pos        (2UL)                     /*!< USB_0 EPCONTROL_2: IURF (Bit 2)                       */
#define USB_0_EPCONTROL_2_IURF_Msk        (0x4UL)                   /*!< USB_0 EPCONTROL_2: IURF (Bitfield-Mask: 0x01)         */
#define USB_0_EPCONTROL_2_IFIFOFL_Pos     (3UL)                     /*!< USB_0 EPCONTROL_2: IFIFOFL (Bit 3)                    */
#define USB_0_EPCONTROL_2_IFIFOFL_Msk     (0x8UL)                   /*!< USB_0 EPCONTROL_2: IFIFOFL (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_2_ISDSTL_Pos      (4UL)                     /*!< USB_0 EPCONTROL_2: ISDSTL (Bit 4)                     */
#define USB_0_EPCONTROL_2_ISDSTL_Msk      (0x10UL)                  /*!< USB_0 EPCONTROL_2: ISDSTL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_ISTSTLI_Pos     (5UL)                     /*!< USB_0 EPCONTROL_2: ISTSTLI (Bit 5)                    */
#define USB_0_EPCONTROL_2_ISTSTLI_Msk     (0x20UL)                  /*!< USB_0 EPCONTROL_2: ISTSTLI (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_2_ICLRDT_Pos      (6UL)                     /*!< USB_0 EPCONTROL_2: ICLRDT (Bit 6)                     */
#define USB_0_EPCONTROL_2_ICLRDT_Msk      (0x40UL)                  /*!< USB_0 EPCONTROL_2: ICLRDT (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_SPLITEN_Pos     (10UL)                    /*!< USB_0 EPCONTROL_2: SPLITEN (Bit 10)                   */
#define USB_0_EPCONTROL_2_SPLITEN_Msk     (0x400UL)                 /*!< USB_0 EPCONTROL_2: SPLITEN (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_2_FDTEN_Pos       (11UL)                    /*!< USB_0 EPCONTROL_2: FDTEN (Bit 11)                     */
#define USB_0_EPCONTROL_2_FDTEN_Msk       (0x800UL)                 /*!< USB_0 EPCONTROL_2: FDTEN (Bitfield-Mask: 0x01)        */
#define USB_0_EPCONTROL_2_IDMAEN_Pos      (12UL)                    /*!< USB_0 EPCONTROL_2: IDMAEN (Bit 12)                    */
#define USB_0_EPCONTROL_2_IDMAEN_Msk      (0x1000UL)                /*!< USB_0 EPCONTROL_2: IDMAEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_DIRSEL_Pos      (13UL)                    /*!< USB_0 EPCONTROL_2: DIRSEL (Bit 13)                    */
#define USB_0_EPCONTROL_2_DIRSEL_Msk      (0x2000UL)                /*!< USB_0 EPCONTROL_2: DIRSEL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_IISOEN_Pos      (14UL)                    /*!< USB_0 EPCONTROL_2: IISOEN (Bit 14)                    */
#define USB_0_EPCONTROL_2_IISOEN_Msk      (0x4000UL)                /*!< USB_0 EPCONTROL_2: IISOEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_AUTOSETEN_Pos   (15UL)                    /*!< USB_0 EPCONTROL_2: AUTOSETEN (Bit 15)                 */
#define USB_0_EPCONTROL_2_AUTOSETEN_Msk   (0x8000UL)                /*!< USB_0 EPCONTROL_2: AUTOSETEN (Bitfield-Mask: 0x01)    */
#define USB_0_EPCONTROL_2_OPRDYI_Pos      (16UL)                    /*!< USB_0 EPCONTROL_2: OPRDYI (Bit 16)                    */
#define USB_0_EPCONTROL_2_OPRDYI_Msk      (0x10000UL)               /*!< USB_0 EPCONTROL_2: OPRDYI (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_OFIFOFF_Pos     (17UL)                    /*!< USB_0 EPCONTROL_2: OFIFOFF (Bit 17)                   */
#define USB_0_EPCONTROL_2_OFIFOFF_Msk     (0x20000UL)               /*!< USB_0 EPCONTROL_2: OFIFOFF (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_2_OORF_Pos        (18UL)                    /*!< USB_0 EPCONTROL_2: OORF (Bit 18)                      */
#define USB_0_EPCONTROL_2_OORF_Msk        (0x40000UL)               /*!< USB_0 EPCONTROL_2: OORF (Bitfield-Mask: 0x01)         */
#define USB_0_EPCONTROL_2_ODERRF_Pos      (19UL)                    /*!< USB_0 EPCONTROL_2: ODERRF (Bit 19)                    */
#define USB_0_EPCONTROL_2_ODERRF_Msk      (0x80000UL)               /*!< USB_0 EPCONTROL_2: ODERRF (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_OFIFOFL_Pos     (20UL)                    /*!< USB_0 EPCONTROL_2: OFIFOFL (Bit 20)                   */
#define USB_0_EPCONTROL_2_OFIFOFL_Msk     (0x100000UL)              /*!< USB_0 EPCONTROL_2: OFIFOFL (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_2_OSDSTL_Pos      (21UL)                    /*!< USB_0 EPCONTROL_2: OSDSTL (Bit 21)                    */
#define USB_0_EPCONTROL_2_OSDSTL_Msk      (0x200000UL)              /*!< USB_0 EPCONTROL_2: OSDSTL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_OSTSTLI_Pos     (22UL)                    /*!< USB_0 EPCONTROL_2: OSTSTLI (Bit 22)                   */
#define USB_0_EPCONTROL_2_OSTSTLI_Msk     (0x400000UL)              /*!< USB_0 EPCONTROL_2: OSTSTLI (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_2_OCLRDT_Pos      (23UL)                    /*!< USB_0 EPCONTROL_2: OCLRDT (Bit 23)                    */
#define USB_0_EPCONTROL_2_OCLRDT_Msk      (0x800000UL)              /*!< USB_0 EPCONTROL_2: OCLRDT (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_ODMAMD_Pos      (28UL)                    /*!< USB_0 EPCONTROL_2: ODMAMD (Bit 28)                    */
#define USB_0_EPCONTROL_2_ODMAMD_Msk      (0x10000000UL)            /*!< USB_0 EPCONTROL_2: ODMAMD (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_ODMAEN_Pos      (29UL)                    /*!< USB_0 EPCONTROL_2: ODMAEN (Bit 29)                    */
#define USB_0_EPCONTROL_2_ODMAEN_Msk      (0x20000000UL)            /*!< USB_0 EPCONTROL_2: ODMAEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_OISOEN_Pos      (30UL)                    /*!< USB_0 EPCONTROL_2: OISOEN (Bit 30)                    */
#define USB_0_EPCONTROL_2_OISOEN_Msk      (0x40000000UL)            /*!< USB_0 EPCONTROL_2: OISOEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_2_AUTOCLREN_Pos   (31UL)                    /*!< USB_0 EPCONTROL_2: AUTOCLREN (Bit 31)                 */
#define USB_0_EPCONTROL_2_AUTOCLREN_Msk   (0x80000000UL)            /*!< USB_0 EPCONTROL_2: AUTOCLREN (Bitfield-Mask: 0x01)    */
/* =======================================================  EPCOUNT_2  ======================================================= */
#define USB_0_EPCOUNT_2_COUNT_Pos         (0UL)                     /*!< USB_0 EPCOUNT_2: COUNT (Bit 0)                        */
#define USB_0_EPCOUNT_2_COUNT_Msk         (0x3ffUL)                 /*!< USB_0 EPCOUNT_2: COUNT (Bitfield-Mask: 0x3ff)         */
/* =======================================================  EPFIFO_2  ======================================================== */
#define USB_0_EPFIFO_2_FIFO_Pos           (0UL)                     /*!< USB_0 EPFIFO_2: FIFO (Bit 0)                          */
#define USB_0_EPFIFO_2_FIFO_Msk           (0xffffffffUL)            /*!< USB_0 EPFIFO_2: FIFO (Bitfield-Mask: 0xffffffff)      */
/* ======================================================  EPMPSIZE_3  ======================================================= */
#define USB_0_EPMPSIZE_3_IMAXP_Pos        (0UL)                     /*!< USB_0 EPMPSIZE_3: IMAXP (Bit 0)                       */
#define USB_0_EPMPSIZE_3_IMAXP_Msk        (0xffUL)                  /*!< USB_0 EPMPSIZE_3: IMAXP (Bitfield-Mask: 0xff)         */
#define USB_0_EPMPSIZE_3_OMAXP_Pos        (16UL)                    /*!< USB_0 EPMPSIZE_3: OMAXP (Bit 16)                      */
#define USB_0_EPMPSIZE_3_OMAXP_Msk        (0xff0000UL)              /*!< USB_0 EPMPSIZE_3: OMAXP (Bitfield-Mask: 0xff)         */
/* ======================================================  EPCONTROL_3  ====================================================== */
#define USB_0_EPCONTROL_3_IPRDYI_Pos      (0UL)                     /*!< USB_0 EPCONTROL_3: IPRDYI (Bit 0)                     */
#define USB_0_EPCONTROL_3_IPRDYI_Msk      (0x1UL)                   /*!< USB_0 EPCONTROL_3: IPRDYI (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_IFIFONEF_Pos    (1UL)                     /*!< USB_0 EPCONTROL_3: IFIFONEF (Bit 1)                   */
#define USB_0_EPCONTROL_3_IFIFONEF_Msk    (0x2UL)                   /*!< USB_0 EPCONTROL_3: IFIFONEF (Bitfield-Mask: 0x01)     */
#define USB_0_EPCONTROL_3_IURF_Pos        (2UL)                     /*!< USB_0 EPCONTROL_3: IURF (Bit 2)                       */
#define USB_0_EPCONTROL_3_IURF_Msk        (0x4UL)                   /*!< USB_0 EPCONTROL_3: IURF (Bitfield-Mask: 0x01)         */
#define USB_0_EPCONTROL_3_IFIFOFL_Pos     (3UL)                     /*!< USB_0 EPCONTROL_3: IFIFOFL (Bit 3)                    */
#define USB_0_EPCONTROL_3_IFIFOFL_Msk     (0x8UL)                   /*!< USB_0 EPCONTROL_3: IFIFOFL (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_3_ISDSTL_Pos      (4UL)                     /*!< USB_0 EPCONTROL_3: ISDSTL (Bit 4)                     */
#define USB_0_EPCONTROL_3_ISDSTL_Msk      (0x10UL)                  /*!< USB_0 EPCONTROL_3: ISDSTL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_ISTSTLI_Pos     (5UL)                     /*!< USB_0 EPCONTROL_3: ISTSTLI (Bit 5)                    */
#define USB_0_EPCONTROL_3_ISTSTLI_Msk     (0x20UL)                  /*!< USB_0 EPCONTROL_3: ISTSTLI (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_3_ICLRDT_Pos      (6UL)                     /*!< USB_0 EPCONTROL_3: ICLRDT (Bit 6)                     */
#define USB_0_EPCONTROL_3_ICLRDT_Msk      (0x40UL)                  /*!< USB_0 EPCONTROL_3: ICLRDT (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_SPLITEN_Pos     (10UL)                    /*!< USB_0 EPCONTROL_3: SPLITEN (Bit 10)                   */
#define USB_0_EPCONTROL_3_SPLITEN_Msk     (0x400UL)                 /*!< USB_0 EPCONTROL_3: SPLITEN (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_3_FDTEN_Pos       (11UL)                    /*!< USB_0 EPCONTROL_3: FDTEN (Bit 11)                     */
#define USB_0_EPCONTROL_3_FDTEN_Msk       (0x800UL)                 /*!< USB_0 EPCONTROL_3: FDTEN (Bitfield-Mask: 0x01)        */
#define USB_0_EPCONTROL_3_IDMAEN_Pos      (12UL)                    /*!< USB_0 EPCONTROL_3: IDMAEN (Bit 12)                    */
#define USB_0_EPCONTROL_3_IDMAEN_Msk      (0x1000UL)                /*!< USB_0 EPCONTROL_3: IDMAEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_DIRSEL_Pos      (13UL)                    /*!< USB_0 EPCONTROL_3: DIRSEL (Bit 13)                    */
#define USB_0_EPCONTROL_3_DIRSEL_Msk      (0x2000UL)                /*!< USB_0 EPCONTROL_3: DIRSEL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_IISOEN_Pos      (14UL)                    /*!< USB_0 EPCONTROL_3: IISOEN (Bit 14)                    */
#define USB_0_EPCONTROL_3_IISOEN_Msk      (0x4000UL)                /*!< USB_0 EPCONTROL_3: IISOEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_AUTOSETEN_Pos   (15UL)                    /*!< USB_0 EPCONTROL_3: AUTOSETEN (Bit 15)                 */
#define USB_0_EPCONTROL_3_AUTOSETEN_Msk   (0x8000UL)                /*!< USB_0 EPCONTROL_3: AUTOSETEN (Bitfield-Mask: 0x01)    */
#define USB_0_EPCONTROL_3_OPRDYI_Pos      (16UL)                    /*!< USB_0 EPCONTROL_3: OPRDYI (Bit 16)                    */
#define USB_0_EPCONTROL_3_OPRDYI_Msk      (0x10000UL)               /*!< USB_0 EPCONTROL_3: OPRDYI (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_OFIFOFF_Pos     (17UL)                    /*!< USB_0 EPCONTROL_3: OFIFOFF (Bit 17)                   */
#define USB_0_EPCONTROL_3_OFIFOFF_Msk     (0x20000UL)               /*!< USB_0 EPCONTROL_3: OFIFOFF (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_3_OORF_Pos        (18UL)                    /*!< USB_0 EPCONTROL_3: OORF (Bit 18)                      */
#define USB_0_EPCONTROL_3_OORF_Msk        (0x40000UL)               /*!< USB_0 EPCONTROL_3: OORF (Bitfield-Mask: 0x01)         */
#define USB_0_EPCONTROL_3_ODERRF_Pos      (19UL)                    /*!< USB_0 EPCONTROL_3: ODERRF (Bit 19)                    */
#define USB_0_EPCONTROL_3_ODERRF_Msk      (0x80000UL)               /*!< USB_0 EPCONTROL_3: ODERRF (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_OFIFOFL_Pos     (20UL)                    /*!< USB_0 EPCONTROL_3: OFIFOFL (Bit 20)                   */
#define USB_0_EPCONTROL_3_OFIFOFL_Msk     (0x100000UL)              /*!< USB_0 EPCONTROL_3: OFIFOFL (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_3_OSDSTL_Pos      (21UL)                    /*!< USB_0 EPCONTROL_3: OSDSTL (Bit 21)                    */
#define USB_0_EPCONTROL_3_OSDSTL_Msk      (0x200000UL)              /*!< USB_0 EPCONTROL_3: OSDSTL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_OSTSTLI_Pos     (22UL)                    /*!< USB_0 EPCONTROL_3: OSTSTLI (Bit 22)                   */
#define USB_0_EPCONTROL_3_OSTSTLI_Msk     (0x400000UL)              /*!< USB_0 EPCONTROL_3: OSTSTLI (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_3_OCLRDT_Pos      (23UL)                    /*!< USB_0 EPCONTROL_3: OCLRDT (Bit 23)                    */
#define USB_0_EPCONTROL_3_OCLRDT_Msk      (0x800000UL)              /*!< USB_0 EPCONTROL_3: OCLRDT (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_ODMAMD_Pos      (28UL)                    /*!< USB_0 EPCONTROL_3: ODMAMD (Bit 28)                    */
#define USB_0_EPCONTROL_3_ODMAMD_Msk      (0x10000000UL)            /*!< USB_0 EPCONTROL_3: ODMAMD (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_ODMAEN_Pos      (29UL)                    /*!< USB_0 EPCONTROL_3: ODMAEN (Bit 29)                    */
#define USB_0_EPCONTROL_3_ODMAEN_Msk      (0x20000000UL)            /*!< USB_0 EPCONTROL_3: ODMAEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_OISOEN_Pos      (30UL)                    /*!< USB_0 EPCONTROL_3: OISOEN (Bit 30)                    */
#define USB_0_EPCONTROL_3_OISOEN_Msk      (0x40000000UL)            /*!< USB_0 EPCONTROL_3: OISOEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_3_AUTOCLREN_Pos   (31UL)                    /*!< USB_0 EPCONTROL_3: AUTOCLREN (Bit 31)                 */
#define USB_0_EPCONTROL_3_AUTOCLREN_Msk   (0x80000000UL)            /*!< USB_0 EPCONTROL_3: AUTOCLREN (Bitfield-Mask: 0x01)    */
/* =======================================================  EPCOUNT_3  ======================================================= */
#define USB_0_EPCOUNT_3_COUNT_Pos         (0UL)                     /*!< USB_0 EPCOUNT_3: COUNT (Bit 0)                        */
#define USB_0_EPCOUNT_3_COUNT_Msk         (0x3ffUL)                 /*!< USB_0 EPCOUNT_3: COUNT (Bitfield-Mask: 0x3ff)         */
/* =======================================================  EPFIFO_3  ======================================================== */
#define USB_0_EPFIFO_3_FIFO_Pos           (0UL)                     /*!< USB_0 EPFIFO_3: FIFO (Bit 0)                          */
#define USB_0_EPFIFO_3_FIFO_Msk           (0xffffffffUL)            /*!< USB_0 EPFIFO_3: FIFO (Bitfield-Mask: 0xffffffff)      */
/* ======================================================  EPMPSIZE_4  ======================================================= */
#define USB_0_EPMPSIZE_4_IMAXP_Pos        (0UL)                     /*!< USB_0 EPMPSIZE_4: IMAXP (Bit 0)                       */
#define USB_0_EPMPSIZE_4_IMAXP_Msk        (0xffUL)                  /*!< USB_0 EPMPSIZE_4: IMAXP (Bitfield-Mask: 0xff)         */
#define USB_0_EPMPSIZE_4_OMAXP_Pos        (16UL)                    /*!< USB_0 EPMPSIZE_4: OMAXP (Bit 16)                      */
#define USB_0_EPMPSIZE_4_OMAXP_Msk        (0xff0000UL)              /*!< USB_0 EPMPSIZE_4: OMAXP (Bitfield-Mask: 0xff)         */
/* ======================================================  EPCONTROL_4  ====================================================== */
#define USB_0_EPCONTROL_4_IPRDYI_Pos      (0UL)                     /*!< USB_0 EPCONTROL_4: IPRDYI (Bit 0)                     */
#define USB_0_EPCONTROL_4_IPRDYI_Msk      (0x1UL)                   /*!< USB_0 EPCONTROL_4: IPRDYI (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_IFIFONEF_Pos    (1UL)                     /*!< USB_0 EPCONTROL_4: IFIFONEF (Bit 1)                   */
#define USB_0_EPCONTROL_4_IFIFONEF_Msk    (0x2UL)                   /*!< USB_0 EPCONTROL_4: IFIFONEF (Bitfield-Mask: 0x01)     */
#define USB_0_EPCONTROL_4_IURF_Pos        (2UL)                     /*!< USB_0 EPCONTROL_4: IURF (Bit 2)                       */
#define USB_0_EPCONTROL_4_IURF_Msk        (0x4UL)                   /*!< USB_0 EPCONTROL_4: IURF (Bitfield-Mask: 0x01)         */
#define USB_0_EPCONTROL_4_IFIFOFL_Pos     (3UL)                     /*!< USB_0 EPCONTROL_4: IFIFOFL (Bit 3)                    */
#define USB_0_EPCONTROL_4_IFIFOFL_Msk     (0x8UL)                   /*!< USB_0 EPCONTROL_4: IFIFOFL (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_4_ISDSTL_Pos      (4UL)                     /*!< USB_0 EPCONTROL_4: ISDSTL (Bit 4)                     */
#define USB_0_EPCONTROL_4_ISDSTL_Msk      (0x10UL)                  /*!< USB_0 EPCONTROL_4: ISDSTL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_ISTSTLI_Pos     (5UL)                     /*!< USB_0 EPCONTROL_4: ISTSTLI (Bit 5)                    */
#define USB_0_EPCONTROL_4_ISTSTLI_Msk     (0x20UL)                  /*!< USB_0 EPCONTROL_4: ISTSTLI (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_4_ICLRDT_Pos      (6UL)                     /*!< USB_0 EPCONTROL_4: ICLRDT (Bit 6)                     */
#define USB_0_EPCONTROL_4_ICLRDT_Msk      (0x40UL)                  /*!< USB_0 EPCONTROL_4: ICLRDT (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_SPLITEN_Pos     (10UL)                    /*!< USB_0 EPCONTROL_4: SPLITEN (Bit 10)                   */
#define USB_0_EPCONTROL_4_SPLITEN_Msk     (0x400UL)                 /*!< USB_0 EPCONTROL_4: SPLITEN (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_4_FDTEN_Pos       (11UL)                    /*!< USB_0 EPCONTROL_4: FDTEN (Bit 11)                     */
#define USB_0_EPCONTROL_4_FDTEN_Msk       (0x800UL)                 /*!< USB_0 EPCONTROL_4: FDTEN (Bitfield-Mask: 0x01)        */
#define USB_0_EPCONTROL_4_IDMAEN_Pos      (12UL)                    /*!< USB_0 EPCONTROL_4: IDMAEN (Bit 12)                    */
#define USB_0_EPCONTROL_4_IDMAEN_Msk      (0x1000UL)                /*!< USB_0 EPCONTROL_4: IDMAEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_DIRSEL_Pos      (13UL)                    /*!< USB_0 EPCONTROL_4: DIRSEL (Bit 13)                    */
#define USB_0_EPCONTROL_4_DIRSEL_Msk      (0x2000UL)                /*!< USB_0 EPCONTROL_4: DIRSEL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_IISOEN_Pos      (14UL)                    /*!< USB_0 EPCONTROL_4: IISOEN (Bit 14)                    */
#define USB_0_EPCONTROL_4_IISOEN_Msk      (0x4000UL)                /*!< USB_0 EPCONTROL_4: IISOEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_AUTOSETEN_Pos   (15UL)                    /*!< USB_0 EPCONTROL_4: AUTOSETEN (Bit 15)                 */
#define USB_0_EPCONTROL_4_AUTOSETEN_Msk   (0x8000UL)                /*!< USB_0 EPCONTROL_4: AUTOSETEN (Bitfield-Mask: 0x01)    */
#define USB_0_EPCONTROL_4_OPRDYI_Pos      (16UL)                    /*!< USB_0 EPCONTROL_4: OPRDYI (Bit 16)                    */
#define USB_0_EPCONTROL_4_OPRDYI_Msk      (0x10000UL)               /*!< USB_0 EPCONTROL_4: OPRDYI (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_OFIFOFF_Pos     (17UL)                    /*!< USB_0 EPCONTROL_4: OFIFOFF (Bit 17)                   */
#define USB_0_EPCONTROL_4_OFIFOFF_Msk     (0x20000UL)               /*!< USB_0 EPCONTROL_4: OFIFOFF (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_4_OORF_Pos        (18UL)                    /*!< USB_0 EPCONTROL_4: OORF (Bit 18)                      */
#define USB_0_EPCONTROL_4_OORF_Msk        (0x40000UL)               /*!< USB_0 EPCONTROL_4: OORF (Bitfield-Mask: 0x01)         */
#define USB_0_EPCONTROL_4_ODERRF_Pos      (19UL)                    /*!< USB_0 EPCONTROL_4: ODERRF (Bit 19)                    */
#define USB_0_EPCONTROL_4_ODERRF_Msk      (0x80000UL)               /*!< USB_0 EPCONTROL_4: ODERRF (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_OFIFOFL_Pos     (20UL)                    /*!< USB_0 EPCONTROL_4: OFIFOFL (Bit 20)                   */
#define USB_0_EPCONTROL_4_OFIFOFL_Msk     (0x100000UL)              /*!< USB_0 EPCONTROL_4: OFIFOFL (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_4_OSDSTL_Pos      (21UL)                    /*!< USB_0 EPCONTROL_4: OSDSTL (Bit 21)                    */
#define USB_0_EPCONTROL_4_OSDSTL_Msk      (0x200000UL)              /*!< USB_0 EPCONTROL_4: OSDSTL (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_OSTSTLI_Pos     (22UL)                    /*!< USB_0 EPCONTROL_4: OSTSTLI (Bit 22)                   */
#define USB_0_EPCONTROL_4_OSTSTLI_Msk     (0x400000UL)              /*!< USB_0 EPCONTROL_4: OSTSTLI (Bitfield-Mask: 0x01)      */
#define USB_0_EPCONTROL_4_OCLRDT_Pos      (23UL)                    /*!< USB_0 EPCONTROL_4: OCLRDT (Bit 23)                    */
#define USB_0_EPCONTROL_4_OCLRDT_Msk      (0x800000UL)              /*!< USB_0 EPCONTROL_4: OCLRDT (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_ODMAMD_Pos      (28UL)                    /*!< USB_0 EPCONTROL_4: ODMAMD (Bit 28)                    */
#define USB_0_EPCONTROL_4_ODMAMD_Msk      (0x10000000UL)            /*!< USB_0 EPCONTROL_4: ODMAMD (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_ODMAEN_Pos      (29UL)                    /*!< USB_0 EPCONTROL_4: ODMAEN (Bit 29)                    */
#define USB_0_EPCONTROL_4_ODMAEN_Msk      (0x20000000UL)            /*!< USB_0 EPCONTROL_4: ODMAEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_OISOEN_Pos      (30UL)                    /*!< USB_0 EPCONTROL_4: OISOEN (Bit 30)                    */
#define USB_0_EPCONTROL_4_OISOEN_Msk      (0x40000000UL)            /*!< USB_0 EPCONTROL_4: OISOEN (Bitfield-Mask: 0x01)       */
#define USB_0_EPCONTROL_4_AUTOCLREN_Pos   (31UL)                    /*!< USB_0 EPCONTROL_4: AUTOCLREN (Bit 31)                 */
#define USB_0_EPCONTROL_4_AUTOCLREN_Msk   (0x80000000UL)            /*!< USB_0 EPCONTROL_4: AUTOCLREN (Bitfield-Mask: 0x01)    */
/* =======================================================  EPCOUNT_4  ======================================================= */
#define USB_0_EPCOUNT_4_COUNT_Pos         (0UL)                     /*!< USB_0 EPCOUNT_4: COUNT (Bit 0)                        */
#define USB_0_EPCOUNT_4_COUNT_Msk         (0x3ffUL)                 /*!< USB_0 EPCOUNT_4: COUNT (Bitfield-Mask: 0x3ff)         */
/* =======================================================  EPFIFO_4  ======================================================== */
#define USB_0_EPFIFO_4_FIFO_Pos           (0UL)                     /*!< USB_0 EPFIFO_4: FIFO (Bit 0)                          */
#define USB_0_EPFIFO_4_FIFO_Msk           (0xffffffffUL)            /*!< USB_0 EPFIFO_4: FIFO (Bitfield-Mask: 0xffffffff)      */


/* =========================================================================================================================== */
/* ================                                          VMON_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define VMON_0_CONTROL_VREGINSEN_Pos      (0UL)                     /*!< VMON_0 CONTROL: VREGINSEN (Bit 0)                     */
#define VMON_0_CONTROL_VREGINSEN_Msk      (0x1UL)                   /*!< VMON_0 CONTROL: VREGINSEN (Bitfield-Mask: 0x01)       */
#define VMON_0_CONTROL_VREGINLI_Pos       (1UL)                     /*!< VMON_0 CONTROL: VREGINLI (Bit 1)                      */
#define VMON_0_CONTROL_VREGINLI_Msk       (0x2UL)                   /*!< VMON_0 CONTROL: VREGINLI (Bitfield-Mask: 0x01)        */
#define VMON_0_CONTROL_VDDRSTF_Pos        (2UL)                     /*!< VMON_0 CONTROL: VDDRSTF (Bit 2)                       */
#define VMON_0_CONTROL_VDDRSTF_Msk        (0x4UL)                   /*!< VMON_0 CONTROL: VDDRSTF (Bitfield-Mask: 0x01)         */
#define VMON_0_CONTROL_VDDLI_Pos          (3UL)                     /*!< VMON_0 CONTROL: VDDLI (Bit 3)                         */
#define VMON_0_CONTROL_VDDLI_Msk          (0x8UL)                   /*!< VMON_0 CONTROL: VDDLI (Bitfield-Mask: 0x01)           */
#define VMON_0_CONTROL_VDDHITHEN_Pos      (4UL)                     /*!< VMON_0 CONTROL: VDDHITHEN (Bit 4)                     */
#define VMON_0_CONTROL_VDDHITHEN_Msk      (0x10UL)                  /*!< VMON_0 CONTROL: VDDHITHEN (Bitfield-Mask: 0x01)       */
#define VMON_0_CONTROL_VDDLIEN_Pos        (6UL)                     /*!< VMON_0 CONTROL: VDDLIEN (Bit 6)                       */
#define VMON_0_CONTROL_VDDLIEN_Msk        (0x40UL)                  /*!< VMON_0 CONTROL: VDDLIEN (Bitfield-Mask: 0x01)         */
#define VMON_0_CONTROL_VREGINLIEN_Pos     (7UL)                     /*!< VMON_0 CONTROL: VREGINLIEN (Bit 7)                    */
#define VMON_0_CONTROL_VREGINLIEN_Msk     (0x80UL)                  /*!< VMON_0 CONTROL: VREGINLIEN (Bitfield-Mask: 0x01)      */
#define VMON_0_CONTROL_VMONEN_Pos         (31UL)                    /*!< VMON_0 CONTROL: VMONEN (Bit 31)                       */
#define VMON_0_CONTROL_VMONEN_Msk         (0x80000000UL)            /*!< VMON_0 CONTROL: VMONEN (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                          VREF_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define VREF_0_CONTROL_VREF2X_Pos         (0UL)                     /*!< VREF_0 CONTROL: VREF2X (Bit 0)                        */
#define VREF_0_CONTROL_VREF2X_Msk         (0x1UL)                   /*!< VREF_0 CONTROL: VREF2X (Bitfield-Mask: 0x01)          */
#define VREF_0_CONTROL_TEMPEN_Pos         (1UL)                     /*!< VREF_0 CONTROL: TEMPEN (Bit 1)                        */
#define VREF_0_CONTROL_TEMPEN_Msk         (0x2UL)                   /*!< VREF_0 CONTROL: TEMPEN (Bitfield-Mask: 0x01)          */
#define VREF_0_CONTROL_VREFEN_Pos         (31UL)                    /*!< VREF_0 CONTROL: VREFEN (Bit 31)                       */
#define VREF_0_CONTROL_VREFEN_Msk         (0x80000000UL)            /*!< VREF_0 CONTROL: VREFEN (Bitfield-Mask: 0x01)          */


/* =========================================================================================================================== */
/* ================                                         EXTVREG_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define EXTVREG_0_CONTROL_SAEN_Pos        (0UL)                     /*!< EXTVREG_0 CONTROL: SAEN (Bit 0)                       */
#define EXTVREG_0_CONTROL_SAEN_Msk        (0x1UL)                   /*!< EXTVREG_0 CONTROL: SAEN (Bitfield-Mask: 0x01)         */
#define EXTVREG_0_CONTROL_WPULLEN_Pos     (24UL)                    /*!< EXTVREG_0 CONTROL: WPULLEN (Bit 24)                   */
#define EXTVREG_0_CONTROL_WPULLEN_Msk     (0x1000000UL)             /*!< EXTVREG_0 CONTROL: WPULLEN (Bitfield-Mask: 0x01)      */
#define EXTVREG_0_CONTROL_FBLEN_Pos       (25UL)                    /*!< EXTVREG_0 CONTROL: FBLEN (Bit 25)                     */
#define EXTVREG_0_CONTROL_FBLEN_Msk       (0x2000000UL)             /*!< EXTVREG_0 CONTROL: FBLEN (Bitfield-Mask: 0x01)        */
#define EXTVREG_0_CONTROL_PNSEL_Pos       (26UL)                    /*!< EXTVREG_0 CONTROL: PNSEL (Bit 26)                     */
#define EXTVREG_0_CONTROL_PNSEL_Msk       (0x4000000UL)             /*!< EXTVREG_0 CONTROL: PNSEL (Bitfield-Mask: 0x01)        */
#define EXTVREG_0_CONTROL_FBPINSEL_Pos    (27UL)                    /*!< EXTVREG_0 CONTROL: FBPINSEL (Bit 27)                  */
#define EXTVREG_0_CONTROL_FBPINSEL_Msk    (0x8000000UL)             /*!< EXTVREG_0 CONTROL: FBPINSEL (Bitfield-Mask: 0x01)     */
#define EXTVREG_0_CONTROL_EVREGEN_Pos     (31UL)                    /*!< EXTVREG_0 CONTROL: EVREGEN (Bit 31)                   */
#define EXTVREG_0_CONTROL_EVREGEN_Msk     (0x80000000UL)            /*!< EXTVREG_0 CONTROL: EVREGEN (Bitfield-Mask: 0x01)      */
/* ========================================================  CONFIG  ========================================================= */
#define EXTVREG_0_CONFIG_IMINFINE_Pos     (0UL)                     /*!< EXTVREG_0 CONFIG: IMINFINE (Bit 0)                    */
#define EXTVREG_0_CONFIG_IMINFINE_Msk     (0x3UL)                   /*!< EXTVREG_0 CONFIG: IMINFINE (Bitfield-Mask: 0x03)      */
#define EXTVREG_0_CONFIG_IMIN_Pos         (2UL)                     /*!< EXTVREG_0 CONFIG: IMIN (Bit 2)                        */
#define EXTVREG_0_CONFIG_IMIN_Msk         (0x1cUL)                  /*!< EXTVREG_0 CONFIG: IMIN (Bitfield-Mask: 0x07)          */
#define EXTVREG_0_CONFIG_FBVOSEL_Pos      (8UL)                     /*!< EXTVREG_0 CONFIG: FBVOSEL (Bit 8)                     */
#define EXTVREG_0_CONFIG_FBVOSEL_Msk      (0x700UL)                 /*!< EXTVREG_0 CONFIG: FBVOSEL (Bitfield-Mask: 0x07)       */
#define EXTVREG_0_CONFIG_FBRATE_Pos       (12UL)                    /*!< EXTVREG_0 CONFIG: FBRATE (Bit 12)                     */
#define EXTVREG_0_CONFIG_FBRATE_Msk       (0x7000UL)                /*!< EXTVREG_0 CONFIG: FBRATE (Bitfield-Mask: 0x07)        */
#define EXTVREG_0_CONFIG_IMAX_Pos         (16UL)                    /*!< EXTVREG_0 CONFIG: IMAX (Bit 16)                       */
#define EXTVREG_0_CONFIG_IMAX_Msk         (0x70000UL)               /*!< EXTVREG_0 CONFIG: IMAX (Bitfield-Mask: 0x07)          */
#define EXTVREG_0_CONFIG_VOUTSEL_Pos      (24UL)                    /*!< EXTVREG_0 CONFIG: VOUTSEL (Bit 24)                    */
#define EXTVREG_0_CONFIG_VOUTSEL_Msk      (0x3f000000UL)            /*!< EXTVREG_0 CONFIG: VOUTSEL (Bitfield-Mask: 0x3f)       */
/* ========================================================  STATUS  ========================================================= */
#define EXTVREG_0_STATUS_FBMAXF_Pos       (0UL)                     /*!< EXTVREG_0 STATUS: FBMAXF (Bit 0)                      */
#define EXTVREG_0_STATUS_FBMAXF_Msk       (0x1UL)                   /*!< EXTVREG_0 STATUS: FBMAXF (Bitfield-Mask: 0x01)        */
/* =======================================================  CSCONTROL  ======================================================= */
#define EXTVREG_0_CSCONTROL_ISNSEN_Pos    (30UL)                    /*!< EXTVREG_0 CSCONTROL: ISNSEN (Bit 30)                  */
#define EXTVREG_0_CSCONTROL_ISNSEN_Msk    (0x40000000UL)            /*!< EXTVREG_0 CSCONTROL: ISNSEN (Bitfield-Mask: 0x01)     */
#define EXTVREG_0_CSCONTROL_ADCISNSEN_Pos (31UL)                    /*!< EXTVREG_0 CSCONTROL: ADCISNSEN (Bit 31)               */
#define EXTVREG_0_CSCONTROL_ADCISNSEN_Msk (0x80000000UL)            /*!< EXTVREG_0 CSCONTROL: ADCISNSEN (Bitfield-Mask: 0x01)  */
/* =======================================================  CSCONFIG  ======================================================== */
#define EXTVREG_0_CSCONFIG_ISADCGAIN_Pos  (0UL)                     /*!< EXTVREG_0 CSCONFIG: ISADCGAIN (Bit 0)                 */
#define EXTVREG_0_CSCONFIG_ISADCGAIN_Msk  (0x7UL)                   /*!< EXTVREG_0 CSCONFIG: ISADCGAIN (Bitfield-Mask: 0x07)   */
#define EXTVREG_0_CSCONFIG_ISOGAIN_Pos    (3UL)                     /*!< EXTVREG_0 CSCONFIG: ISOGAIN (Bit 3)                   */
#define EXTVREG_0_CSCONFIG_ISOGAIN_Msk    (0x38UL)                  /*!< EXTVREG_0 CSCONFIG: ISOGAIN (Bitfield-Mask: 0x07)     */
#define EXTVREG_0_CSCONFIG_ISINSEL_Pos    (6UL)                     /*!< EXTVREG_0 CSCONFIG: ISINSEL (Bit 6)                   */
#define EXTVREG_0_CSCONFIG_ISINSEL_Msk    (0xc0UL)                  /*!< EXTVREG_0 CSCONFIG: ISINSEL (Bitfield-Mask: 0x03)     */


/* =========================================================================================================================== */
/* ================                                          VREG_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define VREG_0_CONTROL_VBUSVLDF_Pos       (0UL)                     /*!< VREG_0 CONTROL: VBUSVLDF (Bit 0)                      */
#define VREG_0_CONTROL_VBUSVLDF_Msk       (0x1UL)                   /*!< VREG_0 CONTROL: VBUSVLDF (Bitfield-Mask: 0x01)        */
#define VREG_0_CONTROL_SUSEN_Pos          (1UL)                     /*!< VREG_0 CONTROL: SUSEN (Bit 1)                         */
#define VREG_0_CONTROL_SUSEN_Msk          (0x2UL)                   /*!< VREG_0 CONTROL: SUSEN (Bitfield-Mask: 0x01)           */
#define VREG_0_CONTROL_BGDIS_Pos          (5UL)                     /*!< VREG_0 CONTROL: BGDIS (Bit 5)                         */
#define VREG_0_CONTROL_BGDIS_Msk          (0x20UL)                  /*!< VREG_0 CONTROL: BGDIS (Bitfield-Mask: 0x01)           */
#define VREG_0_CONTROL_SENSEEN_Pos        (6UL)                     /*!< VREG_0 CONTROL: SENSEEN (Bit 6)                       */
#define VREG_0_CONTROL_SENSEEN_Msk        (0x40UL)                  /*!< VREG_0 CONTROL: SENSEEN (Bitfield-Mask: 0x01)         */
#define VREG_0_CONTROL_VBUSIVLDI_Pos      (7UL)                     /*!< VREG_0 CONTROL: VBUSIVLDI (Bit 7)                     */
#define VREG_0_CONTROL_VBUSIVLDI_Msk      (0x80UL)                  /*!< VREG_0 CONTROL: VBUSIVLDI (Bitfield-Mask: 0x01)       */
#define VREG_0_CONTROL_VBUSIVLDIEN_Pos    (8UL)                     /*!< VREG_0 CONTROL: VBUSIVLDIEN (Bit 8)                   */
#define VREG_0_CONTROL_VBUSIVLDIEN_Msk    (0x100UL)                 /*!< VREG_0 CONTROL: VBUSIVLDIEN (Bitfield-Mask: 0x01)     */
#define VREG_0_CONTROL_VREGDIS_Pos        (31UL)                    /*!< VREG_0 CONTROL: VREGDIS (Bit 31)                      */
#define VREG_0_CONTROL_VREGDIS_Msk        (0x80000000UL)            /*!< VREG_0 CONTROL: VREGDIS (Bitfield-Mask: 0x01)         */


/* =========================================================================================================================== */
/* ================                                           LDO_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define LDO_0_CONTROL_LDOIBIAS_Pos        (1UL)                     /*!< LDO_0 CONTROL: LDOIBIAS (Bit 1)                       */
#define LDO_0_CONTROL_LDOIBIAS_Msk        (0x2UL)                   /*!< LDO_0 CONTROL: LDOIBIAS (Bitfield-Mask: 0x01)         */
#define LDO_0_CONTROL_LDOAEN_Pos          (31UL)                    /*!< LDO_0 CONTROL: LDOAEN (Bit 31)                        */
#define LDO_0_CONTROL_LDOAEN_Msk          (0x80000000UL)            /*!< LDO_0 CONTROL: LDOAEN (Bitfield-Mask: 0x01)           */


/* =========================================================================================================================== */
/* ================                                         WDTIMER_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
#define WDTIMER_0_CONTROL_EWIEN_Pos       (0UL)                     /*!< WDTIMER_0 CONTROL: EWIEN (Bit 0)                      */
#define WDTIMER_0_CONTROL_EWIEN_Msk       (0x1UL)                   /*!< WDTIMER_0 CONTROL: EWIEN (Bitfield-Mask: 0x01)        */
#define WDTIMER_0_CONTROL_DBGMD_Pos       (1UL)                     /*!< WDTIMER_0 CONTROL: DBGMD (Bit 1)                      */
#define WDTIMER_0_CONTROL_DBGMD_Msk       (0x2UL)                   /*!< WDTIMER_0 CONTROL: DBGMD (Bitfield-Mask: 0x01)        */
/* ========================================================  STATUS  ========================================================= */
#define WDTIMER_0_STATUS_KEYSTS_Pos       (0UL)                     /*!< WDTIMER_0 STATUS: KEYSTS (Bit 0)                      */
#define WDTIMER_0_STATUS_KEYSTS_Msk       (0x1UL)                   /*!< WDTIMER_0 STATUS: KEYSTS (Bitfield-Mask: 0x01)        */
#define WDTIMER_0_STATUS_PRIVSTS_Pos      (1UL)                     /*!< WDTIMER_0 STATUS: PRIVSTS (Bit 1)                     */
#define WDTIMER_0_STATUS_PRIVSTS_Msk      (0x2UL)                   /*!< WDTIMER_0 STATUS: PRIVSTS (Bitfield-Mask: 0x01)       */
#define WDTIMER_0_STATUS_EWI_Pos          (2UL)                     /*!< WDTIMER_0 STATUS: EWI (Bit 2)                         */
#define WDTIMER_0_STATUS_EWI_Msk          (0x4UL)                   /*!< WDTIMER_0 STATUS: EWI (Bitfield-Mask: 0x01)           */
#define WDTIMER_0_STATUS_RTHF_Pos         (3UL)                     /*!< WDTIMER_0 STATUS: RTHF (Bit 3)                        */
#define WDTIMER_0_STATUS_RTHF_Msk         (0x8UL)                   /*!< WDTIMER_0 STATUS: RTHF (Bitfield-Mask: 0x01)          */
#define WDTIMER_0_STATUS_UPDSTS_Pos       (4UL)                     /*!< WDTIMER_0 STATUS: UPDSTS (Bit 4)                      */
#define WDTIMER_0_STATUS_UPDSTS_Msk       (0x10UL)                  /*!< WDTIMER_0 STATUS: UPDSTS (Bitfield-Mask: 0x01)        */
/* =======================================================  THRESHOLD  ======================================================= */
#define WDTIMER_0_THRESHOLD_EWTH_Pos      (0UL)                     /*!< WDTIMER_0 THRESHOLD: EWTH (Bit 0)                     */
#define WDTIMER_0_THRESHOLD_EWTH_Msk      (0xffffUL)                /*!< WDTIMER_0 THRESHOLD: EWTH (Bitfield-Mask: 0xffff)     */
#define WDTIMER_0_THRESHOLD_RTH_Pos       (16UL)                    /*!< WDTIMER_0 THRESHOLD: RTH (Bit 16)                     */
#define WDTIMER_0_THRESHOLD_RTH_Msk       (0xffff0000UL)            /*!< WDTIMER_0 THRESHOLD: RTH (Bitfield-Mask: 0xffff)      */
/* ========================================================  WDTKEY  ========================================================= */
#define WDTIMER_0_WDTKEY_KEY_Pos          (0UL)                     /*!< WDTIMER_0 WDTKEY: KEY (Bit 0)                         */
#define WDTIMER_0_WDTKEY_KEY_Msk          (0xffUL)                  /*!< WDTIMER_0 WDTKEY: KEY (Bitfield-Mask: 0xff)           */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                             Enumerated Values Cluster Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_clusters
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           DATA                                            ================ */
/* =========================================================================================================================== */

/* ==========================================================  U32  ========================================================== */
/* ==========================================================  U16  ========================================================== */
/* ==========================================================  U8  =========================================================== */

/** @} */ /* End of group EnumValue_clusters */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                         SARADC_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  SARADC_0 CONFIG SPSEL [0..3]  ============================================== */
typedef enum {                                  /*!< SARADC_0_CONFIG_SPSEL                                                     */
  SARADC_0_CONFIG_SPSEL_PHASE0         = 0,     /*!< PHASE0 : The ADC samples at SSG phase 0.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE1         = 1,     /*!< PHASE1 : The ADC samples at SSG phase 1.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE2         = 2,     /*!< PHASE2 : The ADC samples at SSG phase 2.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE3         = 3,     /*!< PHASE3 : The ADC samples at SSG phase 3.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE4         = 4,     /*!< PHASE4 : The ADC samples at SSG phase 4.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE5         = 5,     /*!< PHASE5 : The ADC samples at SSG phase 5.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE6         = 6,     /*!< PHASE6 : The ADC samples at SSG phase 6.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE7         = 7,     /*!< PHASE7 : The ADC samples at SSG phase 7.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE8         = 8,     /*!< PHASE8 : The ADC samples at SSG phase 8.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE9         = 9,     /*!< PHASE9 : The ADC samples at SSG phase 9.                                  */
  SARADC_0_CONFIG_SPSEL_PHASE10        = 10,    /*!< PHASE10 : The ADC samples at SSG phase 10.                                */
  SARADC_0_CONFIG_SPSEL_PHASE11        = 11,    /*!< PHASE11 : The ADC samples at SSG phase 11.                                */
  SARADC_0_CONFIG_SPSEL_PHASE12        = 12,    /*!< PHASE12 : The ADC samples at SSG phase 12.                                */
  SARADC_0_CONFIG_SPSEL_PHASE13        = 13,    /*!< PHASE13 : The ADC samples at SSG phase 13.                                */
  SARADC_0_CONFIG_SPSEL_PHASE14        = 14,    /*!< PHASE14 : The ADC samples at SSG phase 14.                                */
  SARADC_0_CONFIG_SPSEL_PHASE15        = 15,    /*!< PHASE15 : The ADC samples at SSG phase 15.                                */
} SARADC_0_CONFIG_SPSEL_Enum;

/* ==============================================  SARADC_0 CONFIG SPEN [4..4]  ============================================== */
typedef enum {                                  /*!< SARADC_0_CONFIG_SPEN                                                      */
  SARADC_0_CONFIG_SPEN_DISABLED        = 0,     /*!< DISABLED : Disable Phase Select. The ADC will always sample
                                                                    on the start-of-conversion trigger selected
                                                                    by the SCSEL field.                                        */
  SARADC_0_CONFIG_SPEN_ENABLED         = 1,     /*!< ENABLED : Enable Phase Select. The ADC will sample according
                                                     to the phase selected by the SPSEL field.                                 */
} SARADC_0_CONFIG_SPEN_Enum;

/* =============================================  SARADC_0 CONFIG SSGEN [5..5]  ============================================== */
typedef enum {                                  /*!< SARADC_0_CONFIG_SSGEN                                                     */
  SARADC_0_CONFIG_SSGEN_DISABLED       = 0,     /*!< DISABLED : Disable the SAR clock output to SSG.                           */
  SARADC_0_CONFIG_SSGEN_ENABLED        = 1,     /*!< ENABLED : The ADC is the SSG master, and the SAR clock will
                                                     be output to the SSG block.                                               */
} SARADC_0_CONFIG_SSGEN_Enum;

/* =============================================  SARADC_0 CONFIG PACKMD [6..7]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CONFIG_PACKMD                                                    */
  SARADC_0_CONFIG_PACKMD_UPPER_ONLY    = 0,     /*!< UPPER_ONLY : Data is written to the upper half-word and the
                                                     lower half-word is filled with 0's. An SCI interrupt is
                                                     triggered when data is written, if enabled.                               */
  SARADC_0_CONFIG_PACKMD_LOWER_ONLY    = 1,     /*!< LOWER_ONLY : Data is written to the lower half-word, and the
                                                     upper half-word is filled with 0's. An SCI interrupt is
                                                     triggered when data is written, if enabled.                               */
  SARADC_0_CONFIG_PACKMD_UPPER_FIRST   = 2,     /*!< UPPER_FIRST : Two data words are packed into the register with
                                                     the upper half-word representing the earlier data, and
                                                     the lower half-word representing the later data. If SIMCEN
                                                     is set to 1, the upper half-word represents data from the
                                                     master ADC (selected by SSGEN) and the lower half-word
                                                     represents data from the slave ADC. The ADC write to the
                                                     lower half-word will trigger the SCI interrupt, if enabled.               */
  SARADC_0_CONFIG_PACKMD_LOWER_FIRST   = 3,     /*!< LOWER_FIRST : Two data words are packed into the register with
                                                     the lower half-word representing the earlier data, and
                                                     the upper half-word representing the later data. If SIMCEN
                                                     is set to 1, the lower half-word represents data from the
                                                     master ADC (selected by SSGEN) and the upper half-word
                                                     represents data from the slave ADC. The ADC write to the
                                                     upper half-word will trigger the SCI interrupt, if enabled.               */
} SARADC_0_CONFIG_PACKMD_Enum;

/* =============================================  SARADC_0 CONFIG SIMCEN [8..8]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CONFIG_SIMCEN                                                    */
  SARADC_0_CONFIG_SIMCEN_DISABLED      = 0,     /*!< DISABLED : Disable simultaneous mode conversion packing.                  */
  SARADC_0_CONFIG_SIMCEN_ENABLED       = 1,     /*!< ENABLED : Enable simultaneous mode conversion packing.                    */
} SARADC_0_CONFIG_SIMCEN_Enum;

/* ============================================  SARADC_0 CONFIG INTLVEN [9..9]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CONFIG_INTLVEN                                                   */
  SARADC_0_CONFIG_INTLVEN_DISABLED     = 0,     /*!< DISABLED : Disable interleaved mode conversion packing.                   */
  SARADC_0_CONFIG_INTLVEN_ENABLED      = 1,     /*!< ENABLED : Enable interleaved mode conversion packing.                     */
} SARADC_0_CONFIG_INTLVEN_Enum;

/* ============================================  SARADC_0 CONFIG SCANEN [10..10]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONFIG_SCANEN                                                    */
  SARADC_0_CONFIG_SCANEN_DISABLED      = 0,     /*!< DISABLED : Disable ADC scan mode.                                         */
  SARADC_0_CONFIG_SCANEN_ENABLED       = 1,     /*!< ENABLED : Enable ADC scan mode. The ADC will scan through the
                                                     defined time slots in sequence on every start of conversion.              */
} SARADC_0_CONFIG_SCANEN_Enum;

/* ============================================  SARADC_0 CONFIG SCANMD [12..12]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONFIG_SCANMD                                                    */
  SARADC_0_CONFIG_SCANMD_ONCE          = 0,     /*!< ONCE : The channel sequencer will cycle through all of the specified
                                                     time slots once.                                                          */
  SARADC_0_CONFIG_SCANMD_LOOP          = 1,     /*!< LOOP : The channel sequencer will cycle through all of the specified
                                                     time slots in a loop until SCANEN is cleared to 0.                        */
} SARADC_0_CONFIG_SCANMD_Enum;

/* ============================================  SARADC_0 CONFIG DMAEN [14..14]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CONFIG_DMAEN                                                     */
  SARADC_0_CONFIG_DMAEN_DISABLED       = 0,     /*!< DISABLED : Disable the ADC module DMA interface.                          */
  SARADC_0_CONFIG_DMAEN_ENABLED        = 1,     /*!< ENABLED : Enable the ADC module DMA interface.                            */
} SARADC_0_CONFIG_DMAEN_Enum;

/* ===========================================  SARADC_0 CONFIG BCLKSEL [15..15]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONFIG_BCLKSEL                                                   */
  SARADC_0_CONFIG_BCLKSEL_LPOSC0       = 0,     /*!< LPOSC0 : Burst mode uses the Low Power Oscillator.                        */
  SARADC_0_CONFIG_BCLKSEL_APB          = 1,     /*!< APB : Burst mode uses the APB clock.                                      */
} SARADC_0_CONFIG_BCLKSEL_Enum;

/* ============================================  SARADC_0 CONFIG SCCIEN [27..27]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONFIG_SCCIEN                                                    */
  SARADC_0_CONFIG_SCCIEN_DISABLED      = 0,     /*!< DISABLED : Disable the ADC single data conversion complete interrupt.     */
  SARADC_0_CONFIG_SCCIEN_ENABLED       = 1,     /*!< ENABLED : Enable the ADC single data conversion complete interrupt.       */
} SARADC_0_CONFIG_SCCIEN_Enum;

/* ============================================  SARADC_0 CONFIG SDIEN [28..28]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CONFIG_SDIEN                                                     */
  SARADC_0_CONFIG_SDIEN_DISABLED       = 0,     /*!< DISABLED : Disable the ADC scan complete interrupt.                       */
  SARADC_0_CONFIG_SDIEN_ENABLED        = 1,     /*!< ENABLED : Enable the ADC scan complete interrupt.                         */
} SARADC_0_CONFIG_SDIEN_Enum;

/* ============================================  SARADC_0 CONFIG FORIEN [29..29]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONFIG_FORIEN                                                    */
  SARADC_0_CONFIG_FORIEN_DISABLED      = 0,     /*!< DISABLED : Disable the data FIFO overrun interrupt.                       */
  SARADC_0_CONFIG_FORIEN_ENABLED       = 1,     /*!< ENABLED : Enable the data FIFO overrun interrupt.                         */
} SARADC_0_CONFIG_FORIEN_Enum;

/* ============================================  SARADC_0 CONFIG FURIEN [30..30]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONFIG_FURIEN                                                    */
  SARADC_0_CONFIG_FURIEN_DISABLED      = 0,     /*!< DISABLED : Disable the data FIFO underrun interrupt.                      */
  SARADC_0_CONFIG_FURIEN_ENABLED       = 1,     /*!< ENABLED : Enable the data FIFO underrun interrupt.                        */
} SARADC_0_CONFIG_FURIEN_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* ===========================================  SARADC_0 CONTROL REFGNDSEL [0..0]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CONTROL_REFGNDSEL                                                */
  SARADC_0_CONTROL_REFGNDSEL_INTERNAL  = 0,     /*!< INTERNAL : The internal device ground is used as the ground
                                                     reference for ADC conversions.                                            */
  SARADC_0_CONTROL_REFGNDSEL_EXTERNAL  = 1,     /*!< EXTERNAL : The VREFGND pin is used as the ground reference for
                                                     ADC conversions.                                                          */
} SARADC_0_CONTROL_REFGNDSEL_Enum;

/* ============================================  SARADC_0 CONTROL CLKESEL [1..1]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONTROL_CLKESEL                                                  */
  SARADC_0_CONTROL_CLKESEL_RISING      = 0,     /*!< RISING : Select the rising edge of the APB clock.                         */
  SARADC_0_CONTROL_CLKESEL_FALLING     = 1,     /*!< FALLING : Select the falling edge of the APB clock.                       */
} SARADC_0_CONTROL_CLKESEL_Enum;

/* ============================================  SARADC_0 CONTROL SCSEL [8..11]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CONTROL_SCSEL                                                    */
  SARADC_0_CONTROL_SCSEL_ADCNT0        = 0,     /*!< ADCNT0 : An ADC conversion triggers from the ADCnT0 ('On Demand'
                                                     by writing 1 to ADBUSY) trigger source.                                   */
  SARADC_0_CONTROL_SCSEL_ADCNT1        = 1,     /*!< ADCNT1 : An ADC conversion triggers from the ADCnT1 (Timer 0
                                                     Low Overflow) trigger source.                                             */
  SARADC_0_CONTROL_SCSEL_ADCNT2        = 2,     /*!< ADCNT2 : An ADC conversion triggers from the ADCnT2 (Timer 0
                                                     High Overflow) trigger source.                                            */
  SARADC_0_CONTROL_SCSEL_ADCNT3        = 3,     /*!< ADCNT3 : An ADC conversion triggers from the ADCnT3 (Timer 1
                                                     Low Overflow) trigger source.                                             */
  SARADC_0_CONTROL_SCSEL_ADCNT4        = 4,     /*!< ADCNT4 : An ADC conversion triggers from the ADCnT4 (Timer 1
                                                     High Overflow) trigger source.                                            */
  SARADC_0_CONTROL_SCSEL_ADCNT5        = 5,     /*!< ADCNT5 : An ADC conversion triggers from the ADCnT5 (EPCA0 synchronization
                                                     pulse) trigger source.                                                    */
  SARADC_0_CONTROL_SCSEL_ADCNT6        = 6,     /*!< ADCNT6 : An ADC conversion triggers from the ADCnT6 (I2C0 Timer
                                                     overflow) trigger source.                                                 */
  SARADC_0_CONTROL_SCSEL_ADCNT7        = 7,     /*!< ADCNT7 : An ADC conversion triggers from the ADCnT7 (I2C1 Timer
                                                     overflow) trigger source.                                                 */
  SARADC_0_CONTROL_SCSEL_ADCNT8        = 8,     /*!< ADCNT8 : An ADC conversion triggers from the ADCnT8 (SSG phase
                                                     defined by ADSP bits) trigger source.                                     */
  SARADC_0_CONTROL_SCSEL_ADCNT9        = 9,     /*!< ADCNT9 : An ADC conversion triggers from the ADCnT9 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_0_CONTROL_SCSEL_ADCNT10       = 10,    /*!< ADCNT10 : An ADC conversion triggers from the ADCnT10 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_0_CONTROL_SCSEL_ADCNT11       = 11,    /*!< ADCNT11 : An ADC conversion triggers from the ADCnT11 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_0_CONTROL_SCSEL_ADCNT12       = 12,    /*!< ADCNT12 : An ADC conversion triggers from the ADCnT12 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_0_CONTROL_SCSEL_ADCNT13       = 13,    /*!< ADCNT13 : An ADC conversion triggers from the ADCnT13 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_0_CONTROL_SCSEL_ADCNT14       = 14,    /*!< ADCNT14 : An ADC conversion triggers from the ADCnT14 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_0_CONTROL_SCSEL_ADCNT15       = 15,    /*!< ADCNT15 : An ADC conversion triggers from the ADCnT15 (PB1.13)
                                                     trigger source.                                                           */
} SARADC_0_CONTROL_SCSEL_Enum;

/* ===========================================  SARADC_0 CONTROL BURSTEN [16..16]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CONTROL_BURSTEN                                                  */
  SARADC_0_CONTROL_BURSTEN_DISABLED    = 0,     /*!< DISABLED : Disable burst mode.                                            */
  SARADC_0_CONTROL_BURSTEN_ENABLED     = 1,     /*!< ENABLED : Enable burst mode.                                              */
} SARADC_0_CONTROL_BURSTEN_Enum;

/* ============================================  SARADC_0 CONTROL ADCEN [17..17]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONTROL_ADCEN                                                    */
  SARADC_0_CONTROL_ADCEN_DISABLED      = 0,     /*!< DISABLED : Disable the ADC (low-power shutdown).                          */
  SARADC_0_CONTROL_ADCEN_ENABLED       = 1,     /*!< ENABLED : Enable the ADC (active and ready for data conversions).         */
} SARADC_0_CONTROL_ADCEN_Enum;

/* ==========================================  SARADC_0 CONTROL AD12BSSEL [18..18]  ========================================== */
typedef enum {                                  /*!< SARADC_0_CONTROL_AD12BSSEL                                                */
  SARADC_0_CONTROL_AD12BSSEL_FOUR      = 0,     /*!< FOUR : The ADC re-samples the input before each of the four
                                                     conversions.                                                              */
  SARADC_0_CONTROL_AD12BSSEL_ONE       = 1,     /*!< ONE : The ADC samples once before the first conversion and converts
                                                     four times.                                                               */
} SARADC_0_CONTROL_AD12BSSEL_Enum;

/* ============================================  SARADC_0 CONTROL VCMEN [19..19]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONTROL_VCMEN                                                    */
  SARADC_0_CONTROL_VCMEN_DISABLED      = 0,     /*!< DISABLED : Disable the common mode buffer.                                */
  SARADC_0_CONTROL_VCMEN_ENABLED       = 1,     /*!< ENABLED : Enable the common mode buffer.                                  */
} SARADC_0_CONTROL_VCMEN_Enum;

/* ============================================  SARADC_0 CONTROL ACCMD [21..21]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONTROL_ACCMD                                                    */
  SARADC_0_CONTROL_ACCMD_ACCUMULATE    = 0,     /*!< ACCUMULATE : Conversions will be accumulated for the specified
                                                     number of cycles in burst mode according to the channel
                                                     configuration.                                                            */
  SARADC_0_CONTROL_ACCMD_REPEAT        = 1,     /*!< REPEAT : Conversions will not be accumulated in burst mode.               */
} SARADC_0_CONTROL_ACCMD_Enum;

/* ============================================  SARADC_0 CONTROL TRKMD [22..22]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONTROL_TRKMD                                                    */
  SARADC_0_CONTROL_TRKMD_NORMAL        = 0,     /*!< NORMAL : Normal Tracking Mode: When the ADC is enabled, a conversion
                                                     begins immediately following the start-of-conversion signal.              */
  SARADC_0_CONTROL_TRKMD_DELAYED       = 1,     /*!< DELAYED : Delayed Tracking Mode: When the ADC is enabled, a
                                                     conversion begins 3 SAR clock cycles following the start-of-conversion
                                                     signal. The ADC is allowed to track during this time.                     */
} SARADC_0_CONTROL_TRKMD_Enum;

/* ===========================================  SARADC_0 CONTROL BIASSEL [24..25]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CONTROL_BIASSEL                                                  */
  SARADC_0_CONTROL_BIASSEL_MODE0       = 0,     /*!< MODE0 : Select bias current mode 0. Recommended to use modes
                                                     1, 2, or 3.                                                               */
  SARADC_0_CONTROL_BIASSEL_MODE1       = 1,     /*!< MODE1 : Select bias current mode 1 (SARCLK = 16 MHz).                     */
  SARADC_0_CONTROL_BIASSEL_MODE2       = 2,     /*!< MODE2 : Select bias current mode 2.                                       */
  SARADC_0_CONTROL_BIASSEL_MODE3       = 3,     /*!< MODE3 : Select bias current mode 3 (SARCLK = 4 MHz).                      */
} SARADC_0_CONTROL_BIASSEL_Enum;

/* ===========================================  SARADC_0 CONTROL LPMDEN [26..26]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CONTROL_LPMDEN                                                   */
  SARADC_0_CONTROL_LPMDEN_DISABLED     = 0,     /*!< DISABLED : Disable low power mode.                                        */
  SARADC_0_CONTROL_LPMDEN_ENABLED      = 1,     /*!< ENABLED : Enable low power mode (requires extended tracking
                                                     time).                                                                    */
} SARADC_0_CONTROL_LPMDEN_Enum;

/* ==========================================  SARADC_0 CONTROL MREFLPEN [27..27]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CONTROL_MREFLPEN                                                 */
  SARADC_0_CONTROL_MREFLPEN_DISABLED   = 0,     /*!< DISABLED : Disable low power mode.                                        */
  SARADC_0_CONTROL_MREFLPEN_ENABLED    = 1,     /*!< ENABLED : Enable low power mode (SAR clock <= 4 MHz).                     */
} SARADC_0_CONTROL_MREFLPEN_Enum;

/* ===========================================  SARADC_0 CONTROL VREFSEL [30..31]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CONTROL_VREFSEL                                                  */
  SARADC_0_CONTROL_VREFSEL_INTERNAL_VREF = 0,   /*!< INTERNAL_VREF : Select the internal, dedicated SARADC voltage
                                                     reference as the ADC reference.                                           */
  SARADC_0_CONTROL_VREFSEL_VDD         = 1,     /*!< VDD : Select the VDD pin as the ADC reference.                            */
  SARADC_0_CONTROL_VREFSEL_LDO_OUT     = 2,     /*!< LDO_OUT : Select the output of the internal LDO regulator (~1.8
                                                     V) as the ADC reference.                                                  */
  SARADC_0_CONTROL_VREFSEL_EXTERNAL_VREF = 3,   /*!< EXTERNAL_VREF : Select the VREF pin as the ADC reference. This
                                                     option is used for either an external VREF or the on-chip
                                                     VREF driving out to the VREF pin.                                         */
} SARADC_0_CONTROL_VREFSEL_Enum;

/* ========================================================  SQ7654  ========================================================= */
/* =============================================  SARADC_0 SQ7654 TS4CHR [0..1]  ============================================= */
typedef enum {                                  /*!< SARADC_0_SQ7654_TS4CHR                                                    */
  SARADC_0_SQ7654_TS4CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 4.                 */
  SARADC_0_SQ7654_TS4CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 4.                 */
  SARADC_0_SQ7654_TS4CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 4.                 */
  SARADC_0_SQ7654_TS4CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 4.                 */
} SARADC_0_SQ7654_TS4CHR_Enum;

/* =============================================  SARADC_0 SQ7654 TS4MUX [2..6]  ============================================= */
typedef enum {                                  /*!< SARADC_0_SQ7654_TS4MUX                                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB0.0).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB0.1).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB0.2).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB0.3).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB0.4).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB0.5).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB0.7).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB0.8).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB0.9).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB0.11).                                   */
  SARADC_0_SQ7654_TS4MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB0.12).                                 */
  SARADC_0_SQ7654_TS4MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.1).                                  */
  SARADC_0_SQ7654_TS4MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_0_SQ7654_TS4MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_0_SQ7654_TS4MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_0_SQ7654_TS4MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_0_SQ7654_TS4MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.0 Output (IVC0C0)).                 */
  SARADC_0_SQ7654_TS4MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (VSS).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (1.8 V Output of LDO).                    */
  SARADC_0_SQ7654_TS4MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (VDD).                                    */
  SARADC_0_SQ7654_TS4MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (Temperature Sensor Output).              */
  SARADC_0_SQ7654_TS4MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (VIOHD / 4).                              */
  SARADC_0_SQ7654_TS4MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_0_SQ7654_TS4MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_0_SQ7654_TS4MUX_Enum;

/* =============================================  SARADC_0 SQ7654 TS5CHR [8..9]  ============================================= */
typedef enum {                                  /*!< SARADC_0_SQ7654_TS5CHR                                                    */
  SARADC_0_SQ7654_TS5CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 5.                 */
  SARADC_0_SQ7654_TS5CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 5.                 */
  SARADC_0_SQ7654_TS5CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 5.                 */
  SARADC_0_SQ7654_TS5CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 5.                 */
} SARADC_0_SQ7654_TS5CHR_Enum;

/* ============================================  SARADC_0 SQ7654 TS5MUX [10..14]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ7654_TS5MUX                                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB0.0).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB0.1).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB0.2).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB0.3).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB0.4).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB0.5).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB0.7).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB0.8).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB0.9).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB0.11).                                   */
  SARADC_0_SQ7654_TS5MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB0.12).                                 */
  SARADC_0_SQ7654_TS5MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.1).                                  */
  SARADC_0_SQ7654_TS5MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_0_SQ7654_TS5MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_0_SQ7654_TS5MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_0_SQ7654_TS5MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_0_SQ7654_TS5MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.0 Output (IVC0C0)).                 */
  SARADC_0_SQ7654_TS5MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (VSS).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (1.8 V Output of LDO).                    */
  SARADC_0_SQ7654_TS5MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (VDD).                                    */
  SARADC_0_SQ7654_TS5MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (Temperature Sensor Output).              */
  SARADC_0_SQ7654_TS5MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (VIOHD / 4).                              */
  SARADC_0_SQ7654_TS5MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_0_SQ7654_TS5MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_0_SQ7654_TS5MUX_Enum;

/* ============================================  SARADC_0 SQ7654 TS6CHR [16..17]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ7654_TS6CHR                                                    */
  SARADC_0_SQ7654_TS6CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 6.                 */
  SARADC_0_SQ7654_TS6CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 6.                 */
  SARADC_0_SQ7654_TS6CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 6.                 */
  SARADC_0_SQ7654_TS6CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 6.                 */
} SARADC_0_SQ7654_TS6CHR_Enum;

/* ============================================  SARADC_0 SQ7654 TS6MUX [18..22]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ7654_TS6MUX                                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB0.0).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB0.1).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB0.2).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB0.3).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB0.4).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB0.5).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB0.7).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB0.8).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB0.9).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB0.11).                                   */
  SARADC_0_SQ7654_TS6MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB0.12).                                 */
  SARADC_0_SQ7654_TS6MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.1).                                  */
  SARADC_0_SQ7654_TS6MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_0_SQ7654_TS6MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_0_SQ7654_TS6MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_0_SQ7654_TS6MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_0_SQ7654_TS6MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.0 Output (IVC0C0)).                 */
  SARADC_0_SQ7654_TS6MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (VSS).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (1.8 V Output of LDO).                    */
  SARADC_0_SQ7654_TS6MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (VDD).                                    */
  SARADC_0_SQ7654_TS6MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (Temperature Sensor Output).              */
  SARADC_0_SQ7654_TS6MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (VIOHD / 4).                              */
  SARADC_0_SQ7654_TS6MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_0_SQ7654_TS6MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_0_SQ7654_TS6MUX_Enum;

/* ============================================  SARADC_0 SQ7654 TS7CHR [24..25]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ7654_TS7CHR                                                    */
  SARADC_0_SQ7654_TS7CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 7.                 */
  SARADC_0_SQ7654_TS7CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 7.                 */
  SARADC_0_SQ7654_TS7CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 7.                 */
  SARADC_0_SQ7654_TS7CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 7.                 */
} SARADC_0_SQ7654_TS7CHR_Enum;

/* ============================================  SARADC_0 SQ7654 TS7MUX [26..30]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ7654_TS7MUX                                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB0.0).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB0.1).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB0.2).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB0.3).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB0.4).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB0.5).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB0.7).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB0.8).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB0.9).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB0.11).                                   */
  SARADC_0_SQ7654_TS7MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB0.12).                                 */
  SARADC_0_SQ7654_TS7MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.1).                                  */
  SARADC_0_SQ7654_TS7MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_0_SQ7654_TS7MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_0_SQ7654_TS7MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_0_SQ7654_TS7MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_0_SQ7654_TS7MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.0 Output (IVC0C0)).                 */
  SARADC_0_SQ7654_TS7MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (VSS).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (1.8 V Output of LDO).                    */
  SARADC_0_SQ7654_TS7MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (VDD).                                    */
  SARADC_0_SQ7654_TS7MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (Temperature Sensor Output).              */
  SARADC_0_SQ7654_TS7MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (VIOHD / 4).                              */
  SARADC_0_SQ7654_TS7MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_0_SQ7654_TS7MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_0_SQ7654_TS7MUX_Enum;

/* ========================================================  SQ3210  ========================================================= */
/* =============================================  SARADC_0 SQ3210 TS0CHR [0..1]  ============================================= */
typedef enum {                                  /*!< SARADC_0_SQ3210_TS0CHR                                                    */
  SARADC_0_SQ3210_TS0CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 0.                 */
  SARADC_0_SQ3210_TS0CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 0.                 */
  SARADC_0_SQ3210_TS0CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 0.                 */
  SARADC_0_SQ3210_TS0CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 0.                 */
} SARADC_0_SQ3210_TS0CHR_Enum;

/* =============================================  SARADC_0 SQ3210 TS0MUX [2..6]  ============================================= */
typedef enum {                                  /*!< SARADC_0_SQ3210_TS0MUX                                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB0.0).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB0.1).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB0.2).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB0.3).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB0.4).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB0.5).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB0.7).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB0.8).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB0.9).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB0.11).                                   */
  SARADC_0_SQ3210_TS0MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB0.12).                                 */
  SARADC_0_SQ3210_TS0MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.1).                                  */
  SARADC_0_SQ3210_TS0MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_0_SQ3210_TS0MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_0_SQ3210_TS0MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_0_SQ3210_TS0MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_0_SQ3210_TS0MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.0 Output (IVC0C0)).                 */
  SARADC_0_SQ3210_TS0MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (VSS).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (1.8 V Output of LDO).                    */
  SARADC_0_SQ3210_TS0MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (VDD).                                    */
  SARADC_0_SQ3210_TS0MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (Temperature Sensor Output).              */
  SARADC_0_SQ3210_TS0MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (VIOHD / 4).                              */
  SARADC_0_SQ3210_TS0MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_0_SQ3210_TS0MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_0_SQ3210_TS0MUX_Enum;

/* =============================================  SARADC_0 SQ3210 TS1CHR [8..9]  ============================================= */
typedef enum {                                  /*!< SARADC_0_SQ3210_TS1CHR                                                    */
  SARADC_0_SQ3210_TS1CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 1.                 */
  SARADC_0_SQ3210_TS1CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 1.                 */
  SARADC_0_SQ3210_TS1CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 1.                 */
  SARADC_0_SQ3210_TS1CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 1.                 */
} SARADC_0_SQ3210_TS1CHR_Enum;

/* ============================================  SARADC_0 SQ3210 TS1MUX [10..14]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ3210_TS1MUX                                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB0.0).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB0.1).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB0.2).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB0.3).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB0.4).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB0.5).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB0.7).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB0.8).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB0.9).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB0.11).                                   */
  SARADC_0_SQ3210_TS1MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB0.12).                                 */
  SARADC_0_SQ3210_TS1MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.1).                                  */
  SARADC_0_SQ3210_TS1MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_0_SQ3210_TS1MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_0_SQ3210_TS1MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_0_SQ3210_TS1MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_0_SQ3210_TS1MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.0 Output (IVC0C0)).                 */
  SARADC_0_SQ3210_TS1MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (VSS).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (1.8 V Output of LDO).                    */
  SARADC_0_SQ3210_TS1MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (VDD).                                    */
  SARADC_0_SQ3210_TS1MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (Temperature Sensor Output).              */
  SARADC_0_SQ3210_TS1MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (VIOHD / 4).                              */
  SARADC_0_SQ3210_TS1MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_0_SQ3210_TS1MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_0_SQ3210_TS1MUX_Enum;

/* ============================================  SARADC_0 SQ3210 TS2CHR [16..17]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ3210_TS2CHR                                                    */
  SARADC_0_SQ3210_TS2CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 2.                 */
  SARADC_0_SQ3210_TS2CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 2.                 */
  SARADC_0_SQ3210_TS2CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 2.                 */
  SARADC_0_SQ3210_TS2CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 2.                 */
} SARADC_0_SQ3210_TS2CHR_Enum;

/* ============================================  SARADC_0 SQ3210 TS2MUX [18..22]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ3210_TS2MUX                                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB0.0).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB0.1).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB0.2).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB0.3).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB0.4).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB0.5).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB0.7).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB0.8).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB0.9).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB0.11).                                   */
  SARADC_0_SQ3210_TS2MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB0.12).                                 */
  SARADC_0_SQ3210_TS2MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.1).                                  */
  SARADC_0_SQ3210_TS2MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_0_SQ3210_TS2MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_0_SQ3210_TS2MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_0_SQ3210_TS2MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_0_SQ3210_TS2MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.0 Output (IVC0C0)).                 */
  SARADC_0_SQ3210_TS2MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (VSS).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (1.8 V Output of LDO).                    */
  SARADC_0_SQ3210_TS2MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (VDD).                                    */
  SARADC_0_SQ3210_TS2MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (Temperature Sensor Output).              */
  SARADC_0_SQ3210_TS2MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (VIOHD / 4).                              */
  SARADC_0_SQ3210_TS2MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_0_SQ3210_TS2MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_0_SQ3210_TS2MUX_Enum;

/* ============================================  SARADC_0 SQ3210 TS3CHR [24..25]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ3210_TS3CHR                                                    */
  SARADC_0_SQ3210_TS3CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 3.                 */
  SARADC_0_SQ3210_TS3CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 3.                 */
  SARADC_0_SQ3210_TS3CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 3.                 */
  SARADC_0_SQ3210_TS3CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 3.                 */
} SARADC_0_SQ3210_TS3CHR_Enum;

/* ============================================  SARADC_0 SQ3210 TS3MUX [26..30]  ============================================ */
typedef enum {                                  /*!< SARADC_0_SQ3210_TS3MUX                                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB0.0).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB0.1).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB0.2).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB0.3).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB0.4).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB0.5).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB0.7).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB0.8).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB0.9).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB0.11).                                   */
  SARADC_0_SQ3210_TS3MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB0.12).                                 */
  SARADC_0_SQ3210_TS3MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.1).                                  */
  SARADC_0_SQ3210_TS3MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_0_SQ3210_TS3MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_0_SQ3210_TS3MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_0_SQ3210_TS3MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_0_SQ3210_TS3MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.0 Output (IVC0C0)).                 */
  SARADC_0_SQ3210_TS3MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (VSS).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (1.8 V Output of LDO).                    */
  SARADC_0_SQ3210_TS3MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (VDD).                                    */
  SARADC_0_SQ3210_TS3MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (Temperature Sensor Output).              */
  SARADC_0_SQ3210_TS3MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (VIOHD / 4).                              */
  SARADC_0_SQ3210_TS3MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_0_SQ3210_TS3MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_0_SQ3210_TS3MUX_Enum;

/* ========================================================  CHAR32  ========================================================= */
/* =============================================  SARADC_0 CHAR32 CHR2GN [0..0]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CHAR32_CHR2GN                                                    */
  SARADC_0_CHAR32_CHR2GN_UNITY         = 0,     /*!< UNITY : The on-chip PGA gain is 1.                                        */
  SARADC_0_CHAR32_CHR2GN_HALF          = 1,     /*!< HALF : The on-chip PGA gain is 0.5.                                       */
} SARADC_0_CHAR32_CHR2GN_Enum;

/* ============================================  SARADC_0 CHAR32 CHR2RPT [1..3]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CHAR32_CHR2RPT                                                   */
  SARADC_0_CHAR32_CHR2RPT_ACC1         = 0,     /*!< ACC1 : Accumulate one sample.                                             */
  SARADC_0_CHAR32_CHR2RPT_ACC4         = 1,     /*!< ACC4 : Accumulate four samples.                                           */
  SARADC_0_CHAR32_CHR2RPT_ACC8         = 2,     /*!< ACC8 : Accumulate eight samples.                                          */
  SARADC_0_CHAR32_CHR2RPT_ACC16        = 3,     /*!< ACC16 : Accumulate sixteen samples.                                       */
  SARADC_0_CHAR32_CHR2RPT_ACC32        = 4,     /*!< ACC32 : Accumulate thirty-two samples (10-bit mode only).                 */
  SARADC_0_CHAR32_CHR2RPT_ACC64        = 5,     /*!< ACC64 : Accumulate sixty-four samples (10-bit mode only).                 */
} SARADC_0_CHAR32_CHR2RPT_Enum;

/* ============================================  SARADC_0 CHAR32 CHR2RSEL [7..7]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CHAR32_CHR2RSEL                                                  */
  SARADC_0_CHAR32_CHR2RSEL_B10         = 0,     /*!< B10 : Select 10-bit Mode.                                                 */
  SARADC_0_CHAR32_CHR2RSEL_B12         = 1,     /*!< B12 : Select 12-bit Mode (burst mode must be enabled).                    */
} SARADC_0_CHAR32_CHR2RSEL_Enum;

/* ===========================================  SARADC_0 CHAR32 CHR2WCIEN [8..8]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CHAR32_CHR2WCIEN                                                 */
  SARADC_0_CHAR32_CHR2WCIEN_DISABLED   = 0,     /*!< DISABLED : Disable window comparison interrupts.                          */
  SARADC_0_CHAR32_CHR2WCIEN_ENABLED    = 1,     /*!< ENABLED : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC_0_CHAR32_CHR2WCIEN_Enum;

/* ============================================  SARADC_0 CHAR32 CHR3GN [16..16]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CHAR32_CHR3GN                                                    */
  SARADC_0_CHAR32_CHR3GN_UNITY         = 0,     /*!< UNITY : The on-chip PGA gain is 1.                                        */
  SARADC_0_CHAR32_CHR3GN_HALF          = 1,     /*!< HALF : The on-chip PGA gain is 0.5.                                       */
} SARADC_0_CHAR32_CHR3GN_Enum;

/* ===========================================  SARADC_0 CHAR32 CHR3RPT [17..19]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CHAR32_CHR3RPT                                                   */
  SARADC_0_CHAR32_CHR3RPT_ACC1         = 0,     /*!< ACC1 : Accumulate one sample.                                             */
  SARADC_0_CHAR32_CHR3RPT_ACC4         = 1,     /*!< ACC4 : Accumulate four samples.                                           */
  SARADC_0_CHAR32_CHR3RPT_ACC8         = 2,     /*!< ACC8 : Accumulate eight samples.                                          */
  SARADC_0_CHAR32_CHR3RPT_ACC16        = 3,     /*!< ACC16 : Accumulate sixteen samples.                                       */
  SARADC_0_CHAR32_CHR3RPT_ACC32        = 4,     /*!< ACC32 : Accumulate thirty-two samples (10-bit mode only).                 */
  SARADC_0_CHAR32_CHR3RPT_ACC64        = 5,     /*!< ACC64 : Accumulate sixty-four samples (10-bit mode only).                 */
} SARADC_0_CHAR32_CHR3RPT_Enum;

/* ===========================================  SARADC_0 CHAR32 CHR3RSEL [23..23]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CHAR32_CHR3RSEL                                                  */
  SARADC_0_CHAR32_CHR3RSEL_B10         = 0,     /*!< B10 : Select 10-bit Mode.                                                 */
  SARADC_0_CHAR32_CHR3RSEL_B12         = 1,     /*!< B12 : Select 12-bit Mode (burst mode must be enabled).                    */
} SARADC_0_CHAR32_CHR3RSEL_Enum;

/* ==========================================  SARADC_0 CHAR32 CHR3WCIEN [24..24]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CHAR32_CHR3WCIEN                                                 */
  SARADC_0_CHAR32_CHR3WCIEN_DISABLED   = 0,     /*!< DISABLED : Disable window comparison interrupts.                          */
  SARADC_0_CHAR32_CHR3WCIEN_ENABLED    = 1,     /*!< ENABLED : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC_0_CHAR32_CHR3WCIEN_Enum;

/* ========================================================  CHAR10  ========================================================= */
/* =============================================  SARADC_0 CHAR10 CHR0GN [0..0]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CHAR10_CHR0GN                                                    */
  SARADC_0_CHAR10_CHR0GN_UNITY         = 0,     /*!< UNITY : The on-chip PGA gain is 1.                                        */
  SARADC_0_CHAR10_CHR0GN_HALF          = 1,     /*!< HALF : The on-chip PGA gain is 0.5.                                       */
} SARADC_0_CHAR10_CHR0GN_Enum;

/* ============================================  SARADC_0 CHAR10 CHR0RPT [1..3]  ============================================= */
typedef enum {                                  /*!< SARADC_0_CHAR10_CHR0RPT                                                   */
  SARADC_0_CHAR10_CHR0RPT_ACC1         = 0,     /*!< ACC1 : Accumulate one sample.                                             */
  SARADC_0_CHAR10_CHR0RPT_ACC4         = 1,     /*!< ACC4 : Accumulate four samples.                                           */
  SARADC_0_CHAR10_CHR0RPT_ACC8         = 2,     /*!< ACC8 : Accumulate eight samples.                                          */
  SARADC_0_CHAR10_CHR0RPT_ACC16        = 3,     /*!< ACC16 : Accumulate sixteen samples.                                       */
  SARADC_0_CHAR10_CHR0RPT_ACC32        = 4,     /*!< ACC32 : Accumulate thirty-two samples (10-bit mode only).                 */
  SARADC_0_CHAR10_CHR0RPT_ACC64        = 5,     /*!< ACC64 : Accumulate sixty-four samples (10-bit mode only).                 */
} SARADC_0_CHAR10_CHR0RPT_Enum;

/* ============================================  SARADC_0 CHAR10 CHR0RSEL [7..7]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CHAR10_CHR0RSEL                                                  */
  SARADC_0_CHAR10_CHR0RSEL_B10         = 0,     /*!< B10 : Select 10-bit Mode.                                                 */
  SARADC_0_CHAR10_CHR0RSEL_B12         = 1,     /*!< B12 : Select 12-bit Mode (burst mode must be enabled).                    */
} SARADC_0_CHAR10_CHR0RSEL_Enum;

/* ===========================================  SARADC_0 CHAR10 CHR0WCIEN [8..8]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CHAR10_CHR0WCIEN                                                 */
  SARADC_0_CHAR10_CHR0WCIEN_DISABLED   = 0,     /*!< DISABLED : Disable window comparison interrupts.                          */
  SARADC_0_CHAR10_CHR0WCIEN_ENABLED    = 1,     /*!< ENABLED : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC_0_CHAR10_CHR0WCIEN_Enum;

/* ============================================  SARADC_0 CHAR10 CHR1GN [16..16]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CHAR10_CHR1GN                                                    */
  SARADC_0_CHAR10_CHR1GN_UNITY         = 0,     /*!< UNITY : The on-chip PGA gain is 1.                                        */
  SARADC_0_CHAR10_CHR1GN_HALF          = 1,     /*!< HALF : The on-chip PGA gain is 0.5.                                       */
} SARADC_0_CHAR10_CHR1GN_Enum;

/* ===========================================  SARADC_0 CHAR10 CHR1RPT [17..19]  ============================================ */
typedef enum {                                  /*!< SARADC_0_CHAR10_CHR1RPT                                                   */
  SARADC_0_CHAR10_CHR1RPT_ACC1         = 0,     /*!< ACC1 : Accumulate one sample.                                             */
  SARADC_0_CHAR10_CHR1RPT_ACC4         = 1,     /*!< ACC4 : Accumulate four samples.                                           */
  SARADC_0_CHAR10_CHR1RPT_ACC8         = 2,     /*!< ACC8 : Accumulate eight samples.                                          */
  SARADC_0_CHAR10_CHR1RPT_ACC16        = 3,     /*!< ACC16 : Accumulate sixteen samples.                                       */
  SARADC_0_CHAR10_CHR1RPT_ACC32        = 4,     /*!< ACC32 : Accumulate thirty-two samples (10-bit mode only).                 */
  SARADC_0_CHAR10_CHR1RPT_ACC64        = 5,     /*!< ACC64 : Accumulate sixty-four samples (10-bit mode only).                 */
} SARADC_0_CHAR10_CHR1RPT_Enum;

/* ===========================================  SARADC_0 CHAR10 CHR1RSEL [23..23]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CHAR10_CHR1RSEL                                                  */
  SARADC_0_CHAR10_CHR1RSEL_B10         = 0,     /*!< B10 : Select 10-bit Mode.                                                 */
  SARADC_0_CHAR10_CHR1RSEL_B12         = 1,     /*!< B12 : Select 12-bit Mode (burst mode must be enabled).                    */
} SARADC_0_CHAR10_CHR1RSEL_Enum;

/* ==========================================  SARADC_0 CHAR10 CHR1WCIEN [24..24]  =========================================== */
typedef enum {                                  /*!< SARADC_0_CHAR10_CHR1WCIEN                                                 */
  SARADC_0_CHAR10_CHR1WCIEN_DISABLED   = 0,     /*!< DISABLED : Disable window comparison interrupts.                          */
  SARADC_0_CHAR10_CHR1WCIEN_ENABLED    = 1,     /*!< ENABLED : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC_0_CHAR10_CHR1WCIEN_Enum;

/* =========================================================  DATA  ========================================================== */
/* =======================================================  WCLIMITS  ======================================================== */
/* ==========================================================  ACC  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* ==============================================  SARADC_0 STATUS WCI [0..0]  =============================================== */
typedef enum {                                  /*!< SARADC_0_STATUS_WCI                                                       */
  SARADC_0_STATUS_WCI_NOT_SET          = 0,     /*!< NOT_SET : Read: A window compare interrupt has not occurred.
                                                     Write: Clear the interrupt.                                               */
  SARADC_0_STATUS_WCI_SET              = 1,     /*!< SET : Read: A window compare interrupt occurred. Write: Force
                                                     a window compare interrupt.                                               */
} SARADC_0_STATUS_WCI_Enum;

/* ==============================================  SARADC_0 STATUS SCCI [1..1]  ============================================== */
typedef enum {                                  /*!< SARADC_0_STATUS_SCCI                                                      */
  SARADC_0_STATUS_SCCI_NOT_SET         = 0,     /*!< NOT_SET : Read: A single data conversion interrupt has not occurred.
                                                     Write: Clear the interrupt.                                               */
  SARADC_0_STATUS_SCCI_SET             = 1,     /*!< SET : Read: A single data conversion interrupt occurred. Write:
                                                     Force a single data conversion interrupt.                                 */
} SARADC_0_STATUS_SCCI_Enum;

/* ==============================================  SARADC_0 STATUS SDI [2..2]  =============================================== */
typedef enum {                                  /*!< SARADC_0_STATUS_SDI                                                       */
  SARADC_0_STATUS_SDI_NOT_SET          = 0,     /*!< NOT_SET : Read: A scan done interrupt has not occurred. Write:
                                                     Clear the interrupt.                                                      */
  SARADC_0_STATUS_SDI_SET              = 1,     /*!< SET : Read: A scan done interrupt occurred. Write: Force a scan
                                                     done interrupt.                                                           */
} SARADC_0_STATUS_SDI_Enum;

/* ==============================================  SARADC_0 STATUS FORI [3..3]  ============================================== */
typedef enum {                                  /*!< SARADC_0_STATUS_FORI                                                      */
  SARADC_0_STATUS_FORI_NOT_SET         = 0,     /*!< NOT_SET : Read: A data FIFO overrun interrupt has not occurred.
                                                     Write: Clear the interrupt.                                               */
  SARADC_0_STATUS_FORI_SET             = 1,     /*!< SET : Read: A data FIFO overrun interrupt occurred. Write: Force
                                                     a data FIFO overrun interrupt.                                            */
} SARADC_0_STATUS_FORI_Enum;

/* ==============================================  SARADC_0 STATUS FURI [4..4]  ============================================== */
typedef enum {                                  /*!< SARADC_0_STATUS_FURI                                                      */
  SARADC_0_STATUS_FURI_NOT_SET         = 0,     /*!< NOT_SET : Read: A data FIFO underrun interrupt has not occurred.
                                                     Write: Clear the interrupt.                                               */
  SARADC_0_STATUS_FURI_SET             = 1,     /*!< SET : Read: A data FIFO underrun interrupt occurred. Write:
                                                     Force a data FIFO underrun interrupt.                                     */
} SARADC_0_STATUS_FURI_Enum;

/* ======================================================  FIFOSTATUS  ======================================================= */
/* ===========================================  SARADC_0 FIFOSTATUS DPSTS [4..4]  ============================================ */
typedef enum {                                  /*!< SARADC_0_FIFOSTATUS_DPSTS                                                 */
  SARADC_0_FIFOSTATUS_DPSTS_LOWER      = 0,     /*!< LOWER : The next ADC conversion will be written to the lower
                                                     half-word.                                                                */
  SARADC_0_FIFOSTATUS_DPSTS_UPPER      = 1,     /*!< UPPER : The next ADC conversion will be written to the upper
                                                     half-word.                                                                */
} SARADC_0_FIFOSTATUS_DPSTS_Enum;

/* ===========================================  SARADC_0 FIFOSTATUS DRDYF [5..5]  ============================================ */
typedef enum {                                  /*!< SARADC_0_FIFOSTATUS_DRDYF                                                 */
  SARADC_0_FIFOSTATUS_DRDYF_NOT_SET    = 0,     /*!< NOT_SET : New data is not produced yet.                                   */
  SARADC_0_FIFOSTATUS_DRDYF_SET        = 1,     /*!< SET : New data is ready.                                                  */
} SARADC_0_FIFOSTATUS_DRDYF_Enum;



/* =========================================================================================================================== */
/* ================                                         SARADC_1                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  SARADC_1 CONFIG SPSEL [0..3]  ============================================== */
typedef enum {                                  /*!< SARADC_1_CONFIG_SPSEL                                                     */
  SARADC_1_CONFIG_SPSEL_PHASE0         = 0,     /*!< PHASE0 : The ADC samples at SSG phase 0.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE1         = 1,     /*!< PHASE1 : The ADC samples at SSG phase 1.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE2         = 2,     /*!< PHASE2 : The ADC samples at SSG phase 2.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE3         = 3,     /*!< PHASE3 : The ADC samples at SSG phase 3.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE4         = 4,     /*!< PHASE4 : The ADC samples at SSG phase 4.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE5         = 5,     /*!< PHASE5 : The ADC samples at SSG phase 5.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE6         = 6,     /*!< PHASE6 : The ADC samples at SSG phase 6.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE7         = 7,     /*!< PHASE7 : The ADC samples at SSG phase 7.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE8         = 8,     /*!< PHASE8 : The ADC samples at SSG phase 8.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE9         = 9,     /*!< PHASE9 : The ADC samples at SSG phase 9.                                  */
  SARADC_1_CONFIG_SPSEL_PHASE10        = 10,    /*!< PHASE10 : The ADC samples at SSG phase 10.                                */
  SARADC_1_CONFIG_SPSEL_PHASE11        = 11,    /*!< PHASE11 : The ADC samples at SSG phase 11.                                */
  SARADC_1_CONFIG_SPSEL_PHASE12        = 12,    /*!< PHASE12 : The ADC samples at SSG phase 12.                                */
  SARADC_1_CONFIG_SPSEL_PHASE13        = 13,    /*!< PHASE13 : The ADC samples at SSG phase 13.                                */
  SARADC_1_CONFIG_SPSEL_PHASE14        = 14,    /*!< PHASE14 : The ADC samples at SSG phase 14.                                */
  SARADC_1_CONFIG_SPSEL_PHASE15        = 15,    /*!< PHASE15 : The ADC samples at SSG phase 15.                                */
} SARADC_1_CONFIG_SPSEL_Enum;

/* ==============================================  SARADC_1 CONFIG SPEN [4..4]  ============================================== */
typedef enum {                                  /*!< SARADC_1_CONFIG_SPEN                                                      */
  SARADC_1_CONFIG_SPEN_DISABLED        = 0,     /*!< DISABLED : Disable Phase Select. The ADC will always sample
                                                     on the start-of-conversion trigger selected by the SCSEL
                                                     field.                                                                    */
  SARADC_1_CONFIG_SPEN_ENABLED         = 1,     /*!< ENABLED : Enable Phase Select. The ADC will sample according
                                                     to the phase selected by the SPSEL field.                                 */
} SARADC_1_CONFIG_SPEN_Enum;

/* =============================================  SARADC_1 CONFIG SSGEN [5..5]  ============================================== */
typedef enum {                                  /*!< SARADC_1_CONFIG_SSGEN                                                     */
  SARADC_1_CONFIG_SSGEN_DISABLED       = 0,     /*!< DISABLED : Disable the SAR clock output to SSG.                           */
  SARADC_1_CONFIG_SSGEN_ENABLED        = 1,     /*!< ENABLED : The ADC is the SSG master, and the SAR clock will
                                                     be output to the SSG block.                                               */
} SARADC_1_CONFIG_SSGEN_Enum;

/* =============================================  SARADC_1 CONFIG PACKMD [6..7]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CONFIG_PACKMD                                                    */
  SARADC_1_CONFIG_PACKMD_UPPER_ONLY    = 0,     /*!< UPPER_ONLY : Data is written to the upper half-word and the
                                                     lower half-word is filled with 0's. An SCI interrupt is
                                                     triggered when data is written, if enabled.                               */
  SARADC_1_CONFIG_PACKMD_LOWER_ONLY    = 1,     /*!< LOWER_ONLY : Data is written to the lower half-word, and the
                                                     upper half-word is filled with 0's. An SCI interrupt is
                                                     triggered when data is written, if enabled.                               */
  SARADC_1_CONFIG_PACKMD_UPPER_FIRST   = 2,     /*!< UPPER_FIRST : Two data words are packed into the register with
                                                     the upper half-word representing the earlier data, and
                                                     the lower half-word representing the later data. If SIMCEN
                                                     is set to 1, the upper half-word represents data from the
                                                     master ADC (selected by SSGEN) and the lower half-word
                                                     represents data from the slave ADC. The ADC write to the
                                                     lower half-word will trigger the SCI interrupt, if enabled.               */
  SARADC_1_CONFIG_PACKMD_LOWER_FIRST   = 3,     /*!< LOWER_FIRST : Two data words are packed into the register with
                                                     the lower half-word representing the earlier data, and
                                                     the upper half-word representing the later data. If SIMCEN
                                                     is set to 1, the lower half-word represents data from the
                                                     master ADC (selected by SSGEN) and the upper half-word
                                                     represents data from the slave ADC. The ADC write to the
                                                     upper half-word will trigger the SCI interrupt, if enabled.               */
} SARADC_1_CONFIG_PACKMD_Enum;

/* =============================================  SARADC_1 CONFIG SIMCEN [8..8]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CONFIG_SIMCEN                                                    */
  SARADC_1_CONFIG_SIMCEN_DISABLED      = 0,     /*!< DISABLED : Disable simultaneous mode conversion packing.                  */
  SARADC_1_CONFIG_SIMCEN_ENABLED       = 1,     /*!< ENABLED : Enable simultaneous mode conversion packing.                    */
} SARADC_1_CONFIG_SIMCEN_Enum;

/* ============================================  SARADC_1 CONFIG INTLVEN [9..9]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CONFIG_INTLVEN                                                   */
  SARADC_1_CONFIG_INTLVEN_DISABLED     = 0,     /*!< DISABLED : Disable interleaved mode conversion packing.                   */
  SARADC_1_CONFIG_INTLVEN_ENABLED      = 1,     /*!< ENABLED : Enable interleaved mode conversion packing.                     */
} SARADC_1_CONFIG_INTLVEN_Enum;

/* ============================================  SARADC_1 CONFIG SCANEN [10..10]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONFIG_SCANEN                                                    */
  SARADC_1_CONFIG_SCANEN_DISABLED      = 0,     /*!< DISABLED : Disable ADC scan mode.                                         */
  SARADC_1_CONFIG_SCANEN_ENABLED       = 1,     /*!< ENABLED : Enable ADC scan mode. The ADC will scan through the
                                                     defined time slots in sequence on every start of conversion.              */
} SARADC_1_CONFIG_SCANEN_Enum;

/* ============================================  SARADC_1 CONFIG SCANMD [12..12]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONFIG_SCANMD                                                    */
  SARADC_1_CONFIG_SCANMD_ONCE          = 0,     /*!< ONCE : The channel sequencer will cycle through all of the specified
                                                     time slots once.                                                          */
  SARADC_1_CONFIG_SCANMD_LOOP          = 1,     /*!< LOOP : The channel sequencer will cycle through all of the specified
                                                     time slots in a loop until SCANEN is cleared to 0.                        */
} SARADC_1_CONFIG_SCANMD_Enum;

/* ============================================  SARADC_1 CONFIG DMAEN [14..14]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CONFIG_DMAEN                                                     */
  SARADC_1_CONFIG_DMAEN_DISABLED       = 0,     /*!< DISABLED : Disable the ADC module DMA interface.                          */
  SARADC_1_CONFIG_DMAEN_ENABLED        = 1,     /*!< ENABLED : Enable the ADC module DMA interface.                            */
} SARADC_1_CONFIG_DMAEN_Enum;

/* ===========================================  SARADC_1 CONFIG BCLKSEL [15..15]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONFIG_BCLKSEL                                                   */
  SARADC_1_CONFIG_BCLKSEL_LPOSC0       = 0,     /*!< LPOSC0 : Burst mode uses the Low Power Oscillator.                        */
  SARADC_1_CONFIG_BCLKSEL_APB          = 1,     /*!< APB : Burst mode uses the APB clock.                                      */
} SARADC_1_CONFIG_BCLKSEL_Enum;

/* ============================================  SARADC_1 CONFIG SCCIEN [27..27]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONFIG_SCCIEN                                                    */
  SARADC_1_CONFIG_SCCIEN_DISABLED      = 0,     /*!< DISABLED : Disable the ADC single data conversion complete interrupt.     */
  SARADC_1_CONFIG_SCCIEN_ENABLED       = 1,     /*!< ENABLED : Enable the ADC single data conversion complete interrupt.       */
} SARADC_1_CONFIG_SCCIEN_Enum;

/* ============================================  SARADC_1 CONFIG SDIEN [28..28]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CONFIG_SDIEN                                                     */
  SARADC_1_CONFIG_SDIEN_DISABLED       = 0,     /*!< DISABLED : Disable the ADC scan complete interrupt.                       */
  SARADC_1_CONFIG_SDIEN_ENABLED        = 1,     /*!< ENABLED : Enable the ADC scan complete interrupt.                         */
} SARADC_1_CONFIG_SDIEN_Enum;

/* ============================================  SARADC_1 CONFIG FORIEN [29..29]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONFIG_FORIEN                                                    */
  SARADC_1_CONFIG_FORIEN_DISABLED      = 0,     /*!< DISABLED : Disable the data FIFO overrun interrupt.                       */
  SARADC_1_CONFIG_FORIEN_ENABLED       = 1,     /*!< ENABLED : Enable the data FIFO overrun interrupt.                         */
} SARADC_1_CONFIG_FORIEN_Enum;

/* ============================================  SARADC_1 CONFIG FURIEN [30..30]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONFIG_FURIEN                                                    */
  SARADC_1_CONFIG_FURIEN_DISABLED      = 0,     /*!< DISABLED : Disable the data FIFO underrun interrupt.                      */
  SARADC_1_CONFIG_FURIEN_ENABLED       = 1,     /*!< ENABLED : Enable the data FIFO underrun interrupt.                        */
} SARADC_1_CONFIG_FURIEN_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* ===========================================  SARADC_1 CONTROL REFGNDSEL [0..0]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CONTROL_REFGNDSEL                                                */
  SARADC_1_CONTROL_REFGNDSEL_INTERNAL  = 0,     /*!< INTERNAL : The internal device ground is used as the ground
                                                     reference for ADC conversions.                                            */
  SARADC_1_CONTROL_REFGNDSEL_EXTERNAL  = 1,     /*!< EXTERNAL : The VREFGND pin is used as the ground reference for
                                                     ADC conversions.                                                          */
} SARADC_1_CONTROL_REFGNDSEL_Enum;

/* ============================================  SARADC_1 CONTROL CLKESEL [1..1]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONTROL_CLKESEL                                                  */
  SARADC_1_CONTROL_CLKESEL_RISING      = 0,     /*!< RISING : Select the rising edge of the APB clock.                         */
  SARADC_1_CONTROL_CLKESEL_FALLING     = 1,     /*!< FALLING : Select the falling edge of the APB clock.                       */
} SARADC_1_CONTROL_CLKESEL_Enum;

/* ============================================  SARADC_1 CONTROL SCSEL [8..11]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CONTROL_SCSEL                                                    */
  SARADC_1_CONTROL_SCSEL_ADCNT0        = 0,     /*!< ADCNT0 : An ADC conversion triggers from the ADCnT0 ('On Demand'
                                                     by writing 1 to ADBUSY) trigger source.                                   */
  SARADC_1_CONTROL_SCSEL_ADCNT1        = 1,     /*!< ADCNT1 : An ADC conversion triggers from the ADCnT1 (Timer 0
                                                     Low Overflow) trigger source.                                             */
  SARADC_1_CONTROL_SCSEL_ADCNT2        = 2,     /*!< ADCNT2 : An ADC conversion triggers from the ADCnT2 (Timer 0
                                                     High Overflow) trigger source.                                            */
  SARADC_1_CONTROL_SCSEL_ADCNT3        = 3,     /*!< ADCNT3 : An ADC conversion triggers from the ADCnT3 (Timer 1
                                                     Low Overflow) trigger source.                                             */
  SARADC_1_CONTROL_SCSEL_ADCNT4        = 4,     /*!< ADCNT4 : An ADC conversion triggers from the ADCnT4 (Timer 1
                                                     High Overflow) trigger source.                                            */
  SARADC_1_CONTROL_SCSEL_ADCNT5        = 5,     /*!< ADCNT5 : An ADC conversion triggers from the ADCnT5 (EPCA0 synchronization
                                                     pulse) trigger source.                                                    */
  SARADC_1_CONTROL_SCSEL_ADCNT6        = 6,     /*!< ADCNT6 : An ADC conversion triggers from the ADCnT6 (I2C0 Timer
                                                     overflow) trigger source.                                                 */
  SARADC_1_CONTROL_SCSEL_ADCNT7        = 7,     /*!< ADCNT7 : An ADC conversion triggers from the ADCnT7 (I2C1 Timer
                                                     overflow) trigger source.                                                 */
  SARADC_1_CONTROL_SCSEL_ADCNT8        = 8,     /*!< ADCNT8 : An ADC conversion triggers from the ADCnT8 (SSG phase
                                                     defined by ADSP bits) trigger source.                                     */
  SARADC_1_CONTROL_SCSEL_ADCNT9        = 9,     /*!< ADCNT9 : An ADC conversion triggers from the ADCnT9 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_1_CONTROL_SCSEL_ADCNT10       = 10,    /*!< ADCNT10 : An ADC conversion triggers from the ADCnT10 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_1_CONTROL_SCSEL_ADCNT11       = 11,    /*!< ADCNT11 : An ADC conversion triggers from the ADCnT11 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_1_CONTROL_SCSEL_ADCNT12       = 12,    /*!< ADCNT12 : An ADC conversion triggers from the ADCnT12 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_1_CONTROL_SCSEL_ADCNT13       = 13,    /*!< ADCNT13 : An ADC conversion triggers from the ADCnT13 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_1_CONTROL_SCSEL_ADCNT14       = 14,    /*!< ADCNT14 : An ADC conversion triggers from the ADCnT14 (RESERVED)
                                                     trigger source.                                                           */
  SARADC_1_CONTROL_SCSEL_ADCNT15       = 15,    /*!< ADCNT15 : An ADC conversion triggers from the ADCnT15 (PB1.14)
                                                     trigger source.                                                           */
} SARADC_1_CONTROL_SCSEL_Enum;

/* ===========================================  SARADC_1 CONTROL BURSTEN [16..16]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CONTROL_BURSTEN                                                  */
  SARADC_1_CONTROL_BURSTEN_DISABLED    = 0,     /*!< DISABLED : Disable burst mode.                                            */
  SARADC_1_CONTROL_BURSTEN_ENABLED     = 1,     /*!< ENABLED : Enable burst mode.                                              */
} SARADC_1_CONTROL_BURSTEN_Enum;

/* ============================================  SARADC_1 CONTROL ADCEN [17..17]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONTROL_ADCEN                                                    */
  SARADC_1_CONTROL_ADCEN_DISABLED      = 0,     /*!< DISABLED : Disable the ADC (low-power shutdown).                          */
  SARADC_1_CONTROL_ADCEN_ENABLED       = 1,     /*!< ENABLED : Enable the ADC (active and ready for data conversions).         */
} SARADC_1_CONTROL_ADCEN_Enum;

/* ==========================================  SARADC_1 CONTROL AD12BSSEL [18..18]  ========================================== */
typedef enum {                                  /*!< SARADC_1_CONTROL_AD12BSSEL                                                */
  SARADC_1_CONTROL_AD12BSSEL_FOUR      = 0,     /*!< FOUR : The ADC re-samples the input before each of the four
                                                     conversions.                                                              */
  SARADC_1_CONTROL_AD12BSSEL_ONE       = 1,     /*!< ONE : The ADC samples once before the first conversion and converts
                                                     four times.                                                               */
} SARADC_1_CONTROL_AD12BSSEL_Enum;

/* ============================================  SARADC_1 CONTROL VCMEN [19..19]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONTROL_VCMEN                                                    */
  SARADC_1_CONTROL_VCMEN_DISABLED      = 0,     /*!< DISABLED : Disable the common mode buffer.                                */
  SARADC_1_CONTROL_VCMEN_ENABLED       = 1,     /*!< ENABLED : Enable the common mode buffer.                                  */
} SARADC_1_CONTROL_VCMEN_Enum;

/* ============================================  SARADC_1 CONTROL ACCMD [21..21]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONTROL_ACCMD                                                    */
  SARADC_1_CONTROL_ACCMD_ACCUMULATE    = 0,     /*!< ACCUMULATE : Conversions will be accumulated for the specified
                                                     number of cycles in burst mode according to the channel
                                                     configuration.                                                            */
  SARADC_1_CONTROL_ACCMD_REPEAT        = 1,     /*!< REPEAT : Conversions will not be accumulated in burst mode.               */
} SARADC_1_CONTROL_ACCMD_Enum;

/* ============================================  SARADC_1 CONTROL TRKMD [22..22]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONTROL_TRKMD                                                    */
  SARADC_1_CONTROL_TRKMD_NORMAL        = 0,     /*!< NORMAL : Normal Tracking Mode: When the ADC is enabled, a conversion
                                                     begins immediately following the start-of-conversion signal.              */
  SARADC_1_CONTROL_TRKMD_DELAYED       = 1,     /*!< DELAYED : Delayed Tracking Mode: When the ADC is enabled, a
                                                     conversion begins 3 SAR clock cycles following the start-of-conversion
                                                     signal. The ADC is allowed to track during this time.                     */
} SARADC_1_CONTROL_TRKMD_Enum;

/* ===========================================  SARADC_1 CONTROL BIASSEL [24..25]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CONTROL_BIASSEL                                                  */
  SARADC_1_CONTROL_BIASSEL_MODE0       = 0,     /*!< MODE0 : Select bias current mode 0. Recommended to use modes
                                                     1, 2, or 3.                                                               */
  SARADC_1_CONTROL_BIASSEL_MODE1       = 1,     /*!< MODE1 : Select bias current mode 1 (SARCLK = 16 MHz).                     */
  SARADC_1_CONTROL_BIASSEL_MODE2       = 2,     /*!< MODE2 : Select bias current mode 2.                                       */
  SARADC_1_CONTROL_BIASSEL_MODE3       = 3,     /*!< MODE3 : Select bias current mode 3 (SARCLK = 4 MHz).                      */
} SARADC_1_CONTROL_BIASSEL_Enum;

/* ===========================================  SARADC_1 CONTROL LPMDEN [26..26]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CONTROL_LPMDEN                                                   */
  SARADC_1_CONTROL_LPMDEN_DISABLED     = 0,     /*!< DISABLED : Disable low power mode.                                        */
  SARADC_1_CONTROL_LPMDEN_ENABLED      = 1,     /*!< ENABLED : Enable low power mode (requires extended tracking
                                                     time).                                                                    */
} SARADC_1_CONTROL_LPMDEN_Enum;

/* ==========================================  SARADC_1 CONTROL MREFLPEN [27..27]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CONTROL_MREFLPEN                                                 */
  SARADC_1_CONTROL_MREFLPEN_DISABLED   = 0,     /*!< DISABLED : Disable low power mode.                                        */
  SARADC_1_CONTROL_MREFLPEN_ENABLED    = 1,     /*!< ENABLED : Enable low power mode (SAR clock <= 4 MHz).                     */
} SARADC_1_CONTROL_MREFLPEN_Enum;

/* ===========================================  SARADC_1 CONTROL VREFSEL [30..31]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CONTROL_VREFSEL                                                  */
  SARADC_1_CONTROL_VREFSEL_INTERNAL_VREF = 0,   /*!< INTERNAL_VREF : Select the internal, dedicated SARADC voltage
                                                     reference as the ADC reference.                                           */
  SARADC_1_CONTROL_VREFSEL_VDD         = 1,     /*!< VDD : Select the VDD pin as the ADC reference.                            */
  SARADC_1_CONTROL_VREFSEL_LDO_OUT     = 2,     /*!< LDO_OUT : Select the output of the internal LDO regulator (~1.8
                                                     V) as the ADC reference.                                                  */
  SARADC_1_CONTROL_VREFSEL_EXTERNAL_VREF = 3,   /*!< EXTERNAL_VREF : Select the VREF pin as the ADC reference. This
                                                     option is used for either an external VREF or the on-chip
                                                     VREF driving out to the VREF pin.                                         */
} SARADC_1_CONTROL_VREFSEL_Enum;

/* ========================================================  SQ7654  ========================================================= */
/* =============================================  SARADC_1 SQ7654 TS4CHR [0..1]  ============================================= */
typedef enum {                                  /*!< SARADC_1_SQ7654_TS4CHR                                                    */
  SARADC_1_SQ7654_TS4CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 4.                 */
  SARADC_1_SQ7654_TS4CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 4.                 */
  SARADC_1_SQ7654_TS4CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 4.                 */
  SARADC_1_SQ7654_TS4CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 4.                 */
} SARADC_1_SQ7654_TS4CHR_Enum;

/* =============================================  SARADC_1 SQ7654 TS4MUX [2..6]  ============================================= */
typedef enum {                                  /*!< SARADC_1_SQ7654_TS4MUX                                                    */
  SARADC_1_SQ7654_TS4MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB2.2).                                    */
  SARADC_1_SQ7654_TS4MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB2.1).                                    */
  SARADC_1_SQ7654_TS4MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB2.0).                                    */
  SARADC_1_SQ7654_TS4MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB1.15).                                   */
  SARADC_1_SQ7654_TS4MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB1.14).                                   */
  SARADC_1_SQ7654_TS4MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB1.13).                                   */
  SARADC_1_SQ7654_TS4MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB1.12).                                   */
  SARADC_1_SQ7654_TS4MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB1.11).                                   */
  SARADC_1_SQ7654_TS4MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB1.10).                                   */
  SARADC_1_SQ7654_TS4MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB1.9).                                    */
  SARADC_1_SQ7654_TS4MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB1.8).                                  */
  SARADC_1_SQ7654_TS4MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.7).                                  */
  SARADC_1_SQ7654_TS4MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_1_SQ7654_TS4MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_1_SQ7654_TS4MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_1_SQ7654_TS4MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_1_SQ7654_TS4MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.1 Output (IVC0C1)).                 */
  SARADC_1_SQ7654_TS4MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (Voltage at VIOHD / 4).                   */
  SARADC_1_SQ7654_TS4MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (Voltage at VREGIN / 4).                  */
  SARADC_1_SQ7654_TS4MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (EXTVREG0 Current Sense).                 */
  SARADC_1_SQ7654_TS4MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (VIO).                                    */
  SARADC_1_SQ7654_TS4MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (Temperature Sensor Output).              */
  SARADC_1_SQ7654_TS4MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_1_SQ7654_TS4MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_1_SQ7654_TS4MUX_Enum;

/* =============================================  SARADC_1 SQ7654 TS5CHR [8..9]  ============================================= */
typedef enum {                                  /*!< SARADC_1_SQ7654_TS5CHR                                                    */
  SARADC_1_SQ7654_TS5CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 5.                 */
  SARADC_1_SQ7654_TS5CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 5.                 */
  SARADC_1_SQ7654_TS5CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 5.                 */
  SARADC_1_SQ7654_TS5CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 5.                 */
} SARADC_1_SQ7654_TS5CHR_Enum;

/* ============================================  SARADC_1 SQ7654 TS5MUX [10..14]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ7654_TS5MUX                                                    */
  SARADC_1_SQ7654_TS5MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB2.2).                                    */
  SARADC_1_SQ7654_TS5MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB2.1).                                    */
  SARADC_1_SQ7654_TS5MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB2.0).                                    */
  SARADC_1_SQ7654_TS5MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB1.15).                                   */
  SARADC_1_SQ7654_TS5MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB1.14).                                   */
  SARADC_1_SQ7654_TS5MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB1.13).                                   */
  SARADC_1_SQ7654_TS5MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB1.12).                                   */
  SARADC_1_SQ7654_TS5MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB1.11).                                   */
  SARADC_1_SQ7654_TS5MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB1.10).                                   */
  SARADC_1_SQ7654_TS5MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB1.9).                                    */
  SARADC_1_SQ7654_TS5MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB1.8).                                  */
  SARADC_1_SQ7654_TS5MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.7).                                  */
  SARADC_1_SQ7654_TS5MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_1_SQ7654_TS5MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_1_SQ7654_TS5MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_1_SQ7654_TS5MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_1_SQ7654_TS5MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.1 Output (IVC0C1)).                 */
  SARADC_1_SQ7654_TS5MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (Voltage at VIOHD / 4).                   */
  SARADC_1_SQ7654_TS5MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (Voltage at VREGIN / 4).                  */
  SARADC_1_SQ7654_TS5MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (EXTVREG0 Current Sense).                 */
  SARADC_1_SQ7654_TS5MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (VIO).                                    */
  SARADC_1_SQ7654_TS5MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (Temperature Sensor Output).              */
  SARADC_1_SQ7654_TS5MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_1_SQ7654_TS5MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_1_SQ7654_TS5MUX_Enum;

/* ============================================  SARADC_1 SQ7654 TS6CHR [16..17]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ7654_TS6CHR                                                    */
  SARADC_1_SQ7654_TS6CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 6.                 */
  SARADC_1_SQ7654_TS6CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 6.                 */
  SARADC_1_SQ7654_TS6CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 6.                 */
  SARADC_1_SQ7654_TS6CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 6.                 */
} SARADC_1_SQ7654_TS6CHR_Enum;

/* ============================================  SARADC_1 SQ7654 TS6MUX [18..22]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ7654_TS6MUX                                                    */
  SARADC_1_SQ7654_TS6MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB2.2).                                    */
  SARADC_1_SQ7654_TS6MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB2.1).                                    */
  SARADC_1_SQ7654_TS6MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB2.0).                                    */
  SARADC_1_SQ7654_TS6MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB1.15).                                   */
  SARADC_1_SQ7654_TS6MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB1.14).                                   */
  SARADC_1_SQ7654_TS6MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB1.13).                                   */
  SARADC_1_SQ7654_TS6MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB1.12).                                   */
  SARADC_1_SQ7654_TS6MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB1.11).                                   */
  SARADC_1_SQ7654_TS6MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB1.10).                                   */
  SARADC_1_SQ7654_TS6MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB1.9).                                    */
  SARADC_1_SQ7654_TS6MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB1.8).                                  */
  SARADC_1_SQ7654_TS6MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.7).                                  */
  SARADC_1_SQ7654_TS6MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_1_SQ7654_TS6MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_1_SQ7654_TS6MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_1_SQ7654_TS6MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_1_SQ7654_TS6MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.1 Output (IVC0C1)).                 */
  SARADC_1_SQ7654_TS6MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (Voltage at VIOHD / 4).                   */
  SARADC_1_SQ7654_TS6MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (Voltage at VREGIN / 4).                  */
  SARADC_1_SQ7654_TS6MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (EXTVREG0 Current Sense).                 */
  SARADC_1_SQ7654_TS6MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (VIO).                                    */
  SARADC_1_SQ7654_TS6MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (Temperature Sensor Output).              */
  SARADC_1_SQ7654_TS6MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_1_SQ7654_TS6MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_1_SQ7654_TS6MUX_Enum;

/* ============================================  SARADC_1 SQ7654 TS7CHR [24..25]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ7654_TS7CHR                                                    */
  SARADC_1_SQ7654_TS7CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 7.                 */
  SARADC_1_SQ7654_TS7CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 7.                 */
  SARADC_1_SQ7654_TS7CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 7.                 */
  SARADC_1_SQ7654_TS7CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 7.                 */
} SARADC_1_SQ7654_TS7CHR_Enum;

/* ============================================  SARADC_1 SQ7654 TS7MUX [26..30]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ7654_TS7MUX                                                    */
  SARADC_1_SQ7654_TS7MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB2.2).                                    */
  SARADC_1_SQ7654_TS7MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB2.1).                                    */
  SARADC_1_SQ7654_TS7MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB2.0).                                    */
  SARADC_1_SQ7654_TS7MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB1.15).                                   */
  SARADC_1_SQ7654_TS7MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB1.14).                                   */
  SARADC_1_SQ7654_TS7MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB1.13).                                   */
  SARADC_1_SQ7654_TS7MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB1.12).                                   */
  SARADC_1_SQ7654_TS7MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB1.11).                                   */
  SARADC_1_SQ7654_TS7MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB1.10).                                   */
  SARADC_1_SQ7654_TS7MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB1.9).                                    */
  SARADC_1_SQ7654_TS7MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB1.8).                                  */
  SARADC_1_SQ7654_TS7MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.7).                                  */
  SARADC_1_SQ7654_TS7MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_1_SQ7654_TS7MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_1_SQ7654_TS7MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_1_SQ7654_TS7MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_1_SQ7654_TS7MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.1 Output (IVC0C1)).                 */
  SARADC_1_SQ7654_TS7MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (Voltage at VIOHD / 4).                   */
  SARADC_1_SQ7654_TS7MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (Voltage at VREGIN / 4).                  */
  SARADC_1_SQ7654_TS7MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (EXTVREG0 Current Sense).                 */
  SARADC_1_SQ7654_TS7MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (VIO).                                    */
  SARADC_1_SQ7654_TS7MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (Temperature Sensor Output).              */
  SARADC_1_SQ7654_TS7MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_1_SQ7654_TS7MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_1_SQ7654_TS7MUX_Enum;

/* ========================================================  SQ3210  ========================================================= */
/* =============================================  SARADC_1 SQ3210 TS0CHR [0..1]  ============================================= */
typedef enum {                                  /*!< SARADC_1_SQ3210_TS0CHR                                                    */
  SARADC_1_SQ3210_TS0CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 0.                 */
  SARADC_1_SQ3210_TS0CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 0.                 */
  SARADC_1_SQ3210_TS0CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 0.                 */
  SARADC_1_SQ3210_TS0CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 0.                 */
} SARADC_1_SQ3210_TS0CHR_Enum;

/* =============================================  SARADC_1 SQ3210 TS0MUX [2..6]  ============================================= */
typedef enum {                                  /*!< SARADC_1_SQ3210_TS0MUX                                                    */
  SARADC_1_SQ3210_TS0MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB2.2).                                    */
  SARADC_1_SQ3210_TS0MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB2.1).                                    */
  SARADC_1_SQ3210_TS0MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB2.0).                                    */
  SARADC_1_SQ3210_TS0MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB1.15).                                   */
  SARADC_1_SQ3210_TS0MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB1.14).                                   */
  SARADC_1_SQ3210_TS0MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB1.13).                                   */
  SARADC_1_SQ3210_TS0MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB1.12).                                   */
  SARADC_1_SQ3210_TS0MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB1.11).                                   */
  SARADC_1_SQ3210_TS0MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB1.10).                                   */
  SARADC_1_SQ3210_TS0MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB1.9).                                    */
  SARADC_1_SQ3210_TS0MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB1.8).                                  */
  SARADC_1_SQ3210_TS0MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.7).                                  */
  SARADC_1_SQ3210_TS0MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_1_SQ3210_TS0MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_1_SQ3210_TS0MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_1_SQ3210_TS0MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_1_SQ3210_TS0MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.1 Output (IVC0C1)).                 */
  SARADC_1_SQ3210_TS0MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (Voltage at VIOHD / 4).                   */
  SARADC_1_SQ3210_TS0MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (Voltage at VREGIN / 4).                  */
  SARADC_1_SQ3210_TS0MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (EXTVREG0 Current Sense).                 */
  SARADC_1_SQ3210_TS0MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (VIO).                                    */
  SARADC_1_SQ3210_TS0MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (Temperature Sensor Output).              */
  SARADC_1_SQ3210_TS0MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_1_SQ3210_TS0MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_1_SQ3210_TS0MUX_Enum;

/* =============================================  SARADC_1 SQ3210 TS1CHR [8..9]  ============================================= */
typedef enum {                                  /*!< SARADC_1_SQ3210_TS1CHR                                                    */
  SARADC_1_SQ3210_TS1CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 1.                 */
  SARADC_1_SQ3210_TS1CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 1.                 */
  SARADC_1_SQ3210_TS1CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 1.                 */
  SARADC_1_SQ3210_TS1CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 1.                 */
} SARADC_1_SQ3210_TS1CHR_Enum;

/* ============================================  SARADC_1 SQ3210 TS1MUX [10..14]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ3210_TS1MUX                                                    */
  SARADC_1_SQ3210_TS1MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB2.2).                                    */
  SARADC_1_SQ3210_TS1MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB2.1).                                    */
  SARADC_1_SQ3210_TS1MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB2.0).                                    */
  SARADC_1_SQ3210_TS1MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB1.15).                                   */
  SARADC_1_SQ3210_TS1MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB1.14).                                   */
  SARADC_1_SQ3210_TS1MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB1.13).                                   */
  SARADC_1_SQ3210_TS1MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB1.12).                                   */
  SARADC_1_SQ3210_TS1MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB1.11).                                   */
  SARADC_1_SQ3210_TS1MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB1.10).                                   */
  SARADC_1_SQ3210_TS1MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB1.9).                                    */
  SARADC_1_SQ3210_TS1MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB1.8).                                  */
  SARADC_1_SQ3210_TS1MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.7).                                  */
  SARADC_1_SQ3210_TS1MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_1_SQ3210_TS1MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_1_SQ3210_TS1MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_1_SQ3210_TS1MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_1_SQ3210_TS1MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.1 Output (IVC0C1)).                 */
  SARADC_1_SQ3210_TS1MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (Voltage at VIOHD / 4).                   */
  SARADC_1_SQ3210_TS1MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (Voltage at VREGIN / 4).                  */
  SARADC_1_SQ3210_TS1MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (EXTVREG0 Current Sense).                 */
  SARADC_1_SQ3210_TS1MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (VIO).                                    */
  SARADC_1_SQ3210_TS1MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (Temperature Sensor Output).              */
  SARADC_1_SQ3210_TS1MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_1_SQ3210_TS1MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_1_SQ3210_TS1MUX_Enum;

/* ============================================  SARADC_1 SQ3210 TS2CHR [16..17]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ3210_TS2CHR                                                    */
  SARADC_1_SQ3210_TS2CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 2.                 */
  SARADC_1_SQ3210_TS2CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 2.                 */
  SARADC_1_SQ3210_TS2CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 2.                 */
  SARADC_1_SQ3210_TS2CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 2.                 */
} SARADC_1_SQ3210_TS2CHR_Enum;

/* ============================================  SARADC_1 SQ3210 TS2MUX [18..22]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ3210_TS2MUX                                                    */
  SARADC_1_SQ3210_TS2MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB2.2).                                    */
  SARADC_1_SQ3210_TS2MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB2.1).                                    */
  SARADC_1_SQ3210_TS2MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB2.0).                                    */
  SARADC_1_SQ3210_TS2MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB1.15).                                   */
  SARADC_1_SQ3210_TS2MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB1.14).                                   */
  SARADC_1_SQ3210_TS2MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB1.13).                                   */
  SARADC_1_SQ3210_TS2MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB1.12).                                   */
  SARADC_1_SQ3210_TS2MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB1.11).                                   */
  SARADC_1_SQ3210_TS2MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB1.10).                                   */
  SARADC_1_SQ3210_TS2MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB1.9).                                    */
  SARADC_1_SQ3210_TS2MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB1.8).                                  */
  SARADC_1_SQ3210_TS2MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.7).                                  */
  SARADC_1_SQ3210_TS2MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_1_SQ3210_TS2MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_1_SQ3210_TS2MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_1_SQ3210_TS2MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_1_SQ3210_TS2MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.1 Output (IVC0C1)).                 */
  SARADC_1_SQ3210_TS2MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (Voltage at VIOHD / 4).                   */
  SARADC_1_SQ3210_TS2MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (Voltage at VREGIN / 4).                  */
  SARADC_1_SQ3210_TS2MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (EXTVREG0 Current Sense).                 */
  SARADC_1_SQ3210_TS2MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (VIO).                                    */
  SARADC_1_SQ3210_TS2MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (Temperature Sensor Output).              */
  SARADC_1_SQ3210_TS2MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_1_SQ3210_TS2MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_1_SQ3210_TS2MUX_Enum;

/* ============================================  SARADC_1 SQ3210 TS3CHR [24..25]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ3210_TS3CHR                                                    */
  SARADC_1_SQ3210_TS3CHR_CC0           = 0,     /*!< CC0 : Select conversion characteristic 0 for time slot 3.                 */
  SARADC_1_SQ3210_TS3CHR_CC1           = 1,     /*!< CC1 : Select conversion characteristic 1 for time slot 3.                 */
  SARADC_1_SQ3210_TS3CHR_CC2           = 2,     /*!< CC2 : Select conversion characteristic 2 for time slot 3.                 */
  SARADC_1_SQ3210_TS3CHR_CC3           = 3,     /*!< CC3 : Select conversion characteristic 3 for time slot 3.                 */
} SARADC_1_SQ3210_TS3CHR_Enum;

/* ============================================  SARADC_1 SQ3210 TS3MUX [26..30]  ============================================ */
typedef enum {                                  /*!< SARADC_1_SQ3210_TS3MUX                                                    */
  SARADC_1_SQ3210_TS3MUX_ADCN0         = 0,     /*!< ADCN0 : Select channel ADCn.0 (PB2.2).                                    */
  SARADC_1_SQ3210_TS3MUX_ADCN1         = 1,     /*!< ADCN1 : Select channel ADCn.1 (PB2.1).                                    */
  SARADC_1_SQ3210_TS3MUX_ADCN2         = 2,     /*!< ADCN2 : Select channel ADCn.2 (PB2.0).                                    */
  SARADC_1_SQ3210_TS3MUX_ADCN3         = 3,     /*!< ADCN3 : Select channel ADCn.3 (PB1.15).                                   */
  SARADC_1_SQ3210_TS3MUX_ADCN4         = 4,     /*!< ADCN4 : Select channel ADCn.4 (PB1.14).                                   */
  SARADC_1_SQ3210_TS3MUX_ADCN5         = 5,     /*!< ADCN5 : Select channel ADCn.5 (PB1.13).                                   */
  SARADC_1_SQ3210_TS3MUX_ADCN6         = 6,     /*!< ADCN6 : Select channel ADCn.6 (PB1.12).                                   */
  SARADC_1_SQ3210_TS3MUX_ADCN7         = 7,     /*!< ADCN7 : Select channel ADCn.7 (PB1.11).                                   */
  SARADC_1_SQ3210_TS3MUX_ADCN8         = 8,     /*!< ADCN8 : Select channel ADCn.8 (PB1.10).                                   */
  SARADC_1_SQ3210_TS3MUX_ADCN9         = 9,     /*!< ADCN9 : Select channel ADCn.9 (PB1.9).                                    */
  SARADC_1_SQ3210_TS3MUX_ADCN10        = 10,    /*!< ADCN10 : Select channel ADCn.10 (PB1.8).                                  */
  SARADC_1_SQ3210_TS3MUX_ADCN11        = 11,    /*!< ADCN11 : Select channel ADCn.11 (PB1.7).                                  */
  SARADC_1_SQ3210_TS3MUX_ADCN12        = 12,    /*!< ADCN12 : Select channel ADCn.12 (PB1.3).                                  */
  SARADC_1_SQ3210_TS3MUX_ADCN13        = 13,    /*!< ADCN13 : Select channel ADCn.13 (PB1.4).                                  */
  SARADC_1_SQ3210_TS3MUX_ADCN14        = 14,    /*!< ADCN14 : Select channel ADCn.14 (PB1.5).                                  */
  SARADC_1_SQ3210_TS3MUX_ADCN15        = 15,    /*!< ADCN15 : Select channel ADCn.15 (PB1.6).                                  */
  SARADC_1_SQ3210_TS3MUX_ADCN16        = 16,    /*!< ADCN16 : Select channel ADCn.16 (IVC0.1 Output (IVC0C1)).                 */
  SARADC_1_SQ3210_TS3MUX_ADCN17        = 17,    /*!< ADCN17 : Select channel ADCn.17 (Voltage at VIOHD / 4).                   */
  SARADC_1_SQ3210_TS3MUX_ADCN18        = 18,    /*!< ADCN18 : Select channel ADCn.18 (Voltage at VREGIN / 4).                  */
  SARADC_1_SQ3210_TS3MUX_ADCN19        = 19,    /*!< ADCN19 : Select channel ADCn.19 (EXTVREG0 Current Sense).                 */
  SARADC_1_SQ3210_TS3MUX_ADCN20        = 20,    /*!< ADCN20 : Select channel ADCn.20 (VIO).                                    */
  SARADC_1_SQ3210_TS3MUX_ADCN21        = 21,    /*!< ADCN21 : Select channel ADCn.21 (Temperature Sensor Output).              */
  SARADC_1_SQ3210_TS3MUX_ADCN22        = 22,    /*!< ADCN22 : Select channel ADCn.22 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_ADCN23        = 23,    /*!< ADCN23 : Select channel ADCn.23 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_ADCN24        = 24,    /*!< ADCN24 : Select channel ADCn.24 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_ADCN25        = 25,    /*!< ADCN25 : Select channel ADCn.25 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_ADCN26        = 26,    /*!< ADCN26 : Select channel ADCn.26 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_ADCN27        = 27,    /*!< ADCN27 : Select channel ADCn.27 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_ADCN28        = 28,    /*!< ADCN28 : Select channel ADCn.28 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_ADCN29        = 29,    /*!< ADCN29 : Select channel ADCn.29 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_ADCN30        = 30,    /*!< ADCN30 : Select channel ADCn.30 (RESERVED).                               */
  SARADC_1_SQ3210_TS3MUX_END           = 31,    /*!< END : None - End the sequence.                                            */
} SARADC_1_SQ3210_TS3MUX_Enum;

/* ========================================================  CHAR32  ========================================================= */
/* =============================================  SARADC_1 CHAR32 CHR2GN [0..0]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CHAR32_CHR2GN                                                    */
  SARADC_1_CHAR32_CHR2GN_UNITY         = 0,     /*!< UNITY : The on-chip PGA gain is 1.                                        */
  SARADC_1_CHAR32_CHR2GN_HALF          = 1,     /*!< HALF : The on-chip PGA gain is 0.5.                                       */
} SARADC_1_CHAR32_CHR2GN_Enum;

/* ============================================  SARADC_1 CHAR32 CHR2RPT [1..3]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CHAR32_CHR2RPT                                                   */
  SARADC_1_CHAR32_CHR2RPT_ACC1         = 0,     /*!< ACC1 : Accumulate one sample.                                             */
  SARADC_1_CHAR32_CHR2RPT_ACC4         = 1,     /*!< ACC4 : Accumulate four samples.                                           */
  SARADC_1_CHAR32_CHR2RPT_ACC8         = 2,     /*!< ACC8 : Accumulate eight samples.                                          */
  SARADC_1_CHAR32_CHR2RPT_ACC16        = 3,     /*!< ACC16 : Accumulate sixteen samples.                                       */
  SARADC_1_CHAR32_CHR2RPT_ACC32        = 4,     /*!< ACC32 : Accumulate thirty-two samples (10-bit mode only).                 */
  SARADC_1_CHAR32_CHR2RPT_ACC64        = 5,     /*!< ACC64 : Accumulate sixty-four samples (10-bit mode only).                 */
} SARADC_1_CHAR32_CHR2RPT_Enum;

/* ============================================  SARADC_1 CHAR32 CHR2RSEL [7..7]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CHAR32_CHR2RSEL                                                  */
  SARADC_1_CHAR32_CHR2RSEL_B10         = 0,     /*!< B10 : Select 10-bit Mode.                                                 */
  SARADC_1_CHAR32_CHR2RSEL_B12         = 1,     /*!< B12 : Select 12-bit Mode (burst mode must be enabled).                    */
} SARADC_1_CHAR32_CHR2RSEL_Enum;

/* ===========================================  SARADC_1 CHAR32 CHR2WCIEN [8..8]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CHAR32_CHR2WCIEN                                                 */
  SARADC_1_CHAR32_CHR2WCIEN_DISABLED   = 0,     /*!< DISABLED : Disable window comparison interrupts.                          */
  SARADC_1_CHAR32_CHR2WCIEN_ENABLED    = 1,     /*!< ENABLED : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC_1_CHAR32_CHR2WCIEN_Enum;

/* ============================================  SARADC_1 CHAR32 CHR3GN [16..16]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CHAR32_CHR3GN                                                    */
  SARADC_1_CHAR32_CHR3GN_UNITY         = 0,     /*!< UNITY : The on-chip PGA gain is 1.                                        */
  SARADC_1_CHAR32_CHR3GN_HALF          = 1,     /*!< HALF : The on-chip PGA gain is 0.5.                                       */
} SARADC_1_CHAR32_CHR3GN_Enum;

/* ===========================================  SARADC_1 CHAR32 CHR3RPT [17..19]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CHAR32_CHR3RPT                                                   */
  SARADC_1_CHAR32_CHR3RPT_ACC1         = 0,     /*!< ACC1 : Accumulate one sample.                                             */
  SARADC_1_CHAR32_CHR3RPT_ACC4         = 1,     /*!< ACC4 : Accumulate four samples.                                           */
  SARADC_1_CHAR32_CHR3RPT_ACC8         = 2,     /*!< ACC8 : Accumulate eight samples.                                          */
  SARADC_1_CHAR32_CHR3RPT_ACC16        = 3,     /*!< ACC16 : Accumulate sixteen samples.                                       */
  SARADC_1_CHAR32_CHR3RPT_ACC32        = 4,     /*!< ACC32 : Accumulate thirty-two samples (10-bit mode only).                 */
  SARADC_1_CHAR32_CHR3RPT_ACC64        = 5,     /*!< ACC64 : Accumulate sixty-four samples (10-bit mode only).                 */
} SARADC_1_CHAR32_CHR3RPT_Enum;

/* ===========================================  SARADC_1 CHAR32 CHR3RSEL [23..23]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CHAR32_CHR3RSEL                                                  */
  SARADC_1_CHAR32_CHR3RSEL_B10         = 0,     /*!< B10 : Select 10-bit Mode.                                                 */
  SARADC_1_CHAR32_CHR3RSEL_B12         = 1,     /*!< B12 : Select 12-bit Mode (burst mode must be enabled).                    */
} SARADC_1_CHAR32_CHR3RSEL_Enum;

/* ==========================================  SARADC_1 CHAR32 CHR3WCIEN [24..24]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CHAR32_CHR3WCIEN                                                 */
  SARADC_1_CHAR32_CHR3WCIEN_DISABLED   = 0,     /*!< DISABLED : Disable window comparison interrupts.                          */
  SARADC_1_CHAR32_CHR3WCIEN_ENABLED    = 1,     /*!< ENABLED : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC_1_CHAR32_CHR3WCIEN_Enum;

/* ========================================================  CHAR10  ========================================================= */
/* =============================================  SARADC_1 CHAR10 CHR0GN [0..0]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CHAR10_CHR0GN                                                    */
  SARADC_1_CHAR10_CHR0GN_UNITY         = 0,     /*!< UNITY : The on-chip PGA gain is 1.                                        */
  SARADC_1_CHAR10_CHR0GN_HALF          = 1,     /*!< HALF : The on-chip PGA gain is 0.5.                                       */
} SARADC_1_CHAR10_CHR0GN_Enum;

/* ============================================  SARADC_1 CHAR10 CHR0RPT [1..3]  ============================================= */
typedef enum {                                  /*!< SARADC_1_CHAR10_CHR0RPT                                                   */
  SARADC_1_CHAR10_CHR0RPT_ACC1         = 0,     /*!< ACC1 : Accumulate one sample.                                             */
  SARADC_1_CHAR10_CHR0RPT_ACC4         = 1,     /*!< ACC4 : Accumulate four samples.                                           */
  SARADC_1_CHAR10_CHR0RPT_ACC8         = 2,     /*!< ACC8 : Accumulate eight samples.                                          */
  SARADC_1_CHAR10_CHR0RPT_ACC16        = 3,     /*!< ACC16 : Accumulate sixteen samples.                                       */
  SARADC_1_CHAR10_CHR0RPT_ACC32        = 4,     /*!< ACC32 : Accumulate thirty-two samples (10-bit mode only).                 */
  SARADC_1_CHAR10_CHR0RPT_ACC64        = 5,     /*!< ACC64 : Accumulate sixty-four samples (10-bit mode only).                 */
} SARADC_1_CHAR10_CHR0RPT_Enum;

/* ============================================  SARADC_1 CHAR10 CHR0RSEL [7..7]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CHAR10_CHR0RSEL                                                  */
  SARADC_1_CHAR10_CHR0RSEL_B10         = 0,     /*!< B10 : Select 10-bit Mode.                                                 */
  SARADC_1_CHAR10_CHR0RSEL_B12         = 1,     /*!< B12 : Select 12-bit Mode (burst mode must be enabled).                    */
} SARADC_1_CHAR10_CHR0RSEL_Enum;

/* ===========================================  SARADC_1 CHAR10 CHR0WCIEN [8..8]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CHAR10_CHR0WCIEN                                                 */
  SARADC_1_CHAR10_CHR0WCIEN_DISABLED   = 0,     /*!< DISABLED : Disable window comparison interrupts.                          */
  SARADC_1_CHAR10_CHR0WCIEN_ENABLED    = 1,     /*!< ENABLED : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC_1_CHAR10_CHR0WCIEN_Enum;

/* ============================================  SARADC_1 CHAR10 CHR1GN [16..16]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CHAR10_CHR1GN                                                    */
  SARADC_1_CHAR10_CHR1GN_UNITY         = 0,     /*!< UNITY : The on-chip PGA gain is 1.                                        */
  SARADC_1_CHAR10_CHR1GN_HALF          = 1,     /*!< HALF : The on-chip PGA gain is 0.5.                                       */
} SARADC_1_CHAR10_CHR1GN_Enum;

/* ===========================================  SARADC_1 CHAR10 CHR1RPT [17..19]  ============================================ */
typedef enum {                                  /*!< SARADC_1_CHAR10_CHR1RPT                                                   */
  SARADC_1_CHAR10_CHR1RPT_ACC1         = 0,     /*!< ACC1 : Accumulate one sample.                                             */
  SARADC_1_CHAR10_CHR1RPT_ACC4         = 1,     /*!< ACC4 : Accumulate four samples.                                           */
  SARADC_1_CHAR10_CHR1RPT_ACC8         = 2,     /*!< ACC8 : Accumulate eight samples.                                          */
  SARADC_1_CHAR10_CHR1RPT_ACC16        = 3,     /*!< ACC16 : Accumulate sixteen samples.                                       */
  SARADC_1_CHAR10_CHR1RPT_ACC32        = 4,     /*!< ACC32 : Accumulate thirty-two samples (10-bit mode only).                 */
  SARADC_1_CHAR10_CHR1RPT_ACC64        = 5,     /*!< ACC64 : Accumulate sixty-four samples (10-bit mode only).                 */
} SARADC_1_CHAR10_CHR1RPT_Enum;

/* ===========================================  SARADC_1 CHAR10 CHR1RSEL [23..23]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CHAR10_CHR1RSEL                                                  */
  SARADC_1_CHAR10_CHR1RSEL_B10         = 0,     /*!< B10 : Select 10-bit Mode.                                                 */
  SARADC_1_CHAR10_CHR1RSEL_B12         = 1,     /*!< B12 : Select 12-bit Mode (burst mode must be enabled).                    */
} SARADC_1_CHAR10_CHR1RSEL_Enum;

/* ==========================================  SARADC_1 CHAR10 CHR1WCIEN [24..24]  =========================================== */
typedef enum {                                  /*!< SARADC_1_CHAR10_CHR1WCIEN                                                 */
  SARADC_1_CHAR10_CHR1WCIEN_DISABLED   = 0,     /*!< DISABLED : Disable window comparison interrupts.                          */
  SARADC_1_CHAR10_CHR1WCIEN_ENABLED    = 1,     /*!< ENABLED : Enabled window comparison interrupts. The window comparator
                                                     will be used to check the ADC result on channels that use
                                                     this characteristic.                                                      */
} SARADC_1_CHAR10_CHR1WCIEN_Enum;

/* =========================================================  DATA  ========================================================== */
/* =======================================================  WCLIMITS  ======================================================== */
/* ==========================================================  ACC  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* ==============================================  SARADC_1 STATUS WCI [0..0]  =============================================== */
typedef enum {                                  /*!< SARADC_1_STATUS_WCI                                                       */
  SARADC_1_STATUS_WCI_NOT_SET          = 0,     /*!< NOT_SET : Read: A window compare interrupt has not occurred.
                                                     Write: Clear the interrupt.                                               */
  SARADC_1_STATUS_WCI_SET              = 1,     /*!< SET : Read: A window compare interrupt occurred. Write: Force
                                                     a window compare interrupt.                                               */
} SARADC_1_STATUS_WCI_Enum;

/* ==============================================  SARADC_1 STATUS SCCI [1..1]  ============================================== */
typedef enum {                                  /*!< SARADC_1_STATUS_SCCI                                                      */
  SARADC_1_STATUS_SCCI_NOT_SET         = 0,     /*!< NOT_SET : Read: A single data conversion interrupt has not occurred.
                                                     Write: Clear the interrupt.                                               */
  SARADC_1_STATUS_SCCI_SET             = 1,     /*!< SET : Read: A single data conversion interrupt occurred. Write:
                                                     Force a single data conversion interrupt.                                 */
} SARADC_1_STATUS_SCCI_Enum;

/* ==============================================  SARADC_1 STATUS SDI [2..2]  =============================================== */
typedef enum {                                  /*!< SARADC_1_STATUS_SDI                                                       */
  SARADC_1_STATUS_SDI_NOT_SET          = 0,     /*!< NOT_SET : Read: A scan done interrupt has not occurred. Write:
                                                     Clear the interrupt.                                                      */
  SARADC_1_STATUS_SDI_SET              = 1,     /*!< SET : Read: A scan done interrupt occurred. Write: Force a scan
                                                     done interrupt.                                                           */
} SARADC_1_STATUS_SDI_Enum;

/* ==============================================  SARADC_1 STATUS FORI [3..3]  ============================================== */
typedef enum {                                  /*!< SARADC_1_STATUS_FORI                                                      */
  SARADC_1_STATUS_FORI_NOT_SET         = 0,     /*!< NOT_SET : Read: A data FIFO overrun interrupt has not occurred.
                                                     Write: Clear the interrupt.                                               */
  SARADC_1_STATUS_FORI_SET             = 1,     /*!< SET : Read: A data FIFO overrun interrupt occurred. Write: Force
                                                     a data FIFO overrun interrupt.                                            */
} SARADC_1_STATUS_FORI_Enum;

/* ==============================================  SARADC_1 STATUS FURI [4..4]  ============================================== */
typedef enum {                                  /*!< SARADC_1_STATUS_FURI                                                      */
  SARADC_1_STATUS_FURI_NOT_SET         = 0,     /*!< NOT_SET : Read: A data FIFO underrun interrupt has not occurred.
                                                     Write: Clear the interrupt.                                               */
  SARADC_1_STATUS_FURI_SET             = 1,     /*!< SET : Read: A data FIFO underrun interrupt occurred. Write:
                                                     Force a data FIFO underrun interrupt.                                     */
} SARADC_1_STATUS_FURI_Enum;

/* ======================================================  FIFOSTATUS  ======================================================= */
/* ===========================================  SARADC_1 FIFOSTATUS DPSTS [4..4]  ============================================ */
typedef enum {                                  /*!< SARADC_1_FIFOSTATUS_DPSTS                                                 */
  SARADC_1_FIFOSTATUS_DPSTS_LOWER      = 0,     /*!< LOWER : The next ADC conversion will be written to the lower
                                                     half-word.                                                                */
  SARADC_1_FIFOSTATUS_DPSTS_UPPER      = 1,     /*!< UPPER : The next ADC conversion will be written to the upper
                                                     half-word.                                                                */
} SARADC_1_FIFOSTATUS_DPSTS_Enum;

/* ===========================================  SARADC_1 FIFOSTATUS DRDYF [5..5]  ============================================ */
typedef enum {                                  /*!< SARADC_1_FIFOSTATUS_DRDYF                                                 */
  SARADC_1_FIFOSTATUS_DRDYF_NOT_SET    = 0,     /*!< NOT_SET : New data is not produced yet.                                   */
  SARADC_1_FIFOSTATUS_DRDYF_SET        = 1,     /*!< SET : New data is ready.                                                  */
} SARADC_1_FIFOSTATUS_DRDYF_Enum;



/* =========================================================================================================================== */
/* ================                                           AES_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  AES_0 CONTROL XFRSTA [0..0]  ============================================== */
typedef enum {                                  /*!< AES_0_CONTROL_XFRSTA                                                      */
  AES_0_CONTROL_XFRSTA_START           = 1,     /*!< START : Start the AES operation.                                          */
} AES_0_CONTROL_XFRSTA_Enum;

/* =============================================  AES_0 CONTROL KEYCPEN [1..1]  ============================================== */
typedef enum {                                  /*!< AES_0_CONTROL_KEYCPEN                                                     */
  AES_0_CONTROL_KEYCPEN_DISABLED       = 0,     /*!< DISABLED : Disable key capture.                                           */
  AES_0_CONTROL_KEYCPEN_ENABLED        = 1,     /*!< ENABLED : Enable key capture.                                             */
} AES_0_CONTROL_KEYCPEN_Enum;

/* ===============================================  AES_0 CONTROL EDMD [2..2]  =============================================== */
typedef enum {                                  /*!< AES_0_CONTROL_EDMD                                                        */
  AES_0_CONTROL_EDMD_DECRYPT           = 0,     /*!< DECRYPT : AES module performs a decryption operation                      */
  AES_0_CONTROL_EDMD_ENCRYPT           = 1,     /*!< ENCRYPT : AES module performs an encryption operation.                    */
} AES_0_CONTROL_EDMD_Enum;

/* ==============================================  AES_0 CONTROL SWMDEN [8..8]  ============================================== */
typedef enum {                                  /*!< AES_0_CONTROL_SWMDEN                                                      */
  AES_0_CONTROL_SWMDEN_DISABLED        = 0,     /*!< DISABLED : Disable software mode.                                         */
  AES_0_CONTROL_SWMDEN_ENABLED         = 1,     /*!< ENABLED : Enable software mode.                                           */
} AES_0_CONTROL_SWMDEN_Enum;

/* ===============================================  AES_0 CONTROL BEN [9..9]  ================================================ */
typedef enum {                                  /*!< AES_0_CONTROL_BEN                                                         */
  AES_0_CONTROL_BEN_DISABLED           = 0,     /*!< DISABLED : Do not bypass AES operations.                                  */
  AES_0_CONTROL_BEN_ENABLED            = 1,     /*!< ENABLED : Bypass AES operations.                                          */
} AES_0_CONTROL_BEN_Enum;

/* =============================================  AES_0 CONTROL XOREN [10..11]  ============================================== */
typedef enum {                                  /*!< AES_0_CONTROL_XOREN                                                       */
  AES_0_CONTROL_XOREN_XOR_DISABLED     = 0,     /*!< XOR_DISABLED : Disable the XOR paths.                                     */
  AES_0_CONTROL_XOREN_XOR_INPUT        = 1,     /*!< XOR_INPUT : Enable the XOR input path, disable the XOR output
                                                     path.                                                                     */
  AES_0_CONTROL_XOREN_XOR_OUTPUT       = 2,     /*!< XOR_OUTPUT : Disable the XOR input path, enable the XOR output
                                                     path.                                                                     */
} AES_0_CONTROL_XOREN_Enum;

/* =============================================  AES_0 CONTROL HCTREN [12..12]  ============================================= */
typedef enum {                                  /*!< AES_0_CONTROL_HCTREN                                                      */
  AES_0_CONTROL_HCTREN_DISABLED        = 0,     /*!< DISABLED : Disable hardware counter mode.                                 */
  AES_0_CONTROL_HCTREN_ENABLED         = 1,     /*!< ENABLED : Enable hardware counter mode.                                   */
} AES_0_CONTROL_HCTREN_Enum;

/* =============================================  AES_0 CONTROL HCBCEN [13..13]  ============================================= */
typedef enum {                                  /*!< AES_0_CONTROL_HCBCEN                                                      */
  AES_0_CONTROL_HCBCEN_DISABLED        = 0,     /*!< DISABLED : Disable hardware cipher-block chaining (CBC) mode.             */
  AES_0_CONTROL_HCBCEN_ENABLED         = 1,     /*!< ENABLED : Enable hardware cipher-block chaining (CBC) mode.               */
} AES_0_CONTROL_HCBCEN_Enum;

/* ============================================  AES_0 CONTROL KEYSIZE [16..17]  ============================================= */
typedef enum {                                  /*!< AES_0_CONTROL_KEYSIZE                                                     */
  AES_0_CONTROL_KEYSIZE_KEY128         = 0,     /*!< KEY128 : Key is composed of 128 bits.                                     */
  AES_0_CONTROL_KEYSIZE_KEY192         = 1,     /*!< KEY192 : Key is composed of 192 bits.                                     */
  AES_0_CONTROL_KEYSIZE_KEY256         = 2,     /*!< KEY256 : Key is composed of 256 bits.                                     */
} AES_0_CONTROL_KEYSIZE_Enum;

/* =============================================  AES_0 CONTROL ERRIEN [24..24]  ============================================= */
typedef enum {                                  /*!< AES_0_CONTROL_ERRIEN                                                      */
  AES_0_CONTROL_ERRIEN_DISABLED        = 0,     /*!< DISABLED : Disable the error interrupt.                                   */
  AES_0_CONTROL_ERRIEN_ENABLED         = 1,     /*!< ENABLED : Enable the error interrupt.                                     */
} AES_0_CONTROL_ERRIEN_Enum;

/* =============================================  AES_0 CONTROL OCIEN [25..25]  ============================================== */
typedef enum {                                  /*!< AES_0_CONTROL_OCIEN                                                       */
  AES_0_CONTROL_OCIEN_DISABLED         = 0,     /*!< DISABLED : Disable the operation complete interrupt.                      */
  AES_0_CONTROL_OCIEN_ENABLED          = 1,     /*!< ENABLED : Enable the operation complete interrupt.                        */
} AES_0_CONTROL_OCIEN_Enum;

/* =============================================  AES_0 CONTROL DBGMD [30..30]  ============================================== */
typedef enum {                                  /*!< AES_0_CONTROL_DBGMD                                                       */
  AES_0_CONTROL_DBGMD_HALT             = 0,     /*!< HALT : A debug breakpoint will cause the AES module to halt.              */
  AES_0_CONTROL_DBGMD_RUN              = 1,     /*!< RUN : The AES module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
} AES_0_CONTROL_DBGMD_Enum;

/* =============================================  AES_0 CONTROL RESET [31..31]  ============================================== */
typedef enum {                                  /*!< AES_0_CONTROL_RESET                                                       */
  AES_0_CONTROL_RESET_INACTIVE         = 0,     /*!< INACTIVE : AES module is not in soft reset.                               */
  AES_0_CONTROL_RESET_ACTIVE           = 1,     /*!< ACTIVE : AES module is in soft reset and none of the module
                                                     bits can be accessed.                                                     */
} AES_0_CONTROL_RESET_Enum;

/* ========================================================  XFRSIZE  ======================================================== */
/* =======================================================  DATAFIFO  ======================================================== */
/* ========================================================  XORFIFO  ======================================================== */
/* ========================================================  HWKEY0  ========================================================= */
/* ========================================================  HWKEY1  ========================================================= */
/* ========================================================  HWKEY2  ========================================================= */
/* ========================================================  HWKEY3  ========================================================= */
/* ========================================================  HWKEY4  ========================================================= */
/* ========================================================  HWKEY5  ========================================================= */
/* ========================================================  HWKEY6  ========================================================= */
/* ========================================================  HWKEY7  ========================================================= */
/* ========================================================  HWCTR0  ========================================================= */
/* ========================================================  HWCTR1  ========================================================= */
/* ========================================================  HWCTR2  ========================================================= */
/* ========================================================  HWCTR3  ========================================================= */
/* ========================================================  STATUS  ========================================================= */
/* ===============================================  AES_0 STATUS DURF [0..0]  ================================================ */
typedef enum {                                  /*!< AES_0_STATUS_DURF                                                         */
  AES_0_STATUS_DURF_NOT_SET            = 0,     /*!< NOT_SET : No input/output data FIFO underrun.                             */
  AES_0_STATUS_DURF_SET                = 1,     /*!< SET : An input/output data FIFO underrun has occurred.                    */
} AES_0_STATUS_DURF_Enum;

/* ===============================================  AES_0 STATUS DORF [1..1]  ================================================ */
typedef enum {                                  /*!< AES_0_STATUS_DORF                                                         */
  AES_0_STATUS_DORF_NOT_SET            = 0,     /*!< NOT_SET : No input/output data FIFO overrun.                              */
  AES_0_STATUS_DORF_SET                = 1,     /*!< SET : An input/output data FIFO overrun has occurred.                     */
} AES_0_STATUS_DORF_Enum;

/* ===============================================  AES_0 STATUS XORF [2..2]  ================================================ */
typedef enum {                                  /*!< AES_0_STATUS_XORF                                                         */
  AES_0_STATUS_XORF_NOT_SET            = 0,     /*!< NOT_SET : No XOR data FIFO overrun.                                       */
  AES_0_STATUS_XORF_SET                = 1,     /*!< SET : An XOR data FIFO overrun has occurred.                              */
} AES_0_STATUS_XORF_Enum;

/* =============================================  AES_0 STATUS DFIFOLVL [4..6]  ============================================== */
typedef enum {                                  /*!< AES_0_STATUS_DFIFOLVL                                                     */
  AES_0_STATUS_DFIFOLVL_EMPTY          = 0,     /*!< EMPTY : Input/Output data FIFO is empty.                                  */
  AES_0_STATUS_DFIFOLVL_1WORD          = 1,     /*!< 1WORD : Input/Output data FIFO contains 1 word.                           */
  AES_0_STATUS_DFIFOLVL_2WORDS         = 2,     /*!< 2WORDS : Input/Output data FIFO contains 2 words.                         */
  AES_0_STATUS_DFIFOLVL_3WORDS         = 3,     /*!< 3WORDS : Input/Output data FIFO contains 3 words.                         */
  AES_0_STATUS_DFIFOLVL_FULL           = 4,     /*!< FULL : Input/Output data FIFO contains 4 words (full).                    */
} AES_0_STATUS_DFIFOLVL_Enum;

/* =============================================  AES_0 STATUS XFIFOLVL [8..10]  ============================================= */
typedef enum {                                  /*!< AES_0_STATUS_XFIFOLVL                                                     */
  AES_0_STATUS_XFIFOLVL_EMPTY          = 0,     /*!< EMPTY : XOR data FIFO is empty.                                           */
  AES_0_STATUS_XFIFOLVL_1WORD          = 1,     /*!< 1WORD : XOR data FIFO contains 1 word.                                    */
  AES_0_STATUS_XFIFOLVL_2WORDS         = 2,     /*!< 2WORDS : XOR data FIFO contains 2 words.                                  */
  AES_0_STATUS_XFIFOLVL_3WORDS         = 3,     /*!< 3WORDS : XOR data FIFO contains 3 words.                                  */
  AES_0_STATUS_XFIFOLVL_FULL           = 4,     /*!< FULL : XOR data FIFO contains 4 words (full).                             */
} AES_0_STATUS_XFIFOLVL_Enum;

/* ==============================================  AES_0 STATUS BUSYF [16..16]  ============================================== */
typedef enum {                                  /*!< AES_0_STATUS_BUSYF                                                        */
  AES_0_STATUS_BUSYF_NOT_SET           = 0,     /*!< NOT_SET : AES module is not busy.                                         */
  AES_0_STATUS_BUSYF_SET               = 1,     /*!< SET : AES module is completing an operation.                              */
} AES_0_STATUS_BUSYF_Enum;

/* ==============================================  AES_0 STATUS ERRI [30..30]  =============================================== */
typedef enum {                                  /*!< AES_0_STATUS_ERRI                                                         */
  AES_0_STATUS_ERRI_NOT_SET            = 0,     /*!< NOT_SET : AES error interrupt has not occurred.                           */
  AES_0_STATUS_ERRI_SET                = 1,     /*!< SET : AES error interrupt has occurred.                                   */
} AES_0_STATUS_ERRI_Enum;

/* ===============================================  AES_0 STATUS OCI [31..31]  =============================================== */
typedef enum {                                  /*!< AES_0_STATUS_OCI                                                          */
  AES_0_STATUS_OCI_NOT_SET             = 0,     /*!< NOT_SET : AES operation complete interrupt has not occurred.              */
  AES_0_STATUS_OCI_SET                 = 1,     /*!< SET : AES operation complete interrupt occurred.                          */
} AES_0_STATUS_OCI_Enum;



/* =========================================================================================================================== */
/* ================                                           CRC_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  CRC_0 CONTROL SINITEN [0..0]  ============================================== */
typedef enum {                                  /*!< CRC_0_CONTROL_SINITEN                                                     */
  CRC_0_CONTROL_SINITEN_DISABLED       = 0,     /*!< DISABLED : Do not initialize the CRC module to the value set
                                                     by the SEED bit.                                                          */
  CRC_0_CONTROL_SINITEN_ENABLED        = 1,     /*!< ENABLED : Initialize the CRC module to the value set by the
                                                     SEED bit.                                                                 */
} CRC_0_CONTROL_SINITEN_Enum;

/* ===============================================  CRC_0 CONTROL SEED [1..1]  =============================================== */
typedef enum {                                  /*!< CRC_0_CONTROL_SEED                                                        */
  CRC_0_CONTROL_SEED_ALL_ZEROES        = 0,     /*!< ALL_ZEROES : CRC seed value is all 0's (0x00000000)                       */
  CRC_0_CONTROL_SEED_ALL_ONES          = 1,     /*!< ALL_ONES : CRC seed value is all 1's (0xFFFFFFFF).                        */
} CRC_0_CONTROL_SEED_Enum;

/* ==============================================  CRC_0 CONTROL CRCEN [2..2]  =============================================== */
typedef enum {                                  /*!< CRC_0_CONTROL_CRCEN                                                       */
  CRC_0_CONTROL_CRCEN_DISABLED         = 0,     /*!< DISABLED : Disable CRC operations.                                        */
  CRC_0_CONTROL_CRCEN_ENABLED          = 1,     /*!< ENABLED : Enable CRC operations.                                          */
} CRC_0_CONTROL_CRCEN_Enum;

/* =============================================  CRC_0 CONTROL POLYSEL [4..5]  ============================================== */
typedef enum {                                  /*!< CRC_0_CONTROL_POLYSEL                                                     */
  CRC_0_CONTROL_POLYSEL_CRC_32_04C11DB7 = 0,    /*!< CRC_32_04C11DB7 : Select 32-bit polynomial: 0x04C11DB7.                   */
  CRC_0_CONTROL_POLYSEL_CRC_16_1021    = 1,     /*!< CRC_16_1021 : Select 16-bit polynomial: 0x1021.                           */
  CRC_0_CONTROL_POLYSEL_CRC_16_3D65    = 2,     /*!< CRC_16_3D65 : Select 16-bit polynomial: 0x3D65.                           */
  CRC_0_CONTROL_POLYSEL_CRC_16_8005    = 3,     /*!< CRC_16_8005 : Select 16-bit polynomial: 0x8005.                           */
} CRC_0_CONTROL_POLYSEL_Enum;

/* ==============================================  CRC_0 CONTROL BMDEN [8..8]  =============================================== */
typedef enum {                                  /*!< CRC_0_CONTROL_BMDEN                                                       */
  CRC_0_CONTROL_BMDEN_DISABLED         = 0,     /*!< DISABLED : Disable byte mode (word/byte width is determined
                                                     automatically by the hardware).                                           */
  CRC_0_CONTROL_BMDEN_ENABLED          = 1,     /*!< ENABLED : Enable byte mode (all writes are considered as bytes).          */
} CRC_0_CONTROL_BMDEN_Enum;

/* ==============================================  CRC_0 CONTROL BBREN [9..9]  =============================================== */
typedef enum {                                  /*!< CRC_0_CONTROL_BBREN                                                       */
  CRC_0_CONTROL_BBREN_DISABLED         = 0,     /*!< DISABLED : No byte-level bit reversal (input is same order as
                                                     written).                                                                 */
  CRC_0_CONTROL_BBREN_ENABLED          = 1,     /*!< ENABLED : Byte-level bit reversal enabled (the bits in each
                                                     byte are reversed).                                                       */
} CRC_0_CONTROL_BBREN_Enum;

/* =============================================  CRC_0 CONTROL ORDER [10..11]  ============================================== */
typedef enum {                                  /*!< CRC_0_CONTROL_ORDER                                                       */
  CRC_0_CONTROL_ORDER_NO_REORDER       = 0,     /*!< NO_REORDER : No byte reorientation (output is same order as
                                                     input).                                                                   */
  CRC_0_CONTROL_ORDER_BIG_ENDIAN_16    = 1,     /*!< BIG_ENDIAN_16 : Swap for 16-bit big endian order (input: B3
                                                     B2 B1 B0, output: B2 B3 B0 B1).                                           */
  CRC_0_CONTROL_ORDER_BIG_ENDIAN_32    = 2,     /*!< BIG_ENDIAN_32 : Swap for 32-bit big endian order (input: B3
                                                     B2 B1 B0, output: B0 B1 B2 B3).                                           */
} CRC_0_CONTROL_ORDER_Enum;

/* =========================================================  DATA  ========================================================== */
/* =========================================================  RDATA  ========================================================= */


/* =========================================================================================================================== */
/* ================                                        CAPSENSE_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  CAPSENSE_0 CONTROL BUSYF [0..0]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_BUSYF                                                  */
  CAPSENSE_0_CONTROL_BUSYF_IDLE        = 0,     /*!< IDLE : Read: A capacitive sensing conversion is complete or
                                                     a conversion is not currently in progress. Write: No effect.              */
  CAPSENSE_0_CONTROL_BUSYF_BUSY        = 1,     /*!< BUSY : Read: A capacitive sensing conversion is in progress.
                                                     Write: Initiate a capacitive sensing conversion if BUSYF
                                                     is selected as the start of conversion source.                            */
} CAPSENSE_0_CONTROL_BUSYF_Enum;

/* ============================================  CAPSENSE_0 CONTROL CSEN [1..1]  ============================================= */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CSEN                                                   */
  CAPSENSE_0_CONTROL_CSEN_DISABLED     = 0,     /*!< DISABLED : Disable the capacitive sensing module.                         */
  CAPSENSE_0_CONTROL_CSEN_ENABLED      = 1,     /*!< ENABLED : Enable the capacitive sensing module.                           */
} CAPSENSE_0_CONTROL_CSEN_Enum;

/* ===========================================  CAPSENSE_0 CONTROL BIASEN [2..2]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_BIASEN                                                 */
  CAPSENSE_0_CONTROL_BIASEN_DISABLED   = 0,     /*!< DISABLED : Disable the bias.                                              */
  CAPSENSE_0_CONTROL_BIASEN_ENABLED    = 1,     /*!< ENABLED : Enable the bias.                                                */
} CAPSENSE_0_CONTROL_BIASEN_Enum;

/* ===========================================  CAPSENSE_0 CONTROL CMPPOL [3..3]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CMPPOL                                                 */
  CAPSENSE_0_CONTROL_CMPPOL_GT         = 0,     /*!< GT : The digital comparator generates an interrupt if the conversion
                                                     is greater than the CSTH threshold.                                       */
  CAPSENSE_0_CONTROL_CMPPOL_LTE        = 1,     /*!< LTE : The digital comparator generates an interrupt if the conversion
                                                     is less than or equal to the CSTH threshold.                              */
} CAPSENSE_0_CONTROL_CMPPOL_Enum;

/* =============================================  CAPSENSE_0 CONTROL CMD [4..5]  ============================================= */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CMD                                                    */
  CAPSENSE_0_CONTROL_CMD_SINGLE        = 0,     /*!< SINGLE : Single Conversion Mode: One conversion occurs on a
                                                     single channel.                                                           */
  CAPSENSE_0_CONTROL_CMD_SCAN          = 1,     /*!< SCAN : Single Scan Mode: One conversion on each channel selected
                                                     by SCANEN occurs. An end-of-scan interrupt indicates all
                                                     channels have been measured.                                              */
  CAPSENSE_0_CONTROL_CMD_CONT_SINGLE   = 2,     /*!< CONT_SINGLE : Continuous Single Conversion Mode: Continuously
                                                     converts on a single channel. This operation ends only
                                                     if the module is disabled (CSEN = 0) or if a compare threshold
                                                     event occurs (CMPI = 1).                                                  */
  CAPSENSE_0_CONTROL_CMD_CONT_SCAN     = 3,     /*!< CONT_SCAN : Continuous Scan Mode: Continuously loops through
                                                     and converts on all the channels selected by SCANEN. This
                                                     operation ends only if the module is disabled (CSEN = 0)
                                                     or if a compare threshold event occurs (CMPI = 1).                        */
} CAPSENSE_0_CONTROL_CMD_Enum;

/* ============================================  CAPSENSE_0 CONTROL CNVR [6..7]  ============================================= */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CNVR                                                   */
  CAPSENSE_0_CONTROL_CNVR_12BIT        = 0,     /*!< 12BIT : Conversions last 12 internal CAPSENSE clocks and results
                                                     are 12 bits in length.                                                    */
  CAPSENSE_0_CONTROL_CNVR_13BIT        = 1,     /*!< 13BIT : Conversions last 13 internal CAPSENSE clocks and results
                                                     are 13 bits in length.                                                    */
  CAPSENSE_0_CONTROL_CNVR_14BIT        = 2,     /*!< 14BIT : Conversions last 14 internal CAPSENSE clocks and results
                                                     are 14 bits in length.                                                    */
  CAPSENSE_0_CONTROL_CNVR_16BIT        = 3,     /*!< 16BIT : Conversions last 16 internal CAPSENSE clocks and results
                                                     are 16 bits in length.                                                    */
} CAPSENSE_0_CONTROL_CNVR_Enum;

/* ===========================================  CAPSENSE_0 CONTROL ACCMD [8..10]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_ACCMD                                                  */
  CAPSENSE_0_CONTROL_ACCMD_ACC_1       = 0,     /*!< ACC_1 : Accumulate 1 sample.                                              */
  CAPSENSE_0_CONTROL_ACCMD_ACC_4       = 1,     /*!< ACC_4 : Accumulate 4 samples.                                             */
  CAPSENSE_0_CONTROL_ACCMD_ACC_8       = 2,     /*!< ACC_8 : Accumulate 8 samples.                                             */
  CAPSENSE_0_CONTROL_ACCMD_ACC_16      = 3,     /*!< ACC_16 : Accumulate 16 samples.                                           */
  CAPSENSE_0_CONTROL_ACCMD_ACC_32      = 4,     /*!< ACC_32 : Accumulate 32 samples.                                           */
  CAPSENSE_0_CONTROL_ACCMD_ACC_64      = 5,     /*!< ACC_64 : Accumulate 64 samples.                                           */
} CAPSENSE_0_CONTROL_ACCMD_Enum;

/* ===========================================  CAPSENSE_0 CONTROL MCEN [11..11]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_MCEN                                                   */
  CAPSENSE_0_CONTROL_MCEN_DISABLED     = 0,     /*!< DISABLED : Disable the multiple channel measurement feature.              */
  CAPSENSE_0_CONTROL_MCEN_ENABLED      = 1,     /*!< ENABLED : Enable the multiple channel measurement feature.                */
} CAPSENSE_0_CONTROL_MCEN_Enum;

/* ===========================================  CAPSENSE_0 CONTROL CSCM [12..15]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CSCM                                                   */
  CAPSENSE_0_CONTROL_CSCM_CSNT0        = 0,     /*!< CSNT0 : The CSnT0 ('On Demand' by writing 1 to CSBUSY) trigger
                                                     source starts conversions.                                                */
  CAPSENSE_0_CONTROL_CSCM_CSNT1        = 1,     /*!< CSNT1 : The CSnT1 (Timer 0 Low Overflow) trigger source starts
                                                     conversions.                                                              */
  CAPSENSE_0_CONTROL_CSCM_CSNT2        = 2,     /*!< CSNT2 : The CSnT2 (Timer 0 High Overflow) trigger source starts
                                                     conversions.                                                              */
  CAPSENSE_0_CONTROL_CSCM_CSNT3        = 3,     /*!< CSNT3 : The CSnT3 (Timer 1 Low Overflow) trigger source starts
                                                     conversions.                                                              */
  CAPSENSE_0_CONTROL_CSCM_CSNT4        = 4,     /*!< CSNT4 : The CSnT4 (Timer 1 High Overflow) trigger source starts
                                                     conversions.                                                              */
  CAPSENSE_0_CONTROL_CSCM_CSNT5        = 5,     /*!< CSNT5 : The CSnT5 (I2C0 Timer Byte 1 Overflow) trigger source
                                                     starts conversions.                                                       */
  CAPSENSE_0_CONTROL_CSCM_CSNT6        = 6,     /*!< CSNT6 : The CSnT6 (I2C0 Timer Byte 3 Overflow) trigger source
                                                     starts conversions.                                                       */
  CAPSENSE_0_CONTROL_CSCM_CSNT7        = 7,     /*!< CSNT7 : The CSnT7 (I2C1 Timer Byte 1 Overflow) trigger source
                                                     starts conversions.                                                       */
  CAPSENSE_0_CONTROL_CSCM_CSNT8        = 8,     /*!< CSNT8 : The CSnT8 (I2C1 Timer Byte 3 Overflow) trigger source
                                                     starts conversions.                                                       */
  CAPSENSE_0_CONTROL_CSCM_CSNT9        = 9,     /*!< CSNT9 : The CSnT9 (RESERVED) trigger source starts conversions.           */
  CAPSENSE_0_CONTROL_CSCM_CSNT10       = 10,    /*!< CSNT10 : The CSnT10 (RESERVED) trigger source starts conversions.         */
  CAPSENSE_0_CONTROL_CSCM_CSNT11       = 11,    /*!< CSNT11 : The CSnT11 (RESERVED) trigger source starts conversions.         */
  CAPSENSE_0_CONTROL_CSCM_CSNT12       = 12,    /*!< CSNT12 : The CSnT12 (RESERVED) trigger source starts conversions.         */
  CAPSENSE_0_CONTROL_CSCM_CSNT13       = 13,    /*!< CSNT13 : The CSnT13 (RESERVED) trigger source starts conversions.         */
  CAPSENSE_0_CONTROL_CSCM_CSNT14       = 14,    /*!< CSNT14 : The CSnT14 (RESERVED) trigger source starts conversions.         */
  CAPSENSE_0_CONTROL_CSCM_CSNT15       = 15,    /*!< CSNT15 : The CSnT15 (RESERVED) trigger source starts conversions.         */
} CAPSENSE_0_CONTROL_CSCM_Enum;

/* ===========================================  CAPSENSE_0 CONTROL PMMD [16..17]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_PMMD                                                   */
  CAPSENSE_0_CONTROL_PMMD_ALWAYS_RETRY = 0,     /*!< ALWAYS_RETRY : Always retry on a pin state change.                        */
  CAPSENSE_0_CONTROL_PMMD_RETRY_TWICE  = 1,     /*!< RETRY_TWICE : Retry up to twice on consecutive bit cycles.                */
  CAPSENSE_0_CONTROL_PMMD_RETRY_FOUR_TIMES = 2, /*!< RETRY_FOUR_TIMES : Retry up to four times on consecutive bit
                                                     cycles.                                                                   */
  CAPSENSE_0_CONTROL_PMMD_DO_NOT_RETRY = 3,     /*!< DO_NOT_RETRY : Ignore monitored signal state change.                      */
} CAPSENSE_0_CONTROL_PMMD_Enum;

/* ===========================================  CAPSENSE_0 CONTROL PMEF [18..18]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_PMEF                                                   */
  CAPSENSE_0_CONTROL_PMEF_NOT_SET      = 0,     /*!< NOT_SET : A retry did not occur due to a pin monitor event during
                                                     the last conversion.                                                      */
  CAPSENSE_0_CONTROL_PMEF_SET          = 1,     /*!< SET : A retry occurred due to a pin monitor event during the
                                                     last conversion.                                                          */
} CAPSENSE_0_CONTROL_PMEF_Enum;

/* ===========================================  CAPSENSE_0 CONTROL CMPEN [20..20]  =========================================== */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CMPEN                                                  */
  CAPSENSE_0_CONTROL_CMPEN_DISABLED    = 0,     /*!< DISABLED : Disable the threshold comparator.                              */
  CAPSENSE_0_CONTROL_CMPEN_ENABLED     = 1,     /*!< ENABLED : Enable the threshold comparator.                                */
} CAPSENSE_0_CONTROL_CMPEN_Enum;

/* ===========================================  CAPSENSE_0 CONTROL CDIEN [21..21]  =========================================== */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CDIEN                                                  */
  CAPSENSE_0_CONTROL_CDIEN_DISABLED    = 0,     /*!< DISABLED : Disable the single conversion done interrupt.                  */
  CAPSENSE_0_CONTROL_CDIEN_ENABLED     = 1,     /*!< ENABLED : Enable the single conversion done interrupt.                    */
} CAPSENSE_0_CONTROL_CDIEN_Enum;

/* ==========================================  CAPSENSE_0 CONTROL EOSIEN [22..22]  =========================================== */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_EOSIEN                                                 */
  CAPSENSE_0_CONTROL_EOSIEN_DISABLED   = 0,     /*!< DISABLED : Disable the single scan end-of-scan interrupt.                 */
  CAPSENSE_0_CONTROL_EOSIEN_ENABLED    = 1,     /*!< ENABLED : Enable the single scan end-of-scan interrupt.                   */
} CAPSENSE_0_CONTROL_EOSIEN_Enum;

/* ===========================================  CAPSENSE_0 CONTROL CMPI [24..24]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CMPI                                                   */
  CAPSENSE_0_CONTROL_CMPI_NOT_SET      = 0,     /*!< NOT_SET : The capacitive sensing result did not cause a compare
                                                     threshold interrupt.                                                      */
  CAPSENSE_0_CONTROL_CMPI_SET          = 1,     /*!< SET : The capacitive sensing result caused a compare threshold
                                                     interrupt.                                                                */
} CAPSENSE_0_CONTROL_CMPI_Enum;

/* ============================================  CAPSENSE_0 CONTROL CDI [25..25]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_CDI                                                    */
  CAPSENSE_0_CONTROL_CDI_NOT_SET       = 0,     /*!< NOT_SET : Read: The CAPSENSEn module has not completed a data
                                                     conversion since the last time CDI was cleared. Write:
                                                     Clear the interrupt.                                                      */
  CAPSENSE_0_CONTROL_CDI_SET           = 1,     /*!< SET : Read: The CAPSENSEn module completed a data conversion.
                                                     Write: Force a conversion complete interrupt.                             */
} CAPSENSE_0_CONTROL_CDI_Enum;

/* ===========================================  CAPSENSE_0 CONTROL EOSI [26..26]  ============================================ */
typedef enum {                                  /*!< CAPSENSE_0_CONTROL_EOSI                                                   */
  CAPSENSE_0_CONTROL_EOSI_NOT_SET      = 0,     /*!< NOT_SET : The CAPSENSEn module has not completed a scan since
                                                     the last time EOSI was cleared.                                           */
  CAPSENSE_0_CONTROL_EOSI_SET          = 1,     /*!< SET : The CAPSENSEn module completed a scan.                              */
} CAPSENSE_0_CONTROL_EOSI_Enum;

/* =========================================================  MODE  ========================================================== */
/* =========================================================  DATA  ========================================================== */
/* =========================================================  SCAN  ========================================================== */
/* =========================================================  CSTH  ========================================================== */
/* ==========================================================  MUX  ========================================================== */
/* ==============================================  CAPSENSE_0 MUX CSMX [0..3]  =============================================== */
typedef enum {                                  /*!< CAPSENSE_0_MUX_CSMX                                                       */
  CAPSENSE_0_MUX_CSMX_CSN0             = 0,     /*!< CSN0 : Select CSn.0 (PB0.1).                                              */
  CAPSENSE_0_MUX_CSMX_CSN1             = 1,     /*!< CSN1 : Select CSn.1 (PB0.2).                                              */
  CAPSENSE_0_MUX_CSMX_CSN2             = 2,     /*!< CSN2 : Select CSn.2 (PB0.3).                                              */
  CAPSENSE_0_MUX_CSMX_CSN3             = 3,     /*!< CSN3 : Select CSn.3 (PB0.4).                                              */
  CAPSENSE_0_MUX_CSMX_CSN4             = 4,     /*!< CSN4 : Select CSn.4 (PB0.5).                                              */
  CAPSENSE_0_MUX_CSMX_CSN5             = 5,     /*!< CSN5 : Select CSn.5 (PB0.6).                                              */
  CAPSENSE_0_MUX_CSMX_CSN6             = 6,     /*!< CSN6 : Select CSn.6 (PB0.7).                                              */
  CAPSENSE_0_MUX_CSMX_CSN7             = 7,     /*!< CSN7 : Select CSn.7 (PB0.8).                                              */
  CAPSENSE_0_MUX_CSMX_CSN8             = 8,     /*!< CSN8 : Select CSn.8 (PB1.7).                                              */
  CAPSENSE_0_MUX_CSMX_CSN9             = 9,     /*!< CSN9 : Select CSn.9 (PB1.8).                                              */
  CAPSENSE_0_MUX_CSMX_CSN10            = 10,    /*!< CSN10 : Select CSn.10 (PB1.13).                                           */
  CAPSENSE_0_MUX_CSMX_CSN11            = 11,    /*!< CSN11 : Select CSn.11 (PB1.14).                                           */
  CAPSENSE_0_MUX_CSMX_CSN12            = 12,    /*!< CSN12 : Select CSn.12 (PB1.15).                                           */
  CAPSENSE_0_MUX_CSMX_CSN13            = 13,    /*!< CSN13 : Select CSn.13 (PB2.0).                                            */
  CAPSENSE_0_MUX_CSMX_CSN14            = 14,    /*!< CSN14 : Select CSn.14 (PB2.1).                                            */
  CAPSENSE_0_MUX_CSMX_CSN15            = 15,    /*!< CSN15 : Select CSn.15 (PB2.2).                                            */
} CAPSENSE_0_MUX_CSMX_Enum;

/* =============================================  CAPSENSE_0 MUX CSDISC [7..7]  ============================================== */
typedef enum {                                  /*!< CAPSENSE_0_MUX_CSDISC                                                     */
  CAPSENSE_0_MUX_CSDISC_CONNECT        = 0,     /*!< CONNECT : Connect the capacitive sensing circuit to the selected
                                                     channel.                                                                  */
  CAPSENSE_0_MUX_CSDISC_DISCONNECT     = 1,     /*!< DISCONNECT : Disconnect the capacitive sensing input channel.             */
} CAPSENSE_0_MUX_CSDISC_Enum;



/* =========================================================================================================================== */
/* ================                                         CLKCTRL_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  CLKCTRL_0 CONTROL AHBSEL [0..2]  ============================================ */
typedef enum {                                  /*!< CLKCTRL_0_CONTROL_AHBSEL                                                  */
  CLKCTRL_0_CONTROL_AHBSEL_LPOSC0      = 0,     /*!< LPOSC0 : AHB clock source is the Low-Power Oscillator.                    */
  CLKCTRL_0_CONTROL_AHBSEL_LFOSC0      = 1,     /*!< LFOSC0 : AHB clock source is the Low-Frequency Oscillator.                */
  CLKCTRL_0_CONTROL_AHBSEL_RTC0OSC     = 2,     /*!< RTC0OSC : AHB clock source is the RTC Oscillator.                         */
  CLKCTRL_0_CONTROL_AHBSEL_EXTOSC0     = 3,     /*!< EXTOSC0 : AHB clock source is the External Oscillator.                    */
  CLKCTRL_0_CONTROL_AHBSEL_USB0OSC     = 4,     /*!< USB0OSC : AHB clock source is the USB Oscillator.                         */
  CLKCTRL_0_CONTROL_AHBSEL_PLL0OSC     = 5,     /*!< PLL0OSC : AHB clock source is the PLL.                                    */
  CLKCTRL_0_CONTROL_AHBSEL_LPOSC0_DIV  = 6,     /*!< LPOSC0_DIV : AHB clock source is a divided version of the Low-Power
                                                     Oscillator.                                                               */
} CLKCTRL_0_CONTROL_AHBSEL_Enum;

/* ===========================================  CLKCTRL_0 CONTROL AHBDIV [8..10]  ============================================ */
typedef enum {                                  /*!< CLKCTRL_0_CONTROL_AHBDIV                                                  */
  CLKCTRL_0_CONTROL_AHBDIV_DIV1        = 0,     /*!< DIV1 : AHB clock divided by 1.                                            */
  CLKCTRL_0_CONTROL_AHBDIV_DIV2        = 1,     /*!< DIV2 : AHB clock divided by 2.                                            */
  CLKCTRL_0_CONTROL_AHBDIV_DIV4        = 2,     /*!< DIV4 : AHB clock divided by 4.                                            */
  CLKCTRL_0_CONTROL_AHBDIV_DIV8        = 3,     /*!< DIV8 : AHB clock divided by 8.                                            */
  CLKCTRL_0_CONTROL_AHBDIV_DIV16       = 4,     /*!< DIV16 : AHB clock divided by 16.                                          */
  CLKCTRL_0_CONTROL_AHBDIV_DIV32       = 5,     /*!< DIV32 : AHB clock divided by 32.                                          */
  CLKCTRL_0_CONTROL_AHBDIV_DIV64       = 6,     /*!< DIV64 : AHB clock divided by 64.                                          */
  CLKCTRL_0_CONTROL_AHBDIV_DIV128      = 7,     /*!< DIV128 : AHB clock divided by 128.                                        */
} CLKCTRL_0_CONTROL_AHBDIV_Enum;

/* ===========================================  CLKCTRL_0 CONTROL APBDIV [16..16]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_CONTROL_APBDIV                                                  */
  CLKCTRL_0_CONTROL_APBDIV_DIV1        = 0,     /*!< DIV1 : APB clock is the same as the AHB clock (divided by 1).             */
  CLKCTRL_0_CONTROL_APBDIV_DIV2        = 1,     /*!< DIV2 : APB clock is the AHB clock divided by 2.                           */
} CLKCTRL_0_CONTROL_APBDIV_Enum;

/* ==========================================  CLKCTRL_0 CONTROL EXTESEL [28..28]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_CONTROL_EXTESEL                                                 */
  CLKCTRL_0_CONTROL_EXTESEL_BOTH_EDGES = 0,     /*!< BOTH_EDGES : External clock generated by both rising and falling
                                                     edges of the external oscillator.                                         */
  CLKCTRL_0_CONTROL_EXTESEL_RISING_ONLY = 1,    /*!< RISING_ONLY : External clock generated by only rising edges
                                                     of the external oscillator.                                               */
} CLKCTRL_0_CONTROL_EXTESEL_Enum;

/* ===========================================  CLKCTRL_0 CONTROL OBUSYF [29..29]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_CONTROL_OBUSYF                                                  */
  CLKCTRL_0_CONTROL_OBUSYF_NOT_SET     = 0,     /*!< NOT_SET : AHB and APB oscillators are not busy.                           */
  CLKCTRL_0_CONTROL_OBUSYF_SET         = 1,     /*!< SET : AHB and APB oscillators are busy and the AHBSEL, AHBDIV,
                                                     and APBDIV fields should not be modified.                                 */
} CLKCTRL_0_CONTROL_OBUSYF_Enum;

/* ========================================================  AHBCLKG  ======================================================== */
/* ============================================  CLKCTRL_0 AHBCLKG RAMCEN [0..0]  ============================================ */
typedef enum {                                  /*!< CLKCTRL_0_AHBCLKG_RAMCEN                                                  */
  CLKCTRL_0_AHBCLKG_RAMCEN_DISABLED    = 0,     /*!< DISABLED : Disable the AHB clock to the RAM.                              */
  CLKCTRL_0_AHBCLKG_RAMCEN_ENABLED     = 1,     /*!< ENABLED : Enable the AHB clock to the RAM (default).                      */
} CLKCTRL_0_AHBCLKG_RAMCEN_Enum;

/* ============================================  CLKCTRL_0 AHBCLKG DMACEN [1..1]  ============================================ */
typedef enum {                                  /*!< CLKCTRL_0_AHBCLKG_DMACEN                                                  */
  CLKCTRL_0_AHBCLKG_DMACEN_DISABLED    = 0,     /*!< DISABLED : Disable the AHB clock to the DMA Controller (default).         */
  CLKCTRL_0_AHBCLKG_DMACEN_ENABLED     = 1,     /*!< ENABLED : Enable the AHB clock to the DMA Controller.                     */
} CLKCTRL_0_AHBCLKG_DMACEN_Enum;

/* ===========================================  CLKCTRL_0 AHBCLKG FLASHCEN [2..2]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_AHBCLKG_FLASHCEN                                                */
  CLKCTRL_0_AHBCLKG_FLASHCEN_DISABLED  = 0,     /*!< DISABLED : Disable the AHB clock to the Flash.                            */
  CLKCTRL_0_AHBCLKG_FLASHCEN_ENABLED   = 1,     /*!< ENABLED : Enable the AHB clock to the Flash (default).                    */
} CLKCTRL_0_AHBCLKG_FLASHCEN_Enum;

/* ===========================================  CLKCTRL_0 AHBCLKG EMIF0CEN [3..3]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_AHBCLKG_EMIF0CEN                                                */
  CLKCTRL_0_AHBCLKG_EMIF0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the AHB clock to the External Memory Interface
                                                     (EMIF) (default).                                                         */
  CLKCTRL_0_AHBCLKG_EMIF0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the AHB clock to the External Memory Interface
                                                     (EMIF).                                                                   */
} CLKCTRL_0_AHBCLKG_EMIF0CEN_Enum;

/* ===========================================  CLKCTRL_0 AHBCLKG USB0BCEN [4..4]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_AHBCLKG_USB0BCEN                                                */
  CLKCTRL_0_AHBCLKG_USB0BCEN_DISABLED  = 0,     /*!< DISABLED : Disable the AHB clock to the USB0 Buffer (default).            */
  CLKCTRL_0_AHBCLKG_USB0BCEN_ENABLED   = 1,     /*!< ENABLED : Enable the AHB clock to the USB0 Buffer.                        */
} CLKCTRL_0_AHBCLKG_USB0BCEN_Enum;

/* =======================================================  APBCLKG0  ======================================================== */
/* ===========================================  CLKCTRL_0 APBCLKG0 PLL0CEN [0..0]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_PLL0CEN                                                */
  CLKCTRL_0_APBCLKG0_PLL0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the PLL0 registers (default).         */
  CLKCTRL_0_APBCLKG0_PLL0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the PLL0 registers.                     */
} CLKCTRL_0_APBCLKG0_PLL0CEN_Enum;

/* ===========================================  CLKCTRL_0 APBCLKG0 PB0CEN [1..1]  ============================================ */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_PB0CEN                                                 */
  CLKCTRL_0_APBCLKG0_PB0CEN_DISABLED   = 0,     /*!< DISABLED : Disable the APB clock to the Port Bank Modules (default).      */
  CLKCTRL_0_APBCLKG0_PB0CEN_ENABLED    = 1,     /*!< ENABLED : Enable the APB clock to the Port Bank Modules.                  */
} CLKCTRL_0_APBCLKG0_PB0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 USART0CEN [2..2]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_USART0CEN                                              */
  CLKCTRL_0_APBCLKG0_USART0CEN_DISABLED = 0,    /*!< DISABLED : Disable the APB clock to the USART0 Module (default).          */
  CLKCTRL_0_APBCLKG0_USART0CEN_ENABLED = 1,     /*!< ENABLED : Enable the APB clock to the USART0 Module.                      */
} CLKCTRL_0_APBCLKG0_USART0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 USART1CEN [3..3]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_USART1CEN                                              */
  CLKCTRL_0_APBCLKG0_USART1CEN_DISABLED = 0,    /*!< DISABLED : Disable the APB clock to the USART1 Module (default).          */
  CLKCTRL_0_APBCLKG0_USART1CEN_ENABLED = 1,     /*!< ENABLED : Enable the APB clock to the USART1 Module.                      */
} CLKCTRL_0_APBCLKG0_USART1CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 UART0CEN [4..4]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_UART0CEN                                               */
  CLKCTRL_0_APBCLKG0_UART0CEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the UART0 Module (default).           */
  CLKCTRL_0_APBCLKG0_UART0CEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the UART0 Module.                       */
} CLKCTRL_0_APBCLKG0_UART0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 UART1CEN [5..5]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_UART1CEN                                               */
  CLKCTRL_0_APBCLKG0_UART1CEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the UART1 Module (default).           */
  CLKCTRL_0_APBCLKG0_UART1CEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the UART1 Module.                       */
} CLKCTRL_0_APBCLKG0_UART1CEN_Enum;

/* ===========================================  CLKCTRL_0 APBCLKG0 SPI0CEN [6..6]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_SPI0CEN                                                */
  CLKCTRL_0_APBCLKG0_SPI0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the SPI0 Module (default).            */
  CLKCTRL_0_APBCLKG0_SPI0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the SPI0 Module.                        */
} CLKCTRL_0_APBCLKG0_SPI0CEN_Enum;

/* ===========================================  CLKCTRL_0 APBCLKG0 SPI1CEN [7..7]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_SPI1CEN                                                */
  CLKCTRL_0_APBCLKG0_SPI1CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the SPI1 Module (default).            */
  CLKCTRL_0_APBCLKG0_SPI1CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the SPI1 Module.                        */
} CLKCTRL_0_APBCLKG0_SPI1CEN_Enum;

/* ===========================================  CLKCTRL_0 APBCLKG0 SPI2CEN [8..8]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_SPI2CEN                                                */
  CLKCTRL_0_APBCLKG0_SPI2CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the SPI2 Module (default).            */
  CLKCTRL_0_APBCLKG0_SPI2CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the SPI2 Module.                        */
} CLKCTRL_0_APBCLKG0_SPI2CEN_Enum;

/* ===========================================  CLKCTRL_0 APBCLKG0 I2C0CEN [9..9]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_I2C0CEN                                                */
  CLKCTRL_0_APBCLKG0_I2C0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the I2C0 Module (default).            */
  CLKCTRL_0_APBCLKG0_I2C0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the I2C0 Module.                        */
} CLKCTRL_0_APBCLKG0_I2C0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 I2C1CEN [10..10]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_I2C1CEN                                                */
  CLKCTRL_0_APBCLKG0_I2C1CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the I2C1 Module (default).            */
  CLKCTRL_0_APBCLKG0_I2C1CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the I2C1 Module.                        */
} CLKCTRL_0_APBCLKG0_I2C1CEN_Enum;

/* =========================================  CLKCTRL_0 APBCLKG0 EPCA0CEN [11..11]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_EPCA0CEN                                               */
  CLKCTRL_0_APBCLKG0_EPCA0CEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the EPCA0 Module (default).           */
  CLKCTRL_0_APBCLKG0_EPCA0CEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the EPCA0 Module.                       */
} CLKCTRL_0_APBCLKG0_EPCA0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 PCA0CEN [12..12]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_PCA0CEN                                                */
  CLKCTRL_0_APBCLKG0_PCA0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the PCA0 Module (default).            */
  CLKCTRL_0_APBCLKG0_PCA0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the PCA0 Module.                        */
} CLKCTRL_0_APBCLKG0_PCA0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 PCA1CEN [13..13]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_PCA1CEN                                                */
  CLKCTRL_0_APBCLKG0_PCA1CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the PCA1 Module (default).            */
  CLKCTRL_0_APBCLKG0_PCA1CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the PCA1 Module.                        */
} CLKCTRL_0_APBCLKG0_PCA1CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 SSG0CEN [14..14]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_SSG0CEN                                                */
  CLKCTRL_0_APBCLKG0_SSG0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the SSG0 Module (default).            */
  CLKCTRL_0_APBCLKG0_SSG0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the SSG0 Module.                        */
} CLKCTRL_0_APBCLKG0_SSG0CEN_Enum;

/* =========================================  CLKCTRL_0 APBCLKG0 TIMER0CEN [15..15]  ========================================= */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_TIMER0CEN                                              */
  CLKCTRL_0_APBCLKG0_TIMER0CEN_DISABLED = 0,    /*!< DISABLED : Disable the APB clock to the TIMER0 Module (default).          */
  CLKCTRL_0_APBCLKG0_TIMER0CEN_ENABLED = 1,     /*!< ENABLED : Enable the APB clock to the TIMER0 Module.                      */
} CLKCTRL_0_APBCLKG0_TIMER0CEN_Enum;

/* =========================================  CLKCTRL_0 APBCLKG0 TIMER1CEN [16..16]  ========================================= */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_TIMER1CEN                                              */
  CLKCTRL_0_APBCLKG0_TIMER1CEN_DISABLED = 0,    /*!< DISABLED : Disable the APB clock to the TIMER1 Module (default).          */
  CLKCTRL_0_APBCLKG0_TIMER1CEN_ENABLED = 1,     /*!< ENABLED : Enable the APB clock to the TIMER1 Module.                      */
} CLKCTRL_0_APBCLKG0_TIMER1CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 ADC0CEN [17..17]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_ADC0CEN                                                */
  CLKCTRL_0_APBCLKG0_ADC0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the SARADC0 Module (default).         */
  CLKCTRL_0_APBCLKG0_ADC0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the SARADC0 Module.                     */
} CLKCTRL_0_APBCLKG0_ADC0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 ADC1CEN [18..18]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_ADC1CEN                                                */
  CLKCTRL_0_APBCLKG0_ADC1CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the SARADC1 Module (default).         */
  CLKCTRL_0_APBCLKG0_ADC1CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the SARADC1 Module.                     */
} CLKCTRL_0_APBCLKG0_ADC1CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 CMP0CEN [19..19]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_CMP0CEN                                                */
  CLKCTRL_0_APBCLKG0_CMP0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the Comparator 0 Module
                                                     (default).                                                                */
  CLKCTRL_0_APBCLKG0_CMP0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the Comparator 0 Module.                */
} CLKCTRL_0_APBCLKG0_CMP0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 CMP1CEN [20..20]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_CMP1CEN                                                */
  CLKCTRL_0_APBCLKG0_CMP1CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the Comparator 1 Module
                                                     (default).                                                                */
  CLKCTRL_0_APBCLKG0_CMP1CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the Comparator 1 Module.                */
} CLKCTRL_0_APBCLKG0_CMP1CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 CS0CEN [21..21]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_CS0CEN                                                 */
  CLKCTRL_0_APBCLKG0_CS0CEN_DISABLED   = 0,     /*!< DISABLED : Disable the APB clock to the CAPSENSE0 Module (default).       */
  CLKCTRL_0_APBCLKG0_CS0CEN_ENABLED    = 1,     /*!< ENABLED : Enable the APB clock to the CAPSENSE0 Module.                   */
} CLKCTRL_0_APBCLKG0_CS0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 AES0CEN [22..22]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_AES0CEN                                                */
  CLKCTRL_0_APBCLKG0_AES0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the AES0 Module (default).            */
  CLKCTRL_0_APBCLKG0_AES0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the AES0 Module.                        */
} CLKCTRL_0_APBCLKG0_AES0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 CRC0CEN [23..23]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_CRC0CEN                                                */
  CLKCTRL_0_APBCLKG0_CRC0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the CRC0 Module (default).            */
  CLKCTRL_0_APBCLKG0_CRC0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the CRC0 Module.                        */
} CLKCTRL_0_APBCLKG0_CRC0CEN_Enum;

/* =========================================  CLKCTRL_0 APBCLKG0 IDAC0CEN [24..24]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_IDAC0CEN                                               */
  CLKCTRL_0_APBCLKG0_IDAC0CEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the IDAC0 Module (default).           */
  CLKCTRL_0_APBCLKG0_IDAC0CEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the IDAC0 Module.                       */
} CLKCTRL_0_APBCLKG0_IDAC0CEN_Enum;

/* =========================================  CLKCTRL_0 APBCLKG0 IDAC1CEN [25..25]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_IDAC1CEN                                               */
  CLKCTRL_0_APBCLKG0_IDAC1CEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the IDAC1 Module (default).           */
  CLKCTRL_0_APBCLKG0_IDAC1CEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the IDAC1 Module.                       */
} CLKCTRL_0_APBCLKG0_IDAC1CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 LPT0CEN [26..26]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_LPT0CEN                                                */
  CLKCTRL_0_APBCLKG0_LPT0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the LPTIMER0 Module (default).        */
  CLKCTRL_0_APBCLKG0_LPT0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the LPTIMER0 Module.                    */
} CLKCTRL_0_APBCLKG0_LPT0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 I2S0CEN [27..27]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_I2S0CEN                                                */
  CLKCTRL_0_APBCLKG0_I2S0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the I2S0 Module (default).            */
  CLKCTRL_0_APBCLKG0_I2S0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the I2S0 Module.                        */
} CLKCTRL_0_APBCLKG0_I2S0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG0 USB0CEN [28..28]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_USB0CEN                                                */
  CLKCTRL_0_APBCLKG0_USB0CEN_DISABLED  = 0,     /*!< DISABLED : Disable the APB clock to the USB0 Module (default).            */
  CLKCTRL_0_APBCLKG0_USB0CEN_ENABLED   = 1,     /*!< ENABLED : Enable the APB clock to the USB0 Module.                        */
} CLKCTRL_0_APBCLKG0_USB0CEN_Enum;

/* =========================================  CLKCTRL_0 APBCLKG0 EVREGCEN [29..29]  ========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_EVREGCEN                                               */
  CLKCTRL_0_APBCLKG0_EVREGCEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the External Regulator Module
                                                     (EXTVREG0) (default).                                                     */
  CLKCTRL_0_APBCLKG0_EVREGCEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the External Regulator Module
                                                     (EXTVREG0).                                                               */
} CLKCTRL_0_APBCLKG0_EVREGCEN_Enum;

/* =========================================  CLKCTRL_0 APBCLKG0 FLCTRLCEN [30..30]  ========================================= */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG0_FLCTRLCEN                                              */
  CLKCTRL_0_APBCLKG0_FLCTRLCEN_DISABLED = 0,    /*!< DISABLED : Disable the APB clock to the Flash Controller Module
                                                     (FLASHCTRL0) (default).                                                   */
  CLKCTRL_0_APBCLKG0_FLCTRLCEN_ENABLED = 1,     /*!< ENABLED : Enable the APB clock to the Flash Controller Module
                                                     (FLASHCTRL0).                                                             */
} CLKCTRL_0_APBCLKG0_FLCTRLCEN_Enum;

/* =======================================================  APBCLKG1  ======================================================== */
/* ==========================================  CLKCTRL_0 APBCLKG1 MISC0CEN [0..0]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG1_MISC0CEN                                               */
  CLKCTRL_0_APBCLKG1_MISC0CEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the RSTSRC0, LOCK0, VMON0,
                                                     VREG0, LDO0, VREF0, EXTOSC0, LPOSC0, EXTVREG0, IVC0 and
                                                     RTC0 modules (default).                                                   */
  CLKCTRL_0_APBCLKG1_MISC0CEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the RSTSRC0, LOCK0, VMON0,
                                                     VREG0, LDO0, VREF0, EXTOSC0, LPOSC0, EXTVREG0, IVC0 and
                                                     RTC0 modules.                                                             */
} CLKCTRL_0_APBCLKG1_MISC0CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG1 MISC1CEN [1..1]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG1_MISC1CEN                                               */
  CLKCTRL_0_APBCLKG1_MISC1CEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the Watchdog Timer (WDTIMER0),
                                                     EMIF0, and DMA Crossbar (DMAXBAR0) modules.                               */
  CLKCTRL_0_APBCLKG1_MISC1CEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the Watchdog Timer (WDTIMER0),
                                                     EMIF0, and DMA Crossbar (DMAXBAR0) modules (default).                     */
} CLKCTRL_0_APBCLKG1_MISC1CEN_Enum;

/* ==========================================  CLKCTRL_0 APBCLKG1 MISC2CEN [2..2]  =========================================== */
typedef enum {                                  /*!< CLKCTRL_0_APBCLKG1_MISC2CEN                                               */
  CLKCTRL_0_APBCLKG1_MISC2CEN_DISABLED = 0,     /*!< DISABLED : Disable the APB clock to the OSCVLDF flag in the
                                                     EXTOSC module (default).                                                  */
  CLKCTRL_0_APBCLKG1_MISC2CEN_ENABLED  = 1,     /*!< ENABLED : Enable the APB clock to the OSCVLDF flag in the EXTOSC
                                                     module.                                                                   */
} CLKCTRL_0_APBCLKG1_MISC2CEN_Enum;

/* =========================================================  PM3CN  ========================================================= */
/* ============================================  CLKCTRL_0 PM3CN PM3CSEL [0..2]  ============================================= */
typedef enum {                                  /*!< CLKCTRL_0_PM3CN_PM3CSEL                                                   */
  CLKCTRL_0_PM3CN_PM3CSEL_LPOSC0       = 0,     /*!< LPOSC0 : Power Mode 3 clock source is the Low-Power Oscillator.           */
  CLKCTRL_0_PM3CN_PM3CSEL_LFOSC0       = 1,     /*!< LFOSC0 : Power Mode 3 clock source is the Low-Frequency Oscillator.       */
  CLKCTRL_0_PM3CN_PM3CSEL_RTC0OSC      = 2,     /*!< RTC0OSC : Power Mode 3 clock source is the RTC Oscillator.                */
  CLKCTRL_0_PM3CN_PM3CSEL_EXTOSC0      = 3,     /*!< EXTOSC0 : Power Mode 3 clock source is the External Oscillator.           */
  CLKCTRL_0_PM3CN_PM3CSEL_USB0OSC      = 4,     /*!< USB0OSC : Power Mode 3 clock source is the USB Oscillator.                */
  CLKCTRL_0_PM3CN_PM3CSEL_PLL0OSC      = 5,     /*!< PLL0OSC : Power Mode 3 clock source is the PLL.                           */
  CLKCTRL_0_PM3CN_PM3CSEL_LPOSC0_DIV   = 6,     /*!< LPOSC0_DIV : Power Mode 3 clock source is a divided version
                                                     of the Low-Power Oscillator.                                              */
} CLKCTRL_0_PM3CN_PM3CSEL_Enum;

/* ============================================  CLKCTRL_0 PM3CN PM3CEN [16..16]  ============================================ */
typedef enum {                                  /*!< CLKCTRL_0_PM3CN_PM3CEN                                                    */
  CLKCTRL_0_PM3CN_PM3CEN_DISABLED      = 0,     /*!< DISABLED : Disable the core clock when in Power Mode 3.                   */
  CLKCTRL_0_PM3CN_PM3CEN_ENABLED       = 1,     /*!< ENABLED : The core clock is enabled and runs off the clock selected
                                                     by PM3CSEL in Power Mode 3.                                               */
} CLKCTRL_0_PM3CN_PM3CEN_Enum;



/* =========================================================================================================================== */
/* ================                                           CMP_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  CMP_0 CONTROL CMPFI [13..13]  ============================================== */
typedef enum {                                  /*!< CMP_0_CONTROL_CMPFI                                                       */
  CMP_0_CONTROL_CMPFI_NOT_SET          = 0,     /*!< NOT_SET : No comparator falling edge has occurred since this
                                                     flag was last cleared.                                                    */
  CMP_0_CONTROL_CMPFI_SET              = 1,     /*!< SET : A comparator falling edge occurred since last flag was
                                                     cleared.                                                                  */
} CMP_0_CONTROL_CMPFI_Enum;

/* =============================================  CMP_0 CONTROL CMPRI [14..14]  ============================================== */
typedef enum {                                  /*!< CMP_0_CONTROL_CMPRI                                                       */
  CMP_0_CONTROL_CMPRI_NOT_SET          = 0,     /*!< NOT_SET : No comparator rising edge has occurred since this
                                                     flag was last cleared.                                                    */
  CMP_0_CONTROL_CMPRI_SET              = 1,     /*!< SET : A comparator rising edge occurred since last flag was
                                                     cleared.                                                                  */
} CMP_0_CONTROL_CMPRI_Enum;

/* =============================================  CMP_0 CONTROL CMPOUT [30..30]  ============================================= */
typedef enum {                                  /*!< CMP_0_CONTROL_CMPOUT                                                      */
  CMP_0_CONTROL_CMPOUT_POS_LT_NEG      = 0,     /*!< POS_LT_NEG : Voltage on CP+ < CP-.                                        */
  CMP_0_CONTROL_CMPOUT_POS_GT_NEG      = 1,     /*!< POS_GT_NEG : Voltage on CP+ > CP-.                                        */
} CMP_0_CONTROL_CMPOUT_Enum;

/* =============================================  CMP_0 CONTROL CMPEN [31..31]  ============================================== */
typedef enum {                                  /*!< CMP_0_CONTROL_CMPEN                                                       */
  CMP_0_CONTROL_CMPEN_DISABLED         = 0,     /*!< DISABLED : Disable the comparator.                                        */
  CMP_0_CONTROL_CMPEN_ENABLED          = 1,     /*!< ENABLED : Enable the comparator.                                          */
} CMP_0_CONTROL_CMPEN_Enum;

/* =========================================================  MODE  ========================================================== */
/* ================================================  CMP_0 MODE NMUX [0..3]  ================================================= */
typedef enum {                                  /*!< CMP_0_MODE_NMUX                                                           */
  CMP_0_MODE_NMUX_CMPNN0               = 0,     /*!< CMPNN0 : Select CMPnN.0 (P2.12).                                          */
  CMP_0_MODE_NMUX_CMPNN1               = 1,     /*!< CMPNN1 : Select CMPnN.1 (PB2.14).                                         */
  CMP_0_MODE_NMUX_CMPNN2               = 2,     /*!< CMPNN2 : Select CMPnN.2 (PB3.1).                                          */
  CMP_0_MODE_NMUX_CMPNN3               = 3,     /*!< CMPNN3 : Select CMPnN.3 (PB3.3).                                          */
  CMP_0_MODE_NMUX_CMPNN4               = 4,     /*!< CMPNN4 : Select CMPnN.4 (PB3.5).                                          */
  CMP_0_MODE_NMUX_CMPNN5               = 5,     /*!< CMPNN5 : Select CMPnN.5 (PB3.7).                                          */
  CMP_0_MODE_NMUX_CMPNN6               = 6,     /*!< CMPNN6 : Select CMPnN.6 (PB3.9).                                          */
  CMP_0_MODE_NMUX_CMPNN7               = 7,     /*!< CMPNN7 : Select CMPnN.7 (PB3.11).                                         */
  CMP_0_MODE_NMUX_CMPNN8               = 8,     /*!< CMPNN8 : Select CMPnN.8 (VDD).                                            */
  CMP_0_MODE_NMUX_CMPNN9               = 9,     /*!< CMPNN9 : Select CMPnN.9 (VREF).                                           */
  CMP_0_MODE_NMUX_CMPNN10              = 10,    /*!< CMPNN10 : Select CMPnN.10 (RESERVED).                                     */
  CMP_0_MODE_NMUX_CMPNN11              = 11,    /*!< CMPNN11 : Select CMPnN.11 (RESERVED).                                     */
  CMP_0_MODE_NMUX_CMPNN12              = 12,    /*!< CMPNN12 : Select CMPnN.12 (RESERVED).                                     */
  CMP_0_MODE_NMUX_CMPNN13              = 13,    /*!< CMPNN13 : Select CMPnN.13 (RESERVED).                                     */
  CMP_0_MODE_NMUX_CMPNN14              = 14,    /*!< CMPNN14 : Select CMPnN.14 (RESERVED).                                     */
  CMP_0_MODE_NMUX_CMPNN15              = 15,    /*!< CMPNN15 : Select CMPnN.15 (RESERVED).                                     */
} CMP_0_MODE_NMUX_Enum;

/* ================================================  CMP_0 MODE PMUX [4..7]  ================================================= */
typedef enum {                                  /*!< CMP_0_MODE_PMUX                                                           */
  CMP_0_MODE_PMUX_CMPNP0               = 0,     /*!< CMPNP0 : Select CMPnP.0 (PB2.11).                                         */
  CMP_0_MODE_PMUX_CMPNP1               = 1,     /*!< CMPNP1 : Select CMPnP.1 (PB2.13).                                         */
  CMP_0_MODE_PMUX_CMPNP2               = 2,     /*!< CMPNP2 : Select CMPnP.2 (PB3.0).                                          */
  CMP_0_MODE_PMUX_CMPNP3               = 3,     /*!< CMPNP3 : Select CMPnP.3 (PB3.2).                                          */
  CMP_0_MODE_PMUX_CMPNP4               = 4,     /*!< CMPNP4 : Select CMPnP.4 (PB3.4).                                          */
  CMP_0_MODE_PMUX_CMPNP5               = 5,     /*!< CMPNP5 : Select CMPnP.5 (PB3.6).                                          */
  CMP_0_MODE_PMUX_CMPNP6               = 6,     /*!< CMPNP6 : Select CMPnP.6 (PB3.8).                                          */
  CMP_0_MODE_PMUX_CMPNP7               = 7,     /*!< CMPNP7 : Select CMPnP.7 (PB3.10).                                         */
  CMP_0_MODE_PMUX_CMPNP8               = 8,     /*!< CMPNP8 : Select CMPnP.8 (Voltage at VREGIN / 4).                          */
  CMP_0_MODE_PMUX_CMPNP9               = 9,     /*!< CMPNP9 : Select CMPnP.9 (EXTVREG0 Current Sense).                         */
  CMP_0_MODE_PMUX_CMPNP10              = 10,    /*!< CMPNP10 : Select CMPnP.10 (1.8V Output of LDO).                           */
  CMP_0_MODE_PMUX_CMPNP11              = 11,    /*!< CMPNP11 : Select CMPnP.11 (VDDOSC Supply).                                */
  CMP_0_MODE_PMUX_CMPNP12              = 12,    /*!< CMPNP12 : Select CMPnP.12 (VREF).                                         */
  CMP_0_MODE_PMUX_CMPNP13              = 13,    /*!< CMPNP13 : Select CMPnP.13 (VIO).                                          */
  CMP_0_MODE_PMUX_CMPNP14              = 14,    /*!< CMPNP14 : Select CMPnP.14 (Voltage at VIOHD / 4).                         */
  CMP_0_MODE_PMUX_CMPNP15              = 15,    /*!< CMPNP15 : Select CMPnP.15 (RESERVED).                                     */
} CMP_0_MODE_PMUX_Enum;

/* ================================================  CMP_0 MODE INMUX [8..9]  ================================================ */
typedef enum {                                  /*!< CMP_0_MODE_INMUX                                                          */
  CMP_0_MODE_INMUX_DIRECT              = 0,     /*!< DIRECT : Connects the NMUX signal to CP- and the PMUX signal
                                                     to CP+.                                                                   */
  CMP_0_MODE_INMUX_CMPP_VSS            = 1,     /*!< CMPP_VSS : Connects VSS to CP- and the PMUX signal to CP+.                */
  CMP_0_MODE_INMUX_CMPP_DAC            = 2,     /*!< CMPP_DAC : Connects the NMUX signal to CP-, the PMUX signal
                                                     to the Comparator DAC voltage reference, and the DAC output
                                                     to CP+.                                                                   */
  CMP_0_MODE_INMUX_CMPN_DAC            = 3,     /*!< CMPN_DAC : Connects the PMUX signal to CP+, the NMUX signal
                                                     to the Comparator DAC voltage reference, and the DAC output
                                                     to CP-.                                                                   */
} CMP_0_MODE_INMUX_Enum;

/* ===============================================  CMP_0 MODE CMPMD [10..11]  =============================================== */
typedef enum {                                  /*!< CMP_0_MODE_CMPMD                                                          */
  CMP_0_MODE_CMPMD_MODE0               = 0,     /*!< MODE0 : Mode 0 (fastest response time, highest power consumption).        */
  CMP_0_MODE_CMPMD_MODE1               = 1,     /*!< MODE1 : Mode 1.                                                           */
  CMP_0_MODE_CMPMD_MODE2               = 2,     /*!< MODE2 : Mode 2.                                                           */
  CMP_0_MODE_CMPMD_MODE3               = 3,     /*!< MODE3 : Mode 3 (slowest response time, lowest power consumption).         */
} CMP_0_MODE_CMPMD_Enum;

/* ===============================================  CMP_0 MODE FIEN [13..13]  ================================================ */
typedef enum {                                  /*!< CMP_0_MODE_FIEN                                                           */
  CMP_0_MODE_FIEN_DISABLED             = 0,     /*!< DISABLED : Disable the comparator falling edge interrupt.                 */
  CMP_0_MODE_FIEN_ENABLED              = 1,     /*!< ENABLED : Enable the comparator falling edge interrupt.                   */
} CMP_0_MODE_FIEN_Enum;

/* ===============================================  CMP_0 MODE RIEN [14..14]  ================================================ */
typedef enum {                                  /*!< CMP_0_MODE_RIEN                                                           */
  CMP_0_MODE_RIEN_DISABLED             = 0,     /*!< DISABLED : Disable the comparator rising edge interrupt.                  */
  CMP_0_MODE_RIEN_ENABLED              = 1,     /*!< ENABLED : Enable the comparator rising edge interrupt.                    */
} CMP_0_MODE_RIEN_Enum;

/* ==============================================  CMP_0 MODE NWPUEN [22..22]  =============================================== */
typedef enum {                                  /*!< CMP_0_MODE_NWPUEN                                                         */
  CMP_0_MODE_NWPUEN_DISABLED           = 0,     /*!< DISABLED : Disable the negative input weak pull up.                       */
  CMP_0_MODE_NWPUEN_ENABLED            = 1,     /*!< ENABLED : Enable the negative input weak pull up.                         */
} CMP_0_MODE_NWPUEN_Enum;

/* ==============================================  CMP_0 MODE PWPUEN [23..23]  =============================================== */
typedef enum {                                  /*!< CMP_0_MODE_PWPUEN                                                         */
  CMP_0_MODE_PWPUEN_DISABLED           = 0,     /*!< DISABLED : Disable the positive input weak pull up.                       */
  CMP_0_MODE_PWPUEN_ENABLED            = 1,     /*!< ENABLED : Enable the positive input weak pull up.                         */
} CMP_0_MODE_PWPUEN_Enum;

/* ==============================================  CMP_0 MODE CMPHYN [24..25]  =============================================== */
typedef enum {                                  /*!< CMP_0_MODE_CMPHYN                                                         */
  CMP_0_MODE_CMPHYN_DISABLED           = 0,     /*!< DISABLED : Disable negative hysteresis.                                   */
  CMP_0_MODE_CMPHYN_NEG_5_MV           = 1,     /*!< NEG_5_MV : Set negative hysteresis to 5 mV.                               */
  CMP_0_MODE_CMPHYN_NEG_10_MV          = 2,     /*!< NEG_10_MV : Set negative hysteresis to 10 mV.                             */
  CMP_0_MODE_CMPHYN_NEG_20_MV          = 3,     /*!< NEG_20_MV : Set negative hysteresis to 20 mV.                             */
} CMP_0_MODE_CMPHYN_Enum;

/* ==============================================  CMP_0 MODE CMPHYP [26..27]  =============================================== */
typedef enum {                                  /*!< CMP_0_MODE_CMPHYP                                                         */
  CMP_0_MODE_CMPHYP_DISABLED           = 0,     /*!< DISABLED : Disable positive hysteresis.                                   */
  CMP_0_MODE_CMPHYP_POS_5_MV           = 1,     /*!< POS_5_MV : Set positive hysteresis to 5 mV.                               */
  CMP_0_MODE_CMPHYP_POS_10_MV          = 2,     /*!< POS_10_MV : Set positive hysteresis to 10 mV.                             */
  CMP_0_MODE_CMPHYP_POS_20_MV          = 3,     /*!< POS_20_MV : Set positive hysteresis to 20 mV.                             */
} CMP_0_MODE_CMPHYP_Enum;

/* ===============================================  CMP_0 MODE INVEN [30..30]  =============================================== */
typedef enum {                                  /*!< CMP_0_MODE_INVEN                                                          */
  CMP_0_MODE_INVEN_DISABLED            = 0,     /*!< DISABLED : Do not invert the comparator output.                           */
  CMP_0_MODE_INVEN_ENABLED             = 1,     /*!< ENABLED : Invert the comparator output.                                   */
} CMP_0_MODE_INVEN_Enum;



/* =========================================================================================================================== */
/* ================                                           CMP_1                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  CMP_1 CONTROL CMPFI [13..13]  ============================================== */
typedef enum {                                  /*!< CMP_1_CONTROL_CMPFI                                                       */
  CMP_1_CONTROL_CMPFI_NOT_SET          = 0,     /*!< NOT_SET : No comparator falling edge has occurred since this
                                                     flag was last cleared.                                                    */
  CMP_1_CONTROL_CMPFI_SET              = 1,     /*!< SET : A comparator falling edge occurred since last flag was
                                                     cleared.                                                                  */
} CMP_1_CONTROL_CMPFI_Enum;

/* =============================================  CMP_1 CONTROL CMPRI [14..14]  ============================================== */
typedef enum {                                  /*!< CMP_1_CONTROL_CMPRI                                                       */
  CMP_1_CONTROL_CMPRI_NOT_SET          = 0,     /*!< NOT_SET : No comparator rising edge has occurred since this
                                                     flag was last cleared.                                                    */
  CMP_1_CONTROL_CMPRI_SET              = 1,     /*!< SET : A comparator rising edge occurred since last flag was
                                                     cleared.                                                                  */
} CMP_1_CONTROL_CMPRI_Enum;

/* =============================================  CMP_1 CONTROL CMPOUT [30..30]  ============================================= */
typedef enum {                                  /*!< CMP_1_CONTROL_CMPOUT                                                      */
  CMP_1_CONTROL_CMPOUT_POS_LT_NEG      = 0,     /*!< POS_LT_NEG : Voltage on CP+ < CP-.                                        */
  CMP_1_CONTROL_CMPOUT_POS_GT_NEG      = 1,     /*!< POS_GT_NEG : Voltage on CP+ > CP-.                                        */
} CMP_1_CONTROL_CMPOUT_Enum;

/* =============================================  CMP_1 CONTROL CMPEN [31..31]  ============================================== */
typedef enum {                                  /*!< CMP_1_CONTROL_CMPEN                                                       */
  CMP_1_CONTROL_CMPEN_DISABLED         = 0,     /*!< DISABLED : Disable the comparator.                                        */
  CMP_1_CONTROL_CMPEN_ENABLED          = 1,     /*!< ENABLED : Enable the comparator.                                          */
} CMP_1_CONTROL_CMPEN_Enum;

/* =========================================================  MODE  ========================================================== */
/* ================================================  CMP_1 MODE NMUX [0..3]  ================================================= */
typedef enum {                                  /*!< CMP_1_MODE_NMUX                                                           */
  CMP_1_MODE_NMUX_CMPNN0               = 0,     /*!< CMPNN0 : Select CMPnN.0 (P2.12).                                          */
  CMP_1_MODE_NMUX_CMPNN1               = 1,     /*!< CMPNN1 : Select CMPnN.1 (PB2.14).                                         */
  CMP_1_MODE_NMUX_CMPNN2               = 2,     /*!< CMPNN2 : Select CMPnN.2 (PB3.1).                                          */
  CMP_1_MODE_NMUX_CMPNN3               = 3,     /*!< CMPNN3 : Select CMPnN.3 (PB3.3).                                          */
  CMP_1_MODE_NMUX_CMPNN4               = 4,     /*!< CMPNN4 : Select CMPnN.4 (PB3.5).                                          */
  CMP_1_MODE_NMUX_CMPNN5               = 5,     /*!< CMPNN5 : Select CMPnN.5 (PB3.7).                                          */
  CMP_1_MODE_NMUX_CMPNN6               = 6,     /*!< CMPNN6 : Select CMPnN.6 (PB3.9).                                          */
  CMP_1_MODE_NMUX_CMPNN7               = 7,     /*!< CMPNN7 : Select CMPnN.7 (PB3.11).                                         */
  CMP_1_MODE_NMUX_CMPNN8               = 8,     /*!< CMPNN8 : Select CMPnN.8 (VDD).                                            */
  CMP_1_MODE_NMUX_CMPNN9               = 9,     /*!< CMPNN9 : Select CMPnN.9 (VREF).                                           */
  CMP_1_MODE_NMUX_CMPNN10              = 10,    /*!< CMPNN10 : Select CMPnN.10 (RESERVED).                                     */
  CMP_1_MODE_NMUX_CMPNN11              = 11,    /*!< CMPNN11 : Select CMPnN.11 (RESERVED).                                     */
  CMP_1_MODE_NMUX_CMPNN12              = 12,    /*!< CMPNN12 : Select CMPnN.12 (RESERVED).                                     */
  CMP_1_MODE_NMUX_CMPNN13              = 13,    /*!< CMPNN13 : Select CMPnN.13 (RESERVED).                                     */
  CMP_1_MODE_NMUX_CMPNN14              = 14,    /*!< CMPNN14 : Select CMPnN.14 (RESERVED).                                     */
  CMP_1_MODE_NMUX_CMPNN15              = 15,    /*!< CMPNN15 : Select CMPnN.15 (RESERVED).                                     */
} CMP_1_MODE_NMUX_Enum;

/* ================================================  CMP_1 MODE PMUX [4..7]  ================================================= */
typedef enum {                                  /*!< CMP_1_MODE_PMUX                                                           */
  CMP_1_MODE_PMUX_CMPNP0               = 0,     /*!< CMPNP0 : Select CMPnP.0 (PB2.11).                                         */
  CMP_1_MODE_PMUX_CMPNP1               = 1,     /*!< CMPNP1 : Select CMPnP.1 (PB2.13).                                         */
  CMP_1_MODE_PMUX_CMPNP2               = 2,     /*!< CMPNP2 : Select CMPnP.2 (PB3.0).                                          */
  CMP_1_MODE_PMUX_CMPNP3               = 3,     /*!< CMPNP3 : Select CMPnP.3 (PB3.2).                                          */
  CMP_1_MODE_PMUX_CMPNP4               = 4,     /*!< CMPNP4 : Select CMPnP.4 (PB3.4).                                          */
  CMP_1_MODE_PMUX_CMPNP5               = 5,     /*!< CMPNP5 : Select CMPnP.5 (PB3.6).                                          */
  CMP_1_MODE_PMUX_CMPNP6               = 6,     /*!< CMPNP6 : Select CMPnP.6 (PB3.8).                                          */
  CMP_1_MODE_PMUX_CMPNP7               = 7,     /*!< CMPNP7 : Select CMPnP.7 (PB3.10).                                         */
  CMP_1_MODE_PMUX_CMPNP8               = 8,     /*!< CMPNP8 : Select CMPnP.8 (Voltage at VREGIN / 4).                          */
  CMP_1_MODE_PMUX_CMPNP9               = 9,     /*!< CMPNP9 : Select CMPnP.9 (EXTVREG0 Current Sense).                         */
  CMP_1_MODE_PMUX_CMPNP10              = 10,    /*!< CMPNP10 : Select CMPnP.10 (1.8V Output of LDO).                           */
  CMP_1_MODE_PMUX_CMPNP11              = 11,    /*!< CMPNP11 : Select CMPnP.11 (VDDOSC Supply).                                */
  CMP_1_MODE_PMUX_CMPNP12              = 12,    /*!< CMPNP12 : Select CMPnP.12 (VREF).                                         */
  CMP_1_MODE_PMUX_CMPNP13              = 13,    /*!< CMPNP13 : Select CMPnP.13 (VIO).                                          */
  CMP_1_MODE_PMUX_CMPNP14              = 14,    /*!< CMPNP14 : Select CMPnP.14 (Voltage at VIOHD / 4).                         */
  CMP_1_MODE_PMUX_CMPNP15              = 15,    /*!< CMPNP15 : Select CMPnP.15 (RESERVED).                                     */
} CMP_1_MODE_PMUX_Enum;

/* ================================================  CMP_1 MODE INMUX [8..9]  ================================================ */
typedef enum {                                  /*!< CMP_1_MODE_INMUX                                                          */
  CMP_1_MODE_INMUX_DIRECT              = 0,     /*!< DIRECT : Connects the NMUX signal to CP- and the PMUX signal
                                                     to CP+.                                                                   */
  CMP_1_MODE_INMUX_CMPP_VSS            = 1,     /*!< CMPP_VSS : Connects VSS to CP- and the PMUX signal to CP+.                */
  CMP_1_MODE_INMUX_CMPP_DAC            = 2,     /*!< CMPP_DAC : Connects the NMUX signal to CP-, the PMUX signal
                                                     to the Comparator DAC voltage reference, and the DAC output
                                                     to CP+.                                                                   */
  CMP_1_MODE_INMUX_CMPN_DAC            = 3,     /*!< CMPN_DAC : Connects the PMUX signal to CP+, the NMUX signal
                                                     to the Comparator DAC voltage reference, and the DAC output
                                                     to CP-.                                                                   */
} CMP_1_MODE_INMUX_Enum;

/* ===============================================  CMP_1 MODE CMPMD [10..11]  =============================================== */
typedef enum {                                  /*!< CMP_1_MODE_CMPMD                                                          */
  CMP_1_MODE_CMPMD_MODE0               = 0,     /*!< MODE0 : Mode 0 (fastest response time, highest power consumption).        */
  CMP_1_MODE_CMPMD_MODE1               = 1,     /*!< MODE1 : Mode 1.                                                           */
  CMP_1_MODE_CMPMD_MODE2               = 2,     /*!< MODE2 : Mode 2.                                                           */
  CMP_1_MODE_CMPMD_MODE3               = 3,     /*!< MODE3 : Mode 3 (slowest response time, lowest power consumption).         */
} CMP_1_MODE_CMPMD_Enum;

/* ===============================================  CMP_1 MODE FIEN [13..13]  ================================================ */
typedef enum {                                  /*!< CMP_1_MODE_FIEN                                                           */
  CMP_1_MODE_FIEN_DISABLED             = 0,     /*!< DISABLED : Disable the comparator falling edge interrupt.                 */
  CMP_1_MODE_FIEN_ENABLED              = 1,     /*!< ENABLED : Enable the comparator falling edge interrupt.                   */
} CMP_1_MODE_FIEN_Enum;

/* ===============================================  CMP_1 MODE RIEN [14..14]  ================================================ */
typedef enum {                                  /*!< CMP_1_MODE_RIEN                                                           */
  CMP_1_MODE_RIEN_DISABLED             = 0,     /*!< DISABLED : Disable the comparator rising edge interrupt.                  */
  CMP_1_MODE_RIEN_ENABLED              = 1,     /*!< ENABLED : Enable the comparator rising edge interrupt.                    */
} CMP_1_MODE_RIEN_Enum;

/* ==============================================  CMP_1 MODE NWPUEN [22..22]  =============================================== */
typedef enum {                                  /*!< CMP_1_MODE_NWPUEN                                                         */
  CMP_1_MODE_NWPUEN_DISABLED           = 0,     /*!< DISABLED : Disable the negative input weak pull up.                       */
  CMP_1_MODE_NWPUEN_ENABLED            = 1,     /*!< ENABLED : Enable the negative input weak pull up.                         */
} CMP_1_MODE_NWPUEN_Enum;

/* ==============================================  CMP_1 MODE PWPUEN [23..23]  =============================================== */
typedef enum {                                  /*!< CMP_1_MODE_PWPUEN                                                         */
  CMP_1_MODE_PWPUEN_DISABLED           = 0,     /*!< DISABLED : Disable the positive input weak pull up.                       */
  CMP_1_MODE_PWPUEN_ENABLED            = 1,     /*!< ENABLED : Enable the positive input weak pull up.                         */
} CMP_1_MODE_PWPUEN_Enum;

/* ==============================================  CMP_1 MODE CMPHYN [24..25]  =============================================== */
typedef enum {                                  /*!< CMP_1_MODE_CMPHYN                                                         */
  CMP_1_MODE_CMPHYN_DISABLED           = 0,     /*!< DISABLED : Disable negative hysteresis.                                   */
  CMP_1_MODE_CMPHYN_NEG_5_MV           = 1,     /*!< NEG_5_MV : Set negative hysteresis to 5 mV.                               */
  CMP_1_MODE_CMPHYN_NEG_10_MV          = 2,     /*!< NEG_10_MV : Set negative hysteresis to 10 mV.                             */
  CMP_1_MODE_CMPHYN_NEG_20_MV          = 3,     /*!< NEG_20_MV : Set negative hysteresis to 20 mV.                             */
} CMP_1_MODE_CMPHYN_Enum;

/* ==============================================  CMP_1 MODE CMPHYP [26..27]  =============================================== */
typedef enum {                                  /*!< CMP_1_MODE_CMPHYP                                                         */
  CMP_1_MODE_CMPHYP_DISABLED           = 0,     /*!< DISABLED : Disable positive hysteresis.                                   */
  CMP_1_MODE_CMPHYP_POS_5_MV           = 1,     /*!< POS_5_MV : Set positive hysteresis to 5 mV.                               */
  CMP_1_MODE_CMPHYP_POS_10_MV          = 2,     /*!< POS_10_MV : Set positive hysteresis to 10 mV.                             */
  CMP_1_MODE_CMPHYP_POS_20_MV          = 3,     /*!< POS_20_MV : Set positive hysteresis to 20 mV.                             */
} CMP_1_MODE_CMPHYP_Enum;

/* ===============================================  CMP_1 MODE INVEN [30..30]  =============================================== */
typedef enum {                                  /*!< CMP_1_MODE_INVEN                                                          */
  CMP_1_MODE_INVEN_DISABLED            = 0,     /*!< DISABLED : Do not invert the comparator output.                           */
  CMP_1_MODE_INVEN_ENABLED             = 1,     /*!< ENABLED : Invert the comparator output.                                   */
} CMP_1_MODE_INVEN_Enum;



/* =========================================================================================================================== */
/* ================                                         DMACTRL_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  STATUS  ========================================================= */
/* ===========================================  DMACTRL_0 STATUS DMAENSTS [0..0]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_STATUS_DMAENSTS                                                 */
  DMACTRL_0_STATUS_DMAENSTS_NOT_SET    = 0,     /*!< NOT_SET : DMA controller is disabled                                      */
  DMACTRL_0_STATUS_DMAENSTS_SET        = 1,     /*!< SET : DMA controller is enabled.                                          */
} DMACTRL_0_STATUS_DMAENSTS_Enum;

/* =============================================  DMACTRL_0 STATUS STATE [4..7]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_STATUS_STATE                                                    */
  DMACTRL_0_STATUS_STATE_IDLE          = 0,     /*!< IDLE : Idle.                                                              */
  DMACTRL_0_STATUS_STATE_READING_CHANNEL_CONFIG = 1,/*!< READING_CHANNEL_CONFIG : Reading channel controller data.             */
  DMACTRL_0_STATUS_STATE_READING_SOURCE_POINTER = 2,/*!< READING_SOURCE_POINTER : Reading source data end pointer.             */
  DMACTRL_0_STATUS_STATE_READING_DEST_POINTER = 3,/*!< READING_DEST_POINTER : Reading destination data end pointer.            */
  DMACTRL_0_STATUS_STATE_READING_SOURCE_DATA = 4,/*!< READING_SOURCE_DATA : Reading source data.                               */
  DMACTRL_0_STATUS_STATE_WRITING_DEST_DATA = 5, /*!< WRITING_DEST_DATA : Writing destination data.                             */
  DMACTRL_0_STATUS_STATE_WAITING_DMA_REQ_CLEAR = 6,/*!< WAITING_DMA_REQ_CLEAR : Waiting for a DMA request to clear.            */
  DMACTRL_0_STATUS_STATE_WRITING_CHANNEL_CONFIG = 7,/*!< WRITING_CHANNEL_CONFIG : Writing channel controller data.             */
  DMACTRL_0_STATUS_STATE_STALLED       = 8,     /*!< STALLED : Stalled.                                                        */
  DMACTRL_0_STATUS_STATE_DONE          = 9,     /*!< DONE : Done.                                                              */
  DMACTRL_0_STATUS_STATE_SCATTER_GATHER_TRANSITION = 10,/*!< SCATTER_GATHER_TRANSITION : Peripheral scatter-gather transition. */
} DMACTRL_0_STATUS_STATE_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  DMACTRL_0 CONFIG DMAEN [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CONFIG_DMAEN                                                    */
  DMACTRL_0_CONFIG_DMAEN_DISABLED      = 0,     /*!< DISABLED : Disable the DMA controller.                                    */
  DMACTRL_0_CONFIG_DMAEN_ENABLED       = 1,     /*!< ENABLED : Enable the DMA controller.                                      */
} DMACTRL_0_CONFIG_DMAEN_Enum;

/* ========================================================  BASEPTR  ======================================================== */
/* =======================================================  ABASEPTR  ======================================================== */
/* =======================================================  CHSTATUS  ======================================================== */
/* =============================================  DMACTRL_0 CHSTATUS CH0 [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH0                                                    */
  DMACTRL_0_CHSTATUS_CH0_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 0 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH0_WAITING       = 1,     /*!< WAITING : DMA Channel 0 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH0_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH1 [1..1]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH1                                                    */
  DMACTRL_0_CHSTATUS_CH1_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 1 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH1_WAITING       = 1,     /*!< WAITING : DMA Channel 1 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH1_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH2 [2..2]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH2                                                    */
  DMACTRL_0_CHSTATUS_CH2_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 2 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH2_WAITING       = 1,     /*!< WAITING : DMA Channel 2 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH2_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH3 [3..3]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH3                                                    */
  DMACTRL_0_CHSTATUS_CH3_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 3 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH3_WAITING       = 1,     /*!< WAITING : DMA Channel 3 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH3_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH4 [4..4]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH4                                                    */
  DMACTRL_0_CHSTATUS_CH4_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 4 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH4_WAITING       = 1,     /*!< WAITING : DMA Channel 4 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH4_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH5 [5..5]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH5                                                    */
  DMACTRL_0_CHSTATUS_CH5_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 5 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH5_WAITING       = 1,     /*!< WAITING : DMA Channel 5 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH5_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH6 [6..6]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH6                                                    */
  DMACTRL_0_CHSTATUS_CH6_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 6 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH6_WAITING       = 1,     /*!< WAITING : DMA Channel 6 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH6_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH7 [7..7]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH7                                                    */
  DMACTRL_0_CHSTATUS_CH7_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 7 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH7_WAITING       = 1,     /*!< WAITING : DMA Channel 7 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH7_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH8 [8..8]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH8                                                    */
  DMACTRL_0_CHSTATUS_CH8_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 8 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH8_WAITING       = 1,     /*!< WAITING : DMA Channel 8 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH8_Enum;

/* =============================================  DMACTRL_0 CHSTATUS CH9 [9..9]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH9                                                    */
  DMACTRL_0_CHSTATUS_CH9_NOT_WAITING   = 0,     /*!< NOT_WAITING : DMA Channel 9 is not waiting for a data request.            */
  DMACTRL_0_CHSTATUS_CH9_WAITING       = 1,     /*!< WAITING : DMA Channel 9 is waiting for a data request.                    */
} DMACTRL_0_CHSTATUS_CH9_Enum;

/* ===========================================  DMACTRL_0 CHSTATUS CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH10                                                   */
  DMACTRL_0_CHSTATUS_CH10_NOT_WAITING  = 0,     /*!< NOT_WAITING : DMA Channel 10 is not waiting for a data request.           */
  DMACTRL_0_CHSTATUS_CH10_WAITING      = 1,     /*!< WAITING : DMA Channel 10 is waiting for a data request.                   */
} DMACTRL_0_CHSTATUS_CH10_Enum;

/* ===========================================  DMACTRL_0 CHSTATUS CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH11                                                   */
  DMACTRL_0_CHSTATUS_CH11_NOT_WAITING  = 0,     /*!< NOT_WAITING : DMA Channel 11 is not waiting for a data request.           */
  DMACTRL_0_CHSTATUS_CH11_WAITING      = 1,     /*!< WAITING : DMA Channel 11 is waiting for a data request.                   */
} DMACTRL_0_CHSTATUS_CH11_Enum;

/* ===========================================  DMACTRL_0 CHSTATUS CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH12                                                   */
  DMACTRL_0_CHSTATUS_CH12_NOT_WAITING  = 0,     /*!< NOT_WAITING : DMA Channel 12 is not waiting for a data request.           */
  DMACTRL_0_CHSTATUS_CH12_WAITING      = 1,     /*!< WAITING : DMA Channel 12 is waiting for a data request.                   */
} DMACTRL_0_CHSTATUS_CH12_Enum;

/* ===========================================  DMACTRL_0 CHSTATUS CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH13                                                   */
  DMACTRL_0_CHSTATUS_CH13_NOT_WAITING  = 0,     /*!< NOT_WAITING : DMA Channel 13 is not waiting for a data request.           */
  DMACTRL_0_CHSTATUS_CH13_WAITING      = 1,     /*!< WAITING : DMA Channel 13 is waiting for a data request.                   */
} DMACTRL_0_CHSTATUS_CH13_Enum;

/* ===========================================  DMACTRL_0 CHSTATUS CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH14                                                   */
  DMACTRL_0_CHSTATUS_CH14_NOT_WAITING  = 0,     /*!< NOT_WAITING : DMA Channel 14 is not waiting for a data request.           */
  DMACTRL_0_CHSTATUS_CH14_WAITING      = 1,     /*!< WAITING : DMA Channel 14 is waiting for a data request.                   */
} DMACTRL_0_CHSTATUS_CH14_Enum;

/* ===========================================  DMACTRL_0 CHSTATUS CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSTATUS_CH15                                                   */
  DMACTRL_0_CHSTATUS_CH15_NOT_WAITING  = 0,     /*!< NOT_WAITING : DMA Channel 15 is not waiting for a data request.           */
  DMACTRL_0_CHSTATUS_CH15_WAITING      = 1,     /*!< WAITING : DMA Channel 15 is waiting for a data request.                   */
} DMACTRL_0_CHSTATUS_CH15_Enum;

/* ========================================================  CHSWRCN  ======================================================== */
/* =============================================  DMACTRL_0 CHSWRCN CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH0                                                     */
  DMACTRL_0_CHSWRCN_CH0_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 0 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH0_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 0 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH0_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH1                                                     */
  DMACTRL_0_CHSWRCN_CH1_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 1 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH1_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 1 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH1_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH2                                                     */
  DMACTRL_0_CHSWRCN_CH2_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 2 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH2_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 2 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH2_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH3                                                     */
  DMACTRL_0_CHSWRCN_CH3_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 3 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH3_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 3 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH3_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH4                                                     */
  DMACTRL_0_CHSWRCN_CH4_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 4 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH4_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 4 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH4_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH5                                                     */
  DMACTRL_0_CHSWRCN_CH5_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 5 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH5_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 5 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH5_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH6                                                     */
  DMACTRL_0_CHSWRCN_CH6_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 6 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH6_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 6 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH6_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH7                                                     */
  DMACTRL_0_CHSWRCN_CH7_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 7 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH7_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 7 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH7_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH8                                                     */
  DMACTRL_0_CHSWRCN_CH8_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 8 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH8_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 8 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH8_Enum;

/* =============================================  DMACTRL_0 CHSWRCN CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH9                                                     */
  DMACTRL_0_CHSWRCN_CH9_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 9 does not generate a software
                                                     data request.                                                             */
  DMACTRL_0_CHSWRCN_CH9_GENERATE_SW_REQ = 1,    /*!< GENERATE_SW_REQ : DMA Channel 9 generates a software data request.        */
} DMACTRL_0_CHSWRCN_CH9_Enum;

/* ============================================  DMACTRL_0 CHSWRCN CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH10                                                    */
  DMACTRL_0_CHSWRCN_CH10_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 10 does not generate a
                                                     software data request.                                                    */
  DMACTRL_0_CHSWRCN_CH10_GENERATE_SW_REQ = 1,   /*!< GENERATE_SW_REQ : DMA Channel 10 generates a software data request.       */
} DMACTRL_0_CHSWRCN_CH10_Enum;

/* ============================================  DMACTRL_0 CHSWRCN CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH11                                                    */
  DMACTRL_0_CHSWRCN_CH11_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 11 does not generate a
                                                     software data request.                                                    */
  DMACTRL_0_CHSWRCN_CH11_GENERATE_SW_REQ = 1,   /*!< GENERATE_SW_REQ : DMA Channel 11 generates a software data request.       */
} DMACTRL_0_CHSWRCN_CH11_Enum;

/* ============================================  DMACTRL_0 CHSWRCN CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH12                                                    */
  DMACTRL_0_CHSWRCN_CH12_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 12 does not generate a
                                                     software data request.                                                    */
  DMACTRL_0_CHSWRCN_CH12_GENERATE_SW_REQ = 1,   /*!< GENERATE_SW_REQ : DMA Channel 12 generates a software data request.       */
} DMACTRL_0_CHSWRCN_CH12_Enum;

/* ============================================  DMACTRL_0 CHSWRCN CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH13                                                    */
  DMACTRL_0_CHSWRCN_CH13_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 13 does not generate a
                                                     software data request.                                                    */
  DMACTRL_0_CHSWRCN_CH13_GENERATE_SW_REQ = 1,   /*!< GENERATE_SW_REQ : DMA Channel 13 generates a software data request.       */
} DMACTRL_0_CHSWRCN_CH13_Enum;

/* ============================================  DMACTRL_0 CHSWRCN CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH14                                                    */
  DMACTRL_0_CHSWRCN_CH14_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 14 does not generate a
                                                     software data request.                                                    */
  DMACTRL_0_CHSWRCN_CH14_GENERATE_SW_REQ = 1,   /*!< GENERATE_SW_REQ : DMA Channel 14 generates a software data request.       */
} DMACTRL_0_CHSWRCN_CH14_Enum;

/* ============================================  DMACTRL_0 CHSWRCN CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHSWRCN_CH15                                                    */
  DMACTRL_0_CHSWRCN_CH15_DO_NOT_GENERATE_SW_REQ = 0,/*!< DO_NOT_GENERATE_SW_REQ : DMA Channel 15 does not generate a
                                                     software data request.                                                    */
  DMACTRL_0_CHSWRCN_CH15_GENERATE_SW_REQ = 1,   /*!< GENERATE_SW_REQ : DMA Channel 15 generates a software data request.       */
} DMACTRL_0_CHSWRCN_CH15_Enum;

/* =======================================================  CHREQMSET  ======================================================= */
/* ============================================  DMACTRL_0 CHREQMSET CH0 [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH0                                                   */
  DMACTRL_0_CHREQMSET_CH0_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 0 peripheral data requests enabled.
                                                     1: DMA Channel 0 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     0 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH0_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH1 [1..1]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH1                                                   */
  DMACTRL_0_CHREQMSET_CH1_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 1 peripheral data requests enabled.
                                                     1: DMA Channel 1 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     1 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH1_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH2 [2..2]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH2                                                   */
  DMACTRL_0_CHREQMSET_CH2_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 2 peripheral data requests enabled.
                                                     1: DMA Channel 2 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     2 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH2_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH3 [3..3]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH3                                                   */
  DMACTRL_0_CHREQMSET_CH3_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 3 peripheral data requests enabled.
                                                     1: DMA Channel 3 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     3 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH3_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH4 [4..4]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH4                                                   */
  DMACTRL_0_CHREQMSET_CH4_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 4 peripheral data requests enabled.
                                                     1: DMA Channel 4 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     4 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH4_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH5 [5..5]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH5                                                   */
  DMACTRL_0_CHREQMSET_CH5_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 5 peripheral data requests enabled.
                                                     1: DMA Channel 5 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     5 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH5_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH6 [6..6]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH6                                                   */
  DMACTRL_0_CHREQMSET_CH6_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 6 peripheral data requests enabled.
                                                     1: DMA Channel 6 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     6 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH6_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH7 [7..7]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH7                                                   */
  DMACTRL_0_CHREQMSET_CH7_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 7 peripheral data requests enabled.
                                                     1: DMA Channel 7 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     7 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH7_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH8 [8..8]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH8                                                   */
  DMACTRL_0_CHREQMSET_CH8_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 8 peripheral data requests enabled.
                                                     1: DMA Channel 8 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     8 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH8_Enum;

/* ============================================  DMACTRL_0 CHREQMSET CH9 [9..9]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH9                                                   */
  DMACTRL_0_CHREQMSET_CH9_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 9 peripheral data requests enabled.
                                                     1: DMA Channel 9 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     9 peripheral data requests.                                               */
} DMACTRL_0_CHREQMSET_CH9_Enum;

/* ===========================================  DMACTRL_0 CHREQMSET CH10 [10..10]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH10                                                  */
  DMACTRL_0_CHREQMSET_CH10_ENABLED     = 1,     /*!< ENABLED : Read: 0: DMA Channel 10 peripheral data requests enabled.
                                                     1: DMA Channel 10 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     10 peripheral data requests.                                              */
} DMACTRL_0_CHREQMSET_CH10_Enum;

/* ===========================================  DMACTRL_0 CHREQMSET CH11 [11..11]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH11                                                  */
  DMACTRL_0_CHREQMSET_CH11_ENABLED     = 1,     /*!< ENABLED : Read: 0: DMA Channel 11 peripheral data requests enabled.
                                                     1: DMA Channel 11 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     11 peripheral data requests.                                              */
} DMACTRL_0_CHREQMSET_CH11_Enum;

/* ===========================================  DMACTRL_0 CHREQMSET CH12 [12..12]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH12                                                  */
  DMACTRL_0_CHREQMSET_CH12_ENABLED     = 1,     /*!< ENABLED : Read: 0: DMA Channel 12 peripheral data requests enabled.
                                                     1: DMA Channel 12 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     12 peripheral data requests.                                              */
} DMACTRL_0_CHREQMSET_CH12_Enum;

/* ===========================================  DMACTRL_0 CHREQMSET CH13 [13..13]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH13                                                  */
  DMACTRL_0_CHREQMSET_CH13_ENABLED     = 1,     /*!< ENABLED : Read: 0: DMA Channel 13 peripheral data requests enabled.
                                                     1: DMA Channel 13 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     13 peripheral data requests.                                              */
} DMACTRL_0_CHREQMSET_CH13_Enum;

/* ===========================================  DMACTRL_0 CHREQMSET CH14 [14..14]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH14                                                  */
  DMACTRL_0_CHREQMSET_CH14_ENABLED     = 1,     /*!< ENABLED : Read: 0: DMA Channel 14 peripheral data requests enabled.
                                                     1: DMA Channel 14 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     14 peripheral data requests.                                              */
} DMACTRL_0_CHREQMSET_CH14_Enum;

/* ===========================================  DMACTRL_0 CHREQMSET CH15 [15..15]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMSET_CH15                                                  */
  DMACTRL_0_CHREQMSET_CH15_ENABLED     = 1,     /*!< ENABLED : Read: 0: DMA Channel 15 peripheral data requests enabled.
                                                     1: DMA Channel 15 peripheral data requests disabled. Write:
                                                     0: No effect (use CHREQMCLR to clear). 1: Disable DMA Channel
                                                     15 peripheral data requests.                                              */
} DMACTRL_0_CHREQMSET_CH15_Enum;

/* =======================================================  CHREQMCLR  ======================================================= */
/* ============================================  DMACTRL_0 CHREQMCLR CH0 [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH0                                                   */
  DMACTRL_0_CHREQMCLR_CH0_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 0 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH0_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH1 [1..1]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH1                                                   */
  DMACTRL_0_CHREQMCLR_CH1_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 1 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH1_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH2 [2..2]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH2                                                   */
  DMACTRL_0_CHREQMCLR_CH2_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 2 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH2_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH3 [3..3]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH3                                                   */
  DMACTRL_0_CHREQMCLR_CH3_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 3 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH3_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH4 [4..4]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH4                                                   */
  DMACTRL_0_CHREQMCLR_CH4_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 4 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH4_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH5 [5..5]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH5                                                   */
  DMACTRL_0_CHREQMCLR_CH5_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 5 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH5_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH6 [6..6]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH6                                                   */
  DMACTRL_0_CHREQMCLR_CH6_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 6 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH6_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH7 [7..7]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH7                                                   */
  DMACTRL_0_CHREQMCLR_CH7_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 7 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH7_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH8 [8..8]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH8                                                   */
  DMACTRL_0_CHREQMCLR_CH8_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 8 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH8_Enum;

/* ============================================  DMACTRL_0 CHREQMCLR CH9 [9..9]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH9                                                   */
  DMACTRL_0_CHREQMCLR_CH9_DISABLED     = 1,     /*!< DISABLED : Enable DMA Channel 9 peripheral data requests.                 */
} DMACTRL_0_CHREQMCLR_CH9_Enum;

/* ===========================================  DMACTRL_0 CHREQMCLR CH10 [10..10]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH10                                                  */
  DMACTRL_0_CHREQMCLR_CH10_DISABLED    = 1,     /*!< DISABLED : Enable DMA Channel 10 peripheral data requests.                */
} DMACTRL_0_CHREQMCLR_CH10_Enum;

/* ===========================================  DMACTRL_0 CHREQMCLR CH11 [11..11]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH11                                                  */
  DMACTRL_0_CHREQMCLR_CH11_DISABLED    = 1,     /*!< DISABLED : Enable DMA Channel 11 peripheral data requests.                */
} DMACTRL_0_CHREQMCLR_CH11_Enum;

/* ===========================================  DMACTRL_0 CHREQMCLR CH12 [12..12]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH12                                                  */
  DMACTRL_0_CHREQMCLR_CH12_DISABLED    = 1,     /*!< DISABLED : Enable DMA Channel 12 peripheral data requests.                */
} DMACTRL_0_CHREQMCLR_CH12_Enum;

/* ===========================================  DMACTRL_0 CHREQMCLR CH13 [13..13]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH13                                                  */
  DMACTRL_0_CHREQMCLR_CH13_DISABLED    = 1,     /*!< DISABLED : Enable DMA Channel 13 peripheral data requests.                */
} DMACTRL_0_CHREQMCLR_CH13_Enum;

/* ===========================================  DMACTRL_0 CHREQMCLR CH14 [14..14]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH14                                                  */
  DMACTRL_0_CHREQMCLR_CH14_DISABLED    = 1,     /*!< DISABLED : Enable DMA Channel 14 peripheral data requests.                */
} DMACTRL_0_CHREQMCLR_CH14_Enum;

/* ===========================================  DMACTRL_0 CHREQMCLR CH15 [15..15]  =========================================== */
typedef enum {                                  /*!< DMACTRL_0_CHREQMCLR_CH15                                                  */
  DMACTRL_0_CHREQMCLR_CH15_DISABLED    = 1,     /*!< DISABLED : Enable DMA Channel 15 peripheral data requests.                */
} DMACTRL_0_CHREQMCLR_CH15_Enum;

/* ========================================================  CHENSET  ======================================================== */
/* =============================================  DMACTRL_0 CHENSET CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH0                                                     */
  DMACTRL_0_CHENSET_CH0_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 0 disabled. 1: DMA Channel 0
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 0.                                                     */
} DMACTRL_0_CHENSET_CH0_Enum;

/* =============================================  DMACTRL_0 CHENSET CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH1                                                     */
  DMACTRL_0_CHENSET_CH1_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 1 disabled. 1: DMA Channel 1
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 1.                                                     */
} DMACTRL_0_CHENSET_CH1_Enum;

/* =============================================  DMACTRL_0 CHENSET CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH2                                                     */
  DMACTRL_0_CHENSET_CH2_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 2 disabled. 1: DMA Channel 2
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 2.                                                     */
} DMACTRL_0_CHENSET_CH2_Enum;

/* =============================================  DMACTRL_0 CHENSET CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH3                                                     */
  DMACTRL_0_CHENSET_CH3_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 3 disabled. 1: DMA Channel 3
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 3.                                                     */
} DMACTRL_0_CHENSET_CH3_Enum;

/* =============================================  DMACTRL_0 CHENSET CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH4                                                     */
  DMACTRL_0_CHENSET_CH4_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 4 disabled. 1: DMA Channel 4
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 4.                                                     */
} DMACTRL_0_CHENSET_CH4_Enum;

/* =============================================  DMACTRL_0 CHENSET CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH5                                                     */
  DMACTRL_0_CHENSET_CH5_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 5 disabled. 1: DMA Channel 5
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 5.                                                     */
} DMACTRL_0_CHENSET_CH5_Enum;

/* =============================================  DMACTRL_0 CHENSET CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH6                                                     */
  DMACTRL_0_CHENSET_CH6_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 6 disabled. 1: DMA Channel 6
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 6.                                                     */
} DMACTRL_0_CHENSET_CH6_Enum;

/* =============================================  DMACTRL_0 CHENSET CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH7                                                     */
  DMACTRL_0_CHENSET_CH7_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 7 disabled. 1: DMA Channel 7
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 7.                                                     */
} DMACTRL_0_CHENSET_CH7_Enum;

/* =============================================  DMACTRL_0 CHENSET CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH8                                                     */
  DMACTRL_0_CHENSET_CH8_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 8 disabled. 1: DMA Channel 8
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 8.                                                     */
} DMACTRL_0_CHENSET_CH8_Enum;

/* =============================================  DMACTRL_0 CHENSET CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH9                                                     */
  DMACTRL_0_CHENSET_CH9_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 9 disabled. 1: DMA Channel 9
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 9.                                                     */
} DMACTRL_0_CHENSET_CH9_Enum;

/* ============================================  DMACTRL_0 CHENSET CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH10                                                    */
  DMACTRL_0_CHENSET_CH10_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 10 disabled. 1: DMA Channel 10
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 10.                                                    */
} DMACTRL_0_CHENSET_CH10_Enum;

/* ============================================  DMACTRL_0 CHENSET CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH11                                                    */
  DMACTRL_0_CHENSET_CH11_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 11 disabled. 1: DMA Channel 11
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 11.                                                    */
} DMACTRL_0_CHENSET_CH11_Enum;

/* ============================================  DMACTRL_0 CHENSET CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH12                                                    */
  DMACTRL_0_CHENSET_CH12_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 12 disabled. 1: DMA Channel 12
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 12.                                                    */
} DMACTRL_0_CHENSET_CH12_Enum;

/* ============================================  DMACTRL_0 CHENSET CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH13                                                    */
  DMACTRL_0_CHENSET_CH13_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 13 disabled. 1: DMA Channel 13
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 13.                                                    */
} DMACTRL_0_CHENSET_CH13_Enum;

/* ============================================  DMACTRL_0 CHENSET CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH14                                                    */
  DMACTRL_0_CHENSET_CH14_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 14 disabled. 1: DMA Channel 14
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 14.                                                    */
} DMACTRL_0_CHENSET_CH14_Enum;

/* ============================================  DMACTRL_0 CHENSET CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENSET_CH15                                                    */
  DMACTRL_0_CHENSET_CH15_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 15 disabled. 1: DMA Channel 15
                                                     enabled. Write: 0: No effect (use CHENCLR to clear). 1:
                                                     Enable DMA Channel 15.                                                    */
} DMACTRL_0_CHENSET_CH15_Enum;

/* ========================================================  CHENCLR  ======================================================== */
/* =============================================  DMACTRL_0 CHENCLR CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH0                                                     */
  DMACTRL_0_CHENCLR_CH0_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 0.                                         */
} DMACTRL_0_CHENCLR_CH0_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH1                                                     */
  DMACTRL_0_CHENCLR_CH1_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 1.                                         */
} DMACTRL_0_CHENCLR_CH1_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH2                                                     */
  DMACTRL_0_CHENCLR_CH2_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 2.                                         */
} DMACTRL_0_CHENCLR_CH2_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH3                                                     */
  DMACTRL_0_CHENCLR_CH3_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 3.                                         */
} DMACTRL_0_CHENCLR_CH3_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH4                                                     */
  DMACTRL_0_CHENCLR_CH4_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 4.                                         */
} DMACTRL_0_CHENCLR_CH4_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH5                                                     */
  DMACTRL_0_CHENCLR_CH5_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 5.                                         */
} DMACTRL_0_CHENCLR_CH5_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH6                                                     */
  DMACTRL_0_CHENCLR_CH6_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 6.                                         */
} DMACTRL_0_CHENCLR_CH6_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH7                                                     */
  DMACTRL_0_CHENCLR_CH7_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 7.                                         */
} DMACTRL_0_CHENCLR_CH7_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH8                                                     */
  DMACTRL_0_CHENCLR_CH8_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 8.                                         */
} DMACTRL_0_CHENCLR_CH8_Enum;

/* =============================================  DMACTRL_0 CHENCLR CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH9                                                     */
  DMACTRL_0_CHENCLR_CH9_DISABLED       = 1,     /*!< DISABLED : Disable DMA Channel 9.                                         */
} DMACTRL_0_CHENCLR_CH9_Enum;

/* ============================================  DMACTRL_0 CHENCLR CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH10                                                    */
  DMACTRL_0_CHENCLR_CH10_DISABLED      = 1,     /*!< DISABLED : Disable DMA Channel 10.                                        */
} DMACTRL_0_CHENCLR_CH10_Enum;

/* ============================================  DMACTRL_0 CHENCLR CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH11                                                    */
  DMACTRL_0_CHENCLR_CH11_DISABLED      = 1,     /*!< DISABLED : Disable DMA Channel 11.                                        */
} DMACTRL_0_CHENCLR_CH11_Enum;

/* ============================================  DMACTRL_0 CHENCLR CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH12                                                    */
  DMACTRL_0_CHENCLR_CH12_DISABLED      = 1,     /*!< DISABLED : Disable DMA Channel 12.                                        */
} DMACTRL_0_CHENCLR_CH12_Enum;

/* ============================================  DMACTRL_0 CHENCLR CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH13                                                    */
  DMACTRL_0_CHENCLR_CH13_DISABLED      = 1,     /*!< DISABLED : Disable DMA Channel 13.                                        */
} DMACTRL_0_CHENCLR_CH13_Enum;

/* ============================================  DMACTRL_0 CHENCLR CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH14                                                    */
  DMACTRL_0_CHENCLR_CH14_DISABLED      = 1,     /*!< DISABLED : Disable DMA Channel 14.                                        */
} DMACTRL_0_CHENCLR_CH14_Enum;

/* ============================================  DMACTRL_0 CHENCLR CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHENCLR_CH15                                                    */
  DMACTRL_0_CHENCLR_CH15_DISABLED      = 1,     /*!< DISABLED : Disable DMA Channel 15.                                        */
} DMACTRL_0_CHENCLR_CH15_Enum;

/* =======================================================  CHALTSET  ======================================================== */
/* =============================================  DMACTRL_0 CHALTSET CH0 [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH0                                                    */
  DMACTRL_0_CHALTSET_CH0_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 0 is using primary data structure.
                                                     1: DMA Channel 0 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 0.                                         */
} DMACTRL_0_CHALTSET_CH0_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH1 [1..1]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH1                                                    */
  DMACTRL_0_CHALTSET_CH1_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 1 is using primary data structure.
                                                     1: DMA Channel 1 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 1.                                         */
} DMACTRL_0_CHALTSET_CH1_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH2 [2..2]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH2                                                    */
  DMACTRL_0_CHALTSET_CH2_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 2 is using primary data structure.
                                                     1: DMA Channel 2 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 2.                                         */
} DMACTRL_0_CHALTSET_CH2_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH3 [3..3]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH3                                                    */
  DMACTRL_0_CHALTSET_CH3_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 3 is using primary data structure.
                                                     1: DMA Channel 3 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 3.                                         */
} DMACTRL_0_CHALTSET_CH3_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH4 [4..4]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH4                                                    */
  DMACTRL_0_CHALTSET_CH4_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 4 is using primary data structure.
                                                     1: DMA Channel 4 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 4.                                         */
} DMACTRL_0_CHALTSET_CH4_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH5 [5..5]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH5                                                    */
  DMACTRL_0_CHALTSET_CH5_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 5 is using primary data structure.
                                                     1: DMA Channel 5 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 5.                                         */
} DMACTRL_0_CHALTSET_CH5_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH6 [6..6]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH6                                                    */
  DMACTRL_0_CHALTSET_CH6_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 6 is using primary data structure.
                                                     1: DMA Channel 6 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 6.                                         */
} DMACTRL_0_CHALTSET_CH6_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH7 [7..7]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH7                                                    */
  DMACTRL_0_CHALTSET_CH7_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 7 is using primary data structure.
                                                     1: DMA Channel 7 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 7.                                         */
} DMACTRL_0_CHALTSET_CH7_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH8 [8..8]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH8                                                    */
  DMACTRL_0_CHALTSET_CH8_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 8 is using primary data structure.
                                                     1: DMA Channel 8 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 8.                                         */
} DMACTRL_0_CHALTSET_CH8_Enum;

/* =============================================  DMACTRL_0 CHALTSET CH9 [9..9]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH9                                                    */
  DMACTRL_0_CHALTSET_CH9_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 9 is using primary data structure.
                                                     1: DMA Channel 9 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 9.                                         */
} DMACTRL_0_CHALTSET_CH9_Enum;

/* ===========================================  DMACTRL_0 CHALTSET CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH10                                                   */
  DMACTRL_0_CHALTSET_CH10_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 10 is using primary data structure.
                                                     1: DMA Channel 10 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 10.                                        */
} DMACTRL_0_CHALTSET_CH10_Enum;

/* ===========================================  DMACTRL_0 CHALTSET CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH11                                                   */
  DMACTRL_0_CHALTSET_CH11_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 11 is using primary data structure.
                                                     1: DMA Channel 11 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 11.                                        */
} DMACTRL_0_CHALTSET_CH11_Enum;

/* ===========================================  DMACTRL_0 CHALTSET CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH12                                                   */
  DMACTRL_0_CHALTSET_CH12_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 12 is using primary data structure.
                                                     1: DMA Channel 12 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 12.                                        */
} DMACTRL_0_CHALTSET_CH12_Enum;

/* ===========================================  DMACTRL_0 CHALTSET CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH13                                                   */
  DMACTRL_0_CHALTSET_CH13_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 13 is using primary data structure.
                                                     1: DMA Channel 13 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 13.                                        */
} DMACTRL_0_CHALTSET_CH13_Enum;

/* ===========================================  DMACTRL_0 CHALTSET CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH14                                                   */
  DMACTRL_0_CHALTSET_CH14_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 14 is using primary data structure.
                                                     1: DMA Channel 14 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 14.                                        */
} DMACTRL_0_CHALTSET_CH14_Enum;

/* ===========================================  DMACTRL_0 CHALTSET CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTSET_CH15                                                   */
  DMACTRL_0_CHALTSET_CH15_ENABLED      = 1,     /*!< ENABLED : Read: 0: DMA Channel 15 is using primary data structure.
                                                     1: DMA Channel 15 is using alternate data structure. Write:
                                                     0: No effect (use CHALTCLR to clear). 1: Use the alternate
                                                     data structure for DMA Channel 15.                                        */
} DMACTRL_0_CHALTSET_CH15_Enum;

/* =======================================================  CHALTCLR  ======================================================== */
/* =============================================  DMACTRL_0 CHALTCLR CH0 [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH0                                                    */
  DMACTRL_0_CHALTCLR_CH0_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 0.              */
} DMACTRL_0_CHALTCLR_CH0_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH1 [1..1]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH1                                                    */
  DMACTRL_0_CHALTCLR_CH1_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 1.              */
} DMACTRL_0_CHALTCLR_CH1_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH2 [2..2]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH2                                                    */
  DMACTRL_0_CHALTCLR_CH2_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 2.              */
} DMACTRL_0_CHALTCLR_CH2_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH3 [3..3]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH3                                                    */
  DMACTRL_0_CHALTCLR_CH3_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 3.              */
} DMACTRL_0_CHALTCLR_CH3_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH4 [4..4]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH4                                                    */
  DMACTRL_0_CHALTCLR_CH4_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 4.              */
} DMACTRL_0_CHALTCLR_CH4_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH5 [5..5]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH5                                                    */
  DMACTRL_0_CHALTCLR_CH5_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 5.              */
} DMACTRL_0_CHALTCLR_CH5_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH6 [6..6]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH6                                                    */
  DMACTRL_0_CHALTCLR_CH6_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 6.              */
} DMACTRL_0_CHALTCLR_CH6_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH7 [7..7]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH7                                                    */
  DMACTRL_0_CHALTCLR_CH7_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 7.              */
} DMACTRL_0_CHALTCLR_CH7_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH8 [8..8]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH8                                                    */
  DMACTRL_0_CHALTCLR_CH8_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 8.              */
} DMACTRL_0_CHALTCLR_CH8_Enum;

/* =============================================  DMACTRL_0 CHALTCLR CH9 [9..9]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH9                                                    */
  DMACTRL_0_CHALTCLR_CH9_DISABLED      = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 9.              */
} DMACTRL_0_CHALTCLR_CH9_Enum;

/* ===========================================  DMACTRL_0 CHALTCLR CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH10                                                   */
  DMACTRL_0_CHALTCLR_CH10_DISABLED     = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 10.             */
} DMACTRL_0_CHALTCLR_CH10_Enum;

/* ===========================================  DMACTRL_0 CHALTCLR CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH11                                                   */
  DMACTRL_0_CHALTCLR_CH11_DISABLED     = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 11.             */
} DMACTRL_0_CHALTCLR_CH11_Enum;

/* ===========================================  DMACTRL_0 CHALTCLR CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH12                                                   */
  DMACTRL_0_CHALTCLR_CH12_DISABLED     = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 12.             */
} DMACTRL_0_CHALTCLR_CH12_Enum;

/* ===========================================  DMACTRL_0 CHALTCLR CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH13                                                   */
  DMACTRL_0_CHALTCLR_CH13_DISABLED     = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 13.             */
} DMACTRL_0_CHALTCLR_CH13_Enum;

/* ===========================================  DMACTRL_0 CHALTCLR CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH14                                                   */
  DMACTRL_0_CHALTCLR_CH14_DISABLED     = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 14.             */
} DMACTRL_0_CHALTCLR_CH14_Enum;

/* ===========================================  DMACTRL_0 CHALTCLR CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHALTCLR_CH15                                                   */
  DMACTRL_0_CHALTCLR_CH15_DISABLED     = 1,     /*!< DISABLED : Use the primary data structure for DMA Channel 15.             */
} DMACTRL_0_CHALTCLR_CH15_Enum;

/* ========================================================  CHHPSET  ======================================================== */
/* =============================================  DMACTRL_0 CHHPSET CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH0                                                     */
  DMACTRL_0_CHHPSET_CH0_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 0 is using the default priority
                                                     level. 1: DMA Channel 0 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 0.                                    */
} DMACTRL_0_CHHPSET_CH0_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH1                                                     */
  DMACTRL_0_CHHPSET_CH1_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 1 is using the default priority
                                                     level. 1: DMA Channel 1 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 1.                                    */
} DMACTRL_0_CHHPSET_CH1_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH2                                                     */
  DMACTRL_0_CHHPSET_CH2_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 2 is using the default priority
                                                     level. 1: DMA Channel 2 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 2.                                    */
} DMACTRL_0_CHHPSET_CH2_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH3                                                     */
  DMACTRL_0_CHHPSET_CH3_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 3 is using the default priority
                                                     level. 1: DMA Channel 3 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 3.                                    */
} DMACTRL_0_CHHPSET_CH3_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH4                                                     */
  DMACTRL_0_CHHPSET_CH4_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 4 is using the default priority
                                                     level. 1: DMA Channel 4 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 4.                                    */
} DMACTRL_0_CHHPSET_CH4_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH5                                                     */
  DMACTRL_0_CHHPSET_CH5_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 5 is using the default priority
                                                     level. 1: DMA Channel 5 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 5.                                    */
} DMACTRL_0_CHHPSET_CH5_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH6                                                     */
  DMACTRL_0_CHHPSET_CH6_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 6 is using the default priority
                                                     level. 1: DMA Channel 6 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 6.                                    */
} DMACTRL_0_CHHPSET_CH6_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH7                                                     */
  DMACTRL_0_CHHPSET_CH7_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 7 is using the default priority
                                                     level. 1: DMA Channel 7 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 7.                                    */
} DMACTRL_0_CHHPSET_CH7_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH8                                                     */
  DMACTRL_0_CHHPSET_CH8_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 8 is using the default priority
                                                     level. 1: DMA Channel 8 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 8.                                    */
} DMACTRL_0_CHHPSET_CH8_Enum;

/* =============================================  DMACTRL_0 CHHPSET CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH9                                                     */
  DMACTRL_0_CHHPSET_CH9_ENABLED        = 1,     /*!< ENABLED : Read: 0: DMA Channel 9 is using the default priority
                                                     level. 1: DMA Channel 9 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 9.                                    */
} DMACTRL_0_CHHPSET_CH9_Enum;

/* ============================================  DMACTRL_0 CHHPSET CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH10                                                    */
  DMACTRL_0_CHHPSET_CH10_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 10 is using the default priority
                                                     level. 1: DMA Channel 10 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 10.                                   */
} DMACTRL_0_CHHPSET_CH10_Enum;

/* ============================================  DMACTRL_0 CHHPSET CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH11                                                    */
  DMACTRL_0_CHHPSET_CH11_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 11 is using the default priority
                                                     level. 1: DMA Channel 11 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 11.                                   */
} DMACTRL_0_CHHPSET_CH11_Enum;

/* ============================================  DMACTRL_0 CHHPSET CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH12                                                    */
  DMACTRL_0_CHHPSET_CH12_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 12 is using the default priority
                                                     level. 1: DMA Channel 12 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 12.                                   */
} DMACTRL_0_CHHPSET_CH12_Enum;

/* ============================================  DMACTRL_0 CHHPSET CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH13                                                    */
  DMACTRL_0_CHHPSET_CH13_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 13 is using the default priority
                                                     level. 1: DMA Channel 13 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 13.                                   */
} DMACTRL_0_CHHPSET_CH13_Enum;

/* ============================================  DMACTRL_0 CHHPSET CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH14                                                    */
  DMACTRL_0_CHHPSET_CH14_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 14 is using the default priority
                                                     level. 1: DMA Channel 14 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 14.                                   */
} DMACTRL_0_CHHPSET_CH14_Enum;

/* ============================================  DMACTRL_0 CHHPSET CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPSET_CH15                                                    */
  DMACTRL_0_CHHPSET_CH15_ENABLED       = 1,     /*!< ENABLED : Read: 0: DMA Channel 15 is using the default priority
                                                     level. 1: DMA Channel 15 is using the high priority level.
                                                     Write: 0: No effect (use CHHPCLR to clear). 1: Use the
                                                     high priority level for DMA Channel 15.                                   */
} DMACTRL_0_CHHPSET_CH15_Enum;

/* ========================================================  CHHPCLR  ======================================================== */
/* =============================================  DMACTRL_0 CHHPCLR CH0 [0..0]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH0                                                     */
  DMACTRL_0_CHHPCLR_CH0_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 0.                  */
} DMACTRL_0_CHHPCLR_CH0_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH1 [1..1]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH1                                                     */
  DMACTRL_0_CHHPCLR_CH1_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 1.                  */
} DMACTRL_0_CHHPCLR_CH1_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH2 [2..2]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH2                                                     */
  DMACTRL_0_CHHPCLR_CH2_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 2.                  */
} DMACTRL_0_CHHPCLR_CH2_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH3 [3..3]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH3                                                     */
  DMACTRL_0_CHHPCLR_CH3_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 3.                  */
} DMACTRL_0_CHHPCLR_CH3_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH4 [4..4]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH4                                                     */
  DMACTRL_0_CHHPCLR_CH4_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 4.                  */
} DMACTRL_0_CHHPCLR_CH4_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH5 [5..5]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH5                                                     */
  DMACTRL_0_CHHPCLR_CH5_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 5.                  */
} DMACTRL_0_CHHPCLR_CH5_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH6 [6..6]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH6                                                     */
  DMACTRL_0_CHHPCLR_CH6_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 6.                  */
} DMACTRL_0_CHHPCLR_CH6_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH7 [7..7]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH7                                                     */
  DMACTRL_0_CHHPCLR_CH7_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 7.                  */
} DMACTRL_0_CHHPCLR_CH7_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH8 [8..8]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH8                                                     */
  DMACTRL_0_CHHPCLR_CH8_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 8.                  */
} DMACTRL_0_CHHPCLR_CH8_Enum;

/* =============================================  DMACTRL_0 CHHPCLR CH9 [9..9]  ============================================== */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH9                                                     */
  DMACTRL_0_CHHPCLR_CH9_DISABLED       = 1,     /*!< DISABLED : Use the high default level for DMA Channel 9.                  */
} DMACTRL_0_CHHPCLR_CH9_Enum;

/* ============================================  DMACTRL_0 CHHPCLR CH10 [10..10]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH10                                                    */
  DMACTRL_0_CHHPCLR_CH10_DISABLED      = 1,     /*!< DISABLED : Use the high default level for DMA Channel 10.                 */
} DMACTRL_0_CHHPCLR_CH10_Enum;

/* ============================================  DMACTRL_0 CHHPCLR CH11 [11..11]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH11                                                    */
  DMACTRL_0_CHHPCLR_CH11_DISABLED      = 1,     /*!< DISABLED : Use the high default level for DMA Channel 11.                 */
} DMACTRL_0_CHHPCLR_CH11_Enum;

/* ============================================  DMACTRL_0 CHHPCLR CH12 [12..12]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH12                                                    */
  DMACTRL_0_CHHPCLR_CH12_DISABLED      = 1,     /*!< DISABLED : Use the high default level for DMA Channel 12.                 */
} DMACTRL_0_CHHPCLR_CH12_Enum;

/* ============================================  DMACTRL_0 CHHPCLR CH13 [13..13]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH13                                                    */
  DMACTRL_0_CHHPCLR_CH13_DISABLED      = 1,     /*!< DISABLED : Use the high default level for DMA Channel 13.                 */
} DMACTRL_0_CHHPCLR_CH13_Enum;

/* ============================================  DMACTRL_0 CHHPCLR CH14 [14..14]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH14                                                    */
  DMACTRL_0_CHHPCLR_CH14_DISABLED      = 1,     /*!< DISABLED : Use the high default level for DMA Channel 14.                 */
} DMACTRL_0_CHHPCLR_CH14_Enum;

/* ============================================  DMACTRL_0 CHHPCLR CH15 [15..15]  ============================================ */
typedef enum {                                  /*!< DMACTRL_0_CHHPCLR_CH15                                                    */
  DMACTRL_0_CHHPCLR_CH15_DISABLED      = 1,     /*!< DISABLED : Use the high default level for DMA Channel 15.                 */
} DMACTRL_0_CHHPCLR_CH15_Enum;

/* ========================================================  BERRCLR  ======================================================== */
/* ============================================  DMACTRL_0 BERRCLR ERROR [0..0]  ============================================= */
typedef enum {                                  /*!< DMACTRL_0_BERRCLR_ERROR                                                   */
  DMACTRL_0_BERRCLR_ERROR_CLEAR        = 1,     /*!< CLEAR : Read: 0: DMA error did not occur. 1: DMA error occurred
                                                     since the last time ERROR was cleared. Write: 0: No effect.
                                                     1: Clear the DMA error flag.                                              */
} DMACTRL_0_BERRCLR_ERROR_Enum;



/* =========================================================================================================================== */
/* ================                                         DMAXBAR_0                                         ================ */
/* =========================================================================================================================== */

/* =======================================================  DMAXBAR0  ======================================================== */
/* ===========================================  DMAXBAR_0 DMAXBAR0 CH0SEL [0..3]  ============================================ */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR0_CH0SEL                                                 */
  DMAXBAR_0_DMAXBAR0_CH0SEL_USB0_EP4_OUT = 0,   /*!< USB0_EP4_OUT : Service USB0 EP4 OUT data requests.                        */
  DMAXBAR_0_DMAXBAR0_CH0SEL_SPI1_RX    = 1,     /*!< SPI1_RX : Service SPI1 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH0SEL_USART0_RX  = 2,     /*!< USART0_RX : Service USART0 RX data requests.                              */
  DMAXBAR_0_DMAXBAR0_CH0SEL_I2C0_TX    = 3,     /*!< I2C0_TX : Service I2C0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH0SEL_DMA0T0_RISE = 4,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH0SEL_DMA0T0_FALL = 5,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH0SEL_DMA0T1_RISE = 6,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH0SEL_DMA0T1_FALL = 7,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH0SEL_TIMER0L    = 8,     /*!< TIMER0L : Service TIMER0L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR0_CH0SEL_TIMER0H    = 9,     /*!< TIMER0H : Service TIMER0H overflow data requests.                         */
  DMAXBAR_0_DMAXBAR0_CH0SEL_TIMER1L    = 10,    /*!< TIMER1L : Service TIMER1L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR0_CH0SEL_TIMER1H    = 11,    /*!< TIMER1H : Service TIMER1H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR0_CH0SEL_Enum;

/* ===========================================  DMAXBAR_0 DMAXBAR0 CH1SEL [4..7]  ============================================ */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR0_CH1SEL                                                 */
  DMAXBAR_0_DMAXBAR0_CH1SEL_USB0_EP3_OUT = 0,   /*!< USB0_EP3_OUT : Service USB0 EP3 OUT data requests.                        */
  DMAXBAR_0_DMAXBAR0_CH1SEL_SPI0_RX    = 1,     /*!< SPI0_RX : Service SPI0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH1SEL_USART1_RX  = 2,     /*!< USART1_RX : Service USART1 RX data requests.                              */
  DMAXBAR_0_DMAXBAR0_CH1SEL_I2C0_RX    = 3,     /*!< I2C0_RX : Service I2C0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH1SEL_IDAC1      = 4,     /*!< IDAC1 : Service IDAC1 data requests.                                      */
  DMAXBAR_0_DMAXBAR0_CH1SEL_EPCA0_CONTROL = 5,  /*!< EPCA0_CONTROL : Service EPCA0 control data requests.                      */
  DMAXBAR_0_DMAXBAR0_CH1SEL_DMA0T0_RISE = 6,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH1SEL_DMA0T0_FALL = 7,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH1SEL_DMA0T1_RISE = 8,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH1SEL_DMA0T1_FALL = 9,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH1SEL_TIMER0L    = 10,    /*!< TIMER0L : Service TIMER0L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR0_CH1SEL_TIMER1L    = 11,    /*!< TIMER1L : Service TIMER1L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR0_CH1SEL_TIMER1H    = 12,    /*!< TIMER1H : Service TIMER1H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR0_CH1SEL_Enum;

/* ===========================================  DMAXBAR_0 DMAXBAR0 CH2SEL [8..11]  =========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR0_CH2SEL                                                 */
  DMAXBAR_0_DMAXBAR0_CH2SEL_USB0_EP2_OUT = 0,   /*!< USB0_EP2_OUT : Service USB0 EP2 OUT data requests.                        */
  DMAXBAR_0_DMAXBAR0_CH2SEL_SPI0_TX    = 1,     /*!< SPI0_TX : Service SPI0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH2SEL_USART0_TX  = 2,     /*!< USART0_TX : Service USART0 TX data requests.                              */
  DMAXBAR_0_DMAXBAR0_CH2SEL_SARADC0    = 3,     /*!< SARADC0 : Service SARADC0 data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH2SEL_IDAC1      = 4,     /*!< IDAC1 : Service IDAC1 data requests.                                      */
  DMAXBAR_0_DMAXBAR0_CH2SEL_I2S0_TX    = 5,     /*!< I2S0_TX : Service I2S0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH2SEL_EPCA0_CONTROL = 6,  /*!< EPCA0_CONTROL : Service EPCA0 control data requests.                      */
  DMAXBAR_0_DMAXBAR0_CH2SEL_DMA0T0_RISE = 7,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH2SEL_DMA0T0_FALL = 8,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH2SEL_DMA0T1_RISE = 9,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH2SEL_DMA0T1_FALL = 10,   /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
} DMAXBAR_0_DMAXBAR0_CH2SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR0 CH3SEL [12..15]  =========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR0_CH3SEL                                                 */
  DMAXBAR_0_DMAXBAR0_CH3SEL_USB0_EP1_OUT = 0,   /*!< USB0_EP1_OUT : Service USB0 EP1 OUT data requests.                        */
  DMAXBAR_0_DMAXBAR0_CH3SEL_SARADC1    = 1,     /*!< SARADC1 : Service SARADC1 data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH3SEL_IDAC0      = 2,     /*!< IDAC0 : Service IDAC0 data requests.                                      */
  DMAXBAR_0_DMAXBAR0_CH3SEL_I2S0_TX    = 3,     /*!< I2S0_TX : Service I2S0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH3SEL_EPCA0_CAPTURE = 4,  /*!< EPCA0_CAPTURE : Service EPCA0 capture data requests.                      */
  DMAXBAR_0_DMAXBAR0_CH3SEL_DMA0T0_RISE = 5,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH3SEL_DMA0T0_FALL = 6,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH3SEL_DMA0T1_RISE = 7,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH3SEL_DMA0T1_FALL = 8,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH3SEL_TIMER1H    = 9,     /*!< TIMER1H : Service TIMER1H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR0_CH3SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR0 CH4SEL [16..19]  =========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR0_CH4SEL                                                 */
  DMAXBAR_0_DMAXBAR0_CH4SEL_USB0_EP4_IN = 0,    /*!< USB0_EP4_IN : Service USB0 EP4 IN data requests.                          */
  DMAXBAR_0_DMAXBAR0_CH4SEL_SPI1_TX    = 1,     /*!< SPI1_TX : Service SPI1 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH4SEL_USART0_TX  = 2,     /*!< USART0_TX : Service USART0 TX data requests.                              */
  DMAXBAR_0_DMAXBAR0_CH4SEL_SARADC0    = 3,     /*!< SARADC0 : Service SARADC0 data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH4SEL_I2S0_RX    = 4,     /*!< I2S0_RX : Service I2S0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH4SEL_EPCA0_CAPTURE = 5,  /*!< EPCA0_CAPTURE : Service EPCA0 capture data requests.                      */
  DMAXBAR_0_DMAXBAR0_CH4SEL_DMA0T0_RISE = 6,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH4SEL_DMA0T0_FALL = 7,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH4SEL_DMA0T1_RISE = 8,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH4SEL_DMA0T1_FALL = 9,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH4SEL_TIMER0H    = 10,    /*!< TIMER0H : Service TIMER0H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR0_CH4SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR0 CH5SEL [20..23]  =========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR0_CH5SEL                                                 */
  DMAXBAR_0_DMAXBAR0_CH5SEL_USB0_EP3_IN = 0,    /*!< USB0_EP3_IN : Service USB0 EP3 IN data requests.                          */
  DMAXBAR_0_DMAXBAR0_CH5SEL_AES0_TX    = 1,     /*!< AES0_TX : Service AES0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH5SEL_USART1_TX  = 2,     /*!< USART1_TX : Service USART1 TX data requests.                              */
  DMAXBAR_0_DMAXBAR0_CH5SEL_SARADC0    = 3,     /*!< SARADC0 : Service SARADC0 data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH5SEL_I2S0_RX    = 4,     /*!< I2S0_RX : Service I2S0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH5SEL_DMA0T0_RISE = 5,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH5SEL_DMA0T0_FALL = 6,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH5SEL_DMA0T1_RISE = 7,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH5SEL_DMA0T1_FALL = 8,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
} DMAXBAR_0_DMAXBAR0_CH5SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR0 CH6SEL [24..27]  =========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR0_CH6SEL                                                 */
  DMAXBAR_0_DMAXBAR0_CH6SEL_USB0_EP2_IN = 0,    /*!< USB0_EP2_IN : Service USB0 EP2 IN data requests.                          */
  DMAXBAR_0_DMAXBAR0_CH6SEL_AES0_RX    = 1,     /*!< AES0_RX : Service AES0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH6SEL_USART0_RX  = 2,     /*!< USART0_RX : Service USART0 RX data requests.                              */
  DMAXBAR_0_DMAXBAR0_CH6SEL_I2C0_RX    = 3,     /*!< I2C0_RX : Service I2C0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH6SEL_IDAC0      = 4,     /*!< IDAC0 : Service IDAC0 data requests.                                      */
  DMAXBAR_0_DMAXBAR0_CH6SEL_DMA0T0_RISE = 5,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH6SEL_DMA0T0_FALL = 6,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH6SEL_DMA0T1_RISE = 7,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH6SEL_DMA0T1_FALL = 8,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH6SEL_TIMER0H    = 9,     /*!< TIMER0H : Service TIMER0H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR0_CH6SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR0 CH7SEL [28..31]  =========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR0_CH7SEL                                                 */
  DMAXBAR_0_DMAXBAR0_CH7SEL_USB0_EP1_IN = 0,    /*!< USB0_EP1_IN : Service USB0 EP1 IN data requests.                          */
  DMAXBAR_0_DMAXBAR0_CH7SEL_AES0_XOR   = 1,     /*!< AES0_XOR : Service AES0 XOR data requests.                                */
  DMAXBAR_0_DMAXBAR0_CH7SEL_SPI1_TX    = 2,     /*!< SPI1_TX : Service SPI1 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR0_CH7SEL_USART0_TX  = 3,     /*!< USART0_TX : Service USART0 TX data requests.                              */
  DMAXBAR_0_DMAXBAR0_CH7SEL_DMA0T0_RISE = 4,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH7SEL_DMA0T0_FALL = 5,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH7SEL_DMA0T1_RISE = 6,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR0_CH7SEL_DMA0T1_FALL = 7,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR0_CH7SEL_TIMER0L    = 8,     /*!< TIMER0L : Service TIMER0L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR0_CH7SEL_TIMER1L    = 9,     /*!< TIMER1L : Service TIMER1L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR0_CH7SEL_TIMER1H    = 10,    /*!< TIMER1H : Service TIMER1H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR0_CH7SEL_Enum;

/* =======================================================  DMAXBAR1  ======================================================== */
/* ===========================================  DMAXBAR_0 DMAXBAR1 CH8SEL [0..3]  ============================================ */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR1_CH8SEL                                                 */
  DMAXBAR_0_DMAXBAR1_CH8SEL_USB0_EP4_OUT = 0,   /*!< USB0_EP4_OUT : Service USB0 EP4 OUT data requests.                        */
  DMAXBAR_0_DMAXBAR1_CH8SEL_USART1_RX  = 1,     /*!< USART1_RX : Service USART1 RX data requests.                              */
  DMAXBAR_0_DMAXBAR1_CH8SEL_SPI1_RX    = 2,     /*!< SPI1_RX : Service SPI1 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH8SEL_USART0_RX  = 3,     /*!< USART0_RX : Service USART0 RX data requests.                              */
  DMAXBAR_0_DMAXBAR1_CH8SEL_EPCA0_CAPTURE = 4,  /*!< EPCA0_CAPTURE : Service EPCA0 capture data requests.                      */
  DMAXBAR_0_DMAXBAR1_CH8SEL_DMA0T0_RISE = 5,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH8SEL_DMA0T0_FALL = 6,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH8SEL_DMA0T1_RISE = 7,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH8SEL_DMA0T1_FALL = 8,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
} DMAXBAR_0_DMAXBAR1_CH8SEL_Enum;

/* ===========================================  DMAXBAR_0 DMAXBAR1 CH9SEL [4..7]  ============================================ */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR1_CH9SEL                                                 */
  DMAXBAR_0_DMAXBAR1_CH9SEL_USB0_EP3_OUT = 0,   /*!< USB0_EP3_OUT : Service USB0 EP3 OUT data requests.                        */
  DMAXBAR_0_DMAXBAR1_CH9SEL_USART1_TX  = 1,     /*!< USART1_TX : Service USART1 TX data requests.                              */
  DMAXBAR_0_DMAXBAR1_CH9SEL_I2C0_TX    = 2,     /*!< I2C0_TX : Service I2C0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH9SEL_EPCA0_CAPTURE = 3,  /*!< EPCA0_CAPTURE : Service EPCA0 capture data requests.                      */
  DMAXBAR_0_DMAXBAR1_CH9SEL_DMA0T0_RISE = 4,    /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH9SEL_DMA0T0_FALL = 5,    /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH9SEL_DMA0T1_RISE = 6,    /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH9SEL_DMA0T1_FALL = 7,    /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH9SEL_TIMER0H    = 8,     /*!< TIMER0H : Service TIMER0H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR1_CH9SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR1 CH10SEL [8..11]  =========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR1_CH10SEL                                                */
  DMAXBAR_0_DMAXBAR1_CH10SEL_USB0_EP2_OUT = 0,  /*!< USB0_EP2_OUT : Service USB0 EP2 OUT data requests.                        */
  DMAXBAR_0_DMAXBAR1_CH10SEL_AES0_TX   = 1,     /*!< AES0_TX : Service AES0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH10SEL_SARADC1   = 2,     /*!< SARADC1 : Service SARADC1 data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH10SEL_I2S0_RX   = 3,     /*!< I2S0_RX : Service I2S0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH10SEL_DMA0T0_RISE = 4,   /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH10SEL_DMA0T0_FALL = 5,   /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH10SEL_DMA0T1_RISE = 6,   /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH10SEL_DMA0T1_FALL = 7,   /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH10SEL_TIMER1H   = 8,     /*!< TIMER1H : Service TIMER1H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR1_CH10SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR1 CH11SEL [12..15]  ========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR1_CH11SEL                                                */
  DMAXBAR_0_DMAXBAR1_CH11SEL_USB0_EP1_OUT = 0,  /*!< USB0_EP1_OUT : Service USB0 EP1 OUT data requests.                        */
  DMAXBAR_0_DMAXBAR1_CH11SEL_AES0_RX   = 1,     /*!< AES0_RX : Service AES0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH11SEL_USART1_RX = 2,     /*!< USART1_RX : Service USART1 RX data requests.                              */
  DMAXBAR_0_DMAXBAR1_CH11SEL_USART0_RX = 3,     /*!< USART0_RX : Service USART0 RX data requests.                              */
  DMAXBAR_0_DMAXBAR1_CH11SEL_I2C0_RX   = 4,     /*!< I2C0_RX : Service I2C0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH11SEL_I2S0_RX   = 5,     /*!< I2S0_RX : Service I2S0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH11SEL_DMA0T0_RISE = 6,   /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH11SEL_DMA0T0_FALL = 7,   /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH11SEL_DMA0T1_RISE = 8,   /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH11SEL_DMA0T1_FALL = 9,   /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH11SEL_TIMER0H   = 10,    /*!< TIMER0H : Service TIMER0H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR1_CH11SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR1 CH12SEL [16..19]  ========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR1_CH12SEL                                                */
  DMAXBAR_0_DMAXBAR1_CH12SEL_USB0_EP4_IN = 0,   /*!< USB0_EP4_IN : Service USB0 EP4 IN data requests.                          */
  DMAXBAR_0_DMAXBAR1_CH12SEL_AES0_XOR  = 1,     /*!< AES0_XOR : Service AES0 XOR data requests.                                */
  DMAXBAR_0_DMAXBAR1_CH12SEL_USART1_TX = 2,     /*!< USART1_TX : Service USART1 TX data requests.                              */
  DMAXBAR_0_DMAXBAR1_CH12SEL_SPI1_TX   = 3,     /*!< SPI1_TX : Service SPI1 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH12SEL_IDAC1     = 4,     /*!< IDAC1 : Service IDAC1 data requests.                                      */
  DMAXBAR_0_DMAXBAR1_CH12SEL_I2S0_TX   = 5,     /*!< I2S0_TX : Service I2S0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH12SEL_DMA0T0_RISE = 6,   /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH12SEL_DMA0T0_FALL = 7,   /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH12SEL_DMA0T1_RISE = 8,   /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH12SEL_DMA0T1_FALL = 9,   /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH12SEL_TIMER0L   = 10,    /*!< TIMER0L : Service TIMER0L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR1_CH12SEL_TIMER1L   = 11,    /*!< TIMER1L : Service TIMER1L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR1_CH12SEL_TIMER1H   = 12,    /*!< TIMER1H : Service TIMER1H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR1_CH12SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR1 CH13SEL [20..23]  ========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR1_CH13SEL                                                */
  DMAXBAR_0_DMAXBAR1_CH13SEL_USB0_EP3_IN = 0,   /*!< USB0_EP3_IN : Service USB0 EP3 IN data requests.                          */
  DMAXBAR_0_DMAXBAR1_CH13SEL_SPI0_RX   = 1,     /*!< SPI0_RX : Service SPI0 RX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH13SEL_USART0_RX = 2,     /*!< USART0_RX : Service USART0 RX data requests.                              */
  DMAXBAR_0_DMAXBAR1_CH13SEL_IDAC1     = 3,     /*!< IDAC1 : Service IDAC1 data requests.                                      */
  DMAXBAR_0_DMAXBAR1_CH13SEL_I2S0_TX   = 4,     /*!< I2S0_TX : Service I2S0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH13SEL_DMA0T0_RISE = 5,   /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH13SEL_DMA0T0_FALL = 6,   /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH13SEL_DMA0T1_RISE = 7,   /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH13SEL_DMA0T1_FALL = 8,   /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH13SEL_TIMER0H   = 9,     /*!< TIMER0H : Service TIMER0H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR1_CH13SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR1 CH14SEL [24..27]  ========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR1_CH14SEL                                                */
  DMAXBAR_0_DMAXBAR1_CH14SEL_USB0_EP2_IN = 0,   /*!< USB0_EP2_IN : Service USB0 EP2 IN data requests.                          */
  DMAXBAR_0_DMAXBAR1_CH14SEL_SPI0_TX   = 1,     /*!< SPI0_TX : Service SPI0 TX data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH14SEL_USART0_TX = 2,     /*!< USART0_TX : Service USART0 TX data requests.                              */
  DMAXBAR_0_DMAXBAR1_CH14SEL_IDAC0     = 3,     /*!< IDAC0 : Service IDAC0 data requests.                                      */
  DMAXBAR_0_DMAXBAR1_CH14SEL_EPCA0_CONTROL = 4, /*!< EPCA0_CONTROL : Service EPCA0 control data requests.                      */
  DMAXBAR_0_DMAXBAR1_CH14SEL_DMA0T0_RISE = 5,   /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH14SEL_DMA0T0_FALL = 6,   /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH14SEL_DMA0T1_RISE = 7,   /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH14SEL_DMA0T1_FALL = 8,   /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH14SEL_TIMER0L   = 9,     /*!< TIMER0L : Service TIMER0L overflow data requests.                         */
  DMAXBAR_0_DMAXBAR1_CH14SEL_TIMER1L   = 10,    /*!< TIMER1L : Service TIMER1L overflow data requests.                         */
} DMAXBAR_0_DMAXBAR1_CH14SEL_Enum;

/* ==========================================  DMAXBAR_0 DMAXBAR1 CH15SEL [28..31]  ========================================== */
typedef enum {                                  /*!< DMAXBAR_0_DMAXBAR1_CH15SEL                                                */
  DMAXBAR_0_DMAXBAR1_CH15SEL_USB0_EP1_IN = 0,   /*!< USB0_EP1_IN : Service USB0 EP1 IN data requests.                          */
  DMAXBAR_0_DMAXBAR1_CH15SEL_SARADC1   = 1,     /*!< SARADC1 : Service SARADC1 data requests.                                  */
  DMAXBAR_0_DMAXBAR1_CH15SEL_IDAC0     = 2,     /*!< IDAC0 : Service IDAC0 data requests.                                      */
  DMAXBAR_0_DMAXBAR1_CH15SEL_EPCA0_CONTROL = 3, /*!< EPCA0_CONTROL : Service EPCA0 control data requests.                      */
  DMAXBAR_0_DMAXBAR1_CH15SEL_DMA0T0_RISE = 4,   /*!< DMA0T0_RISE : Service DMAXT0 (PB1.10) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH15SEL_DMA0T0_FALL = 5,   /*!< DMA0T0_FALL : Service DMAXT0 (PB1.10) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH15SEL_DMA0T1_RISE = 6,   /*!< DMA0T1_RISE : Service DMAXT1 (PB1.11) rising edge data requests.          */
  DMAXBAR_0_DMAXBAR1_CH15SEL_DMA0T1_FALL = 7,   /*!< DMA0T1_FALL : Service DMAXT1 (PB1.11) falling edge data requests.         */
  DMAXBAR_0_DMAXBAR1_CH15SEL_TIMER0H   = 8,     /*!< TIMER0H : Service TIMER0H overflow data requests.                         */
  DMAXBAR_0_DMAXBAR1_CH15SEL_TIMER1H   = 9,     /*!< TIMER1H : Service TIMER1H overflow data requests.                         */
} DMAXBAR_0_DMAXBAR1_CH15SEL_Enum;



/* =========================================================================================================================== */
/* ================                                        DEVICEID_0                                         ================ */
/* =========================================================================================================================== */

/* =======================================================  DEVICEID0  ======================================================= */
/* ===========================================  DEVICEID_0 DEVICEID0 REVID [0..3]  =========================================== */
typedef enum {                                  /*!< DEVICEID_0_DEVICEID0_REVID                                                */
  DEVICEID_0_DEVICEID0_REVID_REVA      = 0,     /*!< REVA : Revision A.                                                        */
} DEVICEID_0_DEVICEID0_REVID_Enum;

/* =======================================================  DEVICEID1  ======================================================= */
/* =======================================================  DEVICEID2  ======================================================= */
/* =======================================================  DEVICEID3  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          EMIF_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  EMIF_0 CONTROL IF0EN [0..0]  ============================================== */
typedef enum {                                  /*!< EMIF_0_CONTROL_IF0EN                                                      */
  EMIF_0_CONTROL_IF0EN_DISABLED        = 0,     /*!< DISABLED : Disable interface 0.                                           */
  EMIF_0_CONTROL_IF0EN_ENABLED         = 1,     /*!< ENABLED : Enable interface 0.                                             */
} EMIF_0_CONTROL_IF0EN_Enum;

/* ==============================================  EMIF_0 CONTROL IF1EN [1..1]  ============================================== */
typedef enum {                                  /*!< EMIF_0_CONTROL_IF1EN                                                      */
  EMIF_0_CONTROL_IF1EN_DISABLED        = 0,     /*!< DISABLED : Disable interface 1.                                           */
  EMIF_0_CONTROL_IF1EN_ENABLED         = 1,     /*!< ENABLED : Enable interface 1.                                             */
} EMIF_0_CONTROL_IF1EN_Enum;

/* =============================================  EMIF_0 CONTROL OFFSTEN [4..4]  ============================================= */
typedef enum {                                  /*!< EMIF_0_CONTROL_OFFSTEN                                                    */
  EMIF_0_CONTROL_OFFSTEN_DISABLED      = 0,     /*!< DISABLED : EMIF will not enter the off state after 4 idle cycles.         */
  EMIF_0_CONTROL_OFFSTEN_ENABLED       = 1,     /*!< ENABLED : EMIF will enter the off state after 4 idle cycles.              */
} EMIF_0_CONTROL_OFFSTEN_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ==============================================  EMIF_0 STATUS OFFSTS [0..0]  ============================================== */
typedef enum {                                  /*!< EMIF_0_STATUS_OFFSTS                                                      */
  EMIF_0_STATUS_OFFSTS_ON              = 0,     /*!< ON : The EMIF bus is active.                                              */
  EMIF_0_STATUS_OFFSTS_OFF             = 1,     /*!< OFF : The EMIF is in the off bus state.                                   */
} EMIF_0_STATUS_OFFSTS_Enum;

/* =============================================  EMIF_0 STATUS IDLESTS [1..1]  ============================================== */
typedef enum {                                  /*!< EMIF_0_STATUS_IDLESTS                                                     */
  EMIF_0_STATUS_IDLESTS_NOT_IDLE       = 0,     /*!< NOT_IDLE : The EMIF has not been idle for four cycles.                    */
  EMIF_0_STATUS_IDLESTS_IDLE           = 1,     /*!< IDLE : The EMIF has been idle for four four cycles.                       */
} EMIF_0_STATUS_IDLESTS_Enum;

/* =======================================================  CONFIG_0  ======================================================== */
/* ============================================  EMIF_0 CONFIG_0 BUSWIDTH [0..0]  ============================================ */
typedef enum {                                  /*!< EMIF_0_CONFIG_0_BUSWIDTH                                                  */
  EMIF_0_CONFIG_0_BUSWIDTH_8BIT        = 0,     /*!< 8BIT : The data bus is 8-bits wide.                                       */
  EMIF_0_CONFIG_0_BUSWIDTH_16BIT       = 1,     /*!< 16BIT : The data bus is 16-bits wide.                                     */
} EMIF_0_CONFIG_0_BUSWIDTH_Enum;

/* =============================================  EMIF_0 CONFIG_0 MUXMD [2..2]  ============================================== */
typedef enum {                                  /*!< EMIF_0_CONFIG_0_MUXMD                                                     */
  EMIF_0_CONFIG_0_MUXMD_NONMUXED       = 0,     /*!< NONMUXED : The interface operates in non-multiplexed mode.                */
  EMIF_0_CONFIG_0_MUXMD_MUXED          = 1,     /*!< MUXED : The interface operates in multiplexed mode.                       */
} EMIF_0_CONFIG_0_MUXMD_Enum;

/* ==============================================  EMIF_0 CONFIG_0 ASEN [3..3]  ============================================== */
typedef enum {                                  /*!< EMIF_0_CONFIG_0_ASEN                                                      */
  EMIF_0_CONFIG_0_ASEN_DISABLED        = 0,     /*!< DISABLED : The address is not automatically shifted.                      */
  EMIF_0_CONFIG_0_ASEN_ENABLED         = 1,     /*!< ENABLED : The address is automatically shifted.                           */
} EMIF_0_CONFIG_0_ASEN_Enum;

/* ==============================================  EMIF_0 CONFIG_0 ROEN [4..4]  ============================================== */
typedef enum {                                  /*!< EMIF_0_CONFIG_0_ROEN                                                      */
  EMIF_0_CONFIG_0_ROEN_DISABLED        = 0,     /*!< DISABLED : The interface supports reads and writes.                       */
  EMIF_0_CONFIG_0_ROEN_ENABLED         = 1,     /*!< ENABLED : The interface supports only reads.                              */
} EMIF_0_CONFIG_0_ROEN_Enum;

/* =============================================  EMIF_0 CONFIG_0 WDHINH [8..8]  ============================================= */
typedef enum {                                  /*!< EMIF_0_CONFIG_0_WDHINH                                                    */
  EMIF_0_CONFIG_0_WDHINH_INACTIVE      = 0,     /*!< INACTIVE : Enable the write data hold state.                              */
  EMIF_0_CONFIG_0_WDHINH_ACTIVE        = 1,     /*!< ACTIVE : Inhibit the write data hold state.                               */
} EMIF_0_CONFIG_0_WDHINH_Enum;

/* ===========================================  EMIF_0 CONFIG_0 DELAYOE [12..12]  ============================================ */
typedef enum {                                  /*!< EMIF_0_CONFIG_0_DELAYOE                                                   */
  EMIF_0_CONFIG_0_DELAYOE_DISABLED     = 0,     /*!< DISABLED : The output enable signal (/OE) is not delayed.                 */
  EMIF_0_CONFIG_0_DELAYOE_ENABLED      = 1,     /*!< ENABLED : The output enable signal (/OE) is delayed.                      */
} EMIF_0_CONFIG_0_DELAYOE_Enum;

/* ============================================  EMIF_0 CONFIG_0 KLREN [16..16]  ============================================= */
typedef enum {                                  /*!< EMIF_0_CONFIG_0_KLREN                                                     */
  EMIF_0_CONFIG_0_KLREN_DISABLED       = 0,     /*!< DISABLED : The bus is driven to the idle state between active
                                                     requests.                                                                 */
  EMIF_0_CONFIG_0_KLREN_ENABLED        = 1,     /*!< ENABLED : The bus drives the last value read on the interface
                                                     between active requests.                                                  */
} EMIF_0_CONFIG_0_KLREN_Enum;

/* ========================================================  IFRT_0  ========================================================= */
/* ========================================================  IFWT_0  ========================================================= */
/* =======================================================  IFRCST_0  ======================================================== */
/* =============================================  EMIF_0 IFRCST_0 CSRAS [0..0]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_CSRAS                                                     */
  EMIF_0_IFRCST_0_CSRAS_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the read address setup
                                                     state.                                                                    */
  EMIF_0_IFRCST_0_CSRAS_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the read address
                                                     setup state.                                                              */
} EMIF_0_IFRCST_0_CSRAS_Enum;

/* =============================================  EMIF_0 IFRCST_0 CSRAH [1..1]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_CSRAH                                                     */
  EMIF_0_IFRCST_0_CSRAH_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the read address hold
                                                     state.                                                                    */
  EMIF_0_IFRCST_0_CSRAH_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the read address
                                                     hold state.                                                               */
} EMIF_0_IFRCST_0_CSRAH_Enum;

/* =============================================  EMIF_0 IFRCST_0 CSRDW [2..2]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_CSRDW                                                     */
  EMIF_0_IFRCST_0_CSRDW_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the read data wait
                                                     state.                                                                    */
  EMIF_0_IFRCST_0_CSRDW_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the read data wait
                                                     state.                                                                    */
} EMIF_0_IFRCST_0_CSRDW_Enum;

/* =============================================  EMIF_0 IFRCST_0 CSRDH [3..3]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_CSRDH                                                     */
  EMIF_0_IFRCST_0_CSRDH_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the read data hold
                                                     state.                                                                    */
  EMIF_0_IFRCST_0_CSRDH_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the read data hold
                                                     state.                                                                    */
} EMIF_0_IFRCST_0_CSRDH_Enum;

/* =============================================  EMIF_0 IFRCST_0 OERAS [4..4]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_OERAS                                                     */
  EMIF_0_IFRCST_0_OERAS_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the read address
                                                     setup state.                                                              */
  EMIF_0_IFRCST_0_OERAS_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the read address
                                                     setup state.                                                              */
} EMIF_0_IFRCST_0_OERAS_Enum;

/* =============================================  EMIF_0 IFRCST_0 OERAH [5..5]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_OERAH                                                     */
  EMIF_0_IFRCST_0_OERAH_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the read address
                                                     hold state.                                                               */
  EMIF_0_IFRCST_0_OERAH_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the read address
                                                     hold state.                                                               */
} EMIF_0_IFRCST_0_OERAH_Enum;

/* =============================================  EMIF_0 IFRCST_0 OERDW [6..6]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_OERDW                                                     */
  EMIF_0_IFRCST_0_OERDW_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the read data wait
                                                     state.                                                                    */
  EMIF_0_IFRCST_0_OERDW_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the read data
                                                     wait state.                                                               */
} EMIF_0_IFRCST_0_OERDW_Enum;

/* =============================================  EMIF_0 IFRCST_0 OERDH [7..7]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_OERDH                                                     */
  EMIF_0_IFRCST_0_OERDH_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the read data hold
                                                     state.                                                                    */
  EMIF_0_IFRCST_0_OERDH_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the read data
                                                     hold state.                                                               */
} EMIF_0_IFRCST_0_OERDH_Enum;

/* =============================================  EMIF_0 IFRCST_0 WRRAS [8..8]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_WRRAS                                                     */
  EMIF_0_IFRCST_0_WRRAS_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the read address
                                                     setup state.                                                              */
  EMIF_0_IFRCST_0_WRRAS_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the read address
                                                     setup state.                                                              */
} EMIF_0_IFRCST_0_WRRAS_Enum;

/* =============================================  EMIF_0 IFRCST_0 WRRAH [9..9]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_WRRAH                                                     */
  EMIF_0_IFRCST_0_WRRAH_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the read address
                                                     hold state.                                                               */
  EMIF_0_IFRCST_0_WRRAH_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the read address
                                                     hold state.                                                               */
} EMIF_0_IFRCST_0_WRRAH_Enum;

/* ============================================  EMIF_0 IFRCST_0 WRRDW [10..10]  ============================================= */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_WRRDW                                                     */
  EMIF_0_IFRCST_0_WRRDW_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the read data wait
                                                     state.                                                                    */
  EMIF_0_IFRCST_0_WRRDW_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the read data wait
                                                     state.                                                                    */
} EMIF_0_IFRCST_0_WRRDW_Enum;

/* ============================================  EMIF_0 IFRCST_0 WRRDH [11..11]  ============================================= */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_WRRDH                                                     */
  EMIF_0_IFRCST_0_WRRDH_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the read data hold
                                                     state.                                                                    */
  EMIF_0_IFRCST_0_WRRDH_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the read data hold
                                                     state.                                                                    */
} EMIF_0_IFRCST_0_WRRDH_Enum;

/* ============================================  EMIF_0 IFRCST_0 ALERAS [12..12]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_ALERAS                                                    */
  EMIF_0_IFRCST_0_ALERAS_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the read
                                                     address setup state.                                                      */
  EMIF_0_IFRCST_0_ALERAS_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the read
                                                     address setup state.                                                      */
} EMIF_0_IFRCST_0_ALERAS_Enum;

/* ============================================  EMIF_0 IFRCST_0 ALERAH [13..13]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_ALERAH                                                    */
  EMIF_0_IFRCST_0_ALERAH_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the read
                                                     address hold state.                                                       */
  EMIF_0_IFRCST_0_ALERAH_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the read
                                                     address hold state.                                                       */
} EMIF_0_IFRCST_0_ALERAH_Enum;

/* ============================================  EMIF_0 IFRCST_0 ALERDW [14..14]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_ALERDW                                                    */
  EMIF_0_IFRCST_0_ALERDW_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the read
                                                     data wait state.                                                          */
  EMIF_0_IFRCST_0_ALERDW_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the read
                                                     data wait state.                                                          */
} EMIF_0_IFRCST_0_ALERDW_Enum;

/* ============================================  EMIF_0 IFRCST_0 ALERDH [15..15]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFRCST_0_ALERDH                                                    */
  EMIF_0_IFRCST_0_ALERDH_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the read
                                                     data hold state.                                                          */
  EMIF_0_IFRCST_0_ALERDH_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the read
                                                     data hold state.                                                          */
} EMIF_0_IFRCST_0_ALERDH_Enum;

/* =======================================================  IFWCST_0  ======================================================== */
/* =============================================  EMIF_0 IFWCST_0 CSWAS [0..0]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_CSWAS                                                     */
  EMIF_0_IFWCST_0_CSWAS_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the write address
                                                     setup state.                                                              */
  EMIF_0_IFWCST_0_CSWAS_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the write address
                                                     setup state.                                                              */
} EMIF_0_IFWCST_0_CSWAS_Enum;

/* =============================================  EMIF_0 IFWCST_0 CSWAH [1..1]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_CSWAH                                                     */
  EMIF_0_IFWCST_0_CSWAH_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the write address
                                                     hold state.                                                               */
  EMIF_0_IFWCST_0_CSWAH_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the write address
                                                     hold state.                                                               */
} EMIF_0_IFWCST_0_CSWAH_Enum;

/* =============================================  EMIF_0 IFWCST_0 CSWDW [2..2]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_CSWDW                                                     */
  EMIF_0_IFWCST_0_CSWDW_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the write data wait
                                                     state.                                                                    */
  EMIF_0_IFWCST_0_CSWDW_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the write data wait
                                                     state.                                                                    */
} EMIF_0_IFWCST_0_CSWDW_Enum;

/* =============================================  EMIF_0 IFWCST_0 CSWDH [3..3]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_CSWDH                                                     */
  EMIF_0_IFWCST_0_CSWDH_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the write data hold
                                                     state.                                                                    */
  EMIF_0_IFWCST_0_CSWDH_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the write data hold
                                                     state.                                                                    */
} EMIF_0_IFWCST_0_CSWDH_Enum;

/* =============================================  EMIF_0 IFWCST_0 OEWAS [4..4]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_OEWAS                                                     */
  EMIF_0_IFWCST_0_OEWAS_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the write address
                                                     setup state.                                                              */
  EMIF_0_IFWCST_0_OEWAS_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the write address
                                                     setup state.                                                              */
} EMIF_0_IFWCST_0_OEWAS_Enum;

/* =============================================  EMIF_0 IFWCST_0 OEWAH [5..5]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_OEWAH                                                     */
  EMIF_0_IFWCST_0_OEWAH_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the write address
                                                     hold state.                                                               */
  EMIF_0_IFWCST_0_OEWAH_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the write address
                                                     hold state.                                                               */
} EMIF_0_IFWCST_0_OEWAH_Enum;

/* =============================================  EMIF_0 IFWCST_0 OEWDW [6..6]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_OEWDW                                                     */
  EMIF_0_IFWCST_0_OEWDW_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the write data wait
                                                     state.                                                                    */
  EMIF_0_IFWCST_0_OEWDW_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the write data
                                                     wait state.                                                               */
} EMIF_0_IFWCST_0_OEWDW_Enum;

/* =============================================  EMIF_0 IFWCST_0 OEWDH [7..7]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_OEWDH                                                     */
  EMIF_0_IFWCST_0_OEWDH_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the write data hold
                                                     state.                                                                    */
  EMIF_0_IFWCST_0_OEWDH_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the write data
                                                     hold state.                                                               */
} EMIF_0_IFWCST_0_OEWDH_Enum;

/* =============================================  EMIF_0 IFWCST_0 WRWAS [8..8]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_WRWAS                                                     */
  EMIF_0_IFWCST_0_WRWAS_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the write address
                                                     setup state.                                                              */
  EMIF_0_IFWCST_0_WRWAS_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the write address
                                                     setup state.                                                              */
} EMIF_0_IFWCST_0_WRWAS_Enum;

/* =============================================  EMIF_0 IFWCST_0 WRWAH [9..9]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_WRWAH                                                     */
  EMIF_0_IFWCST_0_WRWAH_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the write address
                                                     hold state.                                                               */
  EMIF_0_IFWCST_0_WRWAH_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the write address
                                                     hold state.                                                               */
} EMIF_0_IFWCST_0_WRWAH_Enum;

/* ============================================  EMIF_0 IFWCST_0 WRWDW [10..10]  ============================================= */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_WRWDW                                                     */
  EMIF_0_IFWCST_0_WRWDW_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the write data wait
                                                     state.                                                                    */
  EMIF_0_IFWCST_0_WRWDW_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the write data
                                                     wait state.                                                               */
} EMIF_0_IFWCST_0_WRWDW_Enum;

/* ============================================  EMIF_0 IFWCST_0 WRWDH [11..11]  ============================================= */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_WRWDH                                                     */
  EMIF_0_IFWCST_0_WRWDH_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the write data hold
                                                     state.                                                                    */
  EMIF_0_IFWCST_0_WRWDH_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the write data
                                                     hold state.                                                               */
} EMIF_0_IFWCST_0_WRWDH_Enum;

/* ============================================  EMIF_0 IFWCST_0 ALEWAS [12..12]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_ALEWAS                                                    */
  EMIF_0_IFWCST_0_ALEWAS_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the write
                                                     address setup state.                                                      */
  EMIF_0_IFWCST_0_ALEWAS_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the write
                                                     address setup state.                                                      */
} EMIF_0_IFWCST_0_ALEWAS_Enum;

/* ============================================  EMIF_0 IFWCST_0 ALEWAH [13..13]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_ALEWAH                                                    */
  EMIF_0_IFWCST_0_ALEWAH_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the write
                                                     address hold state.                                                       */
  EMIF_0_IFWCST_0_ALEWAH_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the write
                                                     address hold state.                                                       */
} EMIF_0_IFWCST_0_ALEWAH_Enum;

/* ============================================  EMIF_0 IFWCST_0 ALEWDW [14..14]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_ALEWDW                                                    */
  EMIF_0_IFWCST_0_ALEWDW_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the write
                                                     data wait state.                                                          */
  EMIF_0_IFWCST_0_ALEWDW_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the write
                                                     data wait state.                                                          */
} EMIF_0_IFWCST_0_ALEWDW_Enum;

/* ============================================  EMIF_0 IFWCST_0 ALEWDH [15..15]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFWCST_0_ALEWDH                                                    */
  EMIF_0_IFWCST_0_ALEWDH_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the write
                                                     data hold state.                                                          */
  EMIF_0_IFWCST_0_ALEWDH_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the write
                                                     data hold state.                                                          */
} EMIF_0_IFWCST_0_ALEWDH_Enum;

/* =======================================================  CONFIG_1  ======================================================== */
/* ============================================  EMIF_0 CONFIG_1 BUSWIDTH [0..0]  ============================================ */
typedef enum {                                  /*!< EMIF_0_CONFIG_1_BUSWIDTH                                                  */
  EMIF_0_CONFIG_1_BUSWIDTH_8BIT        = 0,     /*!< 8BIT : The data bus is 8-bits wide.                                       */
  EMIF_0_CONFIG_1_BUSWIDTH_16BIT       = 1,     /*!< 16BIT : The data bus is 16-bits wide.                                     */
} EMIF_0_CONFIG_1_BUSWIDTH_Enum;

/* =============================================  EMIF_0 CONFIG_1 MUXMD [2..2]  ============================================== */
typedef enum {                                  /*!< EMIF_0_CONFIG_1_MUXMD                                                     */
  EMIF_0_CONFIG_1_MUXMD_NONMUXED       = 0,     /*!< NONMUXED : The interface operates in non-multiplexed mode.                */
  EMIF_0_CONFIG_1_MUXMD_MUXED          = 1,     /*!< MUXED : The interface operates in multiplexed mode.                       */
} EMIF_0_CONFIG_1_MUXMD_Enum;

/* ==============================================  EMIF_0 CONFIG_1 ASEN [3..3]  ============================================== */
typedef enum {                                  /*!< EMIF_0_CONFIG_1_ASEN                                                      */
  EMIF_0_CONFIG_1_ASEN_DISABLED        = 0,     /*!< DISABLED : The address is not automatically shifted.                      */
  EMIF_0_CONFIG_1_ASEN_ENABLED         = 1,     /*!< ENABLED : The address is automatically shifted.                           */
} EMIF_0_CONFIG_1_ASEN_Enum;

/* ==============================================  EMIF_0 CONFIG_1 ROEN [4..4]  ============================================== */
typedef enum {                                  /*!< EMIF_0_CONFIG_1_ROEN                                                      */
  EMIF_0_CONFIG_1_ROEN_DISABLED        = 0,     /*!< DISABLED : The interface supports reads and writes.                       */
  EMIF_0_CONFIG_1_ROEN_ENABLED         = 1,     /*!< ENABLED : The interface supports only reads.                              */
} EMIF_0_CONFIG_1_ROEN_Enum;

/* =============================================  EMIF_0 CONFIG_1 WDHINH [8..8]  ============================================= */
typedef enum {                                  /*!< EMIF_0_CONFIG_1_WDHINH                                                    */
  EMIF_0_CONFIG_1_WDHINH_INACTIVE      = 0,     /*!< INACTIVE : Enable the write data hold state.                              */
  EMIF_0_CONFIG_1_WDHINH_ACTIVE        = 1,     /*!< ACTIVE : Inhibit the write data hold state.                               */
} EMIF_0_CONFIG_1_WDHINH_Enum;

/* ===========================================  EMIF_0 CONFIG_1 DELAYOE [12..12]  ============================================ */
typedef enum {                                  /*!< EMIF_0_CONFIG_1_DELAYOE                                                   */
  EMIF_0_CONFIG_1_DELAYOE_DISABLED     = 0,     /*!< DISABLED : The output enable signal (/OE) is not delayed.                 */
  EMIF_0_CONFIG_1_DELAYOE_ENABLED      = 1,     /*!< ENABLED : The output enable signal (/OE) is delayed.                      */
} EMIF_0_CONFIG_1_DELAYOE_Enum;

/* ============================================  EMIF_0 CONFIG_1 KLREN [16..16]  ============================================= */
typedef enum {                                  /*!< EMIF_0_CONFIG_1_KLREN                                                     */
  EMIF_0_CONFIG_1_KLREN_DISABLED       = 0,     /*!< DISABLED : The bus is driven to the idle state between active
                                                     requests.                                                                 */
  EMIF_0_CONFIG_1_KLREN_ENABLED        = 1,     /*!< ENABLED : The bus drives the last value read on the interface
                                                     between active requests.                                                  */
} EMIF_0_CONFIG_1_KLREN_Enum;

/* ========================================================  IFRT_1  ========================================================= */
/* ========================================================  IFWT_1  ========================================================= */
/* =======================================================  IFRCST_1  ======================================================== */
/* =============================================  EMIF_0 IFRCST_1 CSRAS [0..0]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_CSRAS                                                     */
  EMIF_0_IFRCST_1_CSRAS_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the read address setup
                                                     state.                                                                    */
  EMIF_0_IFRCST_1_CSRAS_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the read address
                                                     setup state.                                                              */
} EMIF_0_IFRCST_1_CSRAS_Enum;

/* =============================================  EMIF_0 IFRCST_1 CSRAH [1..1]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_CSRAH                                                     */
  EMIF_0_IFRCST_1_CSRAH_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the read address hold
                                                     state.                                                                    */
  EMIF_0_IFRCST_1_CSRAH_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the read address
                                                     hold state.                                                               */
} EMIF_0_IFRCST_1_CSRAH_Enum;

/* =============================================  EMIF_0 IFRCST_1 CSRDW [2..2]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_CSRDW                                                     */
  EMIF_0_IFRCST_1_CSRDW_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the read data wait
                                                     state.                                                                    */
  EMIF_0_IFRCST_1_CSRDW_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the read data wait
                                                     state.                                                                    */
} EMIF_0_IFRCST_1_CSRDW_Enum;

/* =============================================  EMIF_0 IFRCST_1 CSRDH [3..3]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_CSRDH                                                     */
  EMIF_0_IFRCST_1_CSRDH_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the read data hold
                                                     state.                                                                    */
  EMIF_0_IFRCST_1_CSRDH_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the read data hold
                                                     state.                                                                    */
} EMIF_0_IFRCST_1_CSRDH_Enum;

/* =============================================  EMIF_0 IFRCST_1 OERAS [4..4]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_OERAS                                                     */
  EMIF_0_IFRCST_1_OERAS_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the read address
                                                     setup state.                                                              */
  EMIF_0_IFRCST_1_OERAS_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the read address
                                                     setup state.                                                              */
} EMIF_0_IFRCST_1_OERAS_Enum;

/* =============================================  EMIF_0 IFRCST_1 OERAH [5..5]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_OERAH                                                     */
  EMIF_0_IFRCST_1_OERAH_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the read address
                                                     hold state.                                                               */
  EMIF_0_IFRCST_1_OERAH_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the read address
                                                     hold state.                                                               */
} EMIF_0_IFRCST_1_OERAH_Enum;

/* =============================================  EMIF_0 IFRCST_1 OERDW [6..6]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_OERDW                                                     */
  EMIF_0_IFRCST_1_OERDW_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the read data wait
                                                     state.                                                                    */
  EMIF_0_IFRCST_1_OERDW_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the read data
                                                     wait state.                                                               */
} EMIF_0_IFRCST_1_OERDW_Enum;

/* =============================================  EMIF_0 IFRCST_1 OERDH [7..7]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_OERDH                                                     */
  EMIF_0_IFRCST_1_OERDH_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the read data hold
                                                     state.                                                                    */
  EMIF_0_IFRCST_1_OERDH_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the read data
                                                     hold state.                                                               */
} EMIF_0_IFRCST_1_OERDH_Enum;

/* =============================================  EMIF_0 IFRCST_1 WRRAS [8..8]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_WRRAS                                                     */
  EMIF_0_IFRCST_1_WRRAS_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the read address
                                                     setup state.                                                              */
  EMIF_0_IFRCST_1_WRRAS_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the read address
                                                     setup state.                                                              */
} EMIF_0_IFRCST_1_WRRAS_Enum;

/* =============================================  EMIF_0 IFRCST_1 WRRAH [9..9]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_WRRAH                                                     */
  EMIF_0_IFRCST_1_WRRAH_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the read address
                                                     hold state.                                                               */
  EMIF_0_IFRCST_1_WRRAH_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the read address
                                                     hold state.                                                               */
} EMIF_0_IFRCST_1_WRRAH_Enum;

/* ============================================  EMIF_0 IFRCST_1 WRRDW [10..10]  ============================================= */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_WRRDW                                                     */
  EMIF_0_IFRCST_1_WRRDW_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the read data wait
                                                     state.                                                                    */
  EMIF_0_IFRCST_1_WRRDW_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the read data wait
                                                     state.                                                                    */
} EMIF_0_IFRCST_1_WRRDW_Enum;

/* ============================================  EMIF_0 IFRCST_1 WRRDH [11..11]  ============================================= */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_WRRDH                                                     */
  EMIF_0_IFRCST_1_WRRDH_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the read data hold
                                                     state.                                                                    */
  EMIF_0_IFRCST_1_WRRDH_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the read data hold
                                                     state.                                                                    */
} EMIF_0_IFRCST_1_WRRDH_Enum;

/* ============================================  EMIF_0 IFRCST_1 ALERAS [12..12]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_ALERAS                                                    */
  EMIF_0_IFRCST_1_ALERAS_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the read
                                                     address setup state.                                                      */
  EMIF_0_IFRCST_1_ALERAS_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the read
                                                     address setup state.                                                      */
} EMIF_0_IFRCST_1_ALERAS_Enum;

/* ============================================  EMIF_0 IFRCST_1 ALERAH [13..13]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_ALERAH                                                    */
  EMIF_0_IFRCST_1_ALERAH_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the read
                                                     address hold state.                                                       */
  EMIF_0_IFRCST_1_ALERAH_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the read
                                                     address hold state.                                                       */
} EMIF_0_IFRCST_1_ALERAH_Enum;

/* ============================================  EMIF_0 IFRCST_1 ALERDW [14..14]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_ALERDW                                                    */
  EMIF_0_IFRCST_1_ALERDW_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the read
                                                     data wait state.                                                          */
  EMIF_0_IFRCST_1_ALERDW_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the read
                                                     data wait state.                                                          */
} EMIF_0_IFRCST_1_ALERDW_Enum;

/* ============================================  EMIF_0 IFRCST_1 ALERDH [15..15]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFRCST_1_ALERDH                                                    */
  EMIF_0_IFRCST_1_ALERDH_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the read
                                                     data hold state.                                                          */
  EMIF_0_IFRCST_1_ALERDH_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the read
                                                     data hold state.                                                          */
} EMIF_0_IFRCST_1_ALERDH_Enum;

/* =======================================================  IFWCST_1  ======================================================== */
/* =============================================  EMIF_0 IFWCST_1 CSWAS [0..0]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_CSWAS                                                     */
  EMIF_0_IFWCST_1_CSWAS_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the write address
                                                     setup state.                                                              */
  EMIF_0_IFWCST_1_CSWAS_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the write address
                                                     setup state.                                                              */
} EMIF_0_IFWCST_1_CSWAS_Enum;

/* =============================================  EMIF_0 IFWCST_1 CSWAH [1..1]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_CSWAH                                                     */
  EMIF_0_IFWCST_1_CSWAH_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the write address
                                                     hold state.                                                               */
  EMIF_0_IFWCST_1_CSWAH_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the write address
                                                     hold state.                                                               */
} EMIF_0_IFWCST_1_CSWAH_Enum;

/* =============================================  EMIF_0 IFWCST_1 CSWDW [2..2]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_CSWDW                                                     */
  EMIF_0_IFWCST_1_CSWDW_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the write data wait
                                                     state.                                                                    */
  EMIF_0_IFWCST_1_CSWDW_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the write data wait
                                                     state.                                                                    */
} EMIF_0_IFWCST_1_CSWDW_Enum;

/* =============================================  EMIF_0 IFWCST_1 CSWDH [3..3]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_CSWDH                                                     */
  EMIF_0_IFWCST_1_CSWDH_LOW            = 0,     /*!< LOW : Set chip select (CSx) to low during the write data hold
                                                     state.                                                                    */
  EMIF_0_IFWCST_1_CSWDH_HIGH           = 1,     /*!< HIGH : Set chip select (CSx) to high during the write data hold
                                                     state.                                                                    */
} EMIF_0_IFWCST_1_CSWDH_Enum;

/* =============================================  EMIF_0 IFWCST_1 OEWAS [4..4]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_OEWAS                                                     */
  EMIF_0_IFWCST_1_OEWAS_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the write address
                                                     setup state.                                                              */
  EMIF_0_IFWCST_1_OEWAS_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the write address
                                                     setup state.                                                              */
} EMIF_0_IFWCST_1_OEWAS_Enum;

/* =============================================  EMIF_0 IFWCST_1 OEWAH [5..5]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_OEWAH                                                     */
  EMIF_0_IFWCST_1_OEWAH_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the write address
                                                     hold state.                                                               */
  EMIF_0_IFWCST_1_OEWAH_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the write address
                                                     hold state.                                                               */
} EMIF_0_IFWCST_1_OEWAH_Enum;

/* =============================================  EMIF_0 IFWCST_1 OEWDW [6..6]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_OEWDW                                                     */
  EMIF_0_IFWCST_1_OEWDW_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the write data wait
                                                     state.                                                                    */
  EMIF_0_IFWCST_1_OEWDW_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the write data
                                                     wait state.                                                               */
} EMIF_0_IFWCST_1_OEWDW_Enum;

/* =============================================  EMIF_0 IFWCST_1 OEWDH [7..7]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_OEWDH                                                     */
  EMIF_0_IFWCST_1_OEWDH_LOW            = 0,     /*!< LOW : Set output enable (/OE) to low during the write data hold
                                                     state.                                                                    */
  EMIF_0_IFWCST_1_OEWDH_HIGH           = 1,     /*!< HIGH : Set output enable (/OE) to high during the write data
                                                     hold state.                                                               */
} EMIF_0_IFWCST_1_OEWDH_Enum;

/* =============================================  EMIF_0 IFWCST_1 WRWAS [8..8]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_WRWAS                                                     */
  EMIF_0_IFWCST_1_WRWAS_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the write address
                                                     setup state.                                                              */
  EMIF_0_IFWCST_1_WRWAS_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the write address
                                                     setup state.                                                              */
} EMIF_0_IFWCST_1_WRWAS_Enum;

/* =============================================  EMIF_0 IFWCST_1 WRWAH [9..9]  ============================================== */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_WRWAH                                                     */
  EMIF_0_IFWCST_1_WRWAH_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the write address
                                                     hold state.                                                               */
  EMIF_0_IFWCST_1_WRWAH_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the write address
                                                     hold state.                                                               */
} EMIF_0_IFWCST_1_WRWAH_Enum;

/* ============================================  EMIF_0 IFWCST_1 WRWDW [10..10]  ============================================= */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_WRWDW                                                     */
  EMIF_0_IFWCST_1_WRWDW_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the write data wait
                                                     state.                                                                    */
  EMIF_0_IFWCST_1_WRWDW_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the write data
                                                     wait state.                                                               */
} EMIF_0_IFWCST_1_WRWDW_Enum;

/* ============================================  EMIF_0 IFWCST_1 WRWDH [11..11]  ============================================= */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_WRWDH                                                     */
  EMIF_0_IFWCST_1_WRWDH_LOW            = 0,     /*!< LOW : Set write signal (/WR) to low during the write data hold
                                                     state.                                                                    */
  EMIF_0_IFWCST_1_WRWDH_HIGH           = 1,     /*!< HIGH : Set write signal (/WR) to high during the write data
                                                     hold state.                                                               */
} EMIF_0_IFWCST_1_WRWDH_Enum;

/* ============================================  EMIF_0 IFWCST_1 ALEWAS [12..12]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_ALEWAS                                                    */
  EMIF_0_IFWCST_1_ALEWAS_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the write
                                                     address setup state.                                                      */
  EMIF_0_IFWCST_1_ALEWAS_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the write
                                                     address setup state.                                                      */
} EMIF_0_IFWCST_1_ALEWAS_Enum;

/* ============================================  EMIF_0 IFWCST_1 ALEWAH [13..13]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_ALEWAH                                                    */
  EMIF_0_IFWCST_1_ALEWAH_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the write
                                                     address hold state.                                                       */
  EMIF_0_IFWCST_1_ALEWAH_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the write
                                                     address hold state.                                                       */
} EMIF_0_IFWCST_1_ALEWAH_Enum;

/* ============================================  EMIF_0 IFWCST_1 ALEWDW [14..14]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_ALEWDW                                                    */
  EMIF_0_IFWCST_1_ALEWDW_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the write
                                                     data wait state.                                                          */
  EMIF_0_IFWCST_1_ALEWDW_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the write
                                                     data wait state.                                                          */
} EMIF_0_IFWCST_1_ALEWDW_Enum;

/* ============================================  EMIF_0 IFWCST_1 ALEWDH [15..15]  ============================================ */
typedef enum {                                  /*!< EMIF_0_IFWCST_1_ALEWDH                                                    */
  EMIF_0_IFWCST_1_ALEWDH_LOW           = 0,     /*!< LOW : Set address latch enable (ALEm) to low during the write
                                                     data hold state.                                                          */
  EMIF_0_IFWCST_1_ALEWDH_HIGH          = 1,     /*!< HIGH : Set address latch enable (ALEm) to high during the write
                                                     data hold state.                                                          */
} EMIF_0_IFWCST_1_ALEWDH_Enum;



/* =========================================================================================================================== */
/* ================                                          EPCA_0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MODE  ========================================================== */
/* ==============================================  EPCA_0 MODE CLKSEL [10..12]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_CLKSEL                                                        */
  EPCA_0_MODE_CLKSEL_APB               = 0,     /*!< APB : Set the APB as the input clock (FCLKIN).                            */
  EPCA_0_MODE_CLKSEL_TIMER0            = 1,     /*!< TIMER0 : Set Timer 0 low overflows divided by 2 as the input
                                                     clock (FCLKIN).                                                           */
  EPCA_0_MODE_CLKSEL_HL_ECI            = 2,     /*!< HL_ECI : Set high-to-low transitions on ECI divided by 2 as
                                                     the input clock (FCLKIN).                                                 */
  EPCA_0_MODE_CLKSEL_EXTOSCN           = 3,     /*!< EXTOSCN : Set the external oscillator module output (EXTOSCn)
                                                     divided by 2 as the input clock (FCLKIN).                                 */
  EPCA_0_MODE_CLKSEL_ECI               = 4,     /*!< ECI : Set ECI transitions divided by 2 as the input clock (FCLKIN).       */
} EPCA_0_MODE_CLKSEL_Enum;

/* ==============================================  EPCA_0 MODE HDOSEL [14..15]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_HDOSEL                                                        */
  EPCA_0_MODE_HDOSEL_THREE_DIFF        = 0,     /*!< THREE_DIFF : Select three differential outputs from Channels
                                                     3, 4, and 5 for the High Drive pins.                                      */
  EPCA_0_MODE_HDOSEL_TWO_DIFF          = 1,     /*!< TWO_DIFF : Select the differential outputs from Channels 4 and
                                                     5 and non-differential outputs from Channels 2 and 3 for
                                                     the High Drive pins.                                                      */
  EPCA_0_MODE_HDOSEL_ONE_DIFF          = 2,     /*!< ONE_DIFF : Select the differential output from Channel 5 and
                                                     non-differential outputs from Channels 1-4 for the High
                                                     Drive pins.                                                               */
  EPCA_0_MODE_HDOSEL_NO_DIFF           = 3,     /*!< NO_DIFF : Select the non-differential channel outputs (Channels
                                                     0-5) for the High Drive pins.                                             */
} EPCA_0_MODE_HDOSEL_Enum;

/* ===============================================  EPCA_0 MODE DEND [16..18]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_DEND                                                          */
  EPCA_0_MODE_DEND_LIMIT               = 0,     /*!< LIMIT : Set the last register in a DMA write transfer to LIMITUPD.        */
  EPCA_0_MODE_DEND_CH0                 = 1,     /*!< CH0 : Set the last register in a DMA write transfer to Channel
                                                     0 CCAPVUPD.                                                               */
  EPCA_0_MODE_DEND_CH1                 = 2,     /*!< CH1 : Set the last register in a DMA write transfer to Channel
                                                     1 CCAPVUPD.                                                               */
  EPCA_0_MODE_DEND_CH2                 = 3,     /*!< CH2 : Set the last register in a DMA write transfer to Channel
                                                     2 CCAPVUPD.                                                               */
  EPCA_0_MODE_DEND_CH3                 = 4,     /*!< CH3 : Set the last register in a DMA write transfer to Channel
                                                     3 CCAPVUPD.                                                               */
  EPCA_0_MODE_DEND_CH4                 = 5,     /*!< CH4 : Set the last register in a DMA write transfer to Channel
                                                     4 CCAPVUPD.                                                               */
  EPCA_0_MODE_DEND_CH5                 = 6,     /*!< CH5 : Set the last register in a DMA write transfer to Channel
                                                     5 CCAPVUPD.                                                               */
  EPCA_0_MODE_DEND_EMPTY               = 7,     /*!< EMPTY : Empty slot.                                                       */
} EPCA_0_MODE_DEND_Enum;

/* ===============================================  EPCA_0 MODE DPTR [19..21]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_DPTR                                                          */
  EPCA_0_MODE_DPTR_LIMIT               = 0,     /*!< LIMIT : The DMA channel will write to LIMITUPD next.                      */
  EPCA_0_MODE_DPTR_CH0                 = 1,     /*!< CH0 : The DMA channel will write to Channel 0 CCAPVUPD next.              */
  EPCA_0_MODE_DPTR_CH1                 = 2,     /*!< CH1 : The DMA channel will write to Channel 1 CCAPVUPD next.              */
  EPCA_0_MODE_DPTR_CH2                 = 3,     /*!< CH2 : The DMA channel will write to Channel 2 CCAPVUPD next.              */
  EPCA_0_MODE_DPTR_CH3                 = 4,     /*!< CH3 : The DMA channel will write to Channel 3 CCAPVUPD next.              */
  EPCA_0_MODE_DPTR_CH4                 = 5,     /*!< CH4 : The DMA channel will write to Channel 4 CCAPVUPD next.              */
  EPCA_0_MODE_DPTR_CH5                 = 6,     /*!< CH5 : The DMA channel will write to Channel 5 CCAPVUPD next.              */
  EPCA_0_MODE_DPTR_EMPTY               = 7,     /*!< EMPTY : Empty slot.                                                       */
} EPCA_0_MODE_DPTR_Enum;

/* ==============================================  EPCA_0 MODE DSTART [22..24]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_DSTART                                                        */
  EPCA_0_MODE_DSTART_LIMIT             = 0,     /*!< LIMIT : Set the first register in a DMA write transfer to LIMITUPD.       */
  EPCA_0_MODE_DSTART_CH0               = 1,     /*!< CH0 : Set the first register in a DMA write transfer to Channel
                                                     0 CCAPVUPD.                                                               */
  EPCA_0_MODE_DSTART_CH1               = 2,     /*!< CH1 : Set the first register in a DMA write transfer to Channel
                                                     1 CCAPVUPD.                                                               */
  EPCA_0_MODE_DSTART_CH2               = 3,     /*!< CH2 : Set the first register in a DMA write transfer to Channel
                                                     2 CCAPVUPD.                                                               */
  EPCA_0_MODE_DSTART_CH3               = 4,     /*!< CH3 : Set the first register in a DMA write transfer to Channel
                                                     3 CCAPVUPD.                                                               */
  EPCA_0_MODE_DSTART_CH4               = 5,     /*!< CH4 : Set the first register in a DMA write transfer to Channel
                                                     4 CCAPVUPD.                                                               */
  EPCA_0_MODE_DSTART_CH5               = 6,     /*!< CH5 : Set the first register in a DMA write transfer to Channel
                                                     5 CCAPVUPD.                                                               */
  EPCA_0_MODE_DSTART_EMPTY             = 7,     /*!< EMPTY : Empty slot.                                                       */
} EPCA_0_MODE_DSTART_Enum;

/* ==============================================  EPCA_0 MODE DBUSYF [25..25]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_DBUSYF                                                        */
  EPCA_0_MODE_DBUSYF_IDLE              = 0,     /*!< IDLE : The DMA channel is not servicing an EPCA control transfer.         */
  EPCA_0_MODE_DBUSYF_BUSY              = 1,     /*!< BUSY : The DMA channel is busy servicing an EPCA control transfer.        */
} EPCA_0_MODE_DBUSYF_Enum;

/* =============================================  EPCA_0 MODE STDOSEL [27..28]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_STDOSEL                                                       */
  EPCA_0_MODE_STDOSEL_NO_DIFF          = 0,     /*!< NO_DIFF : Select the non-differential channel outputs (Channels
                                                     0-5) for the standard PB pins.                                            */
  EPCA_0_MODE_STDOSEL_ONE_DIFF         = 1,     /*!< ONE_DIFF : Select the differential output from Channel 2 and
                                                     non-differential outputs from Channels 0, 1, 3, and 4 for
                                                     the standard PB pins.                                                     */
  EPCA_0_MODE_STDOSEL_TWO_DIFF         = 2,     /*!< TWO_DIFF : Select the differential outputs from Channels 1 and
                                                     2 and non-differential outputs from Channels 0 and 3 for
                                                     the standard PB pins.                                                     */
  EPCA_0_MODE_STDOSEL_THREE_DIFF       = 3,     /*!< THREE_DIFF : Select three differential outputs from Channels
                                                     0, 1, and 2 for the standard PB pins.                                     */
} EPCA_0_MODE_STDOSEL_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  EPCA_0 CONTROL OVFIEN [0..0]  ============================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_OVFIEN                                                     */
  EPCA_0_CONTROL_OVFIEN_DISABLED       = 0,     /*!< DISABLED : Disable the EPCA counter overflow/limit event interrupt.       */
  EPCA_0_CONTROL_OVFIEN_ENABLED        = 1,     /*!< ENABLED : Enable the EPCA counter overflow/limit event interrupt.         */
} EPCA_0_CONTROL_OVFIEN_Enum;

/* =============================================  EPCA_0 CONTROL OVFDEN [1..1]  ============================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_OVFDEN                                                     */
  EPCA_0_CONTROL_OVFDEN_DISABLED       = 0,     /*!< DISABLED : Do not request DMA data when a EPCA counter overflow/limit
                                                     event occurs.                                                             */
  EPCA_0_CONTROL_OVFDEN_ENABLED        = 1,     /*!< ENABLED : Request DMA data when a EPCA counter overflow/limit
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_OVFDEN_Enum;

/* =============================================  EPCA_0 CONTROL OVFSEN [2..2]  ============================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_OVFSEN                                                     */
  EPCA_0_CONTROL_OVFSEN_DISABLED       = 0,     /*!< DISABLED : Do not send a synchronization signal when a EPCA
                                                     counter overflow/limit event occurs.                                      */
  EPCA_0_CONTROL_OVFSEN_ENABLED        = 1,     /*!< ENABLED : Send a synchronization signal when a EPCA counter
                                                     overflow/limit event occurs.                                              */
} EPCA_0_CONTROL_OVFSEN_Enum;

/* =============================================  EPCA_0 CONTROL HALTIEN [3..3]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_HALTIEN                                                    */
  EPCA_0_CONTROL_HALTIEN_DISABLED      = 0,     /*!< DISABLED : Do not generate an interrupt if the EPCA halt input
                                                     is high.                                                                  */
  EPCA_0_CONTROL_HALTIEN_ENABLED       = 1,     /*!< ENABLED : Generate an interrupt if the EPCA halt input is high.           */
} EPCA_0_CONTROL_HALTIEN_Enum;

/* ==============================================  EPCA_0 CONTROL NOUPD [4..4]  ============================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_NOUPD                                                      */
  EPCA_0_CONTROL_NOUPD_INACTIVE        = 0,     /*!< INACTIVE : The EPCA registers will automatically load any new
                                                     update values after an overflow/limit event occurs.                       */
  EPCA_0_CONTROL_NOUPD_ACTIVE          = 1,     /*!< ACTIVE : The EPCA registers will not load any new update values
                                                     after an overflow/limit event occurs.                                     */
} EPCA_0_CONTROL_NOUPD_Enum;

/* =============================================  EPCA_0 CONTROL IDLEBEN [5..5]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_IDLEBEN                                                    */
  EPCA_0_CONTROL_IDLEBEN_DISABLED      = 0,     /*!< DISABLED : The EPCA module will stop running when the core halts
                                                     (idle).                                                                   */
  EPCA_0_CONTROL_IDLEBEN_ENABLED       = 1,     /*!< ENABLED : The EPCA module will continue normal operation when
                                                     the core halts (idle).                                                    */
} EPCA_0_CONTROL_IDLEBEN_Enum;

/* ==============================================  EPCA_0 CONTROL DBGMD [6..6]  ============================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_DBGMD                                                      */
  EPCA_0_CONTROL_DBGMD_HALT            = 0,     /*!< HALT : A debug breakpoint will stop the EPCA counter/timer.               */
  EPCA_0_CONTROL_DBGMD_RUN             = 1,     /*!< RUN : The EPCA will continue to operate while the core is halted
                                                     in debug mode.                                                            */
} EPCA_0_CONTROL_DBGMD_Enum;

/* =============================================  EPCA_0 CONTROL HALTEN [9..9]  ============================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_HALTEN                                                     */
  EPCA_0_CONTROL_HALTEN_DISABLED       = 0,     /*!< DISABLED : The Halt input (PB_HDKill) does not affect the EPCA
                                                     counter/timer.                                                            */
  EPCA_0_CONTROL_HALTEN_ENABLED        = 1,     /*!< ENABLED : An assertion of the Halt input (PB_HDKill) will stop
                                                     the EPCA counter/timer.                                                   */
} EPCA_0_CONTROL_HALTEN_Enum;

/* =============================================  EPCA_0 CONTROL STSEL [11..12]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_STSEL                                                      */
  EPCA_0_CONTROL_STSEL_EPCANT0         = 0,     /*!< EPCANT0 : Select input trigger 0, EPCAnT0 (Comparator 0 Output).          */
  EPCA_0_CONTROL_STSEL_EPCANT1         = 1,     /*!< EPCANT1 : Select input trigger 1, EPCAnT1 (Comparator 1 Output).          */
  EPCA_0_CONTROL_STSEL_EPCANT2         = 2,     /*!< EPCANT2 : Select input trigger 2, EPCAnT2 (Timer 0 High Overflow
                                                     ).                                                                        */
  EPCA_0_CONTROL_STSEL_EPCANT3         = 3,     /*!< EPCANT3 : Select input trigger 3, EPCAnT3 (Timer 1 High Overflow).        */
} EPCA_0_CONTROL_STSEL_Enum;

/* ============================================  EPCA_0 CONTROL STESEL [13..13]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_STESEL                                                     */
  EPCA_0_CONTROL_STESEL_FALLING        = 0,     /*!< FALLING : A high-to-low transition (falling edge) on EPCAnTx
                                                     will start the counter/timer.                                             */
  EPCA_0_CONTROL_STESEL_RISING         = 1,     /*!< RISING : A low-to-high transition (rising edge) on EPCAnTx will
                                                     start the counter/timer.                                                  */
} EPCA_0_CONTROL_STESEL_Enum;

/* =============================================  EPCA_0 CONTROL STEN [14..14]  ============================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_STEN                                                       */
  EPCA_0_CONTROL_STEN_DISABLED         = 0,     /*!< DISABLED : Disable the input trigger (EPCAnTx). The EPCA counter/timer
                                                     will continue to run if the RUN bit is set regardless of
                                                     the value on the input trigger.                                           */
  EPCA_0_CONTROL_STEN_ENABLED          = 1,     /*!< ENABLED : Enable the input trigger (EPCAnTx). If RUN is set
                                                     to 1, the EPCA counter/timer will start running when the
                                                     selected input trigger (STSEL) meets the criteria set by
                                                     STESEL. It will not stop running if the criteria is no
                                                     longer met.                                                               */
} EPCA_0_CONTROL_STEN_Enum;

/* =============================================  EPCA_0 CONTROL DIVST [21..21]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_DIVST                                                      */
  EPCA_0_CONTROL_DIVST_OUTPUT_HIGH     = 0,     /*!< OUTPUT_HIGH : The clock divider is currently in the first half-cycle.     */
  EPCA_0_CONTROL_DIVST_OUTPUT_LOW      = 1,     /*!< OUTPUT_LOW : The clock divider is currently in the second half-cycle.     */
} EPCA_0_CONTROL_DIVST_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ==============================================  EPCA_0 STATUS C0CCI [0..0]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_C0CCI                                                       */
  EPCA_0_STATUS_C0CCI_NOT_SET          = 0,     /*!< NOT_SET : A Channel 0 match or capture event did not occur.               */
  EPCA_0_STATUS_C0CCI_SET              = 1,     /*!< SET : A Channel 0 match or capture event occurred.                        */
} EPCA_0_STATUS_C0CCI_Enum;

/* ==============================================  EPCA_0 STATUS C1CCI [1..1]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_C1CCI                                                       */
  EPCA_0_STATUS_C1CCI_NOT_SET          = 0,     /*!< NOT_SET : A Channel 1 match or capture event did not occur.               */
  EPCA_0_STATUS_C1CCI_SET              = 1,     /*!< SET : A Channel 1 match or capture event occurred.                        */
} EPCA_0_STATUS_C1CCI_Enum;

/* ==============================================  EPCA_0 STATUS C2CCI [2..2]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_C2CCI                                                       */
  EPCA_0_STATUS_C2CCI_NOT_SET          = 0,     /*!< NOT_SET : A Channel 2 match or capture event did not occur.               */
  EPCA_0_STATUS_C2CCI_SET              = 1,     /*!< SET : A Channel 2 match or capture event occurred.                        */
} EPCA_0_STATUS_C2CCI_Enum;

/* ==============================================  EPCA_0 STATUS C3CCI [3..3]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_C3CCI                                                       */
  EPCA_0_STATUS_C3CCI_NOT_SET          = 0,     /*!< NOT_SET : A Channel 3 match or capture event did not occur.               */
  EPCA_0_STATUS_C3CCI_SET              = 1,     /*!< SET : A Channel 3 match or capture event occurred.                        */
} EPCA_0_STATUS_C3CCI_Enum;

/* ==============================================  EPCA_0 STATUS C4CCI [4..4]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_C4CCI                                                       */
  EPCA_0_STATUS_C4CCI_NOT_SET          = 0,     /*!< NOT_SET : A Channel 4 match or capture event did not occur.               */
  EPCA_0_STATUS_C4CCI_SET              = 1,     /*!< SET : A Channel 4 match or capture event occurred.                        */
} EPCA_0_STATUS_C4CCI_Enum;

/* ==============================================  EPCA_0 STATUS C5CCI [5..5]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_C5CCI                                                       */
  EPCA_0_STATUS_C5CCI_NOT_SET          = 0,     /*!< NOT_SET : A Channel 5 match or capture event did not occur.               */
  EPCA_0_STATUS_C5CCI_SET              = 1,     /*!< SET : A Channel 5 match or capture event occurred.                        */
} EPCA_0_STATUS_C5CCI_Enum;

/* ===============================================  EPCA_0 STATUS RUN [6..6]  ================================================ */
typedef enum {                                  /*!< EPCA_0_STATUS_RUN                                                         */
  EPCA_0_STATUS_RUN_STOP               = 0,     /*!< STOP : Stop the EPCA Counter/Timer.                                       */
  EPCA_0_STATUS_RUN_START              = 1,     /*!< START : Start the EPCA Counter/Timer.                                     */
} EPCA_0_STATUS_RUN_Enum;

/* ===============================================  EPCA_0 STATUS OVFI [7..7]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_OVFI                                                        */
  EPCA_0_STATUS_OVFI_NOT_SET           = 0,     /*!< NOT_SET : An EPCA Counter/Timer overflow/limit event did not
                                                     occur.                                                                    */
  EPCA_0_STATUS_OVFI_SET               = 1,     /*!< SET : An EPCA Counter/Timer overflow/limit event occurred.                */
} EPCA_0_STATUS_OVFI_Enum;

/* ==============================================  EPCA_0 STATUS UPDCF [8..8]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_UPDCF                                                       */
  EPCA_0_STATUS_UPDCF_EMPTY            = 0,     /*!< EMPTY : An EPCA register update completed or is not pending.              */
  EPCA_0_STATUS_UPDCF_FULL             = 1,     /*!< FULL : An EPCA register update has not completed and is still
                                                     pending.                                                                  */
} EPCA_0_STATUS_UPDCF_Enum;

/* ==============================================  EPCA_0 STATUS HALTI [9..9]  =============================================== */
typedef enum {                                  /*!< EPCA_0_STATUS_HALTI                                                       */
  EPCA_0_STATUS_HALTI_NOT_SET          = 0,     /*!< NOT_SET : The Halt input (PB_HDKill) was not asserted.                    */
  EPCA_0_STATUS_HALTI_SET              = 1,     /*!< SET : The Halt input (PB_HDKill) was asserted.                            */
} EPCA_0_STATUS_HALTI_Enum;

/* ============================================  EPCA_0 STATUS C0IOVFI [10..10]  ============================================= */
typedef enum {                                  /*!< EPCA_0_STATUS_C0IOVFI                                                     */
  EPCA_0_STATUS_C0IOVFI_NOT_SET        = 0,     /*!< NOT_SET : Channel 0 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  EPCA_0_STATUS_C0IOVFI_SET            = 1,     /*!< SET : Channel 0 counted past the channel n-bit mode limit.                */
} EPCA_0_STATUS_C0IOVFI_Enum;

/* ============================================  EPCA_0 STATUS C1IOVFI [11..11]  ============================================= */
typedef enum {                                  /*!< EPCA_0_STATUS_C1IOVFI                                                     */
  EPCA_0_STATUS_C1IOVFI_NOT_SET        = 0,     /*!< NOT_SET : Channel 1 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  EPCA_0_STATUS_C1IOVFI_SET            = 1,     /*!< SET : Channel 1 counted past the channel n-bit mode limit.                */
} EPCA_0_STATUS_C1IOVFI_Enum;

/* ============================================  EPCA_0 STATUS C2IOVFI [12..12]  ============================================= */
typedef enum {                                  /*!< EPCA_0_STATUS_C2IOVFI                                                     */
  EPCA_0_STATUS_C2IOVFI_NOT_SET        = 0,     /*!< NOT_SET : Channel 2 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  EPCA_0_STATUS_C2IOVFI_SET            = 1,     /*!< SET : Channel 2 counted past the channel n-bit mode limit.                */
} EPCA_0_STATUS_C2IOVFI_Enum;

/* ============================================  EPCA_0 STATUS C3IOVFI [13..13]  ============================================= */
typedef enum {                                  /*!< EPCA_0_STATUS_C3IOVFI                                                     */
  EPCA_0_STATUS_C3IOVFI_NOT_SET        = 0,     /*!< NOT_SET : Channel 3 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  EPCA_0_STATUS_C3IOVFI_SET            = 1,     /*!< SET : Channel 3 counted past the channel n-bit mode limit.                */
} EPCA_0_STATUS_C3IOVFI_Enum;

/* ============================================  EPCA_0 STATUS C4IOVFI [14..14]  ============================================= */
typedef enum {                                  /*!< EPCA_0_STATUS_C4IOVFI                                                     */
  EPCA_0_STATUS_C4IOVFI_NOT_SET        = 0,     /*!< NOT_SET : Channel 4 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  EPCA_0_STATUS_C4IOVFI_SET            = 1,     /*!< SET : Channel 4 counted past the channel n-bit mode limit.                */
} EPCA_0_STATUS_C4IOVFI_Enum;

/* ============================================  EPCA_0 STATUS C5IOVFI [15..15]  ============================================= */
typedef enum {                                  /*!< EPCA_0_STATUS_C5IOVFI                                                     */
  EPCA_0_STATUS_C5IOVFI_NOT_SET        = 0,     /*!< NOT_SET : Channel 5 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  EPCA_0_STATUS_C5IOVFI_SET            = 1,     /*!< SET : Channel 5 counted past the channel n-bit mode limit.                */
} EPCA_0_STATUS_C5IOVFI_Enum;

/* ========================================================  COUNTER  ======================================================== */
/* =========================================================  LIMIT  ========================================================= */
/* =======================================================  LIMITUPD  ======================================================== */
/* =========================================================  DTIME  ========================================================= */
/* ========================================================  DTARGET  ======================================================== */
/* ========================================================  MODE_0  ========================================================= */
/* ==============================================  EPCA_0 MODE_0 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_0_COSEL                                                       */
  EPCA_0_MODE_0_COSEL_TOGGLE_OUTPUT    = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_0_COSEL_SET_OUTPUT       = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_0_COSEL_CLEAR_OUTPUT     = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_0_COSEL_NO_CHANGE        = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} EPCA_0_MODE_0_COSEL_Enum;

/* ==============================================  EPCA_0 MODE_0 DIFGEN [6..6]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_0_DIFGEN                                                      */
  EPCA_0_MODE_0_DIFGEN_DISABLED        = 0,     /*!< DISABLED : Disable the differential signal generator. The channel
                                                     will output a single non-differential output.                             */
  EPCA_0_MODE_0_DIFGEN_ENABLED         = 1,     /*!< ENABLED : Enable the differential signal generator. The channel
                                                     will output two differential outputs: X Phase (XPH) and
                                                     Y Phase (YPH).                                                            */
} EPCA_0_MODE_0_DIFGEN_Enum;

/* ===============================================  EPCA_0 MODE_0 CMD [8..10]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_0_CMD                                                         */
  EPCA_0_MODE_0_CMD_EDGE_PWM           = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  EPCA_0_MODE_0_CMD_CENTER_ALIGNED_PWM = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  EPCA_0_MODE_0_CMD_HF_SQUARE_WAVE     = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  EPCA_0_MODE_0_CMD_TIMER_CAPTURE      = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  EPCA_0_MODE_0_CMD_N_BIT_PWM          = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} EPCA_0_MODE_0_CMD_Enum;

/* =======================================================  CONTROL_0  ======================================================= */
/* ============================================  EPCA_0 CONTROL_0 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_COUTST                                                   */
  EPCA_0_CONTROL_0_COUTST_LOW          = 0,     /*!< LOW : The channel output state is low.                                    */
  EPCA_0_CONTROL_0_COUTST_HIGH         = 1,     /*!< HIGH : The channel output state is high.                                  */
} EPCA_0_CONTROL_0_COUTST_Enum;

/* ============================================  EPCA_0 CONTROL_0 CPCAPEN [1..1]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CPCAPEN                                                  */
  EPCA_0_CONTROL_0_CPCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  EPCA_0_CONTROL_0_CPCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} EPCA_0_CONTROL_0_CPCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_0 CNCAPEN [2..2]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CNCAPEN                                                  */
  EPCA_0_CONTROL_0_CNCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  EPCA_0_CONTROL_0_CNCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} EPCA_0_CONTROL_0_CNCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_0 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CUPDCF                                                   */
  EPCA_0_CONTROL_0_CUPDCF_NOT_SET      = 0,     /*!< NOT_SET : A EPCA channel register update completed or is not
                                                     pending.                                                                  */
  EPCA_0_CONTROL_0_CUPDCF_SET          = 1,     /*!< SET : A EPCA channel register update has not completed and is
                                                     still pending.                                                            */
} EPCA_0_CONTROL_0_CUPDCF_Enum;

/* =============================================  EPCA_0 CONTROL_0 YPHST [5..5]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_YPHST                                                    */
  EPCA_0_CONTROL_0_YPHST_LOW           = 0,     /*!< LOW : Set the Y Phase output state to low.                                */
  EPCA_0_CONTROL_0_YPHST_HIGH          = 1,     /*!< HIGH : Set the Y Phase output state to high.                              */
} EPCA_0_CONTROL_0_YPHST_Enum;

/* ===========================================  EPCA_0 CONTROL_0 ACTIVEPH [6..6]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_ACTIVEPH                                                 */
  EPCA_0_CONTROL_0_ACTIVEPH_YACTIVE    = 0,     /*!< YACTIVE : The Y Phase is active and X Phase is inactive.                  */
  EPCA_0_CONTROL_0_ACTIVEPH_XACTIVE    = 1,     /*!< XACTIVE : The X Phase is active and Y Phase is inactive.                  */
} EPCA_0_CONTROL_0_ACTIVEPH_Enum;

/* =============================================  EPCA_0 CONTROL_0 XPHST [7..7]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_XPHST                                                    */
  EPCA_0_CONTROL_0_XPHST_LOW           = 0,     /*!< LOW : Set the X Phase output state to low.                                */
  EPCA_0_CONTROL_0_XPHST_HIGH          = 1,     /*!< HIGH : Set the X Phase output state to high.                              */
} EPCA_0_CONTROL_0_XPHST_Enum;

/* =============================================  EPCA_0 CONTROL_0 CCIEN [8..8]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CCIEN                                                    */
  EPCA_0_CONTROL_0_CCIEN_DISABLED      = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  EPCA_0_CONTROL_0_CCIEN_ENABLED       = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} EPCA_0_CONTROL_0_CCIEN_Enum;

/* =============================================  EPCA_0 CONTROL_0 CCDEN [9..9]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CCDEN                                                    */
  EPCA_0_CONTROL_0_CCDEN_DISABLED      = 0,     /*!< DISABLED : Do not request DMA data when a channel capture/compare
                                                     event occurs.                                                             */
  EPCA_0_CONTROL_0_CCDEN_ENABLED       = 1,     /*!< ENABLED : Request DMA data when a channel capture/compare event
                                                     occurs.                                                                   */
} EPCA_0_CONTROL_0_CCDEN_Enum;

/* ============================================  EPCA_0 CONTROL_0 CCSEN [10..10]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CCSEN                                                    */
  EPCA_0_CONTROL_0_CCSEN_DISABLED      = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     capture/compare event occurs.                                             */
  EPCA_0_CONTROL_0_CCSEN_ENABLED       = 1,     /*!< ENABLED : Send a synchronization signal when a channel capture/compare
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_0_CCSEN_Enum;

/* ==========================================  EPCA_0 CONTROL_0 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CIOVFIEN                                                 */
  EPCA_0_CONTROL_0_CIOVFIEN_DISABLED   = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  EPCA_0_CONTROL_0_CIOVFIEN_ENABLED    = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} EPCA_0_CONTROL_0_CIOVFIEN_Enum;

/* ==========================================  EPCA_0 CONTROL_0 CIOVFDEN [12..12]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CIOVFDEN                                                 */
  EPCA_0_CONTROL_0_CIOVFDEN_DISABLED   = 0,     /*!< DISABLED : Do not request DMA data when a channel intermediate
                                                     overflow event occurs.                                                    */
  EPCA_0_CONTROL_0_CIOVFDEN_ENABLED    = 1,     /*!< ENABLED : Request DMA data when a channel intermediate overflow
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_0_CIOVFDEN_Enum;

/* ==========================================  EPCA_0 CONTROL_0 CIOVFSEN [13..13]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_0_CIOVFSEN                                                 */
  EPCA_0_CONTROL_0_CIOVFSEN_DISABLED   = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     intermediate overflow event occurs.                                       */
  EPCA_0_CONTROL_0_CIOVFSEN_ENABLED    = 1,     /*!< ENABLED : Send a synchronization signal when a channel intermediate
                                                     overflow occurs.                                                          */
} EPCA_0_CONTROL_0_CIOVFSEN_Enum;

/* ========================================================  CCAPV_0  ======================================================== */
/* ======================================================  CCAPVUPD_0  ======================================================= */
/* ========================================================  MODE_1  ========================================================= */
/* ==============================================  EPCA_0 MODE_1 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_1_COSEL                                                       */
  EPCA_0_MODE_1_COSEL_TOGGLE_OUTPUT    = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_1_COSEL_SET_OUTPUT       = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_1_COSEL_CLEAR_OUTPUT     = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_1_COSEL_NO_CHANGE        = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} EPCA_0_MODE_1_COSEL_Enum;

/* ==============================================  EPCA_0 MODE_1 DIFGEN [6..6]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_1_DIFGEN                                                      */
  EPCA_0_MODE_1_DIFGEN_DISABLED        = 0,     /*!< DISABLED : Disable the differential signal generator. The channel
                                                     will output a single non-differential output.                             */
  EPCA_0_MODE_1_DIFGEN_ENABLED         = 1,     /*!< ENABLED : Enable the differential signal generator. The channel
                                                     will output two differential outputs: X Phase (XPH) and
                                                     Y Phase (YPH).                                                            */
} EPCA_0_MODE_1_DIFGEN_Enum;

/* ===============================================  EPCA_0 MODE_1 CMD [8..10]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_1_CMD                                                         */
  EPCA_0_MODE_1_CMD_EDGE_PWM           = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  EPCA_0_MODE_1_CMD_CENTER_ALIGNED_PWM = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  EPCA_0_MODE_1_CMD_HF_SQUARE_WAVE     = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  EPCA_0_MODE_1_CMD_TIMER_CAPTURE      = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  EPCA_0_MODE_1_CMD_N_BIT_PWM          = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} EPCA_0_MODE_1_CMD_Enum;

/* =======================================================  CONTROL_1  ======================================================= */
/* ============================================  EPCA_0 CONTROL_1 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_COUTST                                                   */
  EPCA_0_CONTROL_1_COUTST_LOW          = 0,     /*!< LOW : The channel output state is low.                                    */
  EPCA_0_CONTROL_1_COUTST_HIGH         = 1,     /*!< HIGH : The channel output state is high.                                  */
} EPCA_0_CONTROL_1_COUTST_Enum;

/* ============================================  EPCA_0 CONTROL_1 CPCAPEN [1..1]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CPCAPEN                                                  */
  EPCA_0_CONTROL_1_CPCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  EPCA_0_CONTROL_1_CPCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} EPCA_0_CONTROL_1_CPCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_1 CNCAPEN [2..2]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CNCAPEN                                                  */
  EPCA_0_CONTROL_1_CNCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  EPCA_0_CONTROL_1_CNCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} EPCA_0_CONTROL_1_CNCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_1 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CUPDCF                                                   */
  EPCA_0_CONTROL_1_CUPDCF_NOT_SET      = 0,     /*!< NOT_SET : A EPCA channel register update completed or is not
                                                     pending.                                                                  */
  EPCA_0_CONTROL_1_CUPDCF_SET          = 1,     /*!< SET : A EPCA channel register update has not completed and is
                                                     still pending.                                                            */
} EPCA_0_CONTROL_1_CUPDCF_Enum;

/* =============================================  EPCA_0 CONTROL_1 YPHST [5..5]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_YPHST                                                    */
  EPCA_0_CONTROL_1_YPHST_LOW           = 0,     /*!< LOW : Set the Y Phase output state to low.                                */
  EPCA_0_CONTROL_1_YPHST_HIGH          = 1,     /*!< HIGH : Set the Y Phase output state to high.                              */
} EPCA_0_CONTROL_1_YPHST_Enum;

/* ===========================================  EPCA_0 CONTROL_1 ACTIVEPH [6..6]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_ACTIVEPH                                                 */
  EPCA_0_CONTROL_1_ACTIVEPH_YACTIVE    = 0,     /*!< YACTIVE : The Y Phase is active and X Phase is inactive.                  */
  EPCA_0_CONTROL_1_ACTIVEPH_XACTIVE    = 1,     /*!< XACTIVE : The X Phase is active and Y Phase is inactive.                  */
} EPCA_0_CONTROL_1_ACTIVEPH_Enum;

/* =============================================  EPCA_0 CONTROL_1 XPHST [7..7]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_XPHST                                                    */
  EPCA_0_CONTROL_1_XPHST_LOW           = 0,     /*!< LOW : Set the X Phase output state to low.                                */
  EPCA_0_CONTROL_1_XPHST_HIGH          = 1,     /*!< HIGH : Set the X Phase output state to high.                              */
} EPCA_0_CONTROL_1_XPHST_Enum;

/* =============================================  EPCA_0 CONTROL_1 CCIEN [8..8]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CCIEN                                                    */
  EPCA_0_CONTROL_1_CCIEN_DISABLED      = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  EPCA_0_CONTROL_1_CCIEN_ENABLED       = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} EPCA_0_CONTROL_1_CCIEN_Enum;

/* =============================================  EPCA_0 CONTROL_1 CCDEN [9..9]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CCDEN                                                    */
  EPCA_0_CONTROL_1_CCDEN_DISABLED      = 0,     /*!< DISABLED : Do not request DMA data when a channel capture/compare
                                                     event occurs.                                                             */
  EPCA_0_CONTROL_1_CCDEN_ENABLED       = 1,     /*!< ENABLED : Request DMA data when a channel capture/compare event
                                                     occurs.                                                                   */
} EPCA_0_CONTROL_1_CCDEN_Enum;

/* ============================================  EPCA_0 CONTROL_1 CCSEN [10..10]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CCSEN                                                    */
  EPCA_0_CONTROL_1_CCSEN_DISABLED      = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     capture/compare event occurs.                                             */
  EPCA_0_CONTROL_1_CCSEN_ENABLED       = 1,     /*!< ENABLED : Send a synchronization signal when a channel capture/compare
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_1_CCSEN_Enum;

/* ==========================================  EPCA_0 CONTROL_1 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CIOVFIEN                                                 */
  EPCA_0_CONTROL_1_CIOVFIEN_DISABLED   = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  EPCA_0_CONTROL_1_CIOVFIEN_ENABLED    = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} EPCA_0_CONTROL_1_CIOVFIEN_Enum;

/* ==========================================  EPCA_0 CONTROL_1 CIOVFDEN [12..12]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CIOVFDEN                                                 */
  EPCA_0_CONTROL_1_CIOVFDEN_DISABLED   = 0,     /*!< DISABLED : Do not request DMA data when a channel intermediate
                                                     overflow event occurs.                                                    */
  EPCA_0_CONTROL_1_CIOVFDEN_ENABLED    = 1,     /*!< ENABLED : Request DMA data when a channel intermediate overflow
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_1_CIOVFDEN_Enum;

/* ==========================================  EPCA_0 CONTROL_1 CIOVFSEN [13..13]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_1_CIOVFSEN                                                 */
  EPCA_0_CONTROL_1_CIOVFSEN_DISABLED   = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     intermediate overflow event occurs.                                       */
  EPCA_0_CONTROL_1_CIOVFSEN_ENABLED    = 1,     /*!< ENABLED : Send a synchronization signal when a channel intermediate
                                                     overflow occurs.                                                          */
} EPCA_0_CONTROL_1_CIOVFSEN_Enum;

/* ========================================================  CCAPV_1  ======================================================== */
/* ======================================================  CCAPVUPD_1  ======================================================= */
/* ========================================================  MODE_2  ========================================================= */
/* ==============================================  EPCA_0 MODE_2 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_2_COSEL                                                       */
  EPCA_0_MODE_2_COSEL_TOGGLE_OUTPUT    = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_2_COSEL_SET_OUTPUT       = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_2_COSEL_CLEAR_OUTPUT     = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_2_COSEL_NO_CHANGE        = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} EPCA_0_MODE_2_COSEL_Enum;

/* ==============================================  EPCA_0 MODE_2 DIFGEN [6..6]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_2_DIFGEN                                                      */
  EPCA_0_MODE_2_DIFGEN_DISABLED        = 0,     /*!< DISABLED : Disable the differential signal generator. The channel
                                                     will output a single non-differential output.                             */
  EPCA_0_MODE_2_DIFGEN_ENABLED         = 1,     /*!< ENABLED : Enable the differential signal generator. The channel
                                                     will output two differential outputs: X Phase (XPH) and
                                                     Y Phase (YPH).                                                            */
} EPCA_0_MODE_2_DIFGEN_Enum;

/* ===============================================  EPCA_0 MODE_2 CMD [8..10]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_2_CMD                                                         */
  EPCA_0_MODE_2_CMD_EDGE_PWM           = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  EPCA_0_MODE_2_CMD_CENTER_ALIGNED_PWM = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  EPCA_0_MODE_2_CMD_HF_SQUARE_WAVE     = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  EPCA_0_MODE_2_CMD_TIMER_CAPTURE      = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  EPCA_0_MODE_2_CMD_N_BIT_PWM          = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} EPCA_0_MODE_2_CMD_Enum;

/* =======================================================  CONTROL_2  ======================================================= */
/* ============================================  EPCA_0 CONTROL_2 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_COUTST                                                   */
  EPCA_0_CONTROL_2_COUTST_LOW          = 0,     /*!< LOW : The channel output state is low.                                    */
  EPCA_0_CONTROL_2_COUTST_HIGH         = 1,     /*!< HIGH : The channel output state is high.                                  */
} EPCA_0_CONTROL_2_COUTST_Enum;

/* ============================================  EPCA_0 CONTROL_2 CPCAPEN [1..1]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CPCAPEN                                                  */
  EPCA_0_CONTROL_2_CPCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  EPCA_0_CONTROL_2_CPCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} EPCA_0_CONTROL_2_CPCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_2 CNCAPEN [2..2]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CNCAPEN                                                  */
  EPCA_0_CONTROL_2_CNCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  EPCA_0_CONTROL_2_CNCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} EPCA_0_CONTROL_2_CNCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_2 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CUPDCF                                                   */
  EPCA_0_CONTROL_2_CUPDCF_NOT_SET      = 0,     /*!< NOT_SET : A EPCA channel register update completed or is not
                                                     pending.                                                                  */
  EPCA_0_CONTROL_2_CUPDCF_SET          = 1,     /*!< SET : A EPCA channel register update has not completed and is
                                                     still pending.                                                            */
} EPCA_0_CONTROL_2_CUPDCF_Enum;

/* =============================================  EPCA_0 CONTROL_2 YPHST [5..5]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_YPHST                                                    */
  EPCA_0_CONTROL_2_YPHST_LOW           = 0,     /*!< LOW : Set the Y Phase output state to low.                                */
  EPCA_0_CONTROL_2_YPHST_HIGH          = 1,     /*!< HIGH : Set the Y Phase output state to high.                              */
} EPCA_0_CONTROL_2_YPHST_Enum;

/* ===========================================  EPCA_0 CONTROL_2 ACTIVEPH [6..6]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_ACTIVEPH                                                 */
  EPCA_0_CONTROL_2_ACTIVEPH_YACTIVE    = 0,     /*!< YACTIVE : The Y Phase is active and X Phase is inactive.                  */
  EPCA_0_CONTROL_2_ACTIVEPH_XACTIVE    = 1,     /*!< XACTIVE : The X Phase is active and Y Phase is inactive.                  */
} EPCA_0_CONTROL_2_ACTIVEPH_Enum;

/* =============================================  EPCA_0 CONTROL_2 XPHST [7..7]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_XPHST                                                    */
  EPCA_0_CONTROL_2_XPHST_LOW           = 0,     /*!< LOW : Set the X Phase output state to low.                                */
  EPCA_0_CONTROL_2_XPHST_HIGH          = 1,     /*!< HIGH : Set the X Phase output state to high.                              */
} EPCA_0_CONTROL_2_XPHST_Enum;

/* =============================================  EPCA_0 CONTROL_2 CCIEN [8..8]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CCIEN                                                    */
  EPCA_0_CONTROL_2_CCIEN_DISABLED      = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  EPCA_0_CONTROL_2_CCIEN_ENABLED       = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} EPCA_0_CONTROL_2_CCIEN_Enum;

/* =============================================  EPCA_0 CONTROL_2 CCDEN [9..9]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CCDEN                                                    */
  EPCA_0_CONTROL_2_CCDEN_DISABLED      = 0,     /*!< DISABLED : Do not request DMA data when a channel capture/compare
                                                     event occurs.                                                             */
  EPCA_0_CONTROL_2_CCDEN_ENABLED       = 1,     /*!< ENABLED : Request DMA data when a channel capture/compare event
                                                     occurs.                                                                   */
} EPCA_0_CONTROL_2_CCDEN_Enum;

/* ============================================  EPCA_0 CONTROL_2 CCSEN [10..10]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CCSEN                                                    */
  EPCA_0_CONTROL_2_CCSEN_DISABLED      = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     capture/compare event occurs.                                             */
  EPCA_0_CONTROL_2_CCSEN_ENABLED       = 1,     /*!< ENABLED : Send a synchronization signal when a channel capture/compare
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_2_CCSEN_Enum;

/* ==========================================  EPCA_0 CONTROL_2 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CIOVFIEN                                                 */
  EPCA_0_CONTROL_2_CIOVFIEN_DISABLED   = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  EPCA_0_CONTROL_2_CIOVFIEN_ENABLED    = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} EPCA_0_CONTROL_2_CIOVFIEN_Enum;

/* ==========================================  EPCA_0 CONTROL_2 CIOVFDEN [12..12]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CIOVFDEN                                                 */
  EPCA_0_CONTROL_2_CIOVFDEN_DISABLED   = 0,     /*!< DISABLED : Do not request DMA data when a channel intermediate
                                                     overflow event occurs.                                                    */
  EPCA_0_CONTROL_2_CIOVFDEN_ENABLED    = 1,     /*!< ENABLED : Request DMA data when a channel intermediate overflow
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_2_CIOVFDEN_Enum;

/* ==========================================  EPCA_0 CONTROL_2 CIOVFSEN [13..13]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_2_CIOVFSEN                                                 */
  EPCA_0_CONTROL_2_CIOVFSEN_DISABLED   = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     intermediate overflow event occurs.                                       */
  EPCA_0_CONTROL_2_CIOVFSEN_ENABLED    = 1,     /*!< ENABLED : Send a synchronization signal when a channel intermediate
                                                     overflow occurs.                                                          */
} EPCA_0_CONTROL_2_CIOVFSEN_Enum;

/* ========================================================  CCAPV_2  ======================================================== */
/* ======================================================  CCAPVUPD_2  ======================================================= */
/* ========================================================  MODE_3  ========================================================= */
/* ==============================================  EPCA_0 MODE_3 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_3_COSEL                                                       */
  EPCA_0_MODE_3_COSEL_TOGGLE_OUTPUT    = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_3_COSEL_SET_OUTPUT       = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_3_COSEL_CLEAR_OUTPUT     = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_3_COSEL_NO_CHANGE        = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} EPCA_0_MODE_3_COSEL_Enum;

/* ==============================================  EPCA_0 MODE_3 DIFGEN [6..6]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_3_DIFGEN                                                      */
  EPCA_0_MODE_3_DIFGEN_DISABLED        = 0,     /*!< DISABLED : Disable the differential signal generator. The channel
                                                     will output a single non-differential output.                             */
  EPCA_0_MODE_3_DIFGEN_ENABLED         = 1,     /*!< ENABLED : Enable the differential signal generator. The channel
                                                     will output two differential outputs: X Phase (XPH) and
                                                     Y Phase (YPH).                                                            */
} EPCA_0_MODE_3_DIFGEN_Enum;

/* ===============================================  EPCA_0 MODE_3 CMD [8..10]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_3_CMD                                                         */
  EPCA_0_MODE_3_CMD_EDGE_PWM           = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  EPCA_0_MODE_3_CMD_CENTER_ALIGNED_PWM = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  EPCA_0_MODE_3_CMD_HF_SQUARE_WAVE     = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  EPCA_0_MODE_3_CMD_TIMER_CAPTURE      = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  EPCA_0_MODE_3_CMD_N_BIT_PWM          = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} EPCA_0_MODE_3_CMD_Enum;

/* =======================================================  CONTROL_3  ======================================================= */
/* ============================================  EPCA_0 CONTROL_3 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_COUTST                                                   */
  EPCA_0_CONTROL_3_COUTST_LOW          = 0,     /*!< LOW : The channel output state is low.                                    */
  EPCA_0_CONTROL_3_COUTST_HIGH         = 1,     /*!< HIGH : The channel output state is high.                                  */
} EPCA_0_CONTROL_3_COUTST_Enum;

/* ============================================  EPCA_0 CONTROL_3 CPCAPEN [1..1]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CPCAPEN                                                  */
  EPCA_0_CONTROL_3_CPCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  EPCA_0_CONTROL_3_CPCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} EPCA_0_CONTROL_3_CPCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_3 CNCAPEN [2..2]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CNCAPEN                                                  */
  EPCA_0_CONTROL_3_CNCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  EPCA_0_CONTROL_3_CNCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} EPCA_0_CONTROL_3_CNCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_3 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CUPDCF                                                   */
  EPCA_0_CONTROL_3_CUPDCF_NOT_SET      = 0,     /*!< NOT_SET : A EPCA channel register update completed or is not
                                                     pending.                                                                  */
  EPCA_0_CONTROL_3_CUPDCF_SET          = 1,     /*!< SET : A EPCA channel register update has not completed and is
                                                     still pending.                                                            */
} EPCA_0_CONTROL_3_CUPDCF_Enum;

/* =============================================  EPCA_0 CONTROL_3 YPHST [5..5]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_YPHST                                                    */
  EPCA_0_CONTROL_3_YPHST_LOW           = 0,     /*!< LOW : Set the Y Phase output state to low.                                */
  EPCA_0_CONTROL_3_YPHST_HIGH          = 1,     /*!< HIGH : Set the Y Phase output state to high.                              */
} EPCA_0_CONTROL_3_YPHST_Enum;

/* ===========================================  EPCA_0 CONTROL_3 ACTIVEPH [6..6]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_ACTIVEPH                                                 */
  EPCA_0_CONTROL_3_ACTIVEPH_YACTIVE    = 0,     /*!< YACTIVE : The Y Phase is active and X Phase is inactive.                  */
  EPCA_0_CONTROL_3_ACTIVEPH_XACTIVE    = 1,     /*!< XACTIVE : The X Phase is active and Y Phase is inactive.                  */
} EPCA_0_CONTROL_3_ACTIVEPH_Enum;

/* =============================================  EPCA_0 CONTROL_3 XPHST [7..7]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_XPHST                                                    */
  EPCA_0_CONTROL_3_XPHST_LOW           = 0,     /*!< LOW : Set the X Phase output state to low.                                */
  EPCA_0_CONTROL_3_XPHST_HIGH          = 1,     /*!< HIGH : Set the X Phase output state to high.                              */
} EPCA_0_CONTROL_3_XPHST_Enum;

/* =============================================  EPCA_0 CONTROL_3 CCIEN [8..8]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CCIEN                                                    */
  EPCA_0_CONTROL_3_CCIEN_DISABLED      = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  EPCA_0_CONTROL_3_CCIEN_ENABLED       = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} EPCA_0_CONTROL_3_CCIEN_Enum;

/* =============================================  EPCA_0 CONTROL_3 CCDEN [9..9]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CCDEN                                                    */
  EPCA_0_CONTROL_3_CCDEN_DISABLED      = 0,     /*!< DISABLED : Do not request DMA data when a channel capture/compare
                                                     event occurs.                                                             */
  EPCA_0_CONTROL_3_CCDEN_ENABLED       = 1,     /*!< ENABLED : Request DMA data when a channel capture/compare event
                                                     occurs.                                                                   */
} EPCA_0_CONTROL_3_CCDEN_Enum;

/* ============================================  EPCA_0 CONTROL_3 CCSEN [10..10]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CCSEN                                                    */
  EPCA_0_CONTROL_3_CCSEN_DISABLED      = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     capture/compare event occurs.                                             */
  EPCA_0_CONTROL_3_CCSEN_ENABLED       = 1,     /*!< ENABLED : Send a synchronization signal when a channel capture/compare
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_3_CCSEN_Enum;

/* ==========================================  EPCA_0 CONTROL_3 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CIOVFIEN                                                 */
  EPCA_0_CONTROL_3_CIOVFIEN_DISABLED   = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  EPCA_0_CONTROL_3_CIOVFIEN_ENABLED    = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} EPCA_0_CONTROL_3_CIOVFIEN_Enum;

/* ==========================================  EPCA_0 CONTROL_3 CIOVFDEN [12..12]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CIOVFDEN                                                 */
  EPCA_0_CONTROL_3_CIOVFDEN_DISABLED   = 0,     /*!< DISABLED : Do not request DMA data when a channel intermediate
                                                     overflow event occurs.                                                    */
  EPCA_0_CONTROL_3_CIOVFDEN_ENABLED    = 1,     /*!< ENABLED : Request DMA data when a channel intermediate overflow
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_3_CIOVFDEN_Enum;

/* ==========================================  EPCA_0 CONTROL_3 CIOVFSEN [13..13]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_3_CIOVFSEN                                                 */
  EPCA_0_CONTROL_3_CIOVFSEN_DISABLED   = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     intermediate overflow event occurs.                                       */
  EPCA_0_CONTROL_3_CIOVFSEN_ENABLED    = 1,     /*!< ENABLED : Send a synchronization signal when a channel intermediate
                                                     overflow occurs.                                                          */
} EPCA_0_CONTROL_3_CIOVFSEN_Enum;

/* ========================================================  CCAPV_3  ======================================================== */
/* ======================================================  CCAPVUPD_3  ======================================================= */
/* ========================================================  MODE_4  ========================================================= */
/* ==============================================  EPCA_0 MODE_4 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_4_COSEL                                                       */
  EPCA_0_MODE_4_COSEL_TOGGLE_OUTPUT    = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_4_COSEL_SET_OUTPUT       = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_4_COSEL_CLEAR_OUTPUT     = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_4_COSEL_NO_CHANGE        = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} EPCA_0_MODE_4_COSEL_Enum;

/* ==============================================  EPCA_0 MODE_4 DIFGEN [6..6]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_4_DIFGEN                                                      */
  EPCA_0_MODE_4_DIFGEN_DISABLED        = 0,     /*!< DISABLED : Disable the differential signal generator. The channel
                                                     will output a single non-differential output.                             */
  EPCA_0_MODE_4_DIFGEN_ENABLED         = 1,     /*!< ENABLED : Enable the differential signal generator. The channel
                                                     will output two differential outputs: X Phase (XPH) and
                                                     Y Phase (YPH).                                                            */
} EPCA_0_MODE_4_DIFGEN_Enum;

/* ===============================================  EPCA_0 MODE_4 CMD [8..10]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_4_CMD                                                         */
  EPCA_0_MODE_4_CMD_EDGE_PWM           = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  EPCA_0_MODE_4_CMD_CENTER_ALIGNED_PWM = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  EPCA_0_MODE_4_CMD_HF_SQUARE_WAVE     = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  EPCA_0_MODE_4_CMD_TIMER_CAPTURE      = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  EPCA_0_MODE_4_CMD_N_BIT_PWM          = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} EPCA_0_MODE_4_CMD_Enum;

/* =======================================================  CONTROL_4  ======================================================= */
/* ============================================  EPCA_0 CONTROL_4 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_COUTST                                                   */
  EPCA_0_CONTROL_4_COUTST_LOW          = 0,     /*!< LOW : The channel output state is low.                                    */
  EPCA_0_CONTROL_4_COUTST_HIGH         = 1,     /*!< HIGH : The channel output state is high.                                  */
} EPCA_0_CONTROL_4_COUTST_Enum;

/* ============================================  EPCA_0 CONTROL_4 CPCAPEN [1..1]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CPCAPEN                                                  */
  EPCA_0_CONTROL_4_CPCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  EPCA_0_CONTROL_4_CPCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} EPCA_0_CONTROL_4_CPCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_4 CNCAPEN [2..2]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CNCAPEN                                                  */
  EPCA_0_CONTROL_4_CNCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  EPCA_0_CONTROL_4_CNCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} EPCA_0_CONTROL_4_CNCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_4 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CUPDCF                                                   */
  EPCA_0_CONTROL_4_CUPDCF_NOT_SET      = 0,     /*!< NOT_SET : A EPCA channel register update completed or is not
                                                     pending.                                                                  */
  EPCA_0_CONTROL_4_CUPDCF_SET          = 1,     /*!< SET : A EPCA channel register update has not completed and is
                                                     still pending.                                                            */
} EPCA_0_CONTROL_4_CUPDCF_Enum;

/* =============================================  EPCA_0 CONTROL_4 YPHST [5..5]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_YPHST                                                    */
  EPCA_0_CONTROL_4_YPHST_LOW           = 0,     /*!< LOW : Set the Y Phase output state to low.                                */
  EPCA_0_CONTROL_4_YPHST_HIGH          = 1,     /*!< HIGH : Set the Y Phase output state to high.                              */
} EPCA_0_CONTROL_4_YPHST_Enum;

/* ===========================================  EPCA_0 CONTROL_4 ACTIVEPH [6..6]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_ACTIVEPH                                                 */
  EPCA_0_CONTROL_4_ACTIVEPH_YACTIVE    = 0,     /*!< YACTIVE : The Y Phase is active and X Phase is inactive.                  */
  EPCA_0_CONTROL_4_ACTIVEPH_XACTIVE    = 1,     /*!< XACTIVE : The X Phase is active and Y Phase is inactive.                  */
} EPCA_0_CONTROL_4_ACTIVEPH_Enum;

/* =============================================  EPCA_0 CONTROL_4 XPHST [7..7]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_XPHST                                                    */
  EPCA_0_CONTROL_4_XPHST_LOW           = 0,     /*!< LOW : Set the X Phase output state to low.                                */
  EPCA_0_CONTROL_4_XPHST_HIGH          = 1,     /*!< HIGH : Set the X Phase output state to high.                              */
} EPCA_0_CONTROL_4_XPHST_Enum;

/* =============================================  EPCA_0 CONTROL_4 CCIEN [8..8]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CCIEN                                                    */
  EPCA_0_CONTROL_4_CCIEN_DISABLED      = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  EPCA_0_CONTROL_4_CCIEN_ENABLED       = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} EPCA_0_CONTROL_4_CCIEN_Enum;

/* =============================================  EPCA_0 CONTROL_4 CCDEN [9..9]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CCDEN                                                    */
  EPCA_0_CONTROL_4_CCDEN_DISABLED      = 0,     /*!< DISABLED : Do not request DMA data when a channel capture/compare
                                                     event occurs.                                                             */
  EPCA_0_CONTROL_4_CCDEN_ENABLED       = 1,     /*!< ENABLED : Request DMA data when a channel capture/compare event
                                                     occurs.                                                                   */
} EPCA_0_CONTROL_4_CCDEN_Enum;

/* ============================================  EPCA_0 CONTROL_4 CCSEN [10..10]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CCSEN                                                    */
  EPCA_0_CONTROL_4_CCSEN_DISABLED      = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     capture/compare event occurs.                                             */
  EPCA_0_CONTROL_4_CCSEN_ENABLED       = 1,     /*!< ENABLED : Send a synchronization signal when a channel capture/compare
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_4_CCSEN_Enum;

/* ==========================================  EPCA_0 CONTROL_4 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CIOVFIEN                                                 */
  EPCA_0_CONTROL_4_CIOVFIEN_DISABLED   = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  EPCA_0_CONTROL_4_CIOVFIEN_ENABLED    = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} EPCA_0_CONTROL_4_CIOVFIEN_Enum;

/* ==========================================  EPCA_0 CONTROL_4 CIOVFDEN [12..12]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CIOVFDEN                                                 */
  EPCA_0_CONTROL_4_CIOVFDEN_DISABLED   = 0,     /*!< DISABLED : Do not request DMA data when a channel intermediate
                                                     overflow event occurs.                                                    */
  EPCA_0_CONTROL_4_CIOVFDEN_ENABLED    = 1,     /*!< ENABLED : Request DMA data when a channel intermediate overflow
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_4_CIOVFDEN_Enum;

/* ==========================================  EPCA_0 CONTROL_4 CIOVFSEN [13..13]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_4_CIOVFSEN                                                 */
  EPCA_0_CONTROL_4_CIOVFSEN_DISABLED   = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     intermediate overflow event occurs.                                       */
  EPCA_0_CONTROL_4_CIOVFSEN_ENABLED    = 1,     /*!< ENABLED : Send a synchronization signal when a channel intermediate
                                                     overflow occurs.                                                          */
} EPCA_0_CONTROL_4_CIOVFSEN_Enum;

/* ========================================================  CCAPV_4  ======================================================== */
/* ======================================================  CCAPVUPD_4  ======================================================= */
/* ========================================================  MODE_5  ========================================================= */
/* ==============================================  EPCA_0 MODE_5 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_5_COSEL                                                       */
  EPCA_0_MODE_5_COSEL_TOGGLE_OUTPUT    = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_5_COSEL_SET_OUTPUT       = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_5_COSEL_CLEAR_OUTPUT     = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  EPCA_0_MODE_5_COSEL_NO_CHANGE        = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} EPCA_0_MODE_5_COSEL_Enum;

/* ==============================================  EPCA_0 MODE_5 DIFGEN [6..6]  ============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_5_DIFGEN                                                      */
  EPCA_0_MODE_5_DIFGEN_DISABLED        = 0,     /*!< DISABLED : Disable the differential signal generator. The channel
                                                     will output a single non-differential output.                             */
  EPCA_0_MODE_5_DIFGEN_ENABLED         = 1,     /*!< ENABLED : Enable the differential signal generator. The channel
                                                     will output two differential outputs: X Phase (XPH) and
                                                     Y Phase (YPH).                                                            */
} EPCA_0_MODE_5_DIFGEN_Enum;

/* ===============================================  EPCA_0 MODE_5 CMD [8..10]  =============================================== */
typedef enum {                                  /*!< EPCA_0_MODE_5_CMD                                                         */
  EPCA_0_MODE_5_CMD_EDGE_PWM           = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  EPCA_0_MODE_5_CMD_CENTER_ALIGNED_PWM = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  EPCA_0_MODE_5_CMD_HF_SQUARE_WAVE     = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  EPCA_0_MODE_5_CMD_TIMER_CAPTURE      = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  EPCA_0_MODE_5_CMD_N_BIT_PWM          = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} EPCA_0_MODE_5_CMD_Enum;

/* =======================================================  CONTROL_5  ======================================================= */
/* ============================================  EPCA_0 CONTROL_5 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_COUTST                                                   */
  EPCA_0_CONTROL_5_COUTST_LOW          = 0,     /*!< LOW : The channel output state is low.                                    */
  EPCA_0_CONTROL_5_COUTST_HIGH         = 1,     /*!< HIGH : The channel output state is high.                                  */
} EPCA_0_CONTROL_5_COUTST_Enum;

/* ============================================  EPCA_0 CONTROL_5 CPCAPEN [1..1]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CPCAPEN                                                  */
  EPCA_0_CONTROL_5_CPCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  EPCA_0_CONTROL_5_CPCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} EPCA_0_CONTROL_5_CPCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_5 CNCAPEN [2..2]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CNCAPEN                                                  */
  EPCA_0_CONTROL_5_CNCAPEN_DISABLED    = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  EPCA_0_CONTROL_5_CNCAPEN_ENABLED     = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} EPCA_0_CONTROL_5_CNCAPEN_Enum;

/* ============================================  EPCA_0 CONTROL_5 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CUPDCF                                                   */
  EPCA_0_CONTROL_5_CUPDCF_NOT_SET      = 0,     /*!< NOT_SET : A EPCA channel register update completed or is not
                                                     pending.                                                                  */
  EPCA_0_CONTROL_5_CUPDCF_SET          = 1,     /*!< SET : A EPCA channel register update has not completed and is
                                                     still pending.                                                            */
} EPCA_0_CONTROL_5_CUPDCF_Enum;

/* =============================================  EPCA_0 CONTROL_5 YPHST [5..5]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_YPHST                                                    */
  EPCA_0_CONTROL_5_YPHST_LOW           = 0,     /*!< LOW : Set the Y Phase output state to low.                                */
  EPCA_0_CONTROL_5_YPHST_HIGH          = 1,     /*!< HIGH : Set the Y Phase output state to high.                              */
} EPCA_0_CONTROL_5_YPHST_Enum;

/* ===========================================  EPCA_0 CONTROL_5 ACTIVEPH [6..6]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_ACTIVEPH                                                 */
  EPCA_0_CONTROL_5_ACTIVEPH_YACTIVE    = 0,     /*!< YACTIVE : The Y Phase is active and X Phase is inactive.                  */
  EPCA_0_CONTROL_5_ACTIVEPH_XACTIVE    = 1,     /*!< XACTIVE : The X Phase is active and Y Phase is inactive.                  */
} EPCA_0_CONTROL_5_ACTIVEPH_Enum;

/* =============================================  EPCA_0 CONTROL_5 XPHST [7..7]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_XPHST                                                    */
  EPCA_0_CONTROL_5_XPHST_LOW           = 0,     /*!< LOW : Set the X Phase output state to low.                                */
  EPCA_0_CONTROL_5_XPHST_HIGH          = 1,     /*!< HIGH : Set the X Phase output state to high.                              */
} EPCA_0_CONTROL_5_XPHST_Enum;

/* =============================================  EPCA_0 CONTROL_5 CCIEN [8..8]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CCIEN                                                    */
  EPCA_0_CONTROL_5_CCIEN_DISABLED      = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  EPCA_0_CONTROL_5_CCIEN_ENABLED       = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} EPCA_0_CONTROL_5_CCIEN_Enum;

/* =============================================  EPCA_0 CONTROL_5 CCDEN [9..9]  ============================================= */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CCDEN                                                    */
  EPCA_0_CONTROL_5_CCDEN_DISABLED      = 0,     /*!< DISABLED : Do not request DMA data when a channel capture/compare
                                                     event occurs.                                                             */
  EPCA_0_CONTROL_5_CCDEN_ENABLED       = 1,     /*!< ENABLED : Request DMA data when a channel capture/compare event
                                                     occurs.                                                                   */
} EPCA_0_CONTROL_5_CCDEN_Enum;

/* ============================================  EPCA_0 CONTROL_5 CCSEN [10..10]  ============================================ */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CCSEN                                                    */
  EPCA_0_CONTROL_5_CCSEN_DISABLED      = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     capture/compare event occurs.                                             */
  EPCA_0_CONTROL_5_CCSEN_ENABLED       = 1,     /*!< ENABLED : Send a synchronization signal when a channel capture/compare
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_5_CCSEN_Enum;

/* ==========================================  EPCA_0 CONTROL_5 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CIOVFIEN                                                 */
  EPCA_0_CONTROL_5_CIOVFIEN_DISABLED   = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  EPCA_0_CONTROL_5_CIOVFIEN_ENABLED    = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} EPCA_0_CONTROL_5_CIOVFIEN_Enum;

/* ==========================================  EPCA_0 CONTROL_5 CIOVFDEN [12..12]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CIOVFDEN                                                 */
  EPCA_0_CONTROL_5_CIOVFDEN_DISABLED   = 0,     /*!< DISABLED : Do not request DMA data when a channel intermediate
                                                     overflow event occurs.                                                    */
  EPCA_0_CONTROL_5_CIOVFDEN_ENABLED    = 1,     /*!< ENABLED : Request DMA data when a channel intermediate overflow
                                                     event occurs.                                                             */
} EPCA_0_CONTROL_5_CIOVFDEN_Enum;

/* ==========================================  EPCA_0 CONTROL_5 CIOVFSEN [13..13]  =========================================== */
typedef enum {                                  /*!< EPCA_0_CONTROL_5_CIOVFSEN                                                 */
  EPCA_0_CONTROL_5_CIOVFSEN_DISABLED   = 0,     /*!< DISABLED : Do not send a synchronization signal when a channel
                                                     intermediate overflow event occurs.                                       */
  EPCA_0_CONTROL_5_CIOVFSEN_ENABLED    = 1,     /*!< ENABLED : Send a synchronization signal when a channel intermediate
                                                     overflow occurs.                                                          */
} EPCA_0_CONTROL_5_CIOVFSEN_Enum;

/* ========================================================  CCAPV_5  ======================================================== */
/* ======================================================  CCAPVUPD_5  ======================================================= */


/* =========================================================================================================================== */
/* ================                                        FLASHCTRL_0                                        ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ============================================  FLASHCTRL_0 CONFIG SPMD [0..1]  ============================================= */
typedef enum {                                  /*!< FLASHCTRL_0_CONFIG_SPMD                                                   */
  FLASHCTRL_0_CONFIG_SPMD_MODE0        = 0,     /*!< MODE0 : Read and write the Flash at speed mode 0.                         */
  FLASHCTRL_0_CONFIG_SPMD_MODE1        = 1,     /*!< MODE1 : Read and write the Flash at speed mode 1.                         */
  FLASHCTRL_0_CONFIG_SPMD_MODE2        = 2,     /*!< MODE2 : Read and write the Flash at speed mode 2.                         */
  FLASHCTRL_0_CONFIG_SPMD_MODE3        = 3,     /*!< MODE3 : Read and write the Flash at speed mode 3.                         */
} FLASHCTRL_0_CONFIG_SPMD_Enum;

/* ============================================  FLASHCTRL_0 CONFIG RDSEN [4..4]  ============================================ */
typedef enum {                                  /*!< FLASHCTRL_0_CONFIG_RDSEN                                                  */
  FLASHCTRL_0_CONFIG_RDSEN_DISABLED    = 0,     /*!< DISABLED : Disable read store mode.                                       */
  FLASHCTRL_0_CONFIG_RDSEN_ENABLED     = 1,     /*!< ENABLED : Enable read store mode.                                         */
} FLASHCTRL_0_CONFIG_RDSEN_Enum;

/* ============================================  FLASHCTRL_0 CONFIG DPFEN [6..6]  ============================================ */
typedef enum {                                  /*!< FLASHCTRL_0_CONFIG_DPFEN                                                  */
  FLASHCTRL_0_CONFIG_DPFEN_DISABLED    = 0,     /*!< DISABLED : Data accesses are excluded from the prefetch buffer.           */
  FLASHCTRL_0_CONFIG_DPFEN_ENABLED     = 1,     /*!< ENABLED : Data accesses are included in the prefetch buffer.              */
} FLASHCTRL_0_CONFIG_DPFEN_Enum;

/* ============================================  FLASHCTRL_0 CONFIG PFINH [7..7]  ============================================ */
typedef enum {                                  /*!< FLASHCTRL_0_CONFIG_PFINH                                                  */
  FLASHCTRL_0_CONFIG_PFINH_INACTIVE    = 0,     /*!< INACTIVE : Any reads from Flash are prefetched until the prefetch
                                                     buffer is full.                                                           */
  FLASHCTRL_0_CONFIG_PFINH_ACTIVE      = 1,     /*!< ACTIVE : Inhibit the prefetch engine.                                     */
} FLASHCTRL_0_CONFIG_PFINH_Enum;

/* ===========================================  FLASHCTRL_0 CONFIG SQWEN [16..16]  =========================================== */
typedef enum {                                  /*!< FLASHCTRL_0_CONFIG_SQWEN                                                  */
  FLASHCTRL_0_CONFIG_SQWEN_DISABLED    = 0,     /*!< DISABLED : Disable sequential write mode.                                 */
  FLASHCTRL_0_CONFIG_SQWEN_ENABLED     = 1,     /*!< ENABLED : Enable sequential write mode.                                   */
} FLASHCTRL_0_CONFIG_SQWEN_Enum;

/* ==========================================  FLASHCTRL_0 CONFIG ERASEEN [18..18]  ========================================== */
typedef enum {                                  /*!< FLASHCTRL_0_CONFIG_ERASEEN                                                */
  FLASHCTRL_0_CONFIG_ERASEEN_DISABLED  = 0,     /*!< DISABLED : Writes to the WRDATA field will initiate a write
                                                     to Flash at the address in the WRADDR field.                              */
  FLASHCTRL_0_CONFIG_ERASEEN_ENABLED   = 1,     /*!< ENABLED : Writes to the WRDATA field will initiate an erase
                                                     of the Flash page containing the address in the WRADDR
                                                     field.                                                                    */
} FLASHCTRL_0_CONFIG_ERASEEN_Enum;

/* ==========================================  FLASHCTRL_0 CONFIG BUFSTS [19..19]  =========================================== */
typedef enum {                                  /*!< FLASHCTRL_0_CONFIG_BUFSTS                                                 */
  FLASHCTRL_0_CONFIG_BUFSTS_EMPTY      = 0,     /*!< EMPTY : The Flash controller write data buffer is empty.                  */
  FLASHCTRL_0_CONFIG_BUFSTS_FULL       = 1,     /*!< FULL : The Flash controller write data buffer is full.                    */
} FLASHCTRL_0_CONFIG_BUFSTS_Enum;

/* ===========================================  FLASHCTRL_0 CONFIG BUSYF [20..20]  =========================================== */
typedef enum {                                  /*!< FLASHCTRL_0_CONFIG_BUSYF                                                  */
  FLASHCTRL_0_CONFIG_BUSYF_NOT_SET     = 0,     /*!< NOT_SET : The Flash interface is not busy.                                */
  FLASHCTRL_0_CONFIG_BUSYF_SET         = 1,     /*!< SET : The Flash interface is busy with an operation.                      */
} FLASHCTRL_0_CONFIG_BUSYF_Enum;

/* ========================================================  WRADDR  ========================================================= */
/* ========================================================  WRDATA  ========================================================= */
/* ==========================================================  KEY  ========================================================== */
/* ==============================================  FLASHCTRL_0 KEY KEY [0..7]  =============================================== */
typedef enum {                                  /*!< FLASHCTRL_0_KEY_KEY                                                       */
  FLASHCTRL_0_KEY_KEY_MULTI_LOCK       = 90,    /*!< MULTI_LOCK : MULTI_LOCK                                                   */
  FLASHCTRL_0_KEY_KEY_INITIAL_UNLOCK   = 165,   /*!< INITIAL_UNLOCK : INITIAL_UNLOCK                                           */
  FLASHCTRL_0_KEY_KEY_SINGLE_UNLOCK    = 241,   /*!< SINGLE_UNLOCK : SINGLE_UNLOCK                                             */
  FLASHCTRL_0_KEY_KEY_MULTI_UNLOCK     = 242,   /*!< MULTI_UNLOCK : MULTI_UNLOCK                                               */
} FLASHCTRL_0_KEY_KEY_Enum;

/* =======================================================  TCONTROL  ======================================================== */
/* ==========================================  FLASHCTRL_0 TCONTROL FLRTMD [6..6]  =========================================== */
typedef enum {                                  /*!< FLASHCTRL_0_TCONTROL_FLRTMD                                               */
  FLASHCTRL_0_TCONTROL_FLRTMD_SLOW     = 0,     /*!< SLOW : Configure the Flash read controller for AHB clocks below
                                                     20 MHz.                                                                   */
  FLASHCTRL_0_TCONTROL_FLRTMD_FAST     = 1,     /*!< FAST : Configure the Flash read controller for AHB clocks above
                                                     20 MHz.                                                                   */
} FLASHCTRL_0_TCONTROL_FLRTMD_Enum;



/* =========================================================================================================================== */
/* ================                                           I2C_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  I2C_0 CONTROL BUSYF [0..0]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_BUSYF                                                       */
  I2C_0_CONTROL_BUSYF_NOT_SET          = 0,     /*!< NOT_SET : A transaction is not currently taking place.                    */
  I2C_0_CONTROL_BUSYF_SET              = 1,     /*!< SET : A transaction is currently taking place.                            */
} I2C_0_CONTROL_BUSYF_Enum;

/* ===============================================  I2C_0 CONTROL ACK [1..1]  ================================================ */
typedef enum {                                  /*!< I2C_0_CONTROL_ACK                                                         */
  I2C_0_CONTROL_ACK_NOT_SET            = 0,     /*!< NOT_SET : Read: ACK has not been received. Write: Do not send
                                                     an ACK.                                                                   */
  I2C_0_CONTROL_ACK_SET                = 1,     /*!< SET : Read: ACK received. Write: Send an ACK.                             */
} I2C_0_CONTROL_ACK_Enum;

/* ==============================================  I2C_0 CONTROL ARBLF [2..2]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_ARBLF                                                       */
  I2C_0_CONTROL_ARBLF_NOT_SET          = 0,     /*!< NOT_SET : Arbitration lost error has not occurred.                        */
  I2C_0_CONTROL_ARBLF_SET              = 1,     /*!< SET : Arbitration lost error occurred.                                    */
} I2C_0_CONTROL_ARBLF_Enum;

/* ==============================================  I2C_0 CONTROL ACKRQF [3..3]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_ACKRQF                                                      */
  I2C_0_CONTROL_ACKRQF_NOT_SET         = 0,     /*!< NOT_SET : ACK has not been requested.                                     */
  I2C_0_CONTROL_ACKRQF_SET             = 1,     /*!< SET : ACK requested.                                                      */
} I2C_0_CONTROL_ACKRQF_Enum;

/* ===============================================  I2C_0 CONTROL STO [4..4]  ================================================ */
typedef enum {                                  /*!< I2C_0_CONTROL_STO                                                         */
  I2C_0_CONTROL_STO_NOT_SET            = 0,     /*!< NOT_SET : Read: A stop is not pending and a stop / repeat start
                                                     has not been detected. Write: Clear the STO bit.                          */
  I2C_0_CONTROL_STO_SET                = 1,     /*!< SET : Read: Stop or stop / repeat start detected. This bit must
                                                     be cleared by firmware. Write: Generate a stop.                           */
} I2C_0_CONTROL_STO_Enum;

/* ===============================================  I2C_0 CONTROL STA [5..5]  ================================================ */
typedef enum {                                  /*!< I2C_0_CONTROL_STA                                                         */
  I2C_0_CONTROL_STA_NOT_SET            = 0,     /*!< NOT_SET : Read: A start is not pending and a repeat start has
                                                     not been detected. Write: Clear the STA bit.                              */
  I2C_0_CONTROL_STA_SET                = 1,     /*!< SET : Read: Start or repeat start detected. This bit must be
                                                     cleared by firmware. Write: Generate a start or repeat
                                                     start.                                                                    */
} I2C_0_CONTROL_STA_Enum;

/* ==============================================  I2C_0 CONTROL TXMDF [6..6]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_TXMDF                                                       */
  I2C_0_CONTROL_TXMDF_RECEIVE          = 0,     /*!< RECEIVE : Module is in receiver mode.                                     */
  I2C_0_CONTROL_TXMDF_TRANSMIT         = 1,     /*!< TRANSMIT : Module is in transmitter mode.                                 */
} I2C_0_CONTROL_TXMDF_Enum;

/* ==============================================  I2C_0 CONTROL MSMDF [7..7]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_MSMDF                                                       */
  I2C_0_CONTROL_MSMDF_SLAVE            = 0,     /*!< SLAVE : Module is operating in Slave mode.                                */
  I2C_0_CONTROL_MSMDF_MASTER           = 1,     /*!< MASTER : Module is operating in Master mode.                              */
} I2C_0_CONTROL_MSMDF_Enum;

/* ===============================================  I2C_0 CONTROL STOI [8..8]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_STOI                                                        */
  I2C_0_CONTROL_STOI_NOT_SET           = 0,     /*!< NOT_SET : Read: A stop interrupt has not occurred. Write: Clear
                                                     the stop interrupt flag (STOI).                                           */
  I2C_0_CONTROL_STOI_SET               = 1,     /*!< SET : Read: Stop interrupt detected. In Slave mode, a stop has
                                                     been detected on the bus. In Master mode, a stop has been
                                                     generated. Write: Force a stop interrupt.                                 */
} I2C_0_CONTROL_STOI_Enum;

/* ===============================================  I2C_0 CONTROL ACKI [9..9]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_ACKI                                                        */
  I2C_0_CONTROL_ACKI_NOT_SET           = 0,     /*!< NOT_SET : Read: An acknowledge interrupt has not occurred. Write:
                                                     Clear the acknowledge interrupt (ACKI).                                   */
  I2C_0_CONTROL_ACKI_SET               = 1,     /*!< SET : Read: An acknowledge interrupt occurred. Write: Force
                                                     an acknowledge interrupt.                                                 */
} I2C_0_CONTROL_ACKI_Enum;

/* ==============================================  I2C_0 CONTROL RXI [10..10]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_RXI                                                         */
  I2C_0_CONTROL_RXI_NOT_SET            = 0,     /*!< NOT_SET : Read: A receive done interrupt has not occurred. Write:
                                                     Clear the receive done interrupt (RXI).                                   */
  I2C_0_CONTROL_RXI_SET                = 1,     /*!< SET : Read: Receive done interrupt occurred. Write: Force a
                                                     receive done interrupt.                                                   */
} I2C_0_CONTROL_RXI_Enum;

/* ==============================================  I2C_0 CONTROL TXI [11..11]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_TXI                                                         */
  I2C_0_CONTROL_TXI_NOT_SET            = 0,     /*!< NOT_SET : Read: A transmit done interrupt has not occurred.
                                                     Write: Clear the transmit done interrupt (TXI).                           */
  I2C_0_CONTROL_TXI_SET                = 1,     /*!< SET : Read: Transmit done interrupt detected. If the transmit
                                                     is forced to abort by a NACK response, the acknowledge
                                                     interrupt (ACKI) will also be set. Write: Force a transmit
                                                     done interrupt.                                                           */
} I2C_0_CONTROL_TXI_Enum;

/* ==============================================  I2C_0 CONTROL STAI [12..12]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_STAI                                                        */
  I2C_0_CONTROL_STAI_NOT_SET           = 0,     /*!< NOT_SET : Read: Start interrupt has not occurred. Write: Clear
                                                     the start interrupt (STAI).                                               */
  I2C_0_CONTROL_STAI_SET               = 1,     /*!< SET : Read: Start or repeat start interrupt occurred. In Slave
                                                     mode, a start or repeat start is detected. In Master mode,
                                                     a start or repeat start has been generated.                               */
} I2C_0_CONTROL_STAI_Enum;

/* =============================================  I2C_0 CONTROL ARBLI [13..13]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_ARBLI                                                       */
  I2C_0_CONTROL_ARBLI_NOT_SET          = 0,     /*!< NOT_SET : Read: An arbitration lost interrupt has not occurred.
                                                     Write: Clear the arbitration lost interrupt (ARBLI).                      */
  I2C_0_CONTROL_ARBLI_SET              = 1,     /*!< SET : Read: Arbitration lost interrupt detected. Write: Force
                                                     an arbitration lost interrupt.                                            */
} I2C_0_CONTROL_ARBLI_Enum;

/* ==============================================  I2C_0 CONTROL T0I [14..14]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_T0I                                                         */
  I2C_0_CONTROL_T0I_NOT_SET            = 0,     /*!< NOT_SET : Read: A I2C Timer Byte 0 interrupt has not occurred.
                                                     Write: Clear the I2C Timer Byte 0 interrupt (T0I).                        */
  I2C_0_CONTROL_T0I_SET                = 1,     /*!< SET : Read: I2C Timer Byte 0 overflow interrupt detected. Write:
                                                     Force a I2C Timer Byte 0 interrupt.                                       */
} I2C_0_CONTROL_T0I_Enum;

/* ==============================================  I2C_0 CONTROL T1I [15..15]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_T1I                                                         */
  I2C_0_CONTROL_T1I_NOT_SET            = 0,     /*!< NOT_SET : Read: No interrupt occurred. Write: Clear the I2C
                                                     Timer Byte 1 interrupt (T1I).                                             */
  I2C_0_CONTROL_T1I_SET                = 1,     /*!< SET : Read: I2C Timer Byte 1 overflow interrupt is detected.
                                                     Write: Force a I2C Timer Byte 1 interrupt.                                */
} I2C_0_CONTROL_T1I_Enum;

/* ==============================================  I2C_0 CONTROL T2I [16..16]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_T2I                                                         */
  I2C_0_CONTROL_T2I_NOT_SET            = 0,     /*!< NOT_SET : Read: A I2C Timer Byte 2 interrupt has not occurred.
                                                     Write: Clear the I2C Timer Byte 2 interrupt (T2I).                        */
  I2C_0_CONTROL_T2I_SET                = 1,     /*!< SET : Read: I2C Timer Byte 2 overflow interrupt detected. Write:
                                                     Force a I2C Timer Byte 2 interrupt.                                       */
} I2C_0_CONTROL_T2I_Enum;

/* ==============================================  I2C_0 CONTROL T3I [17..17]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_T3I                                                         */
  I2C_0_CONTROL_T3I_NOT_SET            = 0,     /*!< NOT_SET : Read: A I2C Timer Byte 3 interrupt or SCL low timeout
                                                     has not occurred. Write: Clear the I2C Timer Byte 3 interrupt
                                                     (T3I).                                                                    */
  I2C_0_CONTROL_T3I_SET                = 1,     /*!< SET : Read: I2C Timer Byte 3 overflow or SCL low timeout interrupt
                                                     detected. Write: Force a I2C Timer Byte 3 interrupt.                      */
} I2C_0_CONTROL_T3I_Enum;

/* =============================================  I2C_0 CONTROL RXARM [18..18]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_RXARM                                                       */
  I2C_0_CONTROL_RXARM_DISABLED         = 0,     /*!< DISABLED : Disable data and address reception.                            */
  I2C_0_CONTROL_RXARM_ENABLED          = 1,     /*!< ENABLED : Enable the module to perform a receive operation.               */
} I2C_0_CONTROL_RXARM_Enum;

/* =============================================  I2C_0 CONTROL TXARM [19..19]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_TXARM                                                       */
  I2C_0_CONTROL_TXARM_DISABLED         = 0,     /*!< DISABLED : Disable data and address transmission.                         */
  I2C_0_CONTROL_TXARM_ENABLED          = 1,     /*!< ENABLED : Enable the module to perform a transmit operation.              */
} I2C_0_CONTROL_TXARM_Enum;

/* =============================================  I2C_0 CONTROL SLVAF [20..20]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_SLVAF                                                       */
  I2C_0_CONTROL_SLVAF_SLAVE_ADDRESS    = 0,     /*!< SLAVE_ADDRESS : Slave address detected.                                   */
  I2C_0_CONTROL_SLVAF_GENERAL_CALL     = 1,     /*!< GENERAL_CALL : General Call address detected.                             */
} I2C_0_CONTROL_SLVAF_Enum;

/* ============================================  I2C_0 CONTROL ATXRXEN [21..21]  ============================================= */
typedef enum {                                  /*!< I2C_0_CONTROL_ATXRXEN                                                     */
  I2C_0_CONTROL_ATXRXEN_DISABLED       = 0,     /*!< DISABLED : Do not automatically switch to transmit or receive
                                                     mode after a Start.                                                       */
  I2C_0_CONTROL_ATXRXEN_ENABLED        = 1,     /*!< ENABLED : If automatic hardware acknowledge mode is enabled
                                                     (HACKEN = 1), automatically switch to transmit or receive
                                                     mode after a Start.                                                       */
} I2C_0_CONTROL_ATXRXEN_Enum;

/* ==============================================  I2C_0 CONTROL FMD [22..22]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_FMD                                                         */
  I2C_0_CONTROL_FMD_DISABLED           = 0,     /*!< DISABLED : Disable the input filter.                                      */
  I2C_0_CONTROL_FMD_ENABLED            = 1,     /*!< ENABLED : Enable the input filter.                                        */
} I2C_0_CONTROL_FMD_Enum;

/* =============================================  I2C_0 CONTROL DBGMD [23..23]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_DBGMD                                                       */
  I2C_0_CONTROL_DBGMD_RUN              = 0,     /*!< RUN : The I2C module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  I2C_0_CONTROL_DBGMD_HALT             = 1,     /*!< HALT : A debug breakpoint will cause the I2C module to halt.              */
} I2C_0_CONTROL_DBGMD_Enum;

/* =============================================  I2C_0 CONTROL SMINH [24..24]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_SMINH                                                       */
  I2C_0_CONTROL_SMINH_INACTIVE         = 0,     /*!< INACTIVE : Enable Slave modes.                                            */
  I2C_0_CONTROL_SMINH_ACTIVE           = 1,     /*!< ACTIVE : Inhibit Slave modes. The module will not respond to
                                                     a Master on the bus.                                                      */
} I2C_0_CONTROL_SMINH_Enum;

/* =============================================  I2C_0 CONTROL HACKEN [25..25]  ============================================= */
typedef enum {                                  /*!< I2C_0_CONTROL_HACKEN                                                      */
  I2C_0_CONTROL_HACKEN_DISABLED        = 0,     /*!< DISABLED : Disable automatic hardware acknowledge.                        */
  I2C_0_CONTROL_HACKEN_ENABLED         = 1,     /*!< ENABLED : Enable automatic hardware acknowledge.                          */
} I2C_0_CONTROL_HACKEN_Enum;

/* =============================================  I2C_0 CONTROL SLVAMD [26..26]  ============================================= */
typedef enum {                                  /*!< I2C_0_CONTROL_SLVAMD                                                      */
  I2C_0_CONTROL_SLVAMD_7BIT            = 0,     /*!< 7BIT : Slave addresses are 7 bits.                                        */
  I2C_0_CONTROL_SLVAMD_10BIT           = 1,     /*!< 10BIT : Slave addresses are 10 bits.                                      */
} I2C_0_CONTROL_SLVAMD_Enum;

/* ============================================  I2C_0 CONTROL LBACKEN [27..27]  ============================================= */
typedef enum {                                  /*!< I2C_0_CONTROL_LBACKEN                                                     */
  I2C_0_CONTROL_LBACKEN_DISABLED       = 0,     /*!< DISABLED : NACK after the last byte is received.                          */
  I2C_0_CONTROL_LBACKEN_ENABLED        = 1,     /*!< ENABLED : ACK after the last byte is received.                            */
} I2C_0_CONTROL_LBACKEN_Enum;

/* ==============================================  I2C_0 CONTROL GCEN [29..29]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_GCEN                                                        */
  I2C_0_CONTROL_GCEN_DISABLED          = 0,     /*!< DISABLED : Disable General Call address decoding.                         */
  I2C_0_CONTROL_GCEN_ENABLED           = 1,     /*!< ENABLED : Enable General Call address decoding.                           */
} I2C_0_CONTROL_GCEN_Enum;

/* =============================================  I2C_0 CONTROL RESET [30..30]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_RESET                                                       */
  I2C_0_CONTROL_RESET_INACTIVE         = 0,     /*!< INACTIVE : I2C module is not in soft reset.                               */
  I2C_0_CONTROL_RESET_ACTIVE           = 1,     /*!< ACTIVE : I2C module is in soft reset and firmware cannot access
                                                     all bits in the module.                                                   */
} I2C_0_CONTROL_RESET_Enum;

/* =============================================  I2C_0 CONTROL I2CEN [31..31]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONTROL_I2CEN                                                       */
  I2C_0_CONTROL_I2CEN_DISABLED         = 0,     /*!< DISABLED : Disable the I2C module.                                        */
  I2C_0_CONTROL_I2CEN_ENABLED          = 1,     /*!< ENABLED : Enable the I2C module.                                          */
} I2C_0_CONTROL_I2CEN_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ==============================================  I2C_0 CONFIG STOIEN [8..8]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_STOIEN                                                       */
  I2C_0_CONFIG_STOIEN_DISABLED         = 0,     /*!< DISABLED : Disable the stop interrupt.                                    */
  I2C_0_CONFIG_STOIEN_ENABLED          = 1,     /*!< ENABLED : Enable the stop interrupt (STOI).                               */
} I2C_0_CONFIG_STOIEN_Enum;

/* ==============================================  I2C_0 CONFIG ACKIEN [9..9]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_ACKIEN                                                       */
  I2C_0_CONFIG_ACKIEN_DISABLED         = 0,     /*!< DISABLED : Disable the acknowledge interrupt.                             */
  I2C_0_CONFIG_ACKIEN_ENABLED          = 1,     /*!< ENABLED : Enable the acknowledge interrupt (ACKI).                        */
} I2C_0_CONFIG_ACKIEN_Enum;

/* ==============================================  I2C_0 CONFIG RXIEN [10..10]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_RXIEN                                                        */
  I2C_0_CONFIG_RXIEN_DISABLED          = 0,     /*!< DISABLED : Disable the receive done interrupt.                            */
  I2C_0_CONFIG_RXIEN_ENABLED           = 1,     /*!< ENABLED : Enable the receive done interrupt (RXI).                        */
} I2C_0_CONFIG_RXIEN_Enum;

/* ==============================================  I2C_0 CONFIG TXIEN [11..11]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_TXIEN                                                        */
  I2C_0_CONFIG_TXIEN_DISABLED          = 0,     /*!< DISABLED : Disable the transmit done interrupt.                           */
  I2C_0_CONFIG_TXIEN_ENABLED           = 1,     /*!< ENABLED : Enable the transmit done interrupt (TXI).                       */
} I2C_0_CONFIG_TXIEN_Enum;

/* =============================================  I2C_0 CONFIG STAIEN [12..12]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_STAIEN                                                       */
  I2C_0_CONFIG_STAIEN_DISABLED         = 0,     /*!< DISABLED : Disable the start interrupt.                                   */
  I2C_0_CONFIG_STAIEN_ENABLED          = 1,     /*!< ENABLED : Enable the start interrupt (STAI).                              */
} I2C_0_CONFIG_STAIEN_Enum;

/* =============================================  I2C_0 CONFIG ARBLIEN [13..13]  ============================================= */
typedef enum {                                  /*!< I2C_0_CONFIG_ARBLIEN                                                      */
  I2C_0_CONFIG_ARBLIEN_DISABLED        = 0,     /*!< DISABLED : Disable the arbitration lost interrupt.                        */
  I2C_0_CONFIG_ARBLIEN_ENABLED         = 1,     /*!< ENABLED : Enable the arbitration lost interrupt (ARBLI).                  */
} I2C_0_CONFIG_ARBLIEN_Enum;

/* ==============================================  I2C_0 CONFIG T0IEN [14..14]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_T0IEN                                                        */
  I2C_0_CONFIG_T0IEN_DISABLED          = 0,     /*!< DISABLED : Disable the I2C Timer Byte 0 interrupt.                        */
  I2C_0_CONFIG_T0IEN_ENABLED           = 1,     /*!< ENABLED : Enable the I2C Timer Byte 0 interrupt (T0I).                    */
} I2C_0_CONFIG_T0IEN_Enum;

/* ==============================================  I2C_0 CONFIG T1IEN [15..15]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_T1IEN                                                        */
  I2C_0_CONFIG_T1IEN_DISABLED          = 0,     /*!< DISABLED : Disable the I2C Timer Byte 1 interrupt.                        */
  I2C_0_CONFIG_T1IEN_ENABLED           = 1,     /*!< ENABLED : Enable the I2C Timer Byte 1 interrupt (T1I).                    */
} I2C_0_CONFIG_T1IEN_Enum;

/* ==============================================  I2C_0 CONFIG T2IEN [16..16]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_T2IEN                                                        */
  I2C_0_CONFIG_T2IEN_DISABLED          = 0,     /*!< DISABLED : Disable the I2C Timer Byte 2 interrupt.                        */
  I2C_0_CONFIG_T2IEN_ENABLED           = 1,     /*!< ENABLED : Enable the I2C Timer Byte 2 interrupt (T2I).                    */
} I2C_0_CONFIG_T2IEN_Enum;

/* ==============================================  I2C_0 CONFIG T3IEN [17..17]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_T3IEN                                                        */
  I2C_0_CONFIG_T3IEN_DISABLED          = 0,     /*!< DISABLED : Disable the I2C Timer Byte 3 and SCL low timeout
                                                     interrupt.                                                                */
  I2C_0_CONFIG_T3IEN_ENABLED           = 1,     /*!< ENABLED : Enable the I2C Timer Byte 3 and SCL low timeout interrupt
                                                     (T3I).                                                                    */
} I2C_0_CONFIG_T3IEN_Enum;

/* ==============================================  I2C_0 CONFIG T0RUN [24..24]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_T0RUN                                                        */
  I2C_0_CONFIG_T0RUN_STOP              = 0,     /*!< STOP : Stop Timer Byte 0.                                                 */
  I2C_0_CONFIG_T0RUN_START             = 1,     /*!< START : Start Timer Byte 0 running.                                       */
} I2C_0_CONFIG_T0RUN_Enum;

/* ==============================================  I2C_0 CONFIG T1RUN [25..25]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_T1RUN                                                        */
  I2C_0_CONFIG_T1RUN_STOP              = 0,     /*!< STOP : Stop Timer Byte 1.                                                 */
  I2C_0_CONFIG_T1RUN_START             = 1,     /*!< START : Start Timer Byte 1 running.                                       */
} I2C_0_CONFIG_T1RUN_Enum;

/* ==============================================  I2C_0 CONFIG T2RUN [26..26]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_T2RUN                                                        */
  I2C_0_CONFIG_T2RUN_STOP              = 0,     /*!< STOP : Stop Timer Byte 2.                                                 */
  I2C_0_CONFIG_T2RUN_START             = 1,     /*!< START : Start Timer Byte 2 running.                                       */
} I2C_0_CONFIG_T2RUN_Enum;

/* ==============================================  I2C_0 CONFIG T3RUN [27..27]  ============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_T3RUN                                                        */
  I2C_0_CONFIG_T3RUN_STOP              = 0,     /*!< STOP : Stop Timer Byte 3.                                                 */
  I2C_0_CONFIG_T3RUN_START             = 1,     /*!< START : Start Timer Byte 3 running.                                       */
} I2C_0_CONFIG_T3RUN_Enum;

/* ===============================================  I2C_0 CONFIG TMD [28..29]  =============================================== */
typedef enum {                                  /*!< I2C_0_CONFIG_TMD                                                          */
  I2C_0_CONFIG_TMD_MODE0               = 0,     /*!< MODE0 : I2C Timer Mode 0: Operate the I2C timer as a single
                                                     32-bit timer : Timer Bytes [3 : 2 : 1 : 0].                               */
  I2C_0_CONFIG_TMD_MODE1               = 1,     /*!< MODE1 : I2C Timer Mode 1: Operate the I2C timer as two 16-bit
                                                     timers : Timer Bytes [3 : 2] and Timer Bytes [1 : 0].                     */
  I2C_0_CONFIG_TMD_MODE2               = 2,     /*!< MODE2 : I2C Timer Mode 2: Operate the I2C timer as four independent
                                                     8-bit timers : Timer Byte 3, Timer Byte 2, Timer Byte 1,
                                                     and Timer Byte 0.                                                         */
  I2C_0_CONFIG_TMD_MODE3               = 3,     /*!< MODE3 : I2C Timer Mode 3: Operate the I2C timer as one 16-bit
                                                     and two 8-bit timers : Timer Bytes [3 : 2], Timer Byte
                                                     1, and Timer Byte 0.                                                      */
} I2C_0_CONFIG_TMD_Enum;

/* =============================================  I2C_0 CONFIG TIMEREN [31..31]  ============================================= */
typedef enum {                                  /*!< I2C_0_CONFIG_TIMEREN                                                      */
  I2C_0_CONFIG_TIMEREN_DISABLED        = 0,     /*!< DISABLED : Disable I2C Timer.                                             */
  I2C_0_CONFIG_TIMEREN_ENABLED         = 1,     /*!< ENABLED : Enable I2C Timer for general purpose use. This setting
                                                     should not be used when the I2C module is enabled (I2CEN
                                                     = 1).                                                                     */
} I2C_0_CONFIG_TIMEREN_Enum;

/* =======================================================  SADDRESS  ======================================================== */
/* =========================================================  SMASK  ========================================================= */
/* =========================================================  DATA  ========================================================== */
/* =========================================================  TIMER  ========================================================= */
/* ========================================================  TIMERRL  ======================================================== */
/* ========================================================  SCONFIG  ======================================================== */
/* ========================================================  I2CDMA  ========================================================= */
/* ==============================================  I2C_0 I2CDMA DMAEN [31..31]  ============================================== */
typedef enum {                                  /*!< I2C_0_I2CDMA_DMAEN                                                        */
  I2C_0_I2CDMA_DMAEN_DISABLED          = 0,     /*!< DISABLED : Disable I2C DMA data requests.                                 */
  I2C_0_I2CDMA_DMAEN_ENABLED           = 1,     /*!< ENABLED : Enable I2C DMA data requests.                                   */
} I2C_0_I2CDMA_DMAEN_Enum;



/* =========================================================================================================================== */
/* ================                                           I2S_0                                           ================ */
/* =========================================================================================================================== */

/* =======================================================  TXCONTROL  ======================================================= */
/* =============================================  I2S_0 TXCONTROL FSGEN [0..0]  ============================================== */
typedef enum {                                  /*!< I2S_0_TXCONTROL_FSGEN                                                     */
  I2S_0_TXCONTROL_FSGEN_DISABLED       = 0,     /*!< DISABLED : Disable the internal DFS generator.                            */
  I2S_0_TXCONTROL_FSGEN_ENABLED        = 1,     /*!< ENABLED : Enable the internal DFS generator.                              */
} I2S_0_TXCONTROL_FSGEN_Enum;

/* =============================================  I2S_0 TXCONTROL FSSEN [1..1]  ============================================== */
typedef enum {                                  /*!< I2S_0_TXCONTROL_FSSEN                                                     */
  I2S_0_TXCONTROL_FSSEN_DISABLED       = 0,     /*!< DISABLED : The internal DFS generator starts immediately when
                                                     FSGEN is set to 1.                                                        */
  I2S_0_TXCONTROL_FSSEN_ENABLED        = 1,     /*!< ENABLED : Synchronize the rising edge of the internally generated
                                                     WS signal from the DFS generator to the rising edge of
                                                     the external WS input signal.                                             */
} I2S_0_TXCONTROL_FSSEN_Enum;

/* ==============================================  I2S_0 TXCONTROL DDIS [5..5]  ============================================== */
typedef enum {                                  /*!< I2S_0_TXCONTROL_DDIS                                                      */
  I2S_0_TXCONTROL_DDIS_INACTIVE        = 0,     /*!< INACTIVE : The first data bit is sent on the second or later
                                                     rising edge of SCK after WS changes.                                      */
  I2S_0_TXCONTROL_DDIS_ACTIVE          = 1,     /*!< ACTIVE : The first data bit is sent on the first rising edge
                                                     of SCK after WS changes.                                                  */
} I2S_0_TXCONTROL_DDIS_Enum;

/* ===========================================  I2S_0 TXCONTROL FSSRCSEL [14..14]  =========================================== */
typedef enum {                                  /*!< I2S_0_TXCONTROL_FSSRCSEL                                                  */
  I2S_0_TXCONTROL_FSSRCSEL_FSIN_EXT    = 0,     /*!< FSIN_EXT : The word select or frame sync is input from the WS
                                                     pin.                                                                      */
  I2S_0_TXCONTROL_FSSRCSEL_FSIN_INT    = 1,     /*!< FSIN_INT : The word select or frame sync is input from the internal
                                                     DFS generator.                                                            */
} I2S_0_TXCONTROL_FSSRCSEL_Enum;

/* ===========================================  I2S_0 TXCONTROL FILLSEL [15..16]  ============================================ */
typedef enum {                                  /*!< I2S_0_TXCONTROL_FILLSEL                                                   */
  I2S_0_TXCONTROL_FILLSEL_ZEROS        = 0,     /*!< ZEROS : Send zeros during unused bit cycles.                              */
  I2S_0_TXCONTROL_FILLSEL_ONES         = 1,     /*!< ONES : Send ones during unused bit cycles.                                */
  I2S_0_TXCONTROL_FILLSEL_SIGN         = 2,     /*!< SIGN : Send the sign bit of the current sample (MSB-first format)
                                                     or last sample (LSB-first format) during unused bit cycles.               */
  I2S_0_TXCONTROL_FILLSEL_RANDOM       = 3,     /*!< RANDOM : Send pseudo-random data generated by an 8-bit LFSR
                                                     during unused bit cycles.                                                 */
} I2S_0_TXCONTROL_FILLSEL_Enum;

/* =============================================  I2S_0 TXCONTROL JSEL [17..17]  ============================================= */
typedef enum {                                  /*!< I2S_0_TXCONTROL_JSEL                                                      */
  I2S_0_TXCONTROL_JSEL_LEFT            = 0,     /*!< LEFT : Use left-justified or I2S-style formats.                           */
  I2S_0_TXCONTROL_JSEL_RIGHT           = 1,     /*!< RIGHT : Use right-justified format.                                       */
} I2S_0_TXCONTROL_JSEL_Enum;

/* ===========================================  I2S_0 TXCONTROL FSINVEN [20..20]  ============================================ */
typedef enum {                                  /*!< I2S_0_TXCONTROL_FSINVEN                                                   */
  I2S_0_TXCONTROL_FSINVEN_DISABLED     = 0,     /*!< DISABLED : Don't invert the WS signal. Use this setting for
                                                     I2S format.                                                               */
  I2S_0_TXCONTROL_FSINVEN_ENABLED      = 1,     /*!< ENABLED : Invert the WS signal.                                           */
} I2S_0_TXCONTROL_FSINVEN_Enum;

/* ==========================================  I2S_0 TXCONTROL SCLKINVEN [21..21]  =========================================== */
typedef enum {                                  /*!< I2S_0_TXCONTROL_SCLKINVEN                                                 */
  I2S_0_TXCONTROL_SCLKINVEN_DISABLED   = 0,     /*!< DISABLED : Do not invert the transmitter bit clock.                       */
  I2S_0_TXCONTROL_SCLKINVEN_ENABLED    = 1,     /*!< ENABLED : Invert the transmitter bit clock.                               */
} I2S_0_TXCONTROL_SCLKINVEN_Enum;

/* ============================================  I2S_0 TXCONTROL ORDER [22..22]  ============================================= */
typedef enum {                                  /*!< I2S_0_TXCONTROL_ORDER                                                     */
  I2S_0_TXCONTROL_ORDER_LEFT_RIGHT     = 0,     /*!< LEFT_RIGHT : Left sample transmitted first, right sample transmitted
                                                     second. Use this setting for I2S format.                                  */
  I2S_0_TXCONTROL_ORDER_RIGHT_LEFT     = 1,     /*!< RIGHT_LEFT : Right sample transmitted first, left sample transmitted
                                                     second.                                                                   */
} I2S_0_TXCONTROL_ORDER_Enum;

/* ============================================  I2S_0 TXCONTROL MBSEL [24..26]  ============================================= */
typedef enum {                                  /*!< I2S_0_TXCONTROL_MBSEL                                                     */
  I2S_0_TXCONTROL_MBSEL_8BITS          = 0,     /*!< 8BITS : 8 bits are sent per mono sample.                                  */
  I2S_0_TXCONTROL_MBSEL_9BITS          = 1,     /*!< 9BITS : 9 bits are sent per mono sample.                                  */
  I2S_0_TXCONTROL_MBSEL_16BITS         = 2,     /*!< 16BITS : 16 bits are sent per mono sample.                                */
  I2S_0_TXCONTROL_MBSEL_24BITS         = 3,     /*!< 24BITS : 24 bits are sent per mono sample.                                */
  I2S_0_TXCONTROL_MBSEL_32BITS         = 4,     /*!< 32BITS : 32 bits are sent per mono sample.                                */
} I2S_0_TXCONTROL_MBSEL_Enum;

/* =============================================  I2S_0 TXCONTROL TXEN [29..29]  ============================================= */
typedef enum {                                  /*!< I2S_0_TXCONTROL_TXEN                                                      */
  I2S_0_TXCONTROL_TXEN_DISABLED        = 0,     /*!< DISABLED : Disable the I2S transmitter.                                   */
  I2S_0_TXCONTROL_TXEN_ENABLED         = 1,     /*!< ENABLED : Enable the I2S transmitter.                                     */
} I2S_0_TXCONTROL_TXEN_Enum;

/* ========================================================  TXMODE  ========================================================= */
/* ==============================================  I2S_0 TXMODE DEDIS [25..25]  ============================================== */
typedef enum {                                  /*!< I2S_0_TXMODE_DEDIS                                                        */
  I2S_0_TXMODE_DEDIS_INACTIVE          = 0,     /*!< INACTIVE : Drive the output during every cycle of the transmitter's
                                                     assigned slot(s), including the last clock cycle.                         */
  I2S_0_TXMODE_DEDIS_ACTIVE            = 1,     /*!< ACTIVE : Drive the output for every cycle of the transmitter's
                                                     assigned slot(s), except for the last clock cycle of the
                                                     last slot.                                                                */
} I2S_0_TXMODE_DEDIS_Enum;

/* ==============================================  I2S_0 TXMODE DIMD [26..26]  =============================================== */
typedef enum {                                  /*!< I2S_0_TXMODE_DIMD                                                         */
  I2S_0_TXMODE_DIMD_ZERO               = 0,     /*!< ZERO : Drive zero on the data output pin during non-active slots.         */
  I2S_0_TXMODE_DIMD_HIGH_Z             = 1,     /*!< HIGH_Z : Don't drive the data output pin. The data output pin
                                                     is tristated.                                                             */
} I2S_0_TXMODE_DIMD_Enum;

/* ==============================================  I2S_0 TXMODE TDMEN [27..27]  ============================================== */
typedef enum {                                  /*!< I2S_0_TXMODE_TDMEN                                                        */
  I2S_0_TXMODE_TDMEN_DISABLED          = 0,     /*!< DISABLED : Disable the time division multiplexing (TDM) feature.          */
  I2S_0_TXMODE_TDMEN_ENABLED           = 1,     /*!< ENABLED : Enable the time division multiplexing (TDM) feature.            */
} I2S_0_TXMODE_TDMEN_Enum;

/* ========================================================  FSDUTY  ========================================================= */
/* =======================================================  RXCONTROL  ======================================================= */
/* ==============================================  I2S_0 RXCONTROL JSEL [8..8]  ============================================== */
typedef enum {                                  /*!< I2S_0_RXCONTROL_JSEL                                                      */
  I2S_0_RXCONTROL_JSEL_LEFT            = 0,     /*!< LEFT : Use left-justified or I2S-style formats.                           */
  I2S_0_RXCONTROL_JSEL_RIGHT           = 1,     /*!< RIGHT : Use right-justified format.                                       */
} I2S_0_RXCONTROL_JSEL_Enum;

/* ==============================================  I2S_0 RXCONTROL DDIS [9..9]  ============================================== */
typedef enum {                                  /*!< I2S_0_RXCONTROL_DDIS                                                      */
  I2S_0_RXCONTROL_DDIS_INACTIVE        = 0,     /*!< INACTIVE : The first data bit is captured on the second or later
                                                     rising edge of SCK after WS changes.                                      */
  I2S_0_RXCONTROL_DDIS_ACTIVE          = 1,     /*!< ACTIVE : The first data bit is captured by the receiver on the
                                                     first rising edge of SCK after WS changes.                                */
} I2S_0_RXCONTROL_DDIS_Enum;

/* ===========================================  I2S_0 RXCONTROL FSINVEN [11..11]  ============================================ */
typedef enum {                                  /*!< I2S_0_RXCONTROL_FSINVEN                                                   */
  I2S_0_RXCONTROL_FSINVEN_DISABLED     = 0,     /*!< DISABLED : Don't invert the WS signal. Use this setting for
                                                     I2S format.                                                               */
  I2S_0_RXCONTROL_FSINVEN_ENABLED      = 1,     /*!< ENABLED : Invert the WS signal.                                           */
} I2S_0_RXCONTROL_FSINVEN_Enum;

/* ==========================================  I2S_0 RXCONTROL SCLKINVEN [12..12]  =========================================== */
typedef enum {                                  /*!< I2S_0_RXCONTROL_SCLKINVEN                                                 */
  I2S_0_RXCONTROL_SCLKINVEN_DISABLED   = 0,     /*!< DISABLED : Do not invert the receiver bit clock.                          */
  I2S_0_RXCONTROL_SCLKINVEN_ENABLED    = 1,     /*!< ENABLED : Invert the receiver bit clock.                                  */
} I2S_0_RXCONTROL_SCLKINVEN_Enum;

/* ============================================  I2S_0 RXCONTROL ORDER [13..13]  ============================================= */
typedef enum {                                  /*!< I2S_0_RXCONTROL_ORDER                                                     */
  I2S_0_RXCONTROL_ORDER_LEFT_RIGHT     = 0,     /*!< LEFT_RIGHT : Left sample received first, right sample received
                                                     second. Use this setting for I2S format.                                  */
  I2S_0_RXCONTROL_ORDER_RIGHT_LEFT     = 1,     /*!< RIGHT_LEFT : Right sample received first, left sample received
                                                     second.                                                                   */
} I2S_0_RXCONTROL_ORDER_Enum;

/* ============================================  I2S_0 RXCONTROL MBSEL [15..17]  ============================================= */
typedef enum {                                  /*!< I2S_0_RXCONTROL_MBSEL                                                     */
  I2S_0_RXCONTROL_MBSEL_8BITS          = 0,     /*!< 8BITS : 8 bits are received per mono sample.                              */
  I2S_0_RXCONTROL_MBSEL_9BITS          = 1,     /*!< 9BITS : 9 bits are received per mono sample.                              */
  I2S_0_RXCONTROL_MBSEL_16BITS         = 2,     /*!< 16BITS : 16 bits are received per mono sample.                            */
  I2S_0_RXCONTROL_MBSEL_24BITS         = 3,     /*!< 24BITS : 24 bits are received per mono sample.                            */
  I2S_0_RXCONTROL_MBSEL_32BITS         = 4,     /*!< 32BITS : 32 bits are received per mono sample.                            */
} I2S_0_RXCONTROL_MBSEL_Enum;

/* ===========================================  I2S_0 RXCONTROL FSSRCSEL [20..20]  =========================================== */
typedef enum {                                  /*!< I2S_0_RXCONTROL_FSSRCSEL                                                  */
  I2S_0_RXCONTROL_FSSRCSEL_FSIN_EXT    = 0,     /*!< FSIN_EXT : The word select or frame sync is input from the WS
                                                     pin.                                                                      */
  I2S_0_RXCONTROL_FSSRCSEL_FSIN_INT    = 1,     /*!< FSIN_INT : The word select or frame sync is input from the internal
                                                     DFS generator.                                                            */
} I2S_0_RXCONTROL_FSSRCSEL_Enum;

/* =============================================  I2S_0 RXCONTROL RXEN [21..21]  ============================================= */
typedef enum {                                  /*!< I2S_0_RXCONTROL_RXEN                                                      */
  I2S_0_RXCONTROL_RXEN_DISABLED        = 0,     /*!< DISABLED : Disable the I2S receiver.                                      */
  I2S_0_RXCONTROL_RXEN_ENABLED         = 1,     /*!< ENABLED : Enable the I2S receiver.                                        */
} I2S_0_RXCONTROL_RXEN_Enum;

/* ========================================================  RXMODE  ========================================================= */
/* ==============================================  I2S_0 RXMODE TDMEN [27..27]  ============================================== */
typedef enum {                                  /*!< I2S_0_RXMODE_TDMEN                                                        */
  I2S_0_RXMODE_TDMEN_DISABLED          = 0,     /*!< DISABLED : Disable the time division multiplexing (TDM) feature.          */
  I2S_0_RXMODE_TDMEN_ENABLED           = 1,     /*!< ENABLED : Enable the time division multiplexing (TDM) feature.            */
} I2S_0_RXMODE_TDMEN_Enum;

/* ======================================================  CLKCONTROL  ======================================================= */
/* ===========================================  I2S_0 CLKCONTROL DUTYMD [18..18]  ============================================ */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_DUTYMD                                                   */
  I2S_0_CLKCONTROL_DUTYMD_MORE         = 0,     /*!< MORE : When the division is fractional, the clock high time
                                                     will be greater than 50% (by half of the source clock period).            */
  I2S_0_CLKCONTROL_DUTYMD_LESS         = 1,     /*!< LESS : When the division is fractional, the clock low time will
                                                     be greater than 50% (by half of the source clock period).                 */
} I2S_0_CLKCONTROL_DUTYMD_Enum;

/* ===========================================  I2S_0 CLKCONTROL CLKUPD [19..19]  ============================================ */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_CLKUPD                                                   */
  I2S_0_CLKCONTROL_CLKUPD_UPDATE       = 1,     /*!< UPDATE : Update the clock divider with new values of INTDIV,
                                                     FRACDIV, and DIVEN.                                                       */
} I2S_0_CLKCONTROL_CLKUPD_Enum;

/* ============================================  I2S_0 CLKCONTROL DIVEN [20..20]  ============================================ */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_DIVEN                                                    */
  I2S_0_CLKCONTROL_DIVEN_DISABLED      = 0,     /*!< DISABLED : Disable the clock divider.                                     */
  I2S_0_CLKCONTROL_DIVEN_ENABLED       = 1,     /*!< ENABLED : Enable the clock divider.                                       */
} I2S_0_CLKCONTROL_DIVEN_Enum;

/* ==========================================  I2S_0 CLKCONTROL TXCLKSEL [21..21]  =========================================== */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_TXCLKSEL                                                 */
  I2S_0_CLKCONTROL_TXCLKSEL_INTERNAL   = 0,     /*!< INTERNAL : The I2S transmitter is clocked from the internal
                                                     clock divider.                                                            */
  I2S_0_CLKCONTROL_TXCLKSEL_EXTERNAL   = 1,     /*!< EXTERNAL : The I2S transmitter is clocked from the SCK pin.               */
} I2S_0_CLKCONTROL_TXCLKSEL_Enum;

/* ==========================================  I2S_0 CLKCONTROL RXCLKSEL [22..22]  =========================================== */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_RXCLKSEL                                                 */
  I2S_0_CLKCONTROL_RXCLKSEL_INTERNAL   = 0,     /*!< INTERNAL : The I2S receiver is clocked from the internal clock
                                                     divider.                                                                  */
  I2S_0_CLKCONTROL_RXCLKSEL_EXTERNAL   = 1,     /*!< EXTERNAL : The I2S receiver is clocked from the SCK pin.                  */
} I2S_0_CLKCONTROL_RXCLKSEL_Enum;

/* ============================================  I2S_0 CLKCONTROL RESET [23..23]  ============================================ */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_RESET                                                    */
  I2S_0_CLKCONTROL_RESET_ACTIVE        = 1,     /*!< ACTIVE : Reset the I2S module.                                            */
} I2S_0_CLKCONTROL_RESET_Enum;

/* ===========================================  I2S_0 CLKCONTROL RXCLKEN [24..24]  =========================================== */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_RXCLKEN                                                  */
  I2S_0_CLKCONTROL_RXCLKEN_DISABLED    = 0,     /*!< DISABLED : Disable the I2S receiver clock.                                */
  I2S_0_CLKCONTROL_RXCLKEN_ENABLED     = 1,     /*!< ENABLED : Enable the I2S receiver clock.                                  */
} I2S_0_CLKCONTROL_RXCLKEN_Enum;

/* ===========================================  I2S_0 CLKCONTROL TXCLKEN [25..25]  =========================================== */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_TXCLKEN                                                  */
  I2S_0_CLKCONTROL_TXCLKEN_DISABLED    = 0,     /*!< DISABLED : Disable the I2S transmitter clock.                             */
  I2S_0_CLKCONTROL_TXCLKEN_ENABLED     = 1,     /*!< ENABLED : Enable the I2S transmitter clock.                               */
} I2S_0_CLKCONTROL_TXCLKEN_Enum;

/* ==========================================  I2S_0 CLKCONTROL RXSCLKMD [26..26]  =========================================== */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_RXSCLKMD                                                 */
  I2S_0_CLKCONTROL_RXSCLKMD_SCK_OUTPUT = 0,     /*!< SCK_OUTPUT : The I2S receiver SCK signal is an output.                    */
  I2S_0_CLKCONTROL_RXSCLKMD_SCK_INPUT  = 1,     /*!< SCK_INPUT : The I2S receiver SCK signal is an input.                      */
} I2S_0_CLKCONTROL_RXSCLKMD_Enum;

/* ==========================================  I2S_0 CLKCONTROL TXSCLKMD [27..27]  =========================================== */
typedef enum {                                  /*!< I2S_0_CLKCONTROL_TXSCLKMD                                                 */
  I2S_0_CLKCONTROL_TXSCLKMD_SCK_OUTPUT = 0,     /*!< SCK_OUTPUT : The I2S transmitter SCK signal is an output.                 */
  I2S_0_CLKCONTROL_TXSCLKMD_SCK_INPUT  = 1,     /*!< SCK_INPUT : The I2S transmitter SCK signal is an input.                   */
} I2S_0_CLKCONTROL_TXSCLKMD_Enum;

/* ========================================================  TXFIFO  ========================================================= */
/* ========================================================  RXFIFO  ========================================================= */
/* ======================================================  FIFOSTATUS  ======================================================= */
/* ======================================================  FIFOCONTROL  ====================================================== */
/* ==========================================  I2S_0 FIFOCONTROL TXFIFOFL [21..21]  ========================================== */
typedef enum {                                  /*!< I2S_0_FIFOCONTROL_TXFIFOFL                                                */
  I2S_0_FIFOCONTROL_TXFIFOFL_SET       = 1,     /*!< SET : Flush the I2S transmitter FIFO.                                     */
} I2S_0_FIFOCONTROL_TXFIFOFL_Enum;

/* ==========================================  I2S_0 FIFOCONTROL RXFIFOFL [22..22]  ========================================== */
typedef enum {                                  /*!< I2S_0_FIFOCONTROL_RXFIFOFL                                                */
  I2S_0_FIFOCONTROL_RXFIFOFL_SET       = 1,     /*!< SET : Flush the I2S receiver FIFO.                                        */
} I2S_0_FIFOCONTROL_RXFIFOFL_Enum;

/* ======================================================  INTCONTROL  ======================================================= */
/* ============================================  I2S_0 INTCONTROL TXUFIEN [0..0]  ============================================ */
typedef enum {                                  /*!< I2S_0_INTCONTROL_TXUFIEN                                                  */
  I2S_0_INTCONTROL_TXUFIEN_DISABLED    = 0,     /*!< DISABLED : Disable the transmit underflow interrupt.                      */
  I2S_0_INTCONTROL_TXUFIEN_ENABLED     = 1,     /*!< ENABLED : Enable the transmit underflow interrupt.                        */
} I2S_0_INTCONTROL_TXUFIEN_Enum;

/* ============================================  I2S_0 INTCONTROL RXOFIEN [1..1]  ============================================ */
typedef enum {                                  /*!< I2S_0_INTCONTROL_RXOFIEN                                                  */
  I2S_0_INTCONTROL_RXOFIEN_DISABLED    = 0,     /*!< DISABLED : Disable the receive overflow interrupt.                        */
  I2S_0_INTCONTROL_RXOFIEN_ENABLED     = 1,     /*!< ENABLED : Enable the receive overflow interrupt.                          */
} I2S_0_INTCONTROL_RXOFIEN_Enum;

/* ===========================================  I2S_0 INTCONTROL TXLWMIEN [2..2]  ============================================ */
typedef enum {                                  /*!< I2S_0_INTCONTROL_TXLWMIEN                                                 */
  I2S_0_INTCONTROL_TXLWMIEN_DISABLED   = 0,     /*!< DISABLED : Disable the transmit FIFO low watermark interrupt.             */
  I2S_0_INTCONTROL_TXLWMIEN_ENABLED    = 1,     /*!< ENABLED : Enable the transmit FIFO low watermark interrupt.               */
} I2S_0_INTCONTROL_TXLWMIEN_Enum;

/* ===========================================  I2S_0 INTCONTROL RXHWMIEN [3..3]  ============================================ */
typedef enum {                                  /*!< I2S_0_INTCONTROL_RXHWMIEN                                                 */
  I2S_0_INTCONTROL_RXHWMIEN_DISABLED   = 0,     /*!< DISABLED : Disable the receive FIFO high watermark interrupt.             */
  I2S_0_INTCONTROL_RXHWMIEN_ENABLED    = 1,     /*!< ENABLED : Enable the receive FIFO high watermark interrupt.               */
} I2S_0_INTCONTROL_RXHWMIEN_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ===============================================  I2S_0 STATUS TXUFI [0..0]  =============================================== */
typedef enum {                                  /*!< I2S_0_STATUS_TXUFI                                                        */
  I2S_0_STATUS_TXUFI_NOT_SET           = 0,     /*!< NOT_SET : A transmit underflow has not occurred.                          */
  I2S_0_STATUS_TXUFI_SET               = 1,     /*!< SET : A transmit underflow occurred.                                      */
} I2S_0_STATUS_TXUFI_Enum;

/* ===============================================  I2S_0 STATUS RXOFI [1..1]  =============================================== */
typedef enum {                                  /*!< I2S_0_STATUS_RXOFI                                                        */
  I2S_0_STATUS_RXOFI_NOT_SET           = 0,     /*!< NOT_SET : A receive overflow has not occurred.                            */
  I2S_0_STATUS_RXOFI_SET               = 1,     /*!< SET : A receive overflow occurred.                                        */
} I2S_0_STATUS_RXOFI_Enum;

/* ==============================================  I2S_0 STATUS TXLWMI [2..2]  =============================================== */
typedef enum {                                  /*!< I2S_0_STATUS_TXLWMI                                                       */
  I2S_0_STATUS_TXLWMI_NOT_SET          = 0,     /*!< NOT_SET : Transmit FIFO level is above the low watermark.                 */
  I2S_0_STATUS_TXLWMI_SET              = 1,     /*!< SET : Transmit FIFO level is at or below the low watermark.               */
} I2S_0_STATUS_TXLWMI_Enum;

/* ==============================================  I2S_0 STATUS RXHWMI [3..3]  =============================================== */
typedef enum {                                  /*!< I2S_0_STATUS_RXHWMI                                                       */
  I2S_0_STATUS_RXHWMI_NOT_SET          = 0,     /*!< NOT_SET : Receive FIFO level is below the high watermark.                 */
  I2S_0_STATUS_RXHWMI_SET              = 1,     /*!< SET : Receive FIFO level is at or above the high watermark.               */
} I2S_0_STATUS_RXHWMI_Enum;

/* ==============================================  I2S_0 STATUS CDBUSYF [4..4]  ============================================== */
typedef enum {                                  /*!< I2S_0_STATUS_CDBUSYF                                                      */
  I2S_0_STATUS_CDBUSYF_NOT_BUSY        = 0,     /*!< NOT_BUSY : The divider is not busy and an update is not pending.          */
  I2S_0_STATUS_CDBUSYF_BUSY            = 1,     /*!< BUSY : The divider is busy and an update is pending.                      */
} I2S_0_STATUS_CDBUSYF_Enum;

/* ===============================================  I2S_0 STATUS CDSTS [5..5]  =============================================== */
typedef enum {                                  /*!< I2S_0_STATUS_CDSTS                                                        */
  I2S_0_STATUS_CDSTS_RUNNING           = 0,     /*!< RUNNING : Divided clock output is running.                                */
  I2S_0_STATUS_CDSTS_HALTED            = 1,     /*!< HALTED : Divided clock output is halted.                                  */
} I2S_0_STATUS_CDSTS_Enum;

/* ============================================  I2S_0 STATUS TXCLKSELRF [6..6]  ============================================= */
typedef enum {                                  /*!< I2S_0_STATUS_TXCLKSELRF                                                   */
  I2S_0_STATUS_TXCLKSELRF_NOT_SET      = 0,     /*!< NOT_SET : The transmit clock is not synchronized.                         */
  I2S_0_STATUS_TXCLKSELRF_SET          = 1,     /*!< SET : The transmit clock is synchronized and the transmitter
                                                     is ready to send data.                                                    */
} I2S_0_STATUS_TXCLKSELRF_Enum;

/* ============================================  I2S_0 STATUS RXCLKSELRF [7..7]  ============================================= */
typedef enum {                                  /*!< I2S_0_STATUS_RXCLKSELRF                                                   */
  I2S_0_STATUS_RXCLKSELRF_NOT_SET      = 0,     /*!< NOT_SET : The receive clock is not synchronized.                          */
  I2S_0_STATUS_RXCLKSELRF_SET          = 1,     /*!< SET : The receive clock is synchronized and the receiver is
                                                     ready to accept data.                                                     */
} I2S_0_STATUS_RXCLKSELRF_Enum;

/* =============================================  I2S_0 STATUS TXCLKENRF [8..8]  ============================================= */
typedef enum {                                  /*!< I2S_0_STATUS_TXCLKENRF                                                    */
  I2S_0_STATUS_TXCLKENRF_NOT_SET       = 0,     /*!< NOT_SET : The transmit clock is not synchronized.                         */
  I2S_0_STATUS_TXCLKENRF_SET           = 1,     /*!< SET : The transmit clock is synchronized and the transmitter
                                                     is ready to send data.                                                    */
} I2S_0_STATUS_TXCLKENRF_Enum;

/* =============================================  I2S_0 STATUS RXCLKENRF [9..9]  ============================================= */
typedef enum {                                  /*!< I2S_0_STATUS_RXCLKENRF                                                    */
  I2S_0_STATUS_RXCLKENRF_NOT_SET       = 0,     /*!< NOT_SET : The receive clock is not synchronized.                          */
  I2S_0_STATUS_RXCLKENRF_SET           = 1,     /*!< SET : The receive clock is synchronized and the receiver is
                                                     ready to accept data.                                                     */
} I2S_0_STATUS_RXCLKENRF_Enum;

/* ======================================================  DMACONTROL  ======================================================= */
/* ============================================  I2S_0 DMACONTROL TXDMAEN [0..0]  ============================================ */
typedef enum {                                  /*!< I2S_0_DMACONTROL_TXDMAEN                                                  */
  I2S_0_DMACONTROL_TXDMAEN_DISABLED    = 0,     /*!< DISABLED : Disable transmitter DMA data requests.                         */
  I2S_0_DMACONTROL_TXDMAEN_ENABLED     = 1,     /*!< ENABLED : Enable transmitter DMA data requests.                           */
} I2S_0_DMACONTROL_TXDMAEN_Enum;

/* ============================================  I2S_0 DMACONTROL RXDMAEN [1..1]  ============================================ */
typedef enum {                                  /*!< I2S_0_DMACONTROL_RXDMAEN                                                  */
  I2S_0_DMACONTROL_RXDMAEN_DISABLED    = 0,     /*!< DISABLED : Disable receiver DMA data transfer requests.                   */
  I2S_0_DMACONTROL_RXDMAEN_ENABLED     = 1,     /*!< ENABLED : Enable receiver DMA data transfer requests.                     */
} I2S_0_DMACONTROL_RXDMAEN_Enum;

/* ===========================================  I2S_0 DMACONTROL TXDMABMD [2..2]  ============================================ */
typedef enum {                                  /*!< I2S_0_DMACONTROL_TXDMABMD                                                 */
  I2S_0_DMACONTROL_TXDMABMD_ONE_WORD   = 0,     /*!< ONE_WORD : The transmitter transmits one word at a time. Whenever
                                                     there is any room in the transmit FIFO, a single word burst
                                                     DMA data request is generated.                                            */
  I2S_0_DMACONTROL_TXDMABMD_FOUR_WORDS = 1,     /*!< FOUR_WORDS : The transmitter transmits four words at a time.
                                                     Whenever the FIFO depth drops below five, a DMA burst request
                                                     is generated for four words.                                              */
} I2S_0_DMACONTROL_TXDMABMD_Enum;

/* ===========================================  I2S_0 DMACONTROL RXDMABMD [3..3]  ============================================ */
typedef enum {                                  /*!< I2S_0_DMACONTROL_RXDMABMD                                                 */
  I2S_0_DMACONTROL_RXDMABMD_ONE_WORD   = 0,     /*!< ONE_WORD : The receiver receives one word at a time. Whenever
                                                     there is at least one word in the receive FIFO, a single
                                                     word burst DMA request is generated.                                      */
  I2S_0_DMACONTROL_RXDMABMD_FOUR_WORDS = 1,     /*!< FOUR_WORDS : The receiver receives four words at a time. Whenever
                                                     the FIFO depth rises above three, a DMA burst request is
                                                     generated for four words.                                                 */
} I2S_0_DMACONTROL_RXDMABMD_Enum;

/* ======================================================  DBGCONTROL  ======================================================= */
/* ===========================================  I2S_0 DBGCONTROL TXDBGHEN [0..0]  ============================================ */
typedef enum {                                  /*!< I2S_0_DBGCONTROL_TXDBGHEN                                                 */
  I2S_0_DBGCONTROL_TXDBGHEN_DISABLED   = 0,     /*!< DISABLED : Transmit DMA requests continue while the core is
                                                     debug mode.                                                               */
  I2S_0_DBGCONTROL_TXDBGHEN_ENABLED    = 1,     /*!< ENABLED : Transmit DMA requests stop while the core is debug
                                                     mode.                                                                     */
} I2S_0_DBGCONTROL_TXDBGHEN_Enum;

/* ===========================================  I2S_0 DBGCONTROL RXDBGHEN [1..1]  ============================================ */
typedef enum {                                  /*!< I2S_0_DBGCONTROL_RXDBGHEN                                                 */
  I2S_0_DBGCONTROL_RXDBGHEN_DISABLED   = 0,     /*!< DISABLED : Receive DMA requests continue while the core is debug
                                                     mode.                                                                     */
  I2S_0_DBGCONTROL_RXDBGHEN_ENABLED    = 1,     /*!< ENABLED : Receive DMA requests stop while the core is debug
                                                     mode.                                                                     */
} I2S_0_DBGCONTROL_RXDBGHEN_Enum;

/* ============================================  I2S_0 DBGCONTROL TXDBGMD [2..2]  ============================================ */
typedef enum {                                  /*!< I2S_0_DBGCONTROL_TXDBGMD                                                  */
  I2S_0_DBGCONTROL_TXDBGMD_RUN         = 0,     /*!< RUN : The clock to the I2S transmitter is active in debug mode.           */
  I2S_0_DBGCONTROL_TXDBGMD_HALT        = 1,     /*!< HALT : The clock to the I2S transmitter is not active in debug
                                                     mode. The clock divider keeps running and the clock will
                                                     be disabled when two samples are ready to be sent by the
                                                     transmitter.                                                              */
} I2S_0_DBGCONTROL_TXDBGMD_Enum;

/* ============================================  I2S_0 DBGCONTROL RXDBGMD [3..3]  ============================================ */
typedef enum {                                  /*!< I2S_0_DBGCONTROL_RXDBGMD                                                  */
  I2S_0_DBGCONTROL_RXDBGMD_RUN         = 0,     /*!< RUN : The clock to the I2S receiver is active in debug mode.              */
  I2S_0_DBGCONTROL_RXDBGMD_HALT        = 1,     /*!< HALT : The clock to the I2S receiver is not active in debug
                                                     mode. The clock divider keeps running and the clock will
                                                     be disabled when two samples are captured in the receiver.                */
} I2S_0_DBGCONTROL_RXDBGMD_Enum;



/* =========================================================================================================================== */
/* ================                                          IDAC_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  IDAC_0 CONTROL OUPDT [0..2]  ============================================== */
typedef enum {                                  /*!< IDAC_0_CONTROL_OUPDT                                                      */
  IDAC_0_CONTROL_OUPDT_DACNT8          = 0,     /*!< DACNT8 : The IDAC output updates using the DACnT8 (Timer 0 Low
                                                     Overflow) trigger source.                                                 */
  IDAC_0_CONTROL_OUPDT_DACNT9          = 1,     /*!< DACNT9 : The IDAC output updates using the DACnT9 (Timer 1 High
                                                     Overflow) trigger source.                                                 */
  IDAC_0_CONTROL_OUPDT_DACNT10         = 2,     /*!< DACNT10 : The IDAC output updates using the DACnT10 (Timer 1
                                                     Low Overflow) trigger source.                                             */
  IDAC_0_CONTROL_OUPDT_DACNT11         = 3,     /*!< DACNT11 : The IDAC output updates using the DACnT11 (Timer 1
                                                     High Overflow) trigger source.                                            */
  IDAC_0_CONTROL_OUPDT_DACNT12         = 4,     /*!< DACNT12 : The IDAC output updates on the rising edge of the
                                                     trigger source selected by ETRIG.                                         */
  IDAC_0_CONTROL_OUPDT_DACNT13         = 5,     /*!< DACNT13 : The IDAC output updates on the falling edge of the
                                                     trigger source selected by ETRIG.                                         */
  IDAC_0_CONTROL_OUPDT_DACNT14         = 6,     /*!< DACNT14 : The IDAC output updates on any edge of the trigger
                                                     source selected by ETRIG.                                                 */
  IDAC_0_CONTROL_OUPDT_DACNT15         = 7,     /*!< DACNT15 : The IDAC output updates on write to DATA register
                                                     (On Demand).                                                              */
} IDAC_0_CONTROL_OUPDT_Enum;

/* ==============================================  IDAC_0 CONTROL ETRIG [3..5]  ============================================== */
typedef enum {                                  /*!< IDAC_0_CONTROL_ETRIG                                                      */
  IDAC_0_CONTROL_ETRIG_DACNT0          = 0,     /*!< DACNT0 : Select DACnT0 (PB3.2) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_0_CONTROL_ETRIG_DACNT1          = 1,     /*!< DACNT1 : Select DACnT1 (PB3.3) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_0_CONTROL_ETRIG_DACNT2          = 2,     /*!< DACNT2 : Select DACnT2 (PB3.5) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_0_CONTROL_ETRIG_DACNT3          = 3,     /*!< DACNT3 : Select DACnT3 (PB3.6) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_0_CONTROL_ETRIG_DACNT4          = 4,     /*!< DACNT4 : Select DACnT4 (PB3.7) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_0_CONTROL_ETRIG_DACNT5          = 5,     /*!< DACNT5 : Select DACnT5 (PB3.8) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_0_CONTROL_ETRIG_DACNT6          = 6,     /*!< DACNT6 : Select DACnT6 (PB3.9) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_0_CONTROL_ETRIG_DACNT7          = 7,     /*!< DACNT7 : Select DACnT7 (SSG0 EX2) as the IDAC external trigger
                                                     source.                                                                   */
} IDAC_0_CONTROL_ETRIG_Enum;

/* ==============================================  IDAC_0 CONTROL OUTMD [6..7]  ============================================== */
typedef enum {                                  /*!< IDAC_0_CONTROL_OUTMD                                                      */
  IDAC_0_CONTROL_OUTMD_0P5_MA          = 0,     /*!< 0P5_MA : The full-scale output current is 0.5 mA.                         */
  IDAC_0_CONTROL_OUTMD_1_MA            = 1,     /*!< 1_MA : The full-scale output current is 1 mA.                             */
  IDAC_0_CONTROL_OUTMD_2_MA            = 2,     /*!< 2_MA : The full-scale output current is 2 mA.                             */
} IDAC_0_CONTROL_OUTMD_Enum;

/* ==============================================  IDAC_0 CONTROL INFMT [8..9]  ============================================== */
typedef enum {                                  /*!< IDAC_0_CONTROL_INFMT                                                      */
  IDAC_0_CONTROL_INFMT_1_10_BIT        = 0,     /*!< 1_10_BIT : Writes are interpreted as one 10-bit sample.                   */
  IDAC_0_CONTROL_INFMT_2_10_BIT        = 1,     /*!< 2_10_BIT : Writes are interpreted as two 10-bit samples.                  */
  IDAC_0_CONTROL_INFMT_4_8_BIT         = 2,     /*!< 4_8_BIT : Writes are interpreted as four 8-bit samples.                   */
} IDAC_0_CONTROL_INFMT_Enum;

/* ============================================  IDAC_0 CONTROL DMARUN [10..10]  ============================================= */
typedef enum {                                  /*!< IDAC_0_CONTROL_DMARUN                                                     */
  IDAC_0_CONTROL_DMARUN_DISABLED       = 0,     /*!< DISABLED : Read: No DMA operations are occurring or the DMA
                                                     is done. Write: No effect.                                                */
  IDAC_0_CONTROL_DMARUN_ENABLED        = 1,     /*!< ENABLED : Read: A DMA operation is currently in progress. Write:
                                                     Start a DMA operation.                                                    */
} IDAC_0_CONTROL_DMARUN_Enum;

/* =============================================  IDAC_0 CONTROL JSEL [11..11]  ============================================== */
typedef enum {                                  /*!< IDAC_0_CONTROL_JSEL                                                       */
  IDAC_0_CONTROL_JSEL_RIGHT            = 0,     /*!< RIGHT : Data is right-justified.                                          */
  IDAC_0_CONTROL_JSEL_LEFT             = 1,     /*!< LEFT : Data is left-justified.                                            */
} IDAC_0_CONTROL_JSEL_Enum;

/* ===========================================  IDAC_0 CONTROL BUFRESET [12..12]  ============================================ */
typedef enum {                                  /*!< IDAC_0_CONTROL_BUFRESET                                                   */
  IDAC_0_CONTROL_BUFRESET_RESET        = 1,     /*!< RESET : Initiate a data buffer reset.                                     */
} IDAC_0_CONTROL_BUFRESET_Enum;

/* ============================================  IDAC_0 CONTROL TRIGINH [13..13]  ============================================ */
typedef enum {                                  /*!< IDAC_0_CONTROL_TRIGINH                                                    */
  IDAC_0_CONTROL_TRIGINH_INACTIVE      = 0,     /*!< INACTIVE : The selected trigger source will cause the IDAC output
                                                     to update.                                                                */
  IDAC_0_CONTROL_TRIGINH_ACTIVE        = 1,     /*!< ACTIVE : The selected trigger source will not update the IDAC
                                                     output, except for On-Demand DATA writes.                                 */
} IDAC_0_CONTROL_TRIGINH_Enum;

/* ============================================  IDAC_0 CONTROL WRAPEN [16..16]  ============================================= */
typedef enum {                                  /*!< IDAC_0_CONTROL_WRAPEN                                                     */
  IDAC_0_CONTROL_WRAPEN_DISABLED       = 0,     /*!< DISABLED : The IDAC will not wrap when it reaches the end of
                                                     the data buffer.                                                          */
  IDAC_0_CONTROL_WRAPEN_ENABLED        = 1,     /*!< ENABLED : The IDAC will cycle through the data buffer contents.           */
} IDAC_0_CONTROL_WRAPEN_Enum;

/* =============================================  IDAC_0 CONTROL ORIEN [20..20]  ============================================= */
typedef enum {                                  /*!< IDAC_0_CONTROL_ORIEN                                                      */
  IDAC_0_CONTROL_ORIEN_DISABLED        = 0,     /*!< DISABLED : Disable the FIFO overrun interrupt (ORI).                      */
  IDAC_0_CONTROL_ORIEN_ENABLED         = 1,     /*!< ENABLED : Enable the FIFO overrun interrupt (ORI).                        */
} IDAC_0_CONTROL_ORIEN_Enum;

/* =============================================  IDAC_0 CONTROL URIEN [21..21]  ============================================= */
typedef enum {                                  /*!< IDAC_0_CONTROL_URIEN                                                      */
  IDAC_0_CONTROL_URIEN_DISABLED        = 0,     /*!< DISABLED : Disable the FIFO underrun interrupt (URI).                     */
  IDAC_0_CONTROL_URIEN_ENABLED         = 1,     /*!< ENABLED : Enable the FIFO underrun interrupt (URI).                       */
} IDAC_0_CONTROL_URIEN_Enum;

/* =============================================  IDAC_0 CONTROL WEIEN [22..22]  ============================================= */
typedef enum {                                  /*!< IDAC_0_CONTROL_WEIEN                                                      */
  IDAC_0_CONTROL_WEIEN_DISABLED        = 0,     /*!< DISABLED : Disable the FIFO went empty interrupt (WEI).                   */
  IDAC_0_CONTROL_WEIEN_ENABLED         = 1,     /*!< ENABLED : Enable the FIFO went empty interrupt (WEI).                     */
} IDAC_0_CONTROL_WEIEN_Enum;

/* =============================================  IDAC_0 CONTROL DBGMD [29..29]  ============================================= */
typedef enum {                                  /*!< IDAC_0_CONTROL_DBGMD                                                      */
  IDAC_0_CONTROL_DBGMD_RUN             = 0,     /*!< RUN : The IDAC module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  IDAC_0_CONTROL_DBGMD_HALT            = 1,     /*!< HALT : A debug breakpoint will cause the IDAC module to halt.             */
} IDAC_0_CONTROL_DBGMD_Enum;

/* ============================================  IDAC_0 CONTROL LOADEN [30..30]  ============================================= */
typedef enum {                                  /*!< IDAC_0_CONTROL_LOADEN                                                     */
  IDAC_0_CONTROL_LOADEN_DISABLED       = 0,     /*!< DISABLED : Disable the internal load resistor.                            */
  IDAC_0_CONTROL_LOADEN_ENABLED        = 1,     /*!< ENABLED : Enable the internal load resistor.                              */
} IDAC_0_CONTROL_LOADEN_Enum;

/* ============================================  IDAC_0 CONTROL IDACEN [31..31]  ============================================= */
typedef enum {                                  /*!< IDAC_0_CONTROL_IDACEN                                                     */
  IDAC_0_CONTROL_IDACEN_DISABLED       = 0,     /*!< DISABLED : Disable the IDAC.                                              */
  IDAC_0_CONTROL_IDACEN_ENABLED        = 1,     /*!< ENABLED : Enable the IDAC.                                                */
} IDAC_0_CONTROL_IDACEN_Enum;

/* =========================================================  DATA  ========================================================== */
/* =======================================================  BUFSTATUS  ======================================================= */
/* =============================================  IDAC_0 BUFSTATUS LEVEL [0..2]  ============================================= */
typedef enum {                                  /*!< IDAC_0_BUFSTATUS_LEVEL                                                    */
  IDAC_0_BUFSTATUS_LEVEL_EMPTY         = 0,     /*!< EMPTY : The data FIFO is empty.                                           */
  IDAC_0_BUFSTATUS_LEVEL_1WORD         = 1,     /*!< 1WORD : The data FIFO contains one word.                                  */
  IDAC_0_BUFSTATUS_LEVEL_2WORDS        = 2,     /*!< 2WORDS : The data FIFO contains two words.                                */
  IDAC_0_BUFSTATUS_LEVEL_3WORDS        = 3,     /*!< 3WORDS : The data FIFO contains three words.                              */
  IDAC_0_BUFSTATUS_LEVEL_4WORDS        = 4,     /*!< 4WORDS : The data FIFO is full and contains four words.                   */
} IDAC_0_BUFSTATUS_LEVEL_Enum;

/* ==============================================  IDAC_0 BUFSTATUS ORI [4..4]  ============================================== */
typedef enum {                                  /*!< IDAC_0_BUFSTATUS_ORI                                                      */
  IDAC_0_BUFSTATUS_ORI_NOT_SET         = 0,     /*!< NOT_SET : Read: A FIFO overrun has not occurred. Write: Clear
                                                     the interrupt.                                                            */
  IDAC_0_BUFSTATUS_ORI_SET             = 1,     /*!< SET : Read: A FIFO overrun occurred. Write: Force a FIFO overrun
                                                     interrupt.                                                                */
} IDAC_0_BUFSTATUS_ORI_Enum;

/* ==============================================  IDAC_0 BUFSTATUS URI [5..5]  ============================================== */
typedef enum {                                  /*!< IDAC_0_BUFSTATUS_URI                                                      */
  IDAC_0_BUFSTATUS_URI_NOT_SET         = 0,     /*!< NOT_SET : Read: A FIFO underrun has not occurred. Write: Clear
                                                     the interrupt.                                                            */
  IDAC_0_BUFSTATUS_URI_SET             = 1,     /*!< SET : Read: A FIFO underrun occurred. Write: Force a FIFO underrun
                                                     interrupt.                                                                */
} IDAC_0_BUFSTATUS_URI_Enum;

/* ==============================================  IDAC_0 BUFSTATUS WEI [6..6]  ============================================== */
typedef enum {                                  /*!< IDAC_0_BUFSTATUS_WEI                                                      */
  IDAC_0_BUFSTATUS_WEI_NOT_SET         = 0,     /*!< NOT_SET : Read: A FIFO went empty condition has not occurred.
                                                     Write: Clear the interrupt.                                               */
  IDAC_0_BUFSTATUS_WEI_SET             = 1,     /*!< SET : Read: The FIFO is empty. Write: Force a FIFO went empty
                                                     interrupt.                                                                */
} IDAC_0_BUFSTATUS_WEI_Enum;

/* =======================================================  BUFFER10  ======================================================== */
/* =======================================================  BUFFER32  ======================================================== */
/* ========================================================  GAINADJ  ======================================================== */


/* =========================================================================================================================== */
/* ================                                          IDAC_1                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  IDAC_1 CONTROL OUPDT [0..2]  ============================================== */
typedef enum {                                  /*!< IDAC_1_CONTROL_OUPDT                                                      */
  IDAC_1_CONTROL_OUPDT_DACNT8          = 0,     /*!< DACNT8 : The IDAC output updates using the DACnT8 (Timer 0 Low
                                                     Overflow) trigger source.                                                 */
  IDAC_1_CONTROL_OUPDT_DACNT9          = 1,     /*!< DACNT9 : The IDAC output updates using the DACnT9 (Timer 1 High
                                                     Overflow) trigger source.                                                 */
  IDAC_1_CONTROL_OUPDT_DACNT10         = 2,     /*!< DACNT10 : The IDAC output updates using the DACnT10 (Timer 1
                                                     Low Overflow) trigger source.                                             */
  IDAC_1_CONTROL_OUPDT_DACNT11         = 3,     /*!< DACNT11 : The IDAC output updates using the DACnT11 (Timer 1
                                                     High Overflow) trigger source.                                            */
  IDAC_1_CONTROL_OUPDT_DACNT12         = 4,     /*!< DACNT12 : The IDAC output updates on the rising edge of the
                                                     trigger source selected by ETRIG.                                         */
  IDAC_1_CONTROL_OUPDT_DACNT13         = 5,     /*!< DACNT13 : The IDAC output updates on the falling edge of the
                                                     trigger source selected by ETRIG.                                         */
  IDAC_1_CONTROL_OUPDT_DACNT14         = 6,     /*!< DACNT14 : The IDAC output updates on any edge of the trigger
                                                     source selected by ETRIG.                                                 */
  IDAC_1_CONTROL_OUPDT_DACNT15         = 7,     /*!< DACNT15 : The IDAC output updates on write to DATA register
                                                     (On Demand).                                                              */
} IDAC_1_CONTROL_OUPDT_Enum;

/* ==============================================  IDAC_1 CONTROL ETRIG [3..5]  ============================================== */
typedef enum {                                  /*!< IDAC_1_CONTROL_ETRIG                                                      */
  IDAC_1_CONTROL_ETRIG_DACNT0          = 0,     /*!< DACNT0 : Select DACnT0 (PB3.2) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_1_CONTROL_ETRIG_DACNT1          = 1,     /*!< DACNT1 : Select DACnT1 (PB3.3) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_1_CONTROL_ETRIG_DACNT2          = 2,     /*!< DACNT2 : Select DACnT2 (PB3.5) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_1_CONTROL_ETRIG_DACNT3          = 3,     /*!< DACNT3 : Select DACnT3 (PB3.6) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_1_CONTROL_ETRIG_DACNT4          = 4,     /*!< DACNT4 : Select DACnT4 (PB3.7) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_1_CONTROL_ETRIG_DACNT5          = 5,     /*!< DACNT5 : Select DACnT5 (PB3.8) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_1_CONTROL_ETRIG_DACNT6          = 6,     /*!< DACNT6 : Select DACnT6 (PB3.9) as the IDAC external trigger
                                                     source.                                                                   */
  IDAC_1_CONTROL_ETRIG_DACNT7          = 7,     /*!< DACNT7 : Select DACnT7 (SSG0 EX3) as the IDAC external trigger
                                                     source.                                                                   */
} IDAC_1_CONTROL_ETRIG_Enum;

/* ==============================================  IDAC_1 CONTROL OUTMD [6..7]  ============================================== */
typedef enum {                                  /*!< IDAC_1_CONTROL_OUTMD                                                      */
  IDAC_1_CONTROL_OUTMD_0P5_MA          = 0,     /*!< 0P5_MA : The full-scale output current is 0.5 mA.                         */
  IDAC_1_CONTROL_OUTMD_1_MA            = 1,     /*!< 1_MA : The full-scale output current is 1 mA.                             */
  IDAC_1_CONTROL_OUTMD_2_MA            = 2,     /*!< 2_MA : The full-scale output current is 2 mA.                             */
} IDAC_1_CONTROL_OUTMD_Enum;

/* ==============================================  IDAC_1 CONTROL INFMT [8..9]  ============================================== */
typedef enum {                                  /*!< IDAC_1_CONTROL_INFMT                                                      */
  IDAC_1_CONTROL_INFMT_1_10_BIT        = 0,     /*!< 1_10_BIT : Writes are interpreted as one 10-bit sample.                   */
  IDAC_1_CONTROL_INFMT_2_10_BIT        = 1,     /*!< 2_10_BIT : Writes are interpreted as two 10-bit samples.                  */
  IDAC_1_CONTROL_INFMT_4_8_BIT         = 2,     /*!< 4_8_BIT : Writes are interpreted as four 8-bit samples.                   */
} IDAC_1_CONTROL_INFMT_Enum;

/* ============================================  IDAC_1 CONTROL DMARUN [10..10]  ============================================= */
typedef enum {                                  /*!< IDAC_1_CONTROL_DMARUN                                                     */
  IDAC_1_CONTROL_DMARUN_DISABLED       = 0,     /*!< DISABLED : Read: No DMA operations are occurring or the DMA
                                                     is done. Write: No effect.                                                */
  IDAC_1_CONTROL_DMARUN_ENABLED        = 1,     /*!< ENABLED : Read: A DMA operation is currently in progress. Write:
                                                     Start a DMA operation.                                                    */
} IDAC_1_CONTROL_DMARUN_Enum;

/* =============================================  IDAC_1 CONTROL JSEL [11..11]  ============================================== */
typedef enum {                                  /*!< IDAC_1_CONTROL_JSEL                                                       */
  IDAC_1_CONTROL_JSEL_RIGHT            = 0,     /*!< RIGHT : Data is right-justified.                                          */
  IDAC_1_CONTROL_JSEL_LEFT             = 1,     /*!< LEFT : Data is left-justified.                                            */
} IDAC_1_CONTROL_JSEL_Enum;

/* ===========================================  IDAC_1 CONTROL BUFRESET [12..12]  ============================================ */
typedef enum {                                  /*!< IDAC_1_CONTROL_BUFRESET                                                   */
  IDAC_1_CONTROL_BUFRESET_RESET        = 1,     /*!< RESET : Initiate a data buffer reset.                                     */
} IDAC_1_CONTROL_BUFRESET_Enum;

/* ============================================  IDAC_1 CONTROL TRIGINH [13..13]  ============================================ */
typedef enum {                                  /*!< IDAC_1_CONTROL_TRIGINH                                                    */
  IDAC_1_CONTROL_TRIGINH_INACTIVE      = 0,     /*!< INACTIVE : The selected trigger source will cause the IDAC output
                                                     to update.                                                                */
  IDAC_1_CONTROL_TRIGINH_ACTIVE        = 1,     /*!< ACTIVE : The selected trigger source will not update the IDAC
                                                     output, except for On-Demand DATA writes.                                 */
} IDAC_1_CONTROL_TRIGINH_Enum;

/* ============================================  IDAC_1 CONTROL WRAPEN [16..16]  ============================================= */
typedef enum {                                  /*!< IDAC_1_CONTROL_WRAPEN                                                     */
  IDAC_1_CONTROL_WRAPEN_DISABLED       = 0,     /*!< DISABLED : The IDAC will not wrap when it reaches the end of
                                                     the data buffer.                                                          */
  IDAC_1_CONTROL_WRAPEN_ENABLED        = 1,     /*!< ENABLED : The IDAC will cycle through the data buffer contents.           */
} IDAC_1_CONTROL_WRAPEN_Enum;

/* =============================================  IDAC_1 CONTROL ORIEN [20..20]  ============================================= */
typedef enum {                                  /*!< IDAC_1_CONTROL_ORIEN                                                      */
  IDAC_1_CONTROL_ORIEN_DISABLED        = 0,     /*!< DISABLED : Disable the FIFO overrun interrupt (ORI).                      */
  IDAC_1_CONTROL_ORIEN_ENABLED         = 1,     /*!< ENABLED : Enable the FIFO overrun interrupt (ORI).                        */
} IDAC_1_CONTROL_ORIEN_Enum;

/* =============================================  IDAC_1 CONTROL URIEN [21..21]  ============================================= */
typedef enum {                                  /*!< IDAC_1_CONTROL_URIEN                                                      */
  IDAC_1_CONTROL_URIEN_DISABLED        = 0,     /*!< DISABLED : Disable the FIFO underrun interrupt (URI).                     */
  IDAC_1_CONTROL_URIEN_ENABLED         = 1,     /*!< ENABLED : Enable the FIFO underrun interrupt (URI).                       */
} IDAC_1_CONTROL_URIEN_Enum;

/* =============================================  IDAC_1 CONTROL WEIEN [22..22]  ============================================= */
typedef enum {                                  /*!< IDAC_1_CONTROL_WEIEN                                                      */
  IDAC_1_CONTROL_WEIEN_DISABLED        = 0,     /*!< DISABLED : Disable the FIFO went empty interrupt (WEI).                   */
  IDAC_1_CONTROL_WEIEN_ENABLED         = 1,     /*!< ENABLED : Enable the FIFO went empty interrupt (WEI).                     */
} IDAC_1_CONTROL_WEIEN_Enum;

/* =============================================  IDAC_1 CONTROL DBGMD [29..29]  ============================================= */
typedef enum {                                  /*!< IDAC_1_CONTROL_DBGMD                                                      */
  IDAC_1_CONTROL_DBGMD_RUN             = 0,     /*!< RUN : The IDAC module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  IDAC_1_CONTROL_DBGMD_HALT            = 1,     /*!< HALT : A debug breakpoint will cause the IDAC module to halt.             */
} IDAC_1_CONTROL_DBGMD_Enum;

/* ============================================  IDAC_1 CONTROL LOADEN [30..30]  ============================================= */
typedef enum {                                  /*!< IDAC_1_CONTROL_LOADEN                                                     */
  IDAC_1_CONTROL_LOADEN_DISABLED       = 0,     /*!< DISABLED : Disable the internal load resistor.                            */
  IDAC_1_CONTROL_LOADEN_ENABLED        = 1,     /*!< ENABLED : Enable the internal load resistor.                              */
} IDAC_1_CONTROL_LOADEN_Enum;

/* ============================================  IDAC_1 CONTROL IDACEN [31..31]  ============================================= */
typedef enum {                                  /*!< IDAC_1_CONTROL_IDACEN                                                     */
  IDAC_1_CONTROL_IDACEN_DISABLED       = 0,     /*!< DISABLED : Disable the IDAC.                                              */
  IDAC_1_CONTROL_IDACEN_ENABLED        = 1,     /*!< ENABLED : Enable the IDAC.                                                */
} IDAC_1_CONTROL_IDACEN_Enum;

/* =========================================================  DATA  ========================================================== */
/* =======================================================  BUFSTATUS  ======================================================= */
/* =============================================  IDAC_1 BUFSTATUS LEVEL [0..2]  ============================================= */
typedef enum {                                  /*!< IDAC_1_BUFSTATUS_LEVEL                                                    */
  IDAC_1_BUFSTATUS_LEVEL_EMPTY         = 0,     /*!< EMPTY : The data FIFO is empty.                                           */
  IDAC_1_BUFSTATUS_LEVEL_1WORD         = 1,     /*!< 1WORD : The data FIFO contains one word.                                  */
  IDAC_1_BUFSTATUS_LEVEL_2WORDS        = 2,     /*!< 2WORDS : The data FIFO contains two words.                                */
  IDAC_1_BUFSTATUS_LEVEL_3WORDS        = 3,     /*!< 3WORDS : The data FIFO contains three words.                              */
  IDAC_1_BUFSTATUS_LEVEL_4WORDS        = 4,     /*!< 4WORDS : The data FIFO is full and contains four words.                   */
} IDAC_1_BUFSTATUS_LEVEL_Enum;

/* ==============================================  IDAC_1 BUFSTATUS ORI [4..4]  ============================================== */
typedef enum {                                  /*!< IDAC_1_BUFSTATUS_ORI                                                      */
  IDAC_1_BUFSTATUS_ORI_NOT_SET         = 0,     /*!< NOT_SET : Read: A FIFO overrun has not occurred. Write: Clear
                                                     the interrupt.                                                            */
  IDAC_1_BUFSTATUS_ORI_SET             = 1,     /*!< SET : Read: A FIFO overrun occurred. Write: Force a FIFO overrun
                                                     interrupt.                                                                */
} IDAC_1_BUFSTATUS_ORI_Enum;

/* ==============================================  IDAC_1 BUFSTATUS URI [5..5]  ============================================== */
typedef enum {                                  /*!< IDAC_1_BUFSTATUS_URI                                                      */
  IDAC_1_BUFSTATUS_URI_NOT_SET         = 0,     /*!< NOT_SET : Read: A FIFO underrun has not occurred. Write: Clear
                                                     the interrupt.                                                            */
  IDAC_1_BUFSTATUS_URI_SET             = 1,     /*!< SET : Read: A FIFO underrun occurred. Write: Force a FIFO underrun
                                                     interrupt.                                                                */
} IDAC_1_BUFSTATUS_URI_Enum;

/* ==============================================  IDAC_1 BUFSTATUS WEI [6..6]  ============================================== */
typedef enum {                                  /*!< IDAC_1_BUFSTATUS_WEI                                                      */
  IDAC_1_BUFSTATUS_WEI_NOT_SET         = 0,     /*!< NOT_SET : Read: A FIFO went empty condition has not occurred.
                                                     Write: Clear the interrupt.                                               */
  IDAC_1_BUFSTATUS_WEI_SET             = 1,     /*!< SET : Read: The FIFO is empty. Write: Force a FIFO went empty
                                                     interrupt.                                                                */
} IDAC_1_BUFSTATUS_WEI_Enum;

/* =======================================================  BUFFER10  ======================================================== */
/* =======================================================  BUFFER32  ======================================================== */
/* ========================================================  GAINADJ  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           IVC_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  IVC_0 CONTROL IN0RANGE [0..2]  ============================================= */
typedef enum {                                  /*!< IVC_0_CONTROL_IN0RANGE                                                    */
  IVC_0_CONTROL_IN0RANGE_6_MA          = 0,     /*!< 6_MA : Input range is 0-6 mA.                                             */
  IVC_0_CONTROL_IN0RANGE_5_MA          = 1,     /*!< 5_MA : Input range is 0-5 mA.                                             */
  IVC_0_CONTROL_IN0RANGE_4_MA          = 2,     /*!< 4_MA : Input range is 0-4 mA.                                             */
  IVC_0_CONTROL_IN0RANGE_3_MA          = 3,     /*!< 3_MA : Input range is 0-3 mA.                                             */
  IVC_0_CONTROL_IN0RANGE_2_MA          = 4,     /*!< 2_MA : Input range is 0-2 mA.                                             */
  IVC_0_CONTROL_IN0RANGE_1_MA          = 5,     /*!< 1_MA : Input range is 0-1 mA.                                             */
} IVC_0_CONTROL_IN0RANGE_Enum;

/* =============================================  IVC_0 CONTROL IN1RANGE [4..6]  ============================================= */
typedef enum {                                  /*!< IVC_0_CONTROL_IN1RANGE                                                    */
  IVC_0_CONTROL_IN1RANGE_6_MA          = 0,     /*!< 6_MA : Input range is 0-6 mA.                                             */
  IVC_0_CONTROL_IN1RANGE_5_MA          = 1,     /*!< 5_MA : Input range is 0-5 mA.                                             */
  IVC_0_CONTROL_IN1RANGE_4_MA          = 2,     /*!< 4_MA : Input range is 0-4 mA.                                             */
  IVC_0_CONTROL_IN1RANGE_3_MA          = 3,     /*!< 3_MA : Input range is 0-3 mA.                                             */
  IVC_0_CONTROL_IN1RANGE_2_MA          = 4,     /*!< 2_MA : Input range is 0-2 mA.                                             */
  IVC_0_CONTROL_IN1RANGE_1_MA          = 5,     /*!< 1_MA : Input range is 0-1 mA.                                             */
} IVC_0_CONTROL_IN1RANGE_Enum;

/* ==============================================  IVC_0 CONTROL C0EN [30..30]  ============================================== */
typedef enum {                                  /*!< IVC_0_CONTROL_C0EN                                                        */
  IVC_0_CONTROL_C0EN_DISABLED          = 0,     /*!< DISABLED : Disable IVC channel 0.                                         */
  IVC_0_CONTROL_C0EN_ENABLED           = 1,     /*!< ENABLED : Enable IVC channel 0.                                           */
} IVC_0_CONTROL_C0EN_Enum;

/* ==============================================  IVC_0 CONTROL C1EN [31..31]  ============================================== */
typedef enum {                                  /*!< IVC_0_CONTROL_C1EN                                                        */
  IVC_0_CONTROL_C1EN_DISABLED          = 0,     /*!< DISABLED : Disable IVC channel 1.                                         */
  IVC_0_CONTROL_C1EN_ENABLED           = 1,     /*!< ENABLED : Enable IVC channel 1.                                           */
} IVC_0_CONTROL_C1EN_Enum;



/* =========================================================================================================================== */
/* ================                                          LOCK_0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  KEY  ========================================================== */
/* =================================================  LOCK_0 KEY KEY [0..7]  ================================================= */
typedef enum {                                  /*!< LOCK_0_KEY_KEY                                                            */
  LOCK_0_KEY_KEY_LOCKED                = 0,     /*!< LOCKED : PERIPHLOCK registers are locked and no valid values
                                                     have been written to KEY.                                                 */
  LOCK_0_KEY_KEY_INTERMEDIATE          = 1,     /*!< INTERMEDIATE : PERIPHLOCK registers are locked and the first
                                                     valid value (0xA5) has been written to KEY.                               */
  LOCK_0_KEY_KEY_UNLOCKED              = 2,     /*!< UNLOCKED : PERIPHLOCK registers are unlocked. Any subsequent
                                                     writes to KEY will lock the interface.                                    */
} LOCK_0_KEY_KEY_Enum;

/* ======================================================  PERIPHLOCK0  ====================================================== */
/* ===========================================  LOCK_0 PERIPHLOCK0 USARTL [0..0]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_USARTL                                                 */
  LOCK_0_PERIPHLOCK0_USARTL_UNLOCKED   = 0,     /*!< UNLOCKED : Unlock the USART0, USART1, UART0, and UART1 Module
                                                     registers.                                                                */
  LOCK_0_PERIPHLOCK0_USARTL_LOCKED     = 1,     /*!< LOCKED : Lock the USART0, USART1, UART0, and UART1 Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_USARTL_Enum;

/* ============================================  LOCK_0 PERIPHLOCK0 SPIL [1..1]  ============================================= */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_SPIL                                                   */
  LOCK_0_PERIPHLOCK0_SPIL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the SPI0, SPI1, and SPI2 Module registers.              */
  LOCK_0_PERIPHLOCK0_SPIL_LOCKED       = 1,     /*!< LOCKED : Lock the SPI0, SPI1, and SPI2 Module registers (bits
                                                     can still be read).                                                       */
} LOCK_0_PERIPHLOCK0_SPIL_Enum;

/* ============================================  LOCK_0 PERIPHLOCK0 I2CL [2..2]  ============================================= */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_I2CL                                                   */
  LOCK_0_PERIPHLOCK0_I2CL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the I2C0 and I2C1 Module registers.                     */
  LOCK_0_PERIPHLOCK0_I2CL_LOCKED       = 1,     /*!< LOCKED : Lock the I2C0 and I2C1 Module registers (bits can still
                                                     be read).                                                                 */
} LOCK_0_PERIPHLOCK0_I2CL_Enum;

/* ============================================  LOCK_0 PERIPHLOCK0 PCAL [3..3]  ============================================= */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_PCAL                                                   */
  LOCK_0_PERIPHLOCK0_PCAL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the EPCA0, PCA0, and PCA1 Module registers.             */
  LOCK_0_PERIPHLOCK0_PCAL_LOCKED       = 1,     /*!< LOCKED : Lock the EPCA0, PCA0, and PCA1 Module registers (bits
                                                     can still be read).                                                       */
} LOCK_0_PERIPHLOCK0_PCAL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 TIMERL [4..4]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_TIMERL                                                 */
  LOCK_0_PERIPHLOCK0_TIMERL_UNLOCKED   = 0,     /*!< UNLOCKED : Unlock the TIMER0 and TIMER1 Module registers.                 */
  LOCK_0_PERIPHLOCK0_TIMERL_LOCKED     = 1,     /*!< LOCKED : Lock the TIMER0 and TIMER1 Module registers (bits can
                                                     still be read).                                                           */
} LOCK_0_PERIPHLOCK0_TIMERL_Enum;

/* ============================================  LOCK_0 PERIPHLOCK0 USBL [5..5]  ============================================= */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_USBL                                                   */
  LOCK_0_PERIPHLOCK0_USBL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the USB0 Module registers.                              */
  LOCK_0_PERIPHLOCK0_USBL_LOCKED       = 1,     /*!< LOCKED : Lock the USB0 Module registers (bits can still be read).         */
} LOCK_0_PERIPHLOCK0_USBL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 SARADCL [6..6]  =========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_SARADCL                                                */
  LOCK_0_PERIPHLOCK0_SARADCL_UNLOCKED  = 0,     /*!< UNLOCKED : Unlock the SARADC0 and SARADC1 Module registers.               */
  LOCK_0_PERIPHLOCK0_SARADCL_LOCKED    = 1,     /*!< LOCKED : Lock the SARADC0 and SARADC1 Module registers (bits
                                                     can still be read).                                                       */
} LOCK_0_PERIPHLOCK0_SARADCL_Enum;

/* ============================================  LOCK_0 PERIPHLOCK0 SSGL [7..7]  ============================================= */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_SSGL                                                   */
  LOCK_0_PERIPHLOCK0_SSGL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the SSG0 Module registers.                              */
  LOCK_0_PERIPHLOCK0_SSGL_LOCKED       = 1,     /*!< LOCKED : Lock the SSG0 Module registers (bits can still be read).         */
} LOCK_0_PERIPHLOCK0_SSGL_Enum;

/* ============================================  LOCK_0 PERIPHLOCK0 CMPL [8..8]  ============================================= */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_CMPL                                                   */
  LOCK_0_PERIPHLOCK0_CMPL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the Comparator 0 and Comparator 1 Module registers.     */
  LOCK_0_PERIPHLOCK0_CMPL_LOCKED       = 1,     /*!< LOCKED : Lock the Comparator 0 and Comparator 1 Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_CMPL_Enum;

/* =============================================  LOCK_0 PERIPHLOCK0 CSL [9..9]  ============================================= */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_CSL                                                    */
  LOCK_0_PERIPHLOCK0_CSL_UNLOCKED      = 0,     /*!< UNLOCKED : Unlock the Capacitive Sensing (CAPSENSE0) Module
                                                     registers.                                                                */
  LOCK_0_PERIPHLOCK0_CSL_LOCKED        = 1,     /*!< LOCKED : Lock the Capacitive Sensing (CAPSENSE0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_CSL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 EMIFL [10..10]  =========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_EMIFL                                                  */
  LOCK_0_PERIPHLOCK0_EMIFL_UNLOCKED    = 0,     /*!< UNLOCKED : Unlock the External Memory Interface (EMIF0) Module
                                                     registers.                                                                */
  LOCK_0_PERIPHLOCK0_EMIFL_LOCKED      = 1,     /*!< LOCKED : Lock the External Memory Interface (EMIF0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_EMIFL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 AESL [11..11]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_AESL                                                   */
  LOCK_0_PERIPHLOCK0_AESL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the AES0 Module registers.                              */
  LOCK_0_PERIPHLOCK0_AESL_LOCKED       = 1,     /*!< LOCKED : Lock the AES0 Module registers (bits can still be read).         */
} LOCK_0_PERIPHLOCK0_AESL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 CRCL [12..12]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_CRCL                                                   */
  LOCK_0_PERIPHLOCK0_CRCL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the CRC0 Module registers.                              */
  LOCK_0_PERIPHLOCK0_CRCL_LOCKED       = 1,     /*!< LOCKED : Lock the CRC0 Module registers (bits can still be read).         */
} LOCK_0_PERIPHLOCK0_CRCL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 RTCL [13..13]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_RTCL                                                   */
  LOCK_0_PERIPHLOCK0_RTCL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the RTC0 Module registers.                              */
  LOCK_0_PERIPHLOCK0_RTCL_LOCKED       = 1,     /*!< LOCKED : Lock the RTC0 Module registers (bits can still be read).         */
} LOCK_0_PERIPHLOCK0_RTCL_Enum;

/* ==========================================  LOCK_0 PERIPHLOCK0 CLKRSTL [14..14]  ========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_CLKRSTL                                                */
  LOCK_0_PERIPHLOCK0_CLKRSTL_UNLOCKED  = 0,     /*!< UNLOCKED : Unlock the Clock Control (CLKCTRL) and Reset Sources
                                                     (RSTSRC) Module registers.                                                */
  LOCK_0_PERIPHLOCK0_CLKRSTL_LOCKED    = 1,     /*!< LOCKED : Lock the Clock Control (CLKCTRL) and Reset Sources
                                                     (RSTSRC) Module registers (bits can still be read).                       */
} LOCK_0_PERIPHLOCK0_CLKRSTL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 VMONL [15..15]  =========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_VMONL                                                  */
  LOCK_0_PERIPHLOCK0_VMONL_UNLOCKED    = 0,     /*!< UNLOCKED : Unlock the Voltage Supply Monitor (VMON0) Module
                                                     registers.                                                                */
  LOCK_0_PERIPHLOCK0_VMONL_LOCKED      = 1,     /*!< LOCKED : Lock the Voltage Supply Monitor (VMON0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_VMONL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 IDACL [16..16]  =========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_IDACL                                                  */
  LOCK_0_PERIPHLOCK0_IDACL_UNLOCKED    = 0,     /*!< UNLOCKED : Unlock the IDAC0 and IDAC1 Module registers.                   */
  LOCK_0_PERIPHLOCK0_IDACL_LOCKED      = 1,     /*!< LOCKED : Lock the IDAC0 and IDAC1 Module registers (bits can
                                                     still be read).                                                           */
} LOCK_0_PERIPHLOCK0_IDACL_Enum;

/* =========================================  LOCK_0 PERIPHLOCK0 DMACTRLL [17..17]  ========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_DMACTRLL                                               */
  LOCK_0_PERIPHLOCK0_DMACTRLL_UNLOCKED = 0,     /*!< UNLOCKED : Unlock the DMA Controller (DMACTRL0) Module registers.         */
  LOCK_0_PERIPHLOCK0_DMACTRLL_LOCKED   = 1,     /*!< LOCKED : Lock the DMA Controller (DMACTRL0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_DMACTRLL_Enum;

/* =========================================  LOCK_0 PERIPHLOCK0 DMAXBARL [18..18]  ========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_DMAXBARL                                               */
  LOCK_0_PERIPHLOCK0_DMAXBARL_UNLOCKED = 0,     /*!< UNLOCKED : Unlock the DMA Crossbar (DMAXBAR0) Module registers.           */
  LOCK_0_PERIPHLOCK0_DMAXBARL_LOCKED   = 1,     /*!< LOCKED : Lock the DMA Crossbar (DMAXBAR0) Module registers (bits
                                                     can still be read).                                                       */
} LOCK_0_PERIPHLOCK0_DMAXBARL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 LPTL [19..19]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_LPTL                                                   */
  LOCK_0_PERIPHLOCK0_LPTL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the Low Power Timer (LPTIMER0) Module registers.        */
  LOCK_0_PERIPHLOCK0_LPTL_LOCKED       = 1,     /*!< LOCKED : Lock the Low Power Timer (LPTIMER0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_LPTL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 VREFL [20..20]  =========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_VREFL                                                  */
  LOCK_0_PERIPHLOCK0_VREFL_UNLOCKED    = 0,     /*!< UNLOCKED : Unlock the Voltage Reference (VREF0) Module registers.         */
  LOCK_0_PERIPHLOCK0_VREFL_LOCKED      = 1,     /*!< LOCKED : Lock the Voltage Reference (VREF0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_VREFL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 I2SL [21..21]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_I2SL                                                   */
  LOCK_0_PERIPHLOCK0_I2SL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the I2S0 Module registers.                              */
  LOCK_0_PERIPHLOCK0_I2SL_LOCKED       = 1,     /*!< LOCKED : Lock the I2S0 Module registers (bits can still be read).         */
} LOCK_0_PERIPHLOCK0_I2SL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 PLLL [22..22]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_PLLL                                                   */
  LOCK_0_PERIPHLOCK0_PLLL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the PLL0 Module registers.                              */
  LOCK_0_PERIPHLOCK0_PLLL_LOCKED       = 1,     /*!< LOCKED : Lock the PLL0 Module registers (bits can still be read).         */
} LOCK_0_PERIPHLOCK0_PLLL_Enum;

/* ==========================================  LOCK_0 PERIPHLOCK0 EXTOSCL [23..23]  ========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_EXTOSCL                                                */
  LOCK_0_PERIPHLOCK0_EXTOSCL_UNLOCKED  = 0,     /*!< UNLOCKED : Unlock the External Oscillator (EXTOSC0) Module registers.     */
  LOCK_0_PERIPHLOCK0_EXTOSCL_LOCKED    = 1,     /*!< LOCKED : Lock the External Oscillator (EXTOSC0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_EXTOSCL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 VREGL [24..24]  =========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_VREGL                                                  */
  LOCK_0_PERIPHLOCK0_VREGL_UNLOCKED    = 0,     /*!< UNLOCKED : Unlock the Voltage Regulator (VREG0) Module registers.         */
  LOCK_0_PERIPHLOCK0_VREGL_LOCKED      = 1,     /*!< LOCKED : Lock the Voltage Regulator (VREG0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_VREGL_Enum;

/* ==========================================  LOCK_0 PERIPHLOCK0 LPOSCL [25..25]  =========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_LPOSCL                                                 */
  LOCK_0_PERIPHLOCK0_LPOSCL_UNLOCKED   = 0,     /*!< UNLOCKED : Unlock the Low Power Oscillator (LPOSC0) Module registers.     */
  LOCK_0_PERIPHLOCK0_LPOSCL_LOCKED     = 1,     /*!< LOCKED : Lock the Low Power Oscillator (LPOSC0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_LPOSCL_Enum;

/* ==========================================  LOCK_0 PERIPHLOCK0 EVREGL [26..26]  =========================================== */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_EVREGL                                                 */
  LOCK_0_PERIPHLOCK0_EVREGL_UNLOCKED   = 0,     /*!< UNLOCKED : Unlock the External Regulator (EXTVREG0) Module registers.     */
  LOCK_0_PERIPHLOCK0_EVREGL_LOCKED     = 1,     /*!< LOCKED : Lock the External Regulator (EXTVREG0) Module registers
                                                     (bits can still be read).                                                 */
} LOCK_0_PERIPHLOCK0_EVREGL_Enum;

/* ===========================================  LOCK_0 PERIPHLOCK0 IVCL [28..28]  ============================================ */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK0_IVCL                                                   */
  LOCK_0_PERIPHLOCK0_IVCL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the IVC0 Module registers.                              */
  LOCK_0_PERIPHLOCK0_IVCL_LOCKED       = 1,     /*!< LOCKED : Lock the IVC0 Module registers (bits can still be read).         */
} LOCK_0_PERIPHLOCK0_IVCL_Enum;

/* ======================================================  PERIPHLOCK1  ====================================================== */
/* ============================================  LOCK_0 PERIPHLOCK1 PMUL [0..0]  ============================================= */
typedef enum {                                  /*!< LOCK_0_PERIPHLOCK1_PMUL                                                   */
  LOCK_0_PERIPHLOCK1_PMUL_UNLOCKED     = 0,     /*!< UNLOCKED : Unlock the PMU Module registers.                               */
  LOCK_0_PERIPHLOCK1_PMUL_LOCKED       = 1,     /*!< LOCKED : Lock the PMU Module registers (bits can still be read).          */
} LOCK_0_PERIPHLOCK1_PMUL_Enum;



/* =========================================================================================================================== */
/* ================                                         LPTIMER_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  LPTIMER_0 CONTROL CMD [0..1]  ============================================== */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_CMD                                                     */
  LPTIMER_0_CONTROL_CMD_FREE           = 0,     /*!< FREE : The timer is free running mode on the RTCn module clock
                                                     (RTCnOSC or LFOSCn).                                                      */
  LPTIMER_0_CONTROL_CMD_RISING_EDGE    = 1,     /*!< RISING_EDGE : The timer is incremented on the rising edges of
                                                     the selected external trigger (LPTnTx).                                   */
  LPTIMER_0_CONTROL_CMD_FALLING_EDGE   = 2,     /*!< FALLING_EDGE : The timer is incremented on the falling edges
                                                     of the selected external trigger (LPTnTx).                                */
  LPTIMER_0_CONTROL_CMD_ANY_EDGE       = 3,     /*!< ANY_EDGE : The timer is incremented on both edges of the selected
                                                     external trigger (LPTnTx).                                                */
} LPTIMER_0_CONTROL_CMD_Enum;

/* ============================================  LPTIMER_0 CONTROL EXTSEL [4..7]  ============================================ */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_EXTSEL                                                  */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT0      = 0,     /*!< LPTNT0 : Select external trigger LPTnT0 (PB3.2).                          */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT1      = 1,     /*!< LPTNT1 : Select external trigger LPTnT1 (PB3.8).                          */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT2      = 2,     /*!< LPTNT2 : Select external trigger LPTnT2 (PB3.9).                          */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT3      = 3,     /*!< LPTNT3 : Select external trigger LPTnT3 (Comparator 0 Output).            */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT4      = 4,     /*!< LPTNT4 : Select external trigger LPTnT4 (RESERVED).                       */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT5      = 5,     /*!< LPTNT5 : Select external trigger LPTnT5 (RESERVED).                       */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT6      = 6,     /*!< LPTNT6 : Select external trigger LPTnT6 (RESERVED).                       */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT7      = 7,     /*!< LPTNT7 : Select external trigger LPTnT7 (RESERVED).                       */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT8      = 8,     /*!< LPTNT8 : Select external trigger LPTnT8 (RESERVED).                       */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT9      = 9,     /*!< LPTNT9 : Select external trigger LPTnT9 (RESERVED).                       */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT10     = 10,    /*!< LPTNT10 : Select external trigger LPTnT10 (RESERVED).                     */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT11     = 11,    /*!< LPTNT11 : Select external trigger LPTnT11 (RESERVED).                     */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT12     = 12,    /*!< LPTNT12 : Select external trigger LPTnT12 (RESERVED).                     */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT13     = 13,    /*!< LPTNT13 : Select external trigger LPTnT13 (RESERVED).                     */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT14     = 14,    /*!< LPTNT14 : Select external trigger LPTnT14 (RESERVED).                     */
  LPTIMER_0_CONTROL_EXTSEL_LPTNT15     = 15,    /*!< LPTNT15 : Select external trigger LPTnT15 (RESERVED).                     */
} LPTIMER_0_CONTROL_EXTSEL_Enum;

/* ============================================  LPTIMER_0 CONTROL TMRSET [8..8]  ============================================ */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_TMRSET                                                  */
  LPTIMER_0_CONTROL_TMRSET_SET         = 1,     /*!< SET : Writing a 1 to TMRSET initiates a copy of the value from
                                                     the DATA register into the internal timer register. This
                                                     field is automatically cleared by hardware when the copy
                                                     is complete and does not need to be cleared by software.                  */
} LPTIMER_0_CONTROL_TMRSET_Enum;

/* ============================================  LPTIMER_0 CONTROL TMRCAP [9..9]  ============================================ */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_TMRCAP                                                  */
  LPTIMER_0_CONTROL_TMRCAP_SET         = 1,     /*!< SET : Writing a 1 to TMRCAP initiates a read of internal timer
                                                     register into the DATA register. This field is automatically
                                                     cleared by hardware when the operation completes and does
                                                     not need to be cleared by software.                                       */
} LPTIMER_0_CONTROL_TMRCAP_Enum;

/* ===========================================  LPTIMER_0 CONTROL CMPSET [10..10]  =========================================== */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_CMPSET                                                  */
  LPTIMER_0_CONTROL_CMPSET_SET         = 1,     /*!< SET : Writing a 1 to CMPSET initiates a copy of the value in
                                                     DATA into the internal timer comparator register. This
                                                     field is automatically cleared by hardware when the copy
                                                     is complete and does not need to be cleared by software.                  */
} LPTIMER_0_CONTROL_CMPSET_Enum;

/* ===========================================  LPTIMER_0 CONTROL CMPCAP [11..11]  =========================================== */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_CMPCAP                                                  */
  LPTIMER_0_CONTROL_CMPCAP_SET         = 1,     /*!< SET : Writing a 1 to CMPCAP initiates a read of the internal
                                                     comparator register into the DATA register. This field
                                                     is automatically cleared by hardware when the operation
                                                     completes and does not need to be cleared by software.                    */
} LPTIMER_0_CONTROL_CMPCAP_Enum;

/* ===========================================  LPTIMER_0 CONTROL OVFIEN [16..16]  =========================================== */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_OVFIEN                                                  */
  LPTIMER_0_CONTROL_OVFIEN_DISABLED    = 0,     /*!< DISABLED : Disable the timer overflow interrupt.                          */
  LPTIMER_0_CONTROL_OVFIEN_ENABLED     = 1,     /*!< ENABLED : Enable the timer overflow interrupt.                            */
} LPTIMER_0_CONTROL_OVFIEN_Enum;

/* ===========================================  LPTIMER_0 CONTROL CMPIEN [17..17]  =========================================== */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_CMPIEN                                                  */
  LPTIMER_0_CONTROL_CMPIEN_DISABLED    = 0,     /*!< DISABLED : Disable the timer compare event interrupt.                     */
  LPTIMER_0_CONTROL_CMPIEN_ENABLED     = 1,     /*!< ENABLED : Enable the timer compare event interrupt.                       */
} LPTIMER_0_CONTROL_CMPIEN_Enum;

/* ===========================================  LPTIMER_0 CONTROL OVFTMD [18..18]  =========================================== */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_OVFTMD                                                  */
  LPTIMER_0_CONTROL_OVFTMD_DISABLED    = 0,     /*!< DISABLED : Timer overflows do not toggle the Low Power Timer
                                                     output.                                                                   */
  LPTIMER_0_CONTROL_OVFTMD_ENABLED     = 1,     /*!< ENABLED : Timer overflows toggle the Low Power Timer output.              */
} LPTIMER_0_CONTROL_OVFTMD_Enum;

/* ===========================================  LPTIMER_0 CONTROL CMPTMD [19..19]  =========================================== */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_CMPTMD                                                  */
  LPTIMER_0_CONTROL_CMPTMD_DISABLED    = 0,     /*!< DISABLED : Timer compare events do not toggle the Low Power
                                                     Timer output.                                                             */
  LPTIMER_0_CONTROL_CMPTMD_ENABLED     = 1,     /*!< ENABLED : Timer compare events toggle the Low Power Timer output.         */
} LPTIMER_0_CONTROL_CMPTMD_Enum;

/* ==========================================  LPTIMER_0 CONTROL CMPRSTEN [24..24]  ========================================== */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_CMPRSTEN                                                */
  LPTIMER_0_CONTROL_CMPRSTEN_DISABLED  = 0,     /*!< DISABLED : Timer compare events do not reset the timer.                   */
  LPTIMER_0_CONTROL_CMPRSTEN_ENABLED   = 1,     /*!< ENABLED : Timer compare events reset the timer.                           */
} LPTIMER_0_CONTROL_CMPRSTEN_Enum;

/* ===========================================  LPTIMER_0 CONTROL DBGMD [30..30]  ============================================ */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_DBGMD                                                   */
  LPTIMER_0_CONTROL_DBGMD_RUN          = 0,     /*!< RUN : The Low Power Timer module will continue to operate while
                                                     the core is halted in debug mode.                                         */
  LPTIMER_0_CONTROL_DBGMD_HALT         = 1,     /*!< HALT : A debug breakpoint will cause the Low Power Timer module
                                                     to halt.                                                                  */
} LPTIMER_0_CONTROL_DBGMD_Enum;

/* ============================================  LPTIMER_0 CONTROL RUN [31..31]  ============================================= */
typedef enum {                                  /*!< LPTIMER_0_CONTROL_RUN                                                     */
  LPTIMER_0_CONTROL_RUN_STOP           = 0,     /*!< STOP : Stop the timer and disable the compare threshold.                  */
  LPTIMER_0_CONTROL_RUN_START          = 1,     /*!< START : Start the timer running and enable the compare threshold.         */
} LPTIMER_0_CONTROL_RUN_Enum;

/* =========================================================  DATA  ========================================================== */
/* ========================================================  STATUS  ========================================================= */
/* =============================================  LPTIMER_0 STATUS OVFI [0..0]  ============================================== */
typedef enum {                                  /*!< LPTIMER_0_STATUS_OVFI                                                     */
  LPTIMER_0_STATUS_OVFI_NOT_SET        = 0,     /*!< NOT_SET : A timer overflow has not occurred.                              */
  LPTIMER_0_STATUS_OVFI_SET            = 1,     /*!< SET : A timer overflow occurred.                                          */
} LPTIMER_0_STATUS_OVFI_Enum;

/* =============================================  LPTIMER_0 STATUS CMPI [1..1]  ============================================== */
typedef enum {                                  /*!< LPTIMER_0_STATUS_CMPI                                                     */
  LPTIMER_0_STATUS_CMPI_NOT_SET        = 0,     /*!< NOT_SET : A timer compare event has not occurred.                         */
  LPTIMER_0_STATUS_CMPI_SET            = 1,     /*!< SET : A timer compare event occurred.                                     */
} LPTIMER_0_STATUS_CMPI_Enum;



/* =========================================================================================================================== */
/* ================                                           PLL_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  DIVIDER  ======================================================== */
/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  PLL_0 CONTROL LLMTF [0..0]  =============================================== */
typedef enum {                                  /*!< PLL_0_CONTROL_LLMTF                                                       */
  PLL_0_CONTROL_LLMTF_NOT_SET          = 0,     /*!< NOT_SET : DCO period is not saturated low.                                */
  PLL_0_CONTROL_LLMTF_SET              = 1,     /*!< SET : DCO period is saturated low.                                        */
} PLL_0_CONTROL_LLMTF_Enum;

/* ==============================================  PLL_0 CONTROL HLMTF [1..1]  =============================================== */
typedef enum {                                  /*!< PLL_0_CONTROL_HLMTF                                                       */
  PLL_0_CONTROL_HLMTF_NOT_SET          = 0,     /*!< NOT_SET : DCO period is not saturated high.                               */
  PLL_0_CONTROL_HLMTF_SET              = 1,     /*!< SET : DCO period is saturated high.                                       */
} PLL_0_CONTROL_HLMTF_Enum;

/* ===============================================  PLL_0 CONTROL LCKI [2..2]  =============================================== */
typedef enum {                                  /*!< PLL_0_CONTROL_LCKI                                                        */
  PLL_0_CONTROL_LCKI_NOT_SET           = 0,     /*!< NOT_SET : DCO is disabled or not locked.                                  */
  PLL_0_CONTROL_LCKI_SET               = 1,     /*!< SET : DCO is enabled and locked.                                          */
} PLL_0_CONTROL_LCKI_Enum;

/* ==============================================  PLL_0 CONTROL LMTIEN [9..9]  ============================================== */
typedef enum {                                  /*!< PLL_0_CONTROL_LMTIEN                                                      */
  PLL_0_CONTROL_LMTIEN_DISABLED        = 0,     /*!< DISABLED : Saturation (high and low) interrupt disabled.                  */
  PLL_0_CONTROL_LMTIEN_ENABLED         = 1,     /*!< ENABLED : Saturation (high and low) interrupt enabled.                    */
} PLL_0_CONTROL_LMTIEN_Enum;

/* =============================================  PLL_0 CONTROL LCKIEN [10..10]  ============================================= */
typedef enum {                                  /*!< PLL_0_CONTROL_LCKIEN                                                      */
  PLL_0_CONTROL_LCKIEN_DISABLED        = 0,     /*!< DISABLED : The PLL locking does not cause an interrupt                    */
  PLL_0_CONTROL_LCKIEN_ENABLED         = 1,     /*!< ENABLED : An interrupt is generated if LCKI matches the state
                                                     selected by LCKPOL.                                                       */
} PLL_0_CONTROL_LCKIEN_Enum;

/* =============================================  PLL_0 CONTROL LCKPOL [11..11]  ============================================= */
typedef enum {                                  /*!< PLL_0_CONTROL_LCKPOL                                                      */
  PLL_0_CONTROL_LCKPOL_ACTIVE_LOW      = 0,     /*!< ACTIVE_LOW : The lock state PLL interrupt will occur when LCKI
                                                     is 0.                                                                     */
  PLL_0_CONTROL_LCKPOL_ACTIVE_HIGH     = 1,     /*!< ACTIVE_HIGH : The lock state PLL interrupt will occur when LCKI
                                                     is 1.                                                                     */
} PLL_0_CONTROL_LCKPOL_Enum;

/* =============================================  PLL_0 CONTROL REFSEL [16..17]  ============================================= */
typedef enum {                                  /*!< PLL_0_CONTROL_REFSEL                                                      */
  PLL_0_CONTROL_REFSEL_RTC0OSC         = 0,     /*!< RTC0OSC : PLL reference clock (FREF) is the RTC0 oscillator
                                                     (RTC0OSC).                                                                */
  PLL_0_CONTROL_REFSEL_LPOSC0DIV       = 1,     /*!< LPOSC0DIV : PLL reference clock (FREF) is the divided Low Power
                                                     Oscillator (LPOSC0).                                                      */
  PLL_0_CONTROL_REFSEL_EXTOSC0         = 2,     /*!< EXTOSC0 : PLL reference clock (FREF) is the external oscillator
                                                     output (EXTOSC0).                                                         */
  PLL_0_CONTROL_REFSEL_USBOSC0         = 3,     /*!< USBOSC0 : PLL reference clock (FREF) is the USB0 oscillator
                                                     (USB0OSC).                                                                */
} PLL_0_CONTROL_REFSEL_Enum;

/* =============================================  PLL_0 CONTROL STALL [26..26]  ============================================== */
typedef enum {                                  /*!< PLL_0_CONTROL_STALL                                                       */
  PLL_0_CONTROL_STALL_DISABLED         = 0,     /*!< DISABLED : In phase-lock and frequency-lock modes, spectrum
                                                     spreading, and dithering operate normally, if enabled.                    */
  PLL_0_CONTROL_STALL_ENABLED          = 1,     /*!< ENABLED : In phase-lock and frequency-lock modes, spectrum spreading,
                                                     and dithering are prevented from updating the output of
                                                     the DCO.                                                                  */
} PLL_0_CONTROL_STALL_Enum;

/* =============================================  PLL_0 CONTROL DITHEN [28..28]  ============================================= */
typedef enum {                                  /*!< PLL_0_CONTROL_DITHEN                                                      */
  PLL_0_CONTROL_DITHEN_DISABLED        = 0,     /*!< DISABLED : Automatic DCO output dithering disabled.                       */
  PLL_0_CONTROL_DITHEN_ENABLED         = 1,     /*!< ENABLED : Automatic DCO output dithering enabled.                         */
} PLL_0_CONTROL_DITHEN_Enum;

/* =============================================  PLL_0 CONTROL EDGSEL [29..29]  ============================================= */
typedef enum {                                  /*!< PLL_0_CONTROL_EDGSEL                                                      */
  PLL_0_CONTROL_EDGSEL_FALLING_EDGE    = 0,     /*!< FALLING_EDGE : Lock DCO output frequency to the falling edge
                                                     of the reference frequency.                                               */
  PLL_0_CONTROL_EDGSEL_RISING_EDGE     = 1,     /*!< RISING_EDGE : Lock DCO output frequency to the rising edge of
                                                     the reference frequency.                                                  */
} PLL_0_CONTROL_EDGSEL_Enum;

/* =============================================  PLL_0 CONTROL OUTMD [30..31]  ============================================== */
typedef enum {                                  /*!< PLL_0_CONTROL_OUTMD                                                       */
  PLL_0_CONTROL_OUTMD_OFF              = 0,     /*!< OFF : DCO output is off.                                                  */
  PLL_0_CONTROL_OUTMD_DCO              = 1,     /*!< DCO : DCO output is in Free-Running DCO mode.                             */
  PLL_0_CONTROL_OUTMD_FLL              = 2,     /*!< FLL : DCO output is in frequency-lock mode (reference source
                                                     required).                                                                */
  PLL_0_CONTROL_OUTMD_PLL              = 3,     /*!< PLL : DCO output is in phase-lock mode (reference source required).       */
} PLL_0_CONTROL_OUTMD_Enum;

/* =========================================================  SSPR  ========================================================== */
/* ================================================  PLL_0 SSPR SSAMP [0..2]  ================================================ */
typedef enum {                                  /*!< PLL_0_SSPR_SSAMP                                                          */
  PLL_0_SSPR_SSAMP_DISABLED            = 0,     /*!< DISABLED : Disable Spectrum Spreading.                                    */
  PLL_0_SSPR_SSAMP_SETTING1            = 1,     /*!< SETTING1 : Spectrum Spreading set to approximately +/- 0.1%
                                                     of TDCO.                                                                  */
  PLL_0_SSPR_SSAMP_SETTING2            = 2,     /*!< SETTING2 : Spectrum Spreading set to approximately +/- 0.2%
                                                     of TDCO.                                                                  */
  PLL_0_SSPR_SSAMP_SETTING3            = 3,     /*!< SETTING3 : Spectrum Spreading set to approximately +/- 0.4%
                                                     of TDCO.                                                                  */
  PLL_0_SSPR_SSAMP_SETTING4            = 4,     /*!< SETTING4 : Spectrum Spreading set to approximately +/- 0.8%
                                                     of TDCO.                                                                  */
  PLL_0_SSPR_SSAMP_SETTING5            = 5,     /*!< SETTING5 : Spectrum Spreading set to approximately +/- 1.6%
                                                     of TDCO.                                                                  */
} PLL_0_SSPR_SSAMP_Enum;

/* =======================================================  CALCONFIG  ======================================================= */
/* ============================================  PLL_0 CALCONFIG RANGE [16..18]  ============================================= */
typedef enum {                                  /*!< PLL_0_CALCONFIG_RANGE                                                     */
  PLL_0_CALCONFIG_RANGE_RANGE0         = 0,     /*!< RANGE0 : DCO operates from 23 to 37 MHz.                                  */
  PLL_0_CALCONFIG_RANGE_RANGE1         = 1,     /*!< RANGE1 : DCO operates from 33 to 54 MHz.                                  */
  PLL_0_CALCONFIG_RANGE_RANGE2         = 2,     /*!< RANGE2 : DCO operates from 45 to 71 MHz.                                  */
  PLL_0_CALCONFIG_RANGE_RANGE3         = 3,     /*!< RANGE3 : DCO operates from 53 to 80 MHz.                                  */
  PLL_0_CALCONFIG_RANGE_RANGE4         = 4,     /*!< RANGE4 : DCO operates from 73 to 80 MHz.                                  */
} PLL_0_CALCONFIG_RANGE_Enum;



/* =========================================================================================================================== */
/* ================                                         EXTOSC_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  EXTOSC_0 CONTROL FREQCN [0..2]  ============================================= */
typedef enum {                                  /*!< EXTOSC_0_CONTROL_FREQCN                                                   */
  EXTOSC_0_CONTROL_FREQCN_RANGE0       = 0,     /*!< RANGE0 : Set the external oscillator to range 0.                          */
  EXTOSC_0_CONTROL_FREQCN_RANGE1       = 1,     /*!< RANGE1 : Set the external oscillator to range 1.                          */
  EXTOSC_0_CONTROL_FREQCN_RANGE2       = 2,     /*!< RANGE2 : Set the external oscillator to range 2.                          */
  EXTOSC_0_CONTROL_FREQCN_RANGE3       = 3,     /*!< RANGE3 : Set the external oscillator to range 3.                          */
  EXTOSC_0_CONTROL_FREQCN_RANGE4       = 4,     /*!< RANGE4 : Set the external oscillator to range 4.                          */
  EXTOSC_0_CONTROL_FREQCN_RANGE5       = 5,     /*!< RANGE5 : Set the external oscillator to range 5.                          */
  EXTOSC_0_CONTROL_FREQCN_RANGE6       = 6,     /*!< RANGE6 : Set the external oscillator to range 6.                          */
  EXTOSC_0_CONTROL_FREQCN_RANGE7       = 7,     /*!< RANGE7 : Set the external oscillator to range 7.                          */
} EXTOSC_0_CONTROL_FREQCN_Enum;

/* ============================================  EXTOSC_0 CONTROL OSCVLDF [3..3]  ============================================ */
typedef enum {                                  /*!< EXTOSC_0_CONTROL_OSCVLDF                                                  */
  EXTOSC_0_CONTROL_OSCVLDF_NOT_SET     = 0,     /*!< NOT_SET : The external oscillator is unused or not yet stable.            */
  EXTOSC_0_CONTROL_OSCVLDF_SET         = 1,     /*!< SET : The external oscillator is running and stable.                      */
} EXTOSC_0_CONTROL_OSCVLDF_Enum;

/* =============================================  EXTOSC_0 CONTROL OSCMD [4..6]  ============================================= */
typedef enum {                                  /*!< EXTOSC_0_CONTROL_OSCMD                                                    */
  EXTOSC_0_CONTROL_OSCMD_OFF           = 0,     /*!< OFF : External oscillator off.                                            */
  EXTOSC_0_CONTROL_OSCMD_CMOS          = 2,     /*!< CMOS : External CMOS clock mode.                                          */
  EXTOSC_0_CONTROL_OSCMD_CMOSDIV2      = 3,     /*!< CMOSDIV2 : External CMOS with divide by 2 stage.                          */
  EXTOSC_0_CONTROL_OSCMD_RC            = 4,     /*!< RC : RC oscillator mode with divide by 2 stage.                           */
  EXTOSC_0_CONTROL_OSCMD_C             = 5,     /*!< C : C oscillator mode with divide by 2 stage.                             */
  EXTOSC_0_CONTROL_OSCMD_XTAL          = 6,     /*!< XTAL : Crystal oscillator mode.                                           */
  EXTOSC_0_CONTROL_OSCMD_XTALDIV2      = 7,     /*!< XTALDIV2 : Crystal oscillator mode with divide by 2 stage.                */
} EXTOSC_0_CONTROL_OSCMD_Enum;



/* =========================================================================================================================== */
/* ================                                          LPOSC_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  OSCVAL  ========================================================= */


/* =========================================================================================================================== */
/* ================                                           PCA_0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MODE  ========================================================== */
/* ==============================================  PCA_0 MODE CLKSEL [10..12]  =============================================== */
typedef enum {                                  /*!< PCA_0_MODE_CLKSEL                                                         */
  PCA_0_MODE_CLKSEL_APB                = 0,     /*!< APB : Set the APB as the input clock (FCLKIN).                            */
  PCA_0_MODE_CLKSEL_TIMER0             = 1,     /*!< TIMER0 : Set Timer 0 low overflows divided by 2 as the input
                                                     clock (FCLKIN).                                                           */
  PCA_0_MODE_CLKSEL_HL_ECI             = 2,     /*!< HL_ECI : Set high-to-low transitions on ECI divided by 2 as
                                                     the input clock (FCLKIN).                                                 */
  PCA_0_MODE_CLKSEL_EXTOSCN            = 3,     /*!< EXTOSCN : Set the external oscillator module output (EXTOSCn)
                                                     divided by 2 as the input clock (FCLKIN).                                 */
  PCA_0_MODE_CLKSEL_ECI                = 4,     /*!< ECI : Set ECI transitions divided by 2 as the input clock (FCLKIN).       */
} PCA_0_MODE_CLKSEL_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  PCA_0 CONTROL OVFIEN [0..0]  ============================================== */
typedef enum {                                  /*!< PCA_0_CONTROL_OVFIEN                                                      */
  PCA_0_CONTROL_OVFIEN_DISABLED        = 0,     /*!< DISABLED : Disable the PCA counter overflow/limit event interrupt.        */
  PCA_0_CONTROL_OVFIEN_ENABLED         = 1,     /*!< ENABLED : Enable the PCA counter overflow/limit event interrupt.          */
} PCA_0_CONTROL_OVFIEN_Enum;

/* ==============================================  PCA_0 CONTROL DBGMD [6..6]  =============================================== */
typedef enum {                                  /*!< PCA_0_CONTROL_DBGMD                                                       */
  PCA_0_CONTROL_DBGMD_HALT             = 0,     /*!< HALT : A debug breakpoint will cause the PCA to halt.                     */
  PCA_0_CONTROL_DBGMD_RUN              = 1,     /*!< RUN : The PCA will continue to operate while the core is halted
                                                     in debug mode.                                                            */
} PCA_0_CONTROL_DBGMD_Enum;

/* =============================================  PCA_0 CONTROL DIVST [21..21]  ============================================== */
typedef enum {                                  /*!< PCA_0_CONTROL_DIVST                                                       */
  PCA_0_CONTROL_DIVST_OUTPUT_HIGH      = 0,     /*!< OUTPUT_HIGH : The clock divider is currently in the first half-cycle.     */
  PCA_0_CONTROL_DIVST_OUTPUT_LOW       = 1,     /*!< OUTPUT_LOW : The clock divider is currently in the second half-cycle.     */
} PCA_0_CONTROL_DIVST_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ===============================================  PCA_0 STATUS C0CCI [0..0]  =============================================== */
typedef enum {                                  /*!< PCA_0_STATUS_C0CCI                                                        */
  PCA_0_STATUS_C0CCI_NOT_SET           = 0,     /*!< NOT_SET : A Channel 0 match or capture event did not occur.               */
  PCA_0_STATUS_C0CCI_SET               = 1,     /*!< SET : A Channel 0 match or capture event occurred.                        */
} PCA_0_STATUS_C0CCI_Enum;

/* ===============================================  PCA_0 STATUS C1CCI [1..1]  =============================================== */
typedef enum {                                  /*!< PCA_0_STATUS_C1CCI                                                        */
  PCA_0_STATUS_C1CCI_NOT_SET           = 0,     /*!< NOT_SET : A Channel 1 match or capture event did not occur.               */
  PCA_0_STATUS_C1CCI_SET               = 1,     /*!< SET : A Channel 1 match or capture event occurred.                        */
} PCA_0_STATUS_C1CCI_Enum;

/* ================================================  PCA_0 STATUS RUN [6..6]  ================================================ */
typedef enum {                                  /*!< PCA_0_STATUS_RUN                                                          */
  PCA_0_STATUS_RUN_STOP                = 0,     /*!< STOP : Stop the PCA Counter/Timer.                                        */
  PCA_0_STATUS_RUN_START               = 1,     /*!< START : Start the PCA Counter/Timer.                                      */
} PCA_0_STATUS_RUN_Enum;

/* ===============================================  PCA_0 STATUS OVFI [7..7]  ================================================ */
typedef enum {                                  /*!< PCA_0_STATUS_OVFI                                                         */
  PCA_0_STATUS_OVFI_NOT_SET            = 0,     /*!< NOT_SET : A PCA Counter/Timer overflow/limit event did not occur.         */
  PCA_0_STATUS_OVFI_SET                = 1,     /*!< SET : A PCA Counter/Timer overflow/limit event occurred.                  */
} PCA_0_STATUS_OVFI_Enum;

/* =============================================  PCA_0 STATUS C0IOVFI [10..10]  ============================================= */
typedef enum {                                  /*!< PCA_0_STATUS_C0IOVFI                                                      */
  PCA_0_STATUS_C0IOVFI_NOT_SET         = 0,     /*!< NOT_SET : Channel 0 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  PCA_0_STATUS_C0IOVFI_SET             = 1,     /*!< SET : Channel 0 counted past the channel n-bit mode limit.                */
} PCA_0_STATUS_C0IOVFI_Enum;

/* =============================================  PCA_0 STATUS C1IOVFI [11..11]  ============================================= */
typedef enum {                                  /*!< PCA_0_STATUS_C1IOVFI                                                      */
  PCA_0_STATUS_C1IOVFI_NOT_SET         = 0,     /*!< NOT_SET : Channel 1 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  PCA_0_STATUS_C1IOVFI_SET             = 1,     /*!< SET : Channel 1 counted past the channel n-bit mode limit.                */
} PCA_0_STATUS_C1IOVFI_Enum;

/* ========================================================  COUNTER  ======================================================== */
/* =========================================================  LIMIT  ========================================================= */
/* ========================================================  MODE_0  ========================================================= */
/* ===============================================  PCA_0 MODE_0 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< PCA_0_MODE_0_COSEL                                                        */
  PCA_0_MODE_0_COSEL_TOGGLE_OUTPUT     = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_0_MODE_0_COSEL_SET_OUTPUT        = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_0_MODE_0_COSEL_CLEAR_OUTPUT      = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_0_MODE_0_COSEL_NO_CHANGE         = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} PCA_0_MODE_0_COSEL_Enum;

/* ===============================================  PCA_0 MODE_0 CMD [8..10]  ================================================ */
typedef enum {                                  /*!< PCA_0_MODE_0_CMD                                                          */
  PCA_0_MODE_0_CMD_EDGE_PWM            = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  PCA_0_MODE_0_CMD_CENTER_ALIGNED_PWM  = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  PCA_0_MODE_0_CMD_HF_SQUARE_WAVE      = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  PCA_0_MODE_0_CMD_TIMER_CAPTURE       = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  PCA_0_MODE_0_CMD_N_BIT_PWM           = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} PCA_0_MODE_0_CMD_Enum;

/* =======================================================  CONTROL_0  ======================================================= */
/* =============================================  PCA_0 CONTROL_0 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< PCA_0_CONTROL_0_COUTST                                                    */
  PCA_0_CONTROL_0_COUTST_LOW           = 0,     /*!< LOW : The channel output state is low.                                    */
  PCA_0_CONTROL_0_COUTST_HIGH          = 1,     /*!< HIGH : The channel output state is high.                                  */
} PCA_0_CONTROL_0_COUTST_Enum;

/* ============================================  PCA_0 CONTROL_0 CPCAPEN [1..1]  ============================================= */
typedef enum {                                  /*!< PCA_0_CONTROL_0_CPCAPEN                                                   */
  PCA_0_CONTROL_0_CPCAPEN_DISABLED     = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  PCA_0_CONTROL_0_CPCAPEN_ENABLED      = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} PCA_0_CONTROL_0_CPCAPEN_Enum;

/* ============================================  PCA_0 CONTROL_0 CNCAPEN [2..2]  ============================================= */
typedef enum {                                  /*!< PCA_0_CONTROL_0_CNCAPEN                                                   */
  PCA_0_CONTROL_0_CNCAPEN_DISABLED     = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  PCA_0_CONTROL_0_CNCAPEN_ENABLED      = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} PCA_0_CONTROL_0_CNCAPEN_Enum;

/* =============================================  PCA_0 CONTROL_0 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< PCA_0_CONTROL_0_CUPDCF                                                    */
  PCA_0_CONTROL_0_CUPDCF_NOT_SET       = 0,     /*!< NOT_SET : A PCA channel register update completed or is not
                                                     pending.                                                                  */
  PCA_0_CONTROL_0_CUPDCF_SET           = 1,     /*!< SET : A PCA channel register update has not completed and is
                                                     still pending.                                                            */
} PCA_0_CONTROL_0_CUPDCF_Enum;

/* =============================================  PCA_0 CONTROL_0 CCIEN [8..8]  ============================================== */
typedef enum {                                  /*!< PCA_0_CONTROL_0_CCIEN                                                     */
  PCA_0_CONTROL_0_CCIEN_DISABLED       = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  PCA_0_CONTROL_0_CCIEN_ENABLED        = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} PCA_0_CONTROL_0_CCIEN_Enum;

/* ===========================================  PCA_0 CONTROL_0 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< PCA_0_CONTROL_0_CIOVFIEN                                                  */
  PCA_0_CONTROL_0_CIOVFIEN_DISABLED    = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  PCA_0_CONTROL_0_CIOVFIEN_ENABLED     = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} PCA_0_CONTROL_0_CIOVFIEN_Enum;

/* ========================================================  CCAPV_0  ======================================================== */
/* ======================================================  CCAPVUPD_0  ======================================================= */
/* ========================================================  MODE_1  ========================================================= */
/* ===============================================  PCA_0 MODE_1 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< PCA_0_MODE_1_COSEL                                                        */
  PCA_0_MODE_1_COSEL_TOGGLE_OUTPUT     = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_0_MODE_1_COSEL_SET_OUTPUT        = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_0_MODE_1_COSEL_CLEAR_OUTPUT      = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_0_MODE_1_COSEL_NO_CHANGE         = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} PCA_0_MODE_1_COSEL_Enum;

/* ===============================================  PCA_0 MODE_1 CMD [8..10]  ================================================ */
typedef enum {                                  /*!< PCA_0_MODE_1_CMD                                                          */
  PCA_0_MODE_1_CMD_EDGE_PWM            = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  PCA_0_MODE_1_CMD_CENTER_ALIGNED_PWM  = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  PCA_0_MODE_1_CMD_HF_SQUARE_WAVE      = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  PCA_0_MODE_1_CMD_TIMER_CAPTURE       = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  PCA_0_MODE_1_CMD_N_BIT_PWM           = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} PCA_0_MODE_1_CMD_Enum;

/* =======================================================  CONTROL_1  ======================================================= */
/* =============================================  PCA_0 CONTROL_1 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< PCA_0_CONTROL_1_COUTST                                                    */
  PCA_0_CONTROL_1_COUTST_LOW           = 0,     /*!< LOW : The channel output state is low.                                    */
  PCA_0_CONTROL_1_COUTST_HIGH          = 1,     /*!< HIGH : The channel output state is high.                                  */
} PCA_0_CONTROL_1_COUTST_Enum;

/* ============================================  PCA_0 CONTROL_1 CPCAPEN [1..1]  ============================================= */
typedef enum {                                  /*!< PCA_0_CONTROL_1_CPCAPEN                                                   */
  PCA_0_CONTROL_1_CPCAPEN_DISABLED     = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  PCA_0_CONTROL_1_CPCAPEN_ENABLED      = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} PCA_0_CONTROL_1_CPCAPEN_Enum;

/* ============================================  PCA_0 CONTROL_1 CNCAPEN [2..2]  ============================================= */
typedef enum {                                  /*!< PCA_0_CONTROL_1_CNCAPEN                                                   */
  PCA_0_CONTROL_1_CNCAPEN_DISABLED     = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  PCA_0_CONTROL_1_CNCAPEN_ENABLED      = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} PCA_0_CONTROL_1_CNCAPEN_Enum;

/* =============================================  PCA_0 CONTROL_1 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< PCA_0_CONTROL_1_CUPDCF                                                    */
  PCA_0_CONTROL_1_CUPDCF_NOT_SET       = 0,     /*!< NOT_SET : A PCA channel register update completed or is not
                                                     pending.                                                                  */
  PCA_0_CONTROL_1_CUPDCF_SET           = 1,     /*!< SET : A PCA channel register update has not completed and is
                                                     still pending.                                                            */
} PCA_0_CONTROL_1_CUPDCF_Enum;

/* =============================================  PCA_0 CONTROL_1 CCIEN [8..8]  ============================================== */
typedef enum {                                  /*!< PCA_0_CONTROL_1_CCIEN                                                     */
  PCA_0_CONTROL_1_CCIEN_DISABLED       = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  PCA_0_CONTROL_1_CCIEN_ENABLED        = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} PCA_0_CONTROL_1_CCIEN_Enum;

/* ===========================================  PCA_0 CONTROL_1 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< PCA_0_CONTROL_1_CIOVFIEN                                                  */
  PCA_0_CONTROL_1_CIOVFIEN_DISABLED    = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  PCA_0_CONTROL_1_CIOVFIEN_ENABLED     = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} PCA_0_CONTROL_1_CIOVFIEN_Enum;

/* ========================================================  CCAPV_1  ======================================================== */
/* ======================================================  CCAPVUPD_1  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           PCA_1                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  MODE  ========================================================== */
/* ==============================================  PCA_1 MODE CLKSEL [10..12]  =============================================== */
typedef enum {                                  /*!< PCA_1_MODE_CLKSEL                                                         */
  PCA_1_MODE_CLKSEL_APB                = 0,     /*!< APB : Set the APB as the input clock (FCLKIN).                            */
  PCA_1_MODE_CLKSEL_TIMER0             = 1,     /*!< TIMER0 : Set Timer 0 low overflows divided by 2 as the input
                                                     clock (FCLKIN).                                                           */
  PCA_1_MODE_CLKSEL_HL_ECI             = 2,     /*!< HL_ECI : Set high-to-low transitions on ECI divided by 2 as
                                                     the input clock (FCLKIN).                                                 */
  PCA_1_MODE_CLKSEL_EXTOSCN            = 3,     /*!< EXTOSCN : Set the external oscillator module output (EXTOSCn)
                                                     divided by 2 as the input clock (FCLKIN).                                 */
  PCA_1_MODE_CLKSEL_ECI                = 4,     /*!< ECI : Set ECI transitions divided by 2 as the input clock (FCLKIN).       */
} PCA_1_MODE_CLKSEL_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  PCA_1 CONTROL OVFIEN [0..0]  ============================================== */
typedef enum {                                  /*!< PCA_1_CONTROL_OVFIEN                                                      */
  PCA_1_CONTROL_OVFIEN_DISABLED        = 0,     /*!< DISABLED : Disable the PCA counter overflow/limit event interrupt.        */
  PCA_1_CONTROL_OVFIEN_ENABLED         = 1,     /*!< ENABLED : Enable the PCA counter overflow/limit event interrupt.          */
} PCA_1_CONTROL_OVFIEN_Enum;

/* ==============================================  PCA_1 CONTROL DBGMD [6..6]  =============================================== */
typedef enum {                                  /*!< PCA_1_CONTROL_DBGMD                                                       */
  PCA_1_CONTROL_DBGMD_HALT             = 0,     /*!< HALT : A debug breakpoint will cause the PCA to halt.                     */
  PCA_1_CONTROL_DBGMD_RUN              = 1,     /*!< RUN : The PCA will continue to operate while the core is halted
                                                     in debug mode.                                                            */
} PCA_1_CONTROL_DBGMD_Enum;

/* =============================================  PCA_1 CONTROL DIVST [21..21]  ============================================== */
typedef enum {                                  /*!< PCA_1_CONTROL_DIVST                                                       */
  PCA_1_CONTROL_DIVST_OUTPUT_HIGH      = 0,     /*!< OUTPUT_HIGH : The clock divider is currently in the first half-cycle.     */
  PCA_1_CONTROL_DIVST_OUTPUT_LOW       = 1,     /*!< OUTPUT_LOW : The clock divider is currently in the second half-cycle.     */
} PCA_1_CONTROL_DIVST_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ===============================================  PCA_1 STATUS C0CCI [0..0]  =============================================== */
typedef enum {                                  /*!< PCA_1_STATUS_C0CCI                                                        */
  PCA_1_STATUS_C0CCI_NOT_SET           = 0,     /*!< NOT_SET : A Channel 0 match or capture event did not occur.               */
  PCA_1_STATUS_C0CCI_SET               = 1,     /*!< SET : A Channel 0 match or capture event occurred.                        */
} PCA_1_STATUS_C0CCI_Enum;

/* ===============================================  PCA_1 STATUS C1CCI [1..1]  =============================================== */
typedef enum {                                  /*!< PCA_1_STATUS_C1CCI                                                        */
  PCA_1_STATUS_C1CCI_NOT_SET           = 0,     /*!< NOT_SET : A Channel 1 match or capture event did not occur.               */
  PCA_1_STATUS_C1CCI_SET               = 1,     /*!< SET : A Channel 1 match or capture event occurred.                        */
} PCA_1_STATUS_C1CCI_Enum;

/* ================================================  PCA_1 STATUS RUN [6..6]  ================================================ */
typedef enum {                                  /*!< PCA_1_STATUS_RUN                                                          */
  PCA_1_STATUS_RUN_STOP                = 0,     /*!< STOP : Stop the PCA Counter/Timer.                                        */
  PCA_1_STATUS_RUN_START               = 1,     /*!< START : Start the PCA Counter/Timer.                                      */
} PCA_1_STATUS_RUN_Enum;

/* ===============================================  PCA_1 STATUS OVFI [7..7]  ================================================ */
typedef enum {                                  /*!< PCA_1_STATUS_OVFI                                                         */
  PCA_1_STATUS_OVFI_NOT_SET            = 0,     /*!< NOT_SET : A PCA Counter/Timer overflow/limit event did not occur.         */
  PCA_1_STATUS_OVFI_SET                = 1,     /*!< SET : A PCA Counter/Timer overflow/limit event occurred.                  */
} PCA_1_STATUS_OVFI_Enum;

/* =============================================  PCA_1 STATUS C0IOVFI [10..10]  ============================================= */
typedef enum {                                  /*!< PCA_1_STATUS_C0IOVFI                                                      */
  PCA_1_STATUS_C0IOVFI_NOT_SET         = 0,     /*!< NOT_SET : Channel 0 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  PCA_1_STATUS_C0IOVFI_SET             = 1,     /*!< SET : Channel 0 counted past the channel n-bit mode limit.                */
} PCA_1_STATUS_C0IOVFI_Enum;

/* =============================================  PCA_1 STATUS C1IOVFI [11..11]  ============================================= */
typedef enum {                                  /*!< PCA_1_STATUS_C1IOVFI                                                      */
  PCA_1_STATUS_C1IOVFI_NOT_SET         = 0,     /*!< NOT_SET : Channel 1 did not count past the channel n-bit mode
                                                     limit.                                                                    */
  PCA_1_STATUS_C1IOVFI_SET             = 1,     /*!< SET : Channel 1 counted past the channel n-bit mode limit.                */
} PCA_1_STATUS_C1IOVFI_Enum;

/* ========================================================  COUNTER  ======================================================== */
/* =========================================================  LIMIT  ========================================================= */
/* ========================================================  MODE_0  ========================================================= */
/* ===============================================  PCA_1 MODE_0 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< PCA_1_MODE_0_COSEL                                                        */
  PCA_1_MODE_0_COSEL_TOGGLE_OUTPUT     = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_1_MODE_0_COSEL_SET_OUTPUT        = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_1_MODE_0_COSEL_CLEAR_OUTPUT      = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_1_MODE_0_COSEL_NO_CHANGE         = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} PCA_1_MODE_0_COSEL_Enum;

/* ===============================================  PCA_1 MODE_0 CMD [8..10]  ================================================ */
typedef enum {                                  /*!< PCA_1_MODE_0_CMD                                                          */
  PCA_1_MODE_0_CMD_EDGE_PWM            = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  PCA_1_MODE_0_CMD_CENTER_ALIGNED_PWM  = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  PCA_1_MODE_0_CMD_HF_SQUARE_WAVE      = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  PCA_1_MODE_0_CMD_TIMER_CAPTURE       = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  PCA_1_MODE_0_CMD_N_BIT_PWM           = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} PCA_1_MODE_0_CMD_Enum;

/* =======================================================  CONTROL_0  ======================================================= */
/* =============================================  PCA_1 CONTROL_0 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< PCA_1_CONTROL_0_COUTST                                                    */
  PCA_1_CONTROL_0_COUTST_LOW           = 0,     /*!< LOW : The channel output state is low.                                    */
  PCA_1_CONTROL_0_COUTST_HIGH          = 1,     /*!< HIGH : The channel output state is high.                                  */
} PCA_1_CONTROL_0_COUTST_Enum;

/* ============================================  PCA_1 CONTROL_0 CPCAPEN [1..1]  ============================================= */
typedef enum {                                  /*!< PCA_1_CONTROL_0_CPCAPEN                                                   */
  PCA_1_CONTROL_0_CPCAPEN_DISABLED     = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  PCA_1_CONTROL_0_CPCAPEN_ENABLED      = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} PCA_1_CONTROL_0_CPCAPEN_Enum;

/* ============================================  PCA_1 CONTROL_0 CNCAPEN [2..2]  ============================================= */
typedef enum {                                  /*!< PCA_1_CONTROL_0_CNCAPEN                                                   */
  PCA_1_CONTROL_0_CNCAPEN_DISABLED     = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  PCA_1_CONTROL_0_CNCAPEN_ENABLED      = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} PCA_1_CONTROL_0_CNCAPEN_Enum;

/* =============================================  PCA_1 CONTROL_0 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< PCA_1_CONTROL_0_CUPDCF                                                    */
  PCA_1_CONTROL_0_CUPDCF_NOT_SET       = 0,     /*!< NOT_SET : A PCA channel register update completed or is not
                                                     pending.                                                                  */
  PCA_1_CONTROL_0_CUPDCF_SET           = 1,     /*!< SET : A PCA channel register update has not completed and is
                                                     still pending.                                                            */
} PCA_1_CONTROL_0_CUPDCF_Enum;

/* =============================================  PCA_1 CONTROL_0 CCIEN [8..8]  ============================================== */
typedef enum {                                  /*!< PCA_1_CONTROL_0_CCIEN                                                     */
  PCA_1_CONTROL_0_CCIEN_DISABLED       = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  PCA_1_CONTROL_0_CCIEN_ENABLED        = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} PCA_1_CONTROL_0_CCIEN_Enum;

/* ===========================================  PCA_1 CONTROL_0 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< PCA_1_CONTROL_0_CIOVFIEN                                                  */
  PCA_1_CONTROL_0_CIOVFIEN_DISABLED    = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  PCA_1_CONTROL_0_CIOVFIEN_ENABLED     = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} PCA_1_CONTROL_0_CIOVFIEN_Enum;

/* ========================================================  CCAPV_0  ======================================================== */
/* ======================================================  CCAPVUPD_0  ======================================================= */
/* ========================================================  MODE_1  ========================================================= */
/* ===============================================  PCA_1 MODE_1 COSEL [0..1]  =============================================== */
typedef enum {                                  /*!< PCA_1_MODE_1_COSEL                                                        */
  PCA_1_MODE_1_COSEL_TOGGLE_OUTPUT     = 0,     /*!< TOGGLE_OUTPUT : Toggle the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_1_MODE_1_COSEL_SET_OUTPUT        = 1,     /*!< SET_OUTPUT : Set the channel output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_1_MODE_1_COSEL_CLEAR_OUTPUT      = 2,     /*!< CLEAR_OUTPUT : Clear the output at the next capture/compare,
                                                     overflow, or intermediate event.                                          */
  PCA_1_MODE_1_COSEL_NO_CHANGE         = 3,     /*!< NO_CHANGE : Capture/Compare, overflow, or intermediate events
                                                     do not control the output state.                                          */
} PCA_1_MODE_1_COSEL_Enum;

/* ===============================================  PCA_1 MODE_1 CMD [8..10]  ================================================ */
typedef enum {                                  /*!< PCA_1_MODE_1_CMD                                                          */
  PCA_1_MODE_1_CMD_EDGE_PWM            = 0,     /*!< EDGE_PWM : Configure the channel for edge-aligned PWM mode.               */
  PCA_1_MODE_1_CMD_CENTER_ALIGNED_PWM  = 1,     /*!< CENTER_ALIGNED_PWM : Configure the channel for center-aligned
                                                     PWM mode.                                                                 */
  PCA_1_MODE_1_CMD_HF_SQUARE_WAVE      = 2,     /*!< HF_SQUARE_WAVE : Configure the channel for high-frequency/square-wave
                                                     mode.                                                                     */
  PCA_1_MODE_1_CMD_TIMER_CAPTURE       = 3,     /*!< TIMER_CAPTURE : Configure the channel for timer/capture mode.             */
  PCA_1_MODE_1_CMD_N_BIT_PWM           = 4,     /*!< N_BIT_PWM : Configure the channel for n-bit edge-aligned PWM
                                                     mode.                                                                     */
} PCA_1_MODE_1_CMD_Enum;

/* =======================================================  CONTROL_1  ======================================================= */
/* =============================================  PCA_1 CONTROL_1 COUTST [0..0]  ============================================= */
typedef enum {                                  /*!< PCA_1_CONTROL_1_COUTST                                                    */
  PCA_1_CONTROL_1_COUTST_LOW           = 0,     /*!< LOW : The channel output state is low.                                    */
  PCA_1_CONTROL_1_COUTST_HIGH          = 1,     /*!< HIGH : The channel output state is high.                                  */
} PCA_1_CONTROL_1_COUTST_Enum;

/* ============================================  PCA_1 CONTROL_1 CPCAPEN [1..1]  ============================================= */
typedef enum {                                  /*!< PCA_1_CONTROL_1_CPCAPEN                                                   */
  PCA_1_CONTROL_1_CPCAPEN_DISABLED     = 0,     /*!< DISABLED : Disable positive-edge input capture.                           */
  PCA_1_CONTROL_1_CPCAPEN_ENABLED      = 1,     /*!< ENABLED : Enable positive-edge input capture.                             */
} PCA_1_CONTROL_1_CPCAPEN_Enum;

/* ============================================  PCA_1 CONTROL_1 CNCAPEN [2..2]  ============================================= */
typedef enum {                                  /*!< PCA_1_CONTROL_1_CNCAPEN                                                   */
  PCA_1_CONTROL_1_CNCAPEN_DISABLED     = 0,     /*!< DISABLED : Disable negative-edge input capture.                           */
  PCA_1_CONTROL_1_CNCAPEN_ENABLED      = 1,     /*!< ENABLED : Enable negative-edge input capture.                             */
} PCA_1_CONTROL_1_CNCAPEN_Enum;

/* =============================================  PCA_1 CONTROL_1 CUPDCF [3..3]  ============================================= */
typedef enum {                                  /*!< PCA_1_CONTROL_1_CUPDCF                                                    */
  PCA_1_CONTROL_1_CUPDCF_NOT_SET       = 0,     /*!< NOT_SET : A PCA channel register update completed or is not
                                                     pending.                                                                  */
  PCA_1_CONTROL_1_CUPDCF_SET           = 1,     /*!< SET : A PCA channel register update has not completed and is
                                                     still pending.                                                            */
} PCA_1_CONTROL_1_CUPDCF_Enum;

/* =============================================  PCA_1 CONTROL_1 CCIEN [8..8]  ============================================== */
typedef enum {                                  /*!< PCA_1_CONTROL_1_CCIEN                                                     */
  PCA_1_CONTROL_1_CCIEN_DISABLED       = 0,     /*!< DISABLED : Disable the channel capture/compare interrupt.                 */
  PCA_1_CONTROL_1_CCIEN_ENABLED        = 1,     /*!< ENABLED : Enable the channel capture/compare interrupt.                   */
} PCA_1_CONTROL_1_CCIEN_Enum;

/* ===========================================  PCA_1 CONTROL_1 CIOVFIEN [11..11]  =========================================== */
typedef enum {                                  /*!< PCA_1_CONTROL_1_CIOVFIEN                                                  */
  PCA_1_CONTROL_1_CIOVFIEN_DISABLED    = 0,     /*!< DISABLED : Disable the channel intermediate overflow interrupt.           */
  PCA_1_CONTROL_1_CIOVFIEN_ENABLED     = 1,     /*!< ENABLED : Enable the channel intermediate overflow interrupt.             */
} PCA_1_CONTROL_1_CIOVFIEN_Enum;

/* ========================================================  CCAPV_1  ======================================================== */
/* ======================================================  CCAPVUPD_1  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           PMU_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  PMU_0 CONTROL WAKECLR [0..0]  ============================================== */
typedef enum {                                  /*!< PMU_0_CONTROL_WAKECLR                                                     */
  PMU_0_CONTROL_WAKECLR_CLEAR          = 0,     /*!< CLEAR : Clear all wakeup sources.                                         */
} PMU_0_CONTROL_WAKECLR_Enum;

/* =============================================  PMU_0 CONTROL PERILPEN [1..1]  ============================================= */
typedef enum {                                  /*!< PMU_0_CONTROL_PERILPEN                                                    */
  PMU_0_CONTROL_PERILPEN_DISABLED      = 0,     /*!< DISABLED : Disable the peripheral low power state.                        */
  PMU_0_CONTROL_PERILPEN_ENABLED       = 1,     /*!< ENABLED : Enable the peripheral low power state. The peripherals
                                                     will not be accessible in this state.                                     */
} PMU_0_CONTROL_PERILPEN_Enum;

/* =============================================  PMU_0 CONTROL PINLPEN [2..2]  ============================================== */
typedef enum {                                  /*!< PMU_0_CONTROL_PINLPEN                                                     */
  PMU_0_CONTROL_PINLPEN_DISABLED       = 0,     /*!< DISABLED : Disable the pin low power state.                               */
  PMU_0_CONTROL_PINLPEN_ENABLED        = 1,     /*!< ENABLED : Enable the pin low power state. The pins will not
                                                     be accessible in this state.                                              */
} PMU_0_CONTROL_PINLPEN_Enum;

/* =============================================  PMU_0 CONTROL PWAKEEN [3..3]  ============================================== */
typedef enum {                                  /*!< PMU_0_CONTROL_PWAKEEN                                                     */
  PMU_0_CONTROL_PWAKEEN_DISABLED       = 0,     /*!< DISABLED : Disable Pin Wake.                                              */
  PMU_0_CONTROL_PWAKEEN_ENABLED        = 1,     /*!< ENABLED : Enable Pin Wake.                                                */
} PMU_0_CONTROL_PWAKEEN_Enum;

/* ============================================  PMU_0 CONTROL PMUASLPEN [4..4]  ============================================= */
typedef enum {                                  /*!< PMU_0_CONTROL_PMUASLPEN                                                   */
  PMU_0_CONTROL_PMUASLPEN_DISABLED     = 0,     /*!< DISABLED : Disable the PMU Asleep pin.                                    */
  PMU_0_CONTROL_PMUASLPEN_ENABLED      = 1,     /*!< ENABLED : Enable the PMU Asleep pin.                                      */
} PMU_0_CONTROL_PMUASLPEN_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  PMU_0 CONFIG RTC0FREN [8..8]  ============================================== */
typedef enum {                                  /*!< PMU_0_CONFIG_RTC0FREN                                                     */
  PMU_0_CONFIG_RTC0FREN_DISABLED       = 0,     /*!< DISABLED : An RTC0 fail event does not cause the RTC0 and LPTIMER0
                                                     modules to reset.                                                         */
  PMU_0_CONFIG_RTC0FREN_ENABLED        = 1,     /*!< ENABLED : An RTC0 fail event causes the RTC0 and LPTIMER0 modules
                                                     to reset.                                                                 */
} PMU_0_CONFIG_RTC0FREN_Enum;

/* =============================================  PMU_0 CONFIG RTC0AREN [9..9]  ============================================== */
typedef enum {                                  /*!< PMU_0_CONFIG_RTC0AREN                                                     */
  PMU_0_CONFIG_RTC0AREN_DISABLED       = 0,     /*!< DISABLED : An RTC0 alarm event does not cause the RTC0 and LPTIMER0
                                                     modules to reset.                                                         */
  PMU_0_CONFIG_RTC0AREN_ENABLED        = 1,     /*!< ENABLED : An RTC0 alarm event causes the RTC0 and LPTIMER0 modules
                                                     to reset.                                                                 */
} PMU_0_CONFIG_RTC0AREN_Enum;

/* =============================================  PMU_0 CONFIG CMP0REN [13..13]  ============================================= */
typedef enum {                                  /*!< PMU_0_CONFIG_CMP0REN                                                      */
  PMU_0_CONFIG_CMP0REN_DISABLED        = 0,     /*!< DISABLED : A Comparator 0 event does not cause the RTC0 and
                                                     LPTIMER0 modules to reset.                                                */
  PMU_0_CONFIG_CMP0REN_ENABLED         = 1,     /*!< ENABLED : A Comparator 0 event causes the RTC0 and LPTIMER0
                                                     modules to reset.                                                         */
} PMU_0_CONFIG_CMP0REN_Enum;

/* ============================================  PMU_0 CONFIG PWAKEREN [14..14]  ============================================= */
typedef enum {                                  /*!< PMU_0_CONFIG_PWAKEREN                                                     */
  PMU_0_CONFIG_PWAKEREN_DISABLED       = 0,     /*!< DISABLED : A Pin Wake event does not cause the RTC0 and LPTIMER0
                                                     modules to reset.                                                         */
  PMU_0_CONFIG_PWAKEREN_ENABLED        = 1,     /*!< ENABLED : A Pin Wake event causes the RTC0 and LPTIMER0 modules
                                                     to reset.                                                                 */
} PMU_0_CONFIG_PWAKEREN_Enum;

/* =============================================  PMU_0 CONFIG LPT0REN [15..15]  ============================================= */
typedef enum {                                  /*!< PMU_0_CONFIG_LPT0REN                                                      */
  PMU_0_CONFIG_LPT0REN_DISABLED        = 0,     /*!< DISABLED : An LPTIMER0 event does not cause the RTC0 and LPTIMER0
                                                     modules to reset.                                                         */
  PMU_0_CONFIG_LPT0REN_ENABLED         = 1,     /*!< ENABLED : An LPTIMER0 event causes the RTC0 and LPTIMER0 modules
                                                     to reset.                                                                 */
} PMU_0_CONFIG_LPT0REN_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ===============================================  PMU_0 STATUS PM9EF [0..0]  =============================================== */
typedef enum {                                  /*!< PMU_0_STATUS_PM9EF                                                        */
  PMU_0_STATUS_PM9EF_NOT_SET           = 0,     /*!< NOT_SET : The device has not exited Power Mode 9.                         */
  PMU_0_STATUS_PM9EF_SET               = 1,     /*!< SET : The device has exited Power Mode 9. This bit must be cleared
                                                     by firmware.                                                              */
} PMU_0_STATUS_PM9EF_Enum;

/* ==============================================  PMU_0 STATUS PWAKEF [1..1]  =============================================== */
typedef enum {                                  /*!< PMU_0_STATUS_PWAKEF                                                       */
  PMU_0_STATUS_PWAKEF_SET              = 0,     /*!< SET : A Pin Wake event has occurred.                                      */
  PMU_0_STATUS_PWAKEF_NOT_SET          = 1,     /*!< NOT_SET : A Pin Wake event has not occurred.                              */
} PMU_0_STATUS_PWAKEF_Enum;

/* ===============================================  PMU_0 STATUS PORF [2..2]  ================================================ */
typedef enum {                                  /*!< PMU_0_STATUS_PORF                                                         */
  PMU_0_STATUS_PORF_NOT_SET            = 0,     /*!< NOT_SET : A power-on reset did not occur since the last time
                                                     PORF was cleared.                                                         */
  PMU_0_STATUS_PORF_SET                = 1,     /*!< SET : A power-on reset occurred.                                          */
} PMU_0_STATUS_PORF_Enum;

/* ========================================================  WAKEEN  ========================================================= */
/* =============================================  PMU_0 WAKEEN RTC0FWEN [0..0]  ============================================== */
typedef enum {                                  /*!< PMU_0_WAKEEN_RTC0FWEN                                                     */
  PMU_0_WAKEEN_RTC0FWEN_DISABLED       = 0,     /*!< DISABLED : An RTC0 fail event does not wake the device.                   */
  PMU_0_WAKEEN_RTC0FWEN_ENABLED        = 1,     /*!< ENABLED : An RTC0 fail event awakens the device.                          */
} PMU_0_WAKEEN_RTC0FWEN_Enum;

/* =============================================  PMU_0 WAKEEN RTC0AWEN [1..1]  ============================================== */
typedef enum {                                  /*!< PMU_0_WAKEEN_RTC0AWEN                                                     */
  PMU_0_WAKEEN_RTC0AWEN_DISABLED       = 0,     /*!< DISABLED : An RTC0 alarm event does not wake the device.                  */
  PMU_0_WAKEEN_RTC0AWEN_ENABLED        = 1,     /*!< ENABLED : An RTC0 alarm event awakens the device.                         */
} PMU_0_WAKEEN_RTC0AWEN_Enum;

/* ==============================================  PMU_0 WAKEEN CMP0WEN [5..5]  ============================================== */
typedef enum {                                  /*!< PMU_0_WAKEEN_CMP0WEN                                                      */
  PMU_0_WAKEEN_CMP0WEN_DISABLED        = 0,     /*!< DISABLED : A Comparator 0 event does not wake the device.                 */
  PMU_0_WAKEEN_CMP0WEN_ENABLED         = 1,     /*!< ENABLED : A Comparator 0 event awakens the device.                        */
} PMU_0_WAKEEN_CMP0WEN_Enum;

/* =============================================  PMU_0 WAKEEN PWAKEWEN [6..6]  ============================================== */
typedef enum {                                  /*!< PMU_0_WAKEEN_PWAKEWEN                                                     */
  PMU_0_WAKEEN_PWAKEWEN_DISABLED       = 0,     /*!< DISABLED : A Pin Wake event does not wake the device.                     */
  PMU_0_WAKEEN_PWAKEWEN_ENABLED        = 1,     /*!< ENABLED : A Pin Wake event awakens the device.                            */
} PMU_0_WAKEEN_PWAKEWEN_Enum;

/* ==============================================  PMU_0 WAKEEN LPT0WEN [7..7]  ============================================== */
typedef enum {                                  /*!< PMU_0_WAKEEN_LPT0WEN                                                      */
  PMU_0_WAKEEN_LPT0WEN_DISABLED        = 0,     /*!< DISABLED : An LPTIMER0 event does not wake the device.                    */
  PMU_0_WAKEEN_LPT0WEN_ENABLED         = 1,     /*!< ENABLED : An LPTIMER0 event awakens the device.                           */
} PMU_0_WAKEEN_LPT0WEN_Enum;

/* ==============================================  PMU_0 WAKEEN RSTWEN [8..8]  =============================================== */
typedef enum {                                  /*!< PMU_0_WAKEEN_RSTWEN                                                       */
  PMU_0_WAKEEN_RSTWEN_DISABLED         = 0,     /*!< DISABLED : A /RESET Pin event does not wake the device.                   */
  PMU_0_WAKEEN_RSTWEN_ENABLED          = 1,     /*!< ENABLED : A /RESET Pin event awakens the device.                          */
} PMU_0_WAKEEN_RSTWEN_Enum;

/* ======================================================  WAKESTATUS  ======================================================= */
/* ============================================  PMU_0 WAKESTATUS RTC0FWF [0..0]  ============================================ */
typedef enum {                                  /*!< PMU_0_WAKESTATUS_RTC0FWF                                                  */
  PMU_0_WAKESTATUS_RTC0FWF_NOT_SET     = 0,     /*!< NOT_SET : An RTC0 fail event did not wake the device.                     */
  PMU_0_WAKESTATUS_RTC0FWF_SET         = 1,     /*!< SET : An RTC0 fail event woke the device.                                 */
} PMU_0_WAKESTATUS_RTC0FWF_Enum;

/* ============================================  PMU_0 WAKESTATUS RTC0AWF [1..1]  ============================================ */
typedef enum {                                  /*!< PMU_0_WAKESTATUS_RTC0AWF                                                  */
  PMU_0_WAKESTATUS_RTC0AWF_NOT_SET     = 0,     /*!< NOT_SET : An RTC0 alarm event did not wake the device.                    */
  PMU_0_WAKESTATUS_RTC0AWF_SET         = 1,     /*!< SET : An RTC0 alarm event woke the device.                                */
} PMU_0_WAKESTATUS_RTC0AWF_Enum;

/* ============================================  PMU_0 WAKESTATUS CMP0WF [5..5]  ============================================= */
typedef enum {                                  /*!< PMU_0_WAKESTATUS_CMP0WF                                                   */
  PMU_0_WAKESTATUS_CMP0WF_NOT_SET      = 0,     /*!< NOT_SET : A Comparator 0 event did not wake the device.                   */
  PMU_0_WAKESTATUS_CMP0WF_SET          = 1,     /*!< SET : A Comparator 0 event woke the device.                               */
} PMU_0_WAKESTATUS_CMP0WF_Enum;

/* ============================================  PMU_0 WAKESTATUS PWAKEWF [6..6]  ============================================ */
typedef enum {                                  /*!< PMU_0_WAKESTATUS_PWAKEWF                                                  */
  PMU_0_WAKESTATUS_PWAKEWF_NOT_SET     = 0,     /*!< NOT_SET : A Pin Wake event did not wake the device.                       */
  PMU_0_WAKESTATUS_PWAKEWF_SET         = 1,     /*!< SET : A Pin Wake event woke the device.                                   */
} PMU_0_WAKESTATUS_PWAKEWF_Enum;

/* ============================================  PMU_0 WAKESTATUS LPT0WF [7..7]  ============================================= */
typedef enum {                                  /*!< PMU_0_WAKESTATUS_LPT0WF                                                   */
  PMU_0_WAKESTATUS_LPT0WF_NOT_SET      = 0,     /*!< NOT_SET : An LPTIMER0 event did not wake the device.                      */
  PMU_0_WAKESTATUS_LPT0WF_SET          = 1,     /*!< SET : An LPTIMER0 event woke the device.                                  */
} PMU_0_WAKESTATUS_LPT0WF_Enum;

/* =============================================  PMU_0 WAKESTATUS RSTWF [8..8]  ============================================= */
typedef enum {                                  /*!< PMU_0_WAKESTATUS_RSTWF                                                    */
  PMU_0_WAKESTATUS_RSTWF_NOT_SET       = 0,     /*!< NOT_SET : A /RESET Pin event did not wake the device.                     */
  PMU_0_WAKESTATUS_RSTWF_SET           = 1,     /*!< SET : A /RESET Pin event woke the device.                                 */
} PMU_0_WAKESTATUS_RSTWF_Enum;

/* =========================================================  PWEN  ========================================================== */
/* ================================================  PMU_0 PWEN PW0EN [0..0]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW0EN                                                          */
  PMU_0_PWEN_PW0EN_DISABLED            = 0,     /*!< DISABLED : WAKE.0 (PB1.13) is not used in the Pin Wake comparison.        */
  PMU_0_PWEN_PW0EN_ENABLED             = 1,     /*!< ENABLED : WAKE.0 (PB1.13) is used in the Pin Wake comparison.             */
} PMU_0_PWEN_PW0EN_Enum;

/* ================================================  PMU_0 PWEN PW1EN [1..1]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW1EN                                                          */
  PMU_0_PWEN_PW1EN_DISABLED            = 0,     /*!< DISABLED : WAKE.1 (PB1.14) is not used in the Pin Wake comparison.        */
  PMU_0_PWEN_PW1EN_ENABLED             = 1,     /*!< ENABLED : WAKE.1 (PB1.14) is used in the Pin Wake comparison.             */
} PMU_0_PWEN_PW1EN_Enum;

/* ================================================  PMU_0 PWEN PW2EN [2..2]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW2EN                                                          */
  PMU_0_PWEN_PW2EN_DISABLED            = 0,     /*!< DISABLED : WAKE.2 (PB1.15) is not used in the Pin Wake comparison.        */
  PMU_0_PWEN_PW2EN_ENABLED             = 1,     /*!< ENABLED : WAKE.2 (PB1.15) is used in the Pin Wake comparison.             */
} PMU_0_PWEN_PW2EN_Enum;

/* ================================================  PMU_0 PWEN PW3EN [3..3]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW3EN                                                          */
  PMU_0_PWEN_PW3EN_DISABLED            = 0,     /*!< DISABLED : WAKE.3 (PB2.0) is not used in the Pin Wake comparison.         */
  PMU_0_PWEN_PW3EN_ENABLED             = 1,     /*!< ENABLED : WAKE.3 (PB2.0) is used in the Pin Wake comparison.              */
} PMU_0_PWEN_PW3EN_Enum;

/* ================================================  PMU_0 PWEN PW4EN [4..4]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW4EN                                                          */
  PMU_0_PWEN_PW4EN_DISABLED            = 0,     /*!< DISABLED : WAKE.4 (PB2.1) is not used in the Pin Wake comparison.         */
  PMU_0_PWEN_PW4EN_ENABLED             = 1,     /*!< ENABLED : WAKE.4 (PB2.1) is used in the Pin Wake comparison.              */
} PMU_0_PWEN_PW4EN_Enum;

/* ================================================  PMU_0 PWEN PW5EN [5..5]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW5EN                                                          */
  PMU_0_PWEN_PW5EN_DISABLED            = 0,     /*!< DISABLED : WAKE.5 (PB2.2) is not used in the Pin Wake comparison.         */
  PMU_0_PWEN_PW5EN_ENABLED             = 1,     /*!< ENABLED : WAKE.5 (PB2.2) is used in the Pin Wake comparison.              */
} PMU_0_PWEN_PW5EN_Enum;

/* ================================================  PMU_0 PWEN PW6EN [6..6]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW6EN                                                          */
  PMU_0_PWEN_PW6EN_DISABLED            = 0,     /*!< DISABLED : WAKE.6 (PB2.3) is not used in the Pin Wake comparison.         */
  PMU_0_PWEN_PW6EN_ENABLED             = 1,     /*!< ENABLED : WAKE.6 (PB2.3) is used in the Pin Wake comparison.              */
} PMU_0_PWEN_PW6EN_Enum;

/* ================================================  PMU_0 PWEN PW7EN [7..7]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW7EN                                                          */
  PMU_0_PWEN_PW7EN_DISABLED            = 0,     /*!< DISABLED : WAKE.7 (PB2.4) is not used in the Pin Wake comparison.         */
  PMU_0_PWEN_PW7EN_ENABLED             = 1,     /*!< ENABLED : WAKE.7 (PB2.4) is used in the Pin Wake comparison.              */
} PMU_0_PWEN_PW7EN_Enum;

/* ================================================  PMU_0 PWEN PW8EN [8..8]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW8EN                                                          */
  PMU_0_PWEN_PW8EN_DISABLED            = 0,     /*!< DISABLED : WAKE.8 (PB3.4) is not used in the Pin Wake comparison.         */
  PMU_0_PWEN_PW8EN_ENABLED             = 1,     /*!< ENABLED : WAKE.8 (PB3.4) is used in the Pin Wake comparison.              */
} PMU_0_PWEN_PW8EN_Enum;

/* ================================================  PMU_0 PWEN PW9EN [9..9]  ================================================ */
typedef enum {                                  /*!< PMU_0_PWEN_PW9EN                                                          */
  PMU_0_PWEN_PW9EN_DISABLED            = 0,     /*!< DISABLED : WAKE.9 (PB3.5) is not used in the Pin Wake comparison.         */
  PMU_0_PWEN_PW9EN_ENABLED             = 1,     /*!< ENABLED : WAKE.9 (PB3.5) is used in the Pin Wake comparison.              */
} PMU_0_PWEN_PW9EN_Enum;

/* ==============================================  PMU_0 PWEN PW10EN [10..10]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWEN_PW10EN                                                         */
  PMU_0_PWEN_PW10EN_DISABLED           = 0,     /*!< DISABLED : WAKE.10 (PB3.6) is not used in the Pin Wake comparison.        */
  PMU_0_PWEN_PW10EN_ENABLED            = 1,     /*!< ENABLED : WAKE.10 (PB3.6) is used in the Pin Wake comparison.             */
} PMU_0_PWEN_PW10EN_Enum;

/* ==============================================  PMU_0 PWEN PW11EN [11..11]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWEN_PW11EN                                                         */
  PMU_0_PWEN_PW11EN_DISABLED           = 0,     /*!< DISABLED : WAKE.11 (PB3.7) is not used in the Pin Wake comparison.        */
  PMU_0_PWEN_PW11EN_ENABLED            = 1,     /*!< ENABLED : WAKE.11 (PB3.7) is used in the Pin Wake comparison.             */
} PMU_0_PWEN_PW11EN_Enum;

/* ==============================================  PMU_0 PWEN PW12EN [12..12]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWEN_PW12EN                                                         */
  PMU_0_PWEN_PW12EN_DISABLED           = 0,     /*!< DISABLED : WAKE.12 (PB3.8) is not used in the Pin Wake comparison.        */
  PMU_0_PWEN_PW12EN_ENABLED            = 1,     /*!< ENABLED : WAKE.12 (PB3.8) is used in the Pin Wake comparison.             */
} PMU_0_PWEN_PW12EN_Enum;

/* ==============================================  PMU_0 PWEN PW13EN [13..13]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWEN_PW13EN                                                         */
  PMU_0_PWEN_PW13EN_DISABLED           = 0,     /*!< DISABLED : WAKE.13 (PB3.9) is not used in the Pin Wake comparison.        */
  PMU_0_PWEN_PW13EN_ENABLED            = 1,     /*!< ENABLED : WAKE.13 (PB3.9) is used in the Pin Wake comparison.             */
} PMU_0_PWEN_PW13EN_Enum;

/* ==============================================  PMU_0 PWEN PW14EN [14..14]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWEN_PW14EN                                                         */
  PMU_0_PWEN_PW14EN_DISABLED           = 0,     /*!< DISABLED : WAKE.14 (PB3.10) is not used in the Pin Wake comparison.       */
  PMU_0_PWEN_PW14EN_ENABLED            = 1,     /*!< ENABLED : WAKE.14 (PB3.10) is used in the Pin Wake comparison.            */
} PMU_0_PWEN_PW14EN_Enum;

/* ==============================================  PMU_0 PWEN PW15EN [15..15]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWEN_PW15EN                                                         */
  PMU_0_PWEN_PW15EN_DISABLED           = 0,     /*!< DISABLED : WAKE.15 (PB3.11) is not used in the Pin Wake comparison.       */
  PMU_0_PWEN_PW15EN_ENABLED            = 1,     /*!< ENABLED : WAKE.15 (PB3.11) is used in the Pin Wake comparison.            */
} PMU_0_PWEN_PW15EN_Enum;

/* =========================================================  PWPOL  ========================================================= */
/* ===============================================  PMU_0 PWPOL PW0POL [0..0]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW0POL                                                        */
  PMU_0_PWPOL_PW0POL_LOW               = 0,     /*!< LOW : The WAKE.0 (PB1.13) comparison value is logic low.                  */
  PMU_0_PWPOL_PW0POL_HIGH              = 1,     /*!< HIGH : The WAKE.0 (PB1.13) comparison value is logic high.                */
} PMU_0_PWPOL_PW0POL_Enum;

/* ===============================================  PMU_0 PWPOL PW1POL [1..1]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW1POL                                                        */
  PMU_0_PWPOL_PW1POL_LOW               = 0,     /*!< LOW : The WAKE.1 (PB1.14) comparison value is logic low.                  */
  PMU_0_PWPOL_PW1POL_HIGH              = 1,     /*!< HIGH : The WAKE.1 (PB1.14) comparison value is logic high.                */
} PMU_0_PWPOL_PW1POL_Enum;

/* ===============================================  PMU_0 PWPOL PW2POL [2..2]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW2POL                                                        */
  PMU_0_PWPOL_PW2POL_LOW               = 0,     /*!< LOW : The WAKE.2 (PB1.15) comparison value is logic low.                  */
  PMU_0_PWPOL_PW2POL_HIGH              = 1,     /*!< HIGH : The WAKE.2 (PB1.15) comparison value is logic high.                */
} PMU_0_PWPOL_PW2POL_Enum;

/* ===============================================  PMU_0 PWPOL PW3POL [3..3]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW3POL                                                        */
  PMU_0_PWPOL_PW3POL_LOW               = 0,     /*!< LOW : The WAKE.3 (PB2.0) comparison value is logic low.                   */
  PMU_0_PWPOL_PW3POL_HIGH              = 1,     /*!< HIGH : The WAKE.3 (PB2.0) comparison value is logic high.                 */
} PMU_0_PWPOL_PW3POL_Enum;

/* ===============================================  PMU_0 PWPOL PW4POL [4..4]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW4POL                                                        */
  PMU_0_PWPOL_PW4POL_LOW               = 0,     /*!< LOW : The WAKE.4 (PB2.1) comparison value is logic low.                   */
  PMU_0_PWPOL_PW4POL_HIGH              = 1,     /*!< HIGH : The WAKE.4 (PB2.1) comparison value is logic high.                 */
} PMU_0_PWPOL_PW4POL_Enum;

/* ===============================================  PMU_0 PWPOL PW5POL [5..5]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW5POL                                                        */
  PMU_0_PWPOL_PW5POL_LOW               = 0,     /*!< LOW : The WAKE.5 (PB2.2) comparison value is logic low.                   */
  PMU_0_PWPOL_PW5POL_HIGH              = 1,     /*!< HIGH : The WAKE.5 (PB2.2) comparison value is logic high.                 */
} PMU_0_PWPOL_PW5POL_Enum;

/* ===============================================  PMU_0 PWPOL PW6POL [6..6]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW6POL                                                        */
  PMU_0_PWPOL_PW6POL_LOW               = 0,     /*!< LOW : The WAKE.6 (PB2.3) comparison value is logic low.                   */
  PMU_0_PWPOL_PW6POL_HIGH              = 1,     /*!< HIGH : The WAKE.6 (PB2.3) comparison value is logic high.                 */
} PMU_0_PWPOL_PW6POL_Enum;

/* ===============================================  PMU_0 PWPOL PW7POL [7..7]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW7POL                                                        */
  PMU_0_PWPOL_PW7POL_LOW               = 0,     /*!< LOW : The WAKE.7 (PB2.4) comparison value is logic low.                   */
  PMU_0_PWPOL_PW7POL_HIGH              = 1,     /*!< HIGH : The WAKE.7 (PB2.4) comparison value is logic high.                 */
} PMU_0_PWPOL_PW7POL_Enum;

/* ===============================================  PMU_0 PWPOL PW8POL [8..8]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW8POL                                                        */
  PMU_0_PWPOL_PW8POL_LOW               = 0,     /*!< LOW : The WAKE.8 (PB3.4) comparison value is logic low.                   */
  PMU_0_PWPOL_PW8POL_HIGH              = 1,     /*!< HIGH : The WAKE.8 (PB3.4) comparison value is logic high.                 */
} PMU_0_PWPOL_PW8POL_Enum;

/* ===============================================  PMU_0 PWPOL PW9POL [9..9]  =============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW9POL                                                        */
  PMU_0_PWPOL_PW9POL_LOW               = 0,     /*!< LOW : The WAKE.9 (PB3.5) comparison value is logic low.                   */
  PMU_0_PWPOL_PW9POL_HIGH              = 1,     /*!< HIGH : The WAKE.9 (PB3.5) comparison value is logic high.                 */
} PMU_0_PWPOL_PW9POL_Enum;

/* =============================================  PMU_0 PWPOL PW10POL [10..10]  ============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW10POL                                                       */
  PMU_0_PWPOL_PW10POL_LOW              = 0,     /*!< LOW : The WAKE.10 (PB3.6) comparison value is logic low.                  */
  PMU_0_PWPOL_PW10POL_HIGH             = 1,     /*!< HIGH : The WAKE.10 (PB3.6) comparison value is logic high.                */
} PMU_0_PWPOL_PW10POL_Enum;

/* =============================================  PMU_0 PWPOL PW11POL [11..11]  ============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW11POL                                                       */
  PMU_0_PWPOL_PW11POL_LOW              = 0,     /*!< LOW : The WAKE.11 (PB3.7) comparison value is logic low.                  */
  PMU_0_PWPOL_PW11POL_HIGH             = 1,     /*!< HIGH : The WAKE.11 (PB3.7) comparison value is logic high.                */
} PMU_0_PWPOL_PW11POL_Enum;

/* =============================================  PMU_0 PWPOL PW12POL [12..12]  ============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW12POL                                                       */
  PMU_0_PWPOL_PW12POL_LOW              = 0,     /*!< LOW : The WAKE.12 (PB3.8) comparison value is logic low.                  */
  PMU_0_PWPOL_PW12POL_HIGH             = 1,     /*!< HIGH : The WAKE.12 (PB3.8) comparison value is logic high.                */
} PMU_0_PWPOL_PW12POL_Enum;

/* =============================================  PMU_0 PWPOL PW13POL [13..13]  ============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW13POL                                                       */
  PMU_0_PWPOL_PW13POL_LOW              = 0,     /*!< LOW : The WAKE.13 (PB3.9) comparison value is logic low.                  */
  PMU_0_PWPOL_PW13POL_HIGH             = 1,     /*!< HIGH : The WAKE.13 (PB3.9) comparison value is logic high.                */
} PMU_0_PWPOL_PW13POL_Enum;

/* =============================================  PMU_0 PWPOL PW14POL [14..14]  ============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW14POL                                                       */
  PMU_0_PWPOL_PW14POL_LOW              = 0,     /*!< LOW : The WAKE.14 (PB3.10) comparison value is logic low.                 */
  PMU_0_PWPOL_PW14POL_HIGH             = 1,     /*!< HIGH : The WAKE.14 (PB3.10) comparison value is logic high.               */
} PMU_0_PWPOL_PW14POL_Enum;

/* =============================================  PMU_0 PWPOL PW15POL [15..15]  ============================================== */
typedef enum {                                  /*!< PMU_0_PWPOL_PW15POL                                                       */
  PMU_0_PWPOL_PW15POL_LOW              = 0,     /*!< LOW : The WAKE.15 (PB3.11) comparison value is logic low.                 */
  PMU_0_PWPOL_PW15POL_HIGH             = 1,     /*!< HIGH : The WAKE.15 (PB3.11) comparison value is logic high.               */
} PMU_0_PWPOL_PW15POL_Enum;



/* =========================================================================================================================== */
/* ================                                          PBCFG_0                                          ================ */
/* =========================================================================================================================== */

/* =======================================================  CONTROL0  ======================================================== */
/* ============================================  PBCFG_0 CONTROL0 INT0SEL [0..3]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_INT0SEL                                                  */
  PBCFG_0_CONTROL0_INT0SEL_INT0_0      = 0,     /*!< INT0_0 : Select INT0.0 (PB2.0)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_1      = 1,     /*!< INT0_1 : Select INT0.1 (PB2.1)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_2      = 2,     /*!< INT0_2 : Select INT0.2 (PB2.2)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_3      = 3,     /*!< INT0_3 : Select INT0.3 (PB2.3)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_4      = 4,     /*!< INT0_4 : Select INT0.4 (PB2.4)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_5      = 5,     /*!< INT0_5 : Select INT0.5 (PB2.5)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_6      = 6,     /*!< INT0_6 : Select INT0.6 (PB2.6)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_7      = 7,     /*!< INT0_7 : Select INT0.7 (PB2.7)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_8      = 8,     /*!< INT0_8 : Select INT0.8 (PB3.3)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_9      = 9,     /*!< INT0_9 : Select INT0.9 (PB3.4)                                            */
  PBCFG_0_CONTROL0_INT0SEL_INT0_10     = 10,    /*!< INT0_10 : Select INT0.10 (PB3.5)                                          */
  PBCFG_0_CONTROL0_INT0SEL_INT0_11     = 11,    /*!< INT0_11 : Select INT0.11 (PB3.6)                                          */
  PBCFG_0_CONTROL0_INT0SEL_INT0_12     = 12,    /*!< INT0_12 : Select INT0.12 (PB3.7)                                          */
  PBCFG_0_CONTROL0_INT0SEL_INT0_13     = 13,    /*!< INT0_13 : Select INT0.13 (PB3.8)                                          */
  PBCFG_0_CONTROL0_INT0SEL_INT0_14     = 14,    /*!< INT0_14 : Select INT0.14 (PB3.9)                                          */
  PBCFG_0_CONTROL0_INT0SEL_INT0_15     = 15,    /*!< INT0_15 : Select INT0.15 (PB3.10)                                         */
} PBCFG_0_CONTROL0_INT0SEL_Enum;

/* ============================================  PBCFG_0 CONTROL0 INT0POL [4..4]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_INT0POL                                                  */
  PBCFG_0_CONTROL0_INT0POL_LOW         = 0,     /*!< LOW : A low value or falling edge on the selected pin will cause
                                                     interrupt.                                                                */
  PBCFG_0_CONTROL0_INT0POL_HIGH        = 1,     /*!< HIGH : A high value or rising edge on the selected pin will
                                                     cause interrupt.                                                          */
} PBCFG_0_CONTROL0_INT0POL_Enum;

/* ============================================  PBCFG_0 CONTROL0 INT0MD [5..5]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_INT0MD                                                   */
  PBCFG_0_CONTROL0_INT0MD_LEVEL        = 0,     /*!< LEVEL : Interrupt based on level sensitivity.                             */
  PBCFG_0_CONTROL0_INT0MD_EDGE         = 1,     /*!< EDGE : Interrupt based on edge sensitivity.                               */
} PBCFG_0_CONTROL0_INT0MD_Enum;

/* ============================================  PBCFG_0 CONTROL0 INT0EN [7..7]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_INT0EN                                                   */
  PBCFG_0_CONTROL0_INT0EN_DISABLED     = 0,     /*!< DISABLED : Disable external interrupt 0.                                  */
  PBCFG_0_CONTROL0_INT0EN_ENABLED      = 1,     /*!< ENABLED : Enable external interrupt 0.                                    */
} PBCFG_0_CONTROL0_INT0EN_Enum;

/* ===========================================  PBCFG_0 CONTROL0 INT1SEL [8..11]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_INT1SEL                                                  */
  PBCFG_0_CONTROL0_INT1SEL_INT1_0      = 0,     /*!< INT1_0 : Select INT1.0 (PB2.0)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_1      = 1,     /*!< INT1_1 : Select INT1.1 (PB2.1)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_2      = 2,     /*!< INT1_2 : Select INT1.2 (PB2.2)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_3      = 3,     /*!< INT1_3 : Select INT1.3 (PB2.3)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_4      = 4,     /*!< INT1_4 : Select INT1.4 (PB2.4)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_5      = 5,     /*!< INT1_5 : Select INT1.5 (PB2.5)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_6      = 6,     /*!< INT1_6 : Select INT1.6 (PB2.6)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_7      = 7,     /*!< INT1_7 : Select INT1.7 (PB2.7)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_8      = 8,     /*!< INT1_8 : Select INT1.8 (PB3.3)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_9      = 9,     /*!< INT1_9 : Select INT1.9 (PB3.4)                                            */
  PBCFG_0_CONTROL0_INT1SEL_INT1_10     = 10,    /*!< INT1_10 : Select INT1.10 (PB3.5)                                          */
  PBCFG_0_CONTROL0_INT1SEL_INT1_11     = 11,    /*!< INT1_11 : Select INT1.11 (PB3.6)                                          */
  PBCFG_0_CONTROL0_INT1SEL_INT1_12     = 12,    /*!< INT1_12 : Select INT1.12 (PB3.7)                                          */
  PBCFG_0_CONTROL0_INT1SEL_INT1_13     = 13,    /*!< INT1_13 : Select INT1.13 (PB3.8)                                          */
  PBCFG_0_CONTROL0_INT1SEL_INT1_14     = 14,    /*!< INT1_14 : Select INT1.14 (PB3.9)                                          */
  PBCFG_0_CONTROL0_INT1SEL_INT1_15     = 15,    /*!< INT1_15 : Select INT1.15 (PB3.10)                                         */
} PBCFG_0_CONTROL0_INT1SEL_Enum;

/* ===========================================  PBCFG_0 CONTROL0 INT1POL [12..12]  =========================================== */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_INT1POL                                                  */
  PBCFG_0_CONTROL0_INT1POL_LOW         = 0,     /*!< LOW : A low value or falling edge on the selected pin will cause
                                                     interrupt.                                                                */
  PBCFG_0_CONTROL0_INT1POL_HIGH        = 1,     /*!< HIGH : A high value or rising edge on the selected pin will
                                                     cause interrupt.                                                          */
} PBCFG_0_CONTROL0_INT1POL_Enum;

/* ===========================================  PBCFG_0 CONTROL0 INT1MD [13..13]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_INT1MD                                                   */
  PBCFG_0_CONTROL0_INT1MD_LEVEL        = 0,     /*!< LEVEL : Interrupt based on level sensitivity.                             */
  PBCFG_0_CONTROL0_INT1MD_EDGE         = 1,     /*!< EDGE : Interrupt based on edge sensitivity.                               */
} PBCFG_0_CONTROL0_INT1MD_Enum;

/* ===========================================  PBCFG_0 CONTROL0 INT1EN [15..15]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_INT1EN                                                   */
  PBCFG_0_CONTROL0_INT1EN_DISABLED     = 0,     /*!< DISABLED : Disable external interrupt 1.                                  */
  PBCFG_0_CONTROL0_INT1EN_ENABLED      = 1,     /*!< ENABLED : Enable external interrupt 1.                                    */
} PBCFG_0_CONTROL0_INT1EN_Enum;

/* ===========================================  PBCFG_0 CONTROL0 PGDONEF [31..31]  =========================================== */
typedef enum {                                  /*!< PBCFG_0_CONTROL0_PGDONEF                                                  */
  PBCFG_0_CONTROL0_PGDONEF_NOT_SET     = 0,     /*!< NOT_SET : Firmware has written to the PBPGPHASE register, but
                                                     the Pulse Generator timer has not expired.                                */
  PBCFG_0_CONTROL0_PGDONEF_SET         = 1,     /*!< SET : The Pulse Generator cycle finished since the last time
                                                     PBPGPHASE was written.                                                    */
} PBCFG_0_CONTROL0_PGDONEF_Enum;

/* =====================================================  CONTROL0_SET  ====================================================== */
/* =====================================================  CONTROL0_CLR  ====================================================== */
/* =======================================================  CONTROL1  ======================================================== */
/* ============================================  PBCFG_0 CONTROL1 JTAGEN [0..0]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_JTAGEN                                                   */
  PBCFG_0_CONTROL1_JTAGEN_DISABLED     = 0,     /*!< DISABLED : JTAG functionality is not pinned out.                          */
  PBCFG_0_CONTROL1_JTAGEN_ENABLED      = 1,     /*!< ENABLED : JTAG functionality is pinned out.                               */
} PBCFG_0_CONTROL1_JTAGEN_Enum;

/* =============================================  PBCFG_0 CONTROL1 ETMEN [1..1]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_ETMEN                                                    */
  PBCFG_0_CONTROL1_ETMEN_DISABLED      = 0,     /*!< DISABLED : ETM not pinned out.                                            */
  PBCFG_0_CONTROL1_ETMEN_ENABLED       = 1,     /*!< ENABLED : ETM is enabled and pinned out.                                  */
} PBCFG_0_CONTROL1_ETMEN_Enum;

/* ==========================================  PBCFG_0 CONTROL1 EMIFBE0BEN [7..7]  =========================================== */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_EMIFBE0BEN                                               */
  PBCFG_0_CONTROL1_EMIFBE0BEN_DISABLED = 0,     /*!< DISABLED : Disable the EMIF /BE0 pin.                                     */
  PBCFG_0_CONTROL1_EMIFBE0BEN_ENABLED  = 1,     /*!< ENABLED : Enable the /BE0 pin if EMIFEN is also set to 1.                 */
} PBCFG_0_CONTROL1_EMIFBE0BEN_Enum;

/* ===========================================  PBCFG_0 CONTROL1 EMIFCS1EN [8..8]  =========================================== */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_EMIFCS1EN                                                */
  PBCFG_0_CONTROL1_EMIFCS1EN_DISABLED  = 0,     /*!< DISABLED : Disable the EMIF CS1 pin.                                      */
  PBCFG_0_CONTROL1_EMIFCS1EN_ENABLED   = 1,     /*!< ENABLED : Enable the CS1 pin if EMIFEN is also set to 1.                  */
} PBCFG_0_CONTROL1_EMIFCS1EN_Enum;

/* ============================================  PBCFG_0 CONTROL1 EMIFEN [9..9]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_EMIFEN                                                   */
  PBCFG_0_CONTROL1_EMIFEN_DISABLED     = 0,     /*!< DISABLED : Disable the EMIF pins.                                         */
  PBCFG_0_CONTROL1_EMIFEN_ENABLED      = 1,     /*!< ENABLED : EMIF is enabled and pinned out.                                 */
} PBCFG_0_CONTROL1_EMIFEN_Enum;

/* ==========================================  PBCFG_0 CONTROL1 EMIFWIDTH [10..15]  ========================================== */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_EMIFWIDTH                                                */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_8  = 0,     /*!< AWIDTH_8 : EMIF Address[7:0]                                              */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_9  = 1,     /*!< AWIDTH_9 : EMIF Address[8:0], PB2.8 = A[8]                                */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_10 = 2,     /*!< AWIDTH_10 : EMIF Address[9:0], PB2.7 = A[9]                               */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_11 = 3,     /*!< AWIDTH_11 : EMIF Address[10:0], PB2.6 = A[10]                             */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_12 = 4,     /*!< AWIDTH_12 : EMIF Address[11:0], PB2.5 = A[11]                             */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_13 = 5,     /*!< AWIDTH_13 : EMIF Address[12:0], PB2.4 = A[12]                             */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_14 = 6,     /*!< AWIDTH_14 : EMIF Address[13:0], PB2.3 = A[13]                             */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_15 = 7,     /*!< AWIDTH_15 : EMIF Address[14:0], PB2.2 = A[14]                             */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_16 = 8,     /*!< AWIDTH_16 : EMIF Address[15:0], PB2.1 = A[15]                             */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_17 = 9,     /*!< AWIDTH_17 : EMIF Address[16:0], PB2.0 = A[16]                             */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_18 = 10,    /*!< AWIDTH_18 : EMIF Address[17:0], PB1.15 = A[17]                            */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_19 = 11,    /*!< AWIDTH_19 : EMIF Address[18:0], PB1.14 = A[18]                            */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_20 = 12,    /*!< AWIDTH_20 : EMIF Address[19:0], PB1.13 = A[19]                            */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_21 = 13,    /*!< AWIDTH_21 : EMIF Address[20:0], PB1.12 = A[20]                            */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_22 = 14,    /*!< AWIDTH_22 : EMIF Address[21:0], PB1.11 = A[21]                            */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_23 = 15,    /*!< AWIDTH_23 : EMIF Address[22:0], PB1.10 = A[22]                            */
  PBCFG_0_CONTROL1_EMIFWIDTH_AWIDTH_24 = 16,    /*!< AWIDTH_24 : EMIF Address[23:0], PB1.10 = A[23]                            */
} PBCFG_0_CONTROL1_EMIFWIDTH_Enum;

/* ============================================  PBCFG_0 CONTROL1 MATMD [16..17]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_MATMD                                                    */
  PBCFG_0_CONTROL1_MATMD_PINMATCH      = 0,     /*!< PINMATCH : Port Match registers used to provide interrupt /
                                                     wake sources.                                                             */
  PBCFG_0_CONTROL1_MATMD_CAPSENSE_TX   = 1,     /*!< CAPSENSE_TX : Port Match registers used to monitor output pin
                                                     activity for Capacitive Sensing measurements.                             */
  PBCFG_0_CONTROL1_MATMD_CAPSENSE_RX   = 2,     /*!< CAPSENSE_RX : Port Match registers used to monitor input pin
                                                     activity for Capacitive Sensing measurements.                             */
} PBCFG_0_CONTROL1_MATMD_Enum;

/* ==========================================  PBCFG_0 CONTROL1 EVREGRMD [23..23]  =========================================== */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_EVREGRMD                                                 */
  PBCFG_0_CONTROL1_EVREGRMD_RESET_ON_ANY = 0,   /*!< RESET_ON_ANY : The pins used by the external regulator will
                                                     default to digital inputs with weak pull-up enabled on
                                                     any reset.                                                                */
  PBCFG_0_CONTROL1_EVREGRMD_RESET_ON_POR = 1,   /*!< RESET_ON_POR : The pins used by the external regulator will
                                                     default to digital inputs with weak pull-up enabled only
                                                     on Power-On Reset. Their configured mode will be preserved
                                                     through all other resets.                                                 */
} PBCFG_0_CONTROL1_EVREGRMD_Enum;

/* ============================================  PBCFG_0 CONTROL1 LOCK [31..31]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_CONTROL1_LOCK                                                     */
  PBCFG_0_CONTROL1_LOCK_UNLOCKED       = 0,     /*!< UNLOCKED : Port Bank Configuration and Control registers are
                                                     unlocked.                                                                 */
  PBCFG_0_CONTROL1_LOCK_LOCKED         = 1,     /*!< LOCKED : The following registers are locked from write access:
                                                     CONTROL1, XBAR0L, XBAR0H, XBAR1, and all PBSKIP registers.                */
} PBCFG_0_CONTROL1_LOCK_Enum;

/* =====================================================  CONTROL1_SET  ====================================================== */
/* =====================================================  CONTROL1_CLR  ====================================================== */
/* ========================================================  XBAR0L  ========================================================= */
/* ============================================  PBCFG_0 XBAR0L USART0EN [0..0]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_USART0EN                                                   */
  PBCFG_0_XBAR0L_USART0EN_DISABLED     = 0,     /*!< DISABLED : Disable USART0 RX and TX on Crossbar 0.                        */
  PBCFG_0_XBAR0L_USART0EN_ENABLED      = 1,     /*!< ENABLED : Enable USART0 RX and TX on Crossbar 0.                          */
} PBCFG_0_XBAR0L_USART0EN_Enum;

/* ===========================================  PBCFG_0 XBAR0L USART0FCEN [1..1]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_USART0FCEN                                                 */
  PBCFG_0_XBAR0L_USART0FCEN_DISABLED   = 0,     /*!< DISABLED : Disable USART0 flow control on Crossbar 0.                     */
  PBCFG_0_XBAR0L_USART0FCEN_ENABLED    = 1,     /*!< ENABLED : Enable USART0 flow control on Crossbar 0.                       */
} PBCFG_0_XBAR0L_USART0FCEN_Enum;

/* ============================================  PBCFG_0 XBAR0L USART0CEN [2..2]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_USART0CEN                                                  */
  PBCFG_0_XBAR0L_USART0CEN_DISABLED    = 0,     /*!< DISABLED : Disable USART0 clock on Crossbar 0.                            */
  PBCFG_0_XBAR0L_USART0CEN_ENABLED     = 1,     /*!< ENABLED : Enable USART0 clock on Crossbar 0.                              */
} PBCFG_0_XBAR0L_USART0CEN_Enum;

/* =============================================  PBCFG_0 XBAR0L SPI0EN [3..3]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_SPI0EN                                                     */
  PBCFG_0_XBAR0L_SPI0EN_DISABLED       = 0,     /*!< DISABLED : Disable SPI0 SCK, MISO, and MOSI on Crossbar 0.                */
  PBCFG_0_XBAR0L_SPI0EN_ENABLED        = 1,     /*!< ENABLED : Enable SPI0 SCK, MISO, and MOSI on Crossbar 0.                  */
} PBCFG_0_XBAR0L_SPI0EN_Enum;

/* ============================================  PBCFG_0 XBAR0L SPI0NSSEN [4..4]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_SPI0NSSEN                                                  */
  PBCFG_0_XBAR0L_SPI0NSSEN_DISABLED    = 0,     /*!< DISABLED : Disable SPI0 NSS on Crossbar 0.                                */
  PBCFG_0_XBAR0L_SPI0NSSEN_ENABLED     = 1,     /*!< ENABLED : Enable SPI0 NSS on Crossbar 0.                                  */
} PBCFG_0_XBAR0L_SPI0NSSEN_Enum;

/* ============================================  PBCFG_0 XBAR0L USART1EN [5..5]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_USART1EN                                                   */
  PBCFG_0_XBAR0L_USART1EN_DISABLED     = 0,     /*!< DISABLED : Disable USART1 RX and TX on Crossbar 0.                        */
  PBCFG_0_XBAR0L_USART1EN_ENABLED      = 1,     /*!< ENABLED : Enable USART1 RX and TX on Crossbar 0.                          */
} PBCFG_0_XBAR0L_USART1EN_Enum;

/* ===========================================  PBCFG_0 XBAR0L USART1FCEN [6..6]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_USART1FCEN                                                 */
  PBCFG_0_XBAR0L_USART1FCEN_DISABLED   = 0,     /*!< DISABLED : Disable USART1 flow control on Crossbar 0.                     */
  PBCFG_0_XBAR0L_USART1FCEN_ENABLED    = 1,     /*!< ENABLED : Enable USART1 flow control on Crossbar 0.                       */
} PBCFG_0_XBAR0L_USART1FCEN_Enum;

/* ============================================  PBCFG_0 XBAR0L USART1CEN [7..7]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_USART1CEN                                                  */
  PBCFG_0_XBAR0L_USART1CEN_DISABLED    = 0,     /*!< DISABLED : Disable USART1 clock on Crossbar 0.                            */
  PBCFG_0_XBAR0L_USART1CEN_ENABLED     = 1,     /*!< ENABLED : Enable USART1 clock on Crossbar 0.                              */
} PBCFG_0_XBAR0L_USART1CEN_Enum;

/* ============================================  PBCFG_0 XBAR0L EPCA0EN [8..10]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_EPCA0EN                                                    */
  PBCFG_0_XBAR0L_EPCA0EN_NONE          = 0,     /*!< NONE : Disable all EPCA0 channels on Crossbar 0.                          */
  PBCFG_0_XBAR0L_EPCA0EN_STD_CEX0      = 1,     /*!< STD_CEX0 : Enable EPCA0 STD_CEX0 on Crossbar 0.                           */
  PBCFG_0_XBAR0L_EPCA0EN_STD_CEX0_1    = 2,     /*!< STD_CEX0_1 : Enable EPCA0 STD_CEX0 and STD_CEX1 on Crossbar
                                                     0.                                                                        */
  PBCFG_0_XBAR0L_EPCA0EN_STD_CEX0_2    = 3,     /*!< STD_CEX0_2 : Enable EPCA0 STD_CEX0, STD_CEX1, and STD_CEX2 on
                                                     Crossbar 0.                                                               */
  PBCFG_0_XBAR0L_EPCA0EN_STD_CEX0_3    = 4,     /*!< STD_CEX0_3 : Enable EPCA0 STD_CEX0, STD_CEX1, STD_CEX2, and
                                                     STD_CEX3 on Crossbar 0.                                                   */
  PBCFG_0_XBAR0L_EPCA0EN_STD_CEX0_4    = 5,     /*!< STD_CEX0_4 : Enable EPCA0 STD_CEX0, STD_CEX1, STD_CEX2, STD_CEX3,
                                                     and STD_CEX4 on Crossbar 0.                                               */
  PBCFG_0_XBAR0L_EPCA0EN_STD_CEX0_5    = 6,     /*!< STD_CEX0_5 : Enable EPCA0 STD_CEX0, STD_CEX1, STD_CEX2, STD_CEX3,
                                                     STD_CEX4, and STD_CEX5 on Crossbar 0.                                     */
} PBCFG_0_XBAR0L_EPCA0EN_Enum;

/* ============================================  PBCFG_0 XBAR0L PCA0EN [14..15]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_PCA0EN                                                     */
  PBCFG_0_XBAR0L_PCA0EN_NONE           = 0,     /*!< NONE : Disable all PCA0 channels on Crossbar 0.                           */
  PBCFG_0_XBAR0L_PCA0EN_CEX0           = 1,     /*!< CEX0 : Enable PCA0 CEX0 on Crossbar 0.                                    */
  PBCFG_0_XBAR0L_PCA0EN_CEX0_1         = 3,     /*!< CEX0_1 : Enable PCA0 CEX0 and CEX1 on Crossbar 0.                         */
} PBCFG_0_XBAR0L_PCA0EN_Enum;

/* ============================================  PBCFG_0 XBAR0L PCA1EN [16..17]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_PCA1EN                                                     */
  PBCFG_0_XBAR0L_PCA1EN_NONE           = 0,     /*!< NONE : Disable all PCA1 channels on Crossbar 0.                           */
  PBCFG_0_XBAR0L_PCA1EN_CEX0           = 1,     /*!< CEX0 : Enable PCA1 CEX0 on Crossbar 0.                                    */
  PBCFG_0_XBAR0L_PCA1EN_CEX0_1         = 3,     /*!< CEX0_1 : Enable PCA1 CEX0 and CEX1 on Crossbar 0.                         */
} PBCFG_0_XBAR0L_PCA1EN_Enum;

/* ============================================  PBCFG_0 XBAR0L EECI0EN [18..18]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_EECI0EN                                                    */
  PBCFG_0_XBAR0L_EECI0EN_DISABLED      = 0,     /*!< DISABLED : Disable EPCA0 ECI on Crossbar 0.                               */
  PBCFG_0_XBAR0L_EECI0EN_ENABLED       = 1,     /*!< ENABLED : Enable EPCA0 ECI on Crossbar 0.                                 */
} PBCFG_0_XBAR0L_EECI0EN_Enum;

/* ============================================  PBCFG_0 XBAR0L ECI0EN [19..19]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_ECI0EN                                                     */
  PBCFG_0_XBAR0L_ECI0EN_DISABLED       = 0,     /*!< DISABLED : Disable PCA0 ECI on Crossbar 0.                                */
  PBCFG_0_XBAR0L_ECI0EN_ENABLED        = 1,     /*!< ENABLED : Enable PCA0 ECI on Crossbar 0.                                  */
} PBCFG_0_XBAR0L_ECI0EN_Enum;

/* ============================================  PBCFG_0 XBAR0L ECI1EN [20..20]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_ECI1EN                                                     */
  PBCFG_0_XBAR0L_ECI1EN_DISABLED       = 0,     /*!< DISABLED : Disable PCA1 ECI on Crossbar 0.                                */
  PBCFG_0_XBAR0L_ECI1EN_ENABLED        = 1,     /*!< ENABLED : Enable PCA1 ECI on Crossbar 0.                                  */
} PBCFG_0_XBAR0L_ECI1EN_Enum;

/* ===========================================  PBCFG_0 XBAR0L I2S0TXEN [21..21]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_I2S0TXEN                                                   */
  PBCFG_0_XBAR0L_I2S0TXEN_DISABLED     = 0,     /*!< DISABLED : Disable I2S0 TX on Crossbar 0.                                 */
  PBCFG_0_XBAR0L_I2S0TXEN_ENABLED      = 1,     /*!< ENABLED : Enable I2S0 TX on Crossbar 0.                                   */
} PBCFG_0_XBAR0L_I2S0TXEN_Enum;

/* ============================================  PBCFG_0 XBAR0L I2C0EN [22..22]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_I2C0EN                                                     */
  PBCFG_0_XBAR0L_I2C0EN_DISABLED       = 0,     /*!< DISABLED : Disable I2C0 SDA and SCL on Crossbar 0.                        */
  PBCFG_0_XBAR0L_I2C0EN_ENABLED        = 1,     /*!< ENABLED : Enable I2C0 SDA and SCL on Crossbar 0.                          */
} PBCFG_0_XBAR0L_I2C0EN_Enum;

/* ============================================  PBCFG_0 XBAR0L CMP0SEN [23..23]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_CMP0SEN                                                    */
  PBCFG_0_XBAR0L_CMP0SEN_DISABLED      = 0,     /*!< DISABLED : Disable Comparator 0 Synchronous Output (CMP0S) on
                                                     Crossbar 0.                                                               */
  PBCFG_0_XBAR0L_CMP0SEN_ENABLED       = 1,     /*!< ENABLED : Enable Comparator 0 Synchronous Output (CMP0S) on
                                                     Crossbar 0.                                                               */
} PBCFG_0_XBAR0L_CMP0SEN_Enum;

/* ============================================  PBCFG_0 XBAR0L CMP0AEN [24..24]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_CMP0AEN                                                    */
  PBCFG_0_XBAR0L_CMP0AEN_DISABLED      = 0,     /*!< DISABLED : Disable Comparator 0 Asynchronous Output (CMP0A)
                                                     on Crossbar 0.                                                            */
  PBCFG_0_XBAR0L_CMP0AEN_ENABLED       = 1,     /*!< ENABLED : Enable Comparator 0 Asynchronous Output (CMP0A) on
                                                     Crossbar 0.                                                               */
} PBCFG_0_XBAR0L_CMP0AEN_Enum;

/* ============================================  PBCFG_0 XBAR0L CMP1SEN [25..25]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_CMP1SEN                                                    */
  PBCFG_0_XBAR0L_CMP1SEN_DISABLED      = 0,     /*!< DISABLED : Disable Comparator 1 Synchronous Output (CMP1S) on
                                                     Crossbar 0.                                                               */
  PBCFG_0_XBAR0L_CMP1SEN_ENABLED       = 1,     /*!< ENABLED : Enable Comparator 1 Synchronous Output (CMP1S) on
                                                     Crossbar 0.                                                               */
} PBCFG_0_XBAR0L_CMP1SEN_Enum;

/* ============================================  PBCFG_0 XBAR0L CMP1AEN [26..26]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_CMP1AEN                                                    */
  PBCFG_0_XBAR0L_CMP1AEN_DISABLED      = 0,     /*!< DISABLED : Disable Comparator 1 Asynchronous Output (CMP1A)
                                                     on Crossbar 0.                                                            */
  PBCFG_0_XBAR0L_CMP1AEN_ENABLED       = 1,     /*!< ENABLED : Enable Comparator 1 Asynchronous Output (CMP1A) on
                                                     Crossbar 0.                                                               */
} PBCFG_0_XBAR0L_CMP1AEN_Enum;

/* ===========================================  PBCFG_0 XBAR0L TMR0CTEN [27..27]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_TMR0CTEN                                                   */
  PBCFG_0_XBAR0L_TMR0CTEN_DISABLED     = 0,     /*!< DISABLED : Disable TIMER0 CT on Crossbar 0.                               */
  PBCFG_0_XBAR0L_TMR0CTEN_ENABLED      = 1,     /*!< ENABLED : Enable TIMER0 CT on Crossbar 0.                                 */
} PBCFG_0_XBAR0L_TMR0CTEN_Enum;

/* ===========================================  PBCFG_0 XBAR0L TMR0EXEN [28..28]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_TMR0EXEN                                                   */
  PBCFG_0_XBAR0L_TMR0EXEN_DISABLED     = 0,     /*!< DISABLED : Disable TIMER0 EX on Crossbar 0.                               */
  PBCFG_0_XBAR0L_TMR0EXEN_ENABLED      = 1,     /*!< ENABLED : Enable TIMER0 EX on Crossbar 0.                                 */
} PBCFG_0_XBAR0L_TMR0EXEN_Enum;

/* ===========================================  PBCFG_0 XBAR0L TMR1CTEN [29..29]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_TMR1CTEN                                                   */
  PBCFG_0_XBAR0L_TMR1CTEN_DISABLED     = 0,     /*!< DISABLED : Disable TIMER1 CT on Crossbar 0.                               */
  PBCFG_0_XBAR0L_TMR1CTEN_ENABLED      = 1,     /*!< ENABLED : Enable TIMER1 CT on Crossbar 0.                                 */
} PBCFG_0_XBAR0L_TMR1CTEN_Enum;

/* ===========================================  PBCFG_0 XBAR0L TMR1EXEN [30..30]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0L_TMR1EXEN                                                   */
  PBCFG_0_XBAR0L_TMR1EXEN_DISABLED     = 0,     /*!< DISABLED : Disable TIMER1 EX on Crossbar 0.                               */
  PBCFG_0_XBAR0L_TMR1EXEN_ENABLED      = 1,     /*!< ENABLED : Enable TIMER1 EX on Crossbar 0.                                 */
} PBCFG_0_XBAR0L_TMR1EXEN_Enum;

/* ======================================================  XBAR0L_SET  ======================================================= */
/* ======================================================  XBAR0L_CLR  ======================================================= */
/* ========================================================  XBAR0H  ========================================================= */
/* =============================================  PBCFG_0 XBAR0H UART0EN [0..0]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_UART0EN                                                    */
  PBCFG_0_XBAR0H_UART0EN_DISABLED      = 0,     /*!< DISABLED : Disable UART0 RX and TX on Crossbar 0.                         */
  PBCFG_0_XBAR0H_UART0EN_ENABLED       = 1,     /*!< ENABLED : Enable UART0 RX and TX on Crossbar 0.                           */
} PBCFG_0_XBAR0H_UART0EN_Enum;

/* ============================================  PBCFG_0 XBAR0H UART0FCEN [1..1]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_UART0FCEN                                                  */
  PBCFG_0_XBAR0H_UART0FCEN_DISABLED    = 0,     /*!< DISABLED : Disable UART0 flow control on Crossbar 0.                      */
  PBCFG_0_XBAR0H_UART0FCEN_ENABLED     = 1,     /*!< ENABLED : Enable UART0 flow control on Crossbar 0.                        */
} PBCFG_0_XBAR0H_UART0FCEN_Enum;

/* =============================================  PBCFG_0 XBAR0H UART1EN [2..2]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_UART1EN                                                    */
  PBCFG_0_XBAR0H_UART1EN_DISABLED      = 0,     /*!< DISABLED : Disable UART1 RX and TX on Crossbar 0.                         */
  PBCFG_0_XBAR0H_UART1EN_ENABLED       = 1,     /*!< ENABLED : Enable UART1 RX and TX on Crossbar 0.                           */
} PBCFG_0_XBAR0H_UART1EN_Enum;

/* =============================================  PBCFG_0 XBAR0H SPI1EN [3..3]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_SPI1EN                                                     */
  PBCFG_0_XBAR0H_SPI1EN_DISABLED       = 0,     /*!< DISABLED : Disable SPI1 SCK, MISO, and MOSI on Crossbar 0.                */
  PBCFG_0_XBAR0H_SPI1EN_ENABLED        = 1,     /*!< ENABLED : Enable SPI1 SCK, MISO, and MOSI on Crossbar 0.                  */
} PBCFG_0_XBAR0H_SPI1EN_Enum;

/* ============================================  PBCFG_0 XBAR0H SPI1NSSEN [4..4]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_SPI1NSSEN                                                  */
  PBCFG_0_XBAR0H_SPI1NSSEN_DISABLED    = 0,     /*!< DISABLED : Disable SPI1 NSS on Crossbar 0.                                */
  PBCFG_0_XBAR0H_SPI1NSSEN_ENABLED     = 1,     /*!< ENABLED : Enable SPI1 NSS on Crossbar 0.                                  */
} PBCFG_0_XBAR0H_SPI1NSSEN_Enum;

/* =============================================  PBCFG_0 XBAR0H SPI2EN [5..5]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_SPI2EN                                                     */
  PBCFG_0_XBAR0H_SPI2EN_DISABLED       = 0,     /*!< DISABLED : Disable SPI2 SCK, MISO, and MOSI on Crossbar 0.                */
  PBCFG_0_XBAR0H_SPI2EN_ENABLED        = 1,     /*!< ENABLED : Enable SPI2 SCK, MISO, and MOSI on Crossbar 0.                  */
} PBCFG_0_XBAR0H_SPI2EN_Enum;

/* ============================================  PBCFG_0 XBAR0H SPI2NSSEN [6..6]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_SPI2NSSEN                                                  */
  PBCFG_0_XBAR0H_SPI2NSSEN_DISABLED    = 0,     /*!< DISABLED : Disable SPI2 NSS on Crossbar 0.                                */
  PBCFG_0_XBAR0H_SPI2NSSEN_ENABLED     = 1,     /*!< ENABLED : Enable SPI2 NSS on Crossbar 0.                                  */
} PBCFG_0_XBAR0H_SPI2NSSEN_Enum;

/* ==============================================  PBCFG_0 XBAR0H AHBEN [7..7]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_AHBEN                                                      */
  PBCFG_0_XBAR0H_AHBEN_DISABLED        = 0,     /*!< DISABLED : Disable the AHB Clock / 16 output on Crossbar 0.               */
  PBCFG_0_XBAR0H_AHBEN_ENABLED         = 1,     /*!< ENABLED : Enable the AHB Clock / 16 output on Crossbar 0.                 */
} PBCFG_0_XBAR0H_AHBEN_Enum;

/* ============================================  PBCFG_0 XBAR0H XBAR0EN [31..31]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR0H_XBAR0EN                                                    */
  PBCFG_0_XBAR0H_XBAR0EN_DISABLED      = 0,     /*!< DISABLED : Disable Crossbar 0.                                            */
  PBCFG_0_XBAR0H_XBAR0EN_ENABLED       = 1,     /*!< ENABLED : Enable Crossbar 0.                                              */
} PBCFG_0_XBAR0H_XBAR0EN_Enum;

/* ======================================================  XBAR0H_SET  ======================================================= */
/* ======================================================  XBAR0H_CLR  ======================================================= */
/* =========================================================  XBAR1  ========================================================= */
/* ==============================================  PBCFG_0 XBAR1 SSG0EN [0..1]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR1_SSG0EN                                                      */
  PBCFG_0_XBAR1_SSG0EN_NONE            = 0,     /*!< NONE : Disable all SSG0 channels on Crossbar 1.                           */
  PBCFG_0_XBAR1_SSG0EN_EX0             = 1,     /*!< EX0 : Enable SSG0 EX0 on Crossbar 1.                                      */
  PBCFG_0_XBAR1_SSG0EN_EX0_1           = 2,     /*!< EX0_1 : Enable SSG0 EX0 and EX1 on Crossbar 1.                            */
  PBCFG_0_XBAR1_SSG0EN_EX0_3           = 3,     /*!< EX0_3 : Enable SSG0 EX0, EX1, EX2, and EX3 on Crossbar 1.                 */
} PBCFG_0_XBAR1_SSG0EN_Enum;

/* =============================================  PBCFG_0 XBAR1 CMP0SEN [2..2]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR1_CMP0SEN                                                     */
  PBCFG_0_XBAR1_CMP0SEN_DISABLED       = 0,     /*!< DISABLED : Disable Comparator 0 Synchronous Output (CMP0S) on
                                                     Crossbar 1.                                                               */
  PBCFG_0_XBAR1_CMP0SEN_ENABLED        = 1,     /*!< ENABLED : Enable Comparator 0 Synchronous Output (CMP0S) on
                                                     Crossbar 1.                                                               */
} PBCFG_0_XBAR1_CMP0SEN_Enum;

/* =============================================  PBCFG_0 XBAR1 CMP1SEN [3..3]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR1_CMP1SEN                                                     */
  PBCFG_0_XBAR1_CMP1SEN_DISABLED       = 0,     /*!< DISABLED : Disable Comparator 1 Synchronous Output (CMP1S) on
                                                     Crossbar 1.                                                               */
  PBCFG_0_XBAR1_CMP1SEN_ENABLED        = 1,     /*!< ENABLED : Enable Comparator 1 Synchronous Output (CMP1S) on
                                                     Crossbar 1.                                                               */
} PBCFG_0_XBAR1_CMP1SEN_Enum;

/* ==============================================  PBCFG_0 XBAR1 SPI1EN [4..4]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR1_SPI1EN                                                      */
  PBCFG_0_XBAR1_SPI1EN_DISABLED        = 0,     /*!< DISABLED : Disable SPI1 SCK, MISO, and MOSI on Crossbar 1.                */
  PBCFG_0_XBAR1_SPI1EN_ENABLED         = 1,     /*!< ENABLED : Enable SPI1 SCK, MISO, and MOSI on Crossbar 1.                  */
} PBCFG_0_XBAR1_SPI1EN_Enum;

/* ============================================  PBCFG_0 XBAR1 SPI1NSSEN [5..5]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_SPI1NSSEN                                                   */
  PBCFG_0_XBAR1_SPI1NSSEN_DISABLED     = 0,     /*!< DISABLED : Disable SPI1 NSS on Crossbar 1.                                */
  PBCFG_0_XBAR1_SPI1NSSEN_ENABLED      = 1,     /*!< ENABLED : Enable SPI1 NSS on Crossbar 1.                                  */
} PBCFG_0_XBAR1_SPI1NSSEN_Enum;

/* ==============================================  PBCFG_0 XBAR1 RTC0EN [6..6]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR1_RTC0EN                                                      */
  PBCFG_0_XBAR1_RTC0EN_DISABLED        = 0,     /*!< DISABLED : Disable RTC0 Output on Crossbar 1.                             */
  PBCFG_0_XBAR1_RTC0EN_ENABLED         = 1,     /*!< ENABLED : Enable RTC0 Output on Crossbar 1.                               */
} PBCFG_0_XBAR1_RTC0EN_Enum;

/* ==============================================  PBCFG_0 XBAR1 SPI2EN [7..7]  ============================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR1_SPI2EN                                                      */
  PBCFG_0_XBAR1_SPI2EN_DISABLED        = 0,     /*!< DISABLED : Disable SPI2 SCK, MISO, and MOSI on Crossbar 1.                */
  PBCFG_0_XBAR1_SPI2EN_ENABLED         = 1,     /*!< ENABLED : Enable SPI2 SCK, MISO, and MOSI on Crossbar 1.                  */
} PBCFG_0_XBAR1_SPI2EN_Enum;

/* ============================================  PBCFG_0 XBAR1 SPI2NSSEN [8..8]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_SPI2NSSEN                                                   */
  PBCFG_0_XBAR1_SPI2NSSEN_DISABLED     = 0,     /*!< DISABLED : Disable SPI2 NSS on Crossbar 1.                                */
  PBCFG_0_XBAR1_SPI2NSSEN_ENABLED      = 1,     /*!< ENABLED : Enable SPI2 NSS on Crossbar 1.                                  */
} PBCFG_0_XBAR1_SPI2NSSEN_Enum;

/* =============================================  PBCFG_0 XBAR1 USART1EN [9..9]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_USART1EN                                                    */
  PBCFG_0_XBAR1_USART1EN_DISABLED      = 0,     /*!< DISABLED : Disable USART1 RX and TX on Crossbar 1.                        */
  PBCFG_0_XBAR1_USART1EN_ENABLED       = 1,     /*!< ENABLED : Enable USART1 RX and TX on Crossbar 1.                          */
} PBCFG_0_XBAR1_USART1EN_Enum;

/* ===========================================  PBCFG_0 XBAR1 USART1FCEN [10..10]  =========================================== */
typedef enum {                                  /*!< PBCFG_0_XBAR1_USART1FCEN                                                  */
  PBCFG_0_XBAR1_USART1FCEN_DISABLED    = 0,     /*!< DISABLED : Disable USART1 flow control on Crossbar 1.                     */
  PBCFG_0_XBAR1_USART1FCEN_ENABLED     = 1,     /*!< ENABLED : Enable USART1 flow control on Crossbar 1.                       */
} PBCFG_0_XBAR1_USART1FCEN_Enum;

/* ===========================================  PBCFG_0 XBAR1 USART1CEN [11..11]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR1_USART1CEN                                                   */
  PBCFG_0_XBAR1_USART1CEN_DISABLED     = 0,     /*!< DISABLED : Disable USART1 clock on Crossbar 1.                            */
  PBCFG_0_XBAR1_USART1CEN_ENABLED      = 1,     /*!< ENABLED : Enable USART1 clock on Crossbar 1.                              */
} PBCFG_0_XBAR1_USART1CEN_Enum;

/* ============================================  PBCFG_0 XBAR1 UART0EN [12..12]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_UART0EN                                                     */
  PBCFG_0_XBAR1_UART0EN_DISABLED       = 0,     /*!< DISABLED : Disable UART0 RX and TX on Crossbar 1.                         */
  PBCFG_0_XBAR1_UART0EN_ENABLED        = 1,     /*!< ENABLED : Enable UART0 RX and TX on Crossbar 1.                           */
} PBCFG_0_XBAR1_UART0EN_Enum;

/* ===========================================  PBCFG_0 XBAR1 UART0FCEN [13..13]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR1_UART0FCEN                                                   */
  PBCFG_0_XBAR1_UART0FCEN_DISABLED     = 0,     /*!< DISABLED : Disable UART0 flow control on Crossbar 1.                      */
  PBCFG_0_XBAR1_UART0FCEN_ENABLED      = 1,     /*!< ENABLED : Enable UART0 flow control on Crossbar1.                         */
} PBCFG_0_XBAR1_UART0FCEN_Enum;

/* ============================================  PBCFG_0 XBAR1 I2S0TXEN [14..14]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR1_I2S0TXEN                                                    */
  PBCFG_0_XBAR1_I2S0TXEN_DISABLED      = 0,     /*!< DISABLED : Disable I2S0 TX on Crossbar 1.                                 */
  PBCFG_0_XBAR1_I2S0TXEN_ENABLED       = 1,     /*!< ENABLED : Enable I2S0 TX on Crossbar 1.                                   */
} PBCFG_0_XBAR1_I2S0TXEN_Enum;

/* =============================================  PBCFG_0 XBAR1 I2C0EN [15..15]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_I2C0EN                                                      */
  PBCFG_0_XBAR1_I2C0EN_DISABLED        = 0,     /*!< DISABLED : Disable I2C0 SDA and SCL on Crossbar 1.                        */
  PBCFG_0_XBAR1_I2C0EN_ENABLED         = 1,     /*!< ENABLED : Enable I2C0 SDA and SCL on Crossbar 1.                          */
} PBCFG_0_XBAR1_I2C0EN_Enum;

/* ============================================  PBCFG_0 XBAR1 UART1EN [16..16]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_UART1EN                                                     */
  PBCFG_0_XBAR1_UART1EN_DISABLED       = 0,     /*!< DISABLED : Disable UART1 RX and TX on Crossbar 1.                         */
  PBCFG_0_XBAR1_UART1EN_ENABLED        = 1,     /*!< ENABLED : Enable UART1 RX and TX on Crossbar 1.                           */
} PBCFG_0_XBAR1_UART1EN_Enum;

/* ============================================  PBCFG_0 XBAR1 I2S0RXEN [17..17]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR1_I2S0RXEN                                                    */
  PBCFG_0_XBAR1_I2S0RXEN_DISABLED      = 0,     /*!< DISABLED : Disable I2S0 RX on Crossbar 1.                                 */
  PBCFG_0_XBAR1_I2S0RXEN_ENABLED       = 1,     /*!< ENABLED : Enable I2S0 RX on Crossbar 1.                                   */
} PBCFG_0_XBAR1_I2S0RXEN_Enum;

/* ============================================  PBCFG_0 XBAR1 LPT0OEN [19..19]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_LPT0OEN                                                     */
  PBCFG_0_XBAR1_LPT0OEN_DISABLED       = 0,     /*!< DISABLED : Disable LPTIMER0 Output on Crossbar 1.                         */
  PBCFG_0_XBAR1_LPT0OEN_ENABLED        = 1,     /*!< ENABLED : Enable LPTIMER0 Output on Crossbar 1.                           */
} PBCFG_0_XBAR1_LPT0OEN_Enum;

/* =============================================  PBCFG_0 XBAR1 I2C1EN [20..20]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_I2C1EN                                                      */
  PBCFG_0_XBAR1_I2C1EN_DISABLED        = 0,     /*!< DISABLED : Disable I2C1 SDA and SCL on Crossbar 1.                        */
  PBCFG_0_XBAR1_I2C1EN_ENABLED         = 1,     /*!< ENABLED : Enable I2C1 SDA and SCL on Crossbar 1.                          */
} PBCFG_0_XBAR1_I2C1EN_Enum;

/* ============================================  PBCFG_0 XBAR1 KILLHDEN [21..21]  ============================================ */
typedef enum {                                  /*!< PBCFG_0_XBAR1_KILLHDEN                                                    */
  PBCFG_0_XBAR1_KILLHDEN_DISABLED      = 0,     /*!< DISABLED : Disable the PB High Drive Kill Pin on Crossbar 1.              */
  PBCFG_0_XBAR1_KILLHDEN_ENABLED       = 1,     /*!< ENABLED : Enable the PB High Drive Kill Pin on Crossbar 1.                */
} PBCFG_0_XBAR1_KILLHDEN_Enum;

/* ============================================  PBCFG_0 XBAR1 XBAR1EN [31..31]  ============================================= */
typedef enum {                                  /*!< PBCFG_0_XBAR1_XBAR1EN                                                     */
  PBCFG_0_XBAR1_XBAR1EN_DISABLED       = 0,     /*!< DISABLED : Disable Crossbar 1.                                            */
  PBCFG_0_XBAR1_XBAR1EN_ENABLED        = 1,     /*!< ENABLED : Enable Crossbar 1.                                              */
} PBCFG_0_XBAR1_XBAR1EN_Enum;

/* =======================================================  XBAR1_SET  ======================================================= */
/* =======================================================  XBAR1_CLR  ======================================================= */
/* =========================================================  PBKEY  ========================================================= */
/* ===============================================  PBCFG_0 PBKEY KEY [0..7]  ================================================ */
typedef enum {                                  /*!< PBCFG_0_PBKEY_KEY                                                         */
  PBCFG_0_PBKEY_KEY_LOCKED             = 0,     /*!< LOCKED : Port Bank 2, 3, and 4 registers are locked and no valid
                                                     values have been written to PBKEY.                                        */
  PBCFG_0_PBKEY_KEY_INTERMEDIATE       = 1,     /*!< INTERMEDIATE : Port Bank 2, 3, and 4 registers are locked and
                                                     the first valid value (0xA5) has been written to PBKEY.                   */
  PBCFG_0_PBKEY_KEY_UNLOCKED           = 2,     /*!< UNLOCKED : Port Bank 2, 3, and 4 registers are unlocked. Any
                                                     subsequent writes to the Port Bank 2, 3, or 4 registers
                                                     or PBKEY will lock the interface.                                         */
} PBCFG_0_PBKEY_KEY_Enum;



/* =========================================================================================================================== */
/* ================                                          PBHD_4                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  PB  =========================================================== */
/* =========================================================  PBPIN  ========================================================= */
/* ========================================================  PBMDSEL  ======================================================== */
/* =========================================================  PBDEN  ========================================================= */
/* =========================================================  PBDRV  ========================================================= */
/* =============================================  PBHD_4 PBDRV PBPUEN [16..16]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBDRV_PBPUEN                                                       */
  PBHD_4_PBDRV_PBPUEN_DISABLED         = 0,     /*!< DISABLED : Disable weak pull-ups for this port.                           */
  PBHD_4_PBDRV_PBPUEN_ENABLED          = 1,     /*!< ENABLED : Enable weak pull-ups for this port.                             */
} PBHD_4_PBDRV_PBPUEN_Enum;

/* =============================================  PBHD_4 PBDRV PBLVMD [17..17]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBDRV_PBLVMD                                                       */
  PBHD_4_PBDRV_PBLVMD_NORMAL           = 0,     /*!< NORMAL : Port configured for normal mode.                                 */
  PBHD_4_PBDRV_PBLVMD_LOW              = 1,     /*!< LOW : Port configured for low power mode.                                 */
} PBHD_4_PBDRV_PBLVMD_Enum;

/* =============================================  PBHD_4 PBDRV PBSLEW [18..19]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBDRV_PBSLEW                                                       */
  PBHD_4_PBDRV_PBSLEW_FASTEST          = 0,     /*!< FASTEST : Select the fastest transition speed for this port
                                                     bank.                                                                     */
  PBHD_4_PBDRV_PBSLEW_FASTER           = 1,     /*!< FASTER : Select the faster transition speed for this port bank.           */
  PBHD_4_PBDRV_PBSLEW_SLOWER           = 2,     /*!< SLOWER : Select the slower transition speed for this port bank.           */
  PBHD_4_PBDRV_PBSLEW_SLOWEST          = 3,     /*!< SLOWEST : Select the slowest transition speed for this port
                                                     bank.                                                                     */
} PBHD_4_PBDRV_PBSLEW_Enum;

/* ============================================  PBHD_4 PBDRV PBBIASEN [21..21]  ============================================= */
typedef enum {                                  /*!< PBHD_4_PBDRV_PBBIASEN                                                     */
  PBHD_4_PBDRV_PBBIASEN_DISABLED       = 0,     /*!< DISABLED : Disable the biasing to the port pins.                          */
  PBHD_4_PBDRV_PBBIASEN_ENABLED        = 1,     /*!< ENABLED : Enable the biasing to the port pins.                            */
} PBHD_4_PBDRV_PBBIASEN_Enum;

/* =============================================  PBHD_4 PBDRV PBDRVEN [22..22]  ============================================= */
typedef enum {                                  /*!< PBHD_4_PBDRV_PBDRVEN                                                      */
  PBHD_4_PBDRV_PBDRVEN_DISABLED        = 0,     /*!< DISABLED : Disable the port drivers.                                      */
  PBHD_4_PBDRV_PBDRVEN_ENABLED         = 1,     /*!< ENABLED : Enable the port drivers.                                        */
} PBHD_4_PBDRV_PBDRVEN_Enum;

/* ============================================  PBHD_4 PBDRV PBVTRKEN [23..23]  ============================================= */
typedef enum {                                  /*!< PBHD_4_PBDRV_PBVTRKEN                                                     */
  PBHD_4_PBDRV_PBVTRKEN_DISABLED       = 0,     /*!< DISABLED : Disable VIOHD tracking.                                        */
  PBHD_4_PBDRV_PBVTRKEN_ENABLED        = 1,     /*!< ENABLED : Enable VIOHD tracking.                                          */
} PBHD_4_PBDRV_PBVTRKEN_Enum;

/* =======================================================  PBILIMIT  ======================================================== */
/* ===========================================  PBHD_4 PBILIMIT NILIMIT [16..19]  ============================================ */
typedef enum {                                  /*!< PBHD_4_PBILIMIT_NILIMIT                                                   */
  PBHD_4_PBILIMIT_NILIMIT_MODE0        = 0,     /*!< MODE0 : Set sink limit to mode 0.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE1        = 1,     /*!< MODE1 : Set sink limit to mode 1.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE2        = 2,     /*!< MODE2 : Set sink limit to mode 2.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE3        = 3,     /*!< MODE3 : Set sink limit to mode 3.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE4        = 4,     /*!< MODE4 : Set sink limit to mode 4.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE5        = 5,     /*!< MODE5 : Set sink limit to mode 5.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE6        = 6,     /*!< MODE6 : Set sink limit to mode 6.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE7        = 7,     /*!< MODE7 : Set sink limit to mode 7.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE8        = 8,     /*!< MODE8 : Set sink limit to mode 8.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE9        = 9,     /*!< MODE9 : Set sink limit to mode 9.                                         */
  PBHD_4_PBILIMIT_NILIMIT_MODE10       = 10,    /*!< MODE10 : Set sink limit to mode 10.                                       */
  PBHD_4_PBILIMIT_NILIMIT_MODE11       = 11,    /*!< MODE11 : Set sink limit to mode 11.                                       */
  PBHD_4_PBILIMIT_NILIMIT_MODE12       = 12,    /*!< MODE12 : Set sink limit to mode 12.                                       */
  PBHD_4_PBILIMIT_NILIMIT_MODE13       = 13,    /*!< MODE13 : Set sink limit to mode 13.                                       */
  PBHD_4_PBILIMIT_NILIMIT_MODE14       = 14,    /*!< MODE14 : Set sink limit to mode 14.                                       */
  PBHD_4_PBILIMIT_NILIMIT_MODE15       = 15,    /*!< MODE15 : Set sink limit to mode 15.                                       */
} PBHD_4_PBILIMIT_NILIMIT_Enum;

/* ===========================================  PBHD_4 PBILIMIT PILIMIT [20..23]  ============================================ */
typedef enum {                                  /*!< PBHD_4_PBILIMIT_PILIMIT                                                   */
  PBHD_4_PBILIMIT_PILIMIT_MODE0        = 0,     /*!< MODE0 : Set source limit to mode 0.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE1        = 1,     /*!< MODE1 : Set source limit to mode 1.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE2        = 2,     /*!< MODE2 : Set source limit to mode 2.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE3        = 3,     /*!< MODE3 : Set source limit to mode 3.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE4        = 4,     /*!< MODE4 : Set source limit to mode 4.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE5        = 5,     /*!< MODE5 : Set source limit to mode 5.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE6        = 6,     /*!< MODE6 : Set source limit to mode 6.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE7        = 7,     /*!< MODE7 : Set source limit to mode 7.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE8        = 8,     /*!< MODE8 : Set source limit to mode 8.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE9        = 9,     /*!< MODE9 : Set source limit to mode 9.                                       */
  PBHD_4_PBILIMIT_PILIMIT_MODE10       = 10,    /*!< MODE10 : Set source limit to mode 10.                                     */
  PBHD_4_PBILIMIT_PILIMIT_MODE11       = 11,    /*!< MODE11 : Set source limit to mode 11.                                     */
  PBHD_4_PBILIMIT_PILIMIT_MODE12       = 12,    /*!< MODE12 : Set source limit to mode 12.                                     */
  PBHD_4_PBILIMIT_PILIMIT_MODE13       = 13,    /*!< MODE13 : Set source limit to mode 13.                                     */
  PBHD_4_PBILIMIT_PILIMIT_MODE14       = 14,    /*!< MODE14 : Set source limit to mode 14.                                     */
  PBHD_4_PBILIMIT_PILIMIT_MODE15       = 15,    /*!< MODE15 : Set source limit to mode 15.                                     */
} PBHD_4_PBILIMIT_PILIMIT_Enum;

/* ========================================================  PBFSEL  ========================================================= */
/* ==============================================  PBHD_4 PBFSEL PB0SEL [0..1]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBFSEL_PB0SEL                                                      */
  PBHD_4_PBFSEL_PB0SEL_GPIO            = 0,     /*!< GPIO : Pin configured for GPIO.                                           */
  PBHD_4_PBFSEL_PB0SEL_PMLS            = 1,     /*!< PMLS : Pin configured for Port Mapped Level Shift.                        */
  PBHD_4_PBFSEL_PB0SEL_EPCA0           = 2,     /*!< EPCA0 : Pin configured for EPCA0 output.                                  */
} PBHD_4_PBFSEL_PB0SEL_Enum;

/* ==============================================  PBHD_4 PBFSEL PB1SEL [2..3]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBFSEL_PB1SEL                                                      */
  PBHD_4_PBFSEL_PB1SEL_GPIO            = 0,     /*!< GPIO : Pin configured for GPIO.                                           */
  PBHD_4_PBFSEL_PB1SEL_PMLS            = 1,     /*!< PMLS : Pin configured for Port Mapped Level Shift.                        */
  PBHD_4_PBFSEL_PB1SEL_EPCA0           = 2,     /*!< EPCA0 : Pin configured for EPCA0 output.                                  */
} PBHD_4_PBFSEL_PB1SEL_Enum;

/* ==============================================  PBHD_4 PBFSEL PB2SEL [4..5]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBFSEL_PB2SEL                                                      */
  PBHD_4_PBFSEL_PB2SEL_GPIO            = 0,     /*!< GPIO : Pin configured for GPIO.                                           */
  PBHD_4_PBFSEL_PB2SEL_PMLS            = 1,     /*!< PMLS : Pin configured for Port Mapped Level Shift.                        */
  PBHD_4_PBFSEL_PB2SEL_EPCA0           = 2,     /*!< EPCA0 : Pin configured for EPCA0 output.                                  */
  PBHD_4_PBFSEL_PB2SEL_UART1           = 3,     /*!< UART1 : Pin configured for UART1 TX.                                      */
} PBHD_4_PBFSEL_PB2SEL_Enum;

/* ==============================================  PBHD_4 PBFSEL PB3SEL [6..7]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBFSEL_PB3SEL                                                      */
  PBHD_4_PBFSEL_PB3SEL_GPIO            = 0,     /*!< GPIO : Pin configured for GPIO.                                           */
  PBHD_4_PBFSEL_PB3SEL_PMLS            = 1,     /*!< PMLS : Pin configured for Port Mapped Level Shift.                        */
  PBHD_4_PBFSEL_PB3SEL_EPCA0           = 2,     /*!< EPCA0 : Pin configured for EPCA0 output.                                  */
  PBHD_4_PBFSEL_PB3SEL_UART1           = 3,     /*!< UART1 : Pin configured for UART1 RX.                                      */
} PBHD_4_PBFSEL_PB3SEL_Enum;

/* ==============================================  PBHD_4 PBFSEL PB4SEL [8..9]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBFSEL_PB4SEL                                                      */
  PBHD_4_PBFSEL_PB4SEL_GPIO            = 0,     /*!< GPIO : Pin configured for GPIO.                                           */
  PBHD_4_PBFSEL_PB4SEL_PMLS            = 1,     /*!< PMLS : Pin configured for Port Mapped Level Shift.                        */
  PBHD_4_PBFSEL_PB4SEL_EPCA0           = 2,     /*!< EPCA0 : Pin configured for EPCA0 output.                                  */
  PBHD_4_PBFSEL_PB4SEL_UART1           = 3,     /*!< UART1 : Pin configured for UART1 RTS.                                     */
} PBHD_4_PBFSEL_PB4SEL_Enum;

/* =============================================  PBHD_4 PBFSEL PB5SEL [10..12]  ============================================= */
typedef enum {                                  /*!< PBHD_4_PBFSEL_PB5SEL                                                      */
  PBHD_4_PBFSEL_PB5SEL_GPIO            = 0,     /*!< GPIO : Pin configured for GPIO.                                           */
  PBHD_4_PBFSEL_PB5SEL_PMLS            = 1,     /*!< PMLS : Pin configured for Port Mapped Level Shift.                        */
  PBHD_4_PBFSEL_PB5SEL_EPCA0           = 2,     /*!< EPCA0 : Pin configured for EPCA0 output.                                  */
  PBHD_4_PBFSEL_PB5SEL_UART1           = 3,     /*!< UART1 : Pin configured for UART1 CTS.                                     */
  PBHD_4_PBFSEL_PB5SEL_LPTIMER0        = 4,     /*!< LPTIMER0 : Pin configured for LPTIMER0 toggle output.                     */
} PBHD_4_PBFSEL_PB5SEL_Enum;

/* =========================================================  PBSS  ========================================================== */
/* ==============================================  PBHD_4 PBSS PB0SSSEL [0..1]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBSS_PB0SSSEL                                                      */
  PBHD_4_PBSS_PB0SSSEL_HIZ             = 0,     /*!< HIZ : Place PBn.0 in a High Impedance state.                              */
  PBHD_4_PBSS_PB0SSSEL_HIGH            = 1,     /*!< HIGH : Drive PBn.0 High.                                                  */
  PBHD_4_PBSS_PB0SSSEL_LOW             = 2,     /*!< LOW : Drive PBn.0 Low.                                                    */
  PBHD_4_PBSS_PB0SSSEL_DISABLED        = 3,     /*!< DISABLED : Ignore the safe state signal (weak pull-ups disabled).         */
} PBHD_4_PBSS_PB0SSSEL_Enum;

/* ==============================================  PBHD_4 PBSS PB1SSSEL [2..3]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBSS_PB1SSSEL                                                      */
  PBHD_4_PBSS_PB1SSSEL_HIZ             = 0,     /*!< HIZ : Place PBn.1 in a High Impedance state.                              */
  PBHD_4_PBSS_PB1SSSEL_HIGH            = 1,     /*!< HIGH : Drive PBn.1 High.                                                  */
  PBHD_4_PBSS_PB1SSSEL_LOW             = 2,     /*!< LOW : Drive PBn.1 Low.                                                    */
  PBHD_4_PBSS_PB1SSSEL_DISABLED        = 3,     /*!< DISABLED : Ignore the safe state signal (weak pull-ups disabled).         */
} PBHD_4_PBSS_PB1SSSEL_Enum;

/* ==============================================  PBHD_4 PBSS PB2SSSEL [4..5]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBSS_PB2SSSEL                                                      */
  PBHD_4_PBSS_PB2SSSEL_HIZ             = 0,     /*!< HIZ : Place PBn.2 in a High Impedance state.                              */
  PBHD_4_PBSS_PB2SSSEL_HIGH            = 1,     /*!< HIGH : Drive PBn.2 High.                                                  */
  PBHD_4_PBSS_PB2SSSEL_LOW             = 2,     /*!< LOW : Drive PBn.2 Low.                                                    */
  PBHD_4_PBSS_PB2SSSEL_DISABLED        = 3,     /*!< DISABLED : Ignore the safe state signal (weak pull-ups disabled).         */
} PBHD_4_PBSS_PB2SSSEL_Enum;

/* ==============================================  PBHD_4 PBSS PB3SSSEL [6..7]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBSS_PB3SSSEL                                                      */
  PBHD_4_PBSS_PB3SSSEL_HIZ             = 0,     /*!< HIZ : Place PBn.3 in a High Impedance state.                              */
  PBHD_4_PBSS_PB3SSSEL_HIGH            = 1,     /*!< HIGH : Drive PBn.3 High.                                                  */
  PBHD_4_PBSS_PB3SSSEL_LOW             = 2,     /*!< LOW : Drive PBn.3 Low.                                                    */
  PBHD_4_PBSS_PB3SSSEL_DISABLED        = 3,     /*!< DISABLED : Ignore the safe state signal (weak pull-ups disabled).         */
} PBHD_4_PBSS_PB3SSSEL_Enum;

/* ==============================================  PBHD_4 PBSS PB4SSSEL [8..9]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBSS_PB4SSSEL                                                      */
  PBHD_4_PBSS_PB4SSSEL_HIZ             = 0,     /*!< HIZ : Place PBn.4 in a High Impedance state.                              */
  PBHD_4_PBSS_PB4SSSEL_HIGH            = 1,     /*!< HIGH : Drive PBn.4 High.                                                  */
  PBHD_4_PBSS_PB4SSSEL_LOW             = 2,     /*!< LOW : Drive PBn.4 Low.                                                    */
  PBHD_4_PBSS_PB4SSSEL_DISABLED        = 3,     /*!< DISABLED : Ignore the safe state signal (weak pull-ups disabled).         */
} PBHD_4_PBSS_PB4SSSEL_Enum;

/* =============================================  PBHD_4 PBSS PB5SSSEL [10..11]  ============================================= */
typedef enum {                                  /*!< PBHD_4_PBSS_PB5SSSEL                                                      */
  PBHD_4_PBSS_PB5SSSEL_HIZ             = 0,     /*!< HIZ : Place PBn.5 in a High Impedance state.                              */
  PBHD_4_PBSS_PB5SSSEL_HIGH            = 1,     /*!< HIGH : Drive PBn.5 High.                                                  */
  PBHD_4_PBSS_PB5SSSEL_LOW             = 2,     /*!< LOW : Drive PBn.5 Low.                                                    */
  PBHD_4_PBSS_PB5SSSEL_DISABLED        = 3,     /*!< DISABLED : Ignore the safe state signal (weak pull-ups disabled).         */
} PBHD_4_PBSS_PB5SSSEL_Enum;

/* ==============================================  PBHD_4 PBSS SSMDEN [16..16]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBSS_SSMDEN                                                        */
  PBHD_4_PBSS_SSMDEN_DISABLED          = 0,     /*!< DISABLED : Disable Safe State.                                            */
  PBHD_4_PBSS_SSMDEN_ENABLED           = 1,     /*!< ENABLED : Enter Safe State. Each PBn.x pin will enter the states
                                                     defined by PBxSSSEL.                                                      */
} PBHD_4_PBSS_SSMDEN_Enum;

/* =============================================  PBHD_4 PBSS PBSSSMD [17..17]  ============================================== */
typedef enum {                                  /*!< PBHD_4_PBSS_PBSSSMD                                                       */
  PBHD_4_PBSS_PBSSSMD_DEGLITCH         = 0,     /*!< DEGLITCH : Enable deglitching on the kill signal input. The
                                                     kill signal must be asserted for two APB clocks to be recognized.         */
  PBHD_4_PBSS_PBSSSMD_IMMEDIATE        = 1,     /*!< IMMEDIATE : Disable deglitching on the kill signal input. The
                                                     kill signal will take immediate effect.                                   */
} PBHD_4_PBSS_PBSSSMD_Enum;

/* ========================================================  PBLOCK  ========================================================= */


/* =========================================================================================================================== */
/* ================                                          PBSTD_0                                          ================ */
/* =========================================================================================================================== */

/* ==========================================================  PB  =========================================================== */
/* ========================================================  PB_SET  ========================================================= */
/* ========================================================  PB_CLR  ========================================================= */
/* ========================================================  PB_MSK  ========================================================= */
/* =========================================================  PBPIN  ========================================================= */
/* ========================================================  PBMDSEL  ======================================================== */
/* ======================================================  PBMDSEL_SET  ====================================================== */
/* ======================================================  PBMDSEL_CLR  ====================================================== */
/* =======================================================  PBSKIPEN  ======================================================== */
/* =====================================================  PBSKIPEN_SET  ====================================================== */
/* =====================================================  PBSKIPEN_CLR  ====================================================== */
/* ========================================================  PBOUTMD  ======================================================== */
/* ======================================================  PBOUTMD_SET  ====================================================== */
/* ======================================================  PBOUTMD_CLR  ====================================================== */
/* =========================================================  PBDRV  ========================================================= */
/* =============================================  PBSTD_0 PBDRV PBPUEN [16..16]  ============================================= */
typedef enum {                                  /*!< PBSTD_0_PBDRV_PBPUEN                                                      */
  PBSTD_0_PBDRV_PBPUEN_DISABLED        = 0,     /*!< DISABLED : Disable weak pull-ups for this port.                           */
  PBSTD_0_PBDRV_PBPUEN_ENABLED         = 1,     /*!< ENABLED : Enable weak pull-ups for this port.                             */
} PBSTD_0_PBDRV_PBPUEN_Enum;

/* =======================================================  PBDRV_SET  ======================================================= */
/* =======================================================  PBDRV_CLR  ======================================================= */
/* ==========================================================  PM  =========================================================== */
/* ========================================================  PM_SET  ========================================================= */
/* ========================================================  PM_CLR  ========================================================= */
/* =========================================================  PMEN  ========================================================== */
/* =======================================================  PMEN_SET  ======================================================== */
/* =======================================================  PMEN_CLR  ======================================================== */
/* ========================================================  PBLOCK  ========================================================= */
/* ========================================================  PBPGEN  ========================================================= */
/* =======================================================  PBPGPHASE  ======================================================= */


/* =========================================================================================================================== */
/* ================                                           RTC_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  RTC_0 CONFIG ALM0AREN [0..0]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_ALM0AREN                                                     */
  RTC_0_CONFIG_ALM0AREN_DISABLED       = 0,     /*!< DISABLED : Disable the Alarm 0 automatic reset.                           */
  RTC_0_CONFIG_ALM0AREN_ENABLED        = 1,     /*!< ENABLED : Enable the Alarm 0 automatic reset.                             */
} RTC_0_CONFIG_ALM0AREN_Enum;

/* ================================================  RTC_0 CONFIG RUN [1..1]  ================================================ */
typedef enum {                                  /*!< RTC_0_CONFIG_RUN                                                          */
  RTC_0_CONFIG_RUN_STOP                = 0,     /*!< STOP : Stop the RTC timer.                                                */
  RTC_0_CONFIG_RUN_START               = 1,     /*!< START : Start the RTC timer running.                                      */
} RTC_0_CONFIG_RUN_Enum;

/* ==============================================  RTC_0 CONFIG MCLKEN [2..2]  =============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_MCLKEN                                                       */
  RTC_0_CONFIG_MCLKEN_DISABLED         = 0,     /*!< DISABLED : Disable the missing clock detector.                            */
  RTC_0_CONFIG_MCLKEN_ENABLED          = 1,     /*!< ENABLED : Enable the missing clock detector. If the missing
                                                     clock detector triggers, it will generate an RTC Fail event.              */
} RTC_0_CONFIG_MCLKEN_Enum;

/* ===============================================  RTC_0 CONFIG ASEN [3..3]  ================================================ */
typedef enum {                                  /*!< RTC_0_CONFIG_ASEN                                                         */
  RTC_0_CONFIG_ASEN_DISABLED           = 0,     /*!< DISABLED : Disable automatic load capacitance stepping.                   */
  RTC_0_CONFIG_ASEN_ENABLED            = 1,     /*!< ENABLED : Enable automatic load capacitance stepping.                     */
} RTC_0_CONFIG_ASEN_Enum;

/* ==============================================  RTC_0 CONFIG BDEN [16..16]  =============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_BDEN                                                         */
  RTC_0_CONFIG_BDEN_DISABLED           = 0,     /*!< DISABLED : Disable the bias doubler, saving power.                        */
  RTC_0_CONFIG_BDEN_ENABLED            = 1,     /*!< ENABLED : Enable the bias doubler, allowing for faster oscillator
                                                     start up time.                                                            */
} RTC_0_CONFIG_BDEN_Enum;

/* =============================================  RTC_0 CONFIG CRYSEN [17..17]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_CRYSEN                                                       */
  RTC_0_CONFIG_CRYSEN_DISABLED         = 0,     /*!< DISABLED : Disable the crystal oscillator circuitry.                      */
  RTC_0_CONFIG_CRYSEN_ENABLED          = 1,     /*!< ENABLED : Enable the crystal oscillator circuitry.                        */
} RTC_0_CONFIG_CRYSEN_Enum;

/* ==============================================  RTC_0 CONFIG AGCEN [18..18]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_AGCEN                                                        */
  RTC_0_CONFIG_AGCEN_DISABLED          = 0,     /*!< DISABLED : Disable automatic gain control.                                */
  RTC_0_CONFIG_AGCEN_ENABLED           = 1,     /*!< ENABLED : Enable automatic gain control, saving power.                    */
} RTC_0_CONFIG_AGCEN_Enum;

/* =============================================  RTC_0 CONFIG ALM0EN [24..24]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_ALM0EN                                                       */
  RTC_0_CONFIG_ALM0EN_DISABLED         = 0,     /*!< DISABLED : Disable RTC Alarm 0.                                           */
  RTC_0_CONFIG_ALM0EN_ENABLED          = 1,     /*!< ENABLED : Enable RTC Alarm 0.                                             */
} RTC_0_CONFIG_ALM0EN_Enum;

/* =============================================  RTC_0 CONFIG ALM1EN [25..25]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_ALM1EN                                                       */
  RTC_0_CONFIG_ALM1EN_DISABLED         = 0,     /*!< DISABLED : Disable RTC Alarm 1.                                           */
  RTC_0_CONFIG_ALM1EN_ENABLED          = 1,     /*!< ENABLED : Enable RTC Alarm 1.                                             */
} RTC_0_CONFIG_ALM1EN_Enum;

/* =============================================  RTC_0 CONFIG ALM2EN [26..26]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_ALM2EN                                                       */
  RTC_0_CONFIG_ALM2EN_DISABLED         = 0,     /*!< DISABLED : Disable RTC Alarm 2.                                           */
  RTC_0_CONFIG_ALM2EN_ENABLED          = 1,     /*!< ENABLED : Enable RTC Alarm 2.                                             */
} RTC_0_CONFIG_ALM2EN_Enum;

/* =============================================  RTC_0 CONFIG RTCOEN [29..29]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_RTCOEN                                                       */
  RTC_0_CONFIG_RTCOEN_DISABLED         = 0,     /*!< DISABLED : Disable the external RTCnOSC output.                           */
  RTC_0_CONFIG_RTCOEN_ENABLED          = 1,     /*!< ENABLED : Enable the external RTCnOSC output.                             */
} RTC_0_CONFIG_RTCOEN_Enum;

/* =============================================  RTC_0 CONFIG CLKSEL [30..30]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_CLKSEL                                                       */
  RTC_0_CONFIG_CLKSEL_RTCNOSC          = 0,     /*!< RTCNOSC : Select the RTC clock (RTCnOSC) as the RTC Timer clock.          */
  RTC_0_CONFIG_CLKSEL_LFOSCN           = 1,     /*!< LFOSCN : Select the Low Frequency Oscillator (LFOSCn) clock
                                                     as the RTC Timer clock.                                                   */
} RTC_0_CONFIG_CLKSEL_Enum;

/* ==============================================  RTC_0 CONFIG RTCEN [31..31]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONFIG_RTCEN                                                        */
  RTC_0_CONFIG_RTCEN_DISABLED          = 0,     /*!< DISABLED : Disable the RTC Oscillator and Timer.                          */
  RTC_0_CONFIG_RTCEN_ENABLED           = 1,     /*!< ENABLED : Enable the RTC Oscillator and Timer.                            */
} RTC_0_CONFIG_RTCEN_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  RTC_0 CONTROL ALM0I [0..0]  =============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_ALM0I                                                       */
  RTC_0_CONTROL_ALM0I_NOT_SET          = 0,     /*!< NOT_SET : Alarm 0 event has not occurred.                                 */
  RTC_0_CONTROL_ALM0I_SET              = 1,     /*!< SET : Alarm 0 event occurred.                                             */
} RTC_0_CONTROL_ALM0I_Enum;

/* ==============================================  RTC_0 CONTROL ALM1I [1..1]  =============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_ALM1I                                                       */
  RTC_0_CONTROL_ALM1I_NOT_SET          = 0,     /*!< NOT_SET : Alarm 1 event has not occurred.                                 */
  RTC_0_CONTROL_ALM1I_SET              = 1,     /*!< SET : Alarm 1 event occurred.                                             */
} RTC_0_CONTROL_ALM1I_Enum;

/* ==============================================  RTC_0 CONTROL ALM2I [2..2]  =============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_ALM2I                                                       */
  RTC_0_CONTROL_ALM2I_NOT_SET          = 0,     /*!< NOT_SET : Alarm 2 event has not occurred.                                 */
  RTC_0_CONTROL_ALM2I_SET              = 1,     /*!< SET : Alarm 2 event occurred.                                             */
} RTC_0_CONTROL_ALM2I_Enum;

/* ==============================================  RTC_0 CONTROL TMRCAP [3..3]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_TMRCAP                                                      */
  RTC_0_CONTROL_TMRCAP_NOT_SET         = 0,     /*!< NOT_SET : RTC timer capture operation is complete.                        */
  RTC_0_CONTROL_TMRCAP_SET             = 1,     /*!< SET : Start the RTC timer capture.                                        */
} RTC_0_CONTROL_TMRCAP_Enum;

/* ==============================================  RTC_0 CONTROL TMRSET [4..4]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_TMRSET                                                      */
  RTC_0_CONTROL_TMRSET_NOT_SET         = 0,     /*!< NOT_SET : RTC timer set operation is complete.                            */
  RTC_0_CONTROL_TMRSET_SET             = 1,     /*!< SET : Start the RTC timer set.                                            */
} RTC_0_CONTROL_TMRSET_Enum;

/* ==============================================  RTC_0 CONTROL CLKVF [5..5]  =============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_CLKVF                                                       */
  RTC_0_CONTROL_CLKVF_NOT_SET          = 0,     /*!< NOT_SET : External oscillator is not valid.                               */
  RTC_0_CONTROL_CLKVF_SET              = 1,     /*!< SET : External oscillator is valid.                                       */
} RTC_0_CONTROL_CLKVF_Enum;

/* ==============================================  RTC_0 CONTROL OSCFI [6..6]  =============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_OSCFI                                                       */
  RTC_0_CONTROL_OSCFI_NOT_SET          = 0,     /*!< NOT_SET : Oscillator is running.                                          */
  RTC_0_CONTROL_OSCFI_SET              = 1,     /*!< SET : Oscillator has failed.                                              */
} RTC_0_CONTROL_OSCFI_Enum;

/* ==============================================  RTC_0 CONTROL HSMDEN [7..7]  ============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_HSMDEN                                                      */
  RTC_0_CONTROL_HSMDEN_DISABLED        = 0,     /*!< DISABLED : Disable high speed mode.                                       */
  RTC_0_CONTROL_HSMDEN_ENABLED         = 1,     /*!< ENABLED : Enable high speed mode.                                         */
} RTC_0_CONTROL_HSMDEN_Enum;

/* ==============================================  RTC_0 CONTROL LRDYF [8..8]  =============================================== */
typedef enum {                                  /*!< RTC_0_CONTROL_LRDYF                                                       */
  RTC_0_CONTROL_LRDYF_NOT_SET          = 0,     /*!< NOT_SET : The load capacitance is currently stepping.                     */
  RTC_0_CONTROL_LRDYF_SET              = 1,     /*!< SET : The load capacitance has reached its programmed value.              */
} RTC_0_CONTROL_LRDYF_Enum;

/* ========================================================  ALARM0  ========================================================= */
/* ========================================================  ALARM1  ========================================================= */
/* ========================================================  ALARM2  ========================================================= */
/* ========================================================  SETCAP  ========================================================= */
/* ======================================================  LFOCONTROL  ======================================================= */
/* ===========================================  RTC_0 LFOCONTROL LFOSCEN [31..31]  =========================================== */
typedef enum {                                  /*!< RTC_0_LFOCONTROL_LFOSCEN                                                  */
  RTC_0_LFOCONTROL_LFOSCEN_DISABLED    = 0,     /*!< DISABLED : Disable the Low Frequency Oscillator (LFOSCn).                 */
  RTC_0_LFOCONTROL_LFOSCEN_ENABLED     = 1,     /*!< ENABLED : Enable the Low Frequency Oscillator (LFOSCn).                   */
} RTC_0_LFOCONTROL_LFOSCEN_Enum;

/* =======================================================  LFOSCADJ  ======================================================== */


/* =========================================================================================================================== */
/* ================                                         RSTSRC_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  RESETEN  ======================================================== */
/* ============================================  RSTSRC_0 RESETEN VMONREN [2..2]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_VMONREN                                                  */
  RSTSRC_0_RESETEN_VMONREN_DISABLED    = 0,     /*!< DISABLED : Disable the Voltage Supply Monitor VDD event as a
                                                     reset source.                                                             */
  RSTSRC_0_RESETEN_VMONREN_ENABLED     = 1,     /*!< ENABLED : Enable the Voltage Supply Monitor VDD event as a reset
                                                     source.                                                                   */
} RSTSRC_0_RESETEN_VMONREN_Enum;

/* ============================================  RSTSRC_0 RESETEN MCDREN [4..4]  ============================================= */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_MCDREN                                                   */
  RSTSRC_0_RESETEN_MCDREN_DISABLED     = 0,     /*!< DISABLED : Disable the Missing Clock Detector event as a reset
                                                     source.                                                                   */
  RSTSRC_0_RESETEN_MCDREN_ENABLED      = 1,     /*!< ENABLED : Enable the Missing Clock Detector event as a reset
                                                     source.                                                                   */
} RSTSRC_0_RESETEN_MCDREN_Enum;

/* ============================================  RSTSRC_0 RESETEN WDTREN [5..5]  ============================================= */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_WDTREN                                                   */
  RSTSRC_0_RESETEN_WDTREN_DISABLED     = 0,     /*!< DISABLED : Disable the Watchdog Timer event as a reset source.            */
  RSTSRC_0_RESETEN_WDTREN_ENABLED      = 1,     /*!< ENABLED : Enable the Watchdog Timer event as a reset source.              */
} RSTSRC_0_RESETEN_WDTREN_Enum;

/* =============================================  RSTSRC_0 RESETEN SWREN [6..6]  ============================================= */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_SWREN                                                    */
  RSTSRC_0_RESETEN_SWREN_DISABLED      = 0,     /*!< DISABLED : Do not generate a Software Reset.                              */
  RSTSRC_0_RESETEN_SWREN_ENABLED       = 1,     /*!< ENABLED : Generate a Software Reset.                                      */
} RSTSRC_0_RESETEN_SWREN_Enum;

/* ============================================  RSTSRC_0 RESETEN CMP0REN [7..7]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_CMP0REN                                                  */
  RSTSRC_0_RESETEN_CMP0REN_DISABLED    = 0,     /*!< DISABLED : Disable the Comparator 0 event as a reset source.              */
  RSTSRC_0_RESETEN_CMP0REN_ENABLED     = 1,     /*!< ENABLED : Enable the Comparator 0 event as a reset source.                */
} RSTSRC_0_RESETEN_CMP0REN_Enum;

/* ============================================  RSTSRC_0 RESETEN CMP1REN [8..8]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_CMP1REN                                                  */
  RSTSRC_0_RESETEN_CMP1REN_DISABLED    = 0,     /*!< DISABLED : Disable the Comparator 1 event as a reset source.              */
  RSTSRC_0_RESETEN_CMP1REN_ENABLED     = 1,     /*!< ENABLED : Enable the Comparator 1 event as a reset source.                */
} RSTSRC_0_RESETEN_CMP1REN_Enum;

/* ============================================  RSTSRC_0 RESETEN USB0REN [9..9]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_USB0REN                                                  */
  RSTSRC_0_RESETEN_USB0REN_DISABLED    = 0,     /*!< DISABLED : Disable the USB0 reset event as a reset source.                */
  RSTSRC_0_RESETEN_USB0REN_ENABLED     = 1,     /*!< ENABLED : Enable the USB0 reset event as a reset source.                  */
} RSTSRC_0_RESETEN_USB0REN_Enum;

/* ===========================================  RSTSRC_0 RESETEN RTC0REN [10..10]  =========================================== */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_RTC0REN                                                  */
  RSTSRC_0_RESETEN_RTC0REN_DISABLED    = 0,     /*!< DISABLED : Disable the RTC0 event as a reset source.                      */
  RSTSRC_0_RESETEN_RTC0REN_ENABLED     = 1,     /*!< ENABLED : Enable the RTC0 event as a reset source.                        */
} RSTSRC_0_RESETEN_RTC0REN_Enum;

/* ===========================================  RSTSRC_0 RESETEN WAKEREN [11..11]  =========================================== */
typedef enum {                                  /*!< RSTSRC_0_RESETEN_WAKEREN                                                  */
  RSTSRC_0_RESETEN_WAKEREN_ENABLED     = 1,     /*!< ENABLED : Enable the PMU Wakeup event as a reset source.                  */
} RSTSRC_0_RESETEN_WAKEREN_Enum;

/* =======================================================  RESETFLAG  ======================================================= */
/* ============================================  RSTSRC_0 RESETFLAG PINRF [0..0]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_PINRF                                                  */
  RSTSRC_0_RESETFLAG_PINRF_NOT_SET     = 0,     /*!< NOT_SET : A /RESET pin event did not cause the last system reset.         */
  RSTSRC_0_RESETFLAG_PINRF_SET         = 1,     /*!< SET : A /RESET pin event caused the last system reset.                    */
} RSTSRC_0_RESETFLAG_PINRF_Enum;

/* ============================================  RSTSRC_0 RESETFLAG PORRF [1..1]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_PORRF                                                  */
  RSTSRC_0_RESETFLAG_PORRF_NOT_SET     = 0,     /*!< NOT_SET : A Power-On Reset event did not cause the last system
                                                     reset.                                                                    */
  RSTSRC_0_RESETFLAG_PORRF_SET         = 1,     /*!< SET : A Power-On Reset event caused the last system reset.                */
} RSTSRC_0_RESETFLAG_PORRF_Enum;

/* ===========================================  RSTSRC_0 RESETFLAG VMONRF [2..2]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_VMONRF                                                 */
  RSTSRC_0_RESETFLAG_VMONRF_NOT_SET    = 0,     /*!< NOT_SET : A Voltage Supply Monitor VDD Reset event did not cause
                                                     the last system reset.                                                    */
  RSTSRC_0_RESETFLAG_VMONRF_SET        = 1,     /*!< SET : A Voltage Supply Monitor VDD Reset event caused the last
                                                     system reset.                                                             */
} RSTSRC_0_RESETFLAG_VMONRF_Enum;

/* ===========================================  RSTSRC_0 RESETFLAG CORERF [3..3]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_CORERF                                                 */
  RSTSRC_0_RESETFLAG_CORERF_NOT_SET    = 0,     /*!< NOT_SET : A Core Reset event did not cause the last system reset.         */
  RSTSRC_0_RESETFLAG_CORERF_SET        = 1,     /*!< SET : A Core Reset event caused the last system reset.                    */
} RSTSRC_0_RESETFLAG_CORERF_Enum;

/* ============================================  RSTSRC_0 RESETFLAG MCDRF [4..4]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_MCDRF                                                  */
  RSTSRC_0_RESETFLAG_MCDRF_NOT_SET     = 0,     /*!< NOT_SET : A Missing Clock Detector event did not cause the last
                                                     system reset.                                                             */
  RSTSRC_0_RESETFLAG_MCDRF_SET         = 1,     /*!< SET : A Missing Clock Detector event caused the last system
                                                     reset.                                                                    */
} RSTSRC_0_RESETFLAG_MCDRF_Enum;

/* ============================================  RSTSRC_0 RESETFLAG WDTRF [5..5]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_WDTRF                                                  */
  RSTSRC_0_RESETFLAG_WDTRF_NOT_SET     = 0,     /*!< NOT_SET : A Watchdog Timer event did not cause the last system
                                                     reset.                                                                    */
  RSTSRC_0_RESETFLAG_WDTRF_SET         = 1,     /*!< SET : A Watchdog Timer event caused the last system reset.                */
} RSTSRC_0_RESETFLAG_WDTRF_Enum;

/* ============================================  RSTSRC_0 RESETFLAG SWRF [6..6]  ============================================= */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_SWRF                                                   */
  RSTSRC_0_RESETFLAG_SWRF_NOT_SET      = 0,     /*!< NOT_SET : A Software Reset event did not cause the last system
                                                     reset.                                                                    */
  RSTSRC_0_RESETFLAG_SWRF_SET          = 1,     /*!< SET : A Software Reset event caused the last system reset.                */
} RSTSRC_0_RESETFLAG_SWRF_Enum;

/* ===========================================  RSTSRC_0 RESETFLAG CMP0RF [7..7]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_CMP0RF                                                 */
  RSTSRC_0_RESETFLAG_CMP0RF_NOT_SET    = 0,     /*!< NOT_SET : A Comparator 0 event did not cause the last system
                                                     reset.                                                                    */
  RSTSRC_0_RESETFLAG_CMP0RF_SET        = 1,     /*!< SET : A Comparator 0 event caused the last system reset.                  */
} RSTSRC_0_RESETFLAG_CMP0RF_Enum;

/* ===========================================  RSTSRC_0 RESETFLAG CMP1RF [8..8]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_CMP1RF                                                 */
  RSTSRC_0_RESETFLAG_CMP1RF_NOT_SET    = 0,     /*!< NOT_SET : A Comparator 1 event did not cause the last system
                                                     reset.                                                                    */
  RSTSRC_0_RESETFLAG_CMP1RF_SET        = 1,     /*!< SET : A Comparator 1 event caused the last system reset.                  */
} RSTSRC_0_RESETFLAG_CMP1RF_Enum;

/* ===========================================  RSTSRC_0 RESETFLAG USB0RF [9..9]  ============================================ */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_USB0RF                                                 */
  RSTSRC_0_RESETFLAG_USB0RF_NOT_SET    = 0,     /*!< NOT_SET : A USB0 Reset event did not cause the last system reset.         */
  RSTSRC_0_RESETFLAG_USB0RF_SET        = 1,     /*!< SET : A USB0 Reset event caused the last system reset.                    */
} RSTSRC_0_RESETFLAG_USB0RF_Enum;

/* ==========================================  RSTSRC_0 RESETFLAG RTC0RF [10..10]  =========================================== */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_RTC0RF                                                 */
  RSTSRC_0_RESETFLAG_RTC0RF_NOT_SET    = 0,     /*!< NOT_SET : An RTC0 event did not cause the last system reset.              */
  RSTSRC_0_RESETFLAG_RTC0RF_SET        = 1,     /*!< SET : An RTC0 event caused the last system reset.                         */
} RSTSRC_0_RESETFLAG_RTC0RF_Enum;

/* ==========================================  RSTSRC_0 RESETFLAG WAKERF [11..11]  =========================================== */
typedef enum {                                  /*!< RSTSRC_0_RESETFLAG_WAKERF                                                 */
  RSTSRC_0_RESETFLAG_WAKERF_NOT_SET    = 0,     /*!< NOT_SET : A PMU Wakeup event did not cause the last system reset.         */
  RSTSRC_0_RESETFLAG_WAKERF_SET        = 1,     /*!< SET : A PMU Wakeup event caused the last system reset.                    */
} RSTSRC_0_RESETFLAG_WAKERF_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  RSTSRC_0 CONFIG PMSEL [0..0]  ============================================== */
typedef enum {                                  /*!< RSTSRC_0_CONFIG_PMSEL                                                     */
  RSTSRC_0_CONFIG_PMSEL_PM9_DIS        = 0,     /*!< PM9_DIS : Power Mode < PM9.                                               */
  RSTSRC_0_CONFIG_PMSEL_PM9_EN         = 1,     /*!< PM9_EN : Power Mode = PM9.                                                */
} RSTSRC_0_CONFIG_PMSEL_Enum;



/* =========================================================================================================================== */
/* ================                                           SPI_0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  DATA  ========================================================== */
/* ========================================================  CONTROL  ======================================================== */
/* ==============================================  SPI_0 CONTROL RFRQI [0..0]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_RFRQI                                                       */
  SPI_0_CONTROL_RFRQI_NOT_SET          = 0,     /*!< NOT_SET : The RX FIFO has fewer bytes than the level defined
                                                     by RFTH.                                                                  */
  SPI_0_CONTROL_RFRQI_SET              = 1,     /*!< SET : The RX FIFO has equal or more bytes than the level defined
                                                     by RFTH.                                                                  */
} SPI_0_CONTROL_RFRQI_Enum;

/* ==============================================  SPI_0 CONTROL RFORI [1..1]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_RFORI                                                       */
  SPI_0_CONTROL_RFORI_NOT_SET          = 0,     /*!< NOT_SET : Read: A receive FIFO overrun has not occurred. Write:
                                                     Clear the flag.                                                           */
  SPI_0_CONTROL_RFORI_SET              = 1,     /*!< SET : Read: A receive FIFO overrun occurred. Write: Force a
                                                     receive overrun interrupt.                                                */
} SPI_0_CONTROL_RFORI_Enum;

/* ==============================================  SPI_0 CONTROL TFRQI [2..2]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_TFRQI                                                       */
  SPI_0_CONTROL_TFRQI_NOT_SET          = 0,     /*!< NOT_SET : The TX FIFO has fewer bytes than the level defined
                                                     by TFTH.                                                                  */
  SPI_0_CONTROL_TFRQI_SET              = 1,     /*!< SET : The TX FIFO has equal or more bytes than the level defined
                                                     by TFTH.                                                                  */
} SPI_0_CONTROL_TFRQI_Enum;

/* ==============================================  SPI_0 CONTROL TFORI [3..3]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_TFORI                                                       */
  SPI_0_CONTROL_TFORI_NOT_SET          = 0,     /*!< NOT_SET : Read: A transmit FIFO overrun has not occurred. Write:
                                                     Clear the flag.                                                           */
  SPI_0_CONTROL_TFORI_SET              = 1,     /*!< SET : Read: A transmit FIFO overrun occurred. Write: Force a
                                                     transmit overrun interrupt.                                               */
} SPI_0_CONTROL_TFORI_Enum;

/* =============================================  SPI_0 CONTROL SLVSELI [4..4]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_SLVSELI                                                     */
  SPI_0_CONTROL_SLVSELI_NOT_SET        = 0,     /*!< NOT_SET : The slave select signal (NSS) is not active.                    */
  SPI_0_CONTROL_SLVSELI_SET            = 1,     /*!< SET : The slave select signal (NSS) is active.                            */
} SPI_0_CONTROL_SLVSELI_Enum;

/* ===============================================  SPI_0 CONTROL MDFI [5..5]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_MDFI                                                        */
  SPI_0_CONTROL_MDFI_NOT_SET           = 0,     /*!< NOT_SET : Read: A master mode collision is not detected. Write:
                                                     Clear the flag.                                                           */
  SPI_0_CONTROL_MDFI_SET               = 1,     /*!< SET : Read: A master mode collision occurred. Write: Force a
                                                     mode fault interrupt.                                                     */
} SPI_0_CONTROL_MDFI_Enum;

/* ===============================================  SPI_0 CONTROL URI [6..6]  ================================================ */
typedef enum {                                  /*!< SPI_0_CONTROL_URI                                                         */
  SPI_0_CONTROL_URI_NOT_SET            = 0,     /*!< NOT_SET : Read: A data transfer is still in progress. Write:
                                                     Clear the flag.                                                           */
  SPI_0_CONTROL_URI_SET                = 1,     /*!< SET : Read: The transmit FIFO and shift register are empty and
                                                     the data transfer has ended. Write: Force an underrun interrupt.          */
} SPI_0_CONTROL_URI_Enum;

/* ===============================================  SPI_0 CONTROL SREI [7..7]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_SREI                                                        */
  SPI_0_CONTROL_SREI_NOT_SET           = 0,     /*!< NOT_SET : There is data still present in the transmit FIFO.               */
  SPI_0_CONTROL_SREI_SET               = 1,     /*!< SET : All data has been transferred out of the shift register
                                                     and there is no data waiting in the transmit FIFO.                        */
} SPI_0_CONTROL_SREI_Enum;

/* ==============================================  SPI_0 CONTROL RFILI [8..8]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_RFILI                                                       */
  SPI_0_CONTROL_RFILI_NOT_SET          = 0,     /*!< NOT_SET : Read: An illegal write or read of the receive FIFO
                                                     has not occurred. Write: Clear the flag.                                  */
  SPI_0_CONTROL_RFILI_SET              = 1,     /*!< SET : Read: An illegal write or read of the receive FIFO occurred.
                                                     Write: Force an illegal receive access interrupt.                         */
} SPI_0_CONTROL_RFILI_Enum;

/* ==============================================  SPI_0 CONTROL TFILI [9..9]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_TFILI                                                       */
  SPI_0_CONTROL_TFILI_NOT_SET          = 0,     /*!< NOT_SET : Read: An illegal write or read of the transmit FIFO
                                                     has not occurred. Write: Clear the flag.                                  */
  SPI_0_CONTROL_TFILI_SET              = 1,     /*!< SET : Read: An illegal write or read of the transmit FIFO occurred.
                                                     Write: Force an illegal transmit access interrupt.                        */
} SPI_0_CONTROL_TFILI_Enum;

/* =============================================  SPI_0 CONTROL NSSSTS [14..14]  ============================================= */
typedef enum {                                  /*!< SPI_0_CONTROL_NSSSTS                                                      */
  SPI_0_CONTROL_NSSSTS_LOW             = 0,     /*!< LOW : NSS is currently a logic low.                                       */
  SPI_0_CONTROL_NSSSTS_HIGH            = 1,     /*!< HIGH : NSS is currently a logic high.                                     */
} SPI_0_CONTROL_NSSSTS_Enum;

/* =============================================  SPI_0 CONTROL BUSYF [15..15]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_BUSYF                                                       */
  SPI_0_CONTROL_BUSYF_NOT_SET          = 0,     /*!< NOT_SET : The SPI is not busy and a transfer is not in progress.          */
  SPI_0_CONTROL_BUSYF_SET              = 1,     /*!< SET : The SPI is currently busy and a transfer is in progress.            */
} SPI_0_CONTROL_BUSYF_Enum;

/* =============================================  SPI_0 CONTROL DBGMD [24..24]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONTROL_DBGMD                                                       */
  SPI_0_CONTROL_DBGMD_RUN              = 0,     /*!< RUN : The SPI module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  SPI_0_CONTROL_DBGMD_HALT             = 1,     /*!< HALT : A debug breakpoint will cause the SPI module to halt.              */
} SPI_0_CONTROL_DBGMD_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ==============================================  SPI_0 CONFIG RFRQIEN [0..0]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_RFRQIEN                                                      */
  SPI_0_CONFIG_RFRQIEN_DISABLED        = 0,     /*!< DISABLED : Disable the receive FIFO request interrupt.                    */
  SPI_0_CONFIG_RFRQIEN_ENABLED         = 1,     /*!< ENABLED : Enable the receive FIFO request interrupt.                      */
} SPI_0_CONFIG_RFRQIEN_Enum;

/* ==============================================  SPI_0 CONFIG RFORIEN [1..1]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_RFORIEN                                                      */
  SPI_0_CONFIG_RFORIEN_DISABLED        = 0,     /*!< DISABLED : Disable the receive FIFO overrun interrupt.                    */
  SPI_0_CONFIG_RFORIEN_ENABLED         = 1,     /*!< ENABLED : Enable the receive FIFO overrun interrupt.                      */
} SPI_0_CONFIG_RFORIEN_Enum;

/* ==============================================  SPI_0 CONFIG TFRQIEN [2..2]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_TFRQIEN                                                      */
  SPI_0_CONFIG_TFRQIEN_DISABLED        = 0,     /*!< DISABLED : Disable the transmit FIFO data request interrupt.              */
  SPI_0_CONFIG_TFRQIEN_ENABLED         = 1,     /*!< ENABLED : Enable the transmit FIFO data request interrupt.                */
} SPI_0_CONFIG_TFRQIEN_Enum;

/* ==============================================  SPI_0 CONFIG TFORIEN [3..3]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_TFORIEN                                                      */
  SPI_0_CONFIG_TFORIEN_DISABLED        = 0,     /*!< DISABLED : Disable the transmit FIFO overrun interrupt.                   */
  SPI_0_CONFIG_TFORIEN_ENABLED         = 1,     /*!< ENABLED : Enable the transmit FIFO overrun interrupt.                     */
} SPI_0_CONFIG_TFORIEN_Enum;

/* =============================================  SPI_0 CONFIG SLVSELIEN [4..4]  ============================================= */
typedef enum {                                  /*!< SPI_0_CONFIG_SLVSELIEN                                                    */
  SPI_0_CONFIG_SLVSELIEN_DISABLED      = 0,     /*!< DISABLED : Disable the slave select interrupt.                            */
  SPI_0_CONFIG_SLVSELIEN_ENABLED       = 1,     /*!< ENABLED : Enable the slave select interrupt.                              */
} SPI_0_CONFIG_SLVSELIEN_Enum;

/* ==============================================  SPI_0 CONFIG MDFIEN [5..5]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_MDFIEN                                                       */
  SPI_0_CONFIG_MDFIEN_DISABLED         = 0,     /*!< DISABLED : Disable the mode fault interrupt.                              */
  SPI_0_CONFIG_MDFIEN_ENABLED          = 1,     /*!< ENABLED : Enable the mode fault interrupt.                                */
} SPI_0_CONFIG_MDFIEN_Enum;

/* ===============================================  SPI_0 CONFIG URIEN [6..6]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_URIEN                                                        */
  SPI_0_CONFIG_URIEN_DISABLED          = 0,     /*!< DISABLED : Disable the underrun interrupt.                                */
  SPI_0_CONFIG_URIEN_ENABLED           = 1,     /*!< ENABLED : Enable the underrun interrupt.                                  */
} SPI_0_CONFIG_URIEN_Enum;

/* ==============================================  SPI_0 CONFIG SREIEN [7..7]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_SREIEN                                                       */
  SPI_0_CONFIG_SREIEN_DISABLED         = 0,     /*!< DISABLED : Disable the shift register empty interrupt.                    */
  SPI_0_CONFIG_SREIEN_ENABLED          = 1,     /*!< ENABLED : Enable the shift register empty interrupt.                      */
} SPI_0_CONFIG_SREIEN_Enum;

/* ===============================================  SPI_0 CONFIG SPIEN [8..8]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_SPIEN                                                        */
  SPI_0_CONFIG_SPIEN_DISABLED          = 0,     /*!< DISABLED : Disable the SPI.                                               */
  SPI_0_CONFIG_SPIEN_ENABLED           = 1,     /*!< ENABLED : Enable the SPI.                                                 */
} SPI_0_CONFIG_SPIEN_Enum;

/* ===============================================  SPI_0 CONFIG MSTEN [9..9]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_MSTEN                                                        */
  SPI_0_CONFIG_MSTEN_DISABLED          = 0,     /*!< DISABLED : Operate in slave mode.                                         */
  SPI_0_CONFIG_MSTEN_ENABLED           = 1,     /*!< ENABLED : Operate in master mode.                                         */
} SPI_0_CONFIG_MSTEN_Enum;

/* =============================================  SPI_0 CONFIG CLKPOL [10..10]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_CLKPOL                                                       */
  SPI_0_CONFIG_CLKPOL_LOW              = 0,     /*!< LOW : The SCK line is low in the idle state.                              */
  SPI_0_CONFIG_CLKPOL_HIGH             = 1,     /*!< HIGH : The SCK line is high in the idle state.                            */
} SPI_0_CONFIG_CLKPOL_Enum;

/* =============================================  SPI_0 CONFIG CLKPHA [11..11]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_CLKPHA                                                       */
  SPI_0_CONFIG_CLKPHA_CENTER           = 0,     /*!< CENTER : The first edge of SCK is the sample edge (center of
                                                     data bit).                                                                */
  SPI_0_CONFIG_CLKPHA_EDGE             = 1,     /*!< EDGE : The first edge of SCK is the shift edge (edge of data
                                                     bit).                                                                     */
} SPI_0_CONFIG_CLKPHA_Enum;

/* =============================================  SPI_0 CONFIG NSSPOL [12..12]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_NSSPOL                                                       */
  SPI_0_CONFIG_NSSPOL_LOW              = 0,     /*!< LOW : NSS is active low.                                                  */
  SPI_0_CONFIG_NSSPOL_HIGH             = 1,     /*!< HIGH : NSS is active high.                                                */
} SPI_0_CONFIG_NSSPOL_Enum;

/* =============================================  SPI_0 CONFIG DDIRSEL [13..13]  ============================================= */
typedef enum {                                  /*!< SPI_0_CONFIG_DDIRSEL                                                      */
  SPI_0_CONFIG_DDIRSEL_MSB_FIRST       = 0,     /*!< MSB_FIRST : Data will be shifted MSB first.                               */
  SPI_0_CONFIG_DDIRSEL_LSB_FIRST       = 1,     /*!< LSB_FIRST : Data will be shifted LSB first.                               */
} SPI_0_CONFIG_DDIRSEL_Enum;

/* ==============================================  SPI_0 CONFIG NSSMD [14..15]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_NSSMD                                                        */
  SPI_0_CONFIG_NSSMD_3_WIRE_MASTER_SLAVE = 0,   /*!< 3_WIRE_MASTER_SLAVE : 3-wire Slave or 3-wire Master.                      */
  SPI_0_CONFIG_NSSMD_4_WIRE_SLAVE      = 1,     /*!< 4_WIRE_SLAVE : 4-wire slave (NSS input). This setting can also
                                                     be used for multi-master configurations.                                  */
  SPI_0_CONFIG_NSSMD_4_WIRE_MASTER_NSS_LOW = 2, /*!< 4_WIRE_MASTER_NSS_LOW : 4-wire master with NSS low (NSS output).          */
  SPI_0_CONFIG_NSSMD_4_WIRE_MASTER_NSS_HIGH = 3,/*!< 4_WIRE_MASTER_NSS_HIGH : 4-wire master with NSS high (NSS output).        */
} SPI_0_CONFIG_NSSMD_Enum;

/* ==============================================  SPI_0 CONFIG RFTH [16..17]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_RFTH                                                         */
  SPI_0_CONFIG_RFTH_ONE                = 0,     /*!< ONE : A DMA / RFRQ request asserts when >= 1 FIFO slot is filled.         */
  SPI_0_CONFIG_RFTH_TWO                = 1,     /*!< TWO : A DMA / RFRQ request asserts when >= 2 FIFO slots are
                                                     filled.                                                                   */
  SPI_0_CONFIG_RFTH_FOUR               = 2,     /*!< FOUR : A DMA / RFRQ request asserts when >= 4 FIFO slots are
                                                     filled.                                                                   */
  SPI_0_CONFIG_RFTH_FULL               = 3,     /*!< FULL : A DMA / RFRQ request asserts when all FIFO slots are
                                                     filled.                                                                   */
} SPI_0_CONFIG_RFTH_Enum;

/* ==============================================  SPI_0 CONFIG TFTH [18..19]  =============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_TFTH                                                         */
  SPI_0_CONFIG_TFTH_ONE                = 0,     /*!< ONE : A DMA / TFRQ request asserts when >= 1 FIFO slot is empty.          */
  SPI_0_CONFIG_TFTH_TWO                = 1,     /*!< TWO : A DMA / TFRQ request asserts when >= 2 FIFO slots are
                                                     empty.                                                                    */
  SPI_0_CONFIG_TFTH_FOUR               = 2,     /*!< FOUR : A DMA / TFRQ request asserts when >= 4 FIFO slots are
                                                     empty.                                                                    */
  SPI_0_CONFIG_TFTH_EMPTY              = 3,     /*!< EMPTY : A DMA / TFRQ request asserts when all FIFO slots are
                                                     empty.                                                                    */
} SPI_0_CONFIG_TFTH_Enum;

/* ==============================================  SPI_0 CONFIG DMAEN [24..24]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_DMAEN                                                        */
  SPI_0_CONFIG_DMAEN_DISABLED          = 0,     /*!< DISABLED : Disable DMA requests.                                          */
  SPI_0_CONFIG_DMAEN_ENABLED           = 1,     /*!< ENABLED : Enable DMA requests when the transmit buffer is empty
                                                     or the receive buffer is full.                                            */
} SPI_0_CONFIG_DMAEN_Enum;

/* =============================================  SPI_0 CONFIG RFIFOFL [29..29]  ============================================= */
typedef enum {                                  /*!< SPI_0_CONFIG_RFIFOFL                                                      */
  SPI_0_CONFIG_RFIFOFL_SET             = 1,     /*!< SET : Flush the receive FIFO.                                             */
} SPI_0_CONFIG_RFIFOFL_Enum;

/* =============================================  SPI_0 CONFIG TFIFOFL [30..30]  ============================================= */
typedef enum {                                  /*!< SPI_0_CONFIG_TFIFOFL                                                      */
  SPI_0_CONFIG_TFIFOFL_SET             = 1,     /*!< SET : Flush the transmit FIFO.                                            */
} SPI_0_CONFIG_TFIFOFL_Enum;

/* ==============================================  SPI_0 CONFIG RESET [31..31]  ============================================== */
typedef enum {                                  /*!< SPI_0_CONFIG_RESET                                                        */
  SPI_0_CONFIG_RESET_INACTIVE          = 0,     /*!< INACTIVE : SPI module is not in soft reset.                               */
  SPI_0_CONFIG_RESET_ACTIVE            = 1,     /*!< ACTIVE : SPI module is in soft reset and some of the module
                                                     bits cannot be accessed until this bit is cleared to 0
                                                     by hardware.                                                              */
} SPI_0_CONFIG_RESET_Enum;

/* ========================================================  CLKRATE  ======================================================== */
/* ========================================================  FSTATUS  ======================================================== */


/* =========================================================================================================================== */
/* ================                                           SSG_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ==============================================  SSG_0 CONFIG SSEL [12..12]  =============================================== */
typedef enum {                                  /*!< SSG_0_CONFIG_SSEL                                                         */
  SSG_0_CONFIG_SSEL_NORMAL             = 0,     /*!< NORMAL : The SSG module runs at normal speed, where each pulse
                                                     and phase cycle consists of 16 ADC clocks.                                */
  SSG_0_CONFIG_SSEL_DOUBLE             = 1,     /*!< DOUBLE : The SSG module runs at double speed, where each pulse
                                                     and phase cycle consists of 8 ADC clocks.                                 */
} SSG_0_CONFIG_SSEL_Enum;

/* =============================================  SSG_0 CONFIG PHGFREN [13..13]  ============================================= */
typedef enum {                                  /*!< SSG_0_CONFIG_PHGFREN                                                      */
  SSG_0_CONFIG_PHGFREN_DISABLED        = 0,     /*!< DISABLED : The Phase Generator runs only when pulse generation
                                                     occurs.                                                                   */
  SSG_0_CONFIG_PHGFREN_ENABLED         = 1,     /*!< ENABLED : The Phase Generator runs when an ADC is enabled, regardless
                                                     of the Pulse Generator settings.                                          */
} SSG_0_CONFIG_PHGFREN_Enum;

/* =============================================  SSG_0 CONFIG PUGFREN [14..14]  ============================================= */
typedef enum {                                  /*!< SSG_0_CONFIG_PUGFREN                                                      */
  SSG_0_CONFIG_PUGFREN_DISABLED        = 0,     /*!< DISABLED : The COUNT field determines the number of pulses generated
                                                     by the Pulse Generator.                                                   */
  SSG_0_CONFIG_PUGFREN_ENABLED         = 1,     /*!< ENABLED : The Pulse Generator always generates pulses regardless
                                                     of COUNT unless all outputs are disabled (EX0EN, EX1EN,
                                                     EX2EN, and EX3EN are all 0).                                              */
} SSG_0_CONFIG_PUGFREN_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  SSG_0 CONTROL EX0INVEN [0..0]  ============================================= */
typedef enum {                                  /*!< SSG_0_CONTROL_EX0INVEN                                                    */
  SSG_0_CONTROL_EX0INVEN_NORMAL        = 0,     /*!< NORMAL : Do not invert the Pulse Generator output on EX0.                 */
  SSG_0_CONTROL_EX0INVEN_INVERT        = 1,     /*!< INVERT : Invert the Pulse Generator output on EX0.                        */
} SSG_0_CONTROL_EX0INVEN_Enum;

/* =============================================  SSG_0 CONTROL EX1INVEN [1..1]  ============================================= */
typedef enum {                                  /*!< SSG_0_CONTROL_EX1INVEN                                                    */
  SSG_0_CONTROL_EX1INVEN_NORMAL        = 0,     /*!< NORMAL : Do not invert the Pulse Generator output on EX1.                 */
  SSG_0_CONTROL_EX1INVEN_INVERT        = 1,     /*!< INVERT : Invert the Pulse Generator output on EX1.                        */
} SSG_0_CONTROL_EX1INVEN_Enum;

/* =============================================  SSG_0 CONTROL EX2INVEN [2..2]  ============================================= */
typedef enum {                                  /*!< SSG_0_CONTROL_EX2INVEN                                                    */
  SSG_0_CONTROL_EX2INVEN_NORMAL        = 0,     /*!< NORMAL : Do not invert the Pulse Generator output on EX2.                 */
  SSG_0_CONTROL_EX2INVEN_INVERT        = 1,     /*!< INVERT : Invert the Pulse Generator output on EX2.                        */
} SSG_0_CONTROL_EX2INVEN_Enum;

/* =============================================  SSG_0 CONTROL EX3INVEN [3..3]  ============================================= */
typedef enum {                                  /*!< SSG_0_CONTROL_EX3INVEN                                                    */
  SSG_0_CONTROL_EX3INVEN_NORMAL        = 0,     /*!< NORMAL : Do not invert the Pulse Generator output on EX3.                 */
  SSG_0_CONTROL_EX3INVEN_INVERT        = 1,     /*!< INVERT : Invert the Pulse Generator output on EX3.                        */
} SSG_0_CONTROL_EX3INVEN_Enum;

/* ==============================================  SSG_0 CONTROL EX0EN [4..4]  =============================================== */
typedef enum {                                  /*!< SSG_0_CONTROL_EX0EN                                                       */
  SSG_0_CONTROL_EX0EN_DISABLED         = 0,     /*!< DISABLED : Disable the EX0 Pulse Generator output.                        */
  SSG_0_CONTROL_EX0EN_ENABLED          = 1,     /*!< ENABLED : Enable the EX0 Pulse Generator output.                          */
} SSG_0_CONTROL_EX0EN_Enum;

/* ==============================================  SSG_0 CONTROL EX1EN [5..5]  =============================================== */
typedef enum {                                  /*!< SSG_0_CONTROL_EX1EN                                                       */
  SSG_0_CONTROL_EX1EN_DISABLED         = 0,     /*!< DISABLED : Disable the EX1 Pulse Generator output.                        */
  SSG_0_CONTROL_EX1EN_ENABLED          = 1,     /*!< ENABLED : Enable the EX1 Pulse Generator output.                          */
} SSG_0_CONTROL_EX1EN_Enum;

/* ==============================================  SSG_0 CONTROL EX2EN [6..6]  =============================================== */
typedef enum {                                  /*!< SSG_0_CONTROL_EX2EN                                                       */
  SSG_0_CONTROL_EX2EN_DISABLED         = 0,     /*!< DISABLED : Disable the EX2 Pulse Generator output.                        */
  SSG_0_CONTROL_EX2EN_ENABLED          = 1,     /*!< ENABLED : Enable the EX2 Pulse Generator output.                          */
} SSG_0_CONTROL_EX2EN_Enum;

/* ==============================================  SSG_0 CONTROL EX3EN [7..7]  =============================================== */
typedef enum {                                  /*!< SSG_0_CONTROL_EX3EN                                                       */
  SSG_0_CONTROL_EX3EN_DISABLED         = 0,     /*!< DISABLED : Disable the EX3 Pulse Generator output.                        */
  SSG_0_CONTROL_EX3EN_ENABLED          = 1,     /*!< ENABLED : Enable the EX3 Pulse Generator output.                          */
} SSG_0_CONTROL_EX3EN_Enum;

/* ==============================================  SSG_0 CONTROL STATUS [8..8]  ============================================== */
typedef enum {                                  /*!< SSG_0_CONTROL_STATUS                                                      */
  SSG_0_CONTROL_STATUS_IDLE            = 0,     /*!< IDLE : The SSG module is idle and the Pulse Generator is not
                                                     operating.                                                                */
  SSG_0_CONTROL_STATUS_ACTIVE          = 1,     /*!< ACTIVE : The SSG module is active and the Pulse Generator is
                                                     counting.                                                                 */
} SSG_0_CONTROL_STATUS_Enum;



/* =========================================================================================================================== */
/* ================                                          TIMER_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ==============================================  TIMER_0 CONFIG LCLK [0..1]  =============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_LCLK                                                       */
  TIMER_0_CONFIG_LCLK_APB              = 0,     /*!< APB : Select the APB clock as the timer source.                           */
  TIMER_0_CONFIG_LCLK_EXTOSCN          = 1,     /*!< EXTOSCN : Select the external oscillator clock as the timer
                                                     source. The external oscillator must run slower than one-half
                                                     the APB clock.                                                            */
  TIMER_0_CONFIG_LCLK_TIMER_CLKDIV     = 2,     /*!< TIMER_CLKDIV : Select the dedicated 8-bit prescaler as the timer
                                                     source.                                                                   */
  TIMER_0_CONFIG_LCLK_CT_FALLING_EDGE  = 3,     /*!< CT_FALLING_EDGE : Select falling edges of the CT signal as the
                                                     timer clock source.                                                       */
} TIMER_0_CONFIG_LCLK_Enum;

/* =============================================  TIMER_0 CONFIG LMSTREN [4..4]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_LMSTREN                                                    */
  TIMER_0_CONFIG_LMSTREN_DISABLED      = 0,     /*!< DISABLED : MSTRUN does not need to be set for the low timer
                                                     to run.                                                                   */
  TIMER_0_CONFIG_LMSTREN_ENABLED       = 1,     /*!< ENABLED : MSTRUN must be set for the low timer to run.                    */
} TIMER_0_CONFIG_LMSTREN_Enum;

/* =============================================  TIMER_0 CONFIG SPLITEN [5..5]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_SPLITEN                                                    */
  TIMER_0_CONFIG_SPLITEN_DISABLED      = 0,     /*!< DISABLED : The timer operates as a single 32-bit timer controlled
                                                     by the high timer fields.                                                 */
  TIMER_0_CONFIG_SPLITEN_ENABLED       = 1,     /*!< ENABLED : The timer operates as two independent 16-bit timers.            */
} TIMER_0_CONFIG_SPLITEN_Enum;

/* =============================================  TIMER_0 CONFIG LEXIEN [6..6]  ============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_LEXIEN                                                     */
  TIMER_0_CONFIG_LEXIEN_DISABLED       = 0,     /*!< DISABLED : The state of the LEXI flag does not affect the low
                                                     timer interrupt.                                                          */
  TIMER_0_CONFIG_LEXIEN_ENABLED        = 1,     /*!< ENABLED : A low timer interrupt request is generated if LEXI
                                                     is set to 1.                                                              */
} TIMER_0_CONFIG_LEXIEN_Enum;

/* =============================================  TIMER_0 CONFIG LOVFIEN [7..7]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_LOVFIEN                                                    */
  TIMER_0_CONFIG_LOVFIEN_DISABLED      = 0,     /*!< DISABLED : The state of LOVFI does not affect the low timer
                                                     interrupt.                                                                */
  TIMER_0_CONFIG_LOVFIEN_ENABLED       = 1,     /*!< ENABLED : A low timer interrupt request is generated if LOVFI
                                                     = 1.                                                                      */
} TIMER_0_CONFIG_LOVFIEN_Enum;

/* ==============================================  TIMER_0 CONFIG LMD [8..10]  =============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_LMD                                                        */
  TIMER_0_CONFIG_LMD_AUTO_RELOAD       = 0,     /*!< AUTO_RELOAD : The low timer is in Auto-Reload Mode.                       */
  TIMER_0_CONFIG_LMD_UP_DOWN           = 1,     /*!< UP_DOWN : The low timer is in Up/Down Count Mode.                         */
  TIMER_0_CONFIG_LMD_FALL_CAPTURE      = 2,     /*!< FALL_CAPTURE : The low timer is in Falling Edge Capture Mode.             */
  TIMER_0_CONFIG_LMD_RISE_CAPTURE      = 3,     /*!< RISE_CAPTURE : The low timer is in Rising Edge Capture Mode.              */
  TIMER_0_CONFIG_LMD_LOW_CAPTURE       = 4,     /*!< LOW_CAPTURE : The low timer is in Low Time Capture Mode.                  */
  TIMER_0_CONFIG_LMD_HIGH_CAPTURE      = 5,     /*!< HIGH_CAPTURE : The low timer is in High Time Capture Mode.                */
  TIMER_0_CONFIG_LMD_DC_CAPTURE        = 6,     /*!< DC_CAPTURE : The low timer is in Duty Cycle Capture Mode.                 */
  TIMER_0_CONFIG_LMD_ONESHOT           = 7,     /*!< ONESHOT : The low timer is in Oneshot Mode.                               */
} TIMER_0_CONFIG_LMD_Enum;

/* ============================================  TIMER_0 CONFIG LSTATE [12..12]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_LSTATE                                                     */
  TIMER_0_CONFIG_LSTATE_NOT_SET        = 0,     /*!< NOT_SET : NOT_SET                                                         */
  TIMER_0_CONFIG_LSTATE_SET            = 1,     /*!< SET : SET                                                                 */
} TIMER_0_CONFIG_LSTATE_Enum;

/* =============================================  TIMER_0 CONFIG LRUN [13..13]  ============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_LRUN                                                       */
  TIMER_0_CONFIG_LRUN_STOP             = 0,     /*!< STOP : Stop the low timer if split mode is enabled (SPLITEN
                                                     = 1).                                                                     */
  TIMER_0_CONFIG_LRUN_START            = 1,     /*!< START : The low timer runs if split mode is enabled (SPLITEN
                                                     = 1) and (LMSTREN = 0 or MSTRUN = 1).                                     */
} TIMER_0_CONFIG_LRUN_Enum;

/* =============================================  TIMER_0 CONFIG LEXI [14..14]  ============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_LEXI                                                       */
  TIMER_0_CONFIG_LEXI_NOT_SET          = 0,     /*!< NOT_SET : Read: A low timer extra interrupt is not pending.
                                                     Write: Clear the interrupt.                                               */
  TIMER_0_CONFIG_LEXI_SET              = 1,     /*!< SET : Read: Indicates the low 16-bit timer has been captured,
                                                     reloaded with all 1's when counting down, or the timer
                                                     matched the capture register in PWM mode. This interrupt
                                                     flag can be set by hardware in all modes except Auto-Reload
                                                     and Toggle. This flag is not set by hardware when split
                                                     mode is disabled (SPLITEN = 0). Write: Force a low timer
                                                     extra interrupt.                                                          */
} TIMER_0_CONFIG_LEXI_Enum;

/* =============================================  TIMER_0 CONFIG LOVFI [15..15]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_LOVFI                                                      */
  TIMER_0_CONFIG_LOVFI_NOT_SET         = 0,     /*!< NOT_SET : Read: A low timer overflow interrupt is not pending.
                                                     Write: Clear the interrupt.                                               */
  TIMER_0_CONFIG_LOVFI_SET             = 1,     /*!< SET : Read: The low 16-bit timer has wrapped or reloaded after
                                                     reaching all 1's. This bit is set by the module regardless
                                                     of the state of SPLITEN and can be set in all modes. Write:
                                                     Force a low timer overflow interrupt.                                     */
} TIMER_0_CONFIG_LOVFI_Enum;

/* =============================================  TIMER_0 CONFIG HCLK [16..17]  ============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_HCLK                                                       */
  TIMER_0_CONFIG_HCLK_APB              = 0,     /*!< APB : Select the APB clock as the timer source.                           */
  TIMER_0_CONFIG_HCLK_EXTOSCN          = 1,     /*!< EXTOSCN : Select the external oscillator clock as the timer
                                                     source. The external oscillator must run slower than one-half
                                                     the APB clock.                                                            */
  TIMER_0_CONFIG_HCLK_TIMER_CLKDIV     = 2,     /*!< TIMER_CLKDIV : Select the dedicated 8-bit prescaler as the timer
                                                     source.                                                                   */
  TIMER_0_CONFIG_HCLK_CT_FALLING_EDGE  = 3,     /*!< CT_FALLING_EDGE : Select falling edges of the CT signal as the
                                                     timer clock source.                                                       */
} TIMER_0_CONFIG_HCLK_Enum;

/* ============================================  TIMER_0 CONFIG MSTRUN [19..19]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_MSTRUN                                                     */
  TIMER_0_CONFIG_MSTRUN_STOP           = 0,     /*!< STOP : Disable the master run control for all timers.                     */
  TIMER_0_CONFIG_MSTRUN_START          = 1,     /*!< START : Enable the master run control for all timers.                     */
} TIMER_0_CONFIG_MSTRUN_Enum;

/* ============================================  TIMER_0 CONFIG HMSTREN [20..20]  ============================================ */
typedef enum {                                  /*!< TIMER_0_CONFIG_HMSTREN                                                    */
  TIMER_0_CONFIG_HMSTREN_DISABLED      = 0,     /*!< DISABLED : MSTRUN does not need to be set for the high timer
                                                     to run.                                                                   */
  TIMER_0_CONFIG_HMSTREN_ENABLED       = 1,     /*!< ENABLED : MSTRUN must be set for the high timer to run.                   */
} TIMER_0_CONFIG_HMSTREN_Enum;

/* =============================================  TIMER_0 CONFIG DBGMD [21..21]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_DBGMD                                                      */
  TIMER_0_CONFIG_DBGMD_RUN             = 0,     /*!< RUN : The Timer will continue to operate while the core is halted
                                                     in debug mode.                                                            */
  TIMER_0_CONFIG_DBGMD_HALT            = 1,     /*!< HALT : A debug breakpoint will cause the Timer to halt.                   */
} TIMER_0_CONFIG_DBGMD_Enum;

/* ============================================  TIMER_0 CONFIG HEXIEN [22..22]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_HEXIEN                                                     */
  TIMER_0_CONFIG_HEXIEN_DISABLED       = 0,     /*!< DISABLED : The state of the HEXI flag does not affect the high
                                                     timer interrupt.                                                          */
  TIMER_0_CONFIG_HEXIEN_ENABLED        = 1,     /*!< ENABLED : A high timer interrupt request is generated if HEXI
                                                     is set to 1.                                                              */
} TIMER_0_CONFIG_HEXIEN_Enum;

/* ============================================  TIMER_0 CONFIG HOVFIEN [23..23]  ============================================ */
typedef enum {                                  /*!< TIMER_0_CONFIG_HOVFIEN                                                    */
  TIMER_0_CONFIG_HOVFIEN_DISABLED      = 0,     /*!< DISABLED : The state of HOVFI does not affect the high timer
                                                     interrupt.                                                                */
  TIMER_0_CONFIG_HOVFIEN_ENABLED       = 1,     /*!< ENABLED : A high timer interrupt request is generated if HOVFI
                                                     is set to 1.                                                              */
} TIMER_0_CONFIG_HOVFIEN_Enum;

/* ==============================================  TIMER_0 CONFIG HMD [24..27]  ============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_HMD                                                        */
  TIMER_0_CONFIG_HMD_AUTO_RELOAD       = 0,     /*!< AUTO_RELOAD : The high 16-bit timer or entire 32-bit timer is
                                                     in Auto-Reload Mode.                                                      */
  TIMER_0_CONFIG_HMD_UP_DOWN           = 1,     /*!< UP_DOWN : The high 16-bit timer or entire 32-bit timer is in
                                                     Up/Down Count Mode.                                                       */
  TIMER_0_CONFIG_HMD_FALL_CAPTURE      = 2,     /*!< FALL_CAPTURE : The high 16-bit timer or entire 32-bit timer
                                                     is in Falling Edge Capture Mode.                                          */
  TIMER_0_CONFIG_HMD_RISE_CAPTURE      = 3,     /*!< RISE_CAPTURE : The high 16-bit timer or entire 32-bit timer
                                                     is in Rising Edge Capture Mode.                                           */
  TIMER_0_CONFIG_HMD_LOW_CAPTURE       = 4,     /*!< LOW_CAPTURE : The high 16-bit timer or entire 32-bit timer is
                                                     in Low Time Capture Mode.                                                 */
  TIMER_0_CONFIG_HMD_HIGH_CAPTURE      = 5,     /*!< HIGH_CAPTURE : The high 16-bit timer or entire 32-bit timer
                                                     is in High Time Capture Mode.                                             */
  TIMER_0_CONFIG_HMD_DC_CAPTURE        = 6,     /*!< DC_CAPTURE : The high 16-bit timer or entire 32-bit timer is
                                                     in Duty Cycle Capture Mode.                                               */
  TIMER_0_CONFIG_HMD_ONESHOT           = 7,     /*!< ONESHOT : The high 16-bit timer or entire 32-bit timer is in
                                                     Oneshot Mode.                                                             */
  TIMER_0_CONFIG_HMD_TOGGLE            = 8,     /*!< TOGGLE : The high 16-bit timer or entire 32-bit timer is in
                                                     Toggle Output Mode.                                                       */
  TIMER_0_CONFIG_HMD_PWM               = 9,     /*!< PWM : The high 16-bit timer or entire 32-bit timer is in PWM
                                                     Mode.                                                                     */
} TIMER_0_CONFIG_HMD_Enum;

/* ============================================  TIMER_0 CONFIG HSTATE [28..28]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_HSTATE                                                     */
  TIMER_0_CONFIG_HSTATE_NOT_SET        = 0,     /*!< NOT_SET : NOT_SET                                                         */
  TIMER_0_CONFIG_HSTATE_SET            = 1,     /*!< SET : SET                                                                 */
} TIMER_0_CONFIG_HSTATE_Enum;

/* =============================================  TIMER_0 CONFIG HRUN [29..29]  ============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_HRUN                                                       */
  TIMER_0_CONFIG_HRUN_STOP             = 0,     /*!< STOP : Stop the high timer or entire 32-bit timer.                        */
  TIMER_0_CONFIG_HRUN_START            = 1,     /*!< START : The high timer runs if HMSTREN = 0 or MSTRUN = 1. The
                                                     full 32-bit timer runs if split mode is disabled and (HMSTREN
                                                     = 0 or MSTRUN = 1).                                                       */
} TIMER_0_CONFIG_HRUN_Enum;

/* =============================================  TIMER_0 CONFIG HEXI [30..30]  ============================================== */
typedef enum {                                  /*!< TIMER_0_CONFIG_HEXI                                                       */
  TIMER_0_CONFIG_HEXI_NOT_SET          = 0,     /*!< NOT_SET : Read: A high timer extra interrupt is not pending.
                                                     Write: Clear the interrupt.                                               */
  TIMER_0_CONFIG_HEXI_SET              = 1,     /*!< SET : Read: Indicates the high 16-bit timer (or 32-bit timer
                                                     if SPLITEN = 0) has been captured, reloaded with all 1's
                                                     when counting down, or the timer matched the capture register
                                                     in PWM mode. This interrupt flag can be set by the timer
                                                     module in all modes except Auto-Reload and Toggle. Write:
                                                     Force a high timer extra interrupt.                                       */
} TIMER_0_CONFIG_HEXI_Enum;

/* =============================================  TIMER_0 CONFIG HOVFI [31..31]  ============================================= */
typedef enum {                                  /*!< TIMER_0_CONFIG_HOVFI                                                      */
  TIMER_0_CONFIG_HOVFI_NOT_SET         = 0,     /*!< NOT_SET : Read: A high timer overflow interrupt is not pending.
                                                     Write: Clear the interrupt.                                               */
  TIMER_0_CONFIG_HOVFI_SET             = 1,     /*!< SET : Read: If split mode is enabled (SPLITEN = 1), this value
                                                     indicates the high 16-bit timer has wrapped or reloaded
                                                     after reaching all 1's. If split mode is disabled (SPLITEN
                                                     = 0), this value indicates the 32-bit timer has wrapped
                                                     or reloaded after reaching all 1's. The timer module can
                                                     set this bit in all modes. Write: Force a high timer overflow
                                                     interrupt.                                                                */
} TIMER_0_CONFIG_HOVFI_Enum;

/* ========================================================  CLKDIV  ========================================================= */
/* =========================================================  COUNT  ========================================================= */
/* ========================================================  CAPTURE  ======================================================== */


/* =========================================================================================================================== */
/* ================                                          TIMER_1                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* ==============================================  TIMER_1 CONFIG LCLK [0..1]  =============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_LCLK                                                       */
  TIMER_1_CONFIG_LCLK_APB              = 0,     /*!< APB : Select the APB clock as the timer source.                           */
  TIMER_1_CONFIG_LCLK_EXTOSCN          = 1,     /*!< EXTOSCN : Select the external oscillator clock as the timer
                                                     source. The external oscillator must run slower than one-half
                                                     the APB clock.                                                            */
  TIMER_1_CONFIG_LCLK_TIMER_CLKDIV     = 2,     /*!< TIMER_CLKDIV : Select the dedicated 8-bit prescaler as the timer
                                                     source.                                                                   */
  TIMER_1_CONFIG_LCLK_CT_FALLING_EDGE  = 3,     /*!< CT_FALLING_EDGE : Select falling edges of the CT signal as the
                                                     timer clock source.                                                       */
} TIMER_1_CONFIG_LCLK_Enum;

/* =============================================  TIMER_1 CONFIG LMSTREN [4..4]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_LMSTREN                                                    */
  TIMER_1_CONFIG_LMSTREN_DISABLED      = 0,     /*!< DISABLED : MSTRUN does not need to be set for the low timer
                                                     to run.                                                                   */
  TIMER_1_CONFIG_LMSTREN_ENABLED       = 1,     /*!< ENABLED : MSTRUN must be set for the low timer to run.                    */
} TIMER_1_CONFIG_LMSTREN_Enum;

/* =============================================  TIMER_1 CONFIG SPLITEN [5..5]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_SPLITEN                                                    */
  TIMER_1_CONFIG_SPLITEN_DISABLED      = 0,     /*!< DISABLED : The timer operates as a single 32-bit timer controlled
                                                     by the high timer fields.                                                 */
  TIMER_1_CONFIG_SPLITEN_ENABLED       = 1,     /*!< ENABLED : The timer operates as two independent 16-bit timers.            */
} TIMER_1_CONFIG_SPLITEN_Enum;

/* =============================================  TIMER_1 CONFIG LEXIEN [6..6]  ============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_LEXIEN                                                     */
  TIMER_1_CONFIG_LEXIEN_DISABLED       = 0,     /*!< DISABLED : The state of the LEXI flag does not affect the low
                                                     timer interrupt.                                                          */
  TIMER_1_CONFIG_LEXIEN_ENABLED        = 1,     /*!< ENABLED : A low timer interrupt request is generated if LEXI
                                                     is set to 1.                                                              */
} TIMER_1_CONFIG_LEXIEN_Enum;

/* =============================================  TIMER_1 CONFIG LOVFIEN [7..7]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_LOVFIEN                                                    */
  TIMER_1_CONFIG_LOVFIEN_DISABLED      = 0,     /*!< DISABLED : The state of LOVFI does not affect the low timer
                                                     interrupt.                                                                */
  TIMER_1_CONFIG_LOVFIEN_ENABLED       = 1,     /*!< ENABLED : A low timer interrupt request is generated if LOVFI
                                                     = 1.                                                                      */
} TIMER_1_CONFIG_LOVFIEN_Enum;

/* ==============================================  TIMER_1 CONFIG LMD [8..10]  =============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_LMD                                                        */
  TIMER_1_CONFIG_LMD_AUTO_RELOAD       = 0,     /*!< AUTO_RELOAD : The low timer is in Auto-Reload Mode.                       */
  TIMER_1_CONFIG_LMD_UP_DOWN           = 1,     /*!< UP_DOWN : The low timer is in Up/Down Count Mode.                         */
  TIMER_1_CONFIG_LMD_FALL_CAPTURE      = 2,     /*!< FALL_CAPTURE : The low timer is in Falling Edge Capture Mode.             */
  TIMER_1_CONFIG_LMD_RISE_CAPTURE      = 3,     /*!< RISE_CAPTURE : The low timer is in Rising Edge Capture Mode.              */
  TIMER_1_CONFIG_LMD_LOW_CAPTURE       = 4,     /*!< LOW_CAPTURE : The low timer is in Low Time Capture Mode.                  */
  TIMER_1_CONFIG_LMD_HIGH_CAPTURE      = 5,     /*!< HIGH_CAPTURE : The low timer is in High Time Capture Mode.                */
  TIMER_1_CONFIG_LMD_DC_CAPTURE        = 6,     /*!< DC_CAPTURE : The low timer is in Duty Cycle Capture Mode.                 */
  TIMER_1_CONFIG_LMD_ONESHOT           = 7,     /*!< ONESHOT : The low timer is in Oneshot Mode.                               */
} TIMER_1_CONFIG_LMD_Enum;

/* ============================================  TIMER_1 CONFIG LSTATE [12..12]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_LSTATE                                                     */
  TIMER_1_CONFIG_LSTATE_NOT_SET        = 0,     /*!< NOT_SET : NOT_SET                                                         */
  TIMER_1_CONFIG_LSTATE_SET            = 1,     /*!< SET : SET                                                                 */
} TIMER_1_CONFIG_LSTATE_Enum;

/* =============================================  TIMER_1 CONFIG LRUN [13..13]  ============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_LRUN                                                       */
  TIMER_1_CONFIG_LRUN_STOP             = 0,     /*!< STOP : Stop the low timer if split mode is enabled (SPLITEN
                                                     = 1).                                                                     */
  TIMER_1_CONFIG_LRUN_START            = 1,     /*!< START : The low timer runs if split mode is enabled (SPLITEN
                                                     = 1) and (LMSTREN = 0 or MSTRUN = 1).                                     */
} TIMER_1_CONFIG_LRUN_Enum;

/* =============================================  TIMER_1 CONFIG LEXI [14..14]  ============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_LEXI                                                       */
  TIMER_1_CONFIG_LEXI_NOT_SET          = 0,     /*!< NOT_SET : Read: A low timer extra interrupt is not pending.
                                                     Write: Clear the interrupt.                                               */
  TIMER_1_CONFIG_LEXI_SET              = 1,     /*!< SET : Read: Indicates the low 16-bit timer has been captured,
                                                     reloaded with all 1's when counting down, or the timer
                                                     matched the capture register in PWM mode. This interrupt
                                                     flag can be set by hardware in all modes except Auto-Reload
                                                     and Toggle. This flag is not set by hardware when split
                                                     mode is disabled (SPLITEN = 0). Write: Force a low timer
                                                     extra interrupt.                                                          */
} TIMER_1_CONFIG_LEXI_Enum;

/* =============================================  TIMER_1 CONFIG LOVFI [15..15]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_LOVFI                                                      */
  TIMER_1_CONFIG_LOVFI_NOT_SET         = 0,     /*!< NOT_SET : Read: A low timer overflow interrupt is not pending.
                                                     Write: Clear the interrupt.                                               */
  TIMER_1_CONFIG_LOVFI_SET             = 1,     /*!< SET : Read: The low 16-bit timer has wrapped or reloaded after
                                                     reaching all 1's. This bit is set by the module regardless
                                                     of the state of SPLITEN and can be set in all modes. Write:
                                                     Force a low timer overflow interrupt.                                     */
} TIMER_1_CONFIG_LOVFI_Enum;

/* =============================================  TIMER_1 CONFIG HCLK [16..17]  ============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_HCLK                                                       */
  TIMER_1_CONFIG_HCLK_APB              = 0,     /*!< APB : Select the APB clock as the timer source.                           */
  TIMER_1_CONFIG_HCLK_EXTOSCN          = 1,     /*!< EXTOSCN : Select the external oscillator clock as the timer
                                                     source. The external oscillator must run slower than one-half
                                                     the APB clock.                                                            */
  TIMER_1_CONFIG_HCLK_TIMER_CLKDIV     = 2,     /*!< TIMER_CLKDIV : Select the dedicated 8-bit prescaler as the timer
                                                     source.                                                                   */
  TIMER_1_CONFIG_HCLK_CT_FALLING_EDGE  = 3,     /*!< CT_FALLING_EDGE : Select falling edges of the CT signal as the
                                                     timer clock source.                                                       */
} TIMER_1_CONFIG_HCLK_Enum;

/* ============================================  TIMER_1 CONFIG MSTRUN [19..19]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_MSTRUN                                                     */
  TIMER_1_CONFIG_MSTRUN_STOP           = 0,     /*!< STOP : Disable the master run control for all timers.                     */
  TIMER_1_CONFIG_MSTRUN_START          = 1,     /*!< START : Enable the master run control for all timers.                     */
} TIMER_1_CONFIG_MSTRUN_Enum;

/* ============================================  TIMER_1 CONFIG HMSTREN [20..20]  ============================================ */
typedef enum {                                  /*!< TIMER_1_CONFIG_HMSTREN                                                    */
  TIMER_1_CONFIG_HMSTREN_DISABLED      = 0,     /*!< DISABLED : MSTRUN does not need to be set for the high timer
                                                     to run.                                                                   */
  TIMER_1_CONFIG_HMSTREN_ENABLED       = 1,     /*!< ENABLED : MSTRUN must be set for the high timer to run.                   */
} TIMER_1_CONFIG_HMSTREN_Enum;

/* =============================================  TIMER_1 CONFIG DBGMD [21..21]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_DBGMD                                                      */
  TIMER_1_CONFIG_DBGMD_RUN             = 0,     /*!< RUN : The Timer will continue to operate while the core is halted
                                                     in debug mode.                                                            */
  TIMER_1_CONFIG_DBGMD_HALT            = 1,     /*!< HALT : A debug breakpoint will cause the Timer to halt.                   */
} TIMER_1_CONFIG_DBGMD_Enum;

/* ============================================  TIMER_1 CONFIG HEXIEN [22..22]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_HEXIEN                                                     */
  TIMER_1_CONFIG_HEXIEN_DISABLED       = 0,     /*!< DISABLED : The state of the HEXI flag does not affect the high
                                                     timer interrupt.                                                          */
  TIMER_1_CONFIG_HEXIEN_ENABLED        = 1,     /*!< ENABLED : A high timer interrupt request is generated if HEXI
                                                     is set to 1.                                                              */
} TIMER_1_CONFIG_HEXIEN_Enum;

/* ============================================  TIMER_1 CONFIG HOVFIEN [23..23]  ============================================ */
typedef enum {                                  /*!< TIMER_1_CONFIG_HOVFIEN                                                    */
  TIMER_1_CONFIG_HOVFIEN_DISABLED      = 0,     /*!< DISABLED : The state of HOVFI does not affect the high timer
                                                     interrupt.                                                                */
  TIMER_1_CONFIG_HOVFIEN_ENABLED       = 1,     /*!< ENABLED : A high timer interrupt request is generated if HOVFI
                                                     is set to 1.                                                              */
} TIMER_1_CONFIG_HOVFIEN_Enum;

/* ==============================================  TIMER_1 CONFIG HMD [24..27]  ============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_HMD                                                        */
  TIMER_1_CONFIG_HMD_AUTO_RELOAD       = 0,     /*!< AUTO_RELOAD : The high 16-bit timer or entire 32-bit timer is
                                                     in Auto-Reload Mode.                                                      */
  TIMER_1_CONFIG_HMD_UP_DOWN           = 1,     /*!< UP_DOWN : The high 16-bit timer or entire 32-bit timer is in
                                                     Up/Down Count Mode.                                                       */
  TIMER_1_CONFIG_HMD_FALL_CAPTURE      = 2,     /*!< FALL_CAPTURE : The high 16-bit timer or entire 32-bit timer
                                                     is in Falling Edge Capture Mode.                                          */
  TIMER_1_CONFIG_HMD_RISE_CAPTURE      = 3,     /*!< RISE_CAPTURE : The high 16-bit timer or entire 32-bit timer
                                                     is in Rising Edge Capture Mode.                                           */
  TIMER_1_CONFIG_HMD_LOW_CAPTURE       = 4,     /*!< LOW_CAPTURE : The high 16-bit timer or entire 32-bit timer is
                                                     in Low Time Capture Mode.                                                 */
  TIMER_1_CONFIG_HMD_HIGH_CAPTURE      = 5,     /*!< HIGH_CAPTURE : The high 16-bit timer or entire 32-bit timer
                                                     is in High Time Capture Mode.                                             */
  TIMER_1_CONFIG_HMD_DC_CAPTURE        = 6,     /*!< DC_CAPTURE : The high 16-bit timer or entire 32-bit timer is
                                                     in Duty Cycle Capture Mode.                                               */
  TIMER_1_CONFIG_HMD_ONESHOT           = 7,     /*!< ONESHOT : The high 16-bit timer or entire 32-bit timer is in
                                                     Oneshot Mode.                                                             */
  TIMER_1_CONFIG_HMD_TOGGLE            = 8,     /*!< TOGGLE : The high 16-bit timer or entire 32-bit timer is in
                                                     Toggle Output Mode.                                                       */
  TIMER_1_CONFIG_HMD_PWM               = 9,     /*!< PWM : The high 16-bit timer or entire 32-bit timer is in PWM
                                                     Mode.                                                                     */
} TIMER_1_CONFIG_HMD_Enum;

/* ============================================  TIMER_1 CONFIG HSTATE [28..28]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_HSTATE                                                     */
  TIMER_1_CONFIG_HSTATE_NOT_SET        = 0,     /*!< NOT_SET : NOT_SET                                                         */
  TIMER_1_CONFIG_HSTATE_SET            = 1,     /*!< SET : SET                                                                 */
} TIMER_1_CONFIG_HSTATE_Enum;

/* =============================================  TIMER_1 CONFIG HRUN [29..29]  ============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_HRUN                                                       */
  TIMER_1_CONFIG_HRUN_STOP             = 0,     /*!< STOP : Stop the high timer or entire 32-bit timer.                        */
  TIMER_1_CONFIG_HRUN_START            = 1,     /*!< START : The high timer runs if HMSTREN = 0 or MSTRUN = 1. The
                                                     full 32-bit timer runs if split mode is disabled and (HMSTREN
                                                     = 0 or MSTRUN = 1).                                                       */
} TIMER_1_CONFIG_HRUN_Enum;

/* =============================================  TIMER_1 CONFIG HEXI [30..30]  ============================================== */
typedef enum {                                  /*!< TIMER_1_CONFIG_HEXI                                                       */
  TIMER_1_CONFIG_HEXI_NOT_SET          = 0,     /*!< NOT_SET : Read: A high timer extra interrupt is not pending.
                                                     Write: Clear the interrupt.                                               */
  TIMER_1_CONFIG_HEXI_SET              = 1,     /*!< SET : Read: Indicates the high 16-bit timer (or 32-bit timer
                                                     if SPLITEN = 0) has been captured, reloaded with all 1's
                                                     when counting down, or the timer matched the capture register
                                                     in PWM mode. This interrupt flag can be set by the timer
                                                     module in all modes except Auto-Reload and Toggle. Write:
                                                     Force a high timer extra interrupt.                                       */
} TIMER_1_CONFIG_HEXI_Enum;

/* =============================================  TIMER_1 CONFIG HOVFI [31..31]  ============================================= */
typedef enum {                                  /*!< TIMER_1_CONFIG_HOVFI                                                      */
  TIMER_1_CONFIG_HOVFI_NOT_SET         = 0,     /*!< NOT_SET : Read: A high timer overflow interrupt is not pending.
                                                     Write: Clear the interrupt.                                               */
  TIMER_1_CONFIG_HOVFI_SET             = 1,     /*!< SET : Read: If split mode is enabled (SPLITEN = 1), this value
                                                     indicates the high 16-bit timer has wrapped or reloaded
                                                     after reaching all 1's. If split mode is disabled (SPLITEN
                                                     = 0), this value indicates the 32-bit timer has wrapped
                                                     or reloaded after reaching all 1's. The timer module can
                                                     set this bit in all modes. Write: Force a high timer overflow
                                                     interrupt.                                                                */
} TIMER_1_CONFIG_HOVFI_Enum;

/* ========================================================  CLKDIV  ========================================================= */
/* =========================================================  COUNT  ========================================================= */
/* ========================================================  CAPTURE  ======================================================== */


/* =========================================================================================================================== */
/* ================                                          UART_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  UART_0 CONFIG RSTRTEN [0..0]  ============================================== */
typedef enum {                                  /*!< UART_0_CONFIG_RSTRTEN                                                     */
  UART_0_CONFIG_RSTRTEN_DISABLED       = 0,     /*!< DISABLED : Do not expect a start bit during receptions.                   */
  UART_0_CONFIG_RSTRTEN_ENABLED        = 1,     /*!< ENABLED : Expect a start bit during receptions.                           */
} UART_0_CONFIG_RSTRTEN_Enum;

/* ==============================================  UART_0 CONFIG RPAREN [1..1]  ============================================== */
typedef enum {                                  /*!< UART_0_CONFIG_RPAREN                                                      */
  UART_0_CONFIG_RPAREN_DISABLED        = 0,     /*!< DISABLED : Do not expect a parity bit during receptions.                  */
  UART_0_CONFIG_RPAREN_ENABLED         = 1,     /*!< ENABLED : Expect a parity bit during receptions.                          */
} UART_0_CONFIG_RPAREN_Enum;

/* ==============================================  UART_0 CONFIG RSTPEN [2..2]  ============================================== */
typedef enum {                                  /*!< UART_0_CONFIG_RSTPEN                                                      */
  UART_0_CONFIG_RSTPEN_DISABLED        = 0,     /*!< DISABLED : Do not expect stop bits during receptions.                     */
  UART_0_CONFIG_RSTPEN_ENABLED         = 1,     /*!< ENABLED : Expect stop bits during receptions.                             */
} UART_0_CONFIG_RSTPEN_Enum;

/* ==============================================  UART_0 CONFIG RSTPMD [3..4]  ============================================== */
typedef enum {                                  /*!< UART_0_CONFIG_RSTPMD                                                      */
  UART_0_CONFIG_RSTPMD_0P5_STOP        = 0,     /*!< 0P5_STOP : 0.5 stop bit.                                                  */
  UART_0_CONFIG_RSTPMD_1_STOP          = 1,     /*!< 1_STOP : 1 stop bit.                                                      */
  UART_0_CONFIG_RSTPMD_1P5_STOP        = 2,     /*!< 1P5_STOP : 1.5 stop bits.                                                 */
  UART_0_CONFIG_RSTPMD_2_STOP          = 3,     /*!< 2_STOP : 2 stop bits.                                                     */
} UART_0_CONFIG_RSTPMD_Enum;

/* ==============================================  UART_0 CONFIG RPARMD [5..6]  ============================================== */
typedef enum {                                  /*!< UART_0_CONFIG_RPARMD                                                      */
  UART_0_CONFIG_RPARMD_ODD             = 0,     /*!< ODD : Odd Parity.                                                         */
  UART_0_CONFIG_RPARMD_EVEN            = 1,     /*!< EVEN : Even Parity.                                                       */
  UART_0_CONFIG_RPARMD_MARK            = 2,     /*!< MARK : Set (Parity = 1).                                                  */
  UART_0_CONFIG_RPARMD_SPACE           = 3,     /*!< SPACE : Clear (Parity = 0).                                               */
} UART_0_CONFIG_RPARMD_Enum;

/* =============================================  UART_0 CONFIG RDATLN [8..10]  ============================================== */
typedef enum {                                  /*!< UART_0_CONFIG_RDATLN                                                      */
  UART_0_CONFIG_RDATLN_5_BITS          = 0,     /*!< 5_BITS : 5 bits.                                                          */
  UART_0_CONFIG_RDATLN_6_BITS          = 1,     /*!< 6_BITS : 6 bits.                                                          */
  UART_0_CONFIG_RDATLN_7_BITS          = 2,     /*!< 7_BITS : 7 bits.                                                          */
  UART_0_CONFIG_RDATLN_8_BITS          = 3,     /*!< 8_BITS : 8 bits.                                                          */
  UART_0_CONFIG_RDATLN_9_BITS_STORED   = 4,     /*!< 9_BITS_STORED : 9 bits. The 9th bit is stored in the FIFO (normal
                                                     mode).                                                                    */
  UART_0_CONFIG_RDATLN_9_BITS_MATCH    = 5,     /*!< 9_BITS_MATCH : 9 bits. The 9th bit is not stored in the FIFO
                                                     (fixed mode). This mode is used when the 9th bit is only
                                                     used for match operations (see MATMD).                                    */
} UART_0_CONFIG_RDATLN_Enum;

/* =============================================  UART_0 CONFIG RSCEN [12..12]  ============================================== */
typedef enum {                                  /*!< UART_0_CONFIG_RSCEN                                                       */
  UART_0_CONFIG_RSCEN_DISABLED         = 0,     /*!< DISABLED : The receiver does not send a Smartcard parity error
                                                     response.                                                                 */
  UART_0_CONFIG_RSCEN_ENABLED          = 1,     /*!< ENABLED : The receiver sends a Smartcard Parity response.                 */
} UART_0_CONFIG_RSCEN_Enum;

/* ============================================  UART_0 CONFIG RIRDAEN [13..13]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_RIRDAEN                                                     */
  UART_0_CONFIG_RIRDAEN_DISABLED       = 0,     /*!< DISABLED : The receiver does not operate in IrDA mode.                    */
  UART_0_CONFIG_RIRDAEN_ENABLED        = 1,     /*!< ENABLED : The receiver operates in IrDA mode.                             */
} UART_0_CONFIG_RIRDAEN_Enum;

/* =============================================  UART_0 CONFIG RINVEN [14..14]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_RINVEN                                                      */
  UART_0_CONFIG_RINVEN_DISABLED        = 0,     /*!< DISABLED : Do not invert the RX pin signals (the RX idle state
                                                     is high).                                                                 */
  UART_0_CONFIG_RINVEN_ENABLED         = 1,     /*!< ENABLED : Invert the RX pin signals (the RX idle state is low).           */
} UART_0_CONFIG_RINVEN_Enum;

/* ============================================  UART_0 CONFIG TSTRTEN [16..16]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_TSTRTEN                                                     */
  UART_0_CONFIG_TSTRTEN_DISABLED       = 0,     /*!< DISABLED : Do not generate a start bit during transmissions.              */
  UART_0_CONFIG_TSTRTEN_ENABLED        = 1,     /*!< ENABLED : Generate a start bit during transmissions.                      */
} UART_0_CONFIG_TSTRTEN_Enum;

/* =============================================  UART_0 CONFIG TPAREN [17..17]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_TPAREN                                                      */
  UART_0_CONFIG_TPAREN_DISABLED        = 0,     /*!< DISABLED : Do not send a parity bit during transmissions.                 */
  UART_0_CONFIG_TPAREN_ENABLED         = 1,     /*!< ENABLED : Send a parity bit during transmissions.                         */
} UART_0_CONFIG_TPAREN_Enum;

/* =============================================  UART_0 CONFIG TSTPEN [18..18]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_TSTPEN                                                      */
  UART_0_CONFIG_TSTPEN_DISABLED        = 0,     /*!< DISABLED : Do not send stop bits during transmissions.                    */
  UART_0_CONFIG_TSTPEN_ENABLED         = 1,     /*!< ENABLED : Send stop bits during transmissions.                            */
} UART_0_CONFIG_TSTPEN_Enum;

/* =============================================  UART_0 CONFIG TSTPMD [19..20]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_TSTPMD                                                      */
  UART_0_CONFIG_TSTPMD_0P5_STOP        = 0,     /*!< 0P5_STOP : 0.5 stop bit.                                                  */
  UART_0_CONFIG_TSTPMD_1_STOP          = 1,     /*!< 1_STOP : 1 stop bit.                                                      */
  UART_0_CONFIG_TSTPMD_1P5_STOP        = 2,     /*!< 1P5_STOP : 1.5 stop bits.                                                 */
  UART_0_CONFIG_TSTPMD_2_STOP          = 3,     /*!< 2_STOP : 2 stop bits.                                                     */
} UART_0_CONFIG_TSTPMD_Enum;

/* =============================================  UART_0 CONFIG TPARMD [21..22]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_TPARMD                                                      */
  UART_0_CONFIG_TPARMD_ODD             = 0,     /*!< ODD : Odd Parity.                                                         */
  UART_0_CONFIG_TPARMD_EVEN            = 1,     /*!< EVEN : Even Parity.                                                       */
  UART_0_CONFIG_TPARMD_MARK            = 2,     /*!< MARK : Set (Parity = 1).                                                  */
  UART_0_CONFIG_TPARMD_SPACE           = 3,     /*!< SPACE : Clear (Parity = 0).                                               */
} UART_0_CONFIG_TPARMD_Enum;

/* =============================================  UART_0 CONFIG TDATLN [24..26]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_TDATLN                                                      */
  UART_0_CONFIG_TDATLN_5_BITS          = 0,     /*!< 5_BITS : 5 bits.                                                          */
  UART_0_CONFIG_TDATLN_6_BITS          = 1,     /*!< 6_BITS : 6 bits.                                                          */
  UART_0_CONFIG_TDATLN_7_BITS          = 2,     /*!< 7_BITS : 7 bits.                                                          */
  UART_0_CONFIG_TDATLN_8_BITS          = 3,     /*!< 8_BITS : 8 bits.                                                          */
  UART_0_CONFIG_TDATLN_9_BITS_FIFO     = 4,     /*!< 9_BITS_FIFO : 9 bits. The 9th bit is taken from the FIFO data
                                                     (normal mode).                                                            */
  UART_0_CONFIG_TDATLN_9_BITS_TBIT     = 5,     /*!< 9_BITS_TBIT : 9 bits. The 9th bit is set by the value of TBIT
                                                     (fixed mode).                                                             */
} UART_0_CONFIG_TDATLN_Enum;

/* =============================================  UART_0 CONFIG TSCEN [28..28]  ============================================== */
typedef enum {                                  /*!< UART_0_CONFIG_TSCEN                                                       */
  UART_0_CONFIG_TSCEN_DISABLED         = 0,     /*!< DISABLED : The transmitter does not check for a Smartcard parity
                                                     error response.                                                           */
  UART_0_CONFIG_TSCEN_ENABLED          = 1,     /*!< ENABLED : The transmitter checks for a Smartcard parity error
                                                     response.                                                                 */
} UART_0_CONFIG_TSCEN_Enum;

/* ============================================  UART_0 CONFIG TIRDAEN [29..29]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_TIRDAEN                                                     */
  UART_0_CONFIG_TIRDAEN_DISABLED       = 0,     /*!< DISABLED : Disable IrDA transmit mode.                                    */
  UART_0_CONFIG_TIRDAEN_ENABLED        = 1,     /*!< ENABLED : Enable IrDA transmit mode.                                      */
} UART_0_CONFIG_TIRDAEN_Enum;

/* =============================================  UART_0 CONFIG TINVEN [30..30]  ============================================= */
typedef enum {                                  /*!< UART_0_CONFIG_TINVEN                                                      */
  UART_0_CONFIG_TINVEN_DISABLED        = 0,     /*!< DISABLED : Do not invert the TX pin signals (the TX idle state
                                                     is high).                                                                 */
  UART_0_CONFIG_TINVEN_ENABLED         = 1,     /*!< ENABLED : Invert the TX pin signals (the TX idle state is low).           */
} UART_0_CONFIG_TINVEN_Enum;

/* ======================================================  CONFIG_SET  ======================================================= */
/* ======================================================  CONFIG_CLR  ======================================================= */
/* =========================================================  MODE  ========================================================== */
/* ==============================================  UART_0 MODE DBGMD [16..16]  =============================================== */
typedef enum {                                  /*!< UART_0_MODE_DBGMD                                                         */
  UART_0_MODE_DBGMD_RUN                = 0,     /*!< RUN : The UART module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  UART_0_MODE_DBGMD_HALT               = 1,     /*!< HALT : A debug breakpoint will cause the UART module to halt.
                                                     Any active transmissions and receptions will complete first.              */
} UART_0_MODE_DBGMD_Enum;

/* ===============================================  UART_0 MODE LBMD [18..19]  =============================================== */
typedef enum {                                  /*!< UART_0_MODE_LBMD                                                          */
  UART_0_MODE_LBMD_DISABLED            = 0,     /*!< DISABLED : Loop back is disabled and the TX and RX signals are
                                                     connected to the corresponding external pins.                             */
  UART_0_MODE_LBMD_RX_ONLY             = 1,     /*!< RX_ONLY : Receive loop back. The receiver input path is disconnected
                                                     from the RX pin and internally connected to the transmitter.
                                                     Data transmitted will be sent out on TX and also received
                                                     by the device.                                                            */
  UART_0_MODE_LBMD_TX_ONLY             = 2,     /*!< TX_ONLY : Transmit loop back. The transmitter output path is
                                                     disconnected from the TX pin and the RX input pin is internally
                                                     looped back out to the TX pin. Data received at RX will
                                                     be received by the device and also sent directly back out
                                                     on TX.                                                                    */
  UART_0_MODE_LBMD_BOTH                = 3,     /*!< BOTH : Full loop back. Internally, the transmitter output is
                                                     routed back to the receiver input. Neither the transmitter
                                                     nor receiver are connected to external device pins. The
                                                     device pin RX is looped back to TX in a similar fashion.
                                                     Data transmitted on TX will be sent directly back in on
                                                     RX.                                                                       */
} UART_0_MODE_LBMD_Enum;

/* =============================================  UART_0 MODE DUPLEXMD [27..27]  ============================================= */
typedef enum {                                  /*!< UART_0_MODE_DUPLEXMD                                                      */
  UART_0_MODE_DUPLEXMD_FULL_DUPLEX     = 0,     /*!< FULL_DUPLEX : Full-duplex mode. The transmitter and receiver
                                                     can operate simultaneously.                                               */
  UART_0_MODE_DUPLEXMD_HALF_DUPLEX     = 1,     /*!< HALF_DUPLEX : Half-duplex mode. The transmitter automatically
                                                     inhibits when the receiver is active and the receiver automatically
                                                     inhibits when the transmitter is active.                                  */
} UART_0_MODE_DUPLEXMD_Enum;

/* ==============================================  UART_0 MODE ITSEN [30..30]  =============================================== */
typedef enum {                                  /*!< UART_0_MODE_ITSEN                                                         */
  UART_0_MODE_ITSEN_DISABLED           = 0,     /*!< DISABLED : The TX and UCLK (if in synchronous master mode) pins
                                                     are always an output in this mode, even when idle.                        */
  UART_0_MODE_ITSEN_ENABLED            = 1,     /*!< ENABLED : The TX pin is tristated when idle. If ISTCLK is cleared
                                                     to 0 and the transmitter is configured in synchronous master
                                                     mode, the UCLK pin will also be tristated when idle.                      */
} UART_0_MODE_ITSEN_Enum;

/* =======================================================  MODE_SET  ======================================================== */
/* =======================================================  MODE_CLR  ======================================================== */
/* ========================================================  FLOWCN  ========================================================= */
/* ===============================================  UART_0 FLOWCN RTS [0..0]  ================================================ */
typedef enum {                                  /*!< UART_0_FLOWCN_RTS                                                         */
  UART_0_FLOWCN_RTS_LOW                = 0,     /*!< LOW : RTS pin (before optional inversion) is driven low.                  */
  UART_0_FLOWCN_RTS_HIGH               = 1,     /*!< HIGH : RTS pin (before optional inversion) is driven high.                */
} UART_0_FLOWCN_RTS_Enum;

/* ================================================  UART_0 FLOWCN RX [1..1]  ================================================ */
typedef enum {                                  /*!< UART_0_FLOWCN_RX                                                          */
  UART_0_FLOWCN_RX_LOW                 = 0,     /*!< LOW : RX pin (after optional inversion) is low.                           */
  UART_0_FLOWCN_RX_HIGH                = 1,     /*!< HIGH : RX pin (after optional inversion) is high.                         */
} UART_0_FLOWCN_RX_Enum;

/* =============================================  UART_0 FLOWCN RTSINVEN [5..5]  ============================================= */
typedef enum {                                  /*!< UART_0_FLOWCN_RTSINVEN                                                    */
  UART_0_FLOWCN_RTSINVEN_DISABLED      = 0,     /*!< DISABLED : The UART does not invert the RTS signal before driving
                                                     the pin.                                                                  */
  UART_0_FLOWCN_RTSINVEN_ENABLED       = 1,     /*!< ENABLED : The UART inverts the RTS signal driving the pin.                */
} UART_0_FLOWCN_RTSINVEN_Enum;

/* ==============================================  UART_0 FLOWCN RTSTH [6..6]  =============================================== */
typedef enum {                                  /*!< UART_0_FLOWCN_RTSTH                                                       */
  UART_0_FLOWCN_RTSTH_FULL             = 0,     /*!< FULL : RTS is de-asserted when the receive FIFO and shift register
                                                     are full and no more incoming data can be stored.                         */
  UART_0_FLOWCN_RTSTH_ONE_BYTE_FREE    = 1,     /*!< ONE_BYTE_FREE : RTS is de-asserted when the receive FIFO and
                                                     shift register are nearly full and only one more data can
                                                     be received.                                                              */
} UART_0_FLOWCN_RTSTH_Enum;

/* ==============================================  UART_0 FLOWCN RTSEN [7..7]  =============================================== */
typedef enum {                                  /*!< UART_0_FLOWCN_RTSEN                                                       */
  UART_0_FLOWCN_RTSEN_DISABLED         = 0,     /*!< DISABLED : The RTS state is not changed by hardware. The RTS
                                                     bit can be written only when hardware RTS is disabled (RTSEN
                                                     = 0).                                                                     */
  UART_0_FLOWCN_RTSEN_ENABLED          = 1,     /*!< ENABLED : Hardware sets RTS when the receive FIFO is at or above
                                                     the threshold set by RTSTH and clears RTS otherwise.                      */
} UART_0_FLOWCN_RTSEN_Enum;

/* ==============================================  UART_0 FLOWCN CTS [16..16]  =============================================== */
typedef enum {                                  /*!< UART_0_FLOWCN_CTS                                                         */
  UART_0_FLOWCN_CTS_LOW                = 0,     /*!< LOW : Indicates the CTS pin state (after optional inversion)
                                                     is low.                                                                   */
  UART_0_FLOWCN_CTS_HIGH               = 1,     /*!< HIGH : Indicates the CTS pin state (after optional inversion)
                                                     is high.                                                                  */
} UART_0_FLOWCN_CTS_Enum;

/* ===============================================  UART_0 FLOWCN TX [17..17]  =============================================== */
typedef enum {                                  /*!< UART_0_FLOWCN_TX                                                          */
  UART_0_FLOWCN_TX_LOW                 = 0,     /*!< LOW : The TX pin (before optional inversion) is low.                      */
  UART_0_FLOWCN_TX_HIGH                = 1,     /*!< HIGH : The TX pin (before optional inversion) is high.                    */
} UART_0_FLOWCN_TX_Enum;

/* ============================================  UART_0 FLOWCN CTSINVEN [21..21]  ============================================ */
typedef enum {                                  /*!< UART_0_FLOWCN_CTSINVEN                                                    */
  UART_0_FLOWCN_CTSINVEN_DISABLED      = 0,     /*!< DISABLED : The UART does not invert CTS.                                  */
  UART_0_FLOWCN_CTSINVEN_ENABLED       = 1,     /*!< ENABLED : The UART inverts CTS.                                           */
} UART_0_FLOWCN_CTSINVEN_Enum;

/* =============================================  UART_0 FLOWCN CTSEN [23..23]  ============================================== */
typedef enum {                                  /*!< UART_0_FLOWCN_CTSEN                                                       */
  UART_0_FLOWCN_CTSEN_DISABLED         = 0,     /*!< DISABLED : The CTS pin state does not affect transmissions.               */
  UART_0_FLOWCN_CTSEN_ENABLED          = 1,     /*!< ENABLED : Transmissions will begin only if the CTS pin (after
                                                     optional inversion) is low.                                               */
} UART_0_FLOWCN_CTSEN_Enum;

/* ============================================  UART_0 FLOWCN TIRDAPW [28..29]  ============================================= */
typedef enum {                                  /*!< UART_0_FLOWCN_TIRDAPW                                                     */
  UART_0_FLOWCN_TIRDAPW_1_16TH         = 0,     /*!< 1_16TH : The IrDA pulse width is 1/16th of a bit period.                  */
  UART_0_FLOWCN_TIRDAPW_1_8TH          = 1,     /*!< 1_8TH : The IrDA pulse width is 1/8th of a bit period.                    */
  UART_0_FLOWCN_TIRDAPW_3_16TH         = 2,     /*!< 3_16TH : The IrDA pulse width is 3/16th of a bit period.                  */
  UART_0_FLOWCN_TIRDAPW_1_4TH          = 3,     /*!< 1_4TH : The IrDA pulse width is 1/4th of a bit period.                    */
} UART_0_FLOWCN_TIRDAPW_Enum;

/* ======================================================  FLOWCN_SET  ======================================================= */
/* ======================================================  FLOWCN_CLR  ======================================================= */
/* ========================================================  CONTROL  ======================================================== */
/* =============================================  UART_0 CONTROL RFRMERI [0..0]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_RFRMERI                                                    */
  UART_0_CONTROL_RFRMERI_NOT_SET       = 0,     /*!< NOT_SET : Read: A frame error has not occurred since RFRMERI
                                                     was last cleared. Write: Clear the interrupt.                             */
  UART_0_CONTROL_RFRMERI_SET           = 1,     /*!< SET : Read: A frame error occurred. Write: Force a frame error
                                                     interrupt.                                                                */
} UART_0_CONTROL_RFRMERI_Enum;

/* =============================================  UART_0 CONTROL RPARERI [1..1]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_RPARERI                                                    */
  UART_0_CONTROL_RPARERI_NOT_SET       = 0,     /*!< NOT_SET : Read: An invalid parity bit has not been received
                                                     since RPARERI was last cleared. Write: Clear the interrupt.               */
  UART_0_CONTROL_RPARERI_SET           = 1,     /*!< SET : Read: An invalid parity bit has been received since RPARERI
                                                     was last cleared. Write: Force a parity error interrupt.                  */
} UART_0_CONTROL_RPARERI_Enum;

/* ==============================================  UART_0 CONTROL ROREI [2..2]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_ROREI                                                      */
  UART_0_CONTROL_ROREI_NOT_SET         = 0,     /*!< NOT_SET : Read: A receiver overrun has not occurred since ROREI
                                                     was last cleared. Write: Clear the interrupt.                             */
  UART_0_CONTROL_ROREI_SET             = 1,     /*!< SET : Read: A receiver overrun occurred. Write: Force a receiver
                                                     overrun interrupt.                                                        */
} UART_0_CONTROL_ROREI_Enum;

/* =============================================  UART_0 CONTROL RDREQI [3..3]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_RDREQI                                                     */
  UART_0_CONTROL_RDREQI_NOT_SET        = 0,     /*!< NOT_SET : Fewer than RFTH FIFO slots are filled with data.                */
  UART_0_CONTROL_RDREQI_SET            = 1,     /*!< SET : At least RFTH FIFO slots are filled with data.                      */
} UART_0_CONTROL_RDREQI_Enum;

/* =============================================  UART_0 CONTROL RERIEN [5..5]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_RERIEN                                                     */
  UART_0_CONTROL_RERIEN_DISABLED       = 0,     /*!< DISABLED : Disable the receive error interrupt.                           */
  UART_0_CONTROL_RERIEN_ENABLED        = 1,     /*!< ENABLED : Enable the receive error interrupt. A receive error
                                                     interrupt is asserted when ROREI, RFRMERI, or RPARERI is
                                                     set to 1.                                                                 */
} UART_0_CONTROL_RERIEN_Enum;

/* ============================================  UART_0 CONTROL RDREQIEN [6..6]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_RDREQIEN                                                   */
  UART_0_CONTROL_RDREQIEN_DISABLED     = 0,     /*!< DISABLED : Disable the read data request interrupt.                       */
  UART_0_CONTROL_RDREQIEN_ENABLED      = 1,     /*!< ENABLED : Enable the read data request interrupt. A receive
                                                     interrupt is generated when RDREQI is set to 1.                           */
} UART_0_CONTROL_RDREQIEN_Enum;

/* ==============================================  UART_0 CONTROL MATMD [8..9]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_MATMD                                                      */
  UART_0_CONTROL_MATMD_OFF             = 0,     /*!< OFF : Disable the match function.                                         */
  UART_0_CONTROL_MATMD_MCE             = 1,     /*!< MCE : (MCE) Data whose last data bit equals RBIT is accepted
                                                     and stored.                                                               */
  UART_0_CONTROL_MATMD_FRAME           = 2,     /*!< FRAME : (Frame) A framing error is asserted if the last received
                                                     bit matches RBIT.                                                         */
  UART_0_CONTROL_MATMD_STORE           = 3,     /*!< STORE : (Store) Store the last incoming data bit in RBIT. This
                                                     mode can be used inconjunction with the RDATLN setting.                   */
} UART_0_CONTROL_MATMD_Enum;

/* ============================================  UART_0 CONTROL RABDEN [10..10]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_RABDEN                                                     */
  UART_0_CONTROL_RABDEN_DISABLED       = 0,     /*!< DISABLED : Disable receiver auto-baud.                                    */
  UART_0_CONTROL_RABDEN_ENABLED        = 1,     /*!< ENABLED : Enable receiver auto-baud.                                      */
} UART_0_CONTROL_RABDEN_Enum;

/* ============================================  UART_0 CONTROL RBUSYF [11..11]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_RBUSYF                                                     */
  UART_0_CONTROL_RBUSYF_NOT_SET        = 0,     /*!< NOT_SET : The UART receiver is idle.                                      */
  UART_0_CONTROL_RBUSYF_SET            = 1,     /*!< SET : The UART receiver is receiving data.                                */
} UART_0_CONTROL_RBUSYF_Enum;

/* =============================================  UART_0 CONTROL RBIT [12..12]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_RBIT                                                       */
  UART_0_CONTROL_RBIT_NOT_SET          = 0,     /*!< NOT_SET : NOT_SET                                                         */
  UART_0_CONTROL_RBIT_SET              = 1,     /*!< SET : SET                                                                 */
} UART_0_CONTROL_RBIT_Enum;

/* =============================================  UART_0 CONTROL ROSEN [13..13]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_ROSEN                                                      */
  UART_0_CONTROL_ROSEN_DISABLED        = 0,     /*!< DISABLED : Disable one-shot receive mode.                                 */
  UART_0_CONTROL_ROSEN_ENABLED         = 1,     /*!< ENABLED : Enable one-shot receive mode.                                   */
} UART_0_CONTROL_ROSEN_Enum;

/* =============================================  UART_0 CONTROL RINH [14..14]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_RINH                                                       */
  UART_0_CONTROL_RINH_INACTIVE         = 0,     /*!< INACTIVE : The receiver operates normally.                                */
  UART_0_CONTROL_RINH_ACTIVE           = 1,     /*!< ACTIVE : RTS is immediately asserted when RINH is set. The receiver
                                                     will complete any ongoing reception, but ignore all traffic
                                                     after that.                                                               */
} UART_0_CONTROL_RINH_Enum;

/* ==============================================  UART_0 CONTROL REN [15..15]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_REN                                                        */
  UART_0_CONTROL_REN_DISABLED          = 0,     /*!< DISABLED : Disable the receiver. The receiver can receive one
                                                     data transaction only if ROSEN is set.                                    */
  UART_0_CONTROL_REN_ENABLED           = 1,     /*!< ENABLED : Enable the receiver.                                            */
} UART_0_CONTROL_REN_Enum;

/* ============================================  UART_0 CONTROL TSCERI [16..16]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_TSCERI                                                     */
  UART_0_CONTROL_TSCERI_NOT_SET        = 0,     /*!< NOT_SET : Read: A Smartcard parity error has not occurred since
                                                     TSCERI was last cleared. Write: Clear the interrupt.                      */
  UART_0_CONTROL_TSCERI_SET            = 1,     /*!< SET : Read: A Smartcard parity error occurred. Write: Force
                                                     a Smartcard parity error interrupt.                                       */
} UART_0_CONTROL_TSCERI_Enum;

/* ============================================  UART_0 CONTROL TDREQI [18..18]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_TDREQI                                                     */
  UART_0_CONTROL_TDREQI_NOT_SET        = 0,     /*!< NOT_SET : The transmitter is not requesting more FIFO data.               */
  UART_0_CONTROL_TDREQI_SET            = 1,     /*!< SET : The transmitter is requesting more FIFO data.                       */
} UART_0_CONTROL_TDREQI_Enum;

/* =============================================  UART_0 CONTROL TCPTI [19..19]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_TCPTI                                                      */
  UART_0_CONTROL_TCPTI_NOT_SET         = 0,     /*!< NOT_SET : Read: A transmit has not completed since TCPTI was
                                                     last cleared. Write: Clear the interrupt.                                 */
  UART_0_CONTROL_TCPTI_SET             = 1,     /*!< SET : Read: A byte was transmitted (TCCPTH = 0) or the last
                                                     available byte was transmitted (TCPTTH = 1). Write: Force
                                                     a transmit complete interrupt.                                            */
} UART_0_CONTROL_TCPTI_Enum;

/* ============================================  UART_0 CONTROL TCPTTH [20..20]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_TCPTTH                                                     */
  UART_0_CONTROL_TCPTTH_SET_ON_TX      = 0,     /*!< SET_ON_TX : A transmit is completed (TCPTI = 1) at the end of
                                                     each transmission.                                                        */
  UART_0_CONTROL_TCPTTH_SET_ON_EMPTY   = 1,     /*!< SET_ON_EMPTY : A transmit is completed (TCPTI = 1) only at the
                                                     end of a transmission when no more data is available to
                                                     transmit.                                                                 */
} UART_0_CONTROL_TCPTTH_Enum;

/* ============================================  UART_0 CONTROL TERIEN [21..21]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_TERIEN                                                     */
  UART_0_CONTROL_TERIEN_DISABLED       = 0,     /*!< DISABLED : Disable the transmit error interrupt.                          */
  UART_0_CONTROL_TERIEN_ENABLED        = 1,     /*!< ENABLED : Enable the transmit error interrupt. A transmit interrupt
                                                     is generated when TUREI or TSCERI is set to 1.                            */
} UART_0_CONTROL_TERIEN_Enum;

/* ===========================================  UART_0 CONTROL TDREQIEN [22..22]  ============================================ */
typedef enum {                                  /*!< UART_0_CONTROL_TDREQIEN                                                   */
  UART_0_CONTROL_TDREQIEN_DISABLED     = 0,     /*!< DISABLED : Disable the transmit data request interrupt.                   */
  UART_0_CONTROL_TDREQIEN_ENABLED      = 1,     /*!< ENABLED : Enable the transmit data request interrupt. A transmit
                                                     interrupt is asserted when TDREQI is set to 1.                            */
} UART_0_CONTROL_TDREQIEN_Enum;

/* ============================================  UART_0 CONTROL TCPTIEN [23..23]  ============================================ */
typedef enum {                                  /*!< UART_0_CONTROL_TCPTIEN                                                    */
  UART_0_CONTROL_TCPTIEN_DISABLED      = 0,     /*!< DISABLED : Disable the transmit complete interrupt.                       */
  UART_0_CONTROL_TCPTIEN_ENABLED       = 1,     /*!< ENABLED : Enable the transmit complete interrupt. A transmit
                                                     interrupt is generated when TCPTI is set to 1.                            */
} UART_0_CONTROL_TCPTIEN_Enum;

/* ============================================  UART_0 CONTROL TBUSYF [27..27]  ============================================= */
typedef enum {                                  /*!< UART_0_CONTROL_TBUSYF                                                     */
  UART_0_CONTROL_TBUSYF_NOT_SET        = 0,     /*!< NOT_SET : The UART transmitter is idle.                                   */
  UART_0_CONTROL_TBUSYF_SET            = 1,     /*!< SET : The UART transmitter is active and transmitting.                    */
} UART_0_CONTROL_TBUSYF_Enum;

/* =============================================  UART_0 CONTROL TBIT [28..28]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_TBIT                                                       */
  UART_0_CONTROL_TBIT_NOT_SET          = 0,     /*!< NOT_SET : NOT_SET                                                         */
  UART_0_CONTROL_TBIT_SET              = 1,     /*!< SET : SET                                                                 */
} UART_0_CONTROL_TBIT_Enum;

/* =============================================  UART_0 CONTROL TINH [30..30]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_TINH                                                       */
  UART_0_CONTROL_TINH_INACTIVE         = 0,     /*!< INACTIVE : The transmitter operates normally.                             */
  UART_0_CONTROL_TINH_ACTIVE           = 1,     /*!< ACTIVE : Transmissions are inhibited. The transmitter will stall
                                                     after any current transmission is complete.                               */
} UART_0_CONTROL_TINH_Enum;

/* ==============================================  UART_0 CONTROL TEN [31..31]  ============================================== */
typedef enum {                                  /*!< UART_0_CONTROL_TEN                                                        */
  UART_0_CONTROL_TEN_DISABLED          = 0,     /*!< DISABLED : Disable the transmitter. When cleared, the transmitter
                                                     immediately aborts any active transmission. Clearing this
                                                     bit does not automatically flush the transmit FIFO.                       */
  UART_0_CONTROL_TEN_ENABLED           = 1,     /*!< ENABLED : Enable the transmitter. The transmitter will initiate
                                                     a transmission when data becomes available in the transmit
                                                     FIFO.                                                                     */
} UART_0_CONTROL_TEN_Enum;

/* ======================================================  CONTROL_SET  ====================================================== */
/* ======================================================  CONTROL_CLR  ====================================================== */
/* ========================================================  IPDELAY  ======================================================== */
/* =======================================================  BAUDRATE  ======================================================== */
/* ========================================================  FIFOCN  ========================================================= */
/* ===============================================  UART_0 FIFOCN RFTH [4..5]  =============================================== */
typedef enum {                                  /*!< UART_0_FIFOCN_RFTH                                                        */
  UART_0_FIFOCN_RFTH_ONE               = 0,     /*!< ONE : A read data request interrupt (RDREQI) is asserted when
                                                     >= 1 FIFO slot is full.                                                   */
  UART_0_FIFOCN_RFTH_TWO               = 1,     /*!< TWO : A read data request interrupt (RDREQI) is asserted when
                                                     >= 2 FIFO slots are full.                                                 */
  UART_0_FIFOCN_RFTH_FOUR              = 2,     /*!< FOUR : A read data request interrupt (RDREQI) is asserted when
                                                     >= 4 FIFO slots are full.                                                 */
} UART_0_FIFOCN_RFTH_Enum;

/* =============================================  UART_0 FIFOCN RFIFOFL [8..8]  ============================================== */
typedef enum {                                  /*!< UART_0_FIFOCN_RFIFOFL                                                     */
  UART_0_FIFOCN_RFIFOFL_SET            = 1,     /*!< SET : Flush the contents of the receive FIFO and any data in
                                                     the receive shift register.                                               */
} UART_0_FIFOCN_RFIFOFL_Enum;

/* ==============================================  UART_0 FIFOCN RFERI [9..9]  =============================================== */
typedef enum {                                  /*!< UART_0_FIFOCN_RFERI                                                       */
  UART_0_FIFOCN_RFERI_NOT_SET          = 0,     /*!< NOT_SET : A receive FIFO error has not occurred since RFERI
                                                     was last cleared.                                                         */
  UART_0_FIFOCN_RFERI_SET              = 1,     /*!< SET : A receive FIFO error occurred.                                      */
} UART_0_FIFOCN_RFERI_Enum;

/* ============================================  UART_0 FIFOCN RSRFULLF [10..10]  ============================================ */
typedef enum {                                  /*!< UART_0_FIFOCN_RSRFULLF                                                    */
  UART_0_FIFOCN_RSRFULLF_NOT_SET       = 0,     /*!< NOT_SET : The receive data shift register is not full.                    */
  UART_0_FIFOCN_RSRFULLF_SET           = 1,     /*!< SET : The receive data shift register is full.                            */
} UART_0_FIFOCN_RSRFULLF_Enum;

/* ==============================================  UART_0 FIFOCN TFTH [20..21]  ============================================== */
typedef enum {                                  /*!< UART_0_FIFOCN_TFTH                                                        */
  UART_0_FIFOCN_TFTH_ONE               = 0,     /*!< ONE : A transmit data request interrupt (TDREQI) is asserted
                                                     when >= 1 FIFO slot is empty.                                             */
  UART_0_FIFOCN_TFTH_TWO               = 1,     /*!< TWO : A transmit data request interrupt (TDREQI) is asserted
                                                     when >= 2 FIFO slots are empty.                                           */
  UART_0_FIFOCN_TFTH_FOUR              = 2,     /*!< FOUR : A transmit data request interrupt (TDREQI) is asserted
                                                     when >= 4 FIFO slots are empty.                                           */
} UART_0_FIFOCN_TFTH_Enum;

/* ============================================  UART_0 FIFOCN TFIFOFL [24..24]  ============================================= */
typedef enum {                                  /*!< UART_0_FIFOCN_TFIFOFL                                                     */
  UART_0_FIFOCN_TFIFOFL_SET            = 1,     /*!< SET : Flush the contents of the transmit FIFO. If data is pending
                                                     in the transmit shift register but a transmit has not begun,
                                                     the shift register is also flushed.                                       */
} UART_0_FIFOCN_TFIFOFL_Enum;

/* =============================================  UART_0 FIFOCN TFERI [25..25]  ============================================== */
typedef enum {                                  /*!< UART_0_FIFOCN_TFERI                                                       */
  UART_0_FIFOCN_TFERI_NOT_SET          = 0,     /*!< NOT_SET : A transmit FIFO error has not occurred since TFERI
                                                     was last cleared.                                                         */
  UART_0_FIFOCN_TFERI_SET              = 1,     /*!< SET : A transmit FIFO error occurred.                                     */
} UART_0_FIFOCN_TFERI_Enum;

/* ============================================  UART_0 FIFOCN TSRFULLF [26..26]  ============================================ */
typedef enum {                                  /*!< UART_0_FIFOCN_TSRFULLF                                                    */
  UART_0_FIFOCN_TSRFULLF_NOT_SET       = 0,     /*!< NOT_SET : The transmit shift register is not full.                        */
  UART_0_FIFOCN_TSRFULLF_SET           = 1,     /*!< SET : The transmit shift register is full.                                */
} UART_0_FIFOCN_TSRFULLF_Enum;

/* ======================================================  FIFOCN_SET  ======================================================= */
/* ======================================================  FIFOCN_CLR  ======================================================= */


/* =========================================================================================================================== */
/* ================                                          USART_0                                          ================ */
/* =========================================================================================================================== */

/* ========================================================  CONFIG  ========================================================= */
/* =============================================  USART_0 CONFIG RSTRTEN [0..0]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_RSTRTEN                                                    */
  USART_0_CONFIG_RSTRTEN_DISABLED      = 0,     /*!< DISABLED : Do not expect a start bit during receptions.                   */
  USART_0_CONFIG_RSTRTEN_ENABLED       = 1,     /*!< ENABLED : Expect a start bit during receptions.                           */
} USART_0_CONFIG_RSTRTEN_Enum;

/* =============================================  USART_0 CONFIG RPAREN [1..1]  ============================================== */
typedef enum {                                  /*!< USART_0_CONFIG_RPAREN                                                     */
  USART_0_CONFIG_RPAREN_DISABLED       = 0,     /*!< DISABLED : Do not expect a parity bit during receptions.                  */
  USART_0_CONFIG_RPAREN_ENABLED        = 1,     /*!< ENABLED : Expect a parity bit during receptions.                          */
} USART_0_CONFIG_RPAREN_Enum;

/* =============================================  USART_0 CONFIG RSTPEN [2..2]  ============================================== */
typedef enum {                                  /*!< USART_0_CONFIG_RSTPEN                                                     */
  USART_0_CONFIG_RSTPEN_DISABLED       = 0,     /*!< DISABLED : Do not expect stop bits during receptions.                     */
  USART_0_CONFIG_RSTPEN_ENABLED        = 1,     /*!< ENABLED : Expect stop bits during receptions.                             */
} USART_0_CONFIG_RSTPEN_Enum;

/* =============================================  USART_0 CONFIG RSTPMD [3..4]  ============================================== */
typedef enum {                                  /*!< USART_0_CONFIG_RSTPMD                                                     */
  USART_0_CONFIG_RSTPMD_0P5_STOP       = 0,     /*!< 0P5_STOP : 0.5 stop bit.                                                  */
  USART_0_CONFIG_RSTPMD_1_STOP         = 1,     /*!< 1_STOP : 1 stop bit.                                                      */
  USART_0_CONFIG_RSTPMD_1P5_STOP       = 2,     /*!< 1P5_STOP : 1.5 stop bits.                                                 */
  USART_0_CONFIG_RSTPMD_2_STOP         = 3,     /*!< 2_STOP : 2 stop bits.                                                     */
} USART_0_CONFIG_RSTPMD_Enum;

/* =============================================  USART_0 CONFIG RPARMD [5..6]  ============================================== */
typedef enum {                                  /*!< USART_0_CONFIG_RPARMD                                                     */
  USART_0_CONFIG_RPARMD_ODD            = 0,     /*!< ODD : Odd Parity.                                                         */
  USART_0_CONFIG_RPARMD_EVEN           = 1,     /*!< EVEN : Even Parity.                                                       */
  USART_0_CONFIG_RPARMD_MARK           = 2,     /*!< MARK : Set (Parity = 1).                                                  */
  USART_0_CONFIG_RPARMD_SPACE          = 3,     /*!< SPACE : Clear (Parity = 0).                                               */
} USART_0_CONFIG_RPARMD_Enum;

/* =============================================  USART_0 CONFIG RDATLN [8..10]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_RDATLN                                                     */
  USART_0_CONFIG_RDATLN_5_BITS         = 0,     /*!< 5_BITS : 5 bits.                                                          */
  USART_0_CONFIG_RDATLN_6_BITS         = 1,     /*!< 6_BITS : 6 bits.                                                          */
  USART_0_CONFIG_RDATLN_7_BITS         = 2,     /*!< 7_BITS : 7 bits.                                                          */
  USART_0_CONFIG_RDATLN_8_BITS         = 3,     /*!< 8_BITS : 8 bits.                                                          */
  USART_0_CONFIG_RDATLN_9_BITS_STORED  = 4,     /*!< 9_BITS_STORED : 9 bits. The 9th bit is stored in the FIFO (normal
                                                     mode).                                                                    */
  USART_0_CONFIG_RDATLN_9_BITS_MATCH   = 5,     /*!< 9_BITS_MATCH : 9 bits. The 9th bit is not stored in the FIFO
                                                     (fixed mode). This mode is used when the 9th bit is only
                                                     used for match operations (see MATMD).                                    */
} USART_0_CONFIG_RDATLN_Enum;

/* =============================================  USART_0 CONFIG RSCEN [12..12]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_RSCEN                                                      */
  USART_0_CONFIG_RSCEN_DISABLED        = 0,     /*!< DISABLED : The receiver does not send a Smartcard parity error
                                                     response.                                                                 */
  USART_0_CONFIG_RSCEN_ENABLED         = 1,     /*!< ENABLED : The receiver sends a Smartcard parity response.                 */
} USART_0_CONFIG_RSCEN_Enum;

/* ============================================  USART_0 CONFIG RIRDAEN [13..13]  ============================================ */
typedef enum {                                  /*!< USART_0_CONFIG_RIRDAEN                                                    */
  USART_0_CONFIG_RIRDAEN_DISABLED      = 0,     /*!< DISABLED : The receiver does not operate in IrDA mode.                    */
  USART_0_CONFIG_RIRDAEN_ENABLED       = 1,     /*!< ENABLED : The receiver operates in IrDA mode.                             */
} USART_0_CONFIG_RIRDAEN_Enum;

/* ============================================  USART_0 CONFIG RINVEN [14..14]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_RINVEN                                                     */
  USART_0_CONFIG_RINVEN_DISABLED       = 0,     /*!< DISABLED : Do not invert the RX pin signals (the RX idle state
                                                     is high).                                                                 */
  USART_0_CONFIG_RINVEN_ENABLED        = 1,     /*!< ENABLED : Invert the RX pin signals (the RX idle state is low).           */
} USART_0_CONFIG_RINVEN_Enum;

/* ============================================  USART_0 CONFIG RSYNCEN [15..15]  ============================================ */
typedef enum {                                  /*!< USART_0_CONFIG_RSYNCEN                                                    */
  USART_0_CONFIG_RSYNCEN_DISABLED      = 0,     /*!< DISABLED : The receiver operates in asynchronous mode.                    */
  USART_0_CONFIG_RSYNCEN_ENABLED       = 1,     /*!< ENABLED : The receiver operates in synchronous mode.                      */
} USART_0_CONFIG_RSYNCEN_Enum;

/* ============================================  USART_0 CONFIG TSTRTEN [16..16]  ============================================ */
typedef enum {                                  /*!< USART_0_CONFIG_TSTRTEN                                                    */
  USART_0_CONFIG_TSTRTEN_DISABLED      = 0,     /*!< DISABLED : Do not generate a start bit during transmissions.              */
  USART_0_CONFIG_TSTRTEN_ENABLED       = 1,     /*!< ENABLED : Generate a start bit during transmissions.                      */
} USART_0_CONFIG_TSTRTEN_Enum;

/* ============================================  USART_0 CONFIG TPAREN [17..17]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_TPAREN                                                     */
  USART_0_CONFIG_TPAREN_DISABLED       = 0,     /*!< DISABLED : Do not send a parity bit during transmissions.                 */
  USART_0_CONFIG_TPAREN_ENABLED        = 1,     /*!< ENABLED : Send a parity bit during transmissions.                         */
} USART_0_CONFIG_TPAREN_Enum;

/* ============================================  USART_0 CONFIG TSTPEN [18..18]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_TSTPEN                                                     */
  USART_0_CONFIG_TSTPEN_DISABLED       = 0,     /*!< DISABLED : Do not send stop bits during transmissions.                    */
  USART_0_CONFIG_TSTPEN_ENABLED        = 1,     /*!< ENABLED : Send stop bits during transmissions.                            */
} USART_0_CONFIG_TSTPEN_Enum;

/* ============================================  USART_0 CONFIG TSTPMD [19..20]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_TSTPMD                                                     */
  USART_0_CONFIG_TSTPMD_0P5_STOP       = 0,     /*!< 0P5_STOP : 0.5 stop bit.                                                  */
  USART_0_CONFIG_TSTPMD_1_STOP         = 1,     /*!< 1_STOP : 1 stop bit.                                                      */
  USART_0_CONFIG_TSTPMD_1P5_STOP       = 2,     /*!< 1P5_STOP : 1.5 stop bits.                                                 */
  USART_0_CONFIG_TSTPMD_2_STOP         = 3,     /*!< 2_STOP : 2 stop bits.                                                     */
} USART_0_CONFIG_TSTPMD_Enum;

/* ============================================  USART_0 CONFIG TPARMD [21..22]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_TPARMD                                                     */
  USART_0_CONFIG_TPARMD_ODD            = 0,     /*!< ODD : Odd Parity.                                                         */
  USART_0_CONFIG_TPARMD_EVEN           = 1,     /*!< EVEN : Even Parity.                                                       */
  USART_0_CONFIG_TPARMD_MARK           = 2,     /*!< MARK : Set (Parity = 1).                                                  */
  USART_0_CONFIG_TPARMD_SPACE          = 3,     /*!< SPACE : Clear (Parity = 0).                                               */
} USART_0_CONFIG_TPARMD_Enum;

/* ============================================  USART_0 CONFIG TDATLN [24..26]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_TDATLN                                                     */
  USART_0_CONFIG_TDATLN_5_BITS         = 0,     /*!< 5_BITS : 5 bits.                                                          */
  USART_0_CONFIG_TDATLN_6_BITS         = 1,     /*!< 6_BITS : 6 bits.                                                          */
  USART_0_CONFIG_TDATLN_7_BITS         = 2,     /*!< 7_BITS : 7 bits.                                                          */
  USART_0_CONFIG_TDATLN_8_BITS         = 3,     /*!< 8_BITS : 8 bits.                                                          */
  USART_0_CONFIG_TDATLN_9_BITS_FIFO    = 4,     /*!< 9_BITS_FIFO : 9 bits. The 9th bit is taken from the FIFO data
                                                     (normal mode).                                                            */
  USART_0_CONFIG_TDATLN_9_BITS_TBIT    = 5,     /*!< 9_BITS_TBIT : 9 bits. The 9th bit is set by the value of TBIT
                                                     (fixed mode).                                                             */
} USART_0_CONFIG_TDATLN_Enum;

/* =============================================  USART_0 CONFIG TSCEN [28..28]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_TSCEN                                                      */
  USART_0_CONFIG_TSCEN_DISABLED        = 0,     /*!< DISABLED : The transmitter does not check for a Smartcard parity
                                                     error response.                                                           */
  USART_0_CONFIG_TSCEN_ENABLED         = 1,     /*!< ENABLED : The transmitter checks for a Smartcard parity error
                                                     response.                                                                 */
} USART_0_CONFIG_TSCEN_Enum;

/* ============================================  USART_0 CONFIG TIRDAEN [29..29]  ============================================ */
typedef enum {                                  /*!< USART_0_CONFIG_TIRDAEN                                                    */
  USART_0_CONFIG_TIRDAEN_DISABLED      = 0,     /*!< DISABLED : Disable IrDA transmit mode.                                    */
  USART_0_CONFIG_TIRDAEN_ENABLED       = 1,     /*!< ENABLED : Enable IrDA transmit mode.                                      */
} USART_0_CONFIG_TIRDAEN_Enum;

/* ============================================  USART_0 CONFIG TINVEN [30..30]  ============================================= */
typedef enum {                                  /*!< USART_0_CONFIG_TINVEN                                                     */
  USART_0_CONFIG_TINVEN_DISABLED       = 0,     /*!< DISABLED : Do not invert the TX pin signals (the TX idle state
                                                     is high).                                                                 */
  USART_0_CONFIG_TINVEN_ENABLED        = 1,     /*!< ENABLED : Invert the TX pin signals (the TX idle state is low).           */
} USART_0_CONFIG_TINVEN_Enum;

/* ============================================  USART_0 CONFIG TSYNCEN [31..31]  ============================================ */
typedef enum {                                  /*!< USART_0_CONFIG_TSYNCEN                                                    */
  USART_0_CONFIG_TSYNCEN_DISABLED      = 0,     /*!< DISABLED : The transmitter operates in asynchronous mode.                 */
  USART_0_CONFIG_TSYNCEN_ENABLED       = 1,     /*!< ENABLED : The transmitter operates in synchronous mode.                   */
} USART_0_CONFIG_TSYNCEN_Enum;

/* =========================================================  MODE  ========================================================== */
/* ==============================================  USART_0 MODE DBGMD [16..16]  ============================================== */
typedef enum {                                  /*!< USART_0_MODE_DBGMD                                                        */
  USART_0_MODE_DBGMD_RUN               = 0,     /*!< RUN : The USART module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  USART_0_MODE_DBGMD_HALT              = 1,     /*!< HALT : A debug breakpoint will cause the USART module to halt.
                                                     Any active transmissions and receptions will complete first.              */
} USART_0_MODE_DBGMD_Enum;

/* ==============================================  USART_0 MODE LBMD [18..19]  =============================================== */
typedef enum {                                  /*!< USART_0_MODE_LBMD                                                         */
  USART_0_MODE_LBMD_DISABLED           = 0,     /*!< DISABLED : Loop back is disabled and the TX and RX signals are
                                                     connected to the corresponding external pins.                             */
  USART_0_MODE_LBMD_RXONLY             = 1,     /*!< RXONLY : Receive loop back. The receiver input path is disconnected
                                                     from the RX pin and internally connected to the transmitter.
                                                     Data transmitted will be sent out on TX and also received
                                                     by the device.                                                            */
  USART_0_MODE_LBMD_TXONLY             = 2,     /*!< TXONLY : Transmit loop back. The transmitter output path is
                                                     disconnected from the TX pin and the RX input pin is internally
                                                     looped back out to the TX pin. Data received at RX will
                                                     be received by the device and also sent directly back out
                                                     on TX.                                                                    */
  USART_0_MODE_LBMD_BOTH               = 3,     /*!< BOTH : Full loop back. Internally, the transmitter output is
                                                     routed back to the receiver input. Neither the transmitter
                                                     nor receiver are connected to external device pins. The
                                                     device pin RX is looped back to TX in a similar fashion.
                                                     Data transmitted on TX will be sent directly back in on
                                                     RX.                                                                       */
} USART_0_MODE_LBMD_Enum;

/* ============================================  USART_0 MODE STPSTCLK [21..21]  ============================================= */
typedef enum {                                  /*!< USART_0_MODE_STPSTCLK                                                     */
  USART_0_MODE_STPSTCLK_DISABLED       = 0,     /*!< DISABLED : When the USART is a clock master, the clock is not
                                                     generated during stop bits.                                               */
  USART_0_MODE_STPSTCLK_ENABLED        = 1,     /*!< ENABLED : When the USART is a clock master, the clock is generated
                                                     during stop bits.                                                         */
} USART_0_MODE_STPSTCLK_Enum;

/* ============================================  USART_0 MODE STRTSTCLK [22..22]  ============================================ */
typedef enum {                                  /*!< USART_0_MODE_STRTSTCLK                                                    */
  USART_0_MODE_STRTSTCLK_DISABLED      = 0,     /*!< DISABLED : When the USART is a clock master, the clock is held
                                                     idle during a start bit.                                                  */
  USART_0_MODE_STRTSTCLK_ENABLED       = 1,     /*!< ENABLED : When the USART is a clock master, the clock is generated
                                                     during a start bit.                                                       */
} USART_0_MODE_STRTSTCLK_Enum;

/* =============================================  USART_0 MODE ISTCLK [23..23]  ============================================== */
typedef enum {                                  /*!< USART_0_MODE_ISTCLK                                                       */
  USART_0_MODE_ISTCLK_DISABLED         = 0,     /*!< DISABLED : When the USART is a clock master and CLKESEL is not
                                                     equal to CLKIDLE, the clock is held idle between transmissions.
                                                     When the USART is a clock master and CLKESEL equals CLKIDEL,
                                                     the clock will still be generated between transmissions.
                                                     When the USART is a clock slave, the USART will begin transmissions
                                                     without waiting for the next clock edge.                                  */
  USART_0_MODE_ISTCLK_ENABLED          = 1,     /*!< ENABLED : When the USART is a clock master, the clock is generated
                                                     between transmissions or receptions. When the USART is
                                                     a clock slave, the USART will wait until the next clock
                                                     edge before transmitting.                                                 */
} USART_0_MODE_ISTCLK_Enum;

/* ============================================  USART_0 MODE DUPLEXMD [27..27]  ============================================= */
typedef enum {                                  /*!< USART_0_MODE_DUPLEXMD                                                     */
  USART_0_MODE_DUPLEXMD_FULL_DUPLEX    = 0,     /*!< FULL_DUPLEX : Full-duplex mode. The transmitter and receiver
                                                     can operate simultaneously.                                               */
  USART_0_MODE_DUPLEXMD_HALF_DUPLEX    = 1,     /*!< HALF_DUPLEX : Half-duplex mode. The transmitter automatically
                                                     inhibits when the receiver is active and the receiver automatically
                                                     inhibits when the transmitter is active.                                  */
} USART_0_MODE_DUPLEXMD_Enum;

/* =============================================  USART_0 MODE CLKIDLE [28..28]  ============================================= */
typedef enum {                                  /*!< USART_0_MODE_CLKIDLE                                                      */
  USART_0_MODE_CLKIDLE_IDLE_LOW        = 0,     /*!< IDLE_LOW : The synchronous clock is low when idle.                        */
  USART_0_MODE_CLKIDLE_IDLE_HIGH       = 1,     /*!< IDLE_HIGH : The synchronous clock is high when idle.                      */
} USART_0_MODE_CLKIDLE_Enum;

/* =============================================  USART_0 MODE CLKESEL [29..29]  ============================================= */
typedef enum {                                  /*!< USART_0_MODE_CLKESEL                                                      */
  USART_0_MODE_CLKESEL_FALLING         = 0,     /*!< FALLING : The clock falls in the middle of each bit.                      */
  USART_0_MODE_CLKESEL_RISING          = 1,     /*!< RISING : The clock rises in the middle of each bit.                       */
} USART_0_MODE_CLKESEL_Enum;

/* ==============================================  USART_0 MODE ITSEN [30..30]  ============================================== */
typedef enum {                                  /*!< USART_0_MODE_ITSEN                                                        */
  USART_0_MODE_ITSEN_DISABLED          = 0,     /*!< DISABLED : The TX and UCLK (if in synchronous master mode) pins
                                                     are always an output in this mode, even when idle.                        */
  USART_0_MODE_ITSEN_ENABLED           = 1,     /*!< ENABLED : The TX pin is tristated when idle. If ISTCLK is cleared
                                                     to 0 and the transmitter is configured in synchronous master
                                                     mode, the UCLK pin will also be tristated when idle.                      */
} USART_0_MODE_ITSEN_Enum;

/* ==============================================  USART_0 MODE OPMD [31..31]  =============================================== */
typedef enum {                                  /*!< USART_0_MODE_OPMD                                                         */
  USART_0_MODE_OPMD_SLAVE              = 0,     /*!< SLAVE : The USART operates as a slave.                                    */
  USART_0_MODE_OPMD_MASTER             = 1,     /*!< MASTER : The USART operates as a master.                                  */
} USART_0_MODE_OPMD_Enum;

/* ========================================================  FLOWCN  ========================================================= */
/* ===============================================  USART_0 FLOWCN RTS [0..0]  =============================================== */
typedef enum {                                  /*!< USART_0_FLOWCN_RTS                                                        */
  USART_0_FLOWCN_RTS_LOW               = 0,     /*!< LOW : RTS pin (before optional inversion) is driven low.                  */
  USART_0_FLOWCN_RTS_HIGH              = 1,     /*!< HIGH : RTS pin (before optional inversion) is driven high.                */
} USART_0_FLOWCN_RTS_Enum;

/* ===============================================  USART_0 FLOWCN RX [1..1]  ================================================ */
typedef enum {                                  /*!< USART_0_FLOWCN_RX                                                         */
  USART_0_FLOWCN_RX_LOW                = 0,     /*!< LOW : RX pin (after optional inversion) is low.                           */
  USART_0_FLOWCN_RX_HIGH               = 1,     /*!< HIGH : RX pin (after optional inversion) is high.                         */
} USART_0_FLOWCN_RX_Enum;

/* ============================================  USART_0 FLOWCN RTSINVEN [5..5]  ============================================= */
typedef enum {                                  /*!< USART_0_FLOWCN_RTSINVEN                                                   */
  USART_0_FLOWCN_RTSINVEN_DISABLED     = 0,     /*!< DISABLED : The USART does not invert the RTS signal before driving
                                                     the pin.                                                                  */
  USART_0_FLOWCN_RTSINVEN_ENABLED      = 1,     /*!< ENABLED : The USART inverts the RTS signal driving the pin.               */
} USART_0_FLOWCN_RTSINVEN_Enum;

/* ==============================================  USART_0 FLOWCN RTSTH [6..6]  ============================================== */
typedef enum {                                  /*!< USART_0_FLOWCN_RTSTH                                                      */
  USART_0_FLOWCN_RTSTH_FULL            = 0,     /*!< FULL : RTS is de-asserted when the receive FIFO and shift register
                                                     are full and no more incoming data can be stored.                         */
  USART_0_FLOWCN_RTSTH_ONE_BYTE_FREE   = 1,     /*!< ONE_BYTE_FREE : RTS is de-asserted when the receive FIFO and
                                                     shift register are nearly full and only one more data can
                                                     be received.                                                              */
} USART_0_FLOWCN_RTSTH_Enum;

/* ==============================================  USART_0 FLOWCN RTSEN [7..7]  ============================================== */
typedef enum {                                  /*!< USART_0_FLOWCN_RTSEN                                                      */
  USART_0_FLOWCN_RTSEN_DISABLED        = 0,     /*!< DISABLED : The RTS state is not changed by hardware. The RTS
                                                     bit can be written only when hardware RTS is disabled (RTSEN
                                                     = 0).                                                                     */
  USART_0_FLOWCN_RTSEN_ENABLED         = 1,     /*!< ENABLED : Hardware sets RTS when the receive FIFO is at or above
                                                     the threshold set by RTSTH and clears RTS otherwise.                      */
} USART_0_FLOWCN_RTSEN_Enum;

/* ==============================================  USART_0 FLOWCN CTS [16..16]  ============================================== */
typedef enum {                                  /*!< USART_0_FLOWCN_CTS                                                        */
  USART_0_FLOWCN_CTS_LOW               = 0,     /*!< LOW : Indicates the CTS pin state (after optional inversion)
                                                     is low.                                                                   */
  USART_0_FLOWCN_CTS_HIGH              = 1,     /*!< HIGH : Indicates the CTS pin state (after optional inversion)
                                                     is high.                                                                  */
} USART_0_FLOWCN_CTS_Enum;

/* ==============================================  USART_0 FLOWCN TX [17..17]  =============================================== */
typedef enum {                                  /*!< USART_0_FLOWCN_TX                                                         */
  USART_0_FLOWCN_TX_LOW                = 0,     /*!< LOW : The TX pin (before optional inversion) is low.                      */
  USART_0_FLOWCN_TX_HIGH               = 1,     /*!< HIGH : The TX pin (before optional inversion) is high.                    */
} USART_0_FLOWCN_TX_Enum;

/* =============================================  USART_0 FLOWCN UCLK [18..18]  ============================================== */
typedef enum {                                  /*!< USART_0_FLOWCN_UCLK                                                       */
  USART_0_FLOWCN_UCLK_LOW              = 0,     /*!< LOW : The UCLK pin is low.                                                */
  USART_0_FLOWCN_UCLK_HIGH             = 1,     /*!< HIGH : The UCLK pin is high.                                              */
} USART_0_FLOWCN_UCLK_Enum;

/* ===========================================  USART_0 FLOWCN CTSINVEN [21..21]  ============================================ */
typedef enum {                                  /*!< USART_0_FLOWCN_CTSINVEN                                                   */
  USART_0_FLOWCN_CTSINVEN_DISABLED     = 0,     /*!< DISABLED : The USART does not invert CTS.                                 */
  USART_0_FLOWCN_CTSINVEN_ENABLED      = 1,     /*!< ENABLED : The USART inverts CTS.                                          */
} USART_0_FLOWCN_CTSINVEN_Enum;

/* =============================================  USART_0 FLOWCN CTSEN [23..23]  ============================================= */
typedef enum {                                  /*!< USART_0_FLOWCN_CTSEN                                                      */
  USART_0_FLOWCN_CTSEN_DISABLED        = 0,     /*!< DISABLED : The CTS pin state does not affect transmissions.               */
  USART_0_FLOWCN_CTSEN_ENABLED         = 1,     /*!< ENABLED : Transmissions will begin only if the CTS pin (after
                                                     optional inversion) is low.                                               */
} USART_0_FLOWCN_CTSEN_Enum;

/* ============================================  USART_0 FLOWCN TIRDAPW [28..29]  ============================================ */
typedef enum {                                  /*!< USART_0_FLOWCN_TIRDAPW                                                    */
  USART_0_FLOWCN_TIRDAPW_1_16TH        = 0,     /*!< 1_16TH : The IrDA pulse width is 1/16th of a bit period.                  */
  USART_0_FLOWCN_TIRDAPW_1_8TH         = 1,     /*!< 1_8TH : The IrDA pulse width is 1/8th of a bit period.                    */
  USART_0_FLOWCN_TIRDAPW_3_16TH        = 2,     /*!< 3_16TH : The IrDA pulse width is 3/16th of a bit period.                  */
  USART_0_FLOWCN_TIRDAPW_1_4TH         = 3,     /*!< 1_4TH : The IrDA pulse width is 1/4th of a bit period.                    */
} USART_0_FLOWCN_TIRDAPW_Enum;

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  USART_0 CONTROL RFRMERI [0..0]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_RFRMERI                                                   */
  USART_0_CONTROL_RFRMERI_NOT_SET      = 0,     /*!< NOT_SET : Read: A frame error has not occurred since RFRMERI
                                                     was last cleared. Write: Clear the interrupt.                             */
  USART_0_CONTROL_RFRMERI_SET          = 1,     /*!< SET : Read: A frame error occurred. Write: Force a frame error
                                                     interrupt.                                                                */
} USART_0_CONTROL_RFRMERI_Enum;

/* ============================================  USART_0 CONTROL RPARERI [1..1]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_RPARERI                                                   */
  USART_0_CONTROL_RPARERI_NOT_SET      = 0,     /*!< NOT_SET : Read: An invalid parity bit has not been received
                                                     since RPARERI was last cleared. Write: Clear the interrupt.               */
  USART_0_CONTROL_RPARERI_SET          = 1,     /*!< SET : Read: An invalid parity bit has been received since RPARERI
                                                     was last cleared. Write: Force a parity error interrupt.                  */
} USART_0_CONTROL_RPARERI_Enum;

/* =============================================  USART_0 CONTROL ROREI [2..2]  ============================================== */
typedef enum {                                  /*!< USART_0_CONTROL_ROREI                                                     */
  USART_0_CONTROL_ROREI_NOT_SET        = 0,     /*!< NOT_SET : Read: A receiver overrun has not occurred since ROREI
                                                     was last cleared. Write: Clear the interrupt.                             */
  USART_0_CONTROL_ROREI_SET            = 1,     /*!< SET : Read: A receiver overrun occurred. Write: Force a receiver
                                                     overrun interrupt.                                                        */
} USART_0_CONTROL_ROREI_Enum;

/* =============================================  USART_0 CONTROL RDREQI [3..3]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_RDREQI                                                    */
  USART_0_CONTROL_RDREQI_NOT_SET       = 0,     /*!< NOT_SET : Fewer than RFTH FIFO slots are filled with data.                */
  USART_0_CONTROL_RDREQI_SET           = 1,     /*!< SET : At least RFTH FIFO slots are filled with data.                      */
} USART_0_CONTROL_RDREQI_Enum;

/* =============================================  USART_0 CONTROL RERIEN [5..5]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_RERIEN                                                    */
  USART_0_CONTROL_RERIEN_DISABLED      = 0,     /*!< DISABLED : Disable the receive error interrupt.                           */
  USART_0_CONTROL_RERIEN_ENABLED       = 1,     /*!< ENABLED : Enable the receive error interrupt. A receive error
                                                     interrupt is asserted when ROREI, RFRMERI, or RPARERI is
                                                     set to 1.                                                                 */
} USART_0_CONTROL_RERIEN_Enum;

/* ============================================  USART_0 CONTROL RDREQIEN [6..6]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_RDREQIEN                                                  */
  USART_0_CONTROL_RDREQIEN_DISABLED    = 0,     /*!< DISABLED : Disable the read data request interrupt.                       */
  USART_0_CONTROL_RDREQIEN_ENABLED     = 1,     /*!< ENABLED : Enable the read data request interrupt. A receive
                                                     interrupt is generated when RDREQI is set to 1.                           */
} USART_0_CONTROL_RDREQIEN_Enum;

/* =============================================  USART_0 CONTROL MATMD [8..9]  ============================================== */
typedef enum {                                  /*!< USART_0_CONTROL_MATMD                                                     */
  USART_0_CONTROL_MATMD_OFF            = 0,     /*!< OFF : Disable the match function.                                         */
  USART_0_CONTROL_MATMD_MCE            = 1,     /*!< MCE : (MCE) Data whose last data bit equals RBIT is accepted
                                                     and stored.                                                               */
  USART_0_CONTROL_MATMD_FRAME          = 2,     /*!< FRAME : (Frame) A framing error is asserted if the last received
                                                     bit matches RBIT.                                                         */
  USART_0_CONTROL_MATMD_STORE          = 3,     /*!< STORE : (Store) Store the last incoming data bit in RBIT. This
                                                     mode can be used inconjunction with the RDATLN setting.                   */
} USART_0_CONTROL_MATMD_Enum;

/* ============================================  USART_0 CONTROL RABDEN [10..10]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_RABDEN                                                    */
  USART_0_CONTROL_RABDEN_DISABLED      = 0,     /*!< DISABLED : Disable receiver auto-baud.                                    */
  USART_0_CONTROL_RABDEN_ENABLED       = 1,     /*!< ENABLED : Enable receiver auto-baud.                                      */
} USART_0_CONTROL_RABDEN_Enum;

/* ============================================  USART_0 CONTROL RBUSYF [11..11]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_RBUSYF                                                    */
  USART_0_CONTROL_RBUSYF_NOT_SET       = 0,     /*!< NOT_SET : The USART receiver is idle.                                     */
  USART_0_CONTROL_RBUSYF_SET           = 1,     /*!< SET : The USART receiver is receiving data.                               */
} USART_0_CONTROL_RBUSYF_Enum;

/* =============================================  USART_0 CONTROL RBIT [12..12]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_RBIT                                                      */
  USART_0_CONTROL_RBIT_NOT_SET         = 0,     /*!< NOT_SET : NOT_SET                                                         */
  USART_0_CONTROL_RBIT_SET             = 1,     /*!< SET : SET                                                                 */
} USART_0_CONTROL_RBIT_Enum;

/* ============================================  USART_0 CONTROL ROSEN [13..13]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_ROSEN                                                     */
  USART_0_CONTROL_ROSEN_DISABLED       = 0,     /*!< DISABLED : Disable one-shot receive mode.                                 */
  USART_0_CONTROL_ROSEN_ENABLED        = 1,     /*!< ENABLED : Enable one-shot receive mode.                                   */
} USART_0_CONTROL_ROSEN_Enum;

/* =============================================  USART_0 CONTROL RINH [14..14]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_RINH                                                      */
  USART_0_CONTROL_RINH_INACTIVE        = 0,     /*!< INACTIVE : The receiver operates normally.                                */
  USART_0_CONTROL_RINH_ACTIVE          = 1,     /*!< ACTIVE : RTS is immediately asserted when RINH is set. The receiver
                                                     will complete any ongoing reception, but ignore all traffic
                                                     after that.                                                               */
} USART_0_CONTROL_RINH_Enum;

/* =============================================  USART_0 CONTROL REN [15..15]  ============================================== */
typedef enum {                                  /*!< USART_0_CONTROL_REN                                                       */
  USART_0_CONTROL_REN_DISABLED         = 0,     /*!< DISABLED : Disable the receiver. The receiver can receive one
                                                     data transaction only if ROSEN is set.                                    */
  USART_0_CONTROL_REN_ENABLED          = 1,     /*!< ENABLED : Enable the receiver.                                            */
} USART_0_CONTROL_REN_Enum;

/* ============================================  USART_0 CONTROL TSCERI [16..16]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_TSCERI                                                    */
  USART_0_CONTROL_TSCERI_NOT_SET       = 0,     /*!< NOT_SET : Read: A Smartcard parity error has not occurred since
                                                     TSCERI was last cleared. Write: Clear the interrupt.                      */
  USART_0_CONTROL_TSCERI_SET           = 1,     /*!< SET : Read: A Smartcard parity error occurred. Write: Force
                                                     a Smartcard parity error interrupt.                                       */
} USART_0_CONTROL_TSCERI_Enum;

/* ============================================  USART_0 CONTROL TUREI [17..17]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_TUREI                                                     */
  USART_0_CONTROL_TUREI_NOT_SET        = 0,     /*!< NOT_SET : Read: A transmitter underrun has not occurred since
                                                     TUREI was last cleared. Write: Clear the interrupt.                       */
  USART_0_CONTROL_TUREI_SET            = 1,     /*!< SET : Read: A transmitter underrun occurred. Write: Force a
                                                     transmitter underrun interrupt.                                           */
} USART_0_CONTROL_TUREI_Enum;

/* ============================================  USART_0 CONTROL TDREQI [18..18]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_TDREQI                                                    */
  USART_0_CONTROL_TDREQI_NOT_SET       = 0,     /*!< NOT_SET : The transmitter is not requesting more FIFO data.               */
  USART_0_CONTROL_TDREQI_SET           = 1,     /*!< SET : The transmitter is requesting more FIFO data.                       */
} USART_0_CONTROL_TDREQI_Enum;

/* ============================================  USART_0 CONTROL TCPTI [19..19]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_TCPTI                                                     */
  USART_0_CONTROL_TCPTI_NOT_SET        = 0,     /*!< NOT_SET : Read: A transmit has not completed since TCPTI was
                                                     last cleared. Write: Clear the interrupt.                                 */
  USART_0_CONTROL_TCPTI_SET            = 1,     /*!< SET : Read: A byte was transmitted (TCCPTH = 0) or the last
                                                     available byte was transmitted (TCPTTH = 1). Write: Force
                                                     a transmit complete interrupt.                                            */
} USART_0_CONTROL_TCPTI_Enum;

/* ============================================  USART_0 CONTROL TCPTTH [20..20]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_TCPTTH                                                    */
  USART_0_CONTROL_TCPTTH_SET_ON_TX     = 0,     /*!< SET_ON_TX : A transmit is completed (TCPTI = 1) at the end of
                                                     each transmission.                                                        */
  USART_0_CONTROL_TCPTTH_SET_ON_EMPTY  = 1,     /*!< SET_ON_EMPTY : A transmit is completed (TCPTI = 1) only at the
                                                     end of a transmission when no more data is available to
                                                     transmit.                                                                 */
} USART_0_CONTROL_TCPTTH_Enum;

/* ============================================  USART_0 CONTROL TERIEN [21..21]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_TERIEN                                                    */
  USART_0_CONTROL_TERIEN_DISABLED      = 0,     /*!< DISABLED : Disable the transmit error interrupt.                          */
  USART_0_CONTROL_TERIEN_ENABLED       = 1,     /*!< ENABLED : Enable the transmit error interrupt. A transmit interrupt
                                                     is generated when TUREI or TSCERI is set to 1.                            */
} USART_0_CONTROL_TERIEN_Enum;

/* ===========================================  USART_0 CONTROL TDREQIEN [22..22]  =========================================== */
typedef enum {                                  /*!< USART_0_CONTROL_TDREQIEN                                                  */
  USART_0_CONTROL_TDREQIEN_DISABLED    = 0,     /*!< DISABLED : Disable the transmit data request interrupt.                   */
  USART_0_CONTROL_TDREQIEN_ENABLED     = 1,     /*!< ENABLED : Enable the transmit data request interrupt. A transmit
                                                     interrupt is asserted when TDREQI is set to 1.                            */
} USART_0_CONTROL_TDREQIEN_Enum;

/* ===========================================  USART_0 CONTROL TCPTIEN [23..23]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_TCPTIEN                                                   */
  USART_0_CONTROL_TCPTIEN_DISABLED     = 0,     /*!< DISABLED : Disable the transmit complete interrupt.                       */
  USART_0_CONTROL_TCPTIEN_ENABLED      = 1,     /*!< ENABLED : Enable the transmit complete interrupt. A transmit
                                                     interrupt is generated when TCPTI is set to 1.                            */
} USART_0_CONTROL_TCPTIEN_Enum;

/* ============================================  USART_0 CONTROL TBUSYF [27..27]  ============================================ */
typedef enum {                                  /*!< USART_0_CONTROL_TBUSYF                                                    */
  USART_0_CONTROL_TBUSYF_NOT_SET       = 0,     /*!< NOT_SET : The USART transmitter is idle.                                  */
  USART_0_CONTROL_TBUSYF_SET           = 1,     /*!< SET : The USART transmitter is active and transmitting.                   */
} USART_0_CONTROL_TBUSYF_Enum;

/* =============================================  USART_0 CONTROL TBIT [28..28]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_TBIT                                                      */
  USART_0_CONTROL_TBIT_NOT_SET         = 0,     /*!< NOT_SET : NOT_SET                                                         */
  USART_0_CONTROL_TBIT_SET             = 1,     /*!< SET : SET                                                                 */
} USART_0_CONTROL_TBIT_Enum;

/* =============================================  USART_0 CONTROL TINH [30..30]  ============================================= */
typedef enum {                                  /*!< USART_0_CONTROL_TINH                                                      */
  USART_0_CONTROL_TINH_INACTIVE        = 0,     /*!< INACTIVE : The transmitter operates normally.                             */
  USART_0_CONTROL_TINH_ACTIVE          = 1,     /*!< ACTIVE : Transmissions are inhibited. The transmitter will stall
                                                     after any current transmission is complete.                               */
} USART_0_CONTROL_TINH_Enum;

/* =============================================  USART_0 CONTROL TEN [31..31]  ============================================== */
typedef enum {                                  /*!< USART_0_CONTROL_TEN                                                       */
  USART_0_CONTROL_TEN_DISABLED         = 0,     /*!< DISABLED : Disable the transmitter. When cleared, the transmitter
                                                     immediately aborts any active transmission. Clearing this
                                                     bit does not automatically flush the transmit FIFO.                       */
  USART_0_CONTROL_TEN_ENABLED          = 1,     /*!< ENABLED : Enable the transmitter. The transmitter will initiate
                                                     a transmission when data becomes available in the transmit
                                                     FIFO.                                                                     */
} USART_0_CONTROL_TEN_Enum;

/* ========================================================  IPDELAY  ======================================================== */
/* =======================================================  BAUDRATE  ======================================================== */
/* ========================================================  FIFOCN  ========================================================= */
/* ==============================================  USART_0 FIFOCN RFTH [4..5]  =============================================== */
typedef enum {                                  /*!< USART_0_FIFOCN_RFTH                                                       */
  USART_0_FIFOCN_RFTH_ONE              = 0,     /*!< ONE : A DMA request or read data request interrupt (RDREQI)
                                                     is asserted when >= 1 FIFO slot is full.                                  */
  USART_0_FIFOCN_RFTH_TWO              = 1,     /*!< TWO : A DMA request or read data request interrupt (RDREQI)
                                                     is asserted when >= 2 FIFO slots are full.                                */
  USART_0_FIFOCN_RFTH_FOUR             = 2,     /*!< FOUR : A DMA request or read data request interrupt (RDREQ)
                                                     is asserted when >= 4 FIFO slots are full.                                */
} USART_0_FIFOCN_RFTH_Enum;

/* =============================================  USART_0 FIFOCN RDMAEN [7..7]  ============================================== */
typedef enum {                                  /*!< USART_0_FIFOCN_RDMAEN                                                     */
  USART_0_FIFOCN_RDMAEN_DISABLED       = 0,     /*!< DISABLED : Disable receive FIFO DMA requests.                             */
  USART_0_FIFOCN_RDMAEN_ENABLED        = 1,     /*!< ENABLED : Enable receive FIFO DMA requests.                               */
} USART_0_FIFOCN_RDMAEN_Enum;

/* =============================================  USART_0 FIFOCN RFIFOFL [8..8]  ============================================= */
typedef enum {                                  /*!< USART_0_FIFOCN_RFIFOFL                                                    */
  USART_0_FIFOCN_RFIFOFL_SET           = 1,     /*!< SET : Flush the contents of the receive FIFO and any data in
                                                     the receive shift register.                                               */
} USART_0_FIFOCN_RFIFOFL_Enum;

/* ==============================================  USART_0 FIFOCN RFERI [9..9]  ============================================== */
typedef enum {                                  /*!< USART_0_FIFOCN_RFERI                                                      */
  USART_0_FIFOCN_RFERI_NOT_SET         = 0,     /*!< NOT_SET : A receive FIFO error has not occurred since RFERI
                                                     was last cleared.                                                         */
  USART_0_FIFOCN_RFERI_SET             = 1,     /*!< SET : A receive FIFO error occurred.                                      */
} USART_0_FIFOCN_RFERI_Enum;

/* ===========================================  USART_0 FIFOCN RSRFULLF [10..10]  ============================================ */
typedef enum {                                  /*!< USART_0_FIFOCN_RSRFULLF                                                   */
  USART_0_FIFOCN_RSRFULLF_NOT_SET      = 0,     /*!< NOT_SET : The receive data shift register is not full.                    */
  USART_0_FIFOCN_RSRFULLF_SET          = 1,     /*!< SET : The receive data shift register is full.                            */
} USART_0_FIFOCN_RSRFULLF_Enum;

/* =============================================  USART_0 FIFOCN TFTH [20..21]  ============================================== */
typedef enum {                                  /*!< USART_0_FIFOCN_TFTH                                                       */
  USART_0_FIFOCN_TFTH_ONE              = 0,     /*!< ONE : A DMA request or transmit data request interrupt (TDREQI)
                                                     is asserted when >= 1 FIFO slot is empty.                                 */
  USART_0_FIFOCN_TFTH_TWO              = 1,     /*!< TWO : A DMA request or transmit data request interrupt (TDREQI)
                                                     is asserted when >= 2 FIFO slots are empty.                               */
  USART_0_FIFOCN_TFTH_FOUR             = 2,     /*!< FOUR : A DMA request or transmit data request interrupt (TDREQ)
                                                     is asserted when >= 4 FIFO slots are empty.                               */
} USART_0_FIFOCN_TFTH_Enum;

/* ============================================  USART_0 FIFOCN TDMAEN [23..23]  ============================================= */
typedef enum {                                  /*!< USART_0_FIFOCN_TDMAEN                                                     */
  USART_0_FIFOCN_TDMAEN_DISABLED       = 0,     /*!< DISABLED : Disable transmit FIFO DMA requests.                            */
  USART_0_FIFOCN_TDMAEN_ENABLED        = 1,     /*!< ENABLED : Enable transmit FIFO DMA requests.                              */
} USART_0_FIFOCN_TDMAEN_Enum;

/* ============================================  USART_0 FIFOCN TFIFOFL [24..24]  ============================================ */
typedef enum {                                  /*!< USART_0_FIFOCN_TFIFOFL                                                    */
  USART_0_FIFOCN_TFIFOFL_SET           = 1,     /*!< SET : Flush the contents of the transmit FIFO. If data is pending
                                                     in the transmit shift register but a transmit has not begun,
                                                     the shift register is also flushed.                                       */
} USART_0_FIFOCN_TFIFOFL_Enum;

/* =============================================  USART_0 FIFOCN TFERI [25..25]  ============================================= */
typedef enum {                                  /*!< USART_0_FIFOCN_TFERI                                                      */
  USART_0_FIFOCN_TFERI_NOT_SET         = 0,     /*!< NOT_SET : A transmit FIFO error has not occurred since TFERI
                                                     was last cleared.                                                         */
  USART_0_FIFOCN_TFERI_SET             = 1,     /*!< SET : A transmit FIFO error occurred.                                     */
} USART_0_FIFOCN_TFERI_Enum;

/* ===========================================  USART_0 FIFOCN TSRFULLF [26..26]  ============================================ */
typedef enum {                                  /*!< USART_0_FIFOCN_TSRFULLF                                                   */
  USART_0_FIFOCN_TSRFULLF_NOT_SET      = 0,     /*!< NOT_SET : The transmit shift register is not full.                        */
  USART_0_FIFOCN_TSRFULLF_SET          = 1,     /*!< SET : The transmit shift register is full.                                */
} USART_0_FIFOCN_TSRFULLF_Enum;

/* =========================================================  DATA  ========================================================== */


/* =========================================================================================================================== */
/* ================                                           USB_0                                           ================ */
/* =========================================================================================================================== */

/* =========================================================  FADDR  ========================================================= */
/* ==============================================  USB_0 FADDR FADDRUPD [7..7]  ============================================== */
typedef enum {                                  /*!< USB_0_FADDR_FADDRUPD                                                      */
  USB_0_FADDR_FADDRUPD_NOT_SET         = 0,     /*!< NOT_SET : The last address written to FADDR is in effect.                 */
  USB_0_FADDR_FADDRUPD_SET             = 1,     /*!< SET : The last address written to FADDR is not yet in effect.             */
} USB_0_FADDR_FADDRUPD_Enum;

/* =========================================================  POWER  ========================================================= */
/* ===============================================  USB_0 POWER SUSDEN [0..0]  =============================================== */
typedef enum {                                  /*!< USB_0_POWER_SUSDEN                                                        */
  USB_0_POWER_SUSDEN_DISABLED          = 0,     /*!< DISABLED : Disable suspend detection. The USB module will ignore
                                                     suspend signaling on the bus.                                             */
  USB_0_POWER_SUSDEN_ENABLED           = 1,     /*!< ENABLED : Enable suspend detection. The USB module will enter
                                                     suspend mode if it detects suspend signalling on the bus.                 */
} USB_0_POWER_SUSDEN_Enum;

/* ===============================================  USB_0 POWER SUSMDF [1..1]  =============================================== */
typedef enum {                                  /*!< USB_0_POWER_SUSMDF                                                        */
  USB_0_POWER_SUSMDF_NOT_SET           = 0,     /*!< NOT_SET : The USB module is not in suspend mode.                          */
  USB_0_POWER_SUSMDF_SET               = 1,     /*!< SET : The USB module is in suspend mode.                                  */
} USB_0_POWER_SUSMDF_Enum;

/* ===============================================  USB_0 POWER RESUME [2..2]  =============================================== */
typedef enum {                                  /*!< USB_0_POWER_RESUME                                                        */
  USB_0_POWER_RESUME_STOP              = 0,     /*!< STOP : STOP                                                               */
  USB_0_POWER_RESUME_GENERATE          = 1,     /*!< GENERATE : GENERATE                                                       */
} USB_0_POWER_RESUME_Enum;

/* ==============================================  USB_0 POWER RSTDETF [3..3]  =============================================== */
typedef enum {                                  /*!< USB_0_POWER_RSTDETF                                                       */
  USB_0_POWER_RSTDETF_NOT_SET          = 0,     /*!< NOT_SET : Reset signaling is not present on the bus.                      */
  USB_0_POWER_RSTDETF_SET              = 1,     /*!< SET : Reset signaling detected on the bus.                                */
} USB_0_POWER_RSTDETF_Enum;

/* ===============================================  USB_0 POWER USBINH [4..4]  =============================================== */
typedef enum {                                  /*!< USB_0_POWER_USBINH                                                        */
  USB_0_POWER_USBINH_INACTIVE          = 0,     /*!< INACTIVE : Enable the USB module.                                         */
  USB_0_POWER_USBINH_ACTIVE            = 1,     /*!< ACTIVE : USB module inhibited. All USB traffic is ignored.                */
} USB_0_POWER_USBINH_Enum;

/* ===============================================  USB_0 POWER DITHEN [5..5]  =============================================== */
typedef enum {                                  /*!< USB_0_POWER_DITHEN                                                        */
  USB_0_POWER_DITHEN_DISABLED          = 0,     /*!< DISABLED : Disable automatic USB dithering.                               */
  USB_0_POWER_DITHEN_ENABLED           = 1,     /*!< ENABLED : Enable automatic USB dithering.                                 */
} USB_0_POWER_DITHEN_Enum;

/* ==============================================  USB_0 POWER ISOUPDMD [7..7]  ============================================== */
typedef enum {                                  /*!< USB_0_POWER_ISOUPDMD                                                      */
  USB_0_POWER_ISOUPDMD_SEND_ON_IN      = 0,     /*!< SEND_ON_IN : When software writes IPRDYI = 1, USB will send
                                                     the packet when the next IN token is received.                            */
  USB_0_POWER_ISOUPDMD_SEND_ON_SOF     = 1,     /*!< SEND_ON_SOF : When software writes IPRDYI = 1, USB will wait
                                                     for a SOF token before sending the packet. If an IN token
                                                     is received before a SOF token, USB will send a zero-length
                                                     data packet.                                                              */
} USB_0_POWER_ISOUPDMD_Enum;

/* =========================================================  IOINT  ========================================================= */
/* ================================================  USB_0 IOINT EP0I [0..0]  ================================================ */
typedef enum {                                  /*!< USB_0_IOINT_EP0I                                                          */
  USB_0_IOINT_EP0I_NOT_SET             = 0,     /*!< NOT_SET : Read: Endpoint 0 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_EP0I_SET                 = 1,     /*!< SET : Read: Endpoint 0 interrupt occurred. Write: Clear the
                                                     interrupt.                                                                */
} USB_0_IOINT_EP0I_Enum;

/* ================================================  USB_0 IOINT IN1I [1..1]  ================================================ */
typedef enum {                                  /*!< USB_0_IOINT_IN1I                                                          */
  USB_0_IOINT_IN1I_NOT_SET             = 0,     /*!< NOT_SET : Read: IN Endpoint 1 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_IN1I_SET                 = 1,     /*!< SET : Read: IN Endpoint 1 interrupt occurred. Write: Clear the
                                                     interrupt.                                                                */
} USB_0_IOINT_IN1I_Enum;

/* ================================================  USB_0 IOINT IN2I [2..2]  ================================================ */
typedef enum {                                  /*!< USB_0_IOINT_IN2I                                                          */
  USB_0_IOINT_IN2I_NOT_SET             = 0,     /*!< NOT_SET : Read: IN Endpoint 2 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_IN2I_SET                 = 1,     /*!< SET : Read: IN Endpoint 2 interrupt occurred. Write: Clear the
                                                     interrupt.                                                                */
} USB_0_IOINT_IN2I_Enum;

/* ================================================  USB_0 IOINT IN3I [3..3]  ================================================ */
typedef enum {                                  /*!< USB_0_IOINT_IN3I                                                          */
  USB_0_IOINT_IN3I_NOT_SET             = 0,     /*!< NOT_SET : Read: IN Endpoint 3 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_IN3I_SET                 = 1,     /*!< SET : Read: IN Endpoint 3 interrupt occurred. Write: Clear the
                                                     interrupt.                                                                */
} USB_0_IOINT_IN3I_Enum;

/* ================================================  USB_0 IOINT IN4I [4..4]  ================================================ */
typedef enum {                                  /*!< USB_0_IOINT_IN4I                                                          */
  USB_0_IOINT_IN4I_NOT_SET             = 0,     /*!< NOT_SET : Read: IN Endpoint 4 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_IN4I_SET                 = 1,     /*!< SET : Read: IN Endpoint 4 interrupt occurred. Write: Clear the
                                                     interrupt.                                                                */
} USB_0_IOINT_IN4I_Enum;

/* ==============================================  USB_0 IOINT OUT1I [17..17]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINT_OUT1I                                                         */
  USB_0_IOINT_OUT1I_NOT_SET            = 0,     /*!< NOT_SET : Read: OUT Endpoint 1 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_OUT1I_SET                = 1,     /*!< SET : Read: OUT Endpoint 1 interrupt occurred. Write: Clear
                                                     the interrupt.                                                            */
} USB_0_IOINT_OUT1I_Enum;

/* ==============================================  USB_0 IOINT OUT2I [18..18]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINT_OUT2I                                                         */
  USB_0_IOINT_OUT2I_NOT_SET            = 0,     /*!< NOT_SET : Read: OUT Endpoint 2 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_OUT2I_SET                = 1,     /*!< SET : Read: OUT Endpoint 2 interrupt occurred. Write: Clear
                                                     the interrupt.                                                            */
} USB_0_IOINT_OUT2I_Enum;

/* ==============================================  USB_0 IOINT OUT3I [19..19]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINT_OUT3I                                                         */
  USB_0_IOINT_OUT3I_NOT_SET            = 0,     /*!< NOT_SET : Read: OUT Endpoint 3 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_OUT3I_SET                = 1,     /*!< SET : Read: OUT Endpoint 3 interrupt occurred. Write: Clear
                                                     the interrupt.                                                            */
} USB_0_IOINT_OUT3I_Enum;

/* ==============================================  USB_0 IOINT OUT4I [20..20]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINT_OUT4I                                                         */
  USB_0_IOINT_OUT4I_NOT_SET            = 0,     /*!< NOT_SET : Read: OUT Endpoint 4 interrupt has not occurred. Write:
                                                     No effect.                                                                */
  USB_0_IOINT_OUT4I_SET                = 1,     /*!< SET : Read: OUT Endpoint 4 interrupt occurred. Write: Clear
                                                     the interrupt.                                                            */
} USB_0_IOINT_OUT4I_Enum;

/* =========================================================  CMINT  ========================================================= */
/* ================================================  USB_0 CMINT SUSI [0..0]  ================================================ */
typedef enum {                                  /*!< USB_0_CMINT_SUSI                                                          */
  USB_0_CMINT_SUSI_NOT_SET             = 0,     /*!< NOT_SET : Read: Suspend interrupt has not occurred. Write: No
                                                     effect.                                                                   */
  USB_0_CMINT_SUSI_SET                 = 1,     /*!< SET : Read: Suspend interrupt occurred. Write: Clear the interrupt.       */
} USB_0_CMINT_SUSI_Enum;

/* ================================================  USB_0 CMINT RESI [1..1]  ================================================ */
typedef enum {                                  /*!< USB_0_CMINT_RESI                                                          */
  USB_0_CMINT_RESI_NOT_SET             = 0,     /*!< NOT_SET : Read: Resume interrupt has not occurred. Write: No
                                                     effect.                                                                   */
  USB_0_CMINT_RESI_SET                 = 1,     /*!< SET : Read: Resume interrupt occurred. Write: Clear the interrupt.        */
} USB_0_CMINT_RESI_Enum;

/* ================================================  USB_0 CMINT RSTI [2..2]  ================================================ */
typedef enum {                                  /*!< USB_0_CMINT_RSTI                                                          */
  USB_0_CMINT_RSTI_NOT_SET             = 0,     /*!< NOT_SET : Read: Reset interrupt has not occurred. Write: No
                                                     effect.                                                                   */
  USB_0_CMINT_RSTI_SET                 = 1,     /*!< SET : Read: Reset interrupt occurred. Write: Clear the interrupt.         */
} USB_0_CMINT_RSTI_Enum;

/* ================================================  USB_0 CMINT SOFI [3..3]  ================================================ */
typedef enum {                                  /*!< USB_0_CMINT_SOFI                                                          */
  USB_0_CMINT_SOFI_NOT_SET             = 0,     /*!< NOT_SET : Read: SOF interrupt has not occurred. Write: No effect.         */
  USB_0_CMINT_SOFI_SET                 = 1,     /*!< SET : Read: SOF interrupt occurred. Write: Clear the interrupt.           */
} USB_0_CMINT_SOFI_Enum;

/* ========================================================  IOINTE  ========================================================= */
/* ==============================================  USB_0 IOINTE EP0IEN [0..0]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINTE_EP0IEN                                                       */
  USB_0_IOINTE_EP0IEN_DISABLED         = 0,     /*!< DISABLED : Disable the Endpoint 0 interrupt.                              */
  USB_0_IOINTE_EP0IEN_ENABLED          = 1,     /*!< ENABLED : Enable the Endpoint 0 interrupt.                                */
} USB_0_IOINTE_EP0IEN_Enum;

/* ==============================================  USB_0 IOINTE IN1IEN [1..1]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINTE_IN1IEN                                                       */
  USB_0_IOINTE_IN1IEN_DISABLED         = 0,     /*!< DISABLED : Disable the IN Endpoint 1 interrupt.                           */
  USB_0_IOINTE_IN1IEN_ENABLED          = 1,     /*!< ENABLED : Enable the IN Endpoint 1 interrupt.                             */
} USB_0_IOINTE_IN1IEN_Enum;

/* ==============================================  USB_0 IOINTE IN2IEN [2..2]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINTE_IN2IEN                                                       */
  USB_0_IOINTE_IN2IEN_DISABLED         = 0,     /*!< DISABLED : Disable the IN Endpoint 2 interrupt.                           */
  USB_0_IOINTE_IN2IEN_ENABLED          = 1,     /*!< ENABLED : Enable the IN Endpoint 2 interrupt.                             */
} USB_0_IOINTE_IN2IEN_Enum;

/* ==============================================  USB_0 IOINTE IN3IEN [3..3]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINTE_IN3IEN                                                       */
  USB_0_IOINTE_IN3IEN_DISABLED         = 0,     /*!< DISABLED : Disable the IN Endpoint 3 interrupt.                           */
  USB_0_IOINTE_IN3IEN_ENABLED          = 1,     /*!< ENABLED : Enable the IN Endpoint 3 interrupt.                             */
} USB_0_IOINTE_IN3IEN_Enum;

/* ==============================================  USB_0 IOINTE IN4IEN [4..4]  =============================================== */
typedef enum {                                  /*!< USB_0_IOINTE_IN4IEN                                                       */
  USB_0_IOINTE_IN4IEN_DISABLED         = 0,     /*!< DISABLED : Disable the IN Endpoint 4 interrupt.                           */
  USB_0_IOINTE_IN4IEN_ENABLED          = 1,     /*!< ENABLED : Enable the IN Endpoint 4 interrupt.                             */
} USB_0_IOINTE_IN4IEN_Enum;

/* =============================================  USB_0 IOINTE OUT1IEN [17..17]  ============================================= */
typedef enum {                                  /*!< USB_0_IOINTE_OUT1IEN                                                      */
  USB_0_IOINTE_OUT1IEN_DISABLED        = 0,     /*!< DISABLED : Disable the OUT Endpoint 1 interrupt.                          */
  USB_0_IOINTE_OUT1IEN_ENABLED         = 1,     /*!< ENABLED : Enable the OUT Endpoint 1 interrupt.                            */
} USB_0_IOINTE_OUT1IEN_Enum;

/* =============================================  USB_0 IOINTE OUT2IEN [18..18]  ============================================= */
typedef enum {                                  /*!< USB_0_IOINTE_OUT2IEN                                                      */
  USB_0_IOINTE_OUT2IEN_DISABLED        = 0,     /*!< DISABLED : Disable the OUT Endpoint 2 interrupt.                          */
  USB_0_IOINTE_OUT2IEN_ENABLED         = 1,     /*!< ENABLED : Enable the OUT Endpoint 2 interrupt.                            */
} USB_0_IOINTE_OUT2IEN_Enum;

/* =============================================  USB_0 IOINTE OUT3IEN [19..19]  ============================================= */
typedef enum {                                  /*!< USB_0_IOINTE_OUT3IEN                                                      */
  USB_0_IOINTE_OUT3IEN_DISABLED        = 0,     /*!< DISABLED : Disable the OUT Endpoint 3 interrupt.                          */
  USB_0_IOINTE_OUT3IEN_ENABLED         = 1,     /*!< ENABLED : Enable the OUT Endpoint 3 interrupt.                            */
} USB_0_IOINTE_OUT3IEN_Enum;

/* =============================================  USB_0 IOINTE OUT4IEN [20..20]  ============================================= */
typedef enum {                                  /*!< USB_0_IOINTE_OUT4IEN                                                      */
  USB_0_IOINTE_OUT4IEN_DISABLED        = 0,     /*!< DISABLED : Disable the OUT Endpoint 4 interrupt.                          */
  USB_0_IOINTE_OUT4IEN_ENABLED         = 1,     /*!< ENABLED : Enable the OUT Endpoint 4 interrupt.                            */
} USB_0_IOINTE_OUT4IEN_Enum;

/* =======================================================  CMINTEPE  ======================================================== */
/* =============================================  USB_0 CMINTEPE SUSIEN [0..0]  ============================================== */
typedef enum {                                  /*!< USB_0_CMINTEPE_SUSIEN                                                     */
  USB_0_CMINTEPE_SUSIEN_DISABLED       = 0,     /*!< DISABLED : Disable the Suspend interrupt.                                 */
  USB_0_CMINTEPE_SUSIEN_ENABLED        = 1,     /*!< ENABLED : Enable the Suspend interrupt.                                   */
} USB_0_CMINTEPE_SUSIEN_Enum;

/* =============================================  USB_0 CMINTEPE RESIEN [1..1]  ============================================== */
typedef enum {                                  /*!< USB_0_CMINTEPE_RESIEN                                                     */
  USB_0_CMINTEPE_RESIEN_DISABLED       = 0,     /*!< DISABLED : Disable the Resume interrupt.                                  */
  USB_0_CMINTEPE_RESIEN_ENABLED        = 1,     /*!< ENABLED : Enable the Resume interrupt.                                    */
} USB_0_CMINTEPE_RESIEN_Enum;

/* =============================================  USB_0 CMINTEPE RSTIEN [2..2]  ============================================== */
typedef enum {                                  /*!< USB_0_CMINTEPE_RSTIEN                                                     */
  USB_0_CMINTEPE_RSTIEN_DISABLED       = 0,     /*!< DISABLED : Disable the Reset interrupt.                                   */
  USB_0_CMINTEPE_RSTIEN_ENABLED        = 1,     /*!< ENABLED : Enable the Reset interrupt.                                     */
} USB_0_CMINTEPE_RSTIEN_Enum;

/* =============================================  USB_0 CMINTEPE SOFIEN [3..3]  ============================================== */
typedef enum {                                  /*!< USB_0_CMINTEPE_SOFIEN                                                     */
  USB_0_CMINTEPE_SOFIEN_DISABLED       = 0,     /*!< DISABLED : Disable the SOF interrupt.                                     */
  USB_0_CMINTEPE_SOFIEN_ENABLED        = 1,     /*!< ENABLED : Enable the SOF interrupt.                                       */
} USB_0_CMINTEPE_SOFIEN_Enum;

/* =============================================  USB_0 CMINTEPE EP0EN [16..16]  ============================================= */
typedef enum {                                  /*!< USB_0_CMINTEPE_EP0EN                                                      */
  USB_0_CMINTEPE_EP0EN_DISABLED        = 0,     /*!< DISABLED : Disable Endpoint 0 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB_0_CMINTEPE_EP0EN_ENABLED         = 1,     /*!< ENABLED : Enable Endpoint 0 (normal).                                     */
} USB_0_CMINTEPE_EP0EN_Enum;

/* =============================================  USB_0 CMINTEPE EP1EN [17..17]  ============================================= */
typedef enum {                                  /*!< USB_0_CMINTEPE_EP1EN                                                      */
  USB_0_CMINTEPE_EP1EN_DISABLED        = 0,     /*!< DISABLED : Disable Endpoint 1 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB_0_CMINTEPE_EP1EN_ENABLED         = 1,     /*!< ENABLED : Enable Endpoint 1 (normal).                                     */
} USB_0_CMINTEPE_EP1EN_Enum;

/* =============================================  USB_0 CMINTEPE EP2EN [18..18]  ============================================= */
typedef enum {                                  /*!< USB_0_CMINTEPE_EP2EN                                                      */
  USB_0_CMINTEPE_EP2EN_DISABLED        = 0,     /*!< DISABLED : Disable Endpoint 2 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB_0_CMINTEPE_EP2EN_ENABLED         = 1,     /*!< ENABLED : Enable Endpoint 2 (normal).                                     */
} USB_0_CMINTEPE_EP2EN_Enum;

/* =============================================  USB_0 CMINTEPE EP3EN [19..19]  ============================================= */
typedef enum {                                  /*!< USB_0_CMINTEPE_EP3EN                                                      */
  USB_0_CMINTEPE_EP3EN_DISABLED        = 0,     /*!< DISABLED : Disable Endpoint 3 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB_0_CMINTEPE_EP3EN_ENABLED         = 1,     /*!< ENABLED : Enable Endpoint 3 (normal).                                     */
} USB_0_CMINTEPE_EP3EN_Enum;

/* =============================================  USB_0 CMINTEPE EP4EN [20..20]  ============================================= */
typedef enum {                                  /*!< USB_0_CMINTEPE_EP4EN                                                      */
  USB_0_CMINTEPE_EP4EN_DISABLED        = 0,     /*!< DISABLED : Disable Endpoint 4 (no NACK, ACK, or STALL on the
                                                     USB network).                                                             */
  USB_0_CMINTEPE_EP4EN_ENABLED         = 1,     /*!< ENABLED : Enable Endpoint 4 (normal).                                     */
} USB_0_CMINTEPE_EP4EN_Enum;

/* =======================================================  CRCONTROL  ======================================================= */
/* ==============================================  USB_0 CRCONTROL OLEN [4..4]  ============================================== */
typedef enum {                                  /*!< USB_0_CRCONTROL_OLEN                                                      */
  USB_0_CRCONTROL_OLEN_DISABLED        = 0,     /*!< DISABLED : Do not freeze the USB oscillator output frequency
                                                     (closed loop mode).                                                       */
  USB_0_CRCONTROL_OLEN_ENABLED         = 1,     /*!< ENABLED : Freeze the USB oscillator output frequency (open loop
                                                     mode).                                                                    */
} USB_0_CRCONTROL_OLEN_Enum;

/* =============================================  USB_0 CRCONTROL LSCRMD [5..5]  ============================================= */
typedef enum {                                  /*!< USB_0_CRCONTROL_LSCRMD                                                    */
  USB_0_CRCONTROL_LSCRMD_FULL_SPEED    = 0,     /*!< FULL_SPEED : Full Speed Mode.                                             */
  USB_0_CRCONTROL_LSCRMD_LOW_SPEED     = 1,     /*!< LOW_SPEED : Low Speed Mode.                                               */
} USB_0_CRCONTROL_LSCRMD_Enum;

/* =============================================  USB_0 CRCONTROL CRSSEN [6..6]  ============================================= */
typedef enum {                                  /*!< USB_0_CRCONTROL_CRSSEN                                                    */
  USB_0_CRCONTROL_CRSSEN_DISABLED      = 0,     /*!< DISABLED : Normal calibration mode.                                       */
  USB_0_CRCONTROL_CRSSEN_ENABLED       = 1,     /*!< ENABLED : Single step mode.                                               */
} USB_0_CRCONTROL_CRSSEN_Enum;

/* ==============================================  USB_0 CRCONTROL CREN [7..7]  ============================================== */
typedef enum {                                  /*!< USB_0_CRCONTROL_CREN                                                      */
  USB_0_CRCONTROL_CREN_DISABLED        = 0,     /*!< DISABLED : Disable clock recovery.                                        */
  USB_0_CRCONTROL_CREN_ENABLED         = 1,     /*!< ENABLED : Enable clock recovery.                                          */
} USB_0_CRCONTROL_CREN_Enum;

/* =========================================================  FRAME  ========================================================= */
/* =======================================================  TCONTROL  ======================================================== */
/* ===============================================  USB_0 TCONTROL DN [0..0]  ================================================ */
typedef enum {                                  /*!< USB_0_TCONTROL_DN                                                         */
  USB_0_TCONTROL_DN_LOGIC_0            = 0,     /*!< LOGIC_0 : D- signal currently at logic 0.                                 */
  USB_0_TCONTROL_DN_LOGIC_1            = 1,     /*!< LOGIC_1 : D- signal currently at logic 1.                                 */
} USB_0_TCONTROL_DN_Enum;

/* ===============================================  USB_0 TCONTROL DP [1..1]  ================================================ */
typedef enum {                                  /*!< USB_0_TCONTROL_DP                                                         */
  USB_0_TCONTROL_DP_LOGIC_0            = 0,     /*!< LOGIC_0 : D+ signal currently at logic 0.                                 */
  USB_0_TCONTROL_DP_LOGIC_1            = 1,     /*!< LOGIC_1 : D+ signal currently at logic 1.                                 */
} USB_0_TCONTROL_DP_Enum;

/* ==============================================  USB_0 TCONTROL DFREC [2..2]  ============================================== */
typedef enum {                                  /*!< USB_0_TCONTROL_DFREC                                                      */
  USB_0_TCONTROL_DFREC_DIFF_0          = 0,     /*!< DIFF_0 : Differential 0 signalling is present on the bus.                 */
  USB_0_TCONTROL_DFREC_DIFF_1          = 1,     /*!< DIFF_1 : Differential 1 signalling is present on the bus.                 */
} USB_0_TCONTROL_DFREC_Enum;

/* =============================================  USB_0 TCONTROL PHYTST [3..4]  ============================================== */
typedef enum {                                  /*!< USB_0_TCONTROL_PHYTST                                                     */
  USB_0_TCONTROL_PHYTST_MODE0          = 0,     /*!< MODE0 : Mode 0: Normal (non-test mode) (D+ = X, D- = X).                  */
  USB_0_TCONTROL_PHYTST_MODE1          = 1,     /*!< MODE1 : Mode 1: Differential 1 Forced (D+ = 1, D- = 0).                   */
  USB_0_TCONTROL_PHYTST_MODE2          = 2,     /*!< MODE2 : Mode 2: Differential 0 Forced (D+ = 0, D- = 1).                   */
  USB_0_TCONTROL_PHYTST_MODE3          = 3,     /*!< MODE3 : Mode 3: Single-Ended 0 Forced (D+ = 0, D- = 0).                   */
} USB_0_TCONTROL_PHYTST_Enum;

/* ==============================================  USB_0 TCONTROL SSEL [5..5]  =============================================== */
typedef enum {                                  /*!< USB_0_TCONTROL_SSEL                                                       */
  USB_0_TCONTROL_SSEL_LOW_SPEED        = 0,     /*!< LOW_SPEED : USB operates as a Low Speed device. If enabled,
                                                     the internal pull-up resistor appears on the D- line.                     */
  USB_0_TCONTROL_SSEL_FULL_SPEED       = 1,     /*!< FULL_SPEED : USB operates as a Full Speed device. If enabled,
                                                     the internal pull-up resistor appears on the D+ line.                     */
} USB_0_TCONTROL_SSEL_Enum;

/* ==============================================  USB_0 TCONTROL PHYEN [6..6]  ============================================== */
typedef enum {                                  /*!< USB_0_TCONTROL_PHYEN                                                      */
  USB_0_TCONTROL_PHYEN_DISABLED        = 0,     /*!< DISABLED : Disable the USB physical layer Transceiver (suspend).          */
  USB_0_TCONTROL_PHYEN_ENABLED         = 1,     /*!< ENABLED : Enable the USB physical layer Transceiver (normal).             */
} USB_0_TCONTROL_PHYEN_Enum;

/* ==============================================  USB_0 TCONTROL PUEN [7..7]  =============================================== */
typedef enum {                                  /*!< USB_0_TCONTROL_PUEN                                                       */
  USB_0_TCONTROL_PUEN_DISABLED         = 0,     /*!< DISABLED : Disable the internal pull-up resistor (device effectively
                                                     detached from the USB network).                                           */
  USB_0_TCONTROL_PUEN_ENABLED          = 1,     /*!< ENABLED : Enable the internal pull-up resistor when VBUS is
                                                     present (device is attached to the USB network).                          */
} USB_0_TCONTROL_PUEN_Enum;

/* ========================================================  CLKSEL  ========================================================= */
/* ==============================================  USB_0 CLKSEL CLKSEL [0..1]  =============================================== */
typedef enum {                                  /*!< USB_0_CLKSEL_CLKSEL                                                       */
  USB_0_CLKSEL_CLKSEL_USBNOSC          = 0,     /*!< USBNOSC : Select the USB Oscillator as the USB clock.                     */
  USB_0_CLKSEL_CLKSEL_PLLNOSC          = 1,     /*!< PLLNOSC : Select the PLL output as the USB clock.                         */
  USB_0_CLKSEL_CLKSEL_EXTOSCN          = 2,     /*!< EXTOSCN : Select the External Oscillator output (EXTOSCn) as
                                                     the USB clock.                                                            */
} USB_0_CLKSEL_CLKSEL_Enum;

/* ==============================================  USB_0 CLKSEL CLKDIV [4..5]  =============================================== */
typedef enum {                                  /*!< USB_0_CLKSEL_CLKDIV                                                       */
  USB_0_CLKSEL_CLKDIV_DIV1             = 0,     /*!< DIV1 : The USB module uses the selected input clock divided
                                                     by 1.                                                                     */
  USB_0_CLKSEL_CLKDIV_DIV2             = 1,     /*!< DIV2 : The USB module uses the selected input clock divided
                                                     by 2.                                                                     */
  USB_0_CLKSEL_CLKDIV_DIV4             = 2,     /*!< DIV4 : The USB module uses the selected input clock divided
                                                     by 4.                                                                     */
  USB_0_CLKSEL_CLKDIV_DIV8             = 3,     /*!< DIV8 : The USB module uses the selected input clock divided
                                                     by 8.                                                                     */
} USB_0_CLKSEL_CLKDIV_Enum;

/* ===============================================  USB_0 CLKSEL RESET [6..6]  =============================================== */
typedef enum {                                  /*!< USB_0_CLKSEL_RESET                                                        */
  USB_0_CLKSEL_RESET_NOT_SET           = 0,     /*!< NOT_SET : Do not reset the USB module.                                    */
  USB_0_CLKSEL_RESET_SET               = 1,     /*!< SET : Reset the USB module.                                               */
} USB_0_CLKSEL_RESET_Enum;

/* ======================================================  OSCCONTROL  ======================================================= */
/* ============================================  USB_0 OSCCONTROL SUSPEND [5..5]  ============================================ */
typedef enum {                                  /*!< USB_0_OSCCONTROL_SUSPEND                                                  */
  USB_0_OSCCONTROL_SUSPEND_DISABLED    = 0,     /*!< DISABLED : The USB oscillator is not suspended.                           */
  USB_0_OSCCONTROL_SUSPEND_ENABLED     = 1,     /*!< ENABLED : Suspend the USB oscillator.                                     */
} USB_0_OSCCONTROL_SUSPEND_Enum;

/* =============================================  USB_0 OSCCONTROL OSCEN [7..7]  ============================================= */
typedef enum {                                  /*!< USB_0_OSCCONTROL_OSCEN                                                    */
  USB_0_OSCCONTROL_OSCEN_DISABLED      = 0,     /*!< DISABLED : Disable the USB oscillator.                                    */
  USB_0_OSCCONTROL_OSCEN_ENABLED       = 1,     /*!< ENABLED : Enable the USB oscillator.                                      */
} USB_0_OSCCONTROL_OSCEN_Enum;

/* =======================================================  AFADJUST  ======================================================== */
/* =============================================  USB_0 AFADJUST DITHEN [6..6]  ============================================== */
typedef enum {                                  /*!< USB_0_AFADJUST_DITHEN                                                     */
  USB_0_AFADJUST_DITHEN_DISABLED       = 0,     /*!< DISABLED : Disable USB oscillator dithering.                              */
  USB_0_AFADJUST_DITHEN_ENABLED        = 1,     /*!< ENABLED : Enable USB oscillator dithering.                                */
} USB_0_AFADJUST_DITHEN_Enum;

/* ========================================================  FADJUST  ======================================================== */
/* ========================================================  DMAFIFO  ======================================================== */
/* ======================================================  DMACONTROL  ======================================================= */
/* =============================================  USB_0 DMACONTROL DBGMD [4..4]  ============================================= */
typedef enum {                                  /*!< USB_0_DMACONTROL_DBGMD                                                    */
  USB_0_DMACONTROL_DBGMD_RUN           = 0,     /*!< RUN : The USB module will continue to operate while the core
                                                     is halted in debug mode.                                                  */
  USB_0_DMACONTROL_DBGMD_HALT          = 1,     /*!< HALT : A debug breakpoint will prevent the USB DMA buffer from
                                                     transferring data to and from the USB FIFOs when the core
                                                     is halted.                                                                */
} USB_0_DMACONTROL_DBGMD_Enum;

/* =============================================  USB_0 DMACONTROL TERRF [5..5]  ============================================= */
typedef enum {                                  /*!< USB_0_DMACONTROL_TERRF                                                    */
  USB_0_DMACONTROL_TERRF_NOT_SET       = 0,     /*!< NOT_SET : A timeout error has not occurred.                               */
  USB_0_DMACONTROL_TERRF_SET           = 1,     /*!< SET : A timeout error occurred.                                           */
} USB_0_DMACONTROL_TERRF_Enum;

/* ============================================  USB_0 DMACONTROL DBUSYF [6..6]  ============================================= */
typedef enum {                                  /*!< USB_0_DMACONTROL_DBUSYF                                                   */
  USB_0_DMACONTROL_DBUSYF_NOT_SET      = 0,     /*!< NOT_SET : The DMA buffer is not busy.                                     */
  USB_0_DMACONTROL_DBUSYF_SET          = 1,     /*!< SET : The DMA buffer is busy reading or writing an 8-word packet.         */
} USB_0_DMACONTROL_DBUSYF_Enum;

/* ============================================  USB_0 DMACONTROL DFIFOFL [7..7]  ============================================ */
typedef enum {                                  /*!< USB_0_DMACONTROL_DFIFOFL                                                  */
  USB_0_DMACONTROL_DFIFOFL_SET         = 1,     /*!< SET : Flush the USB DMA buffer.                                           */
} USB_0_DMACONTROL_DFIFOFL_Enum;

/* ======================================================  EP0CONTROL  ======================================================= */
/* ============================================  USB_0 EP0CONTROL OPRDYI [0..0]  ============================================= */
typedef enum {                                  /*!< USB_0_EP0CONTROL_OPRDYI                                                   */
  USB_0_EP0CONTROL_OPRDYI_NOT_SET      = 0,     /*!< NOT_SET : A packet is not available.                                      */
  USB_0_EP0CONTROL_OPRDYI_SET          = 1,     /*!< SET : A packet is available.                                              */
} USB_0_EP0CONTROL_OPRDYI_Enum;

/* ============================================  USB_0 EP0CONTROL IPRDYI [1..1]  ============================================= */
typedef enum {                                  /*!< USB_0_EP0CONTROL_IPRDYI                                                   */
  USB_0_EP0CONTROL_IPRDYI_NOT_SET      = 0,     /*!< NOT_SET : A packet is not ready for transmission to host.                 */
  USB_0_EP0CONTROL_IPRDYI_SET          = 1,     /*!< SET : A packet is ready for transmission to host.                         */
} USB_0_EP0CONTROL_IPRDYI_Enum;

/* ============================================  USB_0 EP0CONTROL STSTLI [2..2]  ============================================= */
typedef enum {                                  /*!< USB_0_EP0CONTROL_STSTLI                                                   */
  USB_0_EP0CONTROL_STSTLI_NOT_SET      = 0,     /*!< NOT_SET : Read: A STALL handshake has not been sent or is cleared.
                                                     Write: Clear the interrupt.                                               */
  USB_0_EP0CONTROL_STSTLI_SET          = 1,     /*!< SET : Read: STALL handshake sent. Write: No effect.                       */
} USB_0_EP0CONTROL_STSTLI_Enum;

/* =============================================  USB_0 EP0CONTROL DEND [3..3]  ============================================== */
typedef enum {                                  /*!< USB_0_EP0CONTROL_DEND                                                     */
  USB_0_EP0CONTROL_DEND_NOT_SET        = 0,     /*!< NOT_SET : The current packet is not the last packet of the transfer.      */
  USB_0_EP0CONTROL_DEND_SET            = 1,     /*!< SET : The current packet is the last packet of the transfer.              */
} USB_0_EP0CONTROL_DEND_Enum;

/* ============================================  USB_0 EP0CONTROL SUENDI [4..4]  ============================================= */
typedef enum {                                  /*!< USB_0_EP0CONTROL_SUENDI                                                   */
  USB_0_EP0CONTROL_SUENDI_NOT_SET      = 0,     /*!< NOT_SET : The current packet is not the last packet of setup.             */
  USB_0_EP0CONTROL_SUENDI_SET          = 1,     /*!< SET : The current packet is the last packet of setup.                     */
} USB_0_EP0CONTROL_SUENDI_Enum;

/* =============================================  USB_0 EP0CONTROL SDSTL [5..5]  ============================================= */
typedef enum {                                  /*!< USB_0_EP0CONTROL_SDSTL                                                    */
  USB_0_EP0CONTROL_SDSTL_NOT_SET       = 0,     /*!< NOT_SET : The STALL handshake has been transmitted or not triggered.      */
  USB_0_EP0CONTROL_SDSTL_SET           = 1,     /*!< SET : Initiate a STALL condition.                                         */
} USB_0_EP0CONTROL_SDSTL_Enum;

/* ============================================  USB_0 EP0CONTROL OPRDYIS [6..6]  ============================================ */
typedef enum {                                  /*!< USB_0_EP0CONTROL_OPRDYIS                                                  */
  USB_0_EP0CONTROL_OPRDYIS_NOT_SET     = 0,     /*!< NOT_SET : The out packet has not been processed.                          */
  USB_0_EP0CONTROL_OPRDYIS_SET         = 1,     /*!< SET : The out packet has been received and accepted.                      */
} USB_0_EP0CONTROL_OPRDYIS_Enum;

/* ============================================  USB_0 EP0CONTROL SUENDIS [7..7]  ============================================ */
typedef enum {                                  /*!< USB_0_EP0CONTROL_SUENDIS                                                  */
  USB_0_EP0CONTROL_SUENDIS_NOT_SET     = 0,     /*!< NOT_SET : Setup end has not been serviced.                                */
  USB_0_EP0CONTROL_SUENDIS_SET         = 1,     /*!< SET : Setup end has been serviced.                                        */
} USB_0_EP0CONTROL_SUENDIS_Enum;

/* =======================================================  EP0COUNT  ======================================================== */
/* ========================================================  EP0FIFO  ======================================================== */
/* ======================================================  EPMPSIZE_1  ======================================================= */
/* ======================================================  EPCONTROL_1  ====================================================== */
/* ============================================  USB_0 EPCONTROL_1 IPRDYI [0..0]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_IPRDYI                                                  */
  USB_0_EPCONTROL_1_IPRDYI_NOT_SET     = 0,     /*!< NOT_SET : The packet has been sent or there is an open FIFO
                                                     slot.                                                                     */
  USB_0_EPCONTROL_1_IPRDYI_SET         = 1,     /*!< SET : A packet is loaded in the FIFO.                                     */
} USB_0_EPCONTROL_1_IPRDYI_Enum;

/* ===========================================  USB_0 EPCONTROL_1 IFIFONEF [1..1]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_IFIFONEF                                                */
  USB_0_EPCONTROL_1_IFIFONEF_NOT_SET   = 0,     /*!< NOT_SET : The IN Endpoint FIFO is empty.                                  */
  USB_0_EPCONTROL_1_IFIFONEF_SET       = 1,     /*!< SET : The IN Endpoint FIFO contains one or more packets.                  */
} USB_0_EPCONTROL_1_IFIFONEF_Enum;

/* =============================================  USB_0 EPCONTROL_1 IURF [2..2]  ============================================= */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_IURF                                                    */
  USB_0_EPCONTROL_1_IURF_NOT_SET       = 0,     /*!< NOT_SET : Underrun has not occurred.                                      */
  USB_0_EPCONTROL_1_IURF_SET           = 1,     /*!< SET : Underrun occurred.                                                  */
} USB_0_EPCONTROL_1_IURF_Enum;

/* ===========================================  USB_0 EPCONTROL_1 IFIFOFL [3..3]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_IFIFOFL                                                 */
  USB_0_EPCONTROL_1_IFIFOFL_SET        = 1,     /*!< SET : Flush the IN FIFO.                                                  */
} USB_0_EPCONTROL_1_IFIFOFL_Enum;

/* ============================================  USB_0 EPCONTROL_1 ISDSTL [4..4]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_ISDSTL                                                  */
  USB_0_EPCONTROL_1_ISDSTL_NOT_SET     = 0,     /*!< NOT_SET : Stop sending a stall.                                           */
  USB_0_EPCONTROL_1_ISDSTL_SET         = 1,     /*!< SET : Generate a stall.                                                   */
} USB_0_EPCONTROL_1_ISDSTL_Enum;

/* ===========================================  USB_0 EPCONTROL_1 ISTSTLI [5..5]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_ISTSTLI                                                 */
  USB_0_EPCONTROL_1_ISTSTLI_NOT_SET    = 0,     /*!< NOT_SET : Read: A stall condition has not been sent since this
                                                     bit was last cleared. Write: Clear the interrupt.                         */
  USB_0_EPCONTROL_1_ISTSTLI_SET        = 1,     /*!< SET : Read: A stall condition has been sent since this bit was
                                                     last cleared. Write: No effect.                                           */
} USB_0_EPCONTROL_1_ISTSTLI_Enum;

/* ============================================  USB_0 EPCONTROL_1 ICLRDT [6..6]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_ICLRDT                                                  */
  USB_0_EPCONTROL_1_ICLRDT_NO_RESET    = 0,     /*!< NO_RESET : Do not reset the IN data toggle.                               */
  USB_0_EPCONTROL_1_ICLRDT_RESET       = 1,     /*!< RESET : Reset the IN data toggle.                                         */
} USB_0_EPCONTROL_1_ICLRDT_Enum;

/* ==========================================  USB_0 EPCONTROL_1 SPLITEN [10..10]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_SPLITEN                                                 */
  USB_0_EPCONTROL_1_SPLITEN_DISABLED   = 0,     /*!< DISABLED : Do not split the endpoint FIFO.                                */
  USB_0_EPCONTROL_1_SPLITEN_ENABLED    = 1,     /*!< ENABLED : Split the endpoint FIFO.                                        */
} USB_0_EPCONTROL_1_SPLITEN_Enum;

/* ===========================================  USB_0 EPCONTROL_1 FDTEN [11..11]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_FDTEN                                                   */
  USB_0_EPCONTROL_1_FDTEN_DISABLED     = 0,     /*!< DISABLED : The endpoint data toggle switches only when an ACK
                                                     is received following a data packet transmission.                         */
  USB_0_EPCONTROL_1_FDTEN_ENABLED      = 1,     /*!< ENABLED : The endpoint data toggle is forced to switch after
                                                     every data packet is transmitted, regardless of ACK reception.            */
} USB_0_EPCONTROL_1_FDTEN_Enum;

/* ===========================================  USB_0 EPCONTROL_1 IDMAEN [12..12]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_IDMAEN                                                  */
  USB_0_EPCONTROL_1_IDMAEN_DISABLED    = 0,     /*!< DISABLED : Disable the DMA request for the IN endpoint.                   */
  USB_0_EPCONTROL_1_IDMAEN_ENABLED     = 1,     /*!< ENABLED : Enable the DMA request for the IN endpoint.                     */
} USB_0_EPCONTROL_1_IDMAEN_Enum;

/* ===========================================  USB_0 EPCONTROL_1 DIRSEL [13..13]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_DIRSEL                                                  */
  USB_0_EPCONTROL_1_DIRSEL_OUT         = 0,     /*!< OUT : Select the endpoint direction as OUT.                               */
  USB_0_EPCONTROL_1_DIRSEL_IN          = 1,     /*!< IN : Select the endpoint direction as IN.                                 */
} USB_0_EPCONTROL_1_DIRSEL_Enum;

/* ===========================================  USB_0 EPCONTROL_1 IISOEN [14..14]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_IISOEN                                                  */
  USB_0_EPCONTROL_1_IISOEN_BULK_INT    = 0,     /*!< BULK_INT : Configure the endpoint for Bulk/Interrupt transfers.           */
  USB_0_EPCONTROL_1_IISOEN_ISO         = 1,     /*!< ISO : Configure the endpoint for Isochronous transfers.                   */
} USB_0_EPCONTROL_1_IISOEN_Enum;

/* =========================================  USB_0 EPCONTROL_1 AUTOSETEN [15..15]  ========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_AUTOSETEN                                               */
  USB_0_EPCONTROL_1_AUTOSETEN_DISABLED = 0,     /*!< DISABLED : The IPRDYI bit is not automatically set by hardware.           */
  USB_0_EPCONTROL_1_AUTOSETEN_ENABLED  = 1,     /*!< ENABLED : The IPRDYI bit is automatically set by hardware.                */
} USB_0_EPCONTROL_1_AUTOSETEN_Enum;

/* ===========================================  USB_0 EPCONTROL_1 OPRDYI [16..16]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_OPRDYI                                                  */
  USB_0_EPCONTROL_1_OPRDYI_NOT_SET     = 0,     /*!< NOT_SET : A data packet is not available.                                 */
  USB_0_EPCONTROL_1_OPRDYI_SET         = 1,     /*!< SET : A data packet is available.                                         */
} USB_0_EPCONTROL_1_OPRDYI_Enum;

/* ==========================================  USB_0 EPCONTROL_1 OFIFOFF [17..17]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_OFIFOFF                                                 */
  USB_0_EPCONTROL_1_OFIFOFF_NOT_SET    = 0,     /*!< NOT_SET : The OUT endpoint FIFO is not full.                              */
  USB_0_EPCONTROL_1_OFIFOFF_SET        = 1,     /*!< SET : The OUT endpoint FIFO is full.                                      */
} USB_0_EPCONTROL_1_OFIFOFF_Enum;

/* ============================================  USB_0 EPCONTROL_1 OORF [18..18]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_OORF                                                    */
  USB_0_EPCONTROL_1_OORF_NOT_SET       = 0,     /*!< NOT_SET : No data overrun.                                                */
  USB_0_EPCONTROL_1_OORF_SET           = 1,     /*!< SET : A data packet was lost because of a full FIFO since this
                                                     flag was last cleared.                                                    */
} USB_0_EPCONTROL_1_OORF_Enum;

/* ===========================================  USB_0 EPCONTROL_1 ODERRF [19..19]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_ODERRF                                                  */
  USB_0_EPCONTROL_1_ODERRF_NOT_SET     = 0,     /*!< NOT_SET : A CRC or bit-stuff error has not occurred.                      */
  USB_0_EPCONTROL_1_ODERRF_SET         = 1,     /*!< SET : A CRC or bit-stuff error occurred.                                  */
} USB_0_EPCONTROL_1_ODERRF_Enum;

/* ==========================================  USB_0 EPCONTROL_1 OFIFOFL [20..20]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_OFIFOFL                                                 */
  USB_0_EPCONTROL_1_OFIFOFL_SET        = 1,     /*!< SET : Flush the OUT FIFO.                                                 */
} USB_0_EPCONTROL_1_OFIFOFL_Enum;

/* ===========================================  USB_0 EPCONTROL_1 OSDSTL [21..21]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_OSDSTL                                                  */
  USB_0_EPCONTROL_1_OSDSTL_STOP        = 0,     /*!< STOP : Stop sending a stall.                                              */
  USB_0_EPCONTROL_1_OSDSTL_SEND        = 1,     /*!< SEND : Generate a stall.                                                  */
} USB_0_EPCONTROL_1_OSDSTL_Enum;

/* ==========================================  USB_0 EPCONTROL_1 OSTSTLI [22..22]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_OSTSTLI                                                 */
  USB_0_EPCONTROL_1_OSTSTLI_NOT_SET    = 0,     /*!< NOT_SET : Read: A stall condition has not been sent since this
                                                     bit was last cleared. Write: Clear the interrupt.                         */
  USB_0_EPCONTROL_1_OSTSTLI_SET        = 1,     /*!< SET : Read: A stall condition has been sent since this bit was
                                                     last cleared. Write: No effect.                                           */
} USB_0_EPCONTROL_1_OSTSTLI_Enum;

/* ===========================================  USB_0 EPCONTROL_1 OCLRDT [23..23]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_OCLRDT                                                  */
  USB_0_EPCONTROL_1_OCLRDT_NO_RESET    = 0,     /*!< NO_RESET : Do not reset the OUT data toggle.                              */
  USB_0_EPCONTROL_1_OCLRDT_RESET       = 1,     /*!< RESET : Reset the OUT data toggle.                                        */
} USB_0_EPCONTROL_1_OCLRDT_Enum;

/* ===========================================  USB_0 EPCONTROL_1 ODMAMD [28..28]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_ODMAMD                                                  */
  USB_0_EPCONTROL_1_ODMAMD_AUTO_DMA    = 0,     /*!< AUTO_DMA : Automatic DMA service is requested on the last packet
                                                     of the transfer until less than four bytes remain in the
                                                     packet. At this time, an interrupt is generated. The firmware
                                                     must read or write the last few bytes of the packet, if
                                                     any remain.                                                               */
  USB_0_EPCONTROL_1_ODMAMD_NO_DMA      = 1,     /*!< NO_DMA : No DMA service is requested on the last packet of the
                                                     transfer. When the DMA recognizes the last packet, an interrupt
                                                     is generated. The firmware must handle the entirety of
                                                     the last packet.                                                          */
} USB_0_EPCONTROL_1_ODMAMD_Enum;

/* ===========================================  USB_0 EPCONTROL_1 ODMAEN [29..29]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_ODMAEN                                                  */
  USB_0_EPCONTROL_1_ODMAEN_DISABLED    = 0,     /*!< DISABLED : Disable the DMA request for the OUT endpoint.                  */
  USB_0_EPCONTROL_1_ODMAEN_ENABLED     = 1,     /*!< ENABLED : Enable the DMA request for the OUT endpoint.                    */
} USB_0_EPCONTROL_1_ODMAEN_Enum;

/* ===========================================  USB_0 EPCONTROL_1 OISOEN [30..30]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_OISOEN                                                  */
  USB_0_EPCONTROL_1_OISOEN_BULK_INT    = 0,     /*!< BULK_INT : Configure the endpoint for Bulk/Interrupt transfers.           */
  USB_0_EPCONTROL_1_OISOEN_ISO         = 1,     /*!< ISO : Configure the endpoint for Isochronous transfers.                   */
} USB_0_EPCONTROL_1_OISOEN_Enum;

/* =========================================  USB_0 EPCONTROL_1 AUTOCLREN [31..31]  ========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_1_AUTOCLREN                                               */
  USB_0_EPCONTROL_1_AUTOCLREN_DISABLED = 0,     /*!< DISABLED : The OPRDYI bit is not automatically cleared by hardware.       */
  USB_0_EPCONTROL_1_AUTOCLREN_ENABLED  = 1,     /*!< ENABLED : The OPRDYI bit is automatically cleared by hardware.            */
} USB_0_EPCONTROL_1_AUTOCLREN_Enum;

/* =======================================================  EPCOUNT_1  ======================================================= */
/* =======================================================  EPFIFO_1  ======================================================== */
/* ======================================================  EPMPSIZE_2  ======================================================= */
/* ======================================================  EPCONTROL_2  ====================================================== */
/* ============================================  USB_0 EPCONTROL_2 IPRDYI [0..0]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_IPRDYI                                                  */
  USB_0_EPCONTROL_2_IPRDYI_NOT_SET     = 0,     /*!< NOT_SET : The packet has been sent or there is an open FIFO
                                                     slot.                                                                     */
  USB_0_EPCONTROL_2_IPRDYI_SET         = 1,     /*!< SET : A packet is loaded in the FIFO.                                     */
} USB_0_EPCONTROL_2_IPRDYI_Enum;

/* ===========================================  USB_0 EPCONTROL_2 IFIFONEF [1..1]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_IFIFONEF                                                */
  USB_0_EPCONTROL_2_IFIFONEF_NOT_SET   = 0,     /*!< NOT_SET : The IN Endpoint FIFO is empty.                                  */
  USB_0_EPCONTROL_2_IFIFONEF_SET       = 1,     /*!< SET : The IN Endpoint FIFO contains one or more packets.                  */
} USB_0_EPCONTROL_2_IFIFONEF_Enum;

/* =============================================  USB_0 EPCONTROL_2 IURF [2..2]  ============================================= */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_IURF                                                    */
  USB_0_EPCONTROL_2_IURF_NOT_SET       = 0,     /*!< NOT_SET : Underrun has not occurred.                                      */
  USB_0_EPCONTROL_2_IURF_SET           = 1,     /*!< SET : Underrun occurred.                                                  */
} USB_0_EPCONTROL_2_IURF_Enum;

/* ===========================================  USB_0 EPCONTROL_2 IFIFOFL [3..3]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_IFIFOFL                                                 */
  USB_0_EPCONTROL_2_IFIFOFL_SET        = 1,     /*!< SET : Flush the IN FIFO.                                                  */
} USB_0_EPCONTROL_2_IFIFOFL_Enum;

/* ============================================  USB_0 EPCONTROL_2 ISDSTL [4..4]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_ISDSTL                                                  */
  USB_0_EPCONTROL_2_ISDSTL_NOT_SET     = 0,     /*!< NOT_SET : Stop sending a stall.                                           */
  USB_0_EPCONTROL_2_ISDSTL_SET         = 1,     /*!< SET : Generate a stall.                                                   */
} USB_0_EPCONTROL_2_ISDSTL_Enum;

/* ===========================================  USB_0 EPCONTROL_2 ISTSTLI [5..5]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_ISTSTLI                                                 */
  USB_0_EPCONTROL_2_ISTSTLI_NOT_SET    = 0,     /*!< NOT_SET : Read: A stall condition has not been sent since this
                                                     bit was last cleared. Write: Clear the interrupt.                         */
  USB_0_EPCONTROL_2_ISTSTLI_SET        = 1,     /*!< SET : Read: A stall condition has been sent since this bit was
                                                     last cleared. Write: No effect.                                           */
} USB_0_EPCONTROL_2_ISTSTLI_Enum;

/* ============================================  USB_0 EPCONTROL_2 ICLRDT [6..6]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_ICLRDT                                                  */
  USB_0_EPCONTROL_2_ICLRDT_NO_RESET    = 0,     /*!< NO_RESET : Do not reset the IN data toggle.                               */
  USB_0_EPCONTROL_2_ICLRDT_RESET       = 1,     /*!< RESET : Reset the IN data toggle.                                         */
} USB_0_EPCONTROL_2_ICLRDT_Enum;

/* ==========================================  USB_0 EPCONTROL_2 SPLITEN [10..10]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_SPLITEN                                                 */
  USB_0_EPCONTROL_2_SPLITEN_DISABLED   = 0,     /*!< DISABLED : Do not split the endpoint FIFO.                                */
  USB_0_EPCONTROL_2_SPLITEN_ENABLED    = 1,     /*!< ENABLED : Split the endpoint FIFO.                                        */
} USB_0_EPCONTROL_2_SPLITEN_Enum;

/* ===========================================  USB_0 EPCONTROL_2 FDTEN [11..11]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_FDTEN                                                   */
  USB_0_EPCONTROL_2_FDTEN_DISABLED     = 0,     /*!< DISABLED : The endpoint data toggle switches only when an ACK
                                                     is received following a data packet transmission.                         */
  USB_0_EPCONTROL_2_FDTEN_ENABLED      = 1,     /*!< ENABLED : The endpoint data toggle is forced to switch after
                                                     every data packet is transmitted, regardless of ACK reception.            */
} USB_0_EPCONTROL_2_FDTEN_Enum;

/* ===========================================  USB_0 EPCONTROL_2 IDMAEN [12..12]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_IDMAEN                                                  */
  USB_0_EPCONTROL_2_IDMAEN_DISABLED    = 0,     /*!< DISABLED : Disable the DMA request for the IN endpoint.                   */
  USB_0_EPCONTROL_2_IDMAEN_ENABLED     = 1,     /*!< ENABLED : Enable the DMA request for the IN endpoint.                     */
} USB_0_EPCONTROL_2_IDMAEN_Enum;

/* ===========================================  USB_0 EPCONTROL_2 DIRSEL [13..13]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_DIRSEL                                                  */
  USB_0_EPCONTROL_2_DIRSEL_OUT         = 0,     /*!< OUT : Select the endpoint direction as OUT.                               */
  USB_0_EPCONTROL_2_DIRSEL_IN          = 1,     /*!< IN : Select the endpoint direction as IN.                                 */
} USB_0_EPCONTROL_2_DIRSEL_Enum;

/* ===========================================  USB_0 EPCONTROL_2 IISOEN [14..14]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_IISOEN                                                  */
  USB_0_EPCONTROL_2_IISOEN_BULK_INT    = 0,     /*!< BULK_INT : Configure the endpoint for Bulk/Interrupt transfers.           */
  USB_0_EPCONTROL_2_IISOEN_ISO         = 1,     /*!< ISO : Configure the endpoint for Isochronous transfers.                   */
} USB_0_EPCONTROL_2_IISOEN_Enum;

/* =========================================  USB_0 EPCONTROL_2 AUTOSETEN [15..15]  ========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_AUTOSETEN                                               */
  USB_0_EPCONTROL_2_AUTOSETEN_DISABLED = 0,     /*!< DISABLED : The IPRDYI bit is not automatically set by hardware.           */
  USB_0_EPCONTROL_2_AUTOSETEN_ENABLED  = 1,     /*!< ENABLED : The IPRDYI bit is automatically set by hardware.                */
} USB_0_EPCONTROL_2_AUTOSETEN_Enum;

/* ===========================================  USB_0 EPCONTROL_2 OPRDYI [16..16]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_OPRDYI                                                  */
  USB_0_EPCONTROL_2_OPRDYI_NOT_SET     = 0,     /*!< NOT_SET : A data packet is not available.                                 */
  USB_0_EPCONTROL_2_OPRDYI_SET         = 1,     /*!< SET : A data packet is available.                                         */
} USB_0_EPCONTROL_2_OPRDYI_Enum;

/* ==========================================  USB_0 EPCONTROL_2 OFIFOFF [17..17]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_OFIFOFF                                                 */
  USB_0_EPCONTROL_2_OFIFOFF_NOT_SET    = 0,     /*!< NOT_SET : The OUT endpoint FIFO is not full.                              */
  USB_0_EPCONTROL_2_OFIFOFF_SET        = 1,     /*!< SET : The OUT endpoint FIFO is full.                                      */
} USB_0_EPCONTROL_2_OFIFOFF_Enum;

/* ============================================  USB_0 EPCONTROL_2 OORF [18..18]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_OORF                                                    */
  USB_0_EPCONTROL_2_OORF_NOT_SET       = 0,     /*!< NOT_SET : No data overrun.                                                */
  USB_0_EPCONTROL_2_OORF_SET           = 1,     /*!< SET : A data packet was lost because of a full FIFO since this
                                                     flag was last cleared.                                                    */
} USB_0_EPCONTROL_2_OORF_Enum;

/* ===========================================  USB_0 EPCONTROL_2 ODERRF [19..19]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_ODERRF                                                  */
  USB_0_EPCONTROL_2_ODERRF_NOT_SET     = 0,     /*!< NOT_SET : A CRC or bit-stuff error has not occurred.                      */
  USB_0_EPCONTROL_2_ODERRF_SET         = 1,     /*!< SET : A CRC or bit-stuff error occurred.                                  */
} USB_0_EPCONTROL_2_ODERRF_Enum;

/* ==========================================  USB_0 EPCONTROL_2 OFIFOFL [20..20]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_OFIFOFL                                                 */
  USB_0_EPCONTROL_2_OFIFOFL_SET        = 1,     /*!< SET : Flush the OUT FIFO.                                                 */
} USB_0_EPCONTROL_2_OFIFOFL_Enum;

/* ===========================================  USB_0 EPCONTROL_2 OSDSTL [21..21]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_OSDSTL                                                  */
  USB_0_EPCONTROL_2_OSDSTL_STOP        = 0,     /*!< STOP : Stop sending a stall.                                              */
  USB_0_EPCONTROL_2_OSDSTL_SEND        = 1,     /*!< SEND : Generate a stall.                                                  */
} USB_0_EPCONTROL_2_OSDSTL_Enum;

/* ==========================================  USB_0 EPCONTROL_2 OSTSTLI [22..22]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_OSTSTLI                                                 */
  USB_0_EPCONTROL_2_OSTSTLI_NOT_SET    = 0,     /*!< NOT_SET : Read: A stall condition has not been sent since this
                                                     bit was last cleared. Write: Clear the interrupt.                         */
  USB_0_EPCONTROL_2_OSTSTLI_SET        = 1,     /*!< SET : Read: A stall condition has been sent since this bit was
                                                     last cleared. Write: No effect.                                           */
} USB_0_EPCONTROL_2_OSTSTLI_Enum;

/* ===========================================  USB_0 EPCONTROL_2 OCLRDT [23..23]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_OCLRDT                                                  */
  USB_0_EPCONTROL_2_OCLRDT_NO_RESET    = 0,     /*!< NO_RESET : Do not reset the OUT data toggle.                              */
  USB_0_EPCONTROL_2_OCLRDT_RESET       = 1,     /*!< RESET : Reset the OUT data toggle.                                        */
} USB_0_EPCONTROL_2_OCLRDT_Enum;

/* ===========================================  USB_0 EPCONTROL_2 ODMAMD [28..28]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_ODMAMD                                                  */
  USB_0_EPCONTROL_2_ODMAMD_AUTO_DMA    = 0,     /*!< AUTO_DMA : Automatic DMA service is requested on the last packet
                                                     of the transfer until less than four bytes remain in the
                                                     packet. At this time, an interrupt is generated. The firmware
                                                     must read or write the last few bytes of the packet, if
                                                     any remain.                                                               */
  USB_0_EPCONTROL_2_ODMAMD_NO_DMA      = 1,     /*!< NO_DMA : No DMA service is requested on the last packet of the
                                                     transfer. When the DMA recognizes the last packet, an interrupt
                                                     is generated. The firmware must handle the entirety of
                                                     the last packet.                                                          */
} USB_0_EPCONTROL_2_ODMAMD_Enum;

/* ===========================================  USB_0 EPCONTROL_2 ODMAEN [29..29]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_ODMAEN                                                  */
  USB_0_EPCONTROL_2_ODMAEN_DISABLED    = 0,     /*!< DISABLED : Disable the DMA request for the OUT endpoint.                  */
  USB_0_EPCONTROL_2_ODMAEN_ENABLED     = 1,     /*!< ENABLED : Enable the DMA request for the OUT endpoint.                    */
} USB_0_EPCONTROL_2_ODMAEN_Enum;

/* ===========================================  USB_0 EPCONTROL_2 OISOEN [30..30]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_OISOEN                                                  */
  USB_0_EPCONTROL_2_OISOEN_BULK_INT    = 0,     /*!< BULK_INT : Configure the endpoint for Bulk/Interrupt transfers.           */
  USB_0_EPCONTROL_2_OISOEN_ISO         = 1,     /*!< ISO : Configure the endpoint for Isochronous transfers.                   */
} USB_0_EPCONTROL_2_OISOEN_Enum;

/* =========================================  USB_0 EPCONTROL_2 AUTOCLREN [31..31]  ========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_2_AUTOCLREN                                               */
  USB_0_EPCONTROL_2_AUTOCLREN_DISABLED = 0,     /*!< DISABLED : The OPRDYI bit is not automatically cleared by hardware.       */
  USB_0_EPCONTROL_2_AUTOCLREN_ENABLED  = 1,     /*!< ENABLED : The OPRDYI bit is automatically cleared by hardware.            */
} USB_0_EPCONTROL_2_AUTOCLREN_Enum;

/* =======================================================  EPCOUNT_2  ======================================================= */
/* =======================================================  EPFIFO_2  ======================================================== */
/* ======================================================  EPMPSIZE_3  ======================================================= */
/* ======================================================  EPCONTROL_3  ====================================================== */
/* ============================================  USB_0 EPCONTROL_3 IPRDYI [0..0]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_IPRDYI                                                  */
  USB_0_EPCONTROL_3_IPRDYI_NOT_SET     = 0,     /*!< NOT_SET : The packet has been sent or there is an open FIFO
                                                     slot.                                                                     */
  USB_0_EPCONTROL_3_IPRDYI_SET         = 1,     /*!< SET : A packet is loaded in the FIFO.                                     */
} USB_0_EPCONTROL_3_IPRDYI_Enum;

/* ===========================================  USB_0 EPCONTROL_3 IFIFONEF [1..1]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_IFIFONEF                                                */
  USB_0_EPCONTROL_3_IFIFONEF_NOT_SET   = 0,     /*!< NOT_SET : The IN Endpoint FIFO is empty.                                  */
  USB_0_EPCONTROL_3_IFIFONEF_SET       = 1,     /*!< SET : The IN Endpoint FIFO contains one or more packets.                  */
} USB_0_EPCONTROL_3_IFIFONEF_Enum;

/* =============================================  USB_0 EPCONTROL_3 IURF [2..2]  ============================================= */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_IURF                                                    */
  USB_0_EPCONTROL_3_IURF_NOT_SET       = 0,     /*!< NOT_SET : Underrun has not occurred.                                      */
  USB_0_EPCONTROL_3_IURF_SET           = 1,     /*!< SET : Underrun occurred.                                                  */
} USB_0_EPCONTROL_3_IURF_Enum;

/* ===========================================  USB_0 EPCONTROL_3 IFIFOFL [3..3]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_IFIFOFL                                                 */
  USB_0_EPCONTROL_3_IFIFOFL_SET        = 1,     /*!< SET : Flush the IN FIFO.                                                  */
} USB_0_EPCONTROL_3_IFIFOFL_Enum;

/* ============================================  USB_0 EPCONTROL_3 ISDSTL [4..4]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_ISDSTL                                                  */
  USB_0_EPCONTROL_3_ISDSTL_NOT_SET     = 0,     /*!< NOT_SET : Stop sending a stall.                                           */
  USB_0_EPCONTROL_3_ISDSTL_SET         = 1,     /*!< SET : Generate a stall.                                                   */
} USB_0_EPCONTROL_3_ISDSTL_Enum;

/* ===========================================  USB_0 EPCONTROL_3 ISTSTLI [5..5]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_ISTSTLI                                                 */
  USB_0_EPCONTROL_3_ISTSTLI_NOT_SET    = 0,     /*!< NOT_SET : Read: A stall condition has not been sent since this
                                                     bit was last cleared. Write: Clear the interrupt.                         */
  USB_0_EPCONTROL_3_ISTSTLI_SET        = 1,     /*!< SET : Read: A stall condition has been sent since this bit was
                                                     last cleared. Write: No effect.                                           */
} USB_0_EPCONTROL_3_ISTSTLI_Enum;

/* ============================================  USB_0 EPCONTROL_3 ICLRDT [6..6]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_ICLRDT                                                  */
  USB_0_EPCONTROL_3_ICLRDT_NO_RESET    = 0,     /*!< NO_RESET : Do not reset the IN data toggle.                               */
  USB_0_EPCONTROL_3_ICLRDT_RESET       = 1,     /*!< RESET : Reset the IN data toggle.                                         */
} USB_0_EPCONTROL_3_ICLRDT_Enum;

/* ==========================================  USB_0 EPCONTROL_3 SPLITEN [10..10]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_SPLITEN                                                 */
  USB_0_EPCONTROL_3_SPLITEN_DISABLED   = 0,     /*!< DISABLED : Do not split the endpoint FIFO.                                */
  USB_0_EPCONTROL_3_SPLITEN_ENABLED    = 1,     /*!< ENABLED : Split the endpoint FIFO.                                        */
} USB_0_EPCONTROL_3_SPLITEN_Enum;

/* ===========================================  USB_0 EPCONTROL_3 FDTEN [11..11]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_FDTEN                                                   */
  USB_0_EPCONTROL_3_FDTEN_DISABLED     = 0,     /*!< DISABLED : The endpoint data toggle switches only when an ACK
                                                     is received following a data packet transmission.                         */
  USB_0_EPCONTROL_3_FDTEN_ENABLED      = 1,     /*!< ENABLED : The endpoint data toggle is forced to switch after
                                                     every data packet is transmitted, regardless of ACK reception.            */
} USB_0_EPCONTROL_3_FDTEN_Enum;

/* ===========================================  USB_0 EPCONTROL_3 IDMAEN [12..12]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_IDMAEN                                                  */
  USB_0_EPCONTROL_3_IDMAEN_DISABLED    = 0,     /*!< DISABLED : Disable the DMA request for the IN endpoint.                   */
  USB_0_EPCONTROL_3_IDMAEN_ENABLED     = 1,     /*!< ENABLED : Enable the DMA request for the IN endpoint.                     */
} USB_0_EPCONTROL_3_IDMAEN_Enum;

/* ===========================================  USB_0 EPCONTROL_3 DIRSEL [13..13]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_DIRSEL                                                  */
  USB_0_EPCONTROL_3_DIRSEL_OUT         = 0,     /*!< OUT : Select the endpoint direction as OUT.                               */
  USB_0_EPCONTROL_3_DIRSEL_IN          = 1,     /*!< IN : Select the endpoint direction as IN.                                 */
} USB_0_EPCONTROL_3_DIRSEL_Enum;

/* ===========================================  USB_0 EPCONTROL_3 IISOEN [14..14]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_IISOEN                                                  */
  USB_0_EPCONTROL_3_IISOEN_BULK_INT    = 0,     /*!< BULK_INT : Configure the endpoint for Bulk/Interrupt transfers.           */
  USB_0_EPCONTROL_3_IISOEN_ISO         = 1,     /*!< ISO : Configure the endpoint for Isochronous transfers.                   */
} USB_0_EPCONTROL_3_IISOEN_Enum;

/* =========================================  USB_0 EPCONTROL_3 AUTOSETEN [15..15]  ========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_AUTOSETEN                                               */
  USB_0_EPCONTROL_3_AUTOSETEN_DISABLED = 0,     /*!< DISABLED : The IPRDYI bit is not automatically set by hardware.           */
  USB_0_EPCONTROL_3_AUTOSETEN_ENABLED  = 1,     /*!< ENABLED : The IPRDYI bit is automatically set by hardware.                */
} USB_0_EPCONTROL_3_AUTOSETEN_Enum;

/* ===========================================  USB_0 EPCONTROL_3 OPRDYI [16..16]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_OPRDYI                                                  */
  USB_0_EPCONTROL_3_OPRDYI_NOT_SET     = 0,     /*!< NOT_SET : A data packet is not available.                                 */
  USB_0_EPCONTROL_3_OPRDYI_SET         = 1,     /*!< SET : A data packet is available.                                         */
} USB_0_EPCONTROL_3_OPRDYI_Enum;

/* ==========================================  USB_0 EPCONTROL_3 OFIFOFF [17..17]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_OFIFOFF                                                 */
  USB_0_EPCONTROL_3_OFIFOFF_NOT_SET    = 0,     /*!< NOT_SET : The OUT endpoint FIFO is not full.                              */
  USB_0_EPCONTROL_3_OFIFOFF_SET        = 1,     /*!< SET : The OUT endpoint FIFO is full.                                      */
} USB_0_EPCONTROL_3_OFIFOFF_Enum;

/* ============================================  USB_0 EPCONTROL_3 OORF [18..18]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_OORF                                                    */
  USB_0_EPCONTROL_3_OORF_NOT_SET       = 0,     /*!< NOT_SET : No data overrun.                                                */
  USB_0_EPCONTROL_3_OORF_SET           = 1,     /*!< SET : A data packet was lost because of a full FIFO since this
                                                     flag was last cleared.                                                    */
} USB_0_EPCONTROL_3_OORF_Enum;

/* ===========================================  USB_0 EPCONTROL_3 ODERRF [19..19]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_ODERRF                                                  */
  USB_0_EPCONTROL_3_ODERRF_NOT_SET     = 0,     /*!< NOT_SET : A CRC or bit-stuff error has not occurred.                      */
  USB_0_EPCONTROL_3_ODERRF_SET         = 1,     /*!< SET : A CRC or bit-stuff error occurred.                                  */
} USB_0_EPCONTROL_3_ODERRF_Enum;

/* ==========================================  USB_0 EPCONTROL_3 OFIFOFL [20..20]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_OFIFOFL                                                 */
  USB_0_EPCONTROL_3_OFIFOFL_SET        = 1,     /*!< SET : Flush the OUT FIFO.                                                 */
} USB_0_EPCONTROL_3_OFIFOFL_Enum;

/* ===========================================  USB_0 EPCONTROL_3 OSDSTL [21..21]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_OSDSTL                                                  */
  USB_0_EPCONTROL_3_OSDSTL_STOP        = 0,     /*!< STOP : Stop sending a stall.                                              */
  USB_0_EPCONTROL_3_OSDSTL_SEND        = 1,     /*!< SEND : Generate a stall.                                                  */
} USB_0_EPCONTROL_3_OSDSTL_Enum;

/* ==========================================  USB_0 EPCONTROL_3 OSTSTLI [22..22]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_OSTSTLI                                                 */
  USB_0_EPCONTROL_3_OSTSTLI_NOT_SET    = 0,     /*!< NOT_SET : Read: A stall condition has not been sent since this
                                                     bit was last cleared. Write: Clear the interrupt.                         */
  USB_0_EPCONTROL_3_OSTSTLI_SET        = 1,     /*!< SET : Read: A stall condition has been sent since this bit was
                                                     last cleared. Write: No effect.                                           */
} USB_0_EPCONTROL_3_OSTSTLI_Enum;

/* ===========================================  USB_0 EPCONTROL_3 OCLRDT [23..23]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_OCLRDT                                                  */
  USB_0_EPCONTROL_3_OCLRDT_NO_RESET    = 0,     /*!< NO_RESET : Do not reset the OUT data toggle.                              */
  USB_0_EPCONTROL_3_OCLRDT_RESET       = 1,     /*!< RESET : Reset the OUT data toggle.                                        */
} USB_0_EPCONTROL_3_OCLRDT_Enum;

/* ===========================================  USB_0 EPCONTROL_3 ODMAMD [28..28]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_ODMAMD                                                  */
  USB_0_EPCONTROL_3_ODMAMD_AUTO_DMA    = 0,     /*!< AUTO_DMA : Automatic DMA service is requested on the last packet
                                                     of the transfer until less than four bytes remain in the
                                                     packet. At this time, an interrupt is generated. The firmware
                                                     must read or write the last few bytes of the packet, if
                                                     any remain.                                                               */
  USB_0_EPCONTROL_3_ODMAMD_NO_DMA      = 1,     /*!< NO_DMA : No DMA service is requested on the last packet of the
                                                     transfer. When the DMA recognizes the last packet, an interrupt
                                                     is generated. The firmware must handle the entirety of
                                                     the last packet.                                                          */
} USB_0_EPCONTROL_3_ODMAMD_Enum;

/* ===========================================  USB_0 EPCONTROL_3 ODMAEN [29..29]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_ODMAEN                                                  */
  USB_0_EPCONTROL_3_ODMAEN_DISABLED    = 0,     /*!< DISABLED : Disable the DMA request for the OUT endpoint.                  */
  USB_0_EPCONTROL_3_ODMAEN_ENABLED     = 1,     /*!< ENABLED : Enable the DMA request for the OUT endpoint.                    */
} USB_0_EPCONTROL_3_ODMAEN_Enum;

/* ===========================================  USB_0 EPCONTROL_3 OISOEN [30..30]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_OISOEN                                                  */
  USB_0_EPCONTROL_3_OISOEN_BULK_INT    = 0,     /*!< BULK_INT : Configure the endpoint for Bulk/Interrupt transfers.           */
  USB_0_EPCONTROL_3_OISOEN_ISO         = 1,     /*!< ISO : Configure the endpoint for Isochronous transfers.                   */
} USB_0_EPCONTROL_3_OISOEN_Enum;

/* =========================================  USB_0 EPCONTROL_3 AUTOCLREN [31..31]  ========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_3_AUTOCLREN                                               */
  USB_0_EPCONTROL_3_AUTOCLREN_DISABLED = 0,     /*!< DISABLED : The OPRDYI bit is not automatically cleared by hardware.       */
  USB_0_EPCONTROL_3_AUTOCLREN_ENABLED  = 1,     /*!< ENABLED : The OPRDYI bit is automatically cleared by hardware.            */
} USB_0_EPCONTROL_3_AUTOCLREN_Enum;

/* =======================================================  EPCOUNT_3  ======================================================= */
/* =======================================================  EPFIFO_3  ======================================================== */
/* ======================================================  EPMPSIZE_4  ======================================================= */
/* ======================================================  EPCONTROL_4  ====================================================== */
/* ============================================  USB_0 EPCONTROL_4 IPRDYI [0..0]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_IPRDYI                                                  */
  USB_0_EPCONTROL_4_IPRDYI_NOT_SET     = 0,     /*!< NOT_SET : The packet has been sent or there is an open FIFO
                                                     slot.                                                                     */
  USB_0_EPCONTROL_4_IPRDYI_SET         = 1,     /*!< SET : A packet is loaded in the FIFO.                                     */
} USB_0_EPCONTROL_4_IPRDYI_Enum;

/* ===========================================  USB_0 EPCONTROL_4 IFIFONEF [1..1]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_IFIFONEF                                                */
  USB_0_EPCONTROL_4_IFIFONEF_NOT_SET   = 0,     /*!< NOT_SET : The IN Endpoint FIFO is empty.                                  */
  USB_0_EPCONTROL_4_IFIFONEF_SET       = 1,     /*!< SET : The IN Endpoint FIFO contains one or more packets.                  */
} USB_0_EPCONTROL_4_IFIFONEF_Enum;

/* =============================================  USB_0 EPCONTROL_4 IURF [2..2]  ============================================= */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_IURF                                                    */
  USB_0_EPCONTROL_4_IURF_NOT_SET       = 0,     /*!< NOT_SET : Underrun has not occurred.                                      */
  USB_0_EPCONTROL_4_IURF_SET           = 1,     /*!< SET : Underrun occurred.                                                  */
} USB_0_EPCONTROL_4_IURF_Enum;

/* ===========================================  USB_0 EPCONTROL_4 IFIFOFL [3..3]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_IFIFOFL                                                 */
  USB_0_EPCONTROL_4_IFIFOFL_SET        = 1,     /*!< SET : Flush the IN FIFO.                                                  */
} USB_0_EPCONTROL_4_IFIFOFL_Enum;

/* ============================================  USB_0 EPCONTROL_4 ISDSTL [4..4]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_ISDSTL                                                  */
  USB_0_EPCONTROL_4_ISDSTL_NOT_SET     = 0,     /*!< NOT_SET : Stop sending a stall.                                           */
  USB_0_EPCONTROL_4_ISDSTL_SET         = 1,     /*!< SET : Generate a stall.                                                   */
} USB_0_EPCONTROL_4_ISDSTL_Enum;

/* ===========================================  USB_0 EPCONTROL_4 ISTSTLI [5..5]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_ISTSTLI                                                 */
  USB_0_EPCONTROL_4_ISTSTLI_NOT_SET    = 0,     /*!< NOT_SET : Read: A stall condition has not been sent since this
                                                     bit was last cleared. Write: Clear the interrupt.                         */
  USB_0_EPCONTROL_4_ISTSTLI_SET        = 1,     /*!< SET : Read: A stall condition has been sent since this bit was
                                                     last cleared. Write: No effect.                                           */
} USB_0_EPCONTROL_4_ISTSTLI_Enum;

/* ============================================  USB_0 EPCONTROL_4 ICLRDT [6..6]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_ICLRDT                                                  */
  USB_0_EPCONTROL_4_ICLRDT_NO_RESET    = 0,     /*!< NO_RESET : Do not reset the IN data toggle.                               */
  USB_0_EPCONTROL_4_ICLRDT_RESET       = 1,     /*!< RESET : Reset the IN data toggle.                                         */
} USB_0_EPCONTROL_4_ICLRDT_Enum;

/* ==========================================  USB_0 EPCONTROL_4 SPLITEN [10..10]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_SPLITEN                                                 */
  USB_0_EPCONTROL_4_SPLITEN_DISABLED   = 0,     /*!< DISABLED : Do not split the endpoint FIFO.                                */
  USB_0_EPCONTROL_4_SPLITEN_ENABLED    = 1,     /*!< ENABLED : Split the endpoint FIFO.                                        */
} USB_0_EPCONTROL_4_SPLITEN_Enum;

/* ===========================================  USB_0 EPCONTROL_4 FDTEN [11..11]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_FDTEN                                                   */
  USB_0_EPCONTROL_4_FDTEN_DISABLED     = 0,     /*!< DISABLED : The endpoint data toggle switches only when an ACK
                                                     is received following a data packet transmission.                         */
  USB_0_EPCONTROL_4_FDTEN_ENABLED      = 1,     /*!< ENABLED : The endpoint data toggle is forced to switch after
                                                     every data packet is transmitted, regardless of ACK reception.            */
} USB_0_EPCONTROL_4_FDTEN_Enum;

/* ===========================================  USB_0 EPCONTROL_4 IDMAEN [12..12]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_IDMAEN                                                  */
  USB_0_EPCONTROL_4_IDMAEN_DISABLED    = 0,     /*!< DISABLED : Disable the DMA request for the IN endpoint.                   */
  USB_0_EPCONTROL_4_IDMAEN_ENABLED     = 1,     /*!< ENABLED : Enable the DMA request for the IN endpoint.                     */
} USB_0_EPCONTROL_4_IDMAEN_Enum;

/* ===========================================  USB_0 EPCONTROL_4 DIRSEL [13..13]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_DIRSEL                                                  */
  USB_0_EPCONTROL_4_DIRSEL_OUT         = 0,     /*!< OUT : Select the endpoint direction as OUT.                               */
  USB_0_EPCONTROL_4_DIRSEL_IN          = 1,     /*!< IN : Select the endpoint direction as IN.                                 */
} USB_0_EPCONTROL_4_DIRSEL_Enum;

/* ===========================================  USB_0 EPCONTROL_4 IISOEN [14..14]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_IISOEN                                                  */
  USB_0_EPCONTROL_4_IISOEN_BULK_INT    = 0,     /*!< BULK_INT : Configure the endpoint for Bulk/Interrupt transfers.           */
  USB_0_EPCONTROL_4_IISOEN_ISO         = 1,     /*!< ISO : Configure the endpoint for Isochronous transfers.                   */
} USB_0_EPCONTROL_4_IISOEN_Enum;

/* =========================================  USB_0 EPCONTROL_4 AUTOSETEN [15..15]  ========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_AUTOSETEN                                               */
  USB_0_EPCONTROL_4_AUTOSETEN_DISABLED = 0,     /*!< DISABLED : The IPRDYI bit is not automatically set by hardware.           */
  USB_0_EPCONTROL_4_AUTOSETEN_ENABLED  = 1,     /*!< ENABLED : The IPRDYI bit is automatically set by hardware.                */
} USB_0_EPCONTROL_4_AUTOSETEN_Enum;

/* ===========================================  USB_0 EPCONTROL_4 OPRDYI [16..16]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_OPRDYI                                                  */
  USB_0_EPCONTROL_4_OPRDYI_NOT_SET     = 0,     /*!< NOT_SET : A data packet is not available.                                 */
  USB_0_EPCONTROL_4_OPRDYI_SET         = 1,     /*!< SET : A data packet is available.                                         */
} USB_0_EPCONTROL_4_OPRDYI_Enum;

/* ==========================================  USB_0 EPCONTROL_4 OFIFOFF [17..17]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_OFIFOFF                                                 */
  USB_0_EPCONTROL_4_OFIFOFF_NOT_SET    = 0,     /*!< NOT_SET : The OUT endpoint FIFO is not full.                              */
  USB_0_EPCONTROL_4_OFIFOFF_SET        = 1,     /*!< SET : The OUT endpoint FIFO is full.                                      */
} USB_0_EPCONTROL_4_OFIFOFF_Enum;

/* ============================================  USB_0 EPCONTROL_4 OORF [18..18]  ============================================ */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_OORF                                                    */
  USB_0_EPCONTROL_4_OORF_NOT_SET       = 0,     /*!< NOT_SET : No data overrun.                                                */
  USB_0_EPCONTROL_4_OORF_SET           = 1,     /*!< SET : A data packet was lost because of a full FIFO since this
                                                     flag was last cleared.                                                    */
} USB_0_EPCONTROL_4_OORF_Enum;

/* ===========================================  USB_0 EPCONTROL_4 ODERRF [19..19]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_ODERRF                                                  */
  USB_0_EPCONTROL_4_ODERRF_NOT_SET     = 0,     /*!< NOT_SET : A CRC or bit-stuff error has not occurred.                      */
  USB_0_EPCONTROL_4_ODERRF_SET         = 1,     /*!< SET : A CRC or bit-stuff error occurred.                                  */
} USB_0_EPCONTROL_4_ODERRF_Enum;

/* ==========================================  USB_0 EPCONTROL_4 OFIFOFL [20..20]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_OFIFOFL                                                 */
  USB_0_EPCONTROL_4_OFIFOFL_SET        = 1,     /*!< SET : Flush the OUT FIFO.                                                 */
} USB_0_EPCONTROL_4_OFIFOFL_Enum;

/* ===========================================  USB_0 EPCONTROL_4 OSDSTL [21..21]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_OSDSTL                                                  */
  USB_0_EPCONTROL_4_OSDSTL_STOP        = 0,     /*!< STOP : Stop sending a stall.                                              */
  USB_0_EPCONTROL_4_OSDSTL_SEND        = 1,     /*!< SEND : Generate a stall.                                                  */
} USB_0_EPCONTROL_4_OSDSTL_Enum;

/* ==========================================  USB_0 EPCONTROL_4 OSTSTLI [22..22]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_OSTSTLI                                                 */
  USB_0_EPCONTROL_4_OSTSTLI_NOT_SET    = 0,     /*!< NOT_SET : Read: A stall condition has not been sent since this
                                                     bit was last cleared. Write: Clear the interrupt.                         */
  USB_0_EPCONTROL_4_OSTSTLI_SET        = 1,     /*!< SET : Read: A stall condition has been sent since this bit was
                                                     last cleared. Write: No effect.                                           */
} USB_0_EPCONTROL_4_OSTSTLI_Enum;

/* ===========================================  USB_0 EPCONTROL_4 OCLRDT [23..23]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_OCLRDT                                                  */
  USB_0_EPCONTROL_4_OCLRDT_NO_RESET    = 0,     /*!< NO_RESET : Do not reset the OUT data toggle.                              */
  USB_0_EPCONTROL_4_OCLRDT_RESET       = 1,     /*!< RESET : Reset the OUT data toggle.                                        */
} USB_0_EPCONTROL_4_OCLRDT_Enum;

/* ===========================================  USB_0 EPCONTROL_4 ODMAMD [28..28]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_ODMAMD                                                  */
  USB_0_EPCONTROL_4_ODMAMD_AUTO_DMA    = 0,     /*!< AUTO_DMA : Automatic DMA service is requested on the last packet
                                                     of the transfer until less than four bytes remain in the
                                                     packet. At this time, an interrupt is generated. The firmware
                                                     must read or write the last few bytes of the packet, if
                                                     any remain.                                                               */
  USB_0_EPCONTROL_4_ODMAMD_NO_DMA      = 1,     /*!< NO_DMA : No DMA service is requested on the last packet of the
                                                     transfer. When the DMA recognizes the last packet, an interrupt
                                                     is generated. The firmware must handle the entirety of
                                                     the last packet.                                                          */
} USB_0_EPCONTROL_4_ODMAMD_Enum;

/* ===========================================  USB_0 EPCONTROL_4 ODMAEN [29..29]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_ODMAEN                                                  */
  USB_0_EPCONTROL_4_ODMAEN_DISABLED    = 0,     /*!< DISABLED : Disable the DMA request for the OUT endpoint.                  */
  USB_0_EPCONTROL_4_ODMAEN_ENABLED     = 1,     /*!< ENABLED : Enable the DMA request for the OUT endpoint.                    */
} USB_0_EPCONTROL_4_ODMAEN_Enum;

/* ===========================================  USB_0 EPCONTROL_4 OISOEN [30..30]  =========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_OISOEN                                                  */
  USB_0_EPCONTROL_4_OISOEN_BULK_INT    = 0,     /*!< BULK_INT : Configure the endpoint for Bulk/Interrupt transfers.           */
  USB_0_EPCONTROL_4_OISOEN_ISO         = 1,     /*!< ISO : Configure the endpoint for Isochronous transfers.                   */
} USB_0_EPCONTROL_4_OISOEN_Enum;

/* =========================================  USB_0 EPCONTROL_4 AUTOCLREN [31..31]  ========================================== */
typedef enum {                                  /*!< USB_0_EPCONTROL_4_AUTOCLREN                                               */
  USB_0_EPCONTROL_4_AUTOCLREN_DISABLED = 0,     /*!< DISABLED : The OPRDYI bit is not automatically cleared by hardware.       */
  USB_0_EPCONTROL_4_AUTOCLREN_ENABLED  = 1,     /*!< ENABLED : The OPRDYI bit is automatically cleared by hardware.            */
} USB_0_EPCONTROL_4_AUTOCLREN_Enum;

/* =======================================================  EPCOUNT_4  ======================================================= */
/* =======================================================  EPFIFO_4  ======================================================== */


/* =========================================================================================================================== */
/* ================                                          VMON_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  VMON_0 CONTROL VREGINSEN [0..0]  ============================================ */
typedef enum {                                  /*!< VMON_0_CONTROL_VREGINSEN                                                  */
  VMON_0_CONTROL_VREGINSEN_DISABLED    = 0,     /*!< DISABLED : Disable the VREGIN supply monitor.                             */
  VMON_0_CONTROL_VREGINSEN_ENABLED     = 1,     /*!< ENABLED : Enable the VREGIN supply monitor.                               */
} VMON_0_CONTROL_VREGINSEN_Enum;

/* ============================================  VMON_0 CONTROL VREGINLI [1..1]  ============================================= */
typedef enum {                                  /*!< VMON_0_CONTROL_VREGINLI                                                   */
  VMON_0_CONTROL_VREGINLI_VREGIN_IS_LOW = 0,    /*!< VREGIN_IS_LOW : VREGIN is not above the interrupt threshold.              */
  VMON_0_CONTROL_VREGINLI_VREGIN_IS_OK = 1,     /*!< VREGIN_IS_OK : VREGIN is above the interrupt threshold.                   */
} VMON_0_CONTROL_VREGINLI_Enum;

/* =============================================  VMON_0 CONTROL VDDRSTF [2..2]  ============================================= */
typedef enum {                                  /*!< VMON_0_CONTROL_VDDRSTF                                                    */
  VMON_0_CONTROL_VDDRSTF_VDD_IS_BELOW_RESET = 0,/*!< VDD_IS_BELOW_RESET : The VDD voltage is below the VDD reset
                                                     threshold.                                                                */
  VMON_0_CONTROL_VDDRSTF_VDD_IS_ABOVE_RESET = 1,/*!< VDD_IS_ABOVE_RESET : The VDD voltage is above the VDD reset
                                                     threshold.                                                                */
} VMON_0_CONTROL_VDDRSTF_Enum;

/* ==============================================  VMON_0 CONTROL VDDLI [3..3]  ============================================== */
typedef enum {                                  /*!< VMON_0_CONTROL_VDDLI                                                      */
  VMON_0_CONTROL_VDDLI_VDD_IS_LOW      = 0,     /*!< VDD_IS_LOW : The VDD voltage is below the early warning threshold.        */
  VMON_0_CONTROL_VDDLI_VDD_IS_OK       = 1,     /*!< VDD_IS_OK : The VDD voltage is above the early warning threshold.         */
} VMON_0_CONTROL_VDDLI_Enum;

/* ============================================  VMON_0 CONTROL VDDHITHEN [4..4]  ============================================ */
typedef enum {                                  /*!< VMON_0_CONTROL_VDDHITHEN                                                  */
  VMON_0_CONTROL_VDDHITHEN_DISABLED    = 0,     /*!< DISABLED : Use the standard VDD thresholds.                               */
  VMON_0_CONTROL_VDDHITHEN_ENABLED     = 1,     /*!< ENABLED : Use the high VDD thresholds.                                    */
} VMON_0_CONTROL_VDDHITHEN_Enum;

/* =============================================  VMON_0 CONTROL VDDLIEN [6..6]  ============================================= */
typedef enum {                                  /*!< VMON_0_CONTROL_VDDLIEN                                                    */
  VMON_0_CONTROL_VDDLIEN_DISABLED      = 0,     /*!< DISABLED : Disable the VDD low interrupt.                                 */
  VMON_0_CONTROL_VDDLIEN_ENABLED       = 1,     /*!< ENABLED : Enable the VDD low interrupt.                                   */
} VMON_0_CONTROL_VDDLIEN_Enum;

/* ===========================================  VMON_0 CONTROL VREGINLIEN [7..7]  ============================================ */
typedef enum {                                  /*!< VMON_0_CONTROL_VREGINLIEN                                                 */
  VMON_0_CONTROL_VREGINLIEN_DISABLED   = 0,     /*!< DISABLED : Disable the VREGIN low interrupt.                              */
  VMON_0_CONTROL_VREGINLIEN_ENABLED    = 1,     /*!< ENABLED : Enable the VREGIN low interrupt.                                */
} VMON_0_CONTROL_VREGINLIEN_Enum;

/* ============================================  VMON_0 CONTROL VMONEN [31..31]  ============================================= */
typedef enum {                                  /*!< VMON_0_CONTROL_VMONEN                                                     */
  VMON_0_CONTROL_VMONEN_DISABLED       = 0,     /*!< DISABLED : Disable the VDD supply monitor.                                */
  VMON_0_CONTROL_VMONEN_ENABLED        = 1,     /*!< ENABLED : Enable the VDD supply monitor.                                  */
} VMON_0_CONTROL_VMONEN_Enum;



/* =========================================================================================================================== */
/* ================                                          VREF_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  VREF_0 CONTROL VREF2X [0..0]  ============================================== */
typedef enum {                                  /*!< VREF_0_CONTROL_VREF2X                                                     */
  VREF_0_CONTROL_VREF2X_DISABLED       = 0,     /*!< DISABLED : VREF output is nominally 1.2 V                                 */
  VREF_0_CONTROL_VREF2X_ENABLED        = 1,     /*!< ENABLED : VREF output is nominally 2.4 V                                  */
} VREF_0_CONTROL_VREF2X_Enum;

/* =============================================  VREF_0 CONTROL TEMPEN [1..1]  ============================================== */
typedef enum {                                  /*!< VREF_0_CONTROL_TEMPEN                                                     */
  VREF_0_CONTROL_TEMPEN_DISABLED       = 0,     /*!< DISABLED : Disable the temperature sensor.                                */
  VREF_0_CONTROL_TEMPEN_ENABLED        = 1,     /*!< ENABLED : Enable the temperature sensor.                                  */
} VREF_0_CONTROL_TEMPEN_Enum;

/* ============================================  VREF_0 CONTROL VREFEN [31..31]  ============================================= */
typedef enum {                                  /*!< VREF_0_CONTROL_VREFEN                                                     */
  VREF_0_CONTROL_VREFEN_DISABLED       = 0,     /*!< DISABLED : Disable the Voltage Reference.                                 */
  VREF_0_CONTROL_VREFEN_ENABLED        = 1,     /*!< ENABLED : Enable the Voltage Reference.                                   */
} VREF_0_CONTROL_VREFEN_Enum;



/* =========================================================================================================================== */
/* ================                                         EXTVREG_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  EXTVREG_0 CONTROL SAEN [0..0]  ============================================= */
typedef enum {                                  /*!< EXTVREG_0_CONTROL_SAEN                                                    */
  EXTVREG_0_CONTROL_SAEN_DISABLED      = 0,     /*!< DISABLED : Use the external regulator in normal mode.                     */
  EXTVREG_0_CONTROL_SAEN_ENABLED       = 1,     /*!< ENABLED : Use the external regulator in stand-alone mode.                 */
} EXTVREG_0_CONTROL_SAEN_Enum;

/* ==========================================  EXTVREG_0 CONTROL WPULLEN [24..24]  =========================================== */
typedef enum {                                  /*!< EXTVREG_0_CONTROL_WPULLEN                                                 */
  EXTVREG_0_CONTROL_WPULLEN_DISABLED   = 0,     /*!< DISABLED : Disable the external regulator weak pull-up/down
                                                     resistor on the EXREGBD pin and weak pull-down resistor
                                                     on the EXREGOUT pin.                                                      */
  EXTVREG_0_CONTROL_WPULLEN_ENABLED    = 1,     /*!< ENABLED : Enable the external regulator weak pull-up/down resistor
                                                     on the EXREGBD pin and weak pull-down resistor on the EXREGOUT
                                                     pin.                                                                      */
} EXTVREG_0_CONTROL_WPULLEN_Enum;

/* ===========================================  EXTVREG_0 CONTROL FBLEN [25..25]  ============================================ */
typedef enum {                                  /*!< EXTVREG_0_CONTROL_FBLEN                                                   */
  EXTVREG_0_CONTROL_FBLEN_DISABLED     = 0,     /*!< DISABLED : Disable foldback limiting.                                     */
  EXTVREG_0_CONTROL_FBLEN_ENABLED      = 1,     /*!< ENABLED : Enable foldback limiting.                                       */
} EXTVREG_0_CONTROL_FBLEN_Enum;

/* ===========================================  EXTVREG_0 CONTROL PNSEL [26..26]  ============================================ */
typedef enum {                                  /*!< EXTVREG_0_CONTROL_PNSEL                                                   */
  EXTVREG_0_CONTROL_PNSEL_NPN          = 0,     /*!< NPN : Select NPN Mode.                                                    */
  EXTVREG_0_CONTROL_PNSEL_PNP          = 1,     /*!< PNP : Select PNP Mode.                                                    */
} EXTVREG_0_CONTROL_PNSEL_Enum;

/* ==========================================  EXTVREG_0 CONTROL FBPINSEL [27..27]  ========================================== */
typedef enum {                                  /*!< EXTVREG_0_CONTROL_FBPINSEL                                                */
  EXTVREG_0_CONTROL_FBPINSEL_EXREGSN   = 0,     /*!< EXREGSN : Use the input to the EXREGSN pin for foldback limiting.         */
  EXTVREG_0_CONTROL_FBPINSEL_VREGIN    = 1,     /*!< VREGIN : Use the input to the VREGIN pin for foldback limiting.           */
} EXTVREG_0_CONTROL_FBPINSEL_Enum;

/* ==========================================  EXTVREG_0 CONTROL EVREGEN [31..31]  =========================================== */
typedef enum {                                  /*!< EXTVREG_0_CONTROL_EVREGEN                                                 */
  EXTVREG_0_CONTROL_EVREGEN_DISABLED   = 0,     /*!< DISABLED : Disable the external regulator.                                */
  EXTVREG_0_CONTROL_EVREGEN_ENABLED    = 1,     /*!< ENABLED : Enable the external regulator.                                  */
} EXTVREG_0_CONTROL_EVREGEN_Enum;

/* ========================================================  CONFIG  ========================================================= */
/* ===========================================  EXTVREG_0 CONFIG IMINFINE [0..1]  ============================================ */
typedef enum {                                  /*!< EXTVREG_0_CONFIG_IMINFINE                                                 */
  EXTVREG_0_CONFIG_IMINFINE_0_UA       = 0,     /*!< 0_UA : Minimum current limit is IMIN current + 0 uA.                      */
  EXTVREG_0_CONFIG_IMINFINE_0P25_UA    = 1,     /*!< 0P25_UA : Minimum current limit is IMIN current + 0.25 uA.                */
  EXTVREG_0_CONFIG_IMINFINE_0P5_UA     = 2,     /*!< 0P5_UA : Minimum current limit is IMIN current + 0.50 uA.                 */
  EXTVREG_0_CONFIG_IMINFINE_0P75_UA    = 3,     /*!< 0P75_UA : Minimum current limit is IMIN current + 0.75 uA.                */
} EXTVREG_0_CONFIG_IMINFINE_Enum;

/* =============================================  EXTVREG_0 CONFIG IMIN [2..4]  ============================================== */
typedef enum {                                  /*!< EXTVREG_0_CONFIG_IMIN                                                     */
  EXTVREG_0_CONFIG_IMIN_1_UA           = 0,     /*!< 1_UA : Minimum current limit is 1 uA + IMINFINE current.                  */
  EXTVREG_0_CONFIG_IMIN_2_UA           = 1,     /*!< 2_UA : Minimum current limit is 2 uA + IMINFINE current.                  */
  EXTVREG_0_CONFIG_IMIN_3_UA           = 2,     /*!< 3_UA : Minimum current limit is 3 uA + IMINFINE current.                  */
  EXTVREG_0_CONFIG_IMIN_4_UA           = 3,     /*!< 4_UA : Minimum current limit is 4 uA + IMINFINE current.                  */
  EXTVREG_0_CONFIG_IMIN_5_UA           = 4,     /*!< 5_UA : Minimum current limit is 5 uA + IMINFINE current.                  */
  EXTVREG_0_CONFIG_IMIN_6_UA           = 5,     /*!< 6_UA : Minimum current limit is 6 uA + IMINFINE current.                  */
  EXTVREG_0_CONFIG_IMIN_7_UA           = 6,     /*!< 7_UA : Minimum current limit is 7 uA + IMINFINE current.                  */
  EXTVREG_0_CONFIG_IMIN_8_UA           = 7,     /*!< 8_UA : Minimum current limit is 8 uA + IMINFINE current.                  */
} EXTVREG_0_CONFIG_IMIN_Enum;

/* ===========================================  EXTVREG_0 CONFIG FBVOSEL [8..10]  ============================================ */
typedef enum {                                  /*!< EXTVREG_0_CONFIG_FBVOSEL                                                  */
  EXTVREG_0_CONFIG_FBVOSEL_0_V         = 0,     /*!< 0_V : Foldback voltage offset is 0 V.                                     */
  EXTVREG_0_CONFIG_FBVOSEL_0P5_V       = 1,     /*!< 0P5_V : Foldback voltage offset is 0.5 V.                                 */
  EXTVREG_0_CONFIG_FBVOSEL_1_V         = 2,     /*!< 1_V : Foldback voltage offset is 1 V.                                     */
  EXTVREG_0_CONFIG_FBVOSEL_1P5_V       = 3,     /*!< 1P5_V : Foldback voltage offset is 1.5 V.                                 */
  EXTVREG_0_CONFIG_FBVOSEL_2_V         = 4,     /*!< 2_V : Foldback voltage offset is 2 V.                                     */
  EXTVREG_0_CONFIG_FBVOSEL_2P5_V       = 5,     /*!< 2P5_V : Foldback voltage offset is 2.5 V.                                 */
  EXTVREG_0_CONFIG_FBVOSEL_3_V         = 6,     /*!< 3_V : Foldback voltage offset is 3 V.                                     */
  EXTVREG_0_CONFIG_FBVOSEL_3P5_V       = 7,     /*!< 3P5_V : Foldback voltage offset is 3.5 V.                                 */
} EXTVREG_0_CONFIG_FBVOSEL_Enum;

/* ===========================================  EXTVREG_0 CONFIG FBRATE [12..14]  ============================================ */
typedef enum {                                  /*!< EXTVREG_0_CONFIG_FBRATE                                                   */
  EXTVREG_0_CONFIG_FBRATE_4_UA_PER_V   = 0,     /*!< 4_UA_PER_V : Set the foldback rate to 4 uA/V.                             */
  EXTVREG_0_CONFIG_FBRATE_2_UA_PER_V   = 1,     /*!< 2_UA_PER_V : Set the foldback rate to 2 uA/V.                             */
  EXTVREG_0_CONFIG_FBRATE_1_UA_PER_V   = 2,     /*!< 1_UA_PER_V : Set the foldback rate to 1 uA/V.                             */
  EXTVREG_0_CONFIG_FBRATE_0P5_UA_PER_V = 3,     /*!< 0P5_UA_PER_V : Set the foldback rate to 0.5 uA/V.                         */
  EXTVREG_0_CONFIG_FBRATE_8_UA_PER_V   = 5,     /*!< 8_UA_PER_V : Set the foldback rate to 8 uA/V.                             */
  EXTVREG_0_CONFIG_FBRATE_16_UA_PER_V  = 6,     /*!< 16_UA_PER_V : Set the foldback rate to 16 uA/V.                           */
  EXTVREG_0_CONFIG_FBRATE_32_UA_PER_V  = 7,     /*!< 32_UA_PER_V : Set the foldback rate to 32 uA/V.                           */
} EXTVREG_0_CONFIG_FBRATE_Enum;

/* ============================================  EXTVREG_0 CONFIG IMAX [16..18]  ============================================= */
typedef enum {                                  /*!< EXTVREG_0_CONFIG_IMAX                                                     */
  EXTVREG_0_CONFIG_IMAX_2_UA           = 0,     /*!< 2_UA : Maximum current limit is 2 uA.                                     */
  EXTVREG_0_CONFIG_IMAX_3_UA           = 1,     /*!< 3_UA : Maximum current limit is 3 uA.                                     */
  EXTVREG_0_CONFIG_IMAX_4_UA           = 2,     /*!< 4_UA : Maximum current limit is 4 uA.                                     */
  EXTVREG_0_CONFIG_IMAX_5_UA           = 3,     /*!< 5_UA : Maximum current limit is 5 uA.                                     */
  EXTVREG_0_CONFIG_IMAX_6_UA           = 4,     /*!< 6_UA : Maximum current limit is 6 uA.                                     */
  EXTVREG_0_CONFIG_IMAX_7_UA           = 5,     /*!< 7_UA : Maximum current limit is 7 uA.                                     */
  EXTVREG_0_CONFIG_IMAX_8_UA           = 6,     /*!< 8_UA : Maximum current limit is 8 uA.                                     */
  EXTVREG_0_CONFIG_IMAX_9_UA           = 7,     /*!< 9_UA : Maximum current limit is 9 uA.                                     */
} EXTVREG_0_CONFIG_IMAX_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ============================================  EXTVREG_0 STATUS FBMAXF [0..0]  ============================================= */
typedef enum {                                  /*!< EXTVREG_0_STATUS_FBMAXF                                                   */
  EXTVREG_0_STATUS_FBMAXF_NOT_SET      = 0,     /*!< NOT_SET : Maximum foldback has not been reached.                          */
  EXTVREG_0_STATUS_FBMAXF_SET          = 1,     /*!< SET : Maximum foldback has been reached.                                  */
} EXTVREG_0_STATUS_FBMAXF_Enum;

/* =======================================================  CSCONTROL  ======================================================= */
/* ==========================================  EXTVREG_0 CSCONTROL ISNSEN [30..30]  ========================================== */
typedef enum {                                  /*!< EXTVREG_0_CSCONTROL_ISNSEN                                                */
  EXTVREG_0_CSCONTROL_ISNSEN_DISABLED  = 0,     /*!< DISABLED : Disable external regulator current sensing.                    */
  EXTVREG_0_CSCONTROL_ISNSEN_ENABLED   = 1,     /*!< ENABLED : Enable external regulator current sensing.                      */
} EXTVREG_0_CSCONTROL_ISNSEN_Enum;

/* ========================================  EXTVREG_0 CSCONTROL ADCISNSEN [31..31]  ========================================= */
typedef enum {                                  /*!< EXTVREG_0_CSCONTROL_ADCISNSEN                                             */
  EXTVREG_0_CSCONTROL_ADCISNSEN_DISABLED = 0,   /*!< DISABLED : Disable ADC current sensing.                                   */
  EXTVREG_0_CSCONTROL_ADCISNSEN_ENABLED = 1,    /*!< ENABLED : Enable ADC current sensing.                                     */
} EXTVREG_0_CSCONTROL_ADCISNSEN_Enum;

/* =======================================================  CSCONFIG  ======================================================== */
/* ==========================================  EXTVREG_0 CSCONFIG ISADCGAIN [0..2]  ========================================== */
typedef enum {                                  /*!< EXTVREG_0_CSCONFIG_ISADCGAIN                                              */
  EXTVREG_0_CSCONFIG_ISADCGAIN_16X     = 0,     /*!< 16X : ADC current sensing input gain is 16.                               */
  EXTVREG_0_CSCONFIG_ISADCGAIN_8X      = 1,     /*!< 8X : ADC current sensing input gain is 8.                                 */
  EXTVREG_0_CSCONFIG_ISADCGAIN_4X      = 2,     /*!< 4X : ADC current sensing input gain is 4.                                 */
  EXTVREG_0_CSCONFIG_ISADCGAIN_2X      = 3,     /*!< 2X : ADC current sensing input gain is 2.                                 */
  EXTVREG_0_CSCONFIG_ISADCGAIN_1X      = 4,     /*!< 1X : ADC current sensing input gain is 1.                                 */
} EXTVREG_0_CSCONFIG_ISADCGAIN_Enum;

/* ===========================================  EXTVREG_0 CSCONFIG ISOGAIN [3..5]  =========================================== */
typedef enum {                                  /*!< EXTVREG_0_CSCONFIG_ISOGAIN                                                */
  EXTVREG_0_CSCONFIG_ISOGAIN_16X       = 0,     /*!< 16X : External regulator current sensing gain is 16.                      */
  EXTVREG_0_CSCONFIG_ISOGAIN_8X        = 1,     /*!< 8X : External regulator current sensing gain is 8.                        */
  EXTVREG_0_CSCONFIG_ISOGAIN_4X        = 2,     /*!< 4X : External regulator current sensing gain is 4.                        */
  EXTVREG_0_CSCONFIG_ISOGAIN_2X        = 3,     /*!< 2X : External regulator current sensing gain is 2.                        */
  EXTVREG_0_CSCONFIG_ISOGAIN_1X        = 4,     /*!< 1X : External regulator current sensing gain is 1.                        */
} EXTVREG_0_CSCONFIG_ISOGAIN_Enum;

/* ===========================================  EXTVREG_0 CSCONFIG ISINSEL [6..7]  =========================================== */
typedef enum {                                  /*!< EXTVREG_0_CSCONFIG_ISINSEL                                                */
  EXTVREG_0_CSCONFIG_ISINSEL_MODE0     = 0,     /*!< MODE0 : Select external regulator current sensing mode 0.                 */
  EXTVREG_0_CSCONFIG_ISINSEL_MODE1     = 1,     /*!< MODE1 : Select external regulator current sensing mode 1.                 */
  EXTVREG_0_CSCONFIG_ISINSEL_MODE2     = 2,     /*!< MODE2 : Select external regulator current sensing mode 2.                 */
} EXTVREG_0_CSCONFIG_ISINSEL_Enum;



/* =========================================================================================================================== */
/* ================                                          VREG_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  VREG_0 CONTROL VBUSVLDF [0..0]  ============================================= */
typedef enum {                                  /*!< VREG_0_CONTROL_VBUSVLDF                                                   */
  VREG_0_CONTROL_VBUSVLDF_NOT_SET      = 0,     /*!< NOT_SET : The current voltage on the VBUS pin is below the valid
                                                     threshold.                                                                */
  VREG_0_CONTROL_VBUSVLDF_SET          = 1,     /*!< SET : The current voltage on the VBUS pin is above the valid
                                                     threshold.                                                                */
} VREG_0_CONTROL_VBUSVLDF_Enum;

/* ==============================================  VREG_0 CONTROL SUSEN [1..1]  ============================================== */
typedef enum {                                  /*!< VREG_0_CONTROL_SUSEN                                                      */
  VREG_0_CONTROL_SUSEN_DISABLED        = 0,     /*!< DISABLED : Disable regulator suspend mode.                                */
  VREG_0_CONTROL_SUSEN_ENABLED         = 1,     /*!< ENABLED : Enable regulator suspend mode.                                  */
} VREG_0_CONTROL_SUSEN_Enum;

/* ==============================================  VREG_0 CONTROL BGDIS [5..5]  ============================================== */
typedef enum {                                  /*!< VREG_0_CONTROL_BGDIS                                                      */
  VREG_0_CONTROL_BGDIS_INACTIVE        = 0,     /*!< INACTIVE : Enable the voltage regulator band gap.                         */
  VREG_0_CONTROL_BGDIS_ACTIVE          = 1,     /*!< ACTIVE : Disable the voltage regulator band gap.                          */
} VREG_0_CONTROL_BGDIS_Enum;

/* =============================================  VREG_0 CONTROL SENSEEN [6..6]  ============================================= */
typedef enum {                                  /*!< VREG_0_CONTROL_SENSEEN                                                    */
  VREG_0_CONTROL_SENSEEN_DISABLED      = 0,     /*!< DISABLED : Disable VREGIN voltage sensing.                                */
  VREG_0_CONTROL_SENSEEN_ENABLED       = 1,     /*!< ENABLED : Enable VREGIN voltage sensing.                                  */
} VREG_0_CONTROL_SENSEEN_Enum;

/* ============================================  VREG_0 CONTROL VBUSIVLDI [7..7]  ============================================ */
typedef enum {                                  /*!< VREG_0_CONTROL_VBUSIVLDI                                                  */
  VREG_0_CONTROL_VBUSIVLDI_NOT_SET     = 0,     /*!< NOT_SET : The voltage on the VBUS pin has not dropped below
                                                     the valid threshold.                                                      */
  VREG_0_CONTROL_VBUSIVLDI_SET         = 1,     /*!< SET : The voltage on the VBUS pin dropped below the valid threshold
                                                     since the last time this bit was cleared.                                 */
} VREG_0_CONTROL_VBUSIVLDI_Enum;

/* ===========================================  VREG_0 CONTROL VBUSIVLDIEN [8..8]  =========================================== */
typedef enum {                                  /*!< VREG_0_CONTROL_VBUSIVLDIEN                                                */
  VREG_0_CONTROL_VBUSIVLDIEN_DISABLED  = 0,     /*!< DISABLED : Disable the VBUS invalid interrupt.                            */
  VREG_0_CONTROL_VBUSIVLDIEN_ENABLED   = 1,     /*!< ENABLED : Enable the VBUS invalid interrupt.                              */
} VREG_0_CONTROL_VBUSIVLDIEN_Enum;

/* ============================================  VREG_0 CONTROL VREGDIS [31..31]  ============================================ */
typedef enum {                                  /*!< VREG_0_CONTROL_VREGDIS                                                    */
  VREG_0_CONTROL_VREGDIS_INACTIVE      = 0,     /*!< INACTIVE : Enable the voltage regulator.                                  */
  VREG_0_CONTROL_VREGDIS_ACTIVE        = 1,     /*!< ACTIVE : Disable the voltage regulator.                                   */
} VREG_0_CONTROL_VREGDIS_Enum;



/* =========================================================================================================================== */
/* ================                                           LDO_0                                           ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* =============================================  LDO_0 CONTROL LDOIBIAS [1..1]  ============================================= */
typedef enum {                                  /*!< LDO_0_CONTROL_LDOIBIAS                                                    */
  LDO_0_CONTROL_LDOIBIAS_HIGHBIAS      = 0,     /*!< HIGHBIAS : Select high bias.                                              */
  LDO_0_CONTROL_LDOIBIAS_LOWBIAS       = 1,     /*!< LOWBIAS : Select low bias (AHB frequency <= 2.5 MHz).                     */
} LDO_0_CONTROL_LDOIBIAS_Enum;

/* =============================================  LDO_0 CONTROL LDOAEN [31..31]  ============================================= */
typedef enum {                                  /*!< LDO_0_CONTROL_LDOAEN                                                      */
  LDO_0_CONTROL_LDOAEN_DISABLE         = 0,     /*!< DISABLE : LDO0 analog output disabled.                                    */
  LDO_0_CONTROL_LDOAEN_ENABLE          = 1,     /*!< ENABLE : LDO0 analog output enabled.                                      */
} LDO_0_CONTROL_LDOAEN_Enum;



/* =========================================================================================================================== */
/* ================                                         WDTIMER_0                                         ================ */
/* =========================================================================================================================== */

/* ========================================================  CONTROL  ======================================================== */
/* ============================================  WDTIMER_0 CONTROL EWIEN [0..0]  ============================================= */
typedef enum {                                  /*!< WDTIMER_0_CONTROL_EWIEN                                                   */
  WDTIMER_0_CONTROL_EWIEN_DISABLED     = 0,     /*!< DISABLED : Disable the early warning interrupt (EWI).                     */
  WDTIMER_0_CONTROL_EWIEN_ENABLED      = 1,     /*!< ENABLED : Enable the early warning interrupt (EWI).                       */
} WDTIMER_0_CONTROL_EWIEN_Enum;

/* ============================================  WDTIMER_0 CONTROL DBGMD [1..1]  ============================================= */
typedef enum {                                  /*!< WDTIMER_0_CONTROL_DBGMD                                                   */
  WDTIMER_0_CONTROL_DBGMD_RUN          = 0,     /*!< RUN : The WDTIMER module will continue to operate while the
                                                     core is halted in debug mode.                                             */
  WDTIMER_0_CONTROL_DBGMD_HALT         = 1,     /*!< HALT : A debug breakpoint will cause the WDTIMER module to halt.          */
} WDTIMER_0_CONTROL_DBGMD_Enum;

/* ========================================================  STATUS  ========================================================= */
/* ============================================  WDTIMER_0 STATUS KEYSTS [0..0]  ============================================= */
typedef enum {                                  /*!< WDTIMER_0_STATUS_KEYSTS                                                   */
  WDTIMER_0_STATUS_KEYSTS_IDLE         = 0,     /*!< IDLE : No keys have been processed by the interface.                      */
  WDTIMER_0_STATUS_KEYSTS_READY        = 1,     /*!< READY : The attention key has been received and the module is
                                                     awaiting a command.                                                       */
} WDTIMER_0_STATUS_KEYSTS_Enum;

/* ============================================  WDTIMER_0 STATUS PRIVSTS [1..1]  ============================================ */
typedef enum {                                  /*!< WDTIMER_0_STATUS_PRIVSTS                                                  */
  WDTIMER_0_STATUS_PRIVSTS_READ_ONLY   = 0,     /*!< READ_ONLY : The watchdog timer registers are currently read-only.         */
  WDTIMER_0_STATUS_PRIVSTS_READ_WRITE  = 1,     /*!< READ_WRITE : A write transaction can be performed on the module
                                                     registers.                                                                */
} WDTIMER_0_STATUS_PRIVSTS_Enum;

/* ==============================================  WDTIMER_0 STATUS EWI [2..2]  ============================================== */
typedef enum {                                  /*!< WDTIMER_0_STATUS_EWI                                                      */
  WDTIMER_0_STATUS_EWI_NOT_SET         = 0,     /*!< NOT_SET : Read: An early warning match did not occur. Write:
                                                     Clear the early warning interrupt.                                        */
  WDTIMER_0_STATUS_EWI_SET             = 1,     /*!< SET : Read: An early warning match occurred and the interrupt
                                                     is pending. Write: Force a watchdog timer early warning
                                                     interrupt to occur.                                                       */
} WDTIMER_0_STATUS_EWI_Enum;

/* =============================================  WDTIMER_0 STATUS RTHF [3..3]  ============================================== */
typedef enum {                                  /*!< WDTIMER_0_STATUS_RTHF                                                     */
  WDTIMER_0_STATUS_RTHF_LT             = 0,     /*!< LT : The counter is currently less than the reset threshold
                                                     (RTH) value.                                                              */
  WDTIMER_0_STATUS_RTHF_GTE            = 1,     /*!< GTE : The counter is currently greater than or equal to the
                                                     reset threshold (RTH) value.                                              */
} WDTIMER_0_STATUS_RTHF_Enum;

/* ============================================  WDTIMER_0 STATUS UPDSTS [4..4]  ============================================= */
typedef enum {                                  /*!< WDTIMER_0_STATUS_UPDSTS                                                   */
  WDTIMER_0_STATUS_UPDSTS_IDLE         = 0,     /*!< IDLE : An update completed or is not pending. The EWTH and RTH
                                                     fields can be written.                                                    */
  WDTIMER_0_STATUS_UPDSTS_UPDATING     = 1,     /*!< UPDATING : An update of the threshold register is occurring.
                                                     The EWTH and RTH fields should not be modified until hardware
                                                     clears UPDSTS to 0.                                                       */
} WDTIMER_0_STATUS_UPDSTS_Enum;

/* =======================================================  THRESHOLD  ======================================================= */
/* ========================================================  WDTKEY  ========================================================= */
/* ==============================================  WDTIMER_0 WDTKEY KEY [0..7]  ============================================== */
typedef enum {                                  /*!< WDTIMER_0_WDTKEY_KEY                                                      */
  WDTIMER_0_WDTKEY_KEY_ATTN            = 165,   /*!< ATTN : Attention key to start the command sequence.                       */
  WDTIMER_0_WDTKEY_KEY_RESET           = 204,   /*!< RESET : Reset the watchdog timer.                                         */
  WDTIMER_0_WDTKEY_KEY_DISABLE         = 221,   /*!< DISABLE : Disable the watchdog timer.                                     */
  WDTIMER_0_WDTKEY_KEY_START           = 238,   /*!< START : Start the watchdog timer.                                         */
  WDTIMER_0_WDTKEY_KEY_WRITE           = 241,   /*!< WRITE : Allow one write access to the module registers.                   */
  WDTIMER_0_WDTKEY_KEY_LOCK            = 255,   /*!< LOCK : Lock the module from any other writes until the next
                                                     system reset.                                                             */
} WDTIMER_0_WDTKEY_KEY_Enum;


/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* SIM3U167_B_H */


/** @} */ /* End of group SIM3U167_B */

/** @} */ /* End of group  */
